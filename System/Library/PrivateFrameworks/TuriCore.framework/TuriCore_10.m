void sub_21827A6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,std::locale a40)
{
  void *v40;
  int v41;
  uint64_t v42;

  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  if (*(char *)(v42 - 137) < 0)
  {
    operator delete(*(void **)(v42 - 160));
    if ((v41 & 1) == 0)
    {
LABEL_8:
      if (a36 < 0)
        operator delete(a31);
      *(_QWORD *)(v42 - 160) = &a37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 160));
      turi::csv_line_tokenizer::~csv_line_tokenizer((void **)&a40.__locale_);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x218]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v40);
  goto LABEL_8;
}

_QWORD *turi::unity_sframe::construct_from_planner_node(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL4 v18;
  _BOOL4 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int *v23;
  file_logger *v24;
  file_logger *started;
  _QWORD *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *result;
  uint64_t v41;
  _QWORD *exception;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  void **v50;
  _OWORD v51[2];
  __int128 v52;
  void *__p[2];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _BYTE v57[24];
  _BYTE v58[11];
  char v59;
  void *v60;
  char v61;
  _QWORD v62[4];

  v62[3] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v56 = 0;
  *(_QWORD *)v58 = 0;
  *(_DWORD *)&v58[7] = 0x10000;
  v59 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v60, "");
  memset(v62, 0, 24);
  v6 = a2[1];
  v47 = *a2;
  v48 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  turi::query_eval::optimization_engine::optimize_planner_graph(&v47, (uint64_t)&v56, &v49);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 24, &v49);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(std::__shared_weak_count **)(a1 + 32);
  v45 = *(_QWORD *)(a1 + 24);
  v46 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = turi::query_eval::planner::online_materialization_recommended((uint64_t)&v49, &v45);
  v19 = v18;
  v20 = v46;
  if (!v46)
    goto LABEL_21;
  v21 = (unint64_t *)&v46->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (!v19)
      goto LABEL_52;
  }
  else
  {
LABEL_21:
    if (!v18)
      goto LABEL_52;
  }
  v23 = (int *)global_logger();
  if (v23[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v23))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v24 = (file_logger *)global_logger();
    started = file_logger::start_stream(v24, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "construct_from_planner_node", 310, 1);
    v26 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v26 && *((_BYTE *)v26 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)"Forced materialization of SFrame due to size of lazy graph: ", 60);
    v27 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v27)
    {
      if (*((_BYTE *)v27 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(v27[2] - 24) + 16));
        v28 = std::locale::use_facet((const std::locale *)&v49, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale((std::locale *)&v49);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v29 = *(std::__shared_weak_count **)(a1 + 32);
  v43 = *(_QWORD *)(a1 + 24);
  v44 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v51, 0, sizeof(v51));
  BYTE11(v52) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((_QWORD *)&v54 + 1) = 0;
  v55 = 0uLL;
  turi::query_eval::planner::materialize_as_planner_node(&v43, (uint64_t *)v51, &v49);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 24, &v49);
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v50 = (void **)&v54 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v50);
  if (SBYTE7(v54) < 0)
    operator delete(__p[0]);
  v35 = (_QWORD *)v52;
  if ((_OWORD *)v52 == (_OWORD *)((char *)v51 + 8))
  {
    v36 = 4;
    v35 = (_QWORD *)v51 + 1;
    goto LABEL_46;
  }
  if ((_QWORD)v52)
  {
    v36 = 5;
LABEL_46:
    (*(void (**)(_QWORD *))(*v35 + 8 * v36))(v35);
  }
  v37 = v44;
  if (v44)
  {
    v38 = (unint64_t *)&v44->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_52:
  if (a1 + 40 != a3)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 40), *(std::string **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  *(_QWORD *)&v49 = v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  if (v61 < 0)
    operator delete(v60);
  result = *(_QWORD **)v58;
  if (*(_BYTE **)v58 == v57)
  {
    v41 = 4;
    result = v57;
  }
  else
  {
    if (!*(_QWORD *)v58)
      return result;
    v41 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v41))(result);
}

void sub_21827C018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  std::locale::~locale(&a16);
  turi::query_eval::materialize_options::~materialize_options((void **)(v23 - 168));
  _Unwind_Resume(a1);
}

void turi::unity_sframe::save_frame(turi::unity_sframe *a1, uint64_t a2)
{
  size_t v3;
  void **v4;
  void **v5;
  void *v6[2];
  char v7;
  void *v8[2];
  unsigned __int8 v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  std::string v14;
  _QWORD v15[5];
  _QWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v15[0] = -1;
  memset(&v15[1], 0, 24);
  v15[4] = v16;
  v16[0] = 0;
  v16[1] = 0;
  v21 = 0;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v14 = *(std::string *)a2;
  turi::dir_archive::open_directory_for_write((uint64_t)v15, (uint64_t)&v14, 0);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v12, "contents");
  std::string::basic_string[abi:ne180100]<0>(__p, "sframe");
  turi::dir_archive::set_metadata((uint64_t)v15, (uint64_t)v12, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  turi::dir_archive::get_next_write_prefix((turi::dir_archive *)v15, (unsigned __int8 *)v8);
  if ((v9 & 0x80u) == 0)
    v3 = v9;
  else
    v3 = (size_t)v8[1];
  v4 = v6;
  std::string::basic_string[abi:ne180100]((uint64_t)v6, v3 + 10);
  if (v7 < 0)
    v4 = (void **)v6[0];
  if (v3)
  {
    if ((v9 & 0x80u) == 0)
      v5 = v8;
    else
      v5 = (void **)v8[0];
    memmove(v4, v5, v3);
  }
  strcpy((char *)v4 + v3, ".frame_idx");
  turi::unity_sframe::save_frame_by_index_file(a1, (uint64_t)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  turi::dir_archive::close((turi::dir_archive *)v15);
  if ((char)v9 < 0)
    operator delete(v8[0]);
  turi::dir_archive::~dir_archive((turi::dir_archive *)v15);
}

void sub_21827C2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (a2)
  {
    if (a14 < 0)
      operator delete(__p);
    if (a20 < 0)
      operator delete(a15);
    turi::dir_archive::~dir_archive((turi::dir_archive *)&a40);
    __cxa_begin_catch(exception_object);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::save_frame_by_index_file(turi::unity_sframe *a1, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::locale::__imp *locale;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *exception;
  std::string __p;
  std::locale v16;
  std::__shared_weak_count *v17;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "save_frame_by_index_file", 345, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::unity_sframe::get_underlying_sframe(a1, &v16);
  locale = v16.__locale_;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::sframe::save(locale, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_21827C570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::save_frame_reference(turi::unity_sframe *a1, uint64_t a2)
{
  unint64_t *v3;
  size_t v4;
  std::string *v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;
  unint64_t *v11;
  std::__shared_weak_count *v12;
  void *v13[2];
  unsigned __int8 v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  std::string v19;
  _QWORD v20[5];
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v20[0] = -1;
  memset(&v20[1], 0, 24);
  v20[4] = v21;
  v21[0] = 0;
  v21[1] = 0;
  v26 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v19 = *(std::string *)a2;
  turi::dir_archive::open_directory_for_write((uint64_t)v20, (uint64_t)&v19, 0);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v17, "contents");
  std::string::basic_string[abi:ne180100]<0>(__p, "sframe");
  turi::dir_archive::set_metadata((uint64_t)v20, (uint64_t)v17, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  turi::dir_archive::get_next_write_prefix((turi::dir_archive *)v20, (unsigned __int8 *)v13);
  turi::unity_sframe::get_underlying_sframe(a1, &v11);
  v3 = v11;
  if ((v14 & 0x80u) == 0)
    v4 = v14;
  else
    v4 = (size_t)v13[1];
  v5 = &v10;
  std::string::basic_string[abi:ne180100]((uint64_t)&v10, v4 + 10);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v10.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if ((v14 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (void **)v13[0];
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".frame_idx");
  turi::sframe_save_weak_reference(v3, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  turi::dir_archive::close((turi::dir_archive *)v20);
  if ((char)v14 < 0)
    operator delete(v13[0]);
  turi::dir_archive::~dir_archive((turi::dir_archive *)v20);
}

void sub_21827C7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a2)
  {
    if (a22 < 0)
      operator delete(__p);
    turi::dir_archive::~dir_archive((turi::dir_archive *)&a42);
    __cxa_begin_catch(exception_object);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::get_underlying_sframe(turi::unity_sframe *this@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *exception;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  void **v30;
  _OWORD v31[2];
  __int128 v32;
  void *__p[2];
  __int128 v34;
  __int128 v35;
  std::locale v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "get_underlying_sframe", 645, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v36);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (!*((_QWORD *)this + 8))
  {
    if (((*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 304))(this) & 1) == 0)
      (*(void (**)(turi::unity_sframe *))(*(_QWORD *)this + 296))(this);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v27 = *((_QWORD *)this + 3);
    v28 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v31, 0, sizeof(v31));
    BYTE11(v32) = 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    *((_QWORD *)&v34 + 1) = 0;
    v35 = 0uLL;
    turi::query_eval::planner::materialize((uint64_t)&v27, (uint64_t)v31, (const turi::sframe *)&v36);
    std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe,void>((uint64_t)&v36, &v29);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)this + 64, &v29);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    turi::sframe::~sframe((turi::sframe *)&v36);
    v30 = (void **)&v34 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
    if (SBYTE7(v34) < 0)
      operator delete(__p[0]);
    v16 = (_QWORD *)v32;
    if ((_OWORD *)v32 == (_OWORD *)((char *)v31 + 8))
    {
      v17 = 4;
      v16 = (_QWORD *)v31 + 1;
    }
    else
    {
      if (!(_QWORD)v32)
        goto LABEL_27;
      v17 = 5;
    }
    (*(void (**)(_QWORD *))(*v16 + 8 * v17))(v16);
LABEL_27:
    v18 = v28;
    if (v28)
    {
      v19 = (unint64_t *)&v28->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if ((*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 112))(this))
    {
      v21 = 0;
      v22 = 0;
      do
      {
        turi::sframe::set_column_name(*((_QWORD *)this + 8), v22++, (std::string *)(*((_QWORD *)this + 5) + v21));
        v21 += 24;
      }
      while (v22 < (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 112))(this));
    }
  }
  v23 = *((_QWORD *)this + 9);
  *a2 = *((_QWORD *)this + 8);
  a2[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
}

void sub_21827CC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27)
{
  turi::sframe::~sframe((turi::sframe *)&a27);
  turi::query_eval::materialize_options::~materialize_options(&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::save(turi::unity_sframe *this, turi::oarchive *a2)
{
  unint64_t v4;
  _BYTE *v5;
  size_t v6;
  void **v7;
  void **v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  BOOL v12;
  std::vector<char>::size_type v13;
  void *__p[2];
  char v15;
  void *v16[2];
  unsigned __int8 v17;

  LOBYTE(v16[0]) = 1;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v4)
    {
      v9 = 2 * v4 + 2;
      *((_QWORD *)a2 + 5) = v9;
      v10 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v10)
      {
        v5 = (_BYTE *)*v10;
        v11 = v10[1] - *v10;
        v12 = v9 >= v11;
        v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v13);
          v5 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v12)
        {
          v10[1] = &v5[v9];
        }
      }
      else
      {
        v5 = malloc_type_realloc(*((void **)a2 + 3), v9, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v5;
    }
    else
    {
      v5 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v5[(*((_QWORD *)a2 + 4))++] = 1;
  }
  turi::oarchive::get_prefix(a2, (unsigned __int8 *)v16);
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (size_t)v16[1];
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 10);
  if (v15 < 0)
    v7 = (void **)__p[0];
  if (v6)
  {
    if ((v17 & 0x80u) == 0)
      v8 = v16;
    else
      v8 = (void **)v16[0];
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".frame_idx");
  turi::unity_sframe::save_frame_by_index_file(this, (uint64_t)__p);
  if (v15 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
}

void sub_21827CE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::load(turi::unity_sframe *this, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v7[296];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(turi::unity_sframe *))(*(_QWORD *)this + 56))(this);
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 3);
    v6 = *(unsigned __int8 *)(v4 + v5);
    *((_QWORD *)a2 + 3) = v5 + 1;
    if (v6)
    {
      turi::sframe::sframe((turi::sframe *)v7);
      turi::sframe::load((turi::sframe *)v7, a2);
      turi::unity_sframe::construct_from_sframe(this, (const turi::sframe *)v7);
      turi::sframe::~sframe((turi::sframe *)v7);
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_21827CF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::clear(turi::unity_sframe *this)
{
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)this + 3);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 5);
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)this + 8);
}

uint64_t turi::unity_sframe::size(turi::unity_sframe *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v15 = *((_QWORD *)this + 3);
  v16 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = turi::query_eval::infer_planner_node_length((uint64_t)&v15);
  v6 = v16;
  if (v16)
  {
    v7 = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v5 == -1)
  {
    turi::unity_sframe::get_underlying_sframe(this, &v13);
    if (*(_BYTE *)(v13 + 288))
      v5 = *(_QWORD *)(v13 + 32);
    else
      v5 = 0;
    v10 = v14;
    if (v14)
    {
      v11 = (unint64_t *)&v14->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return v5;
}

void sub_21827D094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t turi::unity_sframe::num_columns(turi::unity_sframe *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3);
}

unint64_t turi::unity_sframe::column_index(uint64_t a1, unsigned __int8 **a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  _QWORD *exception;
  std::locale v13;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "column_index", 386, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v10 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2);
  if (v10 == *(_QWORD *)(a1 + 48))
  {
    v13.__locale_ = (std::locale::__imp *)a2;
    turi::unity_sframe::column_index(std::string const&)::$_0::operator()();
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v10 - *(_QWORD *)(a1 + 40)) >> 3);
}

void sub_21827D254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sframe::column_name(turi::unity_sframe *this, unint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  _QWORD *exception;
  std::locale v13;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "column_name", 396, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v10 = *((_QWORD *)this + 5);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 6) - v10) >> 3) <= a2)
    std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
  return v10 + 24 * a2;
}

void sub_21827D3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL turi::unity_sframe::contains_column(turi::unity_sframe *a1, unsigned __int8 **a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _BOOL8 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *exception;
  std::locale v16;
  std::__shared_weak_count *v17;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "contains_column", 403, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::unity_sframe::get_underlying_sframe(a1, &v16);
  v10 = turi::sframe::contains_column((uint64_t)v16.__locale_, a2);
  v11 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_21827D5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::select_column(turi::unity_sframe *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  int *v12;
  file_logger *v13;
  file_logger *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  uint64_t v19;
  _QWORD *exception;
  _QWORD *v21;
  std::locale v22;
  uint64_t v23;
  std::string v24;
  std::locale *v25;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      goto LABEL_24;
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "select_column", 410, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v22, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = (int *)global_logger();
  if (v12[169] > 1)
    goto LABEL_22;
  if (cppipc::must_cancel((cppipc *)v12))
LABEL_24:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v13 = (file_logger *)global_logger();
  v14 = file_logger::start_stream(v13, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "select_column", 413, 1);
  v15 = pthread_getspecific(*((_QWORD *)v14 + 74));
  if (v15 && *((_BYTE *)v15 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Select Column ", 14);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v24 = *(std::string *)a2;
  v16 = file_logger::operator<<<std::string>((uint64_t)v14, (uint64_t)&v24);
  v17 = pthread_getspecific(*(_QWORD *)(v16 + 592));
  if (v17)
  {
    if (*((_BYTE *)v17 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[2] - 24) + 16));
      v18 = std::locale::use_facet(&v22, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale(&v22);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v16);
      if (*(_DWORD *)(v16 + 600) == 7)
      {
        __print_back_trace();
        v21 = __cxa_allocate_exception(8uLL);
        *v21 = "LOG_FATAL encountered";
        __cxa_throw(v21, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
LABEL_22:
  (*(void (**)(std::locale *__return_ptr, turi::unity_sframe *))(*(_QWORD *)a1 + 128))(&v22, a1);
  v19 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v22.__locale_, v23, (unsigned __int8 **)a2);
  if (v19 == v23)
  {
    v25 = (std::locale *)a2;
    turi::unity_sframe::select_column(std::string const&)::$_0::operator()();
  }
  turi::unity_sframe::select_column(a1, 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v19 - (unint64_t)v22.__locale_) >> 3), a3);
  v25 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

void sub_21827D8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::locale::~locale(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::select_column(turi::unity_sframe *this@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  turi::unity_sarray *v19;
  std::locale::__imp *locale;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *exception;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::locale v32[2];
  char *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "select_column", 430, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(v32, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v32);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v34 = *((_QWORD *)this + 3);
  v35 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (char *)operator new(8uLL);
  v32[0].__locale_ = (std::locale::__imp *)v15;
  *(_QWORD *)v15 = a2;
  v32[1].__locale_ = (std::locale::__imp *)(v15 + 8);
  v33 = v15 + 8;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v34, (uint64_t **)v32, &v36);
  if (v32[0].__locale_)
  {
    v32[1] = v32[0];
    operator delete(v32[0].__locale_);
  }
  v16 = v35;
  if (v35)
  {
    v17 = (unint64_t *)&v35->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (turi::unity_sarray *)operator new();
  turi::unity_sarray::unity_sarray(v19);
  std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>((uint64_t *)v32, (uint64_t)v19);
  locale = v32[0].__locale_;
  v30 = v36;
  v31 = v37;
  if (v37)
  {
    v21 = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  turi::unity_sarray::construct_from_planner_node(locale, &v30);
  v23 = v31;
  if (v31)
  {
    v24 = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *a3 = *(_OWORD *)&v32[0].__locale_;
  v26 = v37;
  if (v37)
  {
    v27 = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_21827DBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  std::locale::~locale(&a11);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::select_columns(_QWORD *a1@<X0>, unsigned __int8 ***a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *exception;
  std::locale v13;
  std::locale::__imp *locale;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "select_columns", 442, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::unity_sframe::_convert_column_names_to_indices((uint64_t)a1, a2, (uint64_t)&v13);
  turi::unity_sframe::select_columns(a1, (unint64_t **)&v13, a3);
  if (v13.__locale_)
  {
    locale = v13.__locale_;
    operator delete(v13.__locale_);
  }
}

void sub_21827DDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

double turi::unity_sframe::select_columns@<D0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  turi::unity_sframe *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  double result;
  _QWORD *exception;
  uint64_t v38[2];
  __int128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::vector<std::string> *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::vector<std::string> v45;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "select_columns", 464, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet((const std::locale *)&v45, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)&v45);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = a2[1];
  if (*a2 == v12)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v45);
    result = *(double *)&v45.__begin_;
    *a3 = *(_OWORD *)&v45.__begin_;
  }
  else
  {
    std::vector<std::string>::vector(&v45, v12 - *a2);
    std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<unsigned long const*>>((uint64_t)&v42, *a2, a2[1]);
    v13 = (char *)a2[1] - (char *)*a2;
    v14 = v44;
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v42, v43);
    if (v14 != v13 >> 3)
      turi::unity_sframe::select_columns(std::vector<unsigned long> const&)::$_0::operator()();
    v15 = *a2;
    if (a2[1] != *a2)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = v15[v17];
        v19 = a1[5];
        if (v18 >= 0xAAAAAAAAAAAAAAABLL * ((a1[6] - v19) >> 3))
          turi::unity_sframe::select_columns(std::vector<unsigned long> const&)::$_1::operator()();
        std::string::operator=(&v45.__begin_[v16], (const std::string *)(v19 + 24 * v18));
        ++v17;
        v15 = *a2;
        ++v16;
      }
      while (v17 < a2[1] - *a2);
    }
    v20 = (std::__shared_weak_count *)a1[4];
    v40 = a1[3];
    v41 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v40, (uint64_t **)a2, &v42);
    v23 = v41;
    if (v41)
    {
      v24 = (unint64_t *)&v41->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (turi::unity_sframe *)operator new();
    turi::unity_sframe::unity_sframe(v26);
    std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)&v39, (uint64_t)v26);
    v27 = v39;
    v28 = v43;
    v38[0] = (uint64_t)v42;
    v38[1] = (uint64_t)v43;
    if (v43)
    {
      v29 = (unint64_t *)&v43->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    turi::unity_sframe::construct_from_planner_node(v27, v38, (uint64_t)&v45);
    if (v28)
    {
      v31 = (unint64_t *)&v28->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    *a3 = v39;
    v33 = v43;
    if (v43)
    {
      v34 = (unint64_t *)&v43->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v42 = &v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  }
  return result;
}

void sub_21827E19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19)
{
  std::locale::~locale(&a19);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::_convert_column_names_to_indices(uint64_t a1@<X0>, unsigned __int8 ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *i;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26[2];

  v26[0] = 0;
  v26[1] = 0;
  v25 = (uint64_t *)v26;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v4 = (char *)a2[1] - (char *)*a2;
  if (v4)
  {
    std::vector<unsigned long>::reserve((void **)a3, 0xAAAAAAAAAAAAAAABLL * (v4 >> 3));
    v7 = *a2;
    v8 = a2[1];
    if (*a2 != v8)
    {
      do
      {
        v9 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v7);
        if (v9 == *(_QWORD *)(a1 + 48))
        {
          v24 = (unint64_t)v7;
          turi::unity_sframe::_convert_column_names_to_indices(std::vector<std::string> const&)::$_0::operator()();
        }
        v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *(_QWORD *)(a1 + 40)) >> 3);
        v24 = v10;
        for (i = v26[0]; i; i = (_QWORD *)*i)
        {
          v12 = i[4];
          if (v10 >= v12)
          {
            if (v12 >= v10)
              turi::unity_sframe::_convert_column_names_to_indices(std::vector<std::string> const&)::$_1::operator()();
            ++i;
          }
        }
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(&v25, &v24, (uint64_t *)&v24);
        v14 = *(unint64_t **)(a3 + 8);
        v13 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v14 >= v13)
        {
          v16 = *(unint64_t **)a3;
          v17 = ((uint64_t)v14 - *(_QWORD *)a3) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v19 = v13 - (_QWORD)v16;
          if (v19 >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3 + 16, v20);
            v16 = *(unint64_t **)a3;
            v14 = *(unint64_t **)(a3 + 8);
          }
          else
          {
            v21 = 0;
          }
          v22 = (unint64_t *)&v21[8 * v17];
          *v22 = v24;
          v15 = v22 + 1;
          while (v14 != v16)
          {
            v23 = *--v14;
            *--v22 = v23;
          }
          *(_QWORD *)a3 = v22;
          *(_QWORD *)(a3 + 8) = v15;
          *(_QWORD *)(a3 + 16) = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v14 = v24;
          v15 = v14 + 1;
        }
        *(_QWORD *)(a3 + 8) = v15;
        v7 += 3;
      }
      while (v7 != v8);
    }
  }
  else
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a3, 0, 0, 0);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v25, v26[0]);
}

void sub_21827E438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::copy(turi::unity_sframe *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[3];
  uint64_t v23[2];
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v26);
  v4 = *((_QWORD *)this + 3);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v22[0] = v4;
  v22[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node&,void>(v4, &v24);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = (std::__shared_weak_count *)v25;
  v11 = v26;
  v23[0] = v24;
  v23[1] = v25;
  if (v25)
  {
    v12 = (unint64_t *)(v25 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  (*(void (**)(_QWORD *__return_ptr, turi::unity_sframe *))(*(_QWORD *)this + 128))(v22, this);
  turi::unity_sframe::construct_from_planner_node(v11, v23, (uint64_t)v22);
  v27 = (void **)v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *a2 = v26;
  v26 = 0uLL;
  v16 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v17 = (unint64_t *)(v25 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_21827E614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  *(_QWORD *)(v6 - 40) = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 40));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::add_column(turi::unity_sframe *a1, uint64_t *a2, uint64_t a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  std::string::size_type size;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *exception;
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::string *v49;
  std::string *v50;
  void **p_data;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::string v56;
  std::string v57;
  void ***v58;
  char v59;
  std::string v60;
  __int128 v61;

  *(_QWORD *)&v61 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "add_column", 502, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)&v57);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (!*a2)
    turi::unity_sframe::add_column(std::shared_ptr<turi::unity_sarray_base>,std::string const&)::$_0::operator()();
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v57 = *(std::string *)a3;
  size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v57.__r_.__value_.__l.__size_;
  if (!size)
  {
    turi::unity_sframe::generate_next_column_name(a1, (uint64_t)&v56);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    v57 = v56;
  }
  (*(void (**)(std::string *__return_ptr, turi::unity_sframe *))(*(_QWORD *)a1 + 128))(&v56, a1);
  v13 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_, (unsigned __int8 **)a3);
  if (v13 != v56.__r_.__value_.__l.__size_)
  {
    v49 = (std::string *)a3;
    turi::unity_sframe::add_column(std::shared_ptr<turi::unity_sarray_base>,std::string const&)::$_1::operator()();
  }
  v15 = *a2;
  v14 = (std::__shared_weak_count *)a2[1];
  v54 = *a2;
  v55 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if ((*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)a1 + 112))(a1))
  {
    v18 = (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)a1 + 64))(a1);
    if (v18 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15))
    {
      v49 = (std::string *)a3;
      turi::unity_sframe::add_column(std::shared_ptr<turi::unity_sarray_base>,std::string const&)::$_2::operator()();
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)a1 + 4);
    v47 = *((_QWORD *)a1 + 3);
    v48 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    turi::unity_sarray::get_planner_node(v15, &v45);
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(&v47, &v45, &v60);
    v22 = v46;
    if (v46)
    {
      v23 = (unint64_t *)&v46->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v48;
    if (v48)
    {
      v26 = (unint64_t *)&v48->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    (*(void (**)(std::string **__return_ptr, turi::unity_sframe *))(*(_QWORD *)a1 + 128))(&v49, a1);
    v28 = v50;
    if (v50 >= (std::string *)p_data)
    {
      v30 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v49, (__int128 *)&v57);
    }
    else
    {
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v50, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
      }
      else
      {
        v29 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
        v50->__r_.__value_.__r.__words[2] = v57.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      v30 = v28 + 1;
    }
    v50 = v30;
    v34 = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
    v44 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
    if (v60.__r_.__value_.__l.__size_)
    {
      v35 = (unint64_t *)(v60.__r_.__value_.__l.__size_ + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    turi::unity_sframe::construct_from_planner_node((uint64_t)a1, (uint64_t *)&v44, (uint64_t)&v49);
    if (v34)
    {
      v37 = (unint64_t *)&v34->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v58 = (void ***)&v49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    v31 = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
    if (v60.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(v60.__r_.__value_.__l.__size_ + 8);
      do
        v33 = __ldaxr(v39);
      while (__stlxr(v33 - 1, v39));
      goto LABEL_64;
    }
  }
  else
  {
    turi::unity_sarray::get_planner_node(v15, &v52);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v60, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
    else
      v60 = v57;
    v49 = 0;
    v50 = 0;
    p_data = 0;
    v58 = (void ***)&v49;
    v59 = 0;
    v49 = (std::string *)operator new(0x18uLL);
    v50 = v49;
    p_data = (void **)&v49[1].__r_.__value_.__l.__data_;
    v50 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v60, &v61, v49);
    turi::unity_sframe::construct_from_planner_node((uint64_t)a1, &v52, (uint64_t)&v49);
    v58 = (void ***)&v49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    v31 = v53;
    if (v53)
    {
      v32 = (unint64_t *)&v53->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
LABEL_64:
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  v40 = v55;
  if (v55)
  {
    v41 = (unint64_t *)&v55->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v49 = &v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
}

void sub_21827EBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  *(_QWORD *)(v30 - 112) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 112));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v30 - 96);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  a15 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::add_column(std::shared_ptr<turi::unity_sarray_base>,std::string const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"data != nullptr", 15);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "operator()", 505, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::unity_sframe::add_column(std::shared_ptr<turi::unity_sarray_base>,std::string const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21827EDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::generate_next_column_name(turi::unity_sframe *this@<X0>, uint64_t a2@<X8>)
{
  std::string *p_str;
  std::string::size_type size;
  std::string *v5;
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  unint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  std::string __p;
  std::string v20;
  std::string __str;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(unsigned __int8 **__return_ptr))(*(_QWORD *)this + 128))(&v22);
  std::string::basic_string[abi:ne180100]<0>(&v20, "X");
  std::to_string(&__str, 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3) + 1);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v5 = std::string::append(&v20, (const std::string::value_type *)p_str, size);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v5->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v20, v22, v23);
  while (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(&v20, (unsigned __int8 *)a2))
  {
    std::string::append((std::string *)a2, ".");
    std::to_string(&__p, 1uLL);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = (const std::string::value_type *)a2;
    else
      v8 = *(const std::string::value_type **)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    v10 = std::string::insert(&__p, 0, v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(&v20, (unsigned __int8 *)&__str))
    {
      v12 = 2;
      do
      {
        std::to_string(&__p, v12);
        v13 = *(char *)(a2 + 23);
        if (v13 >= 0)
          v14 = (const std::string::value_type *)a2;
        else
          v14 = *(const std::string::value_type **)a2;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(a2 + 23);
        else
          v15 = *(_QWORD *)(a2 + 8);
        v16 = std::string::insert(&__p, 0, v14, v15);
        v17 = v16->__r_.__value_.__r.__words[0];
        v24[0] = v16->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
        v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str.__r_.__value_.__r.__words[0] = v17;
        __str.__r_.__value_.__l.__size_ = v24[0];
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v24 + 7);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v18;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v12;
      }
      while (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(&v20, (unsigned __int8 *)&__str));
    }
    std::string::operator=((std::string *)a2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v20);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_21827F0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 + 23) < 0)
    operator delete(*(void **)v30);
  a15 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::add_columns(_QWORD *a1, _QWORD *a2, std::vector<std::string> *a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::locale *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *exception;
  __int128 v33;
  _QWORD v34[3];
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::vector<std::string>::value_type __x;
  std::locale *v38;
  void **v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "add_columns", 548, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v41, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v41);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v41.__locale_ = 0;
  v42 = 0;
  v43 = 0;
  v12 = (_QWORD *)a2[1];
  v39 = 0;
  v40 = 0;
  v38 = 0;
  if (v12 == a2)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    v14 = v12;
    do
    {
      ++v13;
      v14 = (_QWORD *)v14[1];
    }
    while (v14 != a2);
  }
  std::vector<std::shared_ptr<turi::unity_sarray_base>>::__init_with_size[abi:ne180100]<std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>,std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>>((char *)&v38, v12, a2, v13);
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  std::vector<std::string>::resize(a3, a2[2], &__x);
  v15 = a1[3];
  v16 = (std::__shared_weak_count *)a1[4];
  v34[0] = v15;
  v34[1] = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node&,void>(v15, &v35);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*a1 + 128))(v34, a1);
  v21 = v38;
  if (v39 != (void **)v38)
  {
    v22 = 0;
    do
    {
      v23 = *(_OWORD *)&v21[2 * v22].__locale_;
      v33 = v23;
      if (*((_QWORD *)&v23 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      (*(void (**)(_QWORD *, __int128 *, std::string *))(*a1 + 200))(a1, &v33, &a3->__begin_[v22]);
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      ++v22;
      v21 = v38;
    }
    while (v22 < ((char *)v39 - (char *)v38) >> 4);
  }
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](a1 + 8);
  v44 = (void **)v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
  v29 = v36;
  if (v36)
  {
    v30 = (unint64_t *)&v36->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  v38 = &v41;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
}

void sub_21827F50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  uint64_t v25;

  std::locale::~locale((std::locale *)(v25 - 80));
  _Unwind_Resume(a1);
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz, std::vector<std::string>::const_reference __x)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v5;
  BOOL v6;
  std::vector<std::string>::size_type v7;
  std::string *v8;

  end = this->__end_;
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v6 = __sz >= v5;
  v7 = __sz - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::string>::__append(this, v7, __x);
  }
  else if (!v6)
  {
    v8 = &this->__begin_[__sz];
    while (end != v8)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    this->__end_ = v8;
  }
}

void turi::unity_sframe::set_column_name(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  int *v12;
  file_logger *v13;
  file_logger *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  unint64_t i;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  _QWORD *exception;
  _QWORD *v29;
  std::locale v30;
  std::string v31;
  std::locale *v32;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      goto LABEL_47;
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "set_column_name", 573, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v30, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = (int *)global_logger();
  if (v12[169] <= 1)
  {
    if (!cppipc::must_cancel((cppipc *)v12))
    {
      v13 = (file_logger *)global_logger();
      v14 = file_logger::start_stream(v13, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "set_column_name", 574, 1);
      v15 = pthread_getspecific(*((_QWORD *)v14 + 74));
      if (v15 && *((_BYTE *)v15 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Args: ", 6);
      v16 = file_logger::operator<<<unsigned long>((uint64_t)v14);
      v17 = pthread_getspecific(*(_QWORD *)(v16 + 592));
      if (v17 && *((_BYTE *)v17 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)",", 1);
      if ((char)a3[23] < 0)
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
      else
        v31 = *(std::string *)a3;
      v18 = file_logger::operator<<<std::string>(v16, (uint64_t)&v31);
      v19 = pthread_getspecific(*(_QWORD *)(v18 + 592));
      if (v19)
      {
        if (*((_BYTE *)v19 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(v19[2] - 24) + 16));
          v20 = std::locale::use_facet(&v30, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
          std::locale::~locale(&v30);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v18);
          if (*(_DWORD *)(v18 + 600) == 7)
          {
            __print_back_trace();
            v29 = __cxa_allocate_exception(8uLL);
            *v29 = "LOG_FATAL encountered";
            __cxa_throw(v29, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      goto LABEL_25;
    }
LABEL_47:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_25:
  if ((*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1) <= a2)
    turi::unity_sframe::set_column_name(unsigned long,std::string)::$_0::operator()();
  (*(void (**)(std::locale *__return_ptr, _QWORD *))(*a1 + 128))(&v30, a1);
  for (i = 0; i < (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1); ++i)
  {
    if (i != a2)
    {
      v22 = (unsigned __int8 *)v30.__locale_ + 24 * i;
      v23 = v22[23];
      if ((v23 & 0x80u) == 0)
        v24 = v22[23];
      else
        v24 = *((_QWORD *)v22 + 1);
      v25 = a3[23];
      v26 = (char)v25;
      if ((v25 & 0x80u) != 0)
        v25 = *((_QWORD *)a3 + 1);
      if (v24 == v25)
      {
        if (v26 >= 0)
          v27 = a3;
        else
          v27 = *(unsigned __int8 **)a3;
        if ((v23 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v22, v27, *((_QWORD *)v22 + 1)))
          {
LABEL_46:
            v32 = (std::locale *)a3;
            turi::unity_sframe::set_column_name(unsigned long,std::string)::$_1::operator()();
          }
        }
        else
        {
          if (!v22[23])
            goto LABEL_46;
          while (*v22 == *v27)
          {
            ++v22;
            ++v27;
            if (!--v23)
              goto LABEL_46;
          }
        }
      }
    }
  }
  std::string::operator=((std::string *)(a1[5] + 24 * a2), (const std::string *)a3);
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](a1 + 8);
  v32 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
}

void sub_21827FA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::locale::~locale(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::remove_column(turi::unity_sframe *this, unint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  int *v10;
  file_logger *v11;
  file_logger *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  unint64_t v17;
  std::locale::__imp *v18;
  std::locale::__imp *v19;
  std::locale::__imp *locale;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  std::locale::__imp *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 *v34;
  __int128 *v35;
  __int128 *i;
  char *v37;
  int64_t v38;
  std::__shared_weak_count *size;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const turi::sframe *v47;
  unint64_t *p_shared_owners;
  _QWORD *exception;
  __int128 v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::string v53;
  void *__p;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  const turi::sframe *v60;
  std::__shared_weak_count *v61;
  std::locale v62;
  std::locale::__imp *v63;
  std::locale::__imp *v64;

  v4 = (int *)global_logger();
  if (v4[169] < 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      goto LABEL_82;
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "remove_column", 589, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v62, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v62);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
LABEL_84:
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v10 = (int *)global_logger();
  if (v10[169] > 2)
    goto LABEL_17;
  if (cppipc::must_cancel((cppipc *)v10))
LABEL_82:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v11 = (file_logger *)global_logger();
  v12 = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "remove_column", 590, 1);
  v13 = pthread_getspecific(*((_QWORD *)v12 + 74));
  if (v13 && *((_BYTE *)v13 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Args: ", 6);
  v14 = file_logger::operator<<<unsigned long>((uint64_t)v12);
  v15 = pthread_getspecific(*(_QWORD *)(v14 + 592));
  if (v15)
  {
    if (*((_BYTE *)v15 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
      v16 = std::locale::use_facet(&v62, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v62);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v14);
      if (*(_DWORD *)(v14 + 600) == 7)
        goto LABEL_84;
    }
  }
LABEL_17:
  if ((*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 112))(this) <= a2)
    turi::unity_sframe::remove_column(unsigned long)::$_0::operator()();
  v17 = 0;
  v62.__locale_ = 0;
  v63 = 0;
  v64 = 0;
  while (v17 < (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 112))(this))
  {
    if (v17 != a2)
    {
      v18 = v63;
      if (v63 >= v64)
      {
        locale = v62.__locale_;
        v21 = (v63 - v62.__locale_) >> 3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v23 = v64 - v62.__locale_;
        if ((v64 - v62.__locale_) >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v64, v24);
          locale = v62.__locale_;
          v18 = v63;
        }
        else
        {
          v25 = 0;
        }
        v26 = (std::locale::__imp *)&v25[8 * v21];
        *(_QWORD *)v26 = v17;
        v19 = (std::locale::__imp *)((char *)v26 + 8);
        while (v18 != locale)
        {
          v27 = *((_QWORD *)v18 - 1);
          v18 = (std::locale::__imp *)((char *)v18 - 8);
          *((_QWORD *)v26 - 1) = v27;
          v26 = (std::locale::__imp *)((char *)v26 - 8);
        }
        v62.__locale_ = v26;
        v63 = v19;
        v64 = (std::locale::__imp *)&v25[8 * v24];
        if (locale)
          operator delete(locale);
      }
      else
      {
        *(_QWORD *)v63 = v17;
        v19 = (std::locale::__imp *)((char *)v18 + 8);
      }
      v63 = v19;
    }
    ++v17;
  }
  if (v62.__locale_ == v63)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi6sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v60);
    v47 = v60;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    __p = 0;
    v55 = 0;
    v56 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v53, "");
    turi::sframe::open_for_write((uint64_t)v47, &v57, &__p, &v53, 1, 1);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (__p)
    {
      v55 = (char *)__p;
      operator delete(__p);
    }
    __p = &v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    (*(void (**)(const turi::sframe *))(*(_QWORD *)v60 + 40))(v60);
    turi::unity_sframe::set_sframe((uint64_t)this, &v60);
    v44 = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
LABEL_76:
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  else
  {
    v28 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v51 = *((_QWORD *)this + 3);
    v52 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v51, (uint64_t **)&v62, &v53);
    v31 = v52;
    if (v52)
    {
      v32 = (unint64_t *)&v52->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    (*(void (**)(uint64_t *__return_ptr, turi::unity_sframe *))(*(_QWORD *)this + 128))(&v57, this);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v60, (__int128 *)(v57 + 24 * a2 + 24), v58, v57 + 24 * a2);
    v35 = v34;
    for (i = v58; i != v35; i = (__int128 *)((char *)i - 24))
    {
      if (*((char *)i - 1) < 0)
        operator delete(*((void **)i - 3));
    }
    v58 = v35;
    (*(void (**)(void **__return_ptr, turi::unity_sframe *))(*(_QWORD *)this + 120))(&__p, this);
    v37 = (char *)__p + a2;
    v38 = v55 - (v37 + 1);
    if (v55 != v37 + 1)
      memmove(v37, v37 + 1, v55 - (v37 + 1));
    v55 = &v37[v38];
    size = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
    v50 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    if (v53.__r_.__value_.__l.__size_)
    {
      v40 = (unint64_t *)(v53.__r_.__value_.__l.__size_ + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    turi::unity_sframe::construct_from_planner_node((uint64_t)this, (uint64_t *)&v50, (uint64_t)&v57);
    if (size)
    {
      v42 = (unint64_t *)&size->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (__p)
    {
      v55 = (char *)__p;
      operator delete(__p);
    }
    __p = &v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v44 = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
    if (v53.__r_.__value_.__l.__size_)
    {
      v45 = (unint64_t *)(v53.__r_.__value_.__l.__size_ + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      goto LABEL_76;
    }
  }
  if (v62.__locale_)
  {
    v63 = v62.__locale_;
    operator delete(v62.__locale_);
  }
}

void sub_2182800D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19, char *a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;

  if (a18 < 0)
    operator delete(__p);
  if (a19)
  {
    a20 = a19;
    operator delete(a19);
  }
  a19 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  v27 = *(void **)(v25 - 88);
  if (v27)
  {
    *(_QWORD *)(v25 - 80) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sframe::swap_columns(turi::unity_sframe *this, unint64_t a2, unint64_t a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  int *v12;
  file_logger *v13;
  file_logger *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  unint64_t v21;
  unint64_t i;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *exception;
  uint64_t v46[2];
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  uint64_t v50;
  void *__p[3];
  std::locale v52;
  unint64_t v53;
  unint64_t v54;

  v54 = a2;
  v53 = a3;
  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      goto LABEL_49;
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "swap_columns", 621, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v52, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v52);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
LABEL_52:
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = (int *)global_logger();
  if (v12[169] > 1)
    goto LABEL_20;
  if (cppipc::must_cancel((cppipc *)v12))
LABEL_49:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v13 = (file_logger *)global_logger();
  v14 = file_logger::start_stream(v13, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "swap_columns", 622, 1);
  v15 = pthread_getspecific(*((_QWORD *)v14 + 74));
  if (v15 && *((_BYTE *)v15 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Args: ", 6);
  v16 = file_logger::operator<<<unsigned long>((uint64_t)v14);
  v17 = pthread_getspecific(*(_QWORD *)(v16 + 592));
  if (v17 && *((_BYTE *)v17 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)", ", 2);
  v18 = file_logger::operator<<<unsigned long>(v16);
  v19 = pthread_getspecific(*(_QWORD *)(v18 + 592));
  if (v19)
  {
    if (*((_BYTE *)v19 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(v19[2] - 24) + 16));
      v20 = std::locale::use_facet(&v52, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
      std::locale::~locale(&v52);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v18);
      if (*(_DWORD *)(v18 + 600) == 7)
        goto LABEL_52;
    }
  }
LABEL_20:
  if ((*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 112))(this) <= a2)
  {
    v52.__locale_ = (std::locale::__imp *)&v54;
    turi::unity_sframe::swap_columns(unsigned long,unsigned long)::$_0::operator()();
  }
  if ((*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 112))(this) <= a3)
  {
    v52.__locale_ = (std::locale::__imp *)&v53;
    turi::unity_sframe::swap_columns(unsigned long,unsigned long)::$_1::operator()();
  }
  (*(void (**)(std::locale *__return_ptr, turi::unity_sframe *))(*(_QWORD *)this + 128))(&v52, this);
  v21 = (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 112))(this);
  std::vector<unsigned long>::vector(__p, v21);
  for (i = 0; ; ++i)
  {
    v23 = (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 112))(this);
    v24 = __p[0];
    if (i >= v23)
      break;
    *((_QWORD *)__p[0] + i) = i;
  }
  v25 = *((_QWORD *)__p[0] + a2);
  *((_QWORD *)__p[0] + a2) = *((_QWORD *)__p[0] + a3);
  v24[a3] = v25;
  v26 = (char *)v52.__locale_ + 24 * a2;
  v27 = (char *)v52.__locale_ + 24 * a3;
  v28 = *((_QWORD *)v26 + 2);
  v29 = *(_OWORD *)v26;
  v30 = *((_QWORD *)v27 + 2);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *((_QWORD *)v26 + 2) = v30;
  *(_OWORD *)v27 = v29;
  *((_QWORD *)v27 + 2) = v28;
  v31 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v47 = *((_QWORD *)this + 3);
  v48 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v47, (uint64_t **)__p, &v49);
  v34 = v48;
  if (v48)
  {
    v35 = (unint64_t *)&v48->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)v50;
  v46[0] = v49;
  v46[1] = v50;
  if (v50)
  {
    v38 = (unint64_t *)(v50 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  turi::unity_sframe::construct_from_planner_node((uint64_t)this, v46, (uint64_t)&v52);
  if (v37)
  {
    v40 = (unint64_t *)&v37->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v42 = (std::__shared_weak_count *)v50;
  if (v50)
  {
    v43 = (unint64_t *)(v50 + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = &v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_218280650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::locale a18)
{
  std::locale::~locale(&a18);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::transform()
{
  int *v0;
  file_logger *v1;
  file_logger *started;
  _QWORD *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *exception;
  std::locale v7;

  v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "transform", 675, 1);
    v3 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v3 && *((_BYTE *)v3 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    v4 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v4 && *((_BYTE *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(v4[2] - 24) + 16));
      v5 = std::locale::use_facet(&v7, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  turi::unity_sframe::transform(std::string const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator()();
}

void sub_2182807EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *turi::unity_sframe::transform_native@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *started;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::locale *v33;
  uint64_t v34;
  _QWORD *result;
  uint64_t v36;
  _QWORD *exception;
  __int128 *v38;
  __int128 *v39;
  std::string *v40;
  _BYTE v41[24];
  _BYTE *v42;
  std::string v43;
  _BYTE v44[24];
  _BYTE *v45;
  std::locale v46;
  std::__shared_weak_count *v47;
  std::locale *v48;
  std::string v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v17 = (file_logger *)global_logger();
    started = file_logger::start_stream(v17, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "transform_native", 694, 1);
    v19 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v19 && *((_BYTE *)v19 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19 + 2, (uint64_t)"Function entry", 14);
    v20 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v20)
    {
      if (*((_BYTE *)v20 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(v20[2] - 24) + 16));
        v21 = std::locale::use_facet(&v46, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v46);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::get_unity_global_singleton(v11, v12, v13, v14, v15, v16, (uint64_t *)&v46);
  v22 = turi::neural_net::external_float_array::shape(v46.__locale_);
  turi::toolkit_function_registry::get_native_function(v22, a2, (uint64_t)v50);
  v23 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(__int128 **__return_ptr, uint64_t))(*(_QWORD *)a1 + 128))(&v38, a1);
  v26 = (uint64_t)v51;
  if (!v51)
    goto LABEL_17;
  if (v51 != v50)
  {
    v26 = (*(uint64_t (**)(_QWORD *))(*v51 + 16))(v51);
LABEL_17:
    v48 = (std::locale *)v26;
    goto LABEL_19;
  }
  v48 = &v46;
  (*(void (**)(_QWORD *, std::locale *))(v50[0] + 24))(v50, &v46);
LABEL_19:
  memset(&v49, 0, sizeof(v49));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, v38, v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
  v27 = (uint64_t)v48;
  if (!v48)
  {
LABEL_22:
    v42 = (_BYTE *)v27;
    goto LABEL_24;
  }
  if (v48 != &v46)
  {
    v27 = (*((uint64_t (**)(void))v48->__locale_ + 2))();
    goto LABEL_22;
  }
  v42 = v41;
  (*((void (**)(std::locale *, _BYTE *))v46.__locale_ + 3))(&v46, v41);
LABEL_24:
  memset(&v43, 0, sizeof(v43));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, (__int128 *)v49.__r_.__value_.__l.__data_, (__int128 *)v49.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49.__r_.__value_.__l.__size_ - v49.__r_.__value_.__r.__words[0]) >> 3));
  v45 = 0;
  v28 = (char *)operator new(0x40uLL);
  *(_QWORD *)v28 = off_24D935338;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v28 + 8), (uint64_t)v41);
  *(std::string *)(v28 + 40) = v43;
  memset(&v43, 0, sizeof(v43));
  v45 = v28;
  turi::unity_sframe::transform_lambda(a1, (uint64_t)v44, a3, a4, a5);
  v29 = v45;
  if (v45 == v44)
  {
    v30 = 4;
    v29 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_29;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_29:
  v40 = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v31 = v42;
  if (v42 == v41)
  {
    v32 = 4;
    v31 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_34;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_34:
  v40 = &v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v33 = v48;
  if (v48 == &v46)
  {
    v34 = 4;
    v33 = &v46;
  }
  else
  {
    if (!v48)
      goto LABEL_39;
    v34 = 5;
  }
  (*((void (**)(void))v33->__locale_ + v34))();
LABEL_39:
  v46.__locale_ = (std::locale::__imp *)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  result = v51;
  if (v51 == v50)
  {
    v36 = 4;
    result = v50;
  }
  else
  {
    if (!v51)
      return result;
    v36 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v36))();
}

void sub_218280C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  std::locale::~locale(&a25);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::transform_lambda(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  turi::unity_sarray *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *exception;
  std::locale::__imp *locale;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::locale v40;
  std::__shared_weak_count *v41;
  _BYTE v42[24];
  _BYTE *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "transform_lambda", 721, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet(&v40, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(&v40);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v16 = *(std::__shared_weak_count **)(a1 + 32);
  v38 = *(_QWORD *)(a1 + 24);
  v39 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v42, a2);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node(&v38, (uint64_t)v42, a3, a4, &v40);
  v19 = v43;
  if (v43 == v42)
  {
    v20 = 4;
    v19 = v42;
    goto LABEL_16;
  }
  if (v43)
  {
    v20 = 5;
LABEL_16:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  v21 = v39;
  if (v39)
  {
    v22 = (unint64_t *)&v39->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (turi::unity_sarray *)operator new();
  turi::unity_sarray::unity_sarray(v24);
  std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>((uint64_t *)&v37, (uint64_t)v24);
  v25 = (_QWORD *)v37;
  locale = v40.__locale_;
  v36 = v41;
  if (v41)
  {
    v26 = (unint64_t *)&v41->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  turi::unity_sarray::construct_from_planner_node(v25, (uint64_t *)&locale);
  v28 = v36;
  if (v36)
  {
    v29 = (unint64_t *)&v36->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *a5 = v37;
  v31 = v41;
  if (v41)
  {
    v32 = (unint64_t *)&v41->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_21828107C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::locale::~locale(&a16);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::~$_0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v5;

  v5 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(_QWORD **)(a1 + 24);
  if (v2 == (_QWORD *)a1)
  {
    v3 = 4;
    v2 = (_QWORD *)a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void turi::unity_sframe::flat_map()
{
  turi::unity_sframe::flat_map(std::string const&,std::vector<std::string>,std::vector<turi::flex_type_enum>,BOOL,unsigned long long)::$_0::operator()();
}

void turi::unity_sframe::dtype(turi::unity_sframe *this@<X0>, unint64_t *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *exception;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::locale v19;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "dtype", 793, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v19);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v17 = *((_QWORD *)this + 3);
  v18 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  turi::query_eval::infer_planner_node_type(&v17, a2);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_218281344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sframe::dtype(turi::unity_sframe *this, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *exception;
  __int128 v21;
  __int128 v22;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "dtype", 798, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet((const std::locale *)&v22, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale((std::locale *)&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::unity_sframe::select_column(this, a2, &v21);
  v10 = v21;
  v22 = v21;
  if (*((_QWORD *)&v21 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 112))(v10);
  if (*((_QWORD *)&v10 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v13;
}

void sub_218281568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  std::locale::~locale(&a11);
  _Unwind_Resume(a1);
}

std::string *turi::unity_sframe::column_names@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *exception;
  std::locale v12;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "column_names", 813, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[5], this[6], 0xAAAAAAAAAAAAAAABLL * (((char *)this[6] - (char *)this[5]) >> 3));
}

void sub_21828170C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::head(turi::unity_sframe *this@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  turi::unity_sframe *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *exception;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char v32;
  std::string __p;
  turi::unity_sframe *v34[2];
  _OWORD v35[2];
  __int128 v36;
  void *v37[2];
  __int128 v38;
  __int128 v39;
  _BYTE v40[24];
  _BYTE *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  uint64_t v46;
  uint64_t *v47;
  std::locale v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "head", 820, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v48, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v48);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::sframe::sframe((turi::sframe *)&v48);
  (*(void (**)(_QWORD *__return_ptr, turi::unity_sframe *))(*(_QWORD *)this + 128))(v42, this);
  (*(void (**)(turi::unity_sframe **__return_ptr, turi::unity_sframe *))(*(_QWORD *)this + 120))(v34, this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::sframe::open_for_write((uint64_t)&v48, v42, v34, &__p, 1, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  v34[0] = (turi::unity_sframe *)v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  turi::sframe::get_output_iterator((size_t *)&v48, 0, (uint64_t)v42);
  __p.__r_.__value_.__r.__words[0] = 0;
  if (a2)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v30 = *((_QWORD *)this + 3);
    v31 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v41 = 0;
    v15 = operator new(0x20uLL);
    *v15 = &off_24D9353B8;
    v15[1] = v42;
    v15[2] = &__p;
    v15[3] = a2;
    v41 = v15;
    memset(v35, 0, sizeof(v35));
    v36 = 0u;
    *(_OWORD *)v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    BYTE11(v36) = 1;
    std::string::basic_string[abi:ne180100]<0>(v37, "");
    *((_QWORD *)&v38 + 1) = 0;
    v39 = 0uLL;
    turi::query_eval::planner::materialize((uint64_t)&v32, &v30, (uint64_t)v40, 1, (uint64_t *)v35);
    v34[0] = (turi::unity_sframe *)((char *)&v38 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    if (SBYTE7(v38) < 0)
      operator delete(v37[0]);
    v16 = (_QWORD *)v36;
    if ((_OWORD *)v36 == (_OWORD *)((char *)v35 + 8))
    {
      v17 = 4;
      v16 = (_QWORD *)v35 + 1;
    }
    else
    {
      if (!(_QWORD)v36)
        goto LABEL_24;
      v17 = 5;
    }
    (*(void (**)(_QWORD *))(*v16 + 8 * v17))(v16);
LABEL_24:
    v18 = v41;
    if (v41 == v40)
    {
      v19 = 4;
      v18 = v40;
    }
    else
    {
      if (!v41)
      {
LABEL_29:
        v20 = v31;
        if (v31)
        {
          v21 = (unint64_t *)&v31->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        goto LABEL_34;
      }
      v19 = 5;
    }
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
    goto LABEL_29;
  }
LABEL_34:
  turi::sframe::close((turi::sframe *)&v48);
  v23 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v23);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)v34, (uint64_t)v23);
  turi::unity_sframe::construct_from_sframe(v34[0], (const turi::sframe *)&v48);
  *a3 = *(_OWORD *)v34;
  if (v47 == &v46)
  {
    v24 = 4;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v24 = 5;
  }
  (*(void (**)(uint64_t *))(*v47 + 8 * v24))(v47);
LABEL_39:
  v25 = v45;
  if (v45 == v44)
  {
    v26 = 4;
    v25 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_44;
    v26 = 5;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v26))(v25);
LABEL_44:
  v27 = v43;
  if (v43 == v42)
  {
    v28 = 4;
    v27 = v42;
    goto LABEL_48;
  }
  if (v43)
  {
    v28 = 5;
LABEL_48:
    (*(void (**)(_QWORD *))(*v27 + 8 * v28))(v27);
  }
  turi::sframe::~sframe((turi::sframe *)&v48);
}

void sub_218281B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::locale a50)
{
  std::locale::~locale(&a50);
  _Unwind_Resume(a1);
}

void sub_218281CC4()
{
  JUMPOUT(0x218281CBCLL);
}

void turi::unity_sframe::_head(turi::unity_sframe *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 144))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 384))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_218281D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::_tail(turi::unity_sframe *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 152))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 384))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_218281DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sframe::tail(turi::unity_sframe *this, unint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  int *v10;
  file_logger *v11;
  file_logger *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *exception;
  std::locale v21;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      goto LABEL_21;
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "tail", 864, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v21, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v21);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
LABEL_22:
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v10 = (int *)global_logger();
  if (v10[169] > 2)
    goto LABEL_17;
  if (cppipc::must_cancel((cppipc *)v10))
LABEL_21:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v11 = (file_logger *)global_logger();
  v12 = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "tail", 865, 1);
  v13 = pthread_getspecific(*((_QWORD *)v12 + 74));
  if (v13 && *((_BYTE *)v13 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Args: ", 6);
  v14 = file_logger::operator<<<unsigned long>((uint64_t)v12);
  v15 = pthread_getspecific(*(_QWORD *)(v14 + 592));
  if (v15)
  {
    if (*((_BYTE *)v15 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
      v16 = std::locale::use_facet(&v21, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v21);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v14);
      if (*(_DWORD *)(v14 + 600) == 7)
        goto LABEL_22;
    }
  }
LABEL_17:
  v17 = (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 64))(this);
  if (v17 >= a2)
    v18 = v17 - a2;
  else
    v18 = 0;
  return (*(uint64_t (**)(turi::unity_sframe *, uint64_t, uint64_t, unint64_t))(*(_QWORD *)this + 368))(this, v18, 1, v17);
}

void sub_218282074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::logical_filter_split(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *__p[2];
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void **v52;
  uint64_t v53;
  int v54;
  char v55;
  _QWORD v56[2];
  _QWORD v57[3];

  v57[2] = *MEMORY[0x24BDAC8D0];
  v6 = (std::__shared_weak_count *)a2[1];
  v50 = *a2;
  v51 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 176))(v56, a1, &v50);
  v9 = *a2;
  v54 = 0;
  v55 = 0;
  v53 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "-");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, void **))(*(_QWORD *)v9 + 304))(&v48, v9, &v53, __p);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 176))(v57, a1, &v48);
  std::list<std::shared_ptr<turi::unity_sframe_base>>::list(a3, v56, 2);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v56[i]);
  v11 = v49;
  if (v49)
  {
    v12 = (unint64_t *)&v49->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v47 < 0)
    operator delete(__p[0]);
  switch(v55)
  {
    case 2:
      v14 = (unint64_t *)v53;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = v53;
        if (v53)
        {
          if (*(char *)(v53 + 31) < 0)
            operator delete(*(void **)(v53 + 8));
          v18 = v17;
          v19 = 0x1012C404EF22A49;
          goto LABEL_54;
        }
      }
      break;
    case 3:
      v20 = (unint64_t *)v53;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v53;
        if (v53)
        {
          v24 = *(void **)(v53 + 8);
          if (v24)
          {
            *(_QWORD *)(v53 + 16) = v24;
            operator delete(v24);
          }
          v18 = v23;
          v19 = 0x1080C409938AC02;
          goto LABEL_54;
        }
      }
      break;
    case 4:
      v25 = (unint64_t *)v53;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = v53;
        if (v53)
        {
          v52 = (void **)(v53 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v52);
          goto LABEL_47;
        }
      }
      break;
    case 5:
      v36 = (unint64_t *)v53;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v28 = v53;
        if (v53)
        {
          v52 = (void **)(v53 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v52);
LABEL_47:
          v18 = v28;
          v19 = 0x1020C405E66F15BLL;
          goto LABEL_54;
        }
      }
      break;
    case 8:
      v39 = (unint64_t *)v53;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        v42 = v53;
        if (v53)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v53 + 16));
          v18 = v42;
          v35 = -235920773;
          goto LABEL_53;
        }
      }
      break;
    case 9:
      v29 = (unint64_t *)v53;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = v53;
        if (v53)
        {
          v33 = *(void **)(v53 + 48);
          if (v33)
          {
            *(_QWORD *)(v53 + 56) = v33;
            operator delete(v33);
          }
          v34 = *(void **)(v32 + 24);
          if (v34)
          {
            *(_QWORD *)(v32 + 32) = v34;
            operator delete(v34);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v32 + 8);
          v18 = v32;
          v35 = 2071181815;
LABEL_53:
          v19 = v35 | 0x1030C4000000000;
LABEL_54:
          MEMORY[0x219A19A08](v18, v19);
        }
      }
      break;
    default:
      break;
  }
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v43 = v51;
  if (v51)
  {
    v44 = (unint64_t *)&v51->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_218282404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23)
{
  uint64_t v23;
  uint64_t i;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 + i);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  switch(a23)
  {
    case 2:
      v26 = (unint64_t *)a21;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_43;
      v29 = a21;
      if (!a21)
        goto LABEL_43;
      if (*(char *)(a21 + 31) < 0)
        operator delete(*(void **)(a21 + 8));
      v30 = (_QWORD *)v29;
      v31 = 0x1012C404EF22A49;
      goto LABEL_42;
    case 3:
      v40 = (unint64_t *)a21;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_43;
      v43 = a21;
      if (!a21)
        goto LABEL_43;
      v44 = *(void **)(a21 + 8);
      if (v44)
      {
        *(_QWORD *)(a21 + 16) = v44;
        operator delete(v44);
      }
      v30 = (_QWORD *)v43;
      v31 = 0x1080C409938AC02;
      goto LABEL_42;
    case 4:
      v32 = (unint64_t *)a21;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_43;
      v35 = a21;
      if (!a21)
        goto LABEL_43;
      a20 = a21 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      goto LABEL_35;
    case 5:
      v45 = (unint64_t *)a21;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_43;
      v35 = a21;
      if (!a21)
        goto LABEL_43;
      a20 = a21 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
LABEL_35:
      v30 = (_QWORD *)v35;
      v31 = 0x1020C405E66F15BLL;
      goto LABEL_42;
    case 8:
      v48 = (unint64_t *)a21;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (v50)
        goto LABEL_43;
      v51 = a21;
      if (!a21)
        goto LABEL_43;
      boost::detail::shared_count::~shared_count((unsigned int **)(a21 + 16));
      v30 = (_QWORD *)v51;
      v39 = -235920773;
      goto LABEL_41;
    case 9:
      v36 = (unint64_t *)a21;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38 || !a21)
        goto LABEL_43;
      v30 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a21);
      v39 = 2071181815;
LABEL_41:
      v31 = v39 | 0x1030C4000000000;
LABEL_42:
      MEMORY[0x219A19A08](v30, v31);
LABEL_43:
      a21 = 0;
      a22 = 0;
      a23 = 0;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_43;
  }
}

void turi::unity_sframe::logical_filter(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  BOOL v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  turi::unity_sframe *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *exception;
  std::locale v59[3];
  uint64_t v60[2];
  __int128 v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  turi::unity_sarray *locale;
  std::locale::__imp *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  void **v76;
  _QWORD v77[3];
  _QWORD *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "logical_filter", 880, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(v59, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v59);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = *a2;
  if (!*a2)
    turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()();
  v13 = a2[1];
  v74 = *a2;
  v75 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v77[0] = &off_24D935438;
  v78 = v77;
  turi::unity_sarray::transform_lambda(v12, (uint64_t)v77, 0, 1, 0, v59);
  locale = v59[0].__locale_;
  v73 = v59[1].__locale_;
  if (v59[1].__locale_)
  {
    v16 = (unint64_t *)((char *)v59[1].__locale_ + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = (std::__shared_weak_count *)v59[1].__locale_;
    if (v59[1].__locale_)
    {
      v19 = (unint64_t *)((char *)v59[1].__locale_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v21 = v78;
  if (v78 == v77)
  {
    v22 = 4;
    v21 = v77;
  }
  else
  {
    if (!v78)
      goto LABEL_26;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_26:
  v23 = (std::__shared_weak_count *)a1[4];
  v70 = a1[3];
  v71 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  turi::unity_sarray::get_planner_node((uint64_t)locale, &v68);
  v26 = turi::query_eval::planner::test_equal_length((uint64_t)v59, &v70, &v68);
  v27 = v69;
  if (v69)
  {
    v28 = (unint64_t *)&v69->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v71;
  if (v71)
  {
    v31 = (unint64_t *)&v71->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (!v26)
    turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2::operator()();
  v33 = (std::__shared_weak_count *)a1[4];
  v64 = a1[3];
  v65 = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  turi::unity_sarray::get_planner_node((uint64_t)locale, &v62);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::make_planner_node(&v64, &v62, &v66);
  v36 = v63;
  if (v63)
  {
    v37 = (unint64_t *)&v63->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v65;
  if (v65)
  {
    v40 = (unint64_t *)&v65->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v42);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)&v61, (uint64_t)v42);
  v43 = v61;
  v44 = (std::__shared_weak_count *)v67;
  v60[0] = v66;
  v60[1] = v67;
  if (v67)
  {
    v45 = (unint64_t *)(v67 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  (*(void (**)(std::locale *__return_ptr, _QWORD *))(*a1 + 128))(v59, a1);
  turi::unity_sframe::construct_from_planner_node(v43, v60, (uint64_t)v59);
  v76 = (void **)v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v76);
  if (v44)
  {
    v47 = (unint64_t *)&v44->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  *a3 = v61;
  v49 = (std::__shared_weak_count *)v67;
  if (v67)
  {
    v50 = (unint64_t *)(v67 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = (std::__shared_weak_count *)v73;
  if (v73)
  {
    v53 = (unint64_t *)((char *)v73 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v75;
  if (v75)
  {
    v56 = (unint64_t *)&v75->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_218282B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"index != nullptr", 16);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "operator()", 882, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218282D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::append(turi::unity_sframe *a1@<X0>, std::locale **a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  std::__shared_weak_count *v12;
  std::locale *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  const void **v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  const std::string *v29;
  unsigned __int8 *v30;
  const void **v31;
  const void **v32;
  std::locale *v33;
  std::locale *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::locale *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *locale;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  turi::unity_sframe *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  const char *v78;
  _QWORD *v79;
  _QWORD *v80;
  size_t v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  const char *v85;
  _QWORD *exception;
  size_t v87;
  _QWORD *v88;
  uint64_t v89[2];
  std::locale::__imp *v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::locale *v94;
  void *__p[3];
  std::locale v96;
  std::locale *v97;
  std::locale *v98;
  uint64_t v99;
  _OWORD v100[2];
  uint64_t v101;
  uint64_t v102;
  std::locale *v103;
  std::__shared_weak_count *v104;

  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "append", 913, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v96, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v96);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v13 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v103 = *a2;
  v104 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (!(*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)a1 + 112))(a1))
  {
    *a3 = *(_OWORD *)a2;
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_90;
  }
  if (!(*((uint64_t (**)(std::locale *))v13->__locale_ + 14))(v13))
  {
    turi::unity_sframe::copy(a1, a3);
    goto LABEL_90;
  }
  v16 = (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)a1 + 112))(a1);
  if (v16 != (*((uint64_t (**)(std::locale *))v13->__locale_ + 14))(v13))
    turi::unity_sframe::append(std::shared_ptr<turi::unity_sframe_base>)::$_0::operator()();
  (*(void (**)(uint64_t *__return_ptr, turi::unity_sframe *))(*(_QWORD *)a1 + 128))(&v101, a1);
  (*((void (**)(_OWORD *__return_ptr, std::locale *))v13->__locale_ + 16))(v100, v13);
  v18 = v101;
  v17 = (unsigned __int8 *)v102;
  v19 = (v102 - v101) / 24;
  v20 = *(unsigned __int8 **)&v100[0];
  if (v102 - v101 == *((_QWORD *)&v100[0] + 1) - *(_QWORD *)&v100[0])
  {
    if (v101 == v102)
      goto LABEL_49;
    v21 = (unsigned __int8 *)v101;
    while (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v96, v21, v20))
    {
      v21 += 24;
      v20 += 24;
      if (v21 == v17)
        goto LABEL_49;
    }
    v24 = v101;
    v23 = (const void **)v102;
    v22 = 0xAAAAAAAAAAAAAAABLL * ((v102 - v101) >> 3);
  }
  else
  {
    v22 = (v102 - v101) / 24;
    v23 = (const void **)v102;
    v24 = v101;
  }
  v25 = 126 - 2 * __clz(v22);
  if (v23 == (const void **)v24)
    v26 = 0;
  else
    v26 = v25;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v24, v23, (uint64_t)&v97, v26, 1);
  v27 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v100[0] + 1) - *(_QWORD *)&v100[0]) >> 3));
  if (*((_QWORD *)&v100[0] + 1) == *(_QWORD *)&v100[0])
    v28 = 0;
  else
    v28 = v27;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(*(uint64_t *)&v100[0], *((const void ***)&v100[0] + 1), (uint64_t)&v97, v28, 1);
  v30 = (unsigned __int8 *)v101;
  v29 = (const std::string *)v102;
  v31 = (const void **)*((_QWORD *)&v100[0] + 1);
  v32 = *(const void ***)&v100[0];
  if (v102 - v101 != *((_QWORD *)&v100[0] + 1) - *(_QWORD *)&v100[0])
  {
LABEL_105:
    v97 = 0;
    v98 = 0;
    v99 = 0;
    std::set_difference[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::insert_iterator<std::vector<std::string>>>((std::string::size_type)v30, v29, v32, v31, (uint64_t)&v97, 0);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v96);
    v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Error: Columns [", 16);
    v80 = turi::operator<<<std::string>(v79, (uint64_t *)&v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"] not found in appending SFrame.", 32);
    __p[0] = &v96;
    turi::unity_sframe::append(std::shared_ptr<turi::unity_sframe_base>)::$_1::operator()();
  }
  while (v30 != (unsigned __int8 *)v29)
  {
    if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v96, v30, (unsigned __int8 *)v32))
    {
      v30 = (unsigned __int8 *)v101;
      v29 = (const std::string *)v102;
      v31 = (const void **)*((_QWORD *)&v100[0] + 1);
      v32 = *(const void ***)&v100[0];
      goto LABEL_105;
    }
    v30 += 24;
    v32 += 3;
  }
  (*(void (**)(std::locale *__return_ptr, turi::unity_sframe *))(*(_QWORD *)a1 + 128))(&v96, a1);
  (*((void (**)(std::locale **__return_ptr, std::locale *, std::locale *))v13->__locale_ + 23))(&v97, v13, &v96);
  v34 = v97;
  v33 = v98;
  if (v98)
  {
    v35 = (unint64_t *)&v98[1];
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v103 = v34;
  v104 = (std::__shared_weak_count *)v33;
  if (v12)
  {
    v37 = (unint64_t *)&v12->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v39 = (std::__shared_weak_count *)v98;
  if (v98)
  {
    v40 = (unint64_t *)&v98[1];
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  __p[0] = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_49:
  (*(void (**)(std::locale **__return_ptr, turi::unity_sframe *))(*(_QWORD *)a1 + 120))(&v97, a1);
  v42 = v103;
  (*((void (**)(void **__return_ptr, std::locale *))v103->__locale_ + 15))(__p, v103);
  if (v17 != (unsigned __int8 *)v18)
  {
    v43 = 0;
    v44 = 0;
    if (v19 <= 1)
      v45 = 1;
    else
      v45 = (uint64_t)&v17[-v18] / 24;
    do
    {
      if (*((unsigned __int8 *)&v97->__locale_ + v44) != *((unsigned __int8 *)__p[0] + v44))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v96);
        v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Column types are not the same in two SFrames (Column ", 53);
        v71 = v101 + v43;
        v72 = *(char *)(v101 + v43 + 23);
        if (v72 >= 0)
          v73 = v101 + v43;
        else
          v73 = *(_QWORD *)v71;
        if (v72 >= 0)
          v74 = *(unsigned __int8 *)(v71 + 23);
        else
          v74 = *(_QWORD *)(v71 + 8);
        v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, v73, v74);
        v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)", attempting to append column of type ", 38);
        v77 = *((char *)__p[0] + v44);
        if (v77 > 9)
          v78 = "undefined";
        else
          v78 = off_24D935A48[v77];
        v81 = strlen(v78);
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v78, v81);
        v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)" to column of type ", 19);
        v84 = *((char *)&v97->__locale_ + v44);
        if (v84 > 9)
          v85 = "undefined";
        else
          v85 = off_24D935A48[v84];
        v87 = strlen(v85);
        v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v85, v87);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)").", 2);
        v94 = &v96;
        turi::unity_sframe::append(std::shared_ptr<turi::unity_sframe_base>)::$_2::operator()();
      }
      ++v44;
      v43 += 24;
    }
    while (v45 != v44);
    goto LABEL_57;
  }
  if (__p[0])
  {
LABEL_57:
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  v96.__locale_ = (std::locale::__imp *)v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  v96.__locale_ = (std::locale::__imp *)&v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  v46 = (std::__shared_weak_count *)*((_QWORD *)a1 + 4);
  v92 = *((_QWORD *)a1 + 3);
  v93 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  locale = (std::__shared_weak_count *)v42[4].__locale_;
  v90 = v42[3].__locale_;
  v91 = locale;
  if (locale)
  {
    v50 = (unint64_t *)&locale->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::make_planner_node(&v92, &v90, &v101);
  v52 = v91;
  if (v91)
  {
    v53 = (unint64_t *)&v91->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v93;
  if (v93)
  {
    v56 = (unint64_t *)&v93->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v58);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)v100, (uint64_t)v58);
  v59 = *(_QWORD *)&v100[0];
  v60 = (std::__shared_weak_count *)v102;
  v89[0] = v101;
  v89[1] = v102;
  if (v102)
  {
    v61 = (unint64_t *)(v102 + 8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  (*(void (**)(std::locale *__return_ptr, turi::unity_sframe *))(*(_QWORD *)a1 + 128))(&v96, a1);
  turi::unity_sframe::construct_from_planner_node(v59, v89, (uint64_t)&v96);
  v97 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  if (v60)
  {
    v63 = (unint64_t *)&v60->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  *a3 = v100[0];
  v65 = (std::__shared_weak_count *)v102;
  if (v102)
  {
    v66 = (unint64_t *)(v102 + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v12 = v104;
LABEL_90:
  if (v12)
  {
    v68 = (unint64_t *)&v12->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_21828362C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::locale a19)
{
  uint64_t v19;
  void *v21;

  std::ostringstream::~ostringstream((uint64_t)&a19);
  if (__p)
    operator delete(__p);
  v21 = *(void **)(v19 - 184);
  if (v21)
  {
    *(_QWORD *)(v19 - 176) = v21;
    operator delete(v21);
  }
  a19.__locale_ = (std::locale::__imp *)(v19 - 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19.__locale_ = (std::locale::__imp *)(v19 - 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v19 - 104);
  _Unwind_Resume(a1);
}

std::__wrap_iter<const std::string *>::iterator_type std::set_difference[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::insert_iterator<std::vector<std::string>>>(std::string::size_type a1, const std::string *a2, const void **a3, const void **a4, uint64_t a5, uint64_t a6)
{
  char v7;
  std::vector<std::string>::const_iterator v8[2];
  _QWORD v9[2];
  const void **v10;
  const void **v11;
  const std::string *v12;
  std::string var8;

  v12 = a2;
  var8.__r_.__value_.__r.__words[0] = a1;
  v10 = a4;
  v11 = a3;
  v9[0] = a5;
  v9[1] = a6;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::insert_iterator<std::vector<std::string>> &>(&var8, &v12, &v11, &v10, (uint64_t)v9, (uint64_t)&v7, v8);
  return v8[1].__i_;
}

_QWORD *turi::operator<<<std::string>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "[");
  std::string::basic_string[abi:ne180100]<0>(v8, ", ");
  std::string::basic_string[abi:ne180100]<0>(__p, "]");
  v4 = turi::print_range<std::vector<std::string>>(a1, a2, (uint64_t)v10, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  return v4;
}

void sub_218283878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void turi::unity_sframe::begin_iterator(turi::unity_sframe *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  turi::sframe_reader *v8;
  uint64_t v9;
  turi::sframe_reader *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *exception;
  turi::sframe_reader *v19;
  std::locale v20;
  std::__shared_weak_count *v21;

  v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "begin_iterator", 993, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet(&v20, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v20);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 64))(this))
  {
    turi::unity_sframe::get_underlying_sframe(this, &v20);
    turi::sframe::get_reader(v20.__locale_, &v19);
    v8 = v19;
    v19 = 0;
    v9 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = v19;
      v19 = 0;
      if (v10)
        (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v10 + 8))(v10);
    }
    v11 = operator new();
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 11) + 32))(*((_QWORD *)this + 11), 0);
    v12 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v11;
    if (v12)
      std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)this + 96, v12);
    v13 = operator new();
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), 0);
    v14 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v13;
    if (v14)
      std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)this + 104, v14);
    *((_QWORD *)this + 10) = 1;
    v15 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_218283B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  std::locale::~locale(&a11);
  _Unwind_Resume(a1);
}

_QWORD *turi::unity_sframe::iterator_get_next@<X0>(turi::unity_sframe *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = (_QWORD *)(*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 64))(this);
  if (result)
  {
    std::vector<std::vector<turi::flexible_type>>::reserve(a3, a2);
    v7 = (uint64_t *)((char *)this + 96);
    v8 = (uint64_t *)((char *)this + 104);
    while (1)
    {
      result = (_QWORD *)*v7;
      v9 = (_QWORD *)*v8;
      if (*(_QWORD *)*v7 == *(_QWORD *)*v8 && result[4] == v9[4] && result[5] == v9[5])
        break;
      v11 = (uint64_t **)turi::sframe_iterator::operator*(result);
      v12 = a3[1];
      if (v12 >= a3[2])
      {
        v13 = std::vector<std::vector<turi::flexible_type>>::__push_back_slow_path<std::vector<turi::flexible_type> const&>(a3, v11);
      }
      else
      {
        std::vector<std::vector<turi::flexible_type>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::flexible_type> const&>((uint64_t)a3, v11);
        v13 = v12 + 24;
      }
      a3[1] = v13;
      result = turi::sframe_iterator::operator++((_QWORD *)*v7);
      v10 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
      if (v10 >= a2)
      {
LABEL_11:
        if (v10 >= a2)
          return result;
        v14 = *((_QWORD *)this + 10);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 16))(*((_QWORD *)this + 11));
        if (v14 >= (unint64_t)result)
          return result;
        v15 = operator new();
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 11) + 32))(*((_QWORD *)this + 11), *((_QWORD *)this + 10));
        v16 = *v7;
        *v7 = v15;
        if (v16)
          std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)this + 96, v16);
        v17 = operator new();
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), *((_QWORD *)this + 10));
        v18 = *v8;
        *v8 = v17;
        if (v18)
          std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100]((uint64_t)this + 104, v18);
        ++*((_QWORD *)this + 10);
      }
    }
    v10 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
    goto LABEL_11;
  }
  return result;
}

void sub_218283D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::sframe_iterator::operator++(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  while (v2 != v3)
  {
    turi::sarray_iterator<turi::flexible_type>::operator++(v2);
    v2 += 48;
  }
  v4 = a1[5];
  if ((unint64_t)(v4 + 1) < a1[6])
    v5 = v4 + 1;
  else
    v5 = a1[6];
  a1[5] = v5;
  return a1;
}

void turi::unity_sframe::save_as_csv(_QWORD *a1, std::string::size_type a2, uint64_t **a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  int *v12;
  file_logger *v13;
  file_logger *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  int v19;
  _OWORD *v20;
  turi::flexible_type_impl *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::string::size_type size;
  char v26;
  int v27;
  _OWORD *v28;
  turi::flexible_type_impl *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  std::string *p_str;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  char v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _OWORD *v42;
  turi::flexible_type_impl *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  double v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  double v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  char v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  turi::flexible_type_impl *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  std::string::size_type v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  turi::flexible_type_impl *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  std::string::size_type v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  turi::flexible_type_impl *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  turi::flexible_type_impl *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  turi::flexible_type_impl *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  char v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  std::string::size_type v124;
  std::string *v125;
  _QWORD *v126;
  std::string *v127;
  std::string::size_type v128;
  std::__shared_weak_count *v129;
  unint64_t *p_shared_owners;
  unint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::string::size_type v140;
  std::string *v141;
  _QWORD *v142;
  std::string *v143;
  std::string::size_type v144;
  _QWORD *exception;
  _QWORD *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  std::string v149;
  void *v150[2];
  char v151;
  std::string __str;
  char v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  int v158;
  std::string v159;
  char v160;
  int v161;
  std::string v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  std::string v169;
  __n128 __p;
  char v171;
  char v172;
  _OWORD v173[2];
  __int128 v174;
  void *v175[2];
  __int128 v176;
  __int128 v177;
  _BYTE v178[24];
  _BYTE *v179;
  std::locale v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  char v186;
  _BYTE v187[72];
  int v188;
  void *v189;
  char v190;
  _QWORD v191[20];

  v191[19] = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "save_as_csv", 1039, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v180, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v180);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v13 = (file_logger *)global_logger();
    v14 = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "save_as_csv", 1040, 1);
    v15 = pthread_getspecific(*((_QWORD *)v14 + 74));
    if (v15 && *((_BYTE *)v15 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Args: ", 6);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v169 = *(std::string *)a2;
    turi::sanitize_url((__n128 *)&v169, &__p);
    v16 = file_logger::operator<<<std::string>((uint64_t)v14, (uint64_t)&__p);
    v17 = pthread_getspecific(*(_QWORD *)(v16 + 592));
    if (v17)
    {
      if (*((_BYTE *)v17 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[2] - 24) + 16));
        v18 = std::locale::use_facet(&v180, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale(&v180);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v16);
        if (*(_DWORD *)(v16 + 600) == 7)
        {
          __print_back_trace();
          v146 = __cxa_allocate_exception(8uLL);
          *v146 = "LOG_FATAL encountered";
          __cxa_throw(v146, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v171 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v157, ",");
  v158 = 570491228;
  std::string::basic_string[abi:ne180100]<0>(&v159, "\n");
  v160 = 1;
  v161 = 2;
  std::string::basic_string[abi:ne180100]<0>(&v162, "");
  v168 = 0;
  v167 = 0u;
  v166 = 0u;
  v165 = 0u;
  v164 = 0u;
  v163 = 0u;
  MEMORY[0x219A19390](&v157, ",");
  v158 = 570491228;
  v161 = 2;
  v160 = 1;
  MEMORY[0x219A19390](&v162, "");
  memset(&v156, 0, sizeof(v156));
  memset(&v155, 0, sizeof(v155));
  memset(&v154, 0, sizeof(v154));
  v153 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v180, "delimiter");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  v19 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v180.__locale_, (uint64_t)&std::piecewise_construct, &__str)+ 68);
  if (SHIBYTE(v182) < 0)
    operator delete(v180.__locale_);
  if (v19 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v150, "delimiter");
    v180.__locale_ = (std::locale::__imp *)v150;
    v20 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v150, (uint64_t)&std::piecewise_construct, &v180);
    v21 = (turi::flexible_type_impl *)((char *)v20 + 56);
    switch(*((_BYTE *)v20 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_36;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_36:
        v180.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
        v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(std::locale *)((char *)&v180 + *((_QWORD *)v180.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
        v182 = v24;
        v183 = MEMORY[0x24BEDB848] + 16;
        if (v186 < 0)
          operator delete(v185);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v187);
        goto LABEL_43;
      case 2:
        v22 = *(_QWORD *)v21;
        if (*(char *)(*(_QWORD *)v21 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
        }
        else
        {
          v23 = *(_OWORD *)(v22 + 8);
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 24);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v23;
        }
        goto LABEL_43;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v21 + 8));
        goto LABEL_43;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (uint64_t *)(*(_QWORD *)v21 + 8));
        goto LABEL_43;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v21 + 8));
        goto LABEL_43;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v21, &__str);
        goto LABEL_43;
      case 7:
        memset(&__str, 0, sizeof(__str));
        goto LABEL_43;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_43;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v21 + 8));
LABEL_43:
        if (v151 < 0)
          operator delete(v150[0]);
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __str.__r_.__value_.__l.__size_;
        if (size)
        {
          std::string::operator=(&v157, &__str);
          v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        if (v26 < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        break;
      default:
LABEL_439:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v180, "escape_char");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  v27 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v180.__locale_, (uint64_t)&std::piecewise_construct, &__str)+ 68);
  if (SHIBYTE(v182) < 0)
    operator delete(v180.__locale_);
  if (v27 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v150, "escape_char");
    v180.__locale_ = (std::locale::__imp *)v150;
    v28 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v150, (uint64_t)&std::piecewise_construct, &v180);
    v29 = (turi::flexible_type_impl *)((char *)v28 + 56);
    switch(*((_BYTE *)v28 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_63;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_63:
        v180.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
        v32 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(std::locale *)((char *)&v180 + *((_QWORD *)v180.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
        v182 = v32;
        v183 = MEMORY[0x24BEDB848] + 16;
        if (v186 < 0)
          operator delete(v185);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v187);
        break;
      case 2:
        v30 = *(_QWORD *)v29;
        if (*(char *)(*(_QWORD *)v29 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
        }
        else
        {
          v31 = *(_OWORD *)(v30 + 8);
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 24);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v31;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v29 + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (uint64_t *)(*(_QWORD *)v29 + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v29 + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v29, &__str);
        break;
      case 7:
        memset(&__str, 0, sizeof(__str));
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v29 + 8));
        break;
      default:
        goto LABEL_439;
    }
    if (v151 < 0)
      operator delete(v150[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__str.__r_.__value_.__l.__size_)
      {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_77:
        LOBYTE(v158) = p_str->__r_.__value_.__s.__data_[0];
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_79;
        goto LABEL_78;
      }
    }
    else if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
      p_str = &__str;
      goto LABEL_77;
    }
    BYTE1(v158) = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
LABEL_78:
      operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_79:
  std::string::basic_string[abi:ne180100]<0>(&v180, "double_quote");
  v34 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v180.__locale_);
  v35 = v34;
  if (SHIBYTE(v182) < 0)
  {
    operator delete(v180.__locale_);
    if (!v35)
      goto LABEL_99;
  }
  else if (!v34)
  {
    goto LABEL_99;
  }
  std::string::basic_string[abi:ne180100]<0>(&v180, "double_quote");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  v36 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v180.__locale_, (uint64_t)&std::piecewise_construct, &__str);
  v37 = 1;
  switch(*((_BYTE *)v36 + 68))
  {
    case 0:
      v40 = *((_QWORD *)v36 + 7);
      goto LABEL_93;
    case 1:
      v38 = *((double *)v36 + 7) == 0.0;
      goto LABEL_94;
    case 2:
      v39 = *((_QWORD *)v36 + 7);
      if (*(char *)(v39 + 31) < 0)
        v40 = *(_QWORD *)(v39 + 16);
      else
        v40 = *(unsigned __int8 *)(v39 + 31);
LABEL_93:
      v38 = v40 == 0;
      goto LABEL_94;
    case 3:
    case 4:
    case 5:
      v38 = *(_QWORD *)(*((_QWORD *)v36 + 7) + 8) == *(_QWORD *)(*((_QWORD *)v36 + 7) + 16);
      goto LABEL_94;
    case 7:
      goto LABEL_97;
    case 8:
      v38 = *(_QWORD *)(*((_QWORD *)v36 + 7) + 64) == 3;
LABEL_94:
      v37 = v38;
LABEL_97:
      BYTE2(v158) = v37 ^ 1;
      if (SHIBYTE(v182) < 0)
        operator delete(v180.__locale_);
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_99:
  std::string::basic_string[abi:ne180100]<0>(&v180, "quote_char");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  v41 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v180.__locale_, (uint64_t)&std::piecewise_construct, &__str)+ 68);
  if (SHIBYTE(v182) < 0)
    operator delete(v180.__locale_);
  if (v41 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v150, "quote_char");
    v180.__locale_ = (std::locale::__imp *)v150;
    v42 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v150, (uint64_t)&std::piecewise_construct, &v180);
    v43 = (turi::flexible_type_impl *)((char *)v42 + 56);
    switch(*((_BYTE *)v42 + 68))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_111;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_111:
        v180.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
        v46 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(std::locale *)((char *)&v180 + *((_QWORD *)v180.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
        v182 = v46;
        v183 = MEMORY[0x24BEDB848] + 16;
        if (v186 < 0)
          operator delete(v185);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v187);
        break;
      case 2:
        v44 = *(_QWORD *)v43;
        if (*(char *)(*(_QWORD *)v43 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
        }
        else
        {
          v45 = *(_OWORD *)(v44 + 8);
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v44 + 24);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v45;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v43 + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (uint64_t *)(*(_QWORD *)v43 + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v43 + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v43, &__str);
        break;
      case 7:
        memset(&__str, 0, sizeof(__str));
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v43 + 8));
        break;
      default:
        goto LABEL_439;
    }
    if (v151 < 0)
      operator delete(v150[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__str.__r_.__value_.__l.__size_)
        HIBYTE(v158) = *__str.__r_.__value_.__l.__data_;
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    else if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
      HIBYTE(v158) = __str.__r_.__value_.__s.__data_[0];
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v180, "quote_level");
  v47 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v180.__locale_);
  v48 = v47;
  if (SHIBYTE(v182) < 0)
  {
    operator delete(v180.__locale_);
    if (!v48)
      goto LABEL_184;
  }
  else if (!v47)
  {
    goto LABEL_184;
  }
  std::string::basic_string[abi:ne180100]<0>(&v180, "quote_level");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  v49 = (double *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v180.__locale_, (uint64_t)&std::piecewise_construct, &__str);
  v50 = v49[7];
  v51 = *((_DWORD *)v49 + 16);
  v52 = *((unsigned __int8 *)v49 + 68);
  if (v52 <= 9 && ((1 << v52) & 0x33C) != 0)
  {
    do
      v53 = __ldaxr(*(unint64_t **)&v50);
    while (__stlxr(v53 + 1, *(unint64_t **)&v50));
  }
  if (SHIBYTE(v182) < 0)
    operator delete(v180.__locale_);
  switch(v52)
  {
    case 0u:
      if (*(_QWORD *)&v50 >= 4uLL)
        goto LABEL_429;
      v54 = LODWORD(v50);
      goto LABEL_153;
    case 1u:
      if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_150;
      if (v50 == 1.0)
        goto LABEL_149;
      if (v50 == 2.0)
        goto LABEL_152;
      if (v50 != 3.0)
        goto LABEL_429;
      goto LABEL_146;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 7u:
    case 8u:
    case 9u:
      goto LABEL_429;
    case 6u:
      v55 = *(_QWORD *)&v50 & 0xFFFFFFFFFFFFFFLL;
      if ((*(_QWORD *)&v50 & 0xFFFFFFFFFFFFFFLL) != 0 || v51)
      {
        if (v55 == 1 && !v51)
        {
LABEL_149:
          v54 = 1;
        }
        else if (v55 == 2 && !v51)
        {
LABEL_152:
          v54 = 2;
        }
        else
        {
          if (v55 != 3 || v51)
LABEL_429:
            turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_0::operator()();
LABEL_146:
          v54 = 3;
        }
      }
      else
      {
LABEL_150:
        v54 = 0;
      }
LABEL_153:
      v161 = v54;
      switch(v52)
      {
        case 2u:
          do
          {
            v56 = __ldaxr(*(unint64_t **)&v50);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, *(unint64_t **)&v50));
          if (v57)
            v58 = 1;
          else
            v58 = *(_QWORD *)&v50 == 0;
          if (!v58)
          {
            if (*(char *)(*(_QWORD *)&v50 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v50 + 8));
            v59 = v50;
            v60 = 0x1012C404EF22A49;
            goto LABEL_183;
          }
          break;
        case 3u:
          do
          {
            v67 = __ldaxr(*(unint64_t **)&v50);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, *(unint64_t **)&v50));
          if (v68)
            v69 = 1;
          else
            v69 = *(_QWORD *)&v50 == 0;
          if (!v69)
          {
            v70 = *(void **)(*(_QWORD *)&v50 + 8);
            if (v70)
            {
              *(_QWORD *)(*(_QWORD *)&v50 + 16) = v70;
              operator delete(v70);
            }
            v59 = v50;
            v60 = 0x1080C409938AC02;
            goto LABEL_183;
          }
          break;
        case 4u:
          do
          {
            v61 = __ldaxr(*(unint64_t **)&v50);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, *(unint64_t **)&v50));
          if (v62)
            v63 = 1;
          else
            v63 = *(_QWORD *)&v50 == 0;
          if (!v63)
          {
            v180.__locale_ = (std::locale::__imp *)(*(_QWORD *)&v50 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v180);
            goto LABEL_174;
          }
          break;
        case 5u:
          do
          {
            v64 = __ldaxr(*(unint64_t **)&v50);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, *(unint64_t **)&v50));
          if (v65)
            v66 = 1;
          else
            v66 = *(_QWORD *)&v50 == 0;
          if (!v66)
          {
            v180.__locale_ = (std::locale::__imp *)(*(_QWORD *)&v50 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v180);
LABEL_174:
            v59 = v50;
            v60 = 0x1020C405E66F15BLL;
LABEL_183:
            MEMORY[0x219A19A08](*(_QWORD *)&v59, v60);
          }
          break;
        default:
          goto LABEL_184;
      }
      break;
    default:
      goto LABEL_439;
  }
LABEL_184:
  std::string::basic_string[abi:ne180100]<0>(&v180, "header");
  v71 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v180.__locale_);
  v72 = v71;
  if (SHIBYTE(v182) < 0)
  {
    operator delete(v180.__locale_);
    if (!v72)
      goto LABEL_202;
  }
  else if (!v71)
  {
    goto LABEL_202;
  }
  std::string::basic_string[abi:ne180100]<0>(&v180, "header");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  v73 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v180.__locale_, (uint64_t)&std::piecewise_construct, &__str);
  v74 = 1;
  switch(*((_BYTE *)v73 + 68))
  {
    case 0:
      v77 = *((_QWORD *)v73 + 7);
      goto LABEL_196;
    case 1:
      v75 = *((double *)v73 + 7) == 0.0;
      goto LABEL_197;
    case 2:
      v76 = *((_QWORD *)v73 + 7);
      if (*(char *)(v76 + 31) < 0)
        v77 = *(_QWORD *)(v76 + 16);
      else
        v77 = *(unsigned __int8 *)(v76 + 31);
LABEL_196:
      v75 = v77 == 0;
      goto LABEL_197;
    case 3:
    case 4:
    case 5:
      v75 = *(_QWORD *)(*((_QWORD *)v73 + 7) + 8) == *(_QWORD *)(*((_QWORD *)v73 + 7) + 16);
      goto LABEL_197;
    case 7:
      goto LABEL_200;
    case 8:
      v75 = *(_QWORD *)(*((_QWORD *)v73 + 7) + 64) == 3;
LABEL_197:
      v74 = v75;
LABEL_200:
      v160 = v74 ^ 1;
      if (SHIBYTE(v182) < 0)
        operator delete(v180.__locale_);
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_202:
  std::string::basic_string[abi:ne180100]<0>(&v180, "line_terminator");
  v78 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v180.__locale_);
  v79 = v78;
  if (SHIBYTE(v182) < 0)
  {
    operator delete(v180.__locale_);
    if (!v79)
      goto LABEL_230;
  }
  else if (!v78)
  {
    goto LABEL_230;
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "line_terminator");
  v180.__locale_ = (std::locale::__imp *)v150;
  v80 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v150, (uint64_t)&std::piecewise_construct, &v180);
  v81 = (turi::flexible_type_impl *)((char *)v80 + 56);
  switch(*((_BYTE *)v80 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_215;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_215:
      v180.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
      v84 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(std::locale *)((char *)&v180 + *((_QWORD *)v180.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
      v182 = v84;
      v183 = MEMORY[0x24BEDB848] + 16;
      if (v186 < 0)
        operator delete(v185);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](v187);
      break;
    case 2:
      v82 = *(_QWORD *)v81;
      if (*(char *)(*(_QWORD *)v81 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v82 + 8), *(_QWORD *)(v82 + 16));
      }
      else
      {
        v83 = *(_OWORD *)(v82 + 8);
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v82 + 24);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v83;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v81 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (uint64_t *)(*(_QWORD *)v81 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v81 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v81, &__str);
      break;
    case 7:
      memset(&__str, 0, sizeof(__str));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v81 + 8));
      break;
    default:
      goto LABEL_439;
  }
  if (v151 < 0)
    operator delete(v150[0]);
  v85 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v86 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v85 = __str.__r_.__value_.__l.__size_;
  if (v85)
  {
    std::string::operator=(&v159, &__str);
    v86 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v86 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_230:
  std::string::basic_string[abi:ne180100]<0>(&v180, "na_value");
  v87 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v180.__locale_);
  v88 = v87;
  if (SHIBYTE(v182) < 0)
  {
    operator delete(v180.__locale_);
    if (!v88)
      goto LABEL_258;
  }
  else if (!v87)
  {
    goto LABEL_258;
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "na_value");
  v180.__locale_ = (std::locale::__imp *)v150;
  v89 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v150, (uint64_t)&std::piecewise_construct, &v180);
  v90 = (turi::flexible_type_impl *)((char *)v89 + 56);
  switch(*((_BYTE *)v89 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_243;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_243:
      v180.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
      v93 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(std::locale *)((char *)&v180 + *((_QWORD *)v180.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
      v182 = v93;
      v183 = MEMORY[0x24BEDB848] + 16;
      if (v186 < 0)
        operator delete(v185);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](v187);
      break;
    case 2:
      v91 = *(_QWORD *)v90;
      if (*(char *)(*(_QWORD *)v90 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v91 + 8), *(_QWORD *)(v91 + 16));
      }
      else
      {
        v92 = *(_OWORD *)(v91 + 8);
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v91 + 24);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v92;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v90 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (uint64_t *)(*(_QWORD *)v90 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v90 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v90, &__str);
      break;
    case 7:
      memset(&__str, 0, sizeof(__str));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v90 + 8));
      break;
    default:
      goto LABEL_439;
  }
  if (v151 < 0)
    operator delete(v150[0]);
  v94 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v95 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v94 = __str.__r_.__value_.__l.__size_;
  if (v94)
  {
    std::string::operator=(&v162, &__str);
    v95 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v95 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_258:
  std::string::basic_string[abi:ne180100]<0>(&v180, "file_header");
  v96 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v180.__locale_);
  v97 = v96;
  if (SHIBYTE(v182) < 0)
  {
    operator delete(v180.__locale_);
    if (!v97)
      goto LABEL_282;
  }
  else if (!v96)
  {
    goto LABEL_282;
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "file_header");
  v180.__locale_ = (std::locale::__imp *)v150;
  v98 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v150, (uint64_t)&std::piecewise_construct, &v180);
  v99 = (turi::flexible_type_impl *)((char *)v98 + 56);
  switch(*((_BYTE *)v98 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_271;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_271:
      v180.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
      v102 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(std::locale *)((char *)&v180 + *((_QWORD *)v180.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
      v182 = v102;
      v183 = MEMORY[0x24BEDB848] + 16;
      if (v186 < 0)
        operator delete(v185);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](v187);
      break;
    case 2:
      v100 = *(_QWORD *)v99;
      if (*(char *)(*(_QWORD *)v99 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v100 + 8), *(_QWORD *)(v100 + 16));
      }
      else
      {
        v101 = *(_OWORD *)(v100 + 8);
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v100 + 24);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v101;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v99 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (uint64_t *)(*(_QWORD *)v99 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v99 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v99, &__str);
      break;
    case 7:
      memset(&__str, 0, sizeof(__str));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v99 + 8));
      break;
    default:
      goto LABEL_439;
  }
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  v156 = __str;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (v151 < 0)
    operator delete(v150[0]);
LABEL_282:
  std::string::basic_string[abi:ne180100]<0>(&v180, "file_footer");
  v103 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v180.__locale_);
  v104 = v103;
  if (SHIBYTE(v182) < 0)
  {
    operator delete(v180.__locale_);
    if (!v104)
      goto LABEL_306;
  }
  else if (!v103)
  {
    goto LABEL_306;
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "file_footer");
  v180.__locale_ = (std::locale::__imp *)v150;
  v105 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v150, (uint64_t)&std::piecewise_construct, &v180);
  v106 = (turi::flexible_type_impl *)((char *)v105 + 56);
  switch(*((_BYTE *)v105 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_295;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_295:
      v180.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
      v109 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(std::locale *)((char *)&v180 + *((_QWORD *)v180.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
      v182 = v109;
      v183 = MEMORY[0x24BEDB848] + 16;
      if (v186 < 0)
        operator delete(v185);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](v187);
      break;
    case 2:
      v107 = *(_QWORD *)v106;
      if (*(char *)(*(_QWORD *)v106 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v107 + 8), *(_QWORD *)(v107 + 16));
      }
      else
      {
        v108 = *(_OWORD *)(v107 + 8);
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v107 + 24);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v106 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (uint64_t *)(*(_QWORD *)v106 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v106 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v106, &__str);
      break;
    case 7:
      memset(&__str, 0, sizeof(__str));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v106 + 8));
      break;
    default:
      goto LABEL_439;
  }
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  v155 = __str;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (v151 < 0)
    operator delete(v150[0]);
LABEL_306:
  std::string::basic_string[abi:ne180100]<0>(&v180, "line_prefix");
  v110 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v180.__locale_);
  v111 = v110;
  if (SHIBYTE(v182) < 0)
  {
    operator delete(v180.__locale_);
    if (!v111)
      goto LABEL_330;
  }
  else if (!v110)
  {
    goto LABEL_330;
  }
  std::string::basic_string[abi:ne180100]<0>(v150, "line_prefix");
  v180.__locale_ = (std::locale::__imp *)v150;
  v112 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v150, (uint64_t)&std::piecewise_construct, &v180);
  v113 = (turi::flexible_type_impl *)((char *)v112 + 56);
  switch(*((_BYTE *)v112 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_319;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v180);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_319:
      v180.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
      v116 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(std::locale *)((char *)&v180 + *((_QWORD *)v180.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
      v182 = v116;
      v183 = MEMORY[0x24BEDB848] + 16;
      if (v186 < 0)
        operator delete(v185);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](v187);
      break;
    case 2:
      v114 = *(_QWORD *)v113;
      if (*(char *)(*(_QWORD *)v113 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v114 + 8), *(_QWORD *)(v114 + 16));
      }
      else
      {
        v115 = *(_OWORD *)(v114 + 8);
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v114 + 24);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v115;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v113 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (uint64_t *)(*(_QWORD *)v113 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v113 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v113, &__str);
      break;
    case 7:
      memset(&__str, 0, sizeof(__str));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v180, (_QWORD *)(*(_QWORD *)v113 + 8));
      break;
    default:
      goto LABEL_439;
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  v154 = __str;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (v151 < 0)
    operator delete(v150[0]);
LABEL_330:
  std::string::basic_string[abi:ne180100]<0>(&v180, "_no_prefix_on_first_value");
  v117 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v180.__locale_);
  v118 = v117;
  if (SHIBYTE(v182) < 0)
  {
    operator delete(v180.__locale_);
    if (!v118)
      goto LABEL_348;
  }
  else if (!v117)
  {
    goto LABEL_348;
  }
  std::string::basic_string[abi:ne180100]<0>(&v180, "_no_prefix_on_first_value");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  v119 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v180.__locale_, (uint64_t)&std::piecewise_construct, &__str);
  v120 = 1;
  switch(*((_BYTE *)v119 + 68))
  {
    case 0:
      v123 = *((_QWORD *)v119 + 7);
      goto LABEL_342;
    case 1:
      v121 = *((double *)v119 + 7) == 0.0;
      goto LABEL_343;
    case 2:
      v122 = *((_QWORD *)v119 + 7);
      if (*(char *)(v122 + 31) < 0)
        v123 = *(_QWORD *)(v122 + 16);
      else
        v123 = *(unsigned __int8 *)(v122 + 31);
LABEL_342:
      v121 = v123 == 0;
      goto LABEL_343;
    case 3:
    case 4:
    case 5:
      v121 = *(_QWORD *)(*((_QWORD *)v119 + 7) + 8) == *(_QWORD *)(*((_QWORD *)v119 + 7) + 16);
      goto LABEL_343;
    case 7:
      goto LABEL_346;
    case 8:
      v121 = *(_QWORD *)(*((_QWORD *)v119 + 7) + 64) == 3;
LABEL_343:
      v120 = v121;
LABEL_346:
      v153 = v120 ^ 1;
      if (SHIBYTE(v182) < 0)
        operator delete(v180.__locale_);
      break;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
LABEL_348:
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v149 = *(std::string *)a2;
  turi::general_ofstream::general_ofstream(&v180, (uint64_t)&v149);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v124 = HIBYTE(v156.__r_.__value_.__r.__words[2]);
  else
    v124 = v156.__r_.__value_.__l.__size_;
  if (v124)
  {
    if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v125 = &v156;
    else
      v125 = (std::string *)v156.__r_.__value_.__r.__words[0];
    v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v180, (uint64_t)v125, v124);
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v127 = &v159;
    else
      v127 = (std::string *)v159.__r_.__value_.__r.__words[0];
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v128 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
    else
      v128 = v159.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v127, v128);
  }
  if (!turi::general_ofstream::good((turi::general_ofstream *)&v180))
  {
    __str.__r_.__value_.__r.__words[0] = a2;
    turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_1::operator()();
  }
  if (!(*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1))
    goto LABEL_407;
  if (v160)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*a1 + 128))(&__str, a1);
    turi::csv_writer::write_verbatim((uint64_t)&v157, &v180, (uint64_t *)&__str);
    v150[0] = &__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v150);
  }
  LOBYTE(v150[0]) = 1;
  v129 = (std::__shared_weak_count *)a1[4];
  v147 = a1[3];
  v148 = v129;
  if (v129)
  {
    p_shared_owners = (unint64_t *)&v129->__shared_owners_;
    do
      v131 = __ldxr(p_shared_owners);
    while (__stxr(v131 + 1, p_shared_owners));
  }
  v179 = 0;
  v132 = operator new(0x30uLL);
  *v132 = &off_24D9354B8;
  v132[1] = &v157;
  v132[2] = &v180;
  v132[3] = &v154;
  v132[4] = &v153;
  v132[5] = v150;
  v179 = v132;
  memset(v173, 0, sizeof(v173));
  v174 = 0u;
  *(_OWORD *)v175 = 0u;
  v176 = 0u;
  v177 = 0u;
  BYTE11(v174) = 1;
  std::string::basic_string[abi:ne180100]<0>(v175, "");
  v177 = 0uLL;
  *((_QWORD *)&v176 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v172, &v147, (uint64_t)v178, 1, (uint64_t *)v173);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SBYTE7(v176) < 0)
    operator delete(v175[0]);
  v133 = (_QWORD *)v174;
  if ((_OWORD *)v174 == (_OWORD *)((char *)v173 + 8))
  {
    v134 = 4;
    v133 = (_QWORD *)v173 + 1;
  }
  else
  {
    if (!(_QWORD)v174)
      goto LABEL_381;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_381:
  v135 = v179;
  if (v179 == v178)
  {
    v136 = 4;
    v135 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_386;
    v136 = 5;
  }
  (*(void (**)(void))(*v135 + 8 * v136))();
LABEL_386:
  v137 = v148;
  if (v148)
  {
    v138 = (unint64_t *)&v148->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  if (!turi::general_ofstream::good((turi::general_ofstream *)&v180))
    turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_3::operator()();
  if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
  else
    v140 = v155.__r_.__value_.__l.__size_;
  if (v140)
  {
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v141 = &v155;
    else
      v141 = (std::string *)v155.__r_.__value_.__r.__words[0];
    v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v180, (uint64_t)v141, v140);
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v143 = &v159;
    else
      v143 = (std::string *)v159.__r_.__value_.__r.__words[0];
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v144 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
    else
      v144 = v159.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)v143, v144);
  }
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v181, 8, &v181, 16, (turi::fileio_impl::general_fstream_sink *)&v184, &v188);
LABEL_407:
  v180.__locale_ = (std::locale::__imp *)&unk_24D920F98;
  v191[0] = &unk_24D920FC0;
  if (v190 < 0)
    operator delete(v189);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)&v181);
  MEMORY[0x219A198F4](v191);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  if (SHIBYTE(v167) < 0)
    operator delete(*((void **)&v166 + 1));
  if (SHIBYTE(v165) < 0)
    operator delete(*((void **)&v164 + 1));
  if (SBYTE7(v164) < 0)
    operator delete((void *)v163);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
}

void sub_218285F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x248]);
  if (a21 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a38 < 0)
    operator delete(a33);
  if (a45 < 0)
    operator delete(a40);
  turi::csv_writer::~csv_writer((void **)&a47);
  _Unwind_Resume(a1);
}

void sub_21828637C()
{
  JUMPOUT(0x218286374);
}

void turi::csv_writer::~csv_writer(void **this)
{
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void turi::unity_sframe::sample(turi::unity_sframe *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, int a4@<W2>, _OWORD *a5@<X8>)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  turi::unity_sarray *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *exception;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "sample", 1158, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Args: ", 6);
    v14 = file_logger::operator<<<float>((uint64_t)started);
    v15 = pthread_getspecific(*(_QWORD *)(v14 + 592));
    if (v15 && *((_BYTE *)v15 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)", ", 2);
    v16 = file_logger::operator<<<unsigned long long>(v14);
    v17 = pthread_getspecific(*(_QWORD *)(v16 + 592));
    if (v17)
    {
      if (*((_BYTE *)v17 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[2] - 24) + 16));
        v18 = std::locale::use_facet((const std::locale *)&v36, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale((std::locale *)&v36);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v16);
        if (*(_DWORD *)(v16 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (a2 == 1.0)
  {
    turi::unity_sframe::copy(this, a5);
  }
  else
  {
    v19 = (turi::unity_sarray *)(*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 64))(this);
    turi::unity_sarray::make_uniform_BOOLean_array(v19, a2, a3, a4, &v35);
    v36 = v35;
    if (*((_QWORD *)&v35 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v34 = v36;
      if (*((_QWORD *)&v36 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
    }
    else
    {
      v34 = (unint64_t)v35;
    }
    (*(void (**)(turi::unity_sframe *, __int128 *))(*(_QWORD *)this + 176))(this, &v34);
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
}

void sub_218286700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::materialize(turi::unity_sframe *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void **v11;
  _OWORD v12[2];
  __int128 v13;
  void *__p[2];
  __int128 v15;
  __int128 v16;
  _BYTE v17[296];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v9 = *((_QWORD *)this + 3);
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v12, 0, sizeof(v12));
  BYTE11(v13) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((_QWORD *)&v15 + 1) = 0;
  v16 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v9, (uint64_t)v12, (const turi::sframe *)v17);
  turi::sframe::~sframe((turi::sframe *)v17);
  v11 = (void **)&v15 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  v4 = (_QWORD *)v13;
  if ((_OWORD *)v13 == (_OWORD *)((char *)v12 + 8))
  {
    v5 = 4;
    v4 = (_QWORD *)v12 + 1;
  }
  else
  {
    if (!(_QWORD)v13)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v5))(v4);
LABEL_11:
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_218286874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  turi::query_eval::materialize_options::~materialize_options(&a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t turi::unity_sframe::is_materialized(turi::unity_sframe *this)
{
  std::__shared_weak_count *v1;
  _QWORD *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t is_source_node;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int *v17;
  std::__shared_weak_count *v18;
  void **v19;
  _OWORD v20[2];
  __int128 v21;
  void *__p[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v2 = (_QWORD *)((char *)this + 24);
  v15 = *((_QWORD *)this + 3);
  v16 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v20, 0, sizeof(v20));
  BYTE11(v21) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((_QWORD *)&v23 + 1) = 0;
  v24 = 0uLL;
  turi::query_eval::optimization_engine::optimize_planner_graph(&v15, (uint64_t)v20, &v17);
  v19 = (void **)&v23 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SBYTE7(v23) < 0)
    operator delete(__p[0]);
  v5 = (_QWORD *)v21;
  if ((_OWORD *)v21 == (_OWORD *)((char *)v20 + 8))
  {
    v6 = 4;
    v5 = (_QWORD *)v20 + 1;
    goto LABEL_10;
  }
  if ((_QWORD)v21)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  v7 = v16;
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  is_source_node = turi::query_eval::is_source_node(&v17);
  if ((_DWORD)is_source_node)
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v2, (uint64_t *)&v17);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return is_source_node;
}

void sub_218286A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL turi::unity_sframe::has_size(turi::unity_sframe *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v9 = *((_QWORD *)this + 3);
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::infer_planner_node_length((uint64_t)&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4 != -1;
}

void sub_218286B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sframe::query_plan_string(turi::unity_sframe *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  std::locale v18;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v12 = *((_QWORD *)this + 3);
  v13 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = turi::query_eval::operator<<(v15, &v12);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  std::ostream::flush();
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15[0] = v10;
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v17);
}

void sub_218286CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::random_split(turi::unity_sframe *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, int a4@<W2>, uint64_t *a5@<X8>)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  int *v16;
  file_logger *v17;
  file_logger *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  turi::unity_sarray *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *exception;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      goto LABEL_44;
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "random_split", 1195, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet((const std::locale *)&v42, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v42);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
LABEL_45:
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v16 = (int *)global_logger();
  if (v16[169] > 2)
    goto LABEL_20;
  if (cppipc::must_cancel((cppipc *)v16))
LABEL_44:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v17 = (file_logger *)global_logger();
  v18 = file_logger::start_stream(v17, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "random_split", 1196, 1);
  v19 = pthread_getspecific(*((_QWORD *)v18 + 74));
  if (v19 && *((_BYTE *)v19 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19 + 2, (uint64_t)"Args: ", 6);
  v20 = file_logger::operator<<<float>((uint64_t)v18);
  v21 = pthread_getspecific(*(_QWORD *)(v20 + 592));
  if (v21 && *((_BYTE *)v21 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)", ", 2);
  v22 = file_logger::operator<<<unsigned long long>(v20);
  v23 = pthread_getspecific(*(_QWORD *)(v22 + 592));
  if (v23)
  {
    if (*((_BYTE *)v23 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(v23[2] - 24) + 16));
      v24 = std::locale::use_facet((const std::locale *)&v42, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale((std::locale *)&v42);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v22);
      if (*(_DWORD *)(v22 + 600) == 7)
        goto LABEL_45;
    }
  }
LABEL_20:
  v25 = (turi::unity_sarray *)(*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 64))(this);
  turi::unity_sarray::make_uniform_BOOLean_array(v25, a2, a3, a4, &v41);
  v42 = v41;
  if (*((_QWORD *)&v41 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v40 = v42;
    if (*((_QWORD *)&v42 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
  }
  else
  {
    v40 = (unint64_t)v41;
  }
  turi::unity_sframe::logical_filter_split((uint64_t)this, (uint64_t *)&v40, a5);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_2182870C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  std::locale::~locale(&a13);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::groupby_aggregate(_QWORD *a1@<X0>, const void ***a2@<X1>, __int128 ***a3@<X2>, __int128 **a4@<X3>, std::string **a5@<X4>, _OWORD *a6@<X8>)
{
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  _OWORD *v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v31;
  int64x2_t v32;
  char *v33;
  int64x2_t *v34;
  int64x2_t v35;
  char *v36;
  char **v37;

  v32 = 0uLL;
  v33 = 0;
  v9 = *a5;
  v10 = a5[1];
  if (*a5 != v10)
  {
    do
    {
      turi::get_builtin_group_aggregator(v9, &v31);
      v11 = v32.i64[1];
      if (v32.i64[1] >= (unint64_t)v33)
      {
        v12 = (v32.i64[1] - v32.i64[0]) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v14 = (uint64_t)&v33[-v32.i64[0]];
        if ((uint64_t)&v33[-v32.i64[0]] >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        v37 = &v33;
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v33, v15);
        v18 = &v16[16 * v12];
        *(_OWORD *)v18 = v31;
        v31 = 0uLL;
        v19 = (_QWORD *)v32.i64[1];
        v20 = (_QWORD *)v32.i64[0];
        if (v32.i64[1] == v32.i64[0])
        {
          v23 = vdupq_n_s64(v32.u64[1]);
          v21 = &v16[16 * v12];
        }
        else
        {
          v21 = &v16[16 * v12];
          do
          {
            v22 = *((_OWORD *)v19 - 1);
            v19 -= 2;
            *((_OWORD *)v21 - 1) = v22;
            v21 -= 16;
            *v19 = 0;
            v19[1] = 0;
          }
          while (v19 != v20);
          v23 = v32;
        }
        v24 = v18 + 16;
        v32.i64[0] = (uint64_t)v21;
        v32.i64[1] = (uint64_t)(v18 + 16);
        v35 = v23;
        v25 = v33;
        v33 = &v16[16 * v17];
        v36 = v25;
        v34 = (int64x2_t *)v23.i64[0];
        std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v34);
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
        v32.i64[1] = (uint64_t)v24;
        if (*((_QWORD *)&v31 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
      else
      {
        *(_OWORD *)v32.i64[1] = v31;
        v32.i64[1] = v11 + 16;
      }
      ++v9;
    }
    while (v9 != v10);
  }
  turi::unity_sframe::groupby_aggregate(a1, a2, a3, a4, (std::string::size_type **)&v32, a6);
  v34 = &v32;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
}

void sub_2182872B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13)
{
  a11 = (void **)&a13;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::groupby_aggregate(_QWORD *a1@<X0>, const void ***a2@<X1>, __int128 ***a3@<X2>, __int128 **a4@<X3>, std::string::size_type **a5@<X4>, _OWORD *a6@<X8>)
{
  int *v9;
  file_logger *v10;
  file_logger *started;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  int *v15;
  file_logger *v16;
  file_logger *v17;
  _QWORD *v18;
  const void **v19;
  const void **i;
  __int128 v21;
  int *v22;
  file_logger *v23;
  file_logger *v24;
  uint64_t v25;
  _QWORD *v26;
  int *v27;
  file_logger *v28;
  file_logger *v29;
  _QWORD *v30;
  __int128 **v31;
  __int128 **v32;
  std::string::size_type j;
  std::string::size_type size;
  __int128 v35;
  int *v36;
  file_logger *v37;
  file_logger *v38;
  uint64_t v39;
  _QWORD *v40;
  int *v41;
  file_logger *v42;
  file_logger *v43;
  _QWORD *v44;
  int *v45;
  file_logger *v46;
  file_logger *v47;
  _QWORD *v48;
  std::string::size_type *v49;
  std::string::size_type *v50;
  std::string::size_type v51;
  std::string::size_type v52;
  unint64_t *v53;
  unint64_t v54;
  int *v55;
  file_logger *v56;
  file_logger *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int *v68;
  file_logger *v69;
  file_logger *v70;
  _BYTE *v71;
  const std::locale::facet *v72;
  __int128 **v73;
  __int128 **v74;
  unint64_t v75;
  __int128 **v76;
  __int128 *v77;
  __int128 *v78;
  std::string *v79;
  __int128 v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  std::string::size_type v86;
  uint64_t v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  turi::unity_sframe *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *exception;
  __int128 **v103;
  _OWORD *v104;
  const void ***v105;
  std::string v109;
  __int128 v110;
  __int128 *v111;
  std::__shared_weak_count *v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD v116[2];
  std::__shared_weak_count *v117;
  std::string v118;
  std::string v119;
  std::string *v120;
  std::string v121;
  char *v122;
  _QWORD *v123;

  v9 = (int *)global_logger();
  if (v9[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v9))
      goto LABEL_145;
    v10 = (file_logger *)global_logger();
    started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1219, 1);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12 && *((_BYTE *)v12 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"Function entry", 14);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13)
    {
      if (*((_BYTE *)v13 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(v13[2] - 24) + 16));
        v14 = std::locale::use_facet((const std::locale *)&v121, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale((std::locale *)&v121);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
          goto LABEL_146;
      }
    }
  }
  v15 = (int *)global_logger();
  if (v15[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v15))
      goto LABEL_145;
    v16 = (file_logger *)global_logger();
    v17 = file_logger::start_stream(v16, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1223, 1);
    v18 = pthread_getspecific(*((_QWORD *)v17 + 74));
    if (v18 && *((_BYTE *)v18 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)"Args: Keys: ", 12);
  }
  v105 = a2;
  v19 = *a2;
  for (i = a2[1]; v19 != i; v19 += 3)
  {
    if (*((char *)v19 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v121, (const std::string::value_type *)*v19, (std::string::size_type)v19[1]);
    }
    else
    {
      v21 = *(_OWORD *)v19;
      v121.__r_.__value_.__r.__words[2] = (std::string::size_type)v19[2];
      *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v21;
    }
    v22 = (int *)global_logger();
    if (v22[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v22))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v23 = (file_logger *)global_logger();
      v24 = file_logger::start_stream(v23, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1224, 1);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v119, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
      else
        v119 = v121;
      v25 = file_logger::operator<<<std::string>((uint64_t)v24, (uint64_t)&v119);
      v26 = pthread_getspecific(*(_QWORD *)(v25 + 592));
      if (v26 && *((_BYTE *)v26 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)",", 1);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
  }
  v27 = (int *)global_logger();
  if (v27[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v27))
      goto LABEL_145;
    v28 = (file_logger *)global_logger();
    v29 = file_logger::start_stream(v28, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1225, 1);
    v30 = pthread_getspecific(*((_QWORD *)v29 + 74));
    if (v30 && *((_BYTE *)v30 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\tGroups: ", 9);
  }
  v103 = a4;
  v104 = a6;
  v31 = *a3;
  v32 = a3[1];
  if (*a3 != v32)
  {
    do
    {
      memset(&v121, 0, sizeof(v121));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v121, *v31, v31[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v31[1] - (char *)*v31) >> 3));
      size = v121.__r_.__value_.__l.__size_;
      for (j = v121.__r_.__value_.__r.__words[0]; j != size; j += 24)
      {
        if (*(char *)(j + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)j, *(_QWORD *)(j + 8));
        }
        else
        {
          v35 = *(_OWORD *)j;
          v109.__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 16);
          *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v35;
        }
        v36 = (int *)global_logger();
        if (v36[169] <= 2)
        {
          if (cppipc::must_cancel((cppipc *)v36))
            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
          v37 = (file_logger *)global_logger();
          v38 = file_logger::start_stream(v37, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1228, 1);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v118, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
          else
            v118 = v109;
          v39 = file_logger::operator<<<std::string>((uint64_t)v38, (uint64_t)&v118);
          v40 = pthread_getspecific(*(_QWORD *)(v39 + 592));
          if (v40 && *((_BYTE *)v40 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)",", 1);
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v118.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v109.__r_.__value_.__l.__data_);
      }
      v41 = (int *)global_logger();
      if (v41[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v41))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v42 = (file_logger *)global_logger();
        v43 = file_logger::start_stream(v42, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1230, 1);
        v44 = pthread_getspecific(*((_QWORD *)v43 + 74));
        if (v44 && *((_BYTE *)v44 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44 + 2, (uint64_t)" | ", 3);
      }
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      v31 += 3;
    }
    while (v31 != v32);
  }
  v45 = (int *)global_logger();
  if (v45[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v45))
      goto LABEL_145;
    v46 = (file_logger *)global_logger();
    v47 = file_logger::start_stream(v46, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1232, 1);
    v48 = pthread_getspecific(*((_QWORD *)v47 + 74));
    if (v48 && *((_BYTE *)v48 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48 + 2, (uint64_t)"\tOperations: ", 13);
  }
  v49 = *a5;
  v50 = a5[1];
  if (*a5 != v50)
  {
    do
    {
      v52 = *v49;
      v51 = v49[1];
      v121.__r_.__value_.__r.__words[0] = *v49;
      v121.__r_.__value_.__l.__size_ = v51;
      if (v51)
      {
        v53 = (unint64_t *)(v51 + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = (int *)global_logger();
      if (v55[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v55))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v56 = (file_logger *)global_logger();
        v57 = file_logger::start_stream(v56, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1233, 1);
        v116[1] = v52;
        v117 = (std::__shared_weak_count *)v51;
        if (v51)
        {
          v58 = (unint64_t *)(v51 + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        v60 = file_logger::operator<<<std::shared_ptr<turi::group_aggregate_value>>((uint64_t)v57);
        v61 = pthread_getspecific(*(_QWORD *)(v60 + 592));
        if (v61 && *((_BYTE *)v61 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61 + 2, (uint64_t)",", 1);
        v62 = v117;
        if (v117)
        {
          p_shared_owners = (unint64_t *)&v117->__shared_owners_;
          do
            v64 = __ldaxr(p_shared_owners);
          while (__stlxr(v64 - 1, p_shared_owners));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
      }
      v65 = (std::__shared_weak_count *)v121.__r_.__value_.__l.__size_;
      if (v121.__r_.__value_.__l.__size_)
      {
        v66 = (unint64_t *)(v121.__r_.__value_.__l.__size_ + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v49 += 2;
    }
    while (v49 != v50);
  }
  v68 = (int *)global_logger();
  if (v68[169] < 3)
  {
    if (!cppipc::must_cancel((cppipc *)v68))
    {
      v69 = (file_logger *)global_logger();
      v70 = file_logger::start_stream(v69, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "groupby_aggregate", 1234, 1);
      v71 = pthread_getspecific(*((_QWORD *)v70 + 74));
      if (!v71)
        goto LABEL_94;
      if (!v71[280])
        goto LABEL_94;
      std::ios_base::getloc((const std::ios_base *)&v71[*(_QWORD *)(*((_QWORD *)v71 + 2) - 24) + 16]);
      v72 = std::locale::use_facet((const std::locale *)&v121, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
      std::locale::~locale((std::locale *)&v121);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(v70);
      if (*((_DWORD *)v70 + 150) != 7)
        goto LABEL_94;
LABEL_146:
      __print_back_trace();
      exception = __cxa_allocate_exception(8uLL);
      *exception = "LOG_FATAL encountered";
      __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
    }
LABEL_145:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_94:
  v73 = *a3;
  v74 = a3[1];
  v109.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * (v74 - *a3);
  v114 = ((char *)a5[1] - (char *)*a5) >> 4;
  if (v109.__r_.__value_.__r.__words[0] != v114)
  {
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
    v121.__r_.__value_.__l.__size_ = (std::string::size_type)&v114;
    turi::unity_sframe::groupby_aggregate(std::vector<std::string> const&,std::vector<std::vector<std::string>> const&,std::vector<std::string> const&,std::vector<std::shared_ptr<turi::group_aggregate_value>> const&)::$_0::operator()();
  }
  v114 = 0;
  v115 = 0;
  v116[0] = 0;
  if (v74 != v73)
  {
    v75 = 0;
    while (1)
    {
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v76 = &v73[3 * v75];
      v78 = *v76;
      v77 = v76[1];
      if (*v76 != v77)
        break;
LABEL_111:
      std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>::pair[abi:ne180100]<std::vector<std::string>&,std::shared_ptr<turi::group_aggregate_value> const&,0>(&v109, &v111, &(*a5)[2 * v75]);
      v81 = v115;
      if ((unint64_t)v115 >= v116[0])
      {
        v82 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v115 - v114) >> 3);
        v83 = v82 + 1;
        if (v82 + 1 > 0x666666666666666)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v116[0] - v114) >> 3) > v83)
          v83 = 0x999999999999999ALL * ((v116[0] - v114) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v116[0] - v114) >> 3) >= 0x333333333333333)
          v84 = 0x666666666666666;
        else
          v84 = v83;
        v123 = v116;
        v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>((uint64_t)v116, v84);
        v86 = (std::string::size_type)&v85[40 * v82];
        v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
        v121.__r_.__value_.__l.__size_ = v86;
        v122 = &v85[40 * v87];
        *(_QWORD *)v86 = 0;
        *(_QWORD *)(v86 + 8) = 0;
        *(_QWORD *)(v86 + 16) = 0;
        *(std::string *)v86 = v109;
        memset(&v109, 0, sizeof(v109));
        *(_OWORD *)(v86 + 24) = v110;
        v110 = 0uLL;
        v121.__r_.__value_.__r.__words[2] = v86 + 40;
        std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::__swap_out_circular_buffer(&v114, &v121);
        v88 = v115;
        std::__split_buffer<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::~__split_buffer((uint64_t)&v121);
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
        v115 = v88;
        if (*((_QWORD *)&v110 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
      }
      else
      {
        *v115 = 0;
        v81[1] = 0;
        v81[2] = 0;
        *(std::string *)v81 = v109;
        memset(&v109, 0, sizeof(v109));
        *(_OWORD *)(v81 + 3) = v110;
        v110 = 0uLL;
        v115 = v81 + 5;
      }
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
      ++v75;
      v73 = *a3;
      if (v75 >= 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3))
        goto LABEL_125;
    }
    v79 = 0;
    while (1)
    {
      if (*((char *)v78 + 23) < 0)
      {
        if (*((_QWORD *)v78 + 1))
        {
LABEL_103:
          if ((unint64_t)v79 >= v113)
          {
            v79 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v111, v78);
          }
          else
          {
            if ((*((_BYTE *)v78 + 23) & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(v79, *(const std::string::value_type **)v78, *((_QWORD *)v78 + 1));
            }
            else
            {
              v80 = *v78;
              v79->__r_.__value_.__r.__words[2] = *((_QWORD *)v78 + 2);
              *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
            }
            ++v79;
          }
          v112 = (std::__shared_weak_count *)v79;
        }
      }
      else if (*((_BYTE *)v78 + 23))
      {
        goto LABEL_103;
      }
      v78 = (__int128 *)((char *)v78 + 24);
      if (v78 == v77)
        goto LABEL_111;
    }
  }
LABEL_125:
  v92 = (std::__shared_weak_count *)a1[4];
  v111 = (__int128 *)a1[3];
  v112 = v92;
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  (*(void (**)(std::string *__return_ptr))(*a1 + 128))(&v121);
  turi::query_eval::groupby_aggregate((uint64_t *)&v111, (uint64_t *)&v121, v105, v103, (std::string::size_type *)&v114, (uint64_t *)&v109);
  v120 = &v121;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  v95 = v112;
  if (v112)
  {
    v96 = (unint64_t *)&v112->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v98);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)&v121, (uint64_t)v98);
  turi::unity_sframe::construct_from_sframe((turi::unity_sframe *)v121.__r_.__value_.__l.__data_, (const turi::sframe *)v109.__r_.__value_.__l.__data_);
  *v104 = *(_OWORD *)&v121.__r_.__value_.__l.__data_;
  v99 = (std::__shared_weak_count *)v109.__r_.__value_.__l.__size_;
  if (v109.__r_.__value_.__l.__size_)
  {
    v100 = (unint64_t *)(v109.__r_.__value_.__l.__size_ + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
}

void sub_218287E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  std::locale::~locale((std::locale *)(v37 - 128));
  _Unwind_Resume(a1);
}

uint64_t file_logger::operator<<<std::shared_ptr<turi::group_aggregate_value>>(uint64_t a1)
{
  _BYTE *v2;

  v2 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v2 && v2[280])
    std::ostream::operator<<();
  return a1;
}

void turi::unity_sframe::groupby_aggregate(std::vector<std::string> const&,std::vector<std::vector<std::string>> const&,std::vector<std::string> const&,std::vector<std::shared_ptr<turi::group_aggregate_value>> const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"group_columns.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"group_operations.size()", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "operator()", 1238, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::unity_sframe::groupby_aggregate(std::vector<std::string> const&,std::vector<std::vector<std::string>> const&,std::vector<std::string> const&,std::vector<std::shared_ptr<turi::group_aggregate_value>> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218288194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::join_with_custom_name(turi::unity_sframe *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  int *v12;
  file_logger *v13;
  file_logger *started;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  turi::unity_sframe *v18;
  std::__shared_weak_count *v19;
  turi::unity_sframe *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *exception;
  std::string __p;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  turi::unity_sframe *v43;
  std::__shared_weak_count *v44;
  turi::unity_sframe *v45[2];
  std::locale v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "join_with_custom_name", 1268, 1);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15 && *((_BYTE *)v15 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Function entry", 14);
    v16 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v16)
    {
      if (*((_BYTE *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[2] - 24) + 16));
        v17 = std::locale::use_facet(&v46, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(&v46);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v18 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v18);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)v45, (uint64_t)v18);
  v20 = *(turi::unity_sframe **)a2;
  v19 = *(std::__shared_weak_count **)(a2 + 8);
  v43 = *(turi::unity_sframe **)a2;
  v44 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  turi::unity_sframe::get_underlying_sframe(a1, &v41);
  turi::unity_sframe::get_underlying_sframe(v20, &v39);
  v23 = v41;
  v24 = v39;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::join(v23, v24, (uint64_t)&__p, a4, a5, turi::SFRAME_JOIN_BUFFER_NUM_CELLS, (turi::sframe *)&v46);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  turi::unity_sframe::construct_from_sframe(v45[0], (const turi::sframe *)&v46);
  *a6 = *(_OWORD *)v45;
  v45[0] = 0;
  v45[1] = 0;
  turi::sframe::~sframe((turi::sframe *)&v46);
  v25 = v40;
  if (v40)
  {
    v26 = (unint64_t *)&v40->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v42;
  if (v42)
  {
    v29 = (unint64_t *)&v42->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v44;
  if (v44)
  {
    v32 = (unint64_t *)&v44->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)v45[1];
  if (v45[1])
  {
    v35 = (unint64_t *)((char *)v45[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_21828858C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,std::locale a24)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::sort(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  turi::unity_sframe *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *exception;
  turi::unity_sframe *v28[2];
  __int128 *v29[3];
  uint64_t v30;
  std::__shared_weak_count *v31;
  turi::sframe *v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  uint64_t v35;
  std::locale v36[2];
  uint64_t v37;

  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "sort", 1283, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(v36, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(v36);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v14 = *(_QWORD *)(a2 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v14 - *(_QWORD *)a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    turi::unity_sframe::sort(std::vector<std::string> const&,std::vector<int> const&)::$_0::operator()();
  if (v14 == *(_QWORD *)a2)
    turi::unity_sframe::sort(std::vector<std::string> const&,std::vector<int> const&)::$_1::operator()();
  v36[0].__locale_ = 0;
  v36[1].__locale_ = 0;
  v37 = 0;
  turi::unity_sframe::_convert_column_names_to_indices((uint64_t)a1, (unsigned __int8 ***)a2, (uint64_t)__p);
  if (v36[0].__locale_)
  {
    v36[1] = v36[0];
    operator delete(v36[0].__locale_);
  }
  *(_OWORD *)&v36[0].__locale_ = *(_OWORD *)__p;
  v37 = v35;
  __p[0] = 0;
  __p[1] = 0;
  v35 = 0;
  v16 = (_DWORD *)*a3;
  v15 = (_DWORD *)a3[1];
  while (v16 != v15)
  {
    LOBYTE(v32) = *v16 != 0;
    std::vector<BOOL>::push_back((uint64_t)__p, &v32);
    ++v16;
  }
  v17 = (std::__shared_weak_count *)a1[4];
  v30 = a1[3];
  v31 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  (*(void (**)(__int128 **__return_ptr, _QWORD *))(*a1 + 128))(v29, a1);
  turi::query_eval::ec_sort(&v30, v29, (unint64_t **)v36, (uint64_t)__p, (uint64_t *)&v32);
  v28[0] = (turi::unity_sframe *)v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v23);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)v28, (uint64_t)v23);
  turi::unity_sframe::construct_from_sframe(v28[0], v32);
  *a4 = *(_OWORD *)v28;
  v24 = v33;
  if (v33)
  {
    v25 = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v36[0].__locale_)
  {
    v36[1] = v36[0];
    operator delete(v36[0].__locale_);
  }
}

void sub_218288958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p)
{
  uint64_t v19;

  std::locale::~locale((std::locale *)(v19 - 96));
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void turi::unity_sframe::pack_columns(uint64_t a1@<X0>, const std::string **a2@<X1>, __int128 **a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  int *v12;
  file_logger *v13;
  file_logger *started;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  turi::unity_sarray *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unsigned int v44;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t (***v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t (***v61)();
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *exception;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  __int128 v114;
  __int128 v115;
  char v116[8];
  _QWORD *v117;
  uint64_t v118;
  _BYTE v119[13];
  uint64_t (**v120)();
  _BYTE v121[13];
  uint64_t (***v122)();
  _BYTE v123[13];
  uint64_t (**v124)();
  _BYTE v125[13];
  uint64_t (***v126)();
  std::string v127;
  _BYTE v128[13];
  _BYTE v129[24];
  _BYTE *v130;
  _QWORD v131[2];
  _QWORD v132[2];
  std::string v133;
  _QWORD v134[3];

  v134[2] = *MEMORY[0x24BDAC8D0];
  v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "pack_columns", 1322, 1);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15 && *((_BYTE *)v15 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Function entry", 14);
    v16 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v16)
    {
      if (*((_BYTE *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[2] - 24) + 16));
        v17 = std::locale::use_facet((const std::locale *)&v133, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale((std::locale *)&v133);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((a4 - 6) <= 0xFCu)
    turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_0::operator()();
  std::set<turi::flexible_type>::set[abi:ne180100]<std::__wrap_iter<std::string const*>>((uint64_t)v116, *a2, a2[1]);
  if (v118 != 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3))
  {
    v98 = __cxa_allocate_exception(8uLL);
    *v98 = "There are duplicate names in packed columns";
    __cxa_throw(v98, MEMORY[0x24BEDB718], 0);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, const std::string **))(*(_QWORD *)a1 + 184))(&v133, a1, a2);
  v115 = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
  if (v133.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(v133.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    size = (std::__shared_weak_count *)v133.__r_.__value_.__l.__size_;
    if (v133.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(v133.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  memset(&v133, 0, sizeof(v133));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v133, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  memset(v134, 0, 13);
  if (v134 != (_QWORD *)a5)
  {
    *(_QWORD *)((char *)v134 + 5) = *(_QWORD *)(a5 + 5);
    v134[0] = *(_QWORD *)a5;
    BYTE4(v134[1]) = *(_BYTE *)(a5 + 12);
    if (BYTE4(v134[1]) <= 9u && ((1 << SBYTE4(v134[1])) & 0x33C) != 0)
    {
      v23 = (unint64_t *)v134[0];
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
    }
  }
  memset(v132, 0, 13);
  if (v132 != (_QWORD *)a5)
  {
    *(_QWORD *)((char *)v132 + 5) = *(_QWORD *)(a5 + 5);
    v132[0] = *(_QWORD *)a5;
    BYTE4(v132[1]) = *(_BYTE *)(a5 + 12);
    if (BYTE4(v132[1]) <= 9u && ((1 << SBYTE4(v132[1])) & 0x33C) != 0)
    {
      v25 = (unint64_t *)v132[0];
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
  }
  memset(v131, 0, 13);
  if (v131 != (_QWORD *)a5)
  {
    *(_QWORD *)((char *)v131 + 5) = *(_QWORD *)(a5 + 5);
    v131[0] = *(_QWORD *)a5;
    BYTE4(v131[1]) = *(_BYTE *)(a5 + 12);
    if (BYTE4(v131[1]) <= 9u && ((1 << SBYTE4(v131[1])) & 0x33C) != 0)
    {
      v27 = (unint64_t *)v131[0];
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
    }
  }
  v29 = (turi::unity_sarray *)operator new();
  turi::unity_sarray::unity_sarray(v29);
  std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>((uint64_t *)&v114, (uint64_t)v29);
  if (a4 == 4)
  {
    v41 = *(std::__shared_weak_count **)(v115 + 32);
    v106 = *(_QWORD *)(v115 + 24);
    v107 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(p_shared_owners);
      while (__stxr(v43 + 1, p_shared_owners));
    }
    *(_QWORD *)&v123[5] = *(_QWORD *)((char *)v132 + 5);
    *(_QWORD *)v123 = v132[0];
    v123[12] = BYTE4(v132[1]);
    v44 = BYTE4(v132[1]);
    if (BYTE4(v132[1]) <= 9u && ((1 << SBYTE4(v132[1])) & 0x33C) != 0)
    {
      v46 = *(unint64_t **)v123;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
      v44 = v123[12];
    }
    v126 = 0;
    *(_QWORD *)&v125[5] = *(_QWORD *)&v123[5];
    v124 = &off_24D9355B8;
    *(_QWORD *)v125 = *(_QWORD *)v123;
    v125[12] = v44;
    if (v44 <= 9 && ((1 << v44) & 0x33C) != 0)
    {
      v48 = *(unint64_t **)v125;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 + 1, v48));
    }
    v126 = &v124;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node(&v106, (uint64_t)&v124, 4, -1, &v112);
    v50 = v126;
    if (v126 == &v124)
    {
      v51 = 4;
      v50 = &v124;
    }
    else
    {
      if (!v126)
        goto LABEL_86;
      v51 = 5;
    }
    (*v50)[v51]();
LABEL_86:
    turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2((uint64_t)v123);
    v63 = v107;
    if (v107)
    {
      v64 = (unint64_t *)&v107->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = (_QWORD *)v114;
    v104 = v112;
    v105 = v113;
    if (v113)
    {
      v67 = (unint64_t *)&v113->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    turi::unity_sarray::construct_from_planner_node(v66, &v104);
    v69 = v105;
    if (v105)
    {
      v70 = (unint64_t *)&v105->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = v113;
    if (!v113)
      goto LABEL_142;
    v73 = (unint64_t *)&v113->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
LABEL_140:
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
    goto LABEL_142;
  }
  if (a4 != 5)
  {
    v52 = *(std::__shared_weak_count **)(v115 + 32);
    v102 = *(_QWORD *)(v115 + 24);
    v103 = v52;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    *(_QWORD *)&v119[5] = *(_QWORD *)((char *)v131 + 5);
    *(_QWORD *)v119 = v131[0];
    v119[12] = BYTE4(v131[1]);
    v55 = BYTE4(v131[1]);
    if (BYTE4(v131[1]) <= 9u && ((1 << SBYTE4(v131[1])) & 0x33C) != 0)
    {
      v57 = *(unint64_t **)v119;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 + 1, v57));
      v55 = v119[12];
    }
    v122 = 0;
    *(_QWORD *)&v121[5] = *(_QWORD *)&v119[5];
    v120 = &off_24D935638;
    *(_QWORD *)v121 = *(_QWORD *)v119;
    v121[12] = v55;
    if (v55 <= 9 && ((1 << v55) & 0x33C) != 0)
    {
      v59 = *(unint64_t **)v121;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 + 1, v59));
    }
    v122 = &v120;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node(&v102, (uint64_t)&v120, a4, -1, &v112);
    v61 = v122;
    if (v122 == &v120)
    {
      v62 = 4;
      v61 = &v120;
    }
    else
    {
      if (!v122)
        goto LABEL_105;
      v62 = 5;
    }
    (*v61)[v62]();
LABEL_105:
    turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3((uint64_t)v119);
    v75 = v103;
    if (v103)
    {
      v76 = (unint64_t *)&v103->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = (_QWORD *)v114;
    v100 = v112;
    v101 = v113;
    if (v113)
    {
      v79 = (unint64_t *)&v113->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    turi::unity_sarray::construct_from_planner_node(v78, &v100);
    v81 = v101;
    if (v101)
    {
      v82 = (unint64_t *)&v101->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v72 = v113;
    if (!v113)
      goto LABEL_142;
    v84 = (unint64_t *)&v113->__shared_owners_;
    do
      v74 = __ldaxr(v84);
    while (__stlxr(v74 - 1, v84));
    goto LABEL_140;
  }
  v30 = *(std::__shared_weak_count **)(v115 + 32);
  v110 = *(_QWORD *)(v115 + 24);
  v111 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  memset(&v127, 0, sizeof(v127));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v127, (__int128 *)v133.__r_.__value_.__l.__data_, (__int128 *)v133.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v133.__r_.__value_.__l.__size_ - v133.__r_.__value_.__r.__words[0]) >> 3));
  *(_QWORD *)&v128[5] = *(_QWORD *)((char *)v134 + 5);
  *(_QWORD *)v128 = v134[0];
  v128[12] = BYTE4(v134[1]);
  if (BYTE4(v134[1]) <= 9u && ((1 << SBYTE4(v134[1])) & 0x33C) != 0)
  {
    v33 = *(unint64_t **)v128;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  v130 = 0;
  v35 = (char *)operator new(0x30uLL);
  *(_QWORD *)v35 = &off_24D935538;
  *((_QWORD *)v35 + 2) = 0;
  *((_QWORD *)v35 + 3) = 0;
  *((_QWORD *)v35 + 1) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v35 + 8), (__int128 *)v127.__r_.__value_.__l.__data_, (__int128 *)v127.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v127.__r_.__value_.__l.__size_ - v127.__r_.__value_.__r.__words[0]) >> 3));
  *((_QWORD *)v35 + 4) = *(_QWORD *)v128;
  *(_QWORD *)(v35 + 37) = *(_QWORD *)&v128[5];
  v36 = v128[12];
  v35[44] = v128[12];
  if (v36 <= 9 && ((1 << v36) & 0x33C) != 0)
  {
    v37 = (unint64_t *)*((_QWORD *)v35 + 4);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 + 1, v37));
  }
  v130 = v35;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node(&v110, (uint64_t)v129, 5, -1, &v112);
  v39 = v130;
  if (v130 == v129)
  {
    v40 = 4;
    v39 = v129;
    goto LABEL_123;
  }
  if (v130)
  {
    v40 = 5;
LABEL_123:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1((uint64_t)&v127);
  v85 = v111;
  if (v111)
  {
    v86 = (unint64_t *)&v111->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (_QWORD *)v114;
  v108 = v112;
  v109 = v113;
  if (v113)
  {
    v89 = (unint64_t *)&v113->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  turi::unity_sarray::construct_from_planner_node(v88, &v108);
  v91 = v109;
  if (v109)
  {
    v92 = (unint64_t *)&v109->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v72 = v113;
  if (v113)
  {
    v94 = (unint64_t *)&v113->__shared_owners_;
    do
      v74 = __ldaxr(v94);
    while (__stlxr(v74 - 1, v94));
    goto LABEL_140;
  }
LABEL_142:
  *a6 = v114;
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3((uint64_t)v131);
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2((uint64_t)v132);
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1((uint64_t)&v133);
  if (v95)
  {
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  std::__tree<turi::flexible_type>::destroy((uint64_t)v116, v117);
}

void sub_218289514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,_QWORD *a28)
{
  uint64_t v28;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3(v28 - 160);
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2(v28 - 144);
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1(v28 - 128);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::__tree<turi::flexible_type>::destroy((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 24);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 24);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 24);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 24);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 24);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 24);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 24);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 24);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 24);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 24);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 24);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 24);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  v32 = (void **)a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
  return a1;
}

uint64_t turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

void turi::unity_sframe::stack(_QWORD *a1@<X0>, std::string::size_type a2@<X1>, std::string **a3@<X2>, char **a4@<X3>, char a5@<W4>, _OWORD *a6@<X8>)
{
  int *v11;
  file_logger *v12;
  file_logger *started;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  std::string *v17;
  std::string *v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  std::string::size_type size;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  std::string *v26;
  BOOL v27;
  std::string *data;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  int v40;
  _QWORD *v41;
  const char *v42;
  unint64_t v44;
  unint64_t i;
  char *v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  std::string *v54;
  __int128 v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  _BYTE *v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string::size_type v62;
  int64_t v63;
  std::string::size_type v64;
  size_t v65;
  _BYTE *v66;
  std::string::size_type v67;
  std::string::size_type v68;
  char v69;
  turi::sframe *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  std::string *v88;
  __int128 v89;
  _QWORD *exception;
  _OWORD *v91;
  char **v92;
  std::string **v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::string __p;
  turi::sframe *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  std::string v103;
  std::string v104;
  char v105[8];
  char *v106;
  void *v107[3];
  std::locale v108;
  const void **v109;
  char v110;
  char v111;
  uint64_t v112[4];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _BYTE v117[24];
  _BYTE *v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v110 = a5;
  v11 = (int *)global_logger();
  if (v11[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v11))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "stack", 1407, 1);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Function entry", 14);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15)
    {
      if (*((_BYTE *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
        v16 = std::locale::use_facet(&v108, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v108);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  (*(void (**)(std::locale *__return_ptr, _QWORD *))(*a1 + 128))(&v108, a1);
  (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 120))(v107, a1);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v105, (const void **)v108.__locale_, v109);
  v17 = *a3;
  v18 = a3[1];
  v93 = a3;
  if (*a3 == v18)
    goto LABEL_146;
  v19 = 0;
  do
  {
    if (SHIBYTE(v17->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v104, v17->__r_.__value_.__l.__data_, v17->__r_.__value_.__l.__size_);
    }
    else
    {
      v20 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v20;
    }
    if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v105, (const void **)&v104.__r_.__value_.__l.__data_))
    {
      v21 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      else
        size = v104.__r_.__value_.__l.__size_;
      v23 = *(unsigned __int8 *)(a2 + 23);
      v24 = (char)v23;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a2 + 8);
      if (size != v23)
        goto LABEL_144;
      if (v24 >= 0)
        v25 = (unsigned __int8 *)a2;
      else
        v25 = *(unsigned __int8 **)a2;
      if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v104.__r_.__value_.__l.__data_, v25, v104.__r_.__value_.__l.__size_))
          goto LABEL_144;
      }
      else if (*((_BYTE *)&v104.__r_.__value_.__s + 23))
      {
        v26 = &v104;
        while (v26->__r_.__value_.__s.__data_[0] == *v25)
        {
          v26 = (std::string *)((char *)v26 + 1);
          ++v25;
          if (!--v21)
            goto LABEL_31;
        }
LABEL_144:
        v87 = __cxa_allocate_exception(0x18uLL);
        std::operator+<char>();
        v88 = std::string::append(&v103, "' is already used by current SFrame, pick a new column name");
        v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v87[2] = *((_QWORD *)&v88->__r_.__value_.__l + 2);
        *(_OWORD *)v87 = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
      }
    }
LABEL_31:
    v27 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v105, (const void **)a2) != 0;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    v19 |= v27;
    ++v17;
  }
  while (v17 != v18);
  if ((v19 & 1) == 0)
  {
LABEL_146:
    v104.__r_.__value_.__r.__words[0] = a2;
    turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_0::operator()();
  }
  v102 = 0;
  v101 = 0;
  (*(void (**)(std::string *__return_ptr, _QWORD *, std::string::size_type))(*a1 + 192))(&v104, a1, a2);
  v29 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v104.__r_.__value_.__l.__data_ + 112))(v104.__r_.__value_.__r.__words[0]);
  v30 = (std::__shared_weak_count *)v104.__r_.__value_.__l.__size_;
  if (v104.__r_.__value_.__l.__size_)
  {
    v31 = (unint64_t *)(v104.__r_.__value_.__l.__size_ + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v101 = v29;
  if (v29 == 3 || v29 == 4)
  {
    v33 = 1;
  }
  else
  {
    if (v29 != 5)
    {
      v41 = __cxa_allocate_exception(8uLL);
      v42 = "Column type is not supported for stack";
      goto LABEL_151;
    }
    v33 = 2;
  }
  v102 = v33;
  if (a4[1] - *a4 != v33)
  {
    v41 = __cxa_allocate_exception(8uLL);
    v42 = "column types given is not matching the expected number";
    goto LABEL_151;
  }
  v34 = *v93;
  v35 = (char *)v93[1] - (char *)*v93;
  if (0xAAAAAAAAAAAAAAABLL * (v35 >> 3) != v33)
  {
    v41 = __cxa_allocate_exception(8uLL);
    v42 = "column names given is not matching the expected number";
    goto LABEL_151;
  }
  if (v35 != 48)
    goto LABEL_67;
  v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  v37 = v34->__r_.__value_.__l.__size_;
  if ((v36 & 0x80u) == 0)
    v38 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  else
    v38 = v34->__r_.__value_.__l.__size_;
  v39 = HIBYTE(v34[1].__r_.__value_.__r.__words[2]);
  v40 = (char)v39;
  if ((v39 & 0x80u) != 0)
    v39 = v34[1].__r_.__value_.__l.__size_;
  if (v38 != v39)
    goto LABEL_67;
  if (v40 >= 0)
    data = v34 + 1;
  else
    data = (std::string *)v34[1].__r_.__value_.__l.__data_;
  if ((v36 & 0x80) != 0)
  {
    if (memcmp(v34->__r_.__value_.__l.__data_, data, v34->__r_.__value_.__l.__size_) || v37 == 0)
      goto LABEL_67;
LABEL_61:
    v41 = __cxa_allocate_exception(8uLL);
    v42 = "There is duplicate column names in new_column_names parameter";
LABEL_151:
    *v41 = v42;
    __cxa_throw(v41, MEMORY[0x24BEDB718], 0);
  }
  if (*((_BYTE *)&v34->__r_.__value_.__s + 23))
  {
    while (v34->__r_.__value_.__s.__data_[0] == data->__r_.__value_.__s.__data_[0])
    {
      v34 = (std::string *)((char *)v34 + 1);
      data = (std::string *)((char *)data + 1);
      if (!--v36)
        goto LABEL_61;
    }
  }
LABEL_67:
  v100 = 0;
  v92 = a4;
  v91 = a6;
  v100 = (*(uint64_t (**)(_QWORD *, std::string *))(*a1 + 112))(a1, data);
  memset(&v104, 0, sizeof(v104));
  memset(&v103, 0, sizeof(v103));
  std::vector<std::string>::reserve((std::vector<std::string> *)&v104, v100 + v102 - 1);
  std::vector<turi::flex_type_enum>::reserve((unint64_t *)&v103, v100 + v102 - 1);
  v44 = v100;
  if (v100)
  {
    for (i = 0; i < v44; ++i)
    {
      v46 = (char *)v108.__locale_ + 24 * i;
      v47 = *((_QWORD *)v46 + 1);
      if (v46[23] >= 0)
        v48 = v46[23];
      else
        v48 = *((_QWORD *)v46 + 1);
      v49 = *(unsigned __int8 *)(a2 + 23);
      v50 = (char)v49;
      if ((v49 & 0x80u) != 0)
        v49 = *(_QWORD *)(a2 + 8);
      if (v48 != v49)
        goto LABEL_84;
      if (v50 >= 0)
        v51 = (unsigned __int8 *)a2;
      else
        v51 = *(unsigned __int8 **)a2;
      if (v46[23] < 0)
      {
        v56 = *(const std::string::value_type **)v46;
        if (memcmp(*(const void **)v46, v51, *((_QWORD *)v46 + 1)))
        {
          v54 = (std::string *)v104.__r_.__value_.__l.__size_;
          if (v104.__r_.__value_.__l.__size_ >= v104.__r_.__value_.__r.__words[2])
            goto LABEL_89;
LABEL_91:
          std::string::__init_copy_ctor_external(v54, v56, v47);
          goto LABEL_92;
        }
      }
      else if (v46[23])
      {
        v52 = (unsigned __int8 *)v108.__locale_ + 24 * i;
        v53 = v46[23];
        while (*v52 == *v51)
        {
          ++v52;
          ++v51;
          if (!--v53)
            goto LABEL_111;
        }
LABEL_84:
        v54 = (std::string *)v104.__r_.__value_.__l.__size_;
        if (v104.__r_.__value_.__l.__size_ >= v104.__r_.__value_.__r.__words[2])
        {
LABEL_89:
          v57 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v104, (__int128 *)v46);
        }
        else
        {
          if (v46[23] < 0)
          {
            v56 = *(const std::string::value_type **)v46;
            goto LABEL_91;
          }
          v55 = *(_OWORD *)v46;
          *(_QWORD *)(v104.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)v46 + 2);
          *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
LABEL_92:
          v57 = (std::string::size_type)&v54[1];
        }
        v104.__r_.__value_.__l.__size_ = v57;
        v58 = v107[0];
        v59 = v103.__r_.__value_.__l.__size_;
        if (v103.__r_.__value_.__l.__size_ >= v103.__r_.__value_.__r.__words[2])
        {
          v61 = v103.__r_.__value_.__r.__words[0];
          v62 = v103.__r_.__value_.__l.__size_ - v103.__r_.__value_.__r.__words[0];
          v63 = v103.__r_.__value_.__l.__size_ - v103.__r_.__value_.__r.__words[0] + 1;
          if (v63 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v64 = v103.__r_.__value_.__r.__words[2] - v103.__r_.__value_.__r.__words[0];
          if (2 * (v103.__r_.__value_.__r.__words[2] - v103.__r_.__value_.__r.__words[0]) > v63)
            v63 = 2 * v64;
          if (v64 >= 0x3FFFFFFFFFFFFFFFLL)
            v65 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v65 = v63;
          if (v65)
            v66 = operator new(v65);
          else
            v66 = 0;
          v67 = (std::string::size_type)&v66[v62];
          v66[v62] = v58[i];
          v60 = (std::string::size_type)&v66[v62 + 1];
          if (v59 != v61)
          {
            v68 = ~v61 + v59;
            do
            {
              v69 = *(_BYTE *)--v59;
              v66[v68--] = v69;
            }
            while (v59 != v61);
            v67 = (std::string::size_type)v66;
          }
          v103.__r_.__value_.__r.__words[0] = v67;
          v103.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[v62 + 1];
          v103.__r_.__value_.__r.__words[2] = (std::string::size_type)&v66[v65];
          if (v61)
            operator delete((void *)v61);
        }
        else
        {
          *(_BYTE *)v103.__r_.__value_.__l.__size_ = *((_BYTE *)v107[0] + i);
          v60 = v59 + 1;
        }
        v103.__r_.__value_.__l.__size_ = v60;
        v44 = v100;
      }
LABEL_111:
      ;
    }
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::vector<std::string> *)&v104, (std::string *)v104.__r_.__value_.__l.__size_, *v93, (__int128 *)v93[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v93[1] - (char *)*v93) >> 3));
  std::vector<turi::flex_type_enum>::__insert_with_size[abi:ne180100]<std::__wrap_iter<turi::flex_type_enum*>,std::__wrap_iter<turi::flex_type_enum*>>((uint64_t)&v103, (char *)v103.__r_.__value_.__l.__size_, *v92, v92[1], v92[1] - *v92);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v98);
  v70 = v98;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::sframe::open_for_write((uint64_t)v70, &v104, &v103, &__p, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v96 = 0;
  v71 = (*(uint64_t (**)(_QWORD *, std::string::size_type))(*a1 + 136))(a1, a2);
  v72 = (std::__shared_weak_count *)a1[4];
  v94 = a1[3];
  v95 = v72;
  v96 = v71;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldxr(p_shared_owners);
    while (__stxr(v74 + 1, p_shared_owners));
  }
  v118 = 0;
  v75 = operator new(0x38uLL);
  *v75 = &off_24D9356B8;
  v75[1] = &v98;
  v75[2] = &v100;
  v75[3] = &v102;
  v75[4] = &v96;
  v75[5] = &v110;
  v75[6] = &v101;
  v118 = v75;
  v76 = turi::SFRAME_DEFAULT_NUM_SEGMENTS;
  memset(v112, 0, sizeof(v112));
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  BYTE11(v113) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v114, "");
  *((_QWORD *)&v115 + 1) = 0;
  v116 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v111, &v94, (uint64_t)v117, v76, v112);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SBYTE7(v115) < 0)
    operator delete((void *)v114);
  v77 = (uint64_t *)v113;
  if ((uint64_t *)v113 == &v112[1])
  {
    v78 = 4;
    v77 = &v112[1];
  }
  else
  {
    if (!(_QWORD)v113)
      goto LABEL_124;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_124:
  v79 = v118;
  if (v118 == v117)
  {
    v80 = 4;
    v79 = v117;
    goto LABEL_128;
  }
  if (v118)
  {
    v80 = 5;
LABEL_128:
    (*(void (**)(void))(*v79 + 8 * v80))();
  }
  v81 = v95;
  if (v95)
  {
    v82 = (unint64_t *)&v95->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  (*(void (**)(turi::sframe *))(*(_QWORD *)v98 + 40))(v98);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
  turi::unity_sframe::construct_from_sframe((turi::unity_sframe *)__p.__r_.__value_.__l.__data_, v98);
  *v91 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v84 = v99;
  if (v99)
  {
    v85 = (unint64_t *)&v99->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (v103.__r_.__value_.__r.__words[0])
  {
    v103.__r_.__value_.__l.__size_ = v103.__r_.__value_.__r.__words[0];
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v105, v106);
  if (v107[0])
  {
    v107[1] = v107[0];
    operator delete(v107[0]);
  }
  v107[0] = &v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v107);
}

void sub_21828A6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,std::locale a48)
{
  std::locale::~locale(&a48);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::copy_range(turi::unity_sframe *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char *a4@<X3>, _OWORD *a5@<X8>)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  unint64_t v16;
  turi::unity_sframe *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  turi::unity_sframe *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  turi::sframe **v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *exception;
  uint64_t v58;
  std::__shared_weak_count *v59;
  char v60;
  std::string __p;
  void *v62;
  std::__shared_weak_count *v63;
  uint64_t v64[2];
  turi::unity_sframe *v65[2];
  uint64_t v66[4];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[24];
  _BYTE *v72;
  turi::sframe *v73;
  std::__shared_weak_count *v74;
  turi::sframe **v75;
  _BYTE v76[24];
  _BYTE *v77;
  _BYTE v78[24];
  _BYTE *v79;
  std::locale v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "copy_range", 1536, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet(&v80, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(&v80);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (!a3)
    turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_0::operator()();
  v16 = (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 64))(this);
  if (v16 < (unint64_t)a4)
    a4 = (char *)v16;
  v17 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v17);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)v65, (uint64_t)v17);
  if (a3 != 1 || (unint64_t)a4 <= a2)
  {
    turi::sframe::sframe((turi::sframe *)&v80);
    (*(void (**)(turi::sframe **__return_ptr, turi::unity_sframe *))(*(_QWORD *)this + 128))(&v73, this);
    (*(void (**)(void **__return_ptr, turi::unity_sframe *))(*(_QWORD *)this + 120))(&v62, this);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    turi::sframe::open_for_write((uint64_t)&v80, &v73, &v62, &__p, 1, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v62)
    {
      v63 = (std::__shared_weak_count *)v62;
      operator delete(v62);
    }
    v62 = &v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    if ((unint64_t)a4 <= a2)
      goto LABEL_83;
    v33 = (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 304))(this) ^ 1;
    if (a2)
      LOBYTE(v33) = 0;
    if ((v33 & 1) == 0)
    {
      turi::unity_sframe::get_underlying_sframe(this, &v73);
      turi::copy_range<turi::sframe &,turi::sframe &,void,void>(v73, (std::locale::__imp *)&v80, a2, a3, (unint64_t)a4);
      v34 = v74;
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      goto LABEL_83;
    }
    __p.__r_.__value_.__r.__words[0] = 0;
    turi::sframe::get_output_iterator((size_t *)&v80, 0, (uint64_t)&v73);
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v58 = *((_QWORD *)this + 3);
    v59 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v72 = 0;
    v40 = operator new(0x30uLL);
    *v40 = &off_24D935758;
    v40[1] = &__p;
    v40[2] = &v73;
    v40[3] = 0;
    v40[4] = a3;
    v40[5] = a4;
    v72 = v40;
    memset(v66, 0, sizeof(v66));
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    BYTE11(v67) = 1;
    std::string::basic_string[abi:ne180100]<0>(&v68, "");
    *((_QWORD *)&v69 + 1) = 0;
    v70 = 0uLL;
    turi::query_eval::planner::materialize((uint64_t)&v60, &v58, (uint64_t)v71, 1, v66);
    v62 = (char *)&v69 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    if (SBYTE7(v69) < 0)
      operator delete((void *)v68);
    v41 = (uint64_t *)v67;
    if ((uint64_t *)v67 == &v66[1])
    {
      v42 = 4;
      v41 = &v66[1];
    }
    else
    {
      if (!(_QWORD)v67)
        goto LABEL_58;
      v42 = 5;
    }
    (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_58:
    v43 = v72;
    if (v72 == v71)
    {
      v44 = 4;
      v43 = v71;
    }
    else
    {
      if (!v72)
      {
LABEL_63:
        v45 = v59;
        if (v59)
        {
          v46 = (unint64_t *)&v59->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = v79;
        if (v79 == v78)
        {
          v49 = 4;
          v48 = v78;
        }
        else
        {
          if (!v79)
            goto LABEL_73;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_73:
        v50 = v77;
        if (v77 == v76)
        {
          v51 = 4;
          v50 = v76;
        }
        else
        {
          if (!v77)
            goto LABEL_78;
          v51 = 5;
        }
        (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_78:
        v52 = v75;
        if (v75 == &v73)
        {
          v53 = 4;
          v52 = &v73;
        }
        else
        {
          if (!v75)
          {
LABEL_83:
            turi::sframe::close((turi::sframe *)&v80);
            turi::unity_sframe::construct_from_sframe(v65[0], (const turi::sframe *)&v80);
            *a5 = *(_OWORD *)v65;
            v65[0] = 0;
            v65[1] = 0;
            turi::sframe::~sframe((turi::sframe *)&v80);
            goto LABEL_84;
          }
          v53 = 5;
        }
        (*((void (**)(void))*v52 + v53))();
        goto LABEL_83;
      }
      v44 = 5;
    }
    (*(void (**)(void))(*v43 + 8 * v44))();
    goto LABEL_63;
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v73 = (turi::sframe *)*((_QWORD *)this + 3);
  v74 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  turi::query_eval::planner::slice((unint64_t *)&v73, a2, a4, (uint64_t *)&v62);
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)this + 3, (uint64_t *)&v73);
  v21 = v65[0];
  v22 = v63;
  v64[0] = (uint64_t)v62;
  v64[1] = (uint64_t)v63;
  if (v63)
  {
    v23 = (unint64_t *)&v63->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  (*(void (**)(std::locale *__return_ptr, turi::unity_sframe *))(*(_QWORD *)this + 128))(&v80, this);
  turi::unity_sframe::construct_from_planner_node((uint64_t)v21, v64, (uint64_t)&v80);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *a5 = *(_OWORD *)v65;
  v65[0] = 0;
  v65[1] = 0;
  v27 = v63;
  if (v63)
  {
    v28 = (unint64_t *)&v63->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v74;
  if (v74)
  {
    v31 = (unint64_t *)&v74->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
LABEL_84:
  v54 = (std::__shared_weak_count *)v65[1];
  if (v65[1])
  {
    v55 = (unint64_t *)((char *)v65[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_21828AF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::locale a54)
{
  char *v55;
  uint64_t v56;

  turi::query_eval::materialize_options::~materialize_options(&a26);
  v55 = a41;
  if (a41 == &a38)
  {
    v56 = 4;
    v55 = &a38;
  }
  else
  {
    if (!a41)
      goto LABEL_6;
    v56 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v55 + 8 * v56))();
LABEL_6:
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a42);
  turi::sframe::~sframe((turi::sframe *)&a54);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

turi::sframe_reader *turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe *a1, std::locale::__imp *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  turi::sframe_reader *result;
  _QWORD *exception;
  std::locale v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  turi::sframe_reader **v25;
  uint64_t v26;
  turi::sframe_reader *v27;
  unint64_t v28;
  unint64_t v29;

  v28 = a4;
  v29 = a3;
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "copy_range", 603, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet(&v21, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(&v21);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (*((_BYTE *)a1 + 288))
    v16 = *((_BYTE *)a1 + 289) == 0;
  else
    v16 = 0;
  if (!v16)
    turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  if (!*((_BYTE *)a2 + 288) || !*((_BYTE *)a2 + 289))
    turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  turi::sframe::get_reader(a1, &v27);
  v17 = *((_QWORD *)v27 + 5);
  if (v17 >= a5)
    v17 = a5;
  if (v17 < a3)
    turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#3}::operator()();
  v26 = (v17 + ~a3) / a4 + 1;
  v18 = (*(uint64_t (**)(std::locale::__imp *))(*(_QWORD *)a2 + 24))(a2);
  v21.__locale_ = a2;
  v22 = &v26;
  v23 = (uint64_t *)&v28;
  v24 = (uint64_t *)&v29;
  v25 = &v27;
  turi::parallel_for<void turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(0, v18, &v21);
  result = v27;
  v27 = 0;
  if (result)
    return (turi::sframe_reader *)(*(uint64_t (**)(turi::sframe_reader *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_21828B344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::drop_missing_values(turi::unity_sframe *a1@<X0>, unsigned __int8 ***a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  int *v12;
  file_logger *v13;
  file_logger *started;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *locale;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unsigned int v43;
  int v45;
  uint64_t v47;
  __n128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t (**v53)();
  uint64_t (**v54)();
  std::locale *v55;
  uint64_t v56;
  uint64_t v57;
  std::locale::__imp *v58;
  std::locale::__imp *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t i;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *exception;
  __int128 v93;
  __int128 v94;
  std::locale::__imp *v95;
  std::__shared_weak_count *v96;
  void *__p;
  __int128 v98;
  __int128 v99;
  _BYTE v100[24];
  _BYTE *v101;
  __int128 v102;
  __int128 *v103;
  std::locale v104[5];

  v104[4] = *(std::locale *)MEMORY[0x24BDAC8D0];
  v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "drop_missing_values", 1595, 1);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15 && *((_BYTE *)v15 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Function entry", 14);
    v16 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v16)
    {
      if (*((_BYTE *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[2] - 24) + 16));
        v17 = std::locale::use_facet(v104, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(v104);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v19 = *a2;
  v18 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (v18 - v19) > (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)a1 + 112))(a1))
    turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_0::operator()();
  v99 = 0uLL;
  v20 = *a2;
  v21 = a2[1];
  if ((char *)v21 - (char *)*a2 == 24)
  {
    (*(void (**)(__int128 *__return_ptr, turi::unity_sframe *))(*(_QWORD *)a1 + 192))(&v102, a1);
    *(_OWORD *)&v104[0].__locale_ = v102;
    if (*((_QWORD *)&v102 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
      if (*((_QWORD *)&v102 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    turi::unity_sarray::missing_mask(v104[0].__locale_, a5, 0, &v102);
    v27 = v102;
    if (*((_QWORD *)&v102 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v99 = v27;
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
    if (*((_QWORD *)&v102 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    locale = (std::__shared_weak_count *)v104[1].__locale_;
    if (v104[1].__locale_)
    {
      v34 = (unint64_t *)((char *)v104[1].__locale_ + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
        std::__shared_weak_count::__release_weak(locale);
      }
    }
    goto LABEL_114;
  }
  __p = 0;
  v98 = 0uLL;
  if (v20 == v21)
  {
    v40 = (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)a1 + 112))(a1);
    std::vector<unsigned long>::resize((uint64_t)&__p, v40);
    v36 = (char *)__p;
    v37 = (char *)v98;
    if (__p == (void *)v98)
    {
      v37 = (char *)__p;
      if (!a5)
        goto LABEL_34;
    }
    else
    {
      v41 = 0;
      v42 = (char *)__p;
      do
      {
        *(_QWORD *)v42 = v41;
        v42 += 8;
        ++v41;
      }
      while (v42 != v37);
      if (!a5)
        goto LABEL_34;
    }
  }
  else
  {
    turi::unity_sframe::_convert_column_names_to_indices((uint64_t)a1, a2, (uint64_t)v104);
    v36 = (char *)v104[0].__locale_;
    __p = v104[0].__locale_;
    v98 = *(_OWORD *)&v104[1].__locale_;
    v37 = (char *)v104[1].__locale_;
    if (!a5)
    {
LABEL_34:
      v38 = 0;
      v39 = v37 - v36;
      goto LABEL_59;
    }
  }
  if (v36 != v37)
  {
    while (1)
    {
      while (1)
      {
        v43 = turi::unity_sframe::dtype(a1, *((_QWORD *)__p + *(_QWORD *)v36));
        if (v43 <= 9 && ((1 << v43) & 0x238) != 0)
          break;
        v36 += 8;
        if (v36 == v37)
          goto LABEL_58;
      }
      v37 -= 8;
      if (v36 == v37)
        break;
      while (1)
      {
        v45 = turi::unity_sframe::dtype(a1, *((_QWORD *)__p + *(_QWORD *)v37));
        if ((v45 - 3) >= 3 && v45 != 9)
          break;
        v37 -= 8;
        if (v37 == v36)
          goto LABEL_57;
      }
      v47 = *(_QWORD *)v36;
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36 += 8;
      *(_QWORD *)v37 = v47;
      if (v37 == v36)
        goto LABEL_58;
    }
  }
LABEL_57:
  v37 = v36;
LABEL_58:
  v39 = v37 - (_BYTE *)__p;
  v38 = (uint64_t)(v98 - (_QWORD)v37) >> 3;
LABEL_59:
  v48.n128_f64[0] = turi::unity_sframe::select_columns(a1, (unint64_t **)&__p, v104);
  v49 = (std::__shared_weak_count *)v104[1].__locale_;
  v95 = v104[0].__locale_;
  v96 = (std::__shared_weak_count *)v104[1].__locale_;
  if (v104[1].__locale_)
  {
    v50 = (unint64_t *)((char *)v104[1].__locale_ + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    do
      v52 = __ldaxr(v50);
    while (__stlxr(v52 - 1, v50));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v49->__on_zero_shared)(v49, v48);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v103 = 0;
  if (v38)
  {
    if (a3)
      v53 = &off_24D9358D8;
    else
      v53 = &off_24D935958;
    v104[0].__locale_ = (std::locale::__imp *)v53;
    v104[1].__locale_ = (std::locale::__imp *)(v39 >> 3);
  }
  else
  {
    if (a3)
      v54 = &off_24D9357D8;
    else
      v54 = &off_24D935858;
    v104[0].__locale_ = (std::locale::__imp *)v54;
  }
  v104[3].__locale_ = (std::locale::__imp *)v104;
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::swap[abi:ne180100](v104, &v102);
  v55 = (std::locale *)v104[3].__locale_;
  if ((std::locale *)v104[3].__locale_ == v104)
  {
    v56 = 4;
    v55 = v104;
  }
  else
  {
    if (!v104[3].__locale_)
      goto LABEL_79;
    v56 = 5;
  }
  (*((void (**)(void))v55->__locale_ + v56))();
LABEL_79:
  v57 = (uint64_t)v103;
  if (!v103)
  {
LABEL_82:
    v101 = (_BYTE *)v57;
    goto LABEL_84;
  }
  if (v103 != &v102)
  {
    v57 = (*(uint64_t (**)(void))(*(_QWORD *)v103 + 16))();
    goto LABEL_82;
  }
  v101 = v100;
  (*(void (**)(__int128 *, _BYTE *))(v102 + 24))(&v102, v100);
LABEL_84:
  turi::unity_sframe::transform_lambda((uint64_t)v95, (uint64_t)v100, 0, 0, v104);
  v59 = v104[0].__locale_;
  v58 = v104[1].__locale_;
  if (v104[1].__locale_)
  {
    v60 = (unint64_t *)((char *)v104[1].__locale_ + 8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  *(_QWORD *)&v99 = v59;
  *((_QWORD *)&v99 + 1) = v58;
  if (v62)
  {
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(p_shared_owners);
    while (__stlxr(v64 - 1, p_shared_owners));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)v104[1].__locale_;
  if (v104[1].__locale_)
  {
    v66 = (unint64_t *)((char *)v104[1].__locale_ + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v101;
  if (v101 == v100)
  {
    v69 = 4;
    v68 = v100;
  }
  else
  {
    if (!v101)
      goto LABEL_102;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_102:
  v70 = v103;
  if (v103 == &v102)
  {
    v71 = 4;
    v70 = &v102;
  }
  else
  {
    if (!v103)
      goto LABEL_107;
    v71 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v70 + 8 * v71))();
LABEL_107:
  if (v96)
  {
    v72 = &v96->__shared_owners_;
    do
      v73 = __ldaxr((unint64_t *)v72);
    while (__stlxr(v73 - 1, (unint64_t *)v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (__p)
  {
    *(_QWORD *)&v98 = __p;
    operator delete(__p);
  }
LABEL_114:
  if (a4)
  {
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
    v94 = v99;
    if (*((_QWORD *)&v99 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    turi::unity_sframe::logical_filter_split((uint64_t)a1, (uint64_t *)&v94, a6);
    if (v74)
    {
      v77 = (unint64_t *)&v74->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        v79 = v74;
LABEL_138:
        std::__shared_weak_count::__release_weak(v79);
      }
    }
  }
  else
  {
    v93 = v99;
    if (*((_QWORD *)&v99 + 1))
    {
      v80 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    (*(void (**)(std::locale *__return_ptr, turi::unity_sframe *, __int128 *))(*(_QWORD *)a1 + 176))(v104, a1, &v93);
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v102);
    *(_OWORD *)&v104[2].__locale_ = v102;
    v102 = 0uLL;
    std::list<std::shared_ptr<turi::unity_sframe_base>>::list(a6, v104, 2);
    for (i = 2; i != -2; i -= 2)
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v104[i]);
    v83 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
    if (*((_QWORD *)&v102 + 1))
    {
      v84 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v93 + 1))
    {
      v87 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        v79 = v86;
        goto LABEL_138;
      }
    }
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
}

void sub_21828BC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v29;
  uint64_t v30;

  v29 = a28;
  if (a28 == &a25)
  {
    v30 = 4;
    v29 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

unint64_t turi::unity_sframe::to_dataframe@<X0>(turi::unity_sframe *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t result;
  char *v8;
  __int128 v9;
  char v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void **v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  uint64_t v21;
  std::string v22;
  std::string *v23;
  void **v24;

  v4 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 24) = a2 + 32;
  v5 = (uint64_t **)(a2 + 24);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 48) = a2 + 56;
  v6 = (uint64_t **)(a2 + 48);
  *(_QWORD *)(a2 + 64) = 0;
  while (1)
  {
    result = (*(uint64_t (**)(turi::unity_sframe *))(*(_QWORD *)this + 112))(this);
    if (v4 >= result)
      break;
    (*(void (**)(void **__return_ptr, turi::unity_sframe *))(*(_QWORD *)this + 128))(__p, this);
    v8 = (char *)__p[0] + 24 * v4;
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *(_OWORD *)v8;
      v22.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v9;
    }
    v18 = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
    (*(void (**)(void **__return_ptr, turi::unity_sframe *))(*(_QWORD *)this + 120))(__p, this);
    v10 = *((_BYTE *)__p[0] + v4);
    __p[1] = __p[0];
    operator delete(__p[0]);
    v11 = *(_QWORD *)(a2 + 8);
    if (v11 >= *(_QWORD *)(a2 + 16))
    {
      v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&v22);
    }
    else
    {
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      }
      else
      {
        v12 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
        *(_QWORD *)(v11 + 16) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
        *(_OWORD *)v11 = v12;
      }
      v13 = v11 + 24;
      *(_QWORD *)(a2 + 8) = v11 + 24;
    }
    *(_QWORD *)(a2 + 8) = v13;
    __p[0] = &v22;
    *((_BYTE *)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (const void **)&v22.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 56) = v10;
    (*(void (**)(void ***__return_ptr, turi::unity_sframe *, std::string *))(*(_QWORD *)this + 192))(&v18, this, &v22);
    (*((void (**)(void **__return_ptr))*v18 + 68))(__p);
    v23 = &v22;
    v14 = std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)&v22.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v23);
    std::vector<turi::flexible_type>::__vdeallocate((void **)v14 + 7);
    *(_OWORD *)(v14 + 7) = *(_OWORD *)__p;
    v14[9] = v21;
    __p[1] = 0;
    v21 = 0;
    __p[0] = 0;
    v24 = __p;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
    v15 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    ++v4;
  }
  return result;
}

void sub_21828BFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  turi::dataframe_t *v23;
  uint64_t v24;

  *((_QWORD *)v23 + 1) = v24;
  if (a20 < 0)
    operator delete(__p);
  turi::dataframe_t::~dataframe_t(v23);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::delete_on_close(turi::unity_sframe *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  turi::sframe *v5;
  std::__shared_weak_count *v6;

  if ((*(unsigned int (**)(turi::unity_sframe *))(*(_QWORD *)this + 304))(this))
  {
    turi::unity_sframe::get_underlying_sframe(this, &v5);
    turi::sframe::delete_files_on_destruction(v5);
    v2 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_21828C0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::show(uint64_t a1, uint64_t a2)
{
  turi::model_base *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *lpsrc;
  std::__shared_weak_count *v13;
  turi::model_base *v14;
  std::__shared_weak_count *v15;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 416))(&lpsrc);
  if (lpsrc
  {
    v14 = v3;
    v15 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v14)
    turi::visualization::Plot::show(v14, a2, 0);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_21828C1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::plot(turi::unity_sframe *this@<X0>, _OWORD *a2@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void **v17;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 128))(&v14);
  (*(void (**)(uint64_t *__return_ptr, turi::unity_sframe *, __int128 *))(*(_QWORD *)this + 184))(&v15, this, &v14);
  v17 = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  v12 = v15;
  v13 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  turi::visualization::plot_columnwise_summary(&v12, &v14);
  *a2 = v14;
  v14 = 0uLL;
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_21828C2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void turi::unity_sframe::explore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int *v11;
  file_logger *v12;
  file_logger *started;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  std::string *v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *exception;
  std::string v32;
  __int128 v33;
  std::string __p;
  std::locale v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::locale *v40;
  _BYTE v41[24];
  _BYTE *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(std::locale *__return_ptr))(*(_QWORD *)a1 + 128))(&v35);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::locale *))(*(_QWORD *)a1 + 184))(&v36, a1, &v35);
  v38 = v36;
  v39 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v37;
    if (v37)
    {
      v9 = (unint64_t *)&v37->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v40 = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v11 = (int *)global_logger();
  if (v11[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v11))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "explore", 1836, 1);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Materializing SFrame", 20);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15)
    {
      if (*((_BYTE *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
        v16 = std::locale::use_facet(&v35, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v35);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  v17 = v38;
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 64))(v38))
    turi::unity_sframe::explore(std::string const&,std::string const&)::$_0::operator()();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v32 = *(std::string *)a2;
  *(_QWORD *)&v33 = v17;
  *((_QWORD *)&v33 + 1) = v39;
  if (v39)
  {
    v18 = (unint64_t *)&v39->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v42 = 0;
  v20 = (char *)operator new(0x48uLL);
  v21 = v20;
  *(_QWORD *)v20 = off_24D9359D8;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v20 + 8), v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v20 + 8) = v32;
  *((_OWORD *)v21 + 2) = v33;
  v33 = 0uLL;
  v22 = (std::string *)(v21 + 48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v21 + 8) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v42 = v21;
  turi::visualization::run_thread((uint64_t)v41);
  v23 = v42;
  if (v42 == v41)
  {
    v24 = 4;
    v23 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_38;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_38:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_21828C738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  char *v27;
  void **v28;
  uint64_t v29;

  v29 = v26;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29);
  if (v27[31] < 0)
    operator delete(*v28);
  operator delete(v27);
  turi::unity_sframe::explore(std::string const&,std::string const&)::$_1::~$_1((uint64_t)&__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sframe::explore(std::string const&,std::string const&)::$_1::~$_1(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void turi::unity_sframe::join(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD *v13[2];
  std::string v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v6 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v14 = *(std::string *)a3;
  v13[0] = 0;
  v13[1] = 0;
  v12 = v13;
  (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, _QWORD ***))(*(_QWORD *)a1 + 336))(a1, &v15, &v14, a4, &v12);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v12, v13[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_21828C960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v18 - 48);
  _Unwind_Resume(a1);
}

void sub_21828CB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8A0] + 16);
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::dataframe_t const&,void>@<X0>(const turi::dataframe_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x140uLL);
  result = std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::dataframe_t const&,std::allocator<turi::sframe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21828CC28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::dataframe_t const&,std::allocator<turi::sframe>,0>(_QWORD *a1, const turi::dataframe_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24D92C760;
  a1[1] = 0;
  turi::sframe::sframe((turi::sframe *)(a1 + 3), a2);
  return a1;
}

void sub_21828CC74(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,std::string &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x140uLL);
  result = std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::sframe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21828CCCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::sframe>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D92C760;
  a1[1] = 0;
  std::allocator<turi::sframe>::construct[abi:ne180100]<turi::sframe,std::string &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_21828CD2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::sframe>::construct[abi:ne180100]<turi::sframe,std::string &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::sframe::sframe(a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_21828CDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,std::string,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x140uLL);
  result = std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<turi::sframe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21828CE08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<turi::sframe>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D92C760;
  a1[1] = 0;
  std::allocator<turi::sframe>::construct[abi:ne180100]<turi::sframe,std::string>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_21828CE68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::sframe>::construct[abi:ne180100]<turi::sframe,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v4;

  *(_OWORD *)__p = *(_OWORD *)a3;
  v4 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  turi::sframe::sframe(a2, (uint64_t)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_21828CED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_QWORD *)i + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v23 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_21828D1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::shared_ptr<turi::unity_sarray>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<turi::unity_sarray>&,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::planner_node>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::planner_node&,std::allocator<turi::query_eval::planner_node>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21828D274(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::planner_node>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::planner_node&,std::allocator<turi::query_eval::planner_node>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24D92C5A8;
  a1[1] = 0;
  turi::query_eval::planner_node::planner_node((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_21828D2C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<turi::unity_sarray_base>>::__init_with_size[abi:ne180100]<std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>,std::__list_iterator<std::shared_ptr<turi::unity_sarray_base>,void *>>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = a2[2];
      v8 = a2[3];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 = (_QWORD *)a2[1];
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_21828D360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n, std::vector<std::string>::const_reference __x)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v7;
  std::string *value;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::size_type v16;
  __int128 v17;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      v15 = &v9[__n];
      v16 = 24 * __n;
      do
      {
        if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v9, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
        }
        else
        {
          v17 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
          v9->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v17;
        }
        ++v9;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v13)
      v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    __v.__first_ = v14;
    __v.__begin_ = v14 + v10;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v14[v13];
    std::__split_buffer<std::string>::__construct_at_end(&__v, __n, __x);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_21828D4D0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::__construct_at_end(std::__split_buffer<std::string> *this, std::__split_buffer<std::string>::size_type __n, std::__split_buffer<std::string>::const_reference __x)
{
  std::__split_buffer<std::string>::pointer end;
  std::string *v6;
  std::__split_buffer<std::string>::size_type v7;
  __int128 v8;

  end = this->__end_;
  if (__n)
  {
    v6 = &end[__n];
    v7 = 24 * __n;
    do
    {
      if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(end, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      else
      {
        v8 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
      }
      ++end;
      v7 -= 24;
    }
    while (v7);
    end = v6;
  }
  this->__end_ = end;
}

void sub_21828D574(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x140uLL);
  result = std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21828D5C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24D92C760;
  a1[1] = 0;
  turi::sframe::sframe((turi::sframe *)(a1 + 3), a2);
  return a1;
}

void sub_21828D60C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = off_24D935338;
  v2 = (_QWORD *)(a1 + 8);
  v6 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = off_24D935338;
  v2 = (_QWORD *)(a1 + 8);
  v6 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return MEMORY[0x219A19A08](a1, 0x10A1C409BB2071CLL);
}

_QWORD *std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = off_24D935338;
  std::__compressed_pair_elem<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21828D75C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24D935338;
  return std::__compressed_pair_elem<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21[3];
  char **v22;
  char v23;
  unint64_t v24;
  _BYTE v25[13];
  _BYTE v26[78];
  void **v27;
  _BYTE v28[13];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 6;
  v7 = a1 + 5;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::vector(v21, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[6] - a1[5]) >> 3));
  *(_QWORD *)v26 = (uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 4;
  v8 = *v6;
  v9 = *v7;
  v24 = 0xAAAAAAAAAAAAAAABLL * ((*v6 - *v7) >> 3);
  if (*(_QWORD *)v26 != v24)
  {
    v27 = (void **)v26;
    *(_QWORD *)v28 = &v24;
    turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator() const(turi::sframe_rows::row const&)::{lambda(void)#1}::operator()();
  }
  if (v8 != v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>((uint64_t)&v27, (const std::string *)(v9 + v10), **(_QWORD **)(*(_QWORD *)*a2 + v11) + 16 * a2[1]);
      std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)&v21[0][v12], (uint64_t *)&v27);
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v27);
      ++v13;
      v9 = a1[5];
      v12 += 4;
      v11 += 16;
      v10 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((a1[6] - v9) >> 3));
  }
  turi::flexible_type_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::set(v21, (uint64_t)v26);
  v14 = 0;
  *(_QWORD *)&v28[5] = *(_QWORD *)&v26[5];
  *(_QWORD *)v28 = *(_QWORD *)v26;
  v28[12] = v26[12];
  *(_QWORD *)&v25[5] = *(_QWORD *)&v28[5];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  LODWORD(v27) = 0;
  v25[12] = v26[12];
  if (v26[12] <= 9u && ((1 << v26[12]) & 0x33C) != 0)
  {
    v15 = *(unint64_t **)v25;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v14 = (int)v27;
  }
  LODWORD(v24) = v14 ^ (v14 >> 31);
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v22 = &v18;
  v23 = 0;
  v18 = (char *)operator new(0x50uLL);
  v19 = (uint64_t)v18;
  v20 = v18 + 80;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>((uint64_t)&v20, (uint64_t)&v24, (uint64_t)v26, (uint64_t)v18);
  v17 = a1[4];
  if (!v17)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *__return_ptr, uint64_t, char **))(*(_QWORD *)v17 + 48))(v26, v17, &v18);
  turi::variant_converter<turi::flexible_type,void>::get((int *)v26, a3);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v26);
  v22 = &v18;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v24);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v27);
  v27 = (void **)v21;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
}

void sub_21828DA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, unsigned int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unsigned int a28)
{
  uint64_t v28;

  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a28);
  a15 = (void **)&a9;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&a15);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a18);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v28 - 168));
  *(_QWORD *)(v28 - 168) = &a12;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 168));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  v4 = (std::string *)std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1, a2);
  v4[1].__r_.__value_.__l.__size_ = 0;
  v4[1].__r_.__value_.__r.__words[2] = 0;
  v4 = (std::string *)((char *)v4 + 32);
  v4->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  return a1;
}

void sub_21828DB70(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;

  v1 = (_QWORD *)a1;
  v4 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (_QWORD *)v1[3];
  if (v2 == v1)
  {
    v3 = 4;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v3))(v1);
}

void turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator() const(turi::sframe_rows::row const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"row.size()", 10);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"colnames.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sframe.cpp", "operator()", 707, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator() const(turi::sframe_rows::row const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21828DD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t result;
  unint64_t **v5;
  unint64_t *v6;
  BOOL v7;
  int v8;
  unint64_t *v10;
  unint64_t v11;

  result = turi::flexible_type::flexible_type<std::string>(a1, a2);
  *(_QWORD *)(result + 16) = 0;
  v5 = (unint64_t **)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  if (result + 16 != a3)
  {
    v6 = *(unint64_t **)a3;
    *(_QWORD *)(result + 21) = *(_QWORD *)(a3 + 5);
    *v5 = v6;
    LODWORD(v6) = *(unsigned __int8 *)(a3 + 12);
    *(_BYTE *)(result + 28) = (_BYTE)v6;
    v7 = v6 > 9;
    v8 = (1 << (char)v6) & 0x33C;
    if (!v7 && v8 != 0)
    {
      v10 = *v5;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  return result;
}

void std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D9353B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D9353B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(_QWORD *a1, uint64_t a2, turi::sframe_rows **a3)
{
  turi::sframe_rows *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16;
  turi::sframe_rows *v17;
  uint64_t v18;
  void **v19;

  v4 = *a3;
  if (*((_BYTE *)*a3 + 24))
  {
    v16 = 0;
    v17 = v4;
    v18 = 0;
  }
  else
  {
    turi::sframe_rows::ensure_unique(*a3);
    v5 = *((unsigned __int8 *)v4 + 24);
    v16 = 0;
    v17 = v4;
    v18 = 0;
    if (!v5)
      turi::sframe_rows::ensure_unique(v4);
  }
  if (*(_QWORD *)v4 == *((_QWORD *)v4 + 1))
    return 0;
  v6 = **(_QWORD ***)v4;
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(**(_QWORD **)v4 + 8) - *v6;
  if (!v7)
    return 0;
  v8 = v7 >> 4;
  do
  {
    turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v17, v15);
    v9 = *(_QWORD *)(a1[1] + 56);
    if (!v9)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, v15);
    v19 = (void **)v15;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
    v10 = (uint64_t *)a1[2];
    v11 = *v10 + 1;
    *v10 = v11;
    v12 = a1[3];
    result = v11 == v12;
    if (v11 == v12)
      break;
    v14 = ++v18;
  }
  while (v16 || v14 != v8);
  return result;
}

void sub_21828E044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 - 40) = &a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 40));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::head(unsigned long)::$_0,std::allocator<turi::unity_sframe::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

uint64_t *std::list<std::shared_ptr<turi::unity_sframe_base>>::list(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::list<std::shared_ptr<turi::unity_sarray_base>>::push_back(a1, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_21828E100(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D935438;
  return result;
}

void std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D935438;
}

void std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  BOOL v3;
  double v4;

  v2 = 1;
  switch(a1[12])
  {
    case 0:
      v4 = *(double *)a1;
      goto LABEL_9;
    case 1:
      v3 = *(double *)a1 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
        v4 = *(double *)(*(_QWORD *)a1 + 16);
      else
        *(_QWORD *)&v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
LABEL_9:
      v3 = *(_QWORD *)&v4 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      v3 = *(_QWORD *)(*(_QWORD *)a1 + 8) == *(_QWORD *)(*(_QWORD *)a1 + 16);
      goto LABEL_10;
    case 7:
      goto LABEL_13;
    case 8:
      v3 = *(_QWORD *)(*(_QWORD *)a1 + 64) == 3;
LABEL_10:
      v2 = v3;
LABEL_13:
      *(_BYTE *)(a2 + 12) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(_QWORD *)a2 = v2 ^ 1u;
      return;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

uint64_t std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1,std::allocator<turi::unity_sframe::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  const void **v18;
  const void **v19;
  const void **v20;
  __int128 v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const void *v28;
  const void *v29;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v7;
  uint64_t v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  if ((const void **)a1 != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      v9 = 0;
      v10 = (const void **)a1;
      do
      {
        v11 = v10;
        v10 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v11))
        {
          v17 = *(_OWORD *)v10;
          v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          v12 = v9;
          do
          {
            v13 = a1 + v12;
            v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0)
              operator delete(*v14);
            *(_OWORD *)v14 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + v12 + 40) = *(_QWORD *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)v13 = 0;
            if (!v12)
            {
              v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v17, (const void **)(v12 + a1)));
          v15 = *(char *)(a1 + v12 + 47);
          v16 = a1 + v12 + 24;
          if (v15 < 0)
            operator delete(*(void **)v16);
LABEL_13:
          *(_OWORD *)v16 = v17;
          *(_QWORD *)(v16 + 16) = v18;
        }
        v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v6;
  const void **v7;
  const void **v9;
  const void **v10;
  const void **v11;
  void **v12;
  BOOL v13;
  int v14;
  const void **v15;
  __int128 v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = a1;
    v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v9 = a1 - 3;
      do
      {
        v10 = v6;
        v6 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v10))
        {
          v16 = *(_OWORD *)v6;
          v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *v6 = 0;
          v11 = v9;
          do
          {
            v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            v13 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          v14 = *((char *)v11 + 71);
          v15 = v11 + 6;
          if (v14 < 0)
            operator delete((void *)*v15);
          *(_OWORD *)v15 = v16;
          v15[2] = v17;
        }
        v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  const void *v10;
  __int128 v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  __int128 v23;
  const void *v24;

  v8 = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
  result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v13 = a2[2];
    v14 = *(_OWORD *)a2;
    v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a2, a1))
      return 1;
    v16 = a1[2];
    v17 = *(_OWORD *)a1;
    v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = a1[2];
    v20 = *(_OWORD *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a3, a2))
      return 1;
    v22 = a2[2];
    v23 = *(_OWORD *)a2;
    v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  v10 = a1[2];
  v11 = *(_OWORD *)a1;
  v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const void **v6;
  const void **v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  const void *v17;
  __int128 v18;
  const void *v19;

  v4 = a2;
  v16 = *(_OWORD *)a1;
  v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    v6 = a1;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
  }
  else
  {
    v7 = a1 + 3;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v7);
      v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *(_OWORD *)v6;
    v19 = v6[2];
    v18 = v9;
    v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)v6 = v10;
    v11 = v18;
    *(_QWORD *)(v4 + 16) = v19;
    *(_OWORD *)v4 = v11;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*v12);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }
  v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)v12 = v14;
  return v6;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(__int128 *a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void **v9;
  __int128 v10;
  const void *v11;
  const void *v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  const void *v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
    v6 += 24;
  while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v19 = *(_OWORD *)v8;
      v10 = v19;
      v20 = *(const void **)(v8 + 16);
      v11 = v20;
      v12 = v9[2];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)v9 = v10;
      do
        v8 += 24;
      while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!std::less<std::string>::operator()[abi:ne180100](a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  v13 = (void **)(v8 - 24);
  if ((__int128 *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0)
      operator delete(*v13);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = *(_OWORD *)v13;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 - 8);
    *a1 = v14;
    *(_BYTE *)(v8 - 1) = 0;
    *(_BYTE *)(v8 - 24) = 0;
  }
  v15 = v17;
  *(_QWORD *)(v8 - 8) = v18;
  *(_OWORD *)v13 = v15;
  return v8 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 24;
      if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a2 - 24), (const void **)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        *(_QWORD *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v12 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v13, v12))
    {
      v22 = *(_OWORD *)v13;
      v23 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v16 = v14;
      do
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(a1 + v16 + 88) = *(_QWORD *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          v21 = a1;
          goto LABEL_15;
        }
        v19 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      v20 = *(char *)(a1 + v16 + 95);
      v21 = a1 + v16 + 72;
      if (v20 < 0)
        operator delete(*(void **)v21);
LABEL_15:
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(v21 + 16) = v23;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  const void *v18;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2, a3, a5);
  if (std::less<std::string>::operator()[abi:ne180100](a5, (const void **)a4, a3))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (const void *)*((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((_QWORD *)a4 + 2) = v11;
    if (std::less<std::string>::operator()[abi:ne180100](a5, a3, a2))
    {
      v14 = a2[2];
      v15 = *(_OWORD *)a2;
      v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (std::less<std::string>::operator()[abi:ne180100](a5, a2, (const void **)a1))
      {
        v17 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4, a6);
  if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a5, (const void **)a4))
  {
    v13 = *((_QWORD *)a4 + 2);
    v14 = *a4;
    v15 = *((_QWORD *)a5 + 2);
    *a4 = *a5;
    *((_QWORD *)a4 + 2) = v15;
    *a5 = v14;
    *((_QWORD *)a5 + 2) = v13;
    if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a4, a3))
    {
      v16 = a3[2];
      v17 = *(_OWORD *)a3;
      v18 = (const void *)*((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((_QWORD *)a4 + 2) = v16;
      if (std::less<std::string>::operator()[abi:ne180100](a6, a3, a2))
      {
        v19 = a2[2];
        v20 = *(_OWORD *)a2;
        v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (std::less<std::string>::operator()[abi:ne180100](a6, a2, (const void **)a1))
        {
          v22 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v28[15];

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (std::less<std::string>::operator()[abi:ne180100](a4, (const void **)v14, (const void **)a1))
        {
          v15 = *((_QWORD *)v14 + 2);
          v16 = *v14;
          v17 = *(_QWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          *((_QWORD *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = (__int128 *)((char *)a2 - 24);
      do
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)v28 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v28[7] = *(_QWORD *)(a1 + 15);
        v21 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v18);
        v23 = v22;
        v24 = *(char *)(v22 + 23);
        if (v19 == (__int128 *)v22)
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          *(_QWORD *)v23 = v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)v28;
          *(_QWORD *)(v23 + 15) = *(_QWORD *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          v25 = *v19;
          *(_QWORD *)(v23 + 16) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v23 = v25;
          *(_QWORD *)v19 = v20;
          *((_QWORD *)v19 + 1) = *(_QWORD *)v28;
          *(_QWORD *)((char *)v19 + 15) = *(_QWORD *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 = (__int128 *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_21828F2F0(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3
        && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        v12 = v14;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)v7))
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0)
            operator delete((void *)v7->n128_u64[0]);
          v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = a1 + 24 * v18;
          v19 = 2 * v12 + 2;
          if (v19 < a3
            && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            v18 = v19;
          }
          v7 = v16;
          v12 = v18;
          if (std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0)
              operator delete((void *)v16->n128_u64[0]);
            break;
          }
        }
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3
      && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__int128 *)(a1 + 24 * v8);
    v10 = (__int128 *)(a2 - 24);
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      v14 = *v10;
      v15 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v12 = v9;
        if (*((char *)v10 + 23) < 0)
          operator delete(*(void **)v10);
        v13 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v10 = v12;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0)
            operator delete(*(void **)v12);
          break;
        }
      }
      result = *(double *)&v14;
      *v12 = v14;
      *((_QWORD *)v12 + 2) = v15;
    }
  }
  return result;
}

std::__wrap_iter<std::string *>::iterator_type std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::__wrap_iter<std::string *> &,std::insert_iterator<std::vector<std::string>> &>@<X0>(std::__wrap_iter<std::string *>::iterator_type result@<X0>, const std::string **a2@<X1>, const void ***a3@<X2>, const void ***a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::vector<std::string>::const_iterator *a7@<X8>)
{
  const void **v9;
  const std::string *v10;
  const void **v13;
  const void ***v16;
  std::vector<std::string>::const_iterator v17;
  const void ***v18;
  const void ***v19;
  std::vector<std::string>::const_iterator v20;
  std::vector<std::string> *v21;
  const std::vector<std::string>::value_type *v22;

  v9 = (const void **)result->__r_.__value_.__r.__words[0];
  v10 = *a2;
  if ((const std::string *)result->__r_.__value_.__l.__data_ == *a2)
  {
LABEL_15:
    v21 = *(std::vector<std::string> **)a5;
    v20.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a5 + 8);
LABEL_16:
    v10 = (const std::string *)v9;
    goto LABEL_17;
  }
  v13 = *a3;
  if (v13 != *a4)
  {
    v16 = (const void ***)result;
    while (!std::less<std::string>::operator()[abi:ne180100](a6, v9, v13))
    {
      result = (std::__wrap_iter<std::string *>::iterator_type)std::less<std::string>::operator()[abi:ne180100](a6, *a3, *v16);
      v19 = a3;
      if ((result & 1) == 0)
      {
        result = (std::__wrap_iter<std::string *>::iterator_type)*v16;
        v18 = v16;
        v19 = a3;
        goto LABEL_8;
      }
LABEL_9:
      *v19 += 3;
      v9 = *v16;
      v10 = *a2;
      if (*v16 == (const void **)*a2)
        goto LABEL_15;
      v13 = *a3;
      if (*a3 == *a4)
        goto LABEL_11;
    }
    v17.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a5 + 8);
    result = std::vector<std::string>::insert(*(std::vector<std::string> **)a5, v17, (std::vector<std::string>::const_reference)*v16).__i_;
    v18 = (const void ***)(a5 + 8);
    v19 = v16;
LABEL_8:
    *v18 = (const void **)&result[1].__r_.__value_.__l.__data_;
    goto LABEL_9;
  }
LABEL_11:
  v21 = *(std::vector<std::string> **)a5;
  v20.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a5 + 8);
  if (v9 == (const void **)v10)
    goto LABEL_16;
  v22 = (const std::vector<std::string>::value_type *)v9;
  do
  {
    result = std::vector<std::string>::insert(v21, v20, v22).__i_;
    v20.__i_ = result + 1;
    ++v22;
  }
  while (v22 != v10);
LABEL_17:
  a7->__i_ = v10;
  a7[1].__i_ = (std::__wrap_iter<const std::string *>::iterator_type)v21;
  a7[2].__i_ = v20.__i_;
  return result;
}

_QWORD *turi::print_range<std::vector<std::string>>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  std::locale v25;

  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *(_QWORD *)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v10, v11);
  v12 = *a2;
  while (v12 != a2[1])
  {
    v13 = *(char *)(v12 + 23);
    v14 = v13 >= 0 ? v12 : *(_QWORD *)v12;
    v15 = v13 >= 0 ? *(unsigned __int8 *)(v12 + 23) : *(_QWORD *)(v12 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v14, v15);
    v12 += 24;
    if (v12 == a2[1])
      break;
    v16 = *(char *)(a4 + 23);
    if (v16 >= 0)
      v17 = a4;
    else
      v17 = *(_QWORD *)a4;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a4 + 23);
    else
      v18 = *(_QWORD *)(a4 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v17, v18);
  }
  v19 = *(char *)(a5 + 23);
  if (v19 >= 0)
    v20 = a5;
  else
    v20 = *(_QWORD *)a5;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a5 + 23);
  else
    v21 = *(_QWORD *)(a5 + 8);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
  v23 = std::locale::use_facet(&v25, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_21828F8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<turi::sframe_iterator>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 56);
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)(a2 + 8);
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x219A19A08](a2, 0x1060C401EF26544);
  }
  return result;
}

void std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D9354B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D9354B8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t a2, turi::sframe_rows **a3)
{
  turi::sframe_rows *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16[3];
  uint64_t v17;
  turi::sframe_rows *v18;
  uint64_t v19;
  void **v20;

  v4 = *a3;
  if (*((_BYTE *)*a3 + 24))
  {
    v17 = 0;
    v18 = v4;
    v19 = 0;
  }
  else
  {
    turi::sframe_rows::ensure_unique(*a3);
    v5 = *((unsigned __int8 *)v4 + 24);
    v17 = 0;
    v18 = v4;
    v19 = 0;
    if (!v5)
      turi::sframe_rows::ensure_unique(v4);
  }
  if (*(_QWORD *)v4 != *((_QWORD *)v4 + 1))
  {
    v6 = **(_QWORD ***)v4;
    if (v6)
    {
      v7 = *(_QWORD *)(**(_QWORD **)v4 + 8) - *v6;
      if (v7)
      {
        v8 = v7 >> 4;
        do
        {
          v9 = *(_QWORD *)(a1 + 24);
          if (*(char *)(v9 + 23) < 0)
            v10 = *(_QWORD *)(v9 + 8);
          else
            v10 = *(unsigned __int8 *)(v9 + 23);
          v11 = *(_BYTE **)(a1 + 40);
          if (v10 && (!*v11 || !**(_BYTE **)(a1 + 32)))
          {
            std::ostream::write();
            v11 = *(_BYTE **)(a1 + 40);
          }
          *v11 = 0;
          v12 = *(_QWORD *)(a1 + 8);
          v13 = *(_QWORD **)(a1 + 16);
          turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v18, v16);
          turi::csv_writer::write(v12, v13, v16);
          v20 = (void **)v16;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v20);
          v14 = ++v19;
        }
        while (v17 || v14 != v8);
      }
    }
  }
  return 0;
}

void sub_21828FB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2,std::allocator<turi::unity_sframe::save_as_csv(std::string const&,std::map<std::string,turi::flexible_type>)::$_2>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

void std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 5;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 2));
      v6 = v5;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      v8 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **i;
  void **v6;

  for (i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(i + 3));
    v6 = i;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    i = (void **)(*(_QWORD *)(a2 + 32) + 40);
  }
}

uint64_t std::__split_buffer<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 16);
    v6 = v5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

std::string *std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>::pair[abi:ne180100]<std::vector<std::string>&,std::shared_ptr<turi::group_aggregate_value> const&,0>(std::string *a1, __int128 **a2, std::string::size_type *a3)
{
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v5 = a3[1];
  a1[1].__r_.__value_.__r.__words[0] = *a3;
  a1[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return a1;
}

uint64_t std::set<turi::flexible_type>::set[abi:ne180100]<std::__wrap_iter<std::string const*>>(uint64_t a1, const std::string *a2, const std::string *a3)
{
  _QWORD *v4;
  const std::string *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
      std::__tree<turi::flexible_type>::__emplace_hint_unique_impl<std::string const&>((uint64_t **)a1, v4, v6++);
    while (v6 != a3);
  }
  return a1;
}

void sub_21828FFD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<turi::flexible_type>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<turi::flexible_type>::__emplace_hint_unique_impl<std::string const&>(uint64_t **a1, _QWORD *a2, const std::string *a3)
{
  __n128 v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11[3];

  std::__tree<turi::flexible_type>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)v11);
  v6 = (uint64_t **)std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(a1, a2, &v10, &v9, (uint64_t)(v11[0] + 4), v5);
  v7 = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v6, v11[0]);
    v7 = v11[0];
    v11[0] = 0;
  }
  std::unique_ptr<std::__tree_node<turi::flexible_type,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<turi::flexible_type,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  return v7;
}

void sub_21829006C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<turi::flexible_type,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<turi::flexible_type,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<turi::flexible_type>::__construct_node<std::string const&>@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = turi::flexible_type::flexible_type<std::string>((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2182900D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<turi::flexible_type,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<turi::flexible_type,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D935538;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D935538;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_24D935538;
  std::__compressed_pair_elem<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2182901A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D935538;
  return std::__compressed_pair_elem<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1(a1 + 8);
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1::~$_1((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  double v47;
  int v48;
  size_t v49;
  size_t v50;
  unsigned int v51;
  double v52;
  double *v53;
  double *v54;
  unint64_t v55;
  double *v56;
  uint64_t v57;
  unint64_t v58;
  double *v59;
  double *v60;
  uint64_t v61;
  double v62;
  double v63;
  unsigned int v64;
  double v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  std::string v91;
  _BYTE v92[13];
  _BYTE v93[13];
  _BYTE v94[13];
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v88 = 0;
  v87 = 0uLL;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v87, ((*a2)[1] - **a2) >> 4);
  v5 = **a2;
  if ((*a2)[1] == v5)
    goto LABEL_124;
  v6 = 0;
  do
  {
    v7 = (unsigned __int8 *)(**(_QWORD **)(v5 + 16 * v6) + 16 * (_QWORD)a2[1]);
    switch(byte_254FF28F4)
    {
      case 0:
        switch(v7[12])
        {
          case 0u:
            if (*(_QWORD *)v7 == turi::FLEX_UNDEFINED)
              goto LABEL_103;
            goto LABEL_79;
          case 1u:
            v65 = *(double *)v7;
            v66 = turi::FLEX_UNDEFINED;
            goto LABEL_97;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v7 << 8) >> 8 && !*((_DWORD *)v7 + 2))
              goto LABEL_103;
            goto LABEL_79;
          default:
            goto LABEL_130;
        }
      case 1:
        switch(v7[12])
        {
          case 0u:
            v65 = *(double *)&turi::FLEX_UNDEFINED;
            v66 = *(_QWORD *)v7;
LABEL_97:
            v75 = (double)v66;
            goto LABEL_98;
          case 1u:
            v65 = *(double *)v7;
            v75 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_98:
            if (v65 != v75)
              goto LABEL_79;
            goto LABEL_103;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            v74 = vabdd_f64((double)*((int *)v7 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v7 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
            goto LABEL_102;
          default:
            goto LABEL_130;
        }
      case 2:
        v45 = v7[12];
        if (v45 - 3 < 7 || v45 < 2)
          goto LABEL_79;
        if (v45 != 2)
          goto LABEL_130;
        v47 = *(double *)v7;
        v48 = *(char *)(*(_QWORD *)v7 + 31);
        v49 = *(unsigned __int8 *)(*(_QWORD *)v7 + 31);
        if (v48 < 0)
          v50 = *(_QWORD *)(*(_QWORD *)&v47 + 16);
        else
          v50 = v49;
        if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
          v76 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
        else
          v76 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
        if (v50 != v76)
          goto LABEL_79;
        v77 = (unsigned __int8 *)(*(_QWORD *)&v47 + 8);
        if ((v49 & 0x80) != 0)
          v77 = *(unsigned __int8 **)v77;
        v78 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
        if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
          v78 = *(unsigned __int8 **)v78;
        if ((v49 & 0x80) != 0)
        {
          if (memcmp(v77, v78, v50))
            goto LABEL_79;
        }
        else
        {
          if (!v50)
            goto LABEL_103;
          do
          {
            if (*v77 != *v78)
              goto LABEL_79;
            ++v77;
            ++v78;
            --v50;
          }
          while (v50);
        }
        goto LABEL_103;
      case 3:
        v51 = v7[12];
        if (v51 > 9)
          goto LABEL_130;
        if (v51 != 3)
          goto LABEL_79;
        v52 = *(double *)v7;
        v53 = *(double **)(*(_QWORD *)&v52 + 8);
        v54 = *(double **)(*(_QWORD *)&v52 + 16);
        v55 = v54 - v53;
        v56 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v55 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v56) >> 3)
          goto LABEL_79;
        if (v54 == v53)
          goto LABEL_103;
        if (v55 <= 1)
          v57 = 1;
        else
          v57 = v54 - v53;
        if (*v53 != *v56)
          goto LABEL_79;
        v58 = 0;
        v59 = v56 + 1;
        v60 = v53 + 1;
        v61 = v57 - 1;
        while (v61 != v58)
        {
          v62 = v60[v58];
          v63 = v59[v58++];
          if (v62 != v63)
          {
            if (v58 < v55)
              goto LABEL_79;
            goto LABEL_103;
          }
        }
        goto LABEL_103;
      case 4:
        v8 = v7[12];
        if (v8 > 9)
          goto LABEL_130;
        if (v8 != 4)
          goto LABEL_79;
        v9 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v89, (uint64_t *)(*(_QWORD *)v7 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_87;
      case 5:
        v67 = v7[12];
        if (v67 > 9)
          goto LABEL_130;
        if (v67 != 5)
          goto LABEL_79;
        v9 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v89, (uint64_t **)(*(_QWORD *)v7 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_87;
      case 6:
        switch(v7[12])
        {
          case 0u:
            if (*(_QWORD *)v7 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF28F0)
              goto LABEL_103;
            goto LABEL_79;
          case 1u:
            v74 = vabdd_f64(*(double *)v7, (double)dword_254FF28F0 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_102:
            if (v74 < 0.0000005)
              goto LABEL_103;
            goto LABEL_79;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v7) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v7 + 2) == dword_254FF28F0)
            {
              goto LABEL_103;
            }
            goto LABEL_79;
          default:
            goto LABEL_130;
        }
      case 7:
        v64 = v7[12];
        if (v64 < 7 || v64 - 8 < 2)
          goto LABEL_79;
        if (v64 != 7)
          goto LABEL_130;
        goto LABEL_103;
      case 8:
        v68 = v7[12];
        if (v68 < 8 || v68 == 9)
          goto LABEL_79;
        if (v68 != 8)
          goto LABEL_130;
        v9 = turi::image_type::operator==(*(_QWORD *)v7 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_87:
        if ((v9 & 1) != 0)
          goto LABEL_103;
        goto LABEL_79;
      case 9:
        v10 = v7[12];
        if (v10 < 9)
          goto LABEL_79;
        if (v10 != 9)
        {
LABEL_130:
          turi::flexible_type_fail(0);
          __break(1u);
        }
        v11 = *(_QWORD **)v7;
        if (turi::FLEX_UNDEFINED == *(_QWORD *)v7)
          goto LABEL_103;
        v85 = turi::FLEX_UNDEFINED;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v11 + 1), turi::FLEX_UNDEFINED + 8))
          goto LABEL_79;
        v13 = (char *)v11[3];
        v12 = (char *)v11[4];
        v14 = v12 - v13;
        if (v12 == v13)
          goto LABEL_103;
        if (!v11[1])
          goto LABEL_103;
        v15 = 1;
        do
        {
          v16 = *(_QWORD *)v13;
          v13 += 8;
          v15 *= v16;
        }
        while (v13 != v12);
        if (!v15)
          goto LABEL_103;
        v90 = 0;
        std::vector<unsigned long>::vector(&v91, v14 >> 3, &v90);
        v17 = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
        v18 = **(_QWORD **)(v85 + 8);
        v19 = v91.__r_.__value_.__l.__size_ - v91.__r_.__value_.__r.__words[0];
        v20 = (uint64_t)(v91.__r_.__value_.__l.__size_ - v91.__r_.__value_.__r.__words[0]) >> 3;
        v21 = v20 - 1;
        if (v20 <= 1)
          v22 = 1;
        else
          v22 = (uint64_t)(v91.__r_.__value_.__l.__size_ - v91.__r_.__value_.__r.__words[0]) >> 3;
        break;
      default:
        goto LABEL_130;
    }
    while (1)
    {
      if (*((_QWORD *)&v17 + 1) == (_QWORD)v17)
      {
        v30 = 0;
        v31 = *(double *)(*(_QWORD *)v11[1] + 8 * v11[9]);
      }
      else
      {
        v23 = 0;
        v24 = (uint64_t *)v11[6];
        v25 = (uint64_t *)v17;
        v26 = v22;
        do
        {
          v28 = *v25++;
          v27 = v28;
          v29 = *v24++;
          v23 += v29 * v27;
          --v26;
        }
        while (v26);
        v30 = 0;
        v31 = *(double *)(*(_QWORD *)v11[1] + 8 * (v11[9] + v23));
        v32 = *(uint64_t **)(v85 + 48);
        v33 = (uint64_t *)v17;
        v34 = v22;
        do
        {
          v36 = *v33++;
          v35 = v36;
          v37 = *v32++;
          v30 += v37 * v35;
          --v34;
        }
        while (v34);
      }
      if (v31 != *(double *)(v18 + 8 * (*(_QWORD *)(v85 + 72) + v30)))
      {
        if ((_QWORD)v17)
        {
          v91.__r_.__value_.__l.__size_ = v17;
          operator delete((void *)v17);
        }
LABEL_79:
        std::pair<std::string,turi::flexible_type>::pair[abi:ne180100]<true,0>(&v91, (__int128 *)(*(_QWORD *)(a1 + 8) + 24 * v6), **(_QWORD **)(**a2 + 16 * v6) + 16 * (_QWORD)a2[1]);
        turi::flexible_type::flexible_type<std::string>((uint64_t)v93, (__int128 *)&v91);
        *(_QWORD *)&v94[5] = *(_QWORD *)&v92[5];
        *(_QWORD *)v94 = *(_QWORD *)v92;
        v94[12] = v92[12];
        v92[12] = 0;
        v70 = *((_QWORD *)&v87 + 1);
        if (*((_QWORD *)&v87 + 1) < v88)
          goto LABEL_80;
LABEL_81:
        v73 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v87, (uint64_t *)v93);
LABEL_82:
        *((_QWORD *)&v87 + 1) = v73;
        std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v93);
        std::pair<std::string,turi::flexible_type>::~pair((uint64_t)&v91);
        goto LABEL_83;
      }
      v38 = v20;
      v39 = v20 - 1;
      if (v19 >= 1)
        break;
LABEL_36:
      if (!v38 || v39 < 0)
      {
        if ((_QWORD)v17)
          goto LABEL_39;
        goto LABEL_103;
      }
    }
    v40 = v11[3];
    v41 = *(_QWORD *)(v17 + 8 * v21) + 1;
    *(_QWORD *)(v17 + 8 * v21) = v41;
    v42 = (v19 & 0xFFFFFFFFFFFFFFF8) - 16;
    v39 = v20 - 1;
    if (v41 < *(_QWORD *)(v40 + 8 * v21))
    {
      v38 = 1;
      v39 = v20 - 1;
      goto LABEL_36;
    }
    while (1)
    {
      *(_QWORD *)(v17 + v42 + 8) = 0;
      if (v39 <= 0)
        break;
      --v39;
      v43 = *(_QWORD *)(v17 + v42) + 1;
      *(_QWORD *)(v17 + v42) = v43;
      v44 = *(_QWORD *)(v40 + v42);
      v42 -= 8;
      if (v43 < v44)
      {
        v38 = 1;
        goto LABEL_36;
      }
    }
LABEL_39:
    v91.__r_.__value_.__l.__size_ = v17;
    operator delete((void *)v17);
LABEL_103:
    if (*(_BYTE *)(a1 + 44) != 7)
    {
      std::pair<std::string,turi::flexible_type>::pair[abi:ne180100]<true,0>(&v91, (__int128 *)(*(_QWORD *)(a1 + 8) + 24 * v6), a1 + 32);
      turi::flexible_type::flexible_type<std::string>((uint64_t)v93, (__int128 *)&v91);
      *(_QWORD *)&v94[5] = *(_QWORD *)&v92[5];
      *(_QWORD *)v94 = *(_QWORD *)v92;
      v94[12] = v92[12];
      v92[12] = 0;
      v70 = *((_QWORD *)&v87 + 1);
      if (*((_QWORD *)&v87 + 1) >= v88)
        goto LABEL_81;
LABEL_80:
      *(_QWORD *)v70 = 0;
      *(_DWORD *)(v70 + 8) = 0;
      *(_BYTE *)(v70 + 12) = 0;
      v71 = *(_QWORD *)v93;
      *(_QWORD *)(v70 + 5) = *(_QWORD *)&v93[5];
      *(_QWORD *)v70 = v71;
      *(_BYTE *)(v70 + 12) = v93[12];
      v93[12] = 0;
      *(_QWORD *)(v70 + 16) = 0;
      *(_DWORD *)(v70 + 24) = 0;
      *(_BYTE *)(v70 + 28) = 0;
      v72 = *(_QWORD *)v94;
      *(_QWORD *)(v70 + 21) = *(_QWORD *)&v94[5];
      *(_QWORD *)(v70 + 16) = v72;
      *(_BYTE *)(v70 + 28) = v94[12];
      v94[12] = 0;
      v73 = v70 + 32;
      goto LABEL_82;
    }
LABEL_83:
    ++v6;
    v5 = **a2;
  }
  while (v6 < ((*a2)[1] - v5) >> 4);
LABEL_124:
  *(uint64_t *)((char *)a3 + 5) = 0;
  *a3 = 0;
  *((_BYTE *)a3 + 12) = 5;
  v79 = operator new();
  *(_QWORD *)v79 = 0;
  *(_QWORD *)(v79 + 8) = 0;
  *(_QWORD *)(v79 + 16) = 0;
  *(_QWORD *)(v79 + 24) = 0;
  *a3 = v79;
  *(_QWORD *)v79 = 1;
  if (*(_QWORD *)v79 != 1)
  {
    v80 = (_QWORD *)operator new();
    v81 = *(uint64_t **)(v79 + 8);
    *v80 = *(_QWORD *)v79;
    v80[2] = 0;
    v80[3] = 0;
    v80[1] = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v80 + 1, v81, *(uint64_t **)(v79 + 16), (uint64_t)(*(_QWORD *)(v79 + 16) - (_QWORD)v81) >> 5);
    *a3 = (uint64_t)v80;
    *v80 = 1;
    do
    {
      v82 = __ldaxr((unint64_t *)v79);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, (unint64_t *)v79));
    if (!v83)
    {
      v91.__r_.__value_.__r.__words[0] = v79 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
      MEMORY[0x219A19A08](v79, 0x1020C405E66F15BLL);
    }
  }
  v84 = *a3;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(*a3 + 8));
  *(_OWORD *)(v84 + 8) = v87;
  *(_QWORD *)(v84 + 24) = v88;
  v87 = 0uLL;
  v88 = 0;
  v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
}

void sub_218290B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&a23);
  std::pair<std::string,turi::flexible_type>::~pair((uint64_t)&a18);
  a23 = (void **)&a13;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  unint64_t **v4;
  unint64_t *v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a1, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (unint64_t **)(a1 + 24);
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  if (a2 != a1)
  {
    v5 = *(unint64_t **)(a2 + 24);
    *(_QWORD *)(a1 + 29) = *(_QWORD *)(a2 + 29);
    *v4 = v5;
    v6 = *(unsigned __int8 *)(a2 + 36);
    *(_BYTE *)(a1 + 36) = v6;
    if (v6 <= 9 && ((1 << v6) & 0x33C) != 0)
    {
      v7 = *v4;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  return a1;
}

std::string *std::pair<std::string,turi::flexible_type>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  std::string *v6;
  std::string::size_type v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  v6 = this + 1;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  if (&this[1] != (std::string *)a3)
  {
    v7 = *(_QWORD *)a3;
    *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 5) = *(_QWORD *)(a3 + 5);
    v6->__r_.__value_.__r.__words[0] = v7;
    v8 = *(unsigned __int8 *)(a3 + 12);
    this[1].__r_.__value_.__s.__data_[12] = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0)
    {
      v9 = (unint64_t *)v6->__r_.__value_.__r.__words[0];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  return this;
}

_QWORD *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9355B8;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9355B8;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unint64_t **v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x18uLL);
  *result = &off_24D9355B8;
  result[1] = 0;
  v3 = (unint64_t **)(result + 1);
  *((_DWORD *)result + 4) = 0;
  *((_BYTE *)result + 20) = 0;
  if (result != (_QWORD *)a1)
  {
    *(_QWORD *)((char *)result + 13) = *(_QWORD *)(a1 + 13);
    *v3 = *(unint64_t **)(a1 + 8);
    v4 = *(unsigned __int8 *)(a1 + 20);
    *((_BYTE *)result + 20) = v4;
    v5 = v4 > 9;
    v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0)
    {
      v8 = *v3;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t result, uint64_t a2)
{
  unint64_t **v2;
  unint64_t *v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a2 = &off_24D9355B8;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = (unint64_t **)(a2 + 8);
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  if (a2 != result)
  {
    v3 = *(unint64_t **)(result + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(result + 13);
    *v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(result + 20);
    *(_BYTE *)(a2 + 20) = (_BYTE)v3;
    v4 = v3 > 9;
    v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0)
    {
      v7 = *v2;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2(a1 + 8);
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2::~$_2((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  __n128 v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v47;
  int v48;
  size_t v49;
  size_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  unint64_t v55;
  double *v56;
  uint64_t v57;
  unint64_t v58;
  double *v59;
  _QWORD *v60;
  uint64_t v61;
  double v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  void *v84;
  void *v85;
  unsigned int v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  void *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  unsigned int v100;
  BOOL v101;
  int v102;
  unint64_t *v104;
  unint64_t v105;
  double v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  void *v121;
  void *v122;
  unsigned int v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  void *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v149;
  __int128 v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  void **v154;
  void **v155;

  std::vector<turi::flexible_type>::vector(&v150, ((*a2)[1] - **a2) >> 4);
  v5 = **a2;
  if ((*a2)[1] != v5)
  {
    v6 = 0;
    v149 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v7 = (unsigned __int8 *)(**(_QWORD **)(v5 + 16 * v6) + 16 * (_QWORD)a2[1]);
      switch(byte_254FF28F4)
      {
        case 0:
          switch(v7[12])
          {
            case 0u:
              if (*(_QWORD *)v7 == turi::FLEX_UNDEFINED)
                goto LABEL_150;
              goto LABEL_79;
            case 1u:
              v4.n128_u64[0] = *(_QWORD *)v7;
              v64 = turi::FLEX_UNDEFINED;
              goto LABEL_144;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_79;
            case 6u:
              if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v7 << 8) >> 8 && !*((_DWORD *)v7 + 2))
                goto LABEL_150;
              goto LABEL_79;
            default:
              goto LABEL_219;
          }
        case 1:
          switch(v7[12])
          {
            case 0u:
              v4.n128_u64[0] = turi::FLEX_UNDEFINED;
              v64 = *(_QWORD *)v7;
LABEL_144:
              v106 = (double)v64;
              goto LABEL_145;
            case 1u:
              v4.n128_u64[0] = *(_QWORD *)v7;
              v106 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_145:
              if (v4.n128_f64[0] != v106)
                goto LABEL_79;
              goto LABEL_150;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_79;
            case 6u:
              v4.n128_f64[0] = vabdd_f64((double)*((int *)v7 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v7 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
              goto LABEL_149;
            default:
              goto LABEL_219;
          }
        case 2:
          v45 = v7[12];
          if (v45 - 3 < 7 || v45 < 2)
            goto LABEL_79;
          if (v45 != 2)
            goto LABEL_219;
          v47 = *(_QWORD *)v7;
          v48 = *(char *)(*(_QWORD *)v7 + 31);
          v49 = *(unsigned __int8 *)(*(_QWORD *)v7 + 31);
          if (v48 < 0)
            v50 = *(_QWORD *)(v47 + 16);
          else
            v50 = v49;
          if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
            v137 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
          else
            v137 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
          if (v50 != v137)
            goto LABEL_79;
          v138 = (unsigned __int8 *)(v47 + 8);
          if ((v49 & 0x80) != 0)
            v138 = *(unsigned __int8 **)v138;
          v139 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
          if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
            v139 = *(unsigned __int8 **)v139;
          if ((v49 & 0x80) != 0)
          {
            if (memcmp(v138, v139, v50))
              goto LABEL_79;
          }
          else
          {
            if (!v50)
              goto LABEL_150;
            do
            {
              if (*v138 != *v139)
                goto LABEL_79;
              ++v138;
              ++v139;
              --v50;
            }
            while (v50);
          }
          goto LABEL_150;
        case 3:
          v51 = v7[12];
          if (v51 > 9)
            goto LABEL_219;
          if (v51 != 3)
            goto LABEL_79;
          v52 = *(_QWORD *)v7;
          v53 = *(unint64_t **)(v52 + 8);
          v54 = *(_QWORD **)(v52 + 16);
          v55 = v54 - v53;
          v56 = *(double **)(turi::FLEX_UNDEFINED + 8);
          if (v55 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v56) >> 3)
            goto LABEL_79;
          if (v54 == v53)
            goto LABEL_150;
          if (v55 <= 1)
            v57 = 1;
          else
            v57 = v54 - v53;
          v4.n128_u64[0] = *v53;
          if (*(double *)v53 != *v56)
            goto LABEL_79;
          v58 = 0;
          v59 = v56 + 1;
          v60 = v53 + 1;
          v61 = v57 - 1;
          while (v61 != v58)
          {
            v4.n128_u64[0] = v60[v58];
            v62 = v59[v58++];
            if (v4.n128_f64[0] != v62)
            {
              if (v58 < v55)
                goto LABEL_79;
              goto LABEL_150;
            }
          }
          goto LABEL_150;
        case 4:
          v8 = v7[12];
          if (v8 > 9)
            goto LABEL_219;
          if (v8 != 4)
            goto LABEL_79;
          v9 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v152, (uint64_t *)(*(_QWORD *)v7 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
          goto LABEL_134;
        case 5:
          v65 = v7[12];
          if (v65 > 9)
            goto LABEL_219;
          if (v65 != 5)
            goto LABEL_79;
          v9 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v152, (uint64_t **)(*(_QWORD *)v7 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
          goto LABEL_134;
        case 6:
          switch(v7[12])
          {
            case 0u:
              if (*(_QWORD *)v7 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF28F0)
                goto LABEL_150;
              goto LABEL_79;
            case 1u:
              v4.n128_f64[0] = vabdd_f64(*(double *)v7, (double)dword_254FF28F0 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_149:
              if (v4.n128_f64[0] < 0.0000005)
                goto LABEL_150;
              goto LABEL_79;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_79;
            case 6u:
              if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v7) & 0xFFFFFFFFFFFFFFLL) == 0
                && *((_DWORD *)v7 + 2) == dword_254FF28F0)
              {
                goto LABEL_150;
              }
              goto LABEL_79;
            default:
              goto LABEL_219;
          }
        case 7:
          v63 = v7[12];
          if (v63 < 7 || v63 - 8 < 2)
            goto LABEL_79;
          if (v63 != 7)
            goto LABEL_219;
          goto LABEL_150;
        case 8:
          v66 = v7[12];
          if (v66 < 8 || v66 == 9)
            goto LABEL_79;
          if (v66 != 8)
            goto LABEL_219;
          v9 = turi::image_type::operator==(*(_QWORD *)v7 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_134:
          if ((v9 & 1) != 0)
            goto LABEL_150;
          goto LABEL_79;
        case 9:
          v10 = v7[12];
          if (v10 < 9)
            goto LABEL_79;
          if (v10 != 9)
          {
LABEL_219:
            turi::flexible_type_fail(0);
            __break(1u);
            return;
          }
          v11 = *(_QWORD **)v7;
          if (turi::FLEX_UNDEFINED == *(_QWORD *)v7)
            goto LABEL_150;
          v146 = turi::FLEX_UNDEFINED;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v11 + 1), turi::FLEX_UNDEFINED + 8))
            goto LABEL_79;
          v13 = (char *)v11[3];
          v12 = (char *)v11[4];
          v14 = v12 - v13;
          if (v12 == v13)
            goto LABEL_150;
          if (!v11[1])
            goto LABEL_150;
          v15 = 1;
          do
          {
            v16 = *(_QWORD *)v13;
            v13 += 8;
            v15 *= v16;
          }
          while (v13 != v12);
          if (v15)
          {
            v153 = 0;
            std::vector<unsigned long>::vector(&v154, v14 >> 3, &v153);
            v17 = v154;
            v18 = v155;
            v19 = **(_QWORD **)(v146 + 8);
            v20 = (char *)v155 - (char *)v154;
            v21 = v155 - v154;
            v22 = v21 - 1;
            if (v21 <= 1)
              v23 = 1;
            else
              v23 = v155 - v154;
            while (1)
            {
              if (v18 == v17)
              {
                v31 = 0;
                v4.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v11[1] + 8 * v11[9]);
              }
              else
              {
                v24 = 0;
                v25 = (uint64_t *)v11[6];
                v26 = v17;
                v27 = v23;
                do
                {
                  v29 = (uint64_t)*v26++;
                  v28 = v29;
                  v30 = *v25++;
                  v24 += v30 * v28;
                  --v27;
                }
                while (v27);
                v31 = 0;
                v4.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v11[1] + 8 * (v11[9] + v24));
                v32 = *(uint64_t **)(v146 + 48);
                v33 = v17;
                v34 = v23;
                do
                {
                  v36 = (uint64_t)*v33++;
                  v35 = v36;
                  v37 = *v32++;
                  v31 += v37 * v35;
                  --v34;
                }
                while (v34);
              }
              if (v4.n128_f64[0] != *(double *)(v19 + 8 * (*(_QWORD *)(v146 + 72) + v31)))
                break;
              v38 = v21;
              v39 = v21 - 1;
              if (v20 >= 1)
              {
                v40 = v11[3];
                v41 = (unint64_t)v17[v22] + 1;
                v17[v22] = (void *)v41;
                v42 = (v20 & 0xFFFFFFFFFFFFFFF8) - 16;
                v39 = v21 - 1;
                if (v41 >= *(_QWORD *)(v40 + 8 * v22))
                {
                  while (1)
                  {
                    *(void **)((char *)v17 + v42 + 8) = 0;
                    if (v39 <= 0)
                      break;
                    --v39;
                    v43 = *(unint64_t *)((char *)v17 + v42) + 1;
                    *(void **)((char *)v17 + v42) = (void *)v43;
                    v44 = *(_QWORD *)(v40 + v42);
                    v42 -= 8;
                    if (v43 < v44)
                    {
                      v38 = 1;
                      goto LABEL_36;
                    }
                  }
LABEL_39:
                  v155 = v17;
                  operator delete(v17);
                  goto LABEL_150;
                }
                v38 = 1;
                v39 = v21 - 1;
              }
LABEL_36:
              if (!v38 || v39 < 0)
              {
                if (!v17)
                  goto LABEL_150;
                goto LABEL_39;
              }
            }
            if (v17)
            {
              v155 = v17;
              operator delete(v17);
            }
LABEL_79:
            v68 = **(_QWORD **)(**a2 + 16 * v6) + 16 * (_QWORD)a2[1];
            v69 = v150 + 16 * v6;
            if (v68 != v69)
            {
              switch(*(_BYTE *)(v69 + 12))
              {
                case 2:
                  v70 = *(unint64_t **)v69;
                  do
                  {
                    v71 = __ldaxr(v70);
                    v72 = v71 - 1;
                  }
                  while (__stlxr(v72, v70));
                  if (!v72)
                  {
                    v73 = *(unint64_t **)v69;
                    if (!*(_QWORD *)v69)
                      goto LABEL_122;
                    if (*((char *)v73 + 31) < 0)
                      operator delete((void *)v73[1]);
                    v74 = v73;
                    v75 = 0x1012C404EF22A49;
                    goto LABEL_121;
                  }
                  break;
                case 3:
                  v87 = *(unint64_t **)v69;
                  do
                  {
                    v88 = __ldaxr(v87);
                    v89 = v88 - 1;
                  }
                  while (__stlxr(v89, v87));
                  if (!v89)
                  {
                    v90 = *(unint64_t **)v69;
                    if (!*(_QWORD *)v69)
                      goto LABEL_122;
                    v91 = (void *)v90[1];
                    if (v91)
                    {
                      v90[2] = (unint64_t)v91;
                      operator delete(v91);
                    }
                    v74 = v90;
                    v75 = 0x1080C409938AC02;
                    goto LABEL_121;
                  }
                  break;
                case 4:
                  v76 = *(unint64_t **)v69;
                  do
                  {
                    v77 = __ldaxr(v76);
                    v78 = v77 - 1;
                  }
                  while (__stlxr(v78, v76));
                  if (!v78)
                  {
                    v79 = *(unint64_t **)v69;
                    if (!*(_QWORD *)v69)
                      goto LABEL_122;
                    v154 = (void **)(v79 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v154);
                    goto LABEL_114;
                  }
                  break;
                case 5:
                  v92 = *(unint64_t **)v69;
                  do
                  {
                    v93 = __ldaxr(v92);
                    v94 = v93 - 1;
                  }
                  while (__stlxr(v94, v92));
                  if (!v94)
                  {
                    v79 = *(unint64_t **)v69;
                    if (!*(_QWORD *)v69)
                      goto LABEL_122;
                    v154 = (void **)(v79 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v154);
LABEL_114:
                    v74 = v79;
                    v75 = 0x1020C405E66F15BLL;
                    goto LABEL_121;
                  }
                  break;
                case 8:
                  v95 = *(unint64_t **)v69;
                  do
                  {
                    v96 = __ldaxr(v95);
                    v97 = v96 - 1;
                  }
                  while (__stlxr(v97, v95));
                  if (!v97)
                  {
                    v98 = *(unint64_t **)v69;
                    if (!*(_QWORD *)v69)
                      goto LABEL_122;
                    boost::detail::shared_count::~shared_count((unsigned int **)v98 + 2);
                    v74 = v98;
                    v86 = -235920773;
                    goto LABEL_120;
                  }
                  break;
                case 9:
                  v80 = *(unint64_t **)v69;
                  do
                  {
                    v81 = __ldaxr(v80);
                    v82 = v81 - 1;
                  }
                  while (__stlxr(v82, v80));
                  if (!v82)
                  {
                    v83 = *(unint64_t **)v69;
                    if (*(_QWORD *)v69)
                    {
                      v84 = (void *)v83[6];
                      if (v84)
                      {
                        v83[7] = (unint64_t)v84;
                        operator delete(v84);
                      }
                      v85 = (void *)v83[3];
                      if (v85)
                      {
                        v83[4] = (unint64_t)v85;
                        operator delete(v85);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v83 + 1));
                      v74 = v83;
                      v86 = 2071181815;
LABEL_120:
                      v75 = v86 | 0x1030C4000000000;
LABEL_121:
                      MEMORY[0x219A19A08](v74, v75, v4);
                    }
LABEL_122:
                    *(_QWORD *)v69 = 0;
                  }
                  break;
                default:
                  break;
              }
              v99 = *(_QWORD *)v68;
              *(_QWORD *)(v69 + 5) = *(_QWORD *)(v68 + 5);
              *(_QWORD *)v69 = v99;
              v100 = *(unsigned __int8 *)(v68 + 12);
              goto LABEL_124;
            }
          }
          else
          {
LABEL_150:
            v69 = v150 + 16 * v6;
            if ((uint64_t *)v69 != v149)
            {
              switch(*(_BYTE *)(v69 + 12))
              {
                case 2:
                  v107 = *(unint64_t **)v69;
                  do
                  {
                    v108 = __ldaxr(v107);
                    v109 = v108 - 1;
                  }
                  while (__stlxr(v109, v107));
                  if (!v109)
                  {
                    v110 = *(unint64_t **)v69;
                    if (!*(_QWORD *)v69)
                      goto LABEL_193;
                    if (*((char *)v110 + 31) < 0)
                      operator delete((void *)v110[1]);
                    v111 = v110;
                    v112 = 0x1012C404EF22A49;
                    goto LABEL_192;
                  }
                  break;
                case 3:
                  v124 = *(unint64_t **)v69;
                  do
                  {
                    v125 = __ldaxr(v124);
                    v126 = v125 - 1;
                  }
                  while (__stlxr(v126, v124));
                  if (!v126)
                  {
                    v127 = *(unint64_t **)v69;
                    if (!*(_QWORD *)v69)
                      goto LABEL_193;
                    v128 = (void *)v127[1];
                    if (v128)
                    {
                      v127[2] = (unint64_t)v128;
                      operator delete(v128);
                    }
                    v111 = v127;
                    v112 = 0x1080C409938AC02;
                    goto LABEL_192;
                  }
                  break;
                case 4:
                  v113 = *(unint64_t **)v69;
                  do
                  {
                    v114 = __ldaxr(v113);
                    v115 = v114 - 1;
                  }
                  while (__stlxr(v115, v113));
                  if (!v115)
                  {
                    v116 = *(unint64_t **)v69;
                    if (!*(_QWORD *)v69)
                      goto LABEL_193;
                    v154 = (void **)(v116 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v154);
                    goto LABEL_185;
                  }
                  break;
                case 5:
                  v129 = *(unint64_t **)v69;
                  do
                  {
                    v130 = __ldaxr(v129);
                    v131 = v130 - 1;
                  }
                  while (__stlxr(v131, v129));
                  if (!v131)
                  {
                    v116 = *(unint64_t **)v69;
                    if (!*(_QWORD *)v69)
                      goto LABEL_193;
                    v154 = (void **)(v116 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v154);
LABEL_185:
                    v111 = v116;
                    v112 = 0x1020C405E66F15BLL;
                    goto LABEL_192;
                  }
                  break;
                case 8:
                  v132 = *(unint64_t **)v69;
                  do
                  {
                    v133 = __ldaxr(v132);
                    v134 = v133 - 1;
                  }
                  while (__stlxr(v134, v132));
                  if (!v134)
                  {
                    v135 = *(unint64_t **)v69;
                    if (!*(_QWORD *)v69)
                      goto LABEL_193;
                    boost::detail::shared_count::~shared_count((unsigned int **)v135 + 2);
                    v111 = v135;
                    v123 = -235920773;
                    goto LABEL_191;
                  }
                  break;
                case 9:
                  v117 = *(unint64_t **)v69;
                  do
                  {
                    v118 = __ldaxr(v117);
                    v119 = v118 - 1;
                  }
                  while (__stlxr(v119, v117));
                  if (!v119)
                  {
                    v120 = *(unint64_t **)v69;
                    if (*(_QWORD *)v69)
                    {
                      v121 = (void *)v120[6];
                      if (v121)
                      {
                        v120[7] = (unint64_t)v121;
                        operator delete(v121);
                      }
                      v122 = (void *)v120[3];
                      if (v122)
                      {
                        v120[4] = (unint64_t)v122;
                        operator delete(v122);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v120 + 1));
                      v111 = v120;
                      v123 = 2071181815;
LABEL_191:
                      v112 = v123 | 0x1030C4000000000;
LABEL_192:
                      MEMORY[0x219A19A08](v111, v112);
                    }
LABEL_193:
                    *(_QWORD *)v69 = 0;
                  }
                  break;
                default:
                  break;
              }
              v136 = *v149;
              *(_QWORD *)(v69 + 5) = *(_QWORD *)(a1 + 13);
              *(_QWORD *)v69 = v136;
              v100 = *(unsigned __int8 *)(a1 + 20);
LABEL_124:
              *(_BYTE *)(v69 + 12) = v100;
              v101 = v100 > 9;
              v102 = (1 << v100) & 0x33C;
              if (!v101 && v102 != 0)
              {
                v104 = *(unint64_t **)v69;
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 + 1, v104));
              }
            }
          }
          ++v6;
          v5 = **a2;
          if (v6 >= ((*a2)[1] - v5) >> 4)
            goto LABEL_213;
          break;
        default:
          goto LABEL_219;
      }
    }
  }
LABEL_213:
  *(uint64_t *)((char *)a3 + 5) = 0;
  *a3 = 0;
  *((_BYTE *)a3 + 12) = 4;
  v140 = operator new();
  *(_QWORD *)v140 = 0;
  *(_QWORD *)(v140 + 8) = 0;
  *(_QWORD *)(v140 + 16) = 0;
  *(_QWORD *)(v140 + 24) = 0;
  *a3 = v140;
  *(_QWORD *)v140 = 1;
  if (*(_QWORD *)v140 != 1)
  {
    v141 = (_QWORD *)operator new();
    v142 = *(uint64_t **)(v140 + 8);
    *v141 = *(_QWORD *)v140;
    v141[2] = 0;
    v141[3] = 0;
    v141[1] = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v141 + 1, v142, *(uint64_t **)(v140 + 16), (uint64_t)(*(_QWORD *)(v140 + 16) - (_QWORD)v142) >> 4);
    *a3 = (uint64_t)v141;
    *v141 = 1;
    do
    {
      v143 = __ldaxr((unint64_t *)v140);
      v144 = v143 - 1;
    }
    while (__stlxr(v144, (unint64_t *)v140));
    if (!v144)
    {
      v154 = (void **)(v140 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v154);
      MEMORY[0x219A19A08](v140, 0x1020C405E66F15BLL);
    }
  }
  v145 = *a3;
  std::vector<turi::flexible_type>::__vdeallocate((void **)(*a3 + 8));
  *(_OWORD *)(v145 + 8) = v150;
  *(_QWORD *)(v145 + 24) = v151;
  v150 = 0uLL;
  v151 = 0;
  v154 = (void **)&v150;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v154);
}

void sub_218291B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,void **a22)
{
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v24 = v23;
  MEMORY[0x219A19A08](v24, 0x1020C405E66F15BLL);
  do
  {
    v26 = __ldaxr(v22);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v22));
  if (!v27)
  {
    v28 = *a10;
    if (*a10)
    {
      a19 = (void **)(v28 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a19);
      MEMORY[0x219A19A08](v28, 0x1020C405E66F15BLL);
    }
    *a10 = 0;
  }
  *a10 = 0;
  *((_DWORD *)a10 + 2) = 0;
  *((_BYTE *)a10 + 12) = 0;
  a22 = (void **)&a13;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D935638;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D935638;
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unint64_t **v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x18uLL);
  *result = &off_24D935638;
  result[1] = 0;
  v3 = (unint64_t **)(result + 1);
  *((_DWORD *)result + 4) = 0;
  *((_BYTE *)result + 20) = 0;
  if (result != (_QWORD *)a1)
  {
    *(_QWORD *)((char *)result + 13) = *(_QWORD *)(a1 + 13);
    *v3 = *(unint64_t **)(a1 + 8);
    v4 = *(unsigned __int8 *)(a1 + 20);
    *((_BYTE *)result + 20) = v4;
    v5 = v4 > 9;
    v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0)
    {
      v8 = *v3;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t result, uint64_t a2)
{
  unint64_t **v2;
  unint64_t *v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a2 = &off_24D935638;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = (unint64_t **)(a2 + 8);
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  if (a2 != result)
  {
    v3 = *(unint64_t **)(result + 8);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)(result + 13);
    *v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(result + 20);
    *(_BYTE *)(a2 + 20) = (_BYTE)v3;
    v4 = v3 > 9;
    v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0)
    {
      v7 = *v2;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3(a1 + 8);
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3::~$_3((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  int v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  char *v23;
  const std::string *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v73;
  size_t v74;
  unsigned int v75;
  double *v76;
  double *v77;
  unint64_t v78;
  double *v79;
  unsigned int v80;
  double v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v86;
  unint64_t *p_shared_owners;
  uint64_t v88;
  char *v89;
  const std::string *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  __int128 v98;
  __int128 v99;
  float v100;
  double v101;
  double v102;
  uint64_t v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  _QWORD *v106;
  void **v107;
  _QWORD *v108;
  const void *v109;
  unint64_t v110;
  unint64_t v111;
  void *v112;
  _QWORD *v113;
  void *v114;
  std::runtime_error *v115;
  std::string *v116;
  __int128 v117;
  std::runtime_error *exception;
  std::string *v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _QWORD v129[3];
  _QWORD v130[3];
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  void *v133;
  void *v134;
  void *__p;
  void *v136;
  size_t v137;
  size_t v138;
  uint64_t v139;
  size_t __idx;
  std::string v141;
  std::string v142;

  std::vector<double>::vector(&v122, ((*a2)[1] - **a2) >> 4);
  v6 = **a2;
  if ((*a2)[1] != v6)
  {
    for (i = 0; i < ((*a2)[1] - v6) >> 4; ++i)
    {
      v8 = **(_QWORD **)(v6 + 16 * i) + 16 * (_QWORD)a2[1];
      v9 = *(unsigned __int8 *)(v8 + 12);
      if (v9 == 7)
      {
        switch(byte_254FF28F4)
        {
          case 0:
            switch(*(_BYTE *)(a1 + 20))
            {
              case 0:
                if (*(_QWORD *)(a1 + 8) == turi::FLEX_UNDEFINED)
                  goto LABEL_158;
                goto LABEL_104;
              case 1:
                v81 = *(double *)(a1 + 8);
                v82 = turi::FLEX_UNDEFINED;
                goto LABEL_152;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_104;
              case 6:
                if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8 && !*(_DWORD *)(a1 + 16))
                  goto LABEL_158;
                goto LABEL_104;
              default:
                goto LABEL_189;
            }
          case 1:
            switch(*(_BYTE *)(a1 + 20))
            {
              case 0:
                v81 = *(double *)&turi::FLEX_UNDEFINED;
                v82 = *(_QWORD *)(a1 + 8);
LABEL_152:
                v102 = (double)v82;
                goto LABEL_153;
              case 1:
                v81 = *(double *)(a1 + 8);
                v102 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_153:
                if (v81 != v102)
                  goto LABEL_104;
                goto LABEL_158;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_104;
              case 6:
                v101 = vabdd_f64((double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
                goto LABEL_157;
              default:
                goto LABEL_189;
            }
          case 2:
            v71 = *(unsigned __int8 *)(a1 + 20);
            if (v71 - 3 < 7 || v71 < 2)
              goto LABEL_104;
            if (v71 != 2)
              goto LABEL_189;
            v73 = *(_QWORD *)(a1 + 8);
            if (*(char *)(v73 + 31) < 0)
              v74 = *(_QWORD *)(v73 + 16);
            else
              v74 = *(unsigned __int8 *)(v73 + 31);
            if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
              v103 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
            else
              v103 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
            if (v74 != v103)
              goto LABEL_104;
            v104 = (unsigned __int8 *)(v73 + 8);
            if ((*(_BYTE *)(v73 + 31) & 0x80) != 0)
              v104 = *(unsigned __int8 **)v104;
            v105 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
            if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
              v105 = *(unsigned __int8 **)v105;
            if ((*(_BYTE *)(v73 + 31) & 0x80) != 0)
            {
              if (memcmp(v104, v105, v74))
                goto LABEL_104;
            }
            else
            {
              if (!v74)
                goto LABEL_158;
              do
              {
                if (*v104 != *v105)
                  goto LABEL_104;
                ++v104;
                ++v105;
                --v74;
              }
              while (v74);
            }
            goto LABEL_158;
          case 3:
            v75 = *(unsigned __int8 *)(a1 + 20);
            if (v75 > 9)
              goto LABEL_189;
            if (v75 != 3)
              goto LABEL_104;
            v76 = *(double **)(*(_QWORD *)(a1 + 8) + 8);
            v77 = *(double **)(*(_QWORD *)(a1 + 8) + 16);
            v78 = v77 - v76;
            v79 = *(double **)(turi::FLEX_UNDEFINED + 8);
            if (v78 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v79) >> 3)
              goto LABEL_104;
            if (v77 == v76)
              goto LABEL_158;
            if (v78 <= 1)
              v78 = 1;
            while (*v76 == *v79)
            {
              ++v79;
              ++v76;
              if (!--v78)
                goto LABEL_158;
            }
            goto LABEL_104;
          case 4:
            v33 = *(unsigned __int8 *)(a1 + 20);
            if (v33 > 9)
              goto LABEL_189;
            if (v33 != 4)
              goto LABEL_104;
            v34 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v142, (uint64_t *)(*(_QWORD *)(a1 + 8) + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
            goto LABEL_142;
          case 5:
            v83 = *(unsigned __int8 *)(a1 + 20);
            if (v83 > 9)
              goto LABEL_189;
            if (v83 != 5)
              goto LABEL_104;
            v34 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v142, (uint64_t **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
            goto LABEL_142;
          case 6:
            switch(*(_BYTE *)(a1 + 20))
            {
              case 0:
                if (*(_QWORD *)(a1 + 8) == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF28F0)
                  goto LABEL_158;
                goto LABEL_104;
              case 1:
                v101 = vabdd_f64(*(double *)(a1 + 8), (double)dword_254FF28F0 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_157:
                if (v101 < 0.0000005)
                  goto LABEL_158;
                goto LABEL_104;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_104;
              case 6:
                if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)(a1 + 8)) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *(_DWORD *)(a1 + 16) == dword_254FF28F0)
                {
                  goto LABEL_158;
                }
                goto LABEL_104;
              default:
                goto LABEL_189;
            }
          case 7:
            v80 = *(unsigned __int8 *)(a1 + 20);
            if (v80 < 7 || v80 - 8 < 2)
              goto LABEL_104;
            if (v80 != 7)
              goto LABEL_189;
            goto LABEL_158;
          case 8:
            v84 = *(unsigned __int8 *)(a1 + 20);
            if (v84 < 8 || v84 == 9)
              goto LABEL_104;
            if (v84 != 8)
              goto LABEL_189;
            v34 = turi::image_type::operator==(*(_QWORD *)(a1 + 8) + 8, turi::FLEX_UNDEFINED + 8);
LABEL_142:
            if ((v34 & 1) != 0)
              goto LABEL_158;
            goto LABEL_104;
          case 9:
            v35 = *(unsigned __int8 *)(a1 + 20);
            if (v35 < 9)
              goto LABEL_104;
            if (v35 != 9)
            {
LABEL_189:
              turi::flexible_type_fail(0);
              __break(1u);
              return;
            }
            v36 = *(_QWORD *)(a1 + 8);
            if (turi::FLEX_UNDEFINED == v36)
              goto LABEL_158;
            v121 = turi::FLEX_UNDEFINED;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape(v36 + 8, turi::FLEX_UNDEFINED + 8))
              goto LABEL_104;
            v38 = *(char **)(v36 + 24);
            v37 = *(char **)(v36 + 32);
            v39 = v37 - v38;
            if (v37 != v38)
            {
              if (*(_QWORD *)(v36 + 8))
              {
                v40 = 1;
                do
                {
                  v41 = *(_QWORD *)v38;
                  v38 += 8;
                  v40 *= v41;
                }
                while (v38 != v37);
                if (v40)
                {
                  v124 = 0;
                  std::vector<unsigned long>::vector(&v131, v39 >> 3, &v124);
                  v42 = v131;
                  v43 = v132;
                  v44 = **(_QWORD **)(v121 + 8);
                  v45 = (char *)v132 - (char *)v131;
                  v46 = ((char *)v132 - (char *)v131) >> 3;
                  v47 = v46 - 1;
                  if (v46 <= 1)
                    v48 = 1;
                  else
                    v48 = ((char *)v132 - (char *)v131) >> 3;
                  while (1)
                  {
                    if (v43 == v42)
                    {
                      v56 = 0;
                      v57 = *(double *)(**(_QWORD **)(v36 + 8) + 8 * *(_QWORD *)(v36 + 72));
                    }
                    else
                    {
                      v49 = 0;
                      v50 = *(uint64_t **)(v36 + 48);
                      v51 = (uint64_t *)v42;
                      v52 = v48;
                      do
                      {
                        v54 = *v51++;
                        v53 = v54;
                        v55 = *v50++;
                        v49 += v55 * v53;
                        --v52;
                      }
                      while (v52);
                      v56 = 0;
                      v57 = *(double *)(**(_QWORD **)(v36 + 8) + 8 * (*(_QWORD *)(v36 + 72) + v49));
                      v58 = *(uint64_t **)(v121 + 48);
                      v59 = (uint64_t *)v42;
                      v60 = v48;
                      do
                      {
                        v62 = *v59++;
                        v61 = v62;
                        v63 = *v58++;
                        v56 += v63 * v61;
                        --v60;
                      }
                      while (v60);
                    }
                    if (v57 != *(double *)(v44 + 8 * (*(_QWORD *)(v121 + 72) + v56)))
                      break;
                    v64 = v46;
                    v65 = v46 - 1;
                    if (v45 >= 1)
                    {
                      v66 = *(_QWORD *)(v36 + 24);
                      v67 = *((_QWORD *)&v42->__vftable + v47) + 1;
                      *((_QWORD *)&v42->__vftable + v47) = v67;
                      v68 = (v45 & 0xFFFFFFFFFFFFFFF8) - 16;
                      v65 = v46 - 1;
                      if (v67 >= *(_QWORD *)(v66 + 8 * v47))
                      {
                        while (1)
                        {
                          *(uint64_t *)((char *)&v42->__shared_owners_ + v68) = 0;
                          if (v65 <= 0)
                            break;
                          --v65;
                          v69 = (unint64_t)&(*(std::__shared_weak_count_vtbl **)((char *)&v42->__vftable + v68))->~__shared_weak_count
                              + 1;
                          *(std::__shared_weak_count_vtbl **)((char *)&v42->__vftable + v68) = (std::__shared_weak_count_vtbl *)v69;
                          v70 = *(_QWORD *)(v66 + v68);
                          v68 -= 8;
                          if (v69 < v70)
                          {
                            v64 = 1;
                            goto LABEL_65;
                          }
                        }
LABEL_68:
                        v132 = v42;
                        operator delete(v42);
                        goto LABEL_158;
                      }
                      v64 = 1;
                      v65 = v46 - 1;
                    }
LABEL_65:
                    if (!v64 || v65 < 0)
                    {
                      if (!v42)
                        goto LABEL_158;
                      goto LABEL_68;
                    }
                  }
                  if (v42)
                  {
                    v132 = v42;
                    operator delete(v42);
                  }
LABEL_104:
                  v10 = 0.0;
                  switch(*(_BYTE *)(a1 + 20))
                  {
                    case 0:
                      v11 = *(_QWORD *)(a1 + 8);
LABEL_106:
                      v10 = (double)v11;
                      goto LABEL_159;
                    case 1:
                      v10 = *(double *)(a1 + 8);
                      goto LABEL_159;
                    case 2:
                      v88 = *(_QWORD *)(a1 + 8);
                      v137 = 0;
                      v89 = (char *)(v88 + 8);
                      if (*(char *)(v88 + 31) < 0)
                        v89 = *(char **)(v88 + 8);
                      v90 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v142, v89);
                      v25 = std::stod(v90, &v137);
                      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v142.__r_.__value_.__l.__data_);
                      if (*(char *)(v88 + 31) < 0)
                        v91 = *(_QWORD *)(v88 + 16);
                      else
                        v91 = *(unsigned __int8 *)(v88 + 31);
                      if (v137 != v91)
                      {
                        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::operator+<char>();
                        v119 = std::string::append(&v141, " cannot be interpreted as a float");
                        v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
                        v142.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v120;
                        v119->__r_.__value_.__l.__size_ = 0;
                        v119->__r_.__value_.__r.__words[2] = 0;
                        v119->__r_.__value_.__r.__words[0] = 0;
                        std::runtime_error::runtime_error(exception, &v142);
                        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                      }
LABEL_139:
                      v100 = v25;
                      v10 = v100;
                      goto LABEL_159;
                    case 3:
                      v86 = *(_QWORD *)(a1 + 8);
                      memset(&v142, 0, sizeof(v142));
                      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v142, *(const void **)(v86 + 8), *(_QWORD *)(v86 + 16), (uint64_t)(*(_QWORD *)(v86 + 16) - *(_QWORD *)(v86 + 8)) >> 3);
                      turi::flexible_type_fail(0);
                      v16 = (void *)v142.__r_.__value_.__r.__words[0];
                      if (v142.__r_.__value_.__r.__words[0])
                      {
                        v142.__r_.__value_.__l.__size_ = v142.__r_.__value_.__r.__words[0];
LABEL_109:
                        operator delete(v16);
                      }
                      goto LABEL_159;
                    case 4:
                      v92 = *(_QWORD *)(a1 + 8);
                      memset(&v142, 0, sizeof(v142));
                      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v142, *(uint64_t **)(v92 + 8), *(uint64_t **)(v92 + 16), (uint64_t)(*(_QWORD *)(v92 + 16) - *(_QWORD *)(v92 + 8)) >> 4);
                      turi::flexible_type_fail(0);
                      v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
                      goto LABEL_159;
                    case 5:
                      v93 = *(_QWORD *)(a1 + 8);
                      memset(&v142, 0, sizeof(v142));
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v142, *(uint64_t **)(v93 + 8), *(uint64_t **)(v93 + 16), (uint64_t)(*(_QWORD *)(v93 + 16) - *(_QWORD *)(v93 + 8)) >> 5);
                      turi::flexible_type_fail(0);
                      v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
                      goto LABEL_159;
                    case 6:
                      v13 = (double)((uint64_t)(*(_QWORD *)(a1 + 8) << 8) >> 8);
                      v14 = (double)*(int *)(a1 + 16);
LABEL_127:
                      v10 = v14 / 1000000.0 + v13;
                      goto LABEL_159;
                    case 7:
                      goto LABEL_159;
                    case 8:
                      v94 = *(_QWORD *)(a1 + 8);
                      v95 = *(unsigned int **)(v94 + 16);
                      v124 = *(_QWORD *)(v94 + 8);
                      v125 = v95;
                      if (v95)
                      {
                        v96 = v95 + 2;
                        do
                          v97 = __ldxr(v96);
                        while (__stxr(v97 + 1, v96));
                      }
                      v98 = *(_OWORD *)(v94 + 24);
                      v99 = *(_OWORD *)(v94 + 56);
                      v127 = *(_OWORD *)(v94 + 40);
                      v128 = v99;
                      v126 = v98;
                      turi::flexible_type_fail(0);
                      boost::detail::shared_count::~shared_count(&v125);
                      goto LABEL_159;
                    case 9:
                      turi::flexible_type_impl::ndarray<double>::ndarray(&v131, *(_QWORD *)(a1 + 8) + 8);
                      turi::flexible_type_fail(0);
                      if (__p)
                      {
                        v136 = __p;
                        operator delete(__p);
                      }
                      if (v133)
                      {
                        v134 = v133;
                        operator delete(v133);
                      }
                      v17 = v132;
                      if (!v132)
                        goto LABEL_159;
                      p_shared_owners = (unint64_t *)&v132->__shared_owners_;
                      do
                        v19 = __ldaxr(p_shared_owners);
                      while (__stlxr(v19 - 1, p_shared_owners));
                      break;
                    default:
                      goto LABEL_189;
                  }
                  goto LABEL_117;
                }
              }
            }
LABEL_158:
            v10 = NAN;
            break;
          default:
            goto LABEL_189;
        }
      }
      else
      {
        if (v9 != 1)
        {
          switch(*(_BYTE *)(v8 + 12))
          {
            case 0:
              v11 = *(_QWORD *)v8;
              goto LABEL_106;
            case 2:
              v21 = *(_QWORD *)v8;
              v22 = (char **)(*(_QWORD *)v8 + 8);
              __idx = 0;
              v23 = (char *)v22;
              if (*(char *)(v21 + 31) < 0)
                v23 = *v22;
              v24 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v142, v23);
              v25 = std::stod(v24, &__idx);
              if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v142.__r_.__value_.__l.__data_);
              if (*(char *)(v21 + 31) < 0)
                v26 = *(_QWORD *)(v21 + 16);
              else
                v26 = *(unsigned __int8 *)(v21 + 31);
              if (__idx != v26)
              {
                v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v116 = std::string::append(&v141, " cannot be interpreted as a float");
                v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
                v142.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v117;
                v116->__r_.__value_.__l.__size_ = 0;
                v116->__r_.__value_.__r.__words[2] = 0;
                v116->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v115, &v142);
                __cxa_throw(v115, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_139;
            case 3:
              v15 = *(_QWORD *)v8;
              v138 = 0;
              v139 = 0;
              v137 = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v137, *(const void **)(v15 + 8), *(_QWORD *)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 3);
              turi::flexible_type_fail(0);
              v16 = (void *)v137;
              v10 = 0.0;
              if (!v137)
                goto LABEL_159;
              v138 = v137;
              goto LABEL_109;
            case 4:
              v20 = *(_QWORD *)v8;
              memset(v130, 0, sizeof(v130));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v130, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v142.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
              goto LABEL_35;
            case 5:
              v12 = *(_QWORD *)v8;
              memset(v129, 0, sizeof(v129));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v129, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v142.__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
              goto LABEL_35;
            case 6:
              v13 = (double)((uint64_t)(*(_QWORD *)v8 << 8) >> 8);
              v14 = (double)*(int *)(v8 + 8);
              goto LABEL_127;
            case 8:
              v27 = *(_QWORD *)v8;
              v28 = *(unsigned int **)(v27 + 16);
              v124 = *(_QWORD *)(v27 + 8);
              v125 = v28;
              if (v28)
              {
                v29 = v28 + 2;
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              v31 = *(_OWORD *)(v27 + 24);
              v32 = *(_OWORD *)(v27 + 56);
              v127 = *(_OWORD *)(v27 + 40);
              v128 = v32;
              v126 = v31;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v125);
LABEL_35:
              v10 = 0.0;
              goto LABEL_159;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&v131, *(_QWORD *)v8 + 8);
              turi::flexible_type_fail(0);
              if (__p)
              {
                v136 = __p;
                operator delete(__p);
              }
              if (v133)
              {
                v134 = v133;
                operator delete(v133);
              }
              v17 = v132;
              v10 = 0.0;
              if (!v132)
                goto LABEL_159;
              v18 = (unint64_t *)&v132->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              break;
            default:
              goto LABEL_189;
          }
LABEL_117:
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          goto LABEL_159;
        }
        v10 = *(double *)v8;
      }
LABEL_159:
      *(double *)(v122 + 8 * i) = v10;
      v6 = **a2;
    }
  }
  *(_QWORD *)(a3 + 5) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 12) = 3;
  v106 = (_QWORD *)operator new();
  *v106 = 0;
  v106[1] = 0;
  v107 = (void **)(v106 + 1);
  v106[2] = 0;
  v106[3] = 0;
  *(_QWORD *)a3 = v106;
  *v106 = 1;
  if (*v106 != 1)
  {
    v108 = (_QWORD *)operator new();
    v109 = (const void *)v106[1];
    *v108 = *v106;
    v108[2] = 0;
    v108[3] = 0;
    v108[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v108 + 1, v109, v106[2], (uint64_t)(v106[2] - (_QWORD)v109) >> 3);
    *(_QWORD *)a3 = v108;
    *v108 = 1;
    do
    {
      v110 = __ldaxr(v106);
      v111 = v110 - 1;
    }
    while (__stlxr(v111, v106));
    if (!v111)
    {
      v112 = *v107;
      if (*v107)
      {
        v106[2] = v112;
        operator delete(v112);
      }
      MEMORY[0x219A19A08](v106, 0x1080C409938AC02);
    }
  }
  v113 = *(_QWORD **)a3;
  v114 = (void *)v113[1];
  if (v114)
  {
    v113[2] = v114;
    operator delete(v114);
    v113[1] = 0;
    v113[2] = 0;
    v113[3] = 0;
  }
  *(_OWORD *)(v113 + 1) = v122;
  v113[3] = v123;
}

void sub_218292A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, boost::detail::shared_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  void *v39;
  int v40;
  uint64_t v41;

  if (*(char *)(v41 - 121) < 0)
    operator delete(*(void **)(v41 - 144));
  if (*(char *)(v41 - 145) < 0)
  {
    operator delete(*(void **)(v41 - 168));
    if ((v40 & 1) == 0)
    {
LABEL_8:
      if (__p)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3,std::allocator<turi::unity_sframe::pack_columns(std::vector<std::string> const&,std::vector<std::string> const&,turi::flex_type_enum,turi::flexible_type const&)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::vector<std::string> *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  std::allocator<std::string> *p_end_cap;
  std::string *v10;
  std::string *value;
  std::string *v12;
  std::vector<std::string>::pointer begin;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  __int128 *v21;
  std::__split_buffer<std::string> __v;

  v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    v10 = value;
    v12 = (std::string *)*((_QWORD *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      begin = a1->__begin_;
      v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18)
        v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v18);
      else
        v19 = 0;
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string const*>>((uint64_t)&__v, (__int128 *)a3, a5);
      v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
  return v5;
}

void sub_218292EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string const*>>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v4;
  std::string *v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(std::string **)(a1 + 16);
  if (a3)
  {
    v6 = &v4[a3];
    v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v4;
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  *(_QWORD *)(a1 + 16) = v4;
}

void sub_218292F4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24D9356B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D9356B8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, _QWORD *a2, turi::sframe_rows **a3)
{
  turi::sframe_rows *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  unint64_t i;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  void *v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  BOOL v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  BOOL v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  BOOL v74;
  int v75;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  void *v90;
  void *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  void *v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v98;
  unint64_t *v99;
  unint64_t v100;
  BOOL v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  int v108;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  void *v131;
  void *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t *v136;
  void *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  uint64_t v145;
  int v146;
  unint64_t *v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  BOOL v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  BOOL v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t *v173;
  void *v174;
  void *v175;
  unint64_t *v176;
  unint64_t v177;
  BOOL v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  void *v183;
  unint64_t *v184;
  unint64_t v185;
  BOOL v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  BOOL v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t *v212;
  void *v213;
  void *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  void *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  BOOL v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t *v240;
  unint64_t *v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t *v250;
  void *v251;
  void *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t *v256;
  void *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t *v264;
  uint64_t v265;
  int v266;
  unint64_t *v268;
  unint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v277;
  _QWORD v278[3];
  void **v279;
  _QWORD v280[3];
  _QWORD *v281;
  _BYTE v282[24];
  _BYTE *v283;
  _BYTE v284[24];
  _BYTE *v285;
  uint64_t v286;

  v286 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 32))(v280, **(_QWORD **)(a1 + 8), *a2);
  std::vector<turi::flexible_type>::vector(v278, **(_QWORD **)(a1 + 16) + **(_QWORD **)(a1 + 24) - 1);
  v5 = *a3;
  if (!*((_BYTE *)v5 + 24))
  {
    turi::sframe_rows::ensure_unique(v5);
    if (!*((_BYTE *)v5 + 24))
      turi::sframe_rows::ensure_unique(v5);
  }
  if (*(_QWORD *)v5 != *((_QWORD *)v5 + 1))
  {
    v6 = **(_QWORD ***)v5;
    if (v6)
    {
      v7 = *(_QWORD *)(**(_QWORD **)v5 + 8) - *v6;
      if (v7)
      {
        v8 = 0;
        v277 = v7 >> 4;
        while (1)
        {
          v9 = (_BYTE *)(**(_QWORD **)(*(_QWORD *)v5 + 16 * **(_QWORD **)(a1 + 32)) + 16 * v8);
          v10 = v9[12];
          switch(v10)
          {
            case 3:
              v11 = (_QWORD *)(*(_QWORD *)v9 + 8);
              v12 = (_QWORD *)(*(_QWORD *)v9 + 16);
              v13 = 3;
              goto LABEL_12;
            case 4:
              v11 = (_QWORD *)(*(_QWORD *)v9 + 8);
              v12 = (_QWORD *)(*(_QWORD *)v9 + 16);
              v13 = 4;
              goto LABEL_12;
            case 5:
              v11 = (_QWORD *)(*(_QWORD *)v9 + 8);
              v12 = (_QWORD *)(*(_QWORD *)v9 + 16);
              v13 = 5;
LABEL_12:
              v14 = (uint64_t)(*v12 - *v11) >> v13;
              goto LABEL_13;
            case 7:
              goto LABEL_222;
            case 9:
              v151 = *(uint64_t **)(*(_QWORD *)v9 + 24);
              v150 = *(uint64_t **)(*(_QWORD *)v9 + 32);
              if (v150 == v151 || !*(_QWORD *)(*(_QWORD *)v9 + 8))
                goto LABEL_222;
              v14 = 1;
              do
              {
                v152 = *v151++;
                v14 *= v152;
              }
              while (v151 != v150);
LABEL_13:
              if (v14)
              {
LABEL_14:
                for (i = 0; ; ++i)
                {
                  v16 = 1;
                  switch(v10)
                  {
                    case 3:
                      v17 = (_QWORD *)(*(_QWORD *)v9 + 8);
                      v18 = (_QWORD *)(*(_QWORD *)v9 + 16);
                      v19 = 3;
                      goto LABEL_19;
                    case 4:
                      v17 = (_QWORD *)(*(_QWORD *)v9 + 8);
                      v18 = (_QWORD *)(*(_QWORD *)v9 + 16);
                      v19 = 4;
                      goto LABEL_19;
                    case 5:
                      v17 = (_QWORD *)(*(_QWORD *)v9 + 8);
                      v18 = (_QWORD *)(*(_QWORD *)v9 + 16);
                      v19 = 5;
LABEL_19:
                      v16 = (uint64_t)(*v18 - *v17) >> v19;
                      break;
                    case 9:
                      v38 = *(uint64_t **)(*(_QWORD *)v9 + 24);
                      v37 = *(uint64_t **)(*(_QWORD *)v9 + 32);
                      if (v37 == v38)
                      {
                        v16 = 0;
                      }
                      else
                      {
                        v16 = *(_QWORD *)(*(_QWORD *)v9 + 8);
                        if (v16)
                        {
                          v16 = 1;
                          do
                          {
                            v39 = *v38++;
                            v16 *= v39;
                          }
                          while (v38 != v37);
                        }
                      }
                      break;
                    default:
                      break;
                  }
                  if (i >= v16)
                    goto LABEL_404;
                  v20 = **(unsigned __int8 **)(a1 + 48);
                  if (v20 == 4)
                    break;
                  if (v20 == 5)
                  {
                    v21 = *(_QWORD *)v9;
                    v22 = *(_QWORD *)(*(_QWORD *)v9 + 8) + 32 * i;
                    v23 = v278[0] + 16 * **(_QWORD **)(a1 + 16) - 16;
                    if (v22 != v23)
                    {
                      switch(*(_BYTE *)(v278[0] + 16 * **(_QWORD **)(a1 + 16) - 4))
                      {
                        case 2:
                          v24 = *(unint64_t **)v23;
                          do
                          {
                            v25 = __ldaxr(v24);
                            v26 = v25 - 1;
                          }
                          while (__stlxr(v26, v24));
                          if (!v26)
                          {
                            v27 = *(unint64_t **)v23;
                            if (!*(_QWORD *)v23)
                              goto LABEL_93;
                            if (*((char *)v27 + 31) < 0)
                              operator delete((void *)v27[1]);
                            v28 = v27;
                            v29 = 0x1012C404EF22A49;
                            goto LABEL_92;
                          }
                          break;
                        case 3:
                          v58 = *(unint64_t **)v23;
                          do
                          {
                            v59 = __ldaxr(v58);
                            v60 = v59 - 1;
                          }
                          while (__stlxr(v60, v58));
                          if (!v60)
                          {
                            v61 = *(unint64_t **)v23;
                            if (!*(_QWORD *)v23)
                              goto LABEL_93;
                            v62 = (void *)v61[1];
                            if (v62)
                            {
                              v61[2] = (unint64_t)v62;
                              operator delete(v62);
                            }
                            v28 = v61;
                            v29 = 0x1080C409938AC02;
                            goto LABEL_92;
                          }
                          break;
                        case 4:
                          v42 = *(unint64_t **)v23;
                          do
                          {
                            v43 = __ldaxr(v42);
                            v44 = v43 - 1;
                          }
                          while (__stlxr(v44, v42));
                          if (!v44)
                          {
                            v45 = *(unint64_t **)v23;
                            if (!*(_QWORD *)v23)
                              goto LABEL_93;
                            v279 = (void **)(v45 + 1);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v279);
                            goto LABEL_86;
                          }
                          break;
                        case 5:
                          v66 = *(unint64_t **)v23;
                          do
                          {
                            v67 = __ldaxr(v66);
                            v68 = v67 - 1;
                          }
                          while (__stlxr(v68, v66));
                          if (!v68)
                          {
                            v45 = *(unint64_t **)v23;
                            if (!*(_QWORD *)v23)
                              goto LABEL_93;
                            v279 = (void **)(v45 + 1);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v279);
LABEL_86:
                            v28 = v45;
                            v29 = 0x1020C405E66F15BLL;
                            goto LABEL_92;
                          }
                          break;
                        case 8:
                          v69 = *(unint64_t **)v23;
                          do
                          {
                            v70 = __ldaxr(v69);
                            v71 = v70 - 1;
                          }
                          while (__stlxr(v71, v69));
                          if (!v71)
                          {
                            v72 = *(unint64_t **)v23;
                            if (!*(_QWORD *)v23)
                              goto LABEL_93;
                            boost::detail::shared_count::~shared_count((unsigned int **)v72 + 2);
                            v28 = v72;
                            v29 = 0x1030C40F1F0227BLL;
                            goto LABEL_92;
                          }
                          break;
                        case 9:
                          v46 = *(unint64_t **)v23;
                          do
                          {
                            v47 = __ldaxr(v46);
                            v48 = v47 - 1;
                          }
                          while (__stlxr(v48, v46));
                          if (!v48)
                          {
                            v49 = *(unint64_t **)v23;
                            if (*(_QWORD *)v23)
                            {
                              v50 = (void *)v49[6];
                              if (v50)
                              {
                                v49[7] = (unint64_t)v50;
                                operator delete(v50);
                              }
                              v51 = (void *)v49[3];
                              if (v51)
                              {
                                v49[4] = (unint64_t)v51;
                                operator delete(v51);
                              }
                              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v49 + 1));
                              v28 = v49;
                              v29 = 0x1030C407B73B9F7;
LABEL_92:
                              MEMORY[0x219A19A08](v28, v29);
                            }
LABEL_93:
                            *(_QWORD *)v23 = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      v73 = *(_QWORD *)v22;
                      *(_QWORD *)(v23 + 5) = *(_QWORD *)(v22 + 5);
                      *(_QWORD *)v23 = v73;
                      LODWORD(v73) = *(unsigned __int8 *)(v22 + 12);
                      *(_BYTE *)(v23 + 12) = v73;
                      v74 = v73 > 9;
                      v75 = (1 << v73) & 0x33C;
                      if (!v74 && v75 != 0)
                      {
                        v77 = *(unint64_t **)v23;
                        do
                          v78 = __ldaxr(v77);
                        while (__stlxr(v78 + 1, v77));
                      }
                    }
                    v30 = *(_QWORD *)(v21 + 8) + 32 * i + 16;
                    v31 = v278[0] + 16 * **(_QWORD **)(a1 + 16);
                    if (v30 != v31)
                    {
                      switch(*(_BYTE *)(v31 + 12))
                      {
                        case 2:
                          v79 = *(unint64_t **)v31;
                          do
                          {
                            v80 = __ldaxr(v79);
                            v34 = --v80 == 0;
                          }
                          while (__stlxr(v80, v79));
                          goto LABEL_104;
                        case 3:
                          v92 = *(unint64_t **)v31;
                          do
                          {
                            v93 = __ldaxr(v92);
                            v65 = --v93 == 0;
                          }
                          while (__stlxr(v93, v92));
                          goto LABEL_128;
                        case 4:
                          v84 = *(unint64_t **)v31;
                          do
                          {
                            v85 = __ldaxr(v84);
                            v54 = --v85 == 0;
                          }
                          while (__stlxr(v85, v84));
                          goto LABEL_112;
                        case 5:
                          v96 = *(unint64_t **)v31;
                          do
                          {
                            v97 = __ldaxr(v96);
                            v98 = --v97 == 0;
                          }
                          while (__stlxr(v97, v96));
                          goto LABEL_142;
                        case 8:
                          v99 = *(unint64_t **)v31;
                          do
                          {
                            v100 = __ldaxr(v99);
                            v101 = --v100 == 0;
                          }
                          while (__stlxr(v100, v99));
                          goto LABEL_149;
                        case 9:
                          v87 = *(unint64_t **)v31;
                          do
                          {
                            v88 = __ldaxr(v87);
                            v57 = --v88 == 0;
                          }
                          while (__stlxr(v88, v87));
                          goto LABEL_118;
                        default:
                          break;
                      }
LABEL_155:
                      v107 = *(_QWORD *)v30;
                      *(_QWORD *)(v31 + 5) = *(_QWORD *)(v30 + 5);
                      *(_QWORD *)v31 = v107;
                      LODWORD(v107) = *(unsigned __int8 *)(v30 + 12);
                      *(_BYTE *)(v31 + 12) = v107;
                      v74 = v107 > 9;
                      v108 = (1 << v107) & 0x33C;
                      if (!v74 && v108 != 0)
                      {
                        v110 = *(unint64_t **)v31;
                        do
                          v111 = __ldaxr(v110);
                        while (__stlxr(v111 + 1, v110));
                      }
                    }
                  }
                  else
                  {
                    if (v10 == 1)
                    {
                      v41 = v9;
                      if (i)
                      {
LABEL_422:
                        turi::flexible_type_fail(0);
                        __break(1u);
                      }
                    }
                    else
                    {
                      if (v10 == 9)
                      {
                        v40 = *(_QWORD *)v9;
                        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)v9 + 8));
                        v35 = *(_QWORD **)(v40 + 8);
                        v36 = *(_QWORD *)(v40 + 72) + i;
                      }
                      else
                      {
                        if (v10 != 3)
                          goto LABEL_422;
                        v35 = (_QWORD *)(*(_QWORD *)v9 + 8);
                        v36 = i;
                      }
                      v41 = (_QWORD *)(*v35 + 8 * v36);
                    }
                    turi::flexible_type::operator=<double>(v278[0] + 16 * **(_QWORD **)(a1 + 16) - 16, v41);
                  }
LABEL_161:
                  if (**(_QWORD **)(a1 + 16))
                  {
                    v112 = 0;
                    v113 = 0;
                    do
                    {
                      if (v113 != **(_QWORD **)(a1 + 32))
                      {
                        v114 = **(_QWORD **)(*(_QWORD *)v5 + 16 * v113) + 16 * v8;
                        v115 = v112 + 1;
                        v116 = v278[0] + 16 * v112;
                        if (v114 != v116)
                        {
                          switch(*(_BYTE *)(v116 + 12))
                          {
                            case 2:
                              v117 = *(unint64_t **)v116;
                              do
                              {
                                v118 = __ldaxr(v117);
                                v119 = v118 - 1;
                              }
                              while (__stlxr(v119, v117));
                              if (!v119)
                              {
                                v120 = *(unint64_t **)v116;
                                if (!*(_QWORD *)v116)
                                  goto LABEL_206;
                                if (*((char *)v120 + 31) < 0)
                                  operator delete((void *)v120[1]);
                                v121 = v120;
                                v122 = 0x1012C404EF22A49;
                                goto LABEL_205;
                              }
                              break;
                            case 3:
                              v133 = *(unint64_t **)v116;
                              do
                              {
                                v134 = __ldaxr(v133);
                                v135 = v134 - 1;
                              }
                              while (__stlxr(v135, v133));
                              if (!v135)
                              {
                                v136 = *(unint64_t **)v116;
                                if (!*(_QWORD *)v116)
                                  goto LABEL_206;
                                v137 = (void *)v136[1];
                                if (v137)
                                {
                                  v136[2] = (unint64_t)v137;
                                  operator delete(v137);
                                }
                                v121 = v136;
                                v122 = 0x1080C409938AC02;
                                goto LABEL_205;
                              }
                              break;
                            case 4:
                              v123 = *(unint64_t **)v116;
                              do
                              {
                                v124 = __ldaxr(v123);
                                v125 = v124 - 1;
                              }
                              while (__stlxr(v125, v123));
                              if (!v125)
                              {
                                v126 = *(unint64_t **)v116;
                                if (!*(_QWORD *)v116)
                                  goto LABEL_206;
                                v279 = (void **)(v126 + 1);
                                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v279);
                                goto LABEL_199;
                              }
                              break;
                            case 5:
                              v138 = *(unint64_t **)v116;
                              do
                              {
                                v139 = __ldaxr(v138);
                                v140 = v139 - 1;
                              }
                              while (__stlxr(v140, v138));
                              if (!v140)
                              {
                                v126 = *(unint64_t **)v116;
                                if (!*(_QWORD *)v116)
                                  goto LABEL_206;
                                v279 = (void **)(v126 + 1);
                                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v279);
LABEL_199:
                                v121 = v126;
                                v122 = 0x1020C405E66F15BLL;
                                goto LABEL_205;
                              }
                              break;
                            case 8:
                              v141 = *(unint64_t **)v116;
                              do
                              {
                                v142 = __ldaxr(v141);
                                v143 = v142 - 1;
                              }
                              while (__stlxr(v143, v141));
                              if (!v143)
                              {
                                v144 = *(unint64_t **)v116;
                                if (!*(_QWORD *)v116)
                                  goto LABEL_206;
                                boost::detail::shared_count::~shared_count((unsigned int **)v144 + 2);
                                v121 = v144;
                                v122 = 0x1030C40F1F0227BLL;
                                goto LABEL_205;
                              }
                              break;
                            case 9:
                              v127 = *(unint64_t **)v116;
                              do
                              {
                                v128 = __ldaxr(v127);
                                v129 = v128 - 1;
                              }
                              while (__stlxr(v129, v127));
                              if (!v129)
                              {
                                v130 = *(unint64_t **)v116;
                                if (*(_QWORD *)v116)
                                {
                                  v131 = (void *)v130[6];
                                  if (v131)
                                  {
                                    v130[7] = (unint64_t)v131;
                                    operator delete(v131);
                                  }
                                  v132 = (void *)v130[3];
                                  if (v132)
                                  {
                                    v130[4] = (unint64_t)v132;
                                    operator delete(v132);
                                  }
                                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v130 + 1));
                                  v121 = v130;
                                  v122 = 0x1030C407B73B9F7;
LABEL_205:
                                  MEMORY[0x219A19A08](v121, v122);
                                }
LABEL_206:
                                *(_QWORD *)v116 = 0;
                              }
                              break;
                            default:
                              break;
                          }
                          v145 = *(_QWORD *)v114;
                          *(_QWORD *)(v116 + 5) = *(_QWORD *)(v114 + 5);
                          *(_QWORD *)v116 = v145;
                          LODWORD(v145) = *(unsigned __int8 *)(v114 + 12);
                          *(_BYTE *)(v116 + 12) = v145;
                          v74 = v145 > 9;
                          v146 = (1 << v145) & 0x33C;
                          if (!v74 && v146 != 0)
                          {
                            v148 = *(unint64_t **)v116;
                            do
                              v149 = __ldaxr(v148);
                            while (__stlxr(v149 + 1, v148));
                          }
                        }
                        v112 = v115;
                      }
                      ++v113;
                    }
                    while (v113 < **(_QWORD **)(a1 + 16));
                  }
                  if (!v281)
                    std::__throw_bad_function_call[abi:ne180100]();
                  (*(void (**)(_QWORD *, _QWORD *))(*v281 + 48))(v281, v278);
                  v10 = v9[12];
                }
                v30 = *(_QWORD *)(*(_QWORD *)v9 + 8) + 16 * i;
                v31 = v278[0] + 16 * **(_QWORD **)(a1 + 16) - 16;
                if (v30 == v31)
                  goto LABEL_161;
                switch(*(_BYTE *)(v278[0] + 16 * **(_QWORD **)(a1 + 16) - 4))
                {
                  case 2:
                    v32 = *(unint64_t **)v31;
                    do
                    {
                      v33 = __ldaxr(v32);
                      v34 = --v33 == 0;
                    }
                    while (__stlxr(v33, v32));
LABEL_104:
                    if (v34)
                    {
                      v81 = *(unint64_t **)v31;
                      if (!*(_QWORD *)v31)
                        goto LABEL_154;
                      if (*((char *)v81 + 31) < 0)
                        operator delete((void *)v81[1]);
                      v82 = v81;
                      v83 = 0x1012C404EF22A49;
                      goto LABEL_153;
                    }
                    break;
                  case 3:
                    v63 = *(unint64_t **)v31;
                    do
                    {
                      v64 = __ldaxr(v63);
                      v65 = --v64 == 0;
                    }
                    while (__stlxr(v64, v63));
LABEL_128:
                    if (v65)
                    {
                      v94 = *(unint64_t **)v31;
                      if (!*(_QWORD *)v31)
                        goto LABEL_154;
                      v95 = (void *)v94[1];
                      if (v95)
                      {
                        v94[2] = (unint64_t)v95;
                        operator delete(v95);
                      }
                      v82 = v94;
                      v83 = 0x1080C409938AC02;
                      goto LABEL_153;
                    }
                    break;
                  case 4:
                    v52 = *(unint64_t **)v31;
                    do
                    {
                      v53 = __ldaxr(v52);
                      v54 = --v53 == 0;
                    }
                    while (__stlxr(v53, v52));
LABEL_112:
                    if (v54)
                    {
                      v86 = *(unint64_t **)v31;
                      if (!*(_QWORD *)v31)
                        goto LABEL_154;
                      v279 = (void **)(v86 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v279);
                      goto LABEL_146;
                    }
                    break;
                  case 5:
                    v102 = *(unint64_t **)v31;
                    do
                    {
                      v103 = __ldaxr(v102);
                      v98 = --v103 == 0;
                    }
                    while (__stlxr(v103, v102));
LABEL_142:
                    if (v98)
                    {
                      v86 = *(unint64_t **)v31;
                      if (!*(_QWORD *)v31)
                        goto LABEL_154;
                      v279 = (void **)(v86 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v279);
LABEL_146:
                      v82 = v86;
                      v83 = 0x1020C405E66F15BLL;
                      goto LABEL_153;
                    }
                    break;
                  case 8:
                    v104 = *(unint64_t **)v31;
                    do
                    {
                      v105 = __ldaxr(v104);
                      v101 = --v105 == 0;
                    }
                    while (__stlxr(v105, v104));
LABEL_149:
                    if (v101)
                    {
                      v106 = *(unint64_t **)v31;
                      if (!*(_QWORD *)v31)
                        goto LABEL_154;
                      boost::detail::shared_count::~shared_count((unsigned int **)v106 + 2);
                      v82 = v106;
                      v83 = 0x1030C40F1F0227BLL;
                      goto LABEL_153;
                    }
                    break;
                  case 9:
                    v55 = *(unint64_t **)v31;
                    do
                    {
                      v56 = __ldaxr(v55);
                      v57 = --v56 == 0;
                    }
                    while (__stlxr(v56, v55));
LABEL_118:
                    if (v57)
                    {
                      v89 = *(unint64_t **)v31;
                      if (*(_QWORD *)v31)
                      {
                        v90 = (void *)v89[6];
                        if (v90)
                        {
                          v89[7] = (unint64_t)v90;
                          operator delete(v90);
                        }
                        v91 = (void *)v89[3];
                        if (v91)
                        {
                          v89[4] = (unint64_t)v91;
                          operator delete(v91);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v89 + 1));
                        v82 = v89;
                        v83 = 0x1030C407B73B9F7;
LABEL_153:
                        MEMORY[0x219A19A08](v82, v83);
                      }
LABEL_154:
                      *(_QWORD *)v31 = 0;
                    }
                    break;
                  default:
                    goto LABEL_155;
                }
                goto LABEL_155;
              }
LABEL_222:
              if (**(_BYTE **)(a1 + 40))
                goto LABEL_404;
              v153 = v278[0] + 16 * **(_QWORD **)(a1 + 16) - 16;
              if (**(_BYTE **)(a1 + 48) != 5)
              {
                if ((uint64_t *)v153 == &turi::FLEX_UNDEFINED)
                  goto LABEL_348;
                switch(*(_BYTE *)(v278[0] + 16 * **(_QWORD **)(a1 + 16) - 4))
                {
                  case 2:
                    v160 = *(unint64_t **)v153;
                    do
                    {
                      v161 = __ldaxr(v160);
                      v162 = --v161 == 0;
                    }
                    while (__stlxr(v161, v160));
LABEL_294:
                    if (v162)
                    {
                      v204 = *(_QWORD *)v153;
                      if (!*(_QWORD *)v153)
                        goto LABEL_341;
                      if (*(char *)(v204 + 31) < 0)
                        operator delete(*(void **)(v204 + 8));
                      v205 = (_QWORD *)v204;
                      v206 = 0x1012C404EF22A49;
                      goto LABEL_340;
                    }
                    break;
                  case 3:
                    v184 = *(unint64_t **)v153;
                    do
                    {
                      v185 = __ldaxr(v184);
                      v186 = --v185 == 0;
                    }
                    while (__stlxr(v185, v184));
LABEL_318:
                    if (v186)
                    {
                      v217 = *(_QWORD *)v153;
                      if (!*(_QWORD *)v153)
                        goto LABEL_341;
                      v218 = *(void **)(v217 + 8);
                      if (v218)
                      {
                        *(_QWORD *)(v217 + 16) = v218;
                        operator delete(v218);
                      }
                      v205 = (_QWORD *)v217;
                      v206 = 0x1080C409938AC02;
                      goto LABEL_340;
                    }
                    break;
                  case 4:
                    v167 = *(unint64_t **)v153;
                    do
                    {
                      v168 = __ldaxr(v167);
                      v169 = --v168 == 0;
                    }
                    while (__stlxr(v168, v167));
LABEL_302:
                    if (v169)
                    {
                      v209 = *(_QWORD *)v153;
                      if (!*(_QWORD *)v153)
                        goto LABEL_341;
                      v279 = (void **)(v209 + 8);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v279);
                      goto LABEL_330;
                    }
                    break;
                  case 5:
                    v190 = *(unint64_t **)v153;
                    do
                    {
                      v191 = __ldaxr(v190);
                      v192 = --v191 == 0;
                    }
                    while (__stlxr(v191, v190));
LABEL_326:
                    if (v192)
                    {
                      v209 = *(_QWORD *)v153;
                      if (!*(_QWORD *)v153)
                        goto LABEL_341;
                      v279 = (void **)(v209 + 8);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v279);
LABEL_330:
                      v205 = (_QWORD *)v209;
                      v206 = 0x1020C405E66F15BLL;
                      goto LABEL_340;
                    }
                    break;
                  case 8:
                    v221 = *(unint64_t **)v153;
                    do
                    {
                      v222 = __ldaxr(v221);
                      v223 = --v222 == 0;
                    }
                    while (__stlxr(v222, v221));
LABEL_336:
                    if (v223)
                    {
                      v226 = *(_QWORD *)v153;
                      if (!*(_QWORD *)v153)
                        goto LABEL_341;
                      boost::detail::shared_count::~shared_count((unsigned int **)(v226 + 16));
                      v205 = (_QWORD *)v226;
                      v206 = 0x1030C40F1F0227BLL;
                      goto LABEL_340;
                    }
                    break;
                  case 9:
                    v176 = *(unint64_t **)v153;
                    do
                    {
                      v177 = __ldaxr(v176);
                      v178 = --v177 == 0;
                    }
                    while (__stlxr(v177, v176));
LABEL_308:
                    if (v178)
                    {
                      v212 = *(unint64_t **)v153;
                      if (*(_QWORD *)v153)
                      {
                        v213 = (void *)v212[6];
                        if (v213)
                        {
                          v212[7] = (unint64_t)v213;
                          operator delete(v213);
                        }
                        v214 = (void *)v212[3];
                        if (v214)
                        {
                          v212[4] = (unint64_t)v214;
                          operator delete(v214);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v212 + 1));
                        v205 = v212;
                        v206 = 0x1030C407B73B9F7;
LABEL_340:
                        MEMORY[0x219A19A08](v205, v206);
                      }
LABEL_341:
                      *(_QWORD *)v153 = 0;
                    }
                    break;
                  default:
                    goto LABEL_342;
                }
                goto LABEL_342;
              }
              if ((uint64_t *)v153 != &turi::FLEX_UNDEFINED)
              {
                switch(*(_BYTE *)(v278[0] + 16 * **(_QWORD **)(a1 + 16) - 4))
                {
                  case 2:
                    v154 = *(unint64_t **)v153;
                    do
                    {
                      v155 = __ldaxr(v154);
                      v156 = v155 - 1;
                    }
                    while (__stlxr(v156, v154));
                    if (!v156)
                    {
                      v157 = *(_QWORD *)v153;
                      if (!*(_QWORD *)v153)
                        goto LABEL_283;
                      if (*(char *)(v157 + 31) < 0)
                        operator delete(*(void **)(v157 + 8));
                      v158 = (_QWORD *)v157;
                      v159 = 0x1012C404EF22A49;
                      goto LABEL_282;
                    }
                    break;
                  case 3:
                    v179 = *(unint64_t **)v153;
                    do
                    {
                      v180 = __ldaxr(v179);
                      v181 = v180 - 1;
                    }
                    while (__stlxr(v181, v179));
                    if (!v181)
                    {
                      v182 = *(_QWORD *)v153;
                      if (!*(_QWORD *)v153)
                        goto LABEL_283;
                      v183 = *(void **)(v182 + 8);
                      if (v183)
                      {
                        *(_QWORD *)(v182 + 16) = v183;
                        operator delete(v183);
                      }
                      v158 = (_QWORD *)v182;
                      v159 = 0x1080C409938AC02;
                      goto LABEL_282;
                    }
                    break;
                  case 4:
                    v163 = *(unint64_t **)v153;
                    do
                    {
                      v164 = __ldaxr(v163);
                      v165 = v164 - 1;
                    }
                    while (__stlxr(v165, v163));
                    if (!v165)
                    {
                      v166 = *(_QWORD *)v153;
                      if (!*(_QWORD *)v153)
                        goto LABEL_283;
                      v279 = (void **)(v166 + 8);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v279);
                      goto LABEL_273;
                    }
                    break;
                  case 5:
                    v187 = *(unint64_t **)v153;
                    do
                    {
                      v188 = __ldaxr(v187);
                      v189 = v188 - 1;
                    }
                    while (__stlxr(v189, v187));
                    if (!v189)
                    {
                      v166 = *(_QWORD *)v153;
                      if (!*(_QWORD *)v153)
                        goto LABEL_283;
                      v279 = (void **)(v166 + 8);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v279);
LABEL_273:
                      v158 = (_QWORD *)v166;
                      v159 = 0x1020C405E66F15BLL;
                      goto LABEL_282;
                    }
                    break;
                  case 8:
                    v193 = *(unint64_t **)v153;
                    do
                    {
                      v194 = __ldaxr(v193);
                      v195 = v194 - 1;
                    }
                    while (__stlxr(v195, v193));
                    if (!v195)
                    {
                      v196 = *(_QWORD *)v153;
                      if (!*(_QWORD *)v153)
                        goto LABEL_283;
                      boost::detail::shared_count::~shared_count((unsigned int **)(v196 + 16));
                      v158 = (_QWORD *)v196;
                      v159 = 0x1030C40F1F0227BLL;
                      goto LABEL_282;
                    }
                    break;
                  case 9:
                    v170 = *(unint64_t **)v153;
                    do
                    {
                      v171 = __ldaxr(v170);
                      v172 = v171 - 1;
                    }
                    while (__stlxr(v172, v170));
                    if (!v172)
                    {
                      v173 = *(unint64_t **)v153;
                      if (*(_QWORD *)v153)
                      {
                        v174 = (void *)v173[6];
                        if (v174)
                        {
                          v173[7] = (unint64_t)v174;
                          operator delete(v174);
                        }
                        v175 = (void *)v173[3];
                        if (v175)
                        {
                          v173[4] = (unint64_t)v175;
                          operator delete(v175);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v173 + 1));
                        v158 = v173;
                        v159 = 0x1030C407B73B9F7;
LABEL_282:
                        MEMORY[0x219A19A08](v158, v159);
                      }
LABEL_283:
                      *(_QWORD *)v153 = 0;
                    }
                    break;
                  default:
                    break;
                }
                v197 = turi::FLEX_UNDEFINED;
                *(_QWORD *)(v153 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
                *(_QWORD *)v153 = v197;
                LODWORD(v197) = byte_254FF28F4;
                *(_BYTE *)(v153 + 12) = byte_254FF28F4;
                v74 = v197 > 9;
                v198 = (1 << v197) & 0x33C;
                if (!v74 && v198 != 0)
                {
                  v200 = *(unint64_t **)v153;
                  do
                    v201 = __ldaxr(v200);
                  while (__stlxr(v201 + 1, v200));
                }
              }
              v153 = v278[0] + 16 * **(_QWORD **)(a1 + 16);
              if ((uint64_t *)v153 != &turi::FLEX_UNDEFINED)
              {
                switch(*(_BYTE *)(v153 + 12))
                {
                  case 2:
                    v202 = *(unint64_t **)v153;
                    do
                    {
                      v203 = __ldaxr(v202);
                      v162 = --v203 == 0;
                    }
                    while (__stlxr(v203, v202));
                    goto LABEL_294;
                  case 3:
                    v215 = *(unint64_t **)v153;
                    do
                    {
                      v216 = __ldaxr(v215);
                      v186 = --v216 == 0;
                    }
                    while (__stlxr(v216, v215));
                    goto LABEL_318;
                  case 4:
                    v207 = *(unint64_t **)v153;
                    do
                    {
                      v208 = __ldaxr(v207);
                      v169 = --v208 == 0;
                    }
                    while (__stlxr(v208, v207));
                    goto LABEL_302;
                  case 5:
                    v219 = *(unint64_t **)v153;
                    do
                    {
                      v220 = __ldaxr(v219);
                      v192 = --v220 == 0;
                    }
                    while (__stlxr(v220, v219));
                    goto LABEL_326;
                  case 8:
                    v224 = *(unint64_t **)v153;
                    do
                    {
                      v225 = __ldaxr(v224);
                      v223 = --v225 == 0;
                    }
                    while (__stlxr(v225, v224));
                    goto LABEL_336;
                  case 9:
                    v210 = *(unint64_t **)v153;
                    do
                    {
                      v211 = __ldaxr(v210);
                      v178 = --v211 == 0;
                    }
                    while (__stlxr(v211, v210));
                    goto LABEL_308;
                  default:
                    break;
                }
LABEL_342:
                v227 = turi::FLEX_UNDEFINED;
                *(_QWORD *)(v153 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
                *(_QWORD *)v153 = v227;
                LODWORD(v227) = byte_254FF28F4;
                *(_BYTE *)(v153 + 12) = byte_254FF28F4;
                v74 = v227 > 9;
                v228 = (1 << v227) & 0x33C;
                if (!v74 && v228 != 0)
                {
                  v230 = *(unint64_t **)v153;
                  do
                    v231 = __ldaxr(v230);
                  while (__stlxr(v231 + 1, v230));
                }
              }
LABEL_348:
              if (**(_QWORD **)(a1 + 16))
              {
                v232 = 0;
                v233 = 0;
                do
                {
                  if (v233 != **(_QWORD **)(a1 + 32))
                  {
                    v234 = **(_QWORD **)(*(_QWORD *)v5 + 16 * v233) + 16 * v8;
                    v235 = v232 + 1;
                    v236 = v278[0] + 16 * v232;
                    if (v234 != v236)
                    {
                      switch(*(_BYTE *)(v236 + 12))
                      {
                        case 2:
                          v237 = *(unint64_t **)v236;
                          do
                          {
                            v238 = __ldaxr(v237);
                            v239 = v238 - 1;
                          }
                          while (__stlxr(v239, v237));
                          if (!v239)
                          {
                            v240 = *(unint64_t **)v236;
                            if (!*(_QWORD *)v236)
                              goto LABEL_393;
                            if (*((char *)v240 + 31) < 0)
                              operator delete((void *)v240[1]);
                            v241 = v240;
                            v242 = 0x1012C404EF22A49;
                            goto LABEL_392;
                          }
                          break;
                        case 3:
                          v253 = *(unint64_t **)v236;
                          do
                          {
                            v254 = __ldaxr(v253);
                            v255 = v254 - 1;
                          }
                          while (__stlxr(v255, v253));
                          if (!v255)
                          {
                            v256 = *(unint64_t **)v236;
                            if (!*(_QWORD *)v236)
                              goto LABEL_393;
                            v257 = (void *)v256[1];
                            if (v257)
                            {
                              v256[2] = (unint64_t)v257;
                              operator delete(v257);
                            }
                            v241 = v256;
                            v242 = 0x1080C409938AC02;
                            goto LABEL_392;
                          }
                          break;
                        case 4:
                          v243 = *(unint64_t **)v236;
                          do
                          {
                            v244 = __ldaxr(v243);
                            v245 = v244 - 1;
                          }
                          while (__stlxr(v245, v243));
                          if (!v245)
                          {
                            v246 = *(unint64_t **)v236;
                            if (!*(_QWORD *)v236)
                              goto LABEL_393;
                            v279 = (void **)(v246 + 1);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v279);
                            goto LABEL_386;
                          }
                          break;
                        case 5:
                          v258 = *(unint64_t **)v236;
                          do
                          {
                            v259 = __ldaxr(v258);
                            v260 = v259 - 1;
                          }
                          while (__stlxr(v260, v258));
                          if (!v260)
                          {
                            v246 = *(unint64_t **)v236;
                            if (!*(_QWORD *)v236)
                              goto LABEL_393;
                            v279 = (void **)(v246 + 1);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v279);
LABEL_386:
                            v241 = v246;
                            v242 = 0x1020C405E66F15BLL;
                            goto LABEL_392;
                          }
                          break;
                        case 8:
                          v261 = *(unint64_t **)v236;
                          do
                          {
                            v262 = __ldaxr(v261);
                            v263 = v262 - 1;
                          }
                          while (__stlxr(v263, v261));
                          if (!v263)
                          {
                            v264 = *(unint64_t **)v236;
                            if (!*(_QWORD *)v236)
                              goto LABEL_393;
                            boost::detail::shared_count::~shared_count((unsigned int **)v264 + 2);
                            v241 = v264;
                            v242 = 0x1030C40F1F0227BLL;
                            goto LABEL_392;
                          }
                          break;
                        case 9:
                          v247 = *(unint64_t **)v236;
                          do
                          {
                            v248 = __ldaxr(v247);
                            v249 = v248 - 1;
                          }
                          while (__stlxr(v249, v247));
                          if (!v249)
                          {
                            v250 = *(unint64_t **)v236;
                            if (*(_QWORD *)v236)
                            {
                              v251 = (void *)v250[6];
                              if (v251)
                              {
                                v250[7] = (unint64_t)v251;
                                operator delete(v251);
                              }
                              v252 = (void *)v250[3];
                              if (v252)
                              {
                                v250[4] = (unint64_t)v252;
                                operator delete(v252);
                              }
                              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v250 + 1));
                              v241 = v250;
                              v242 = 0x1030C407B73B9F7;
LABEL_392:
                              MEMORY[0x219A19A08](v241, v242);
                            }
LABEL_393:
                            *(_QWORD *)v236 = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      v265 = *(_QWORD *)v234;
                      *(_QWORD *)(v236 + 5) = *(_QWORD *)(v234 + 5);
                      *(_QWORD *)v236 = v265;
                      LODWORD(v265) = *(unsigned __int8 *)(v234 + 12);
                      *(_BYTE *)(v236 + 12) = v265;
                      v74 = v265 > 9;
                      v266 = (1 << v265) & 0x33C;
                      if (!v74 && v266 != 0)
                      {
                        v268 = *(unint64_t **)v236;
                        do
                          v269 = __ldaxr(v268);
                        while (__stlxr(v269 + 1, v268));
                      }
                    }
                    v232 = v235;
                  }
                  ++v233;
                }
                while (v233 < **(_QWORD **)(a1 + 16));
              }
              if (!v281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, _QWORD *))(*v281 + 48))(v281, v278);
LABEL_404:
              if (++v8 == v277)
                goto LABEL_405;
              break;
            default:
              goto LABEL_14;
          }
        }
      }
    }
  }
LABEL_405:
  v279 = (void **)v278;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v279);
  v270 = v285;
  if (v285 == v284)
  {
    v271 = 4;
    v270 = v284;
  }
  else
  {
    if (!v285)
      goto LABEL_410;
    v271 = 5;
  }
  (*(void (**)(void))(*v270 + 8 * v271))();
LABEL_410:
  v272 = v283;
  if (v283 == v282)
  {
    v273 = 4;
    v272 = v282;
  }
  else
  {
    if (!v283)
      goto LABEL_415;
    v273 = 5;
  }
  (*(void (**)(void))(*v272 + 8 * v273))();
LABEL_415:
  v274 = v281;
  if (v281 == v280)
  {
    v275 = 4;
    v274 = v280;
    goto LABEL_419;
  }
  if (v281)
  {
    v275 = 5;
LABEL_419:
    (*(void (**)(void))(*v274 + 8 * v275))();
  }
  return 0;
}

void sub_218294434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, char a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25)
{
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  a13 = (void **)&a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a13);
  v26 = a25;
  if (a25 == &a22)
  {
    v27 = 4;
    v26 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  v28 = a21;
  if (a21 == &a18)
  {
    v29 = 4;
    v28 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_11:
  v30 = a17;
  if (a17 == &a14)
  {
    v31 = 4;
    v30 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_16;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_16:
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1,std::allocator<turi::unity_sframe::stack(std::string const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,BOOL)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

void turi::parallel_for<void turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1}>(turi::sframe &)::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2182946AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  _QWORD v21[3];
  _QWORD *v22;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*a1 + 32))(v21);
  v4 = *(_QWORD *)a1[1];
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v6 = *(_QWORD *)a1[1];
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v8 = v4 * a2 / v5;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v9 = (v6 + v6 * a2) / v7;
  if (*(_QWORD *)a1[2] == 1)
  {
    for (; v8 < v9; v8 += 1024)
      (*(void (**)(_QWORD))(**(_QWORD **)a1[4] + 48))(*(_QWORD *)a1[4]);
  }
  else if (v8 < v9)
  {
    do
    {
      v10 = *(_QWORD *)a1[3] + *(_QWORD *)a1[2] * v8;
      (*(void (**)(_QWORD, unint64_t, unint64_t, uint64_t *))(**(_QWORD **)a1[4] + 48))(*(_QWORD *)a1[4], v10, v10 + 1, &v17);
      if (v18 == v17)
        break;
      if (!v22)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *))(*v22 + 48))(v22);
      ++v8;
    }
    while (v8 != v9);
  }
  v20 = (void **)&v17;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v11 = v26;
  if (v26 == v25)
  {
    v12 = 4;
    v11 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_14;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_14:
  v13 = v24;
  if (v24 == v23)
  {
    v14 = 4;
    v13 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_19;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_19:
  result = v22;
  if (v22 == v21)
  {
    v16 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v16 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_21829493C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186ECD15 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186ECD15 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
      result = turi::copy_range<turi::sframe &,turi::sframe &,void,void>(turi::sframe &,turi::sframe &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}::operator()((_QWORD *)*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D935758;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D935758;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(_QWORD *a1, uint64_t a2, turi::sframe_rows **a3)
{
  turi::sframe_rows *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _BOOL8 v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20[3];
  uint64_t v21;
  turi::sframe_rows *v22;
  uint64_t v23;
  void **v24;

  v4 = *a3;
  if (*((_BYTE *)*a3 + 24))
  {
    v21 = 0;
    v22 = v4;
    v23 = 0;
  }
  else
  {
    turi::sframe_rows::ensure_unique(*a3);
    v5 = *((unsigned __int8 *)v4 + 24);
    v21 = 0;
    v22 = v4;
    v23 = 0;
    if (!v5)
      turi::sframe_rows::ensure_unique(v4);
  }
  if (*(_QWORD *)v4 == *((_QWORD *)v4 + 1))
    return 0;
  v6 = **(_QWORD ***)v4;
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(**(_QWORD **)v4 + 8) - *v6;
  if (!v7)
    return 0;
  v8 = 0;
  v9 = v7 >> 4;
  v10 = (unint64_t *)a1[1];
  do
  {
    v11 = *v10;
    v12 = a1[5];
    v13 = *v10 >= v12;
    if (*v10 >= v12)
      break;
    v14 = a1[3];
    v15 = v11 >= v14;
    v16 = v11 - v14;
    if (v15 && !(v16 % a1[4]))
    {
      turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v22, v20);
      v18 = *(_QWORD *)(a1[2] + 56);
      if (!v18)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, v20);
      v24 = (void **)v20;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
      v10 = (unint64_t *)a1[1];
      ++*v10;
      v8 = v21;
    }
    else
    {
      *v10 = v11 + 1;
    }
    v17 = ++v23;
  }
  while (v8 || v17 != v9);
  return v13;
}

void sub_218294C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sframe::copy_range(unsigned long,unsigned long,unsigned long)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D9357D8;
  return result;
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D9357D8;
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = **(char ***)a1;
  v3 = *(char **)(*(_QWORD *)a1 + 8);
  v4 = v3 - v2;
  if (v3 != v2)
  {
    v5 = v4 >> 4;
    v4 = 1;
    while (*(_BYTE *)(**(_QWORD **)v2 + 16 * *(_QWORD *)(a1 + 8) + 12) == 7)
    {
      v2 += 16;
      if (!--v5)
      {
        v4 = 0;
        break;
      }
    }
  }
  *(_BYTE *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = v4;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D935858;
  return result;
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D935858;
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = **(char ***)a1;
  v3 = *(char **)(*(_QWORD *)a1 + 8);
  if (v3 == v2)
  {
    v5 = 1;
  }
  else
  {
    v4 = (v3 - v2) >> 4;
    v5 = 1;
    while (*(_BYTE *)(**(_QWORD **)v2 + 16 * *(_QWORD *)(a1 + 8) + 12) != 7)
    {
      v2 += 16;
      if (!--v4)
        goto LABEL_8;
    }
    v5 = 0;
  }
LABEL_8:
  *(_BYTE *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = v5;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_3>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D9358D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D9358D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(result + 8);
  v6 = **a2;
  if (v5)
  {
    v7 = (_QWORD **)**a2;
    v8 = *(_QWORD *)(result + 8);
    while (*(_BYTE *)(**v7 + 16 * (_QWORD)a2[1] + 12) == 7)
    {
      v7 += 2;
      if (!--v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    if (v5 >= ((*a2)[1] - v6) >> 4)
    {
LABEL_9:
      *(_QWORD *)(a3 + 5) = 0;
      *(_QWORD *)a3 = 0;
      return result;
    }
    v9 = 16 * v5;
    while (1)
    {
      result = turi::flexible_type::contains_na((turi::flexible_type *)(**(_QWORD **)(v6 + v9) + 16 * (_QWORD)a2[1]));
      if ((result & 1) == 0)
        break;
      ++v5;
      v6 = **a2;
      v9 += 16;
      if (v5 >= ((*a2)[1] - v6) >> 4)
        goto LABEL_9;
    }
  }
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = 1;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_4>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

void std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D935958;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D935958;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(result + 8);
  v6 = **a2;
  if (v5)
  {
    v7 = (_QWORD **)**a2;
    v8 = *(_QWORD *)(result + 8);
    while (*(_BYTE *)(**v7 + 16 * (_QWORD)a2[1] + 12) != 7)
    {
      v7 += 2;
      if (!--v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    if (v5 >= ((*a2)[1] - v6) >> 4)
    {
LABEL_9:
      *(_BYTE *)(a3 + 12) = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(_QWORD *)a3 = 1;
      return result;
    }
    v9 = 16 * v5;
    while (1)
    {
      result = turi::flexible_type::contains_na((turi::flexible_type *)(**(_QWORD **)(v6 + v9) + 16 * (_QWORD)a2[1]));
      if ((_DWORD)result)
        break;
      ++v5;
      v6 = **a2;
      v9 += 16;
      if (v5 >= ((*a2)[1] - v6) >> 4)
        goto LABEL_9;
    }
  }
  *(_QWORD *)(a3 + 5) = 0;
  *(_QWORD *)a3 = 0;
  return result;
}

uint64_t std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5,std::allocator<turi::unity_sframe::drop_missing_values(std::vector<std::string> const&,BOOL,BOOL,BOOL)::$_5>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

uint64_t std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D9359D8;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D9359D8;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x219A19A08);
}

char *std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_24D9359D8;
  std::__compressed_pair_elem<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1 const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_2182952F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_24D9359D8;
  return std::__compressed_pair_elem<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1 const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  turi::sframe_reader *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  unint64_t *p_shared_owners;
  std::string::size_type size;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  _QWORD *v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  unsigned int v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  unsigned int v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  std::locale::__imp *locale;
  std::locale::__imp *v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unsigned __int16 *v116;
  int v117;
  uint64_t v118;
  int v120;
  int v121;
  int v124;
  int v125;
  int v127;
  int v128;
  uint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  turi::unity_sframe **v142;
  void *v143[2];
  char v144;
  std::locale v145;
  std::locale::__imp *v146;
  uint64_t v147;
  void *__p[2];
  unsigned __int8 v149;
  std::string v150;
  std::string __str;
  turi::sframe *v152;
  std::__shared_weak_count *v153;
  void *v154[2];
  char v155;
  _QWORD v156[2];
  _QWORD v157[11];
  char v158;
  uint64_t v159;
  void **v160;
  _BYTE v161[13];
  _BYTE v162[376];
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  turi::visualization::process_wrapper::process_wrapper(v162, a1 + 8);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v156);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)"{\"table_spec\":", 14);
  std::string::basic_string[abi:ne180100]<0>(v154, "");
  v142 = (turi::unity_sframe **)(a1 + 32);
  turi::visualization::table_spec((turi::visualization::WebServer *)(a1 + 32), (__int128 *)(a1 + 48), (uint64_t)v154);
  if ((v149 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v149 & 0x80u) == 0)
    v4 = v149;
  else
    v4 = (uint64_t)__p[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(&v145, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v145);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v149 < 0)
    operator delete(__p[0]);
  if (v155 < 0)
    operator delete(v154[0]);
  std::stringbuf::str();
  turi::visualization::process_wrapper::operator<<((uint64_t)v162, (__int128 *)__p);
  if ((char)v149 < 0)
    operator delete(__p[0]);
  turi::unity_sframe::get_underlying_sframe(*v142, &v152);
  turi::sframe::get_reader(v152, (turi::sframe_reader **)__p);
  v8 = (turi::sframe_reader *)__p[0];
  v9 = (std::__shared_weak_count *)operator new();
  v10 = (std::__shared_weak_count_vtbl *)__p[0];
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91EBA0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = v10;
  v141 = v9;
  turi::visualization::table_data((uint64_t)v142, v8, 0, 100);
  turi::visualization::process_wrapper::operator<<((uint64_t)v162, (__int128 *)__p);
  if ((char)v149 < 0)
    operator delete(__p[0]);
  while ((turi::visualization::process_wrapper::good((turi::visualization::process_wrapper *)v162) & 1) != 0)
  {
    memset(&__str, 0, sizeof(__str));
    turi::visualization::process_wrapper::operator>>((uint64_t)v162, (uint64_t)&__str);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (!size)
    {
      __p[0] = (void *)100000000;
      std::this_thread::sleep_for ((const std::chrono::nanoseconds *)__p);
      goto LABEL_218;
    }
    memset(&v150, 0, sizeof(v150));
    *(_QWORD *)&v161[5] = 0x200000000000000;
    *(_QWORD *)v161 = 0;
    v13 = (_QWORD *)operator new();
    v14 = v13;
    *v13 = 0;
    v13[1] = 0;
    v15 = (void **)(v13 + 1);
    v13[2] = 0;
    v13[3] = 0;
    *(_QWORD *)v161 = v13;
    *v13 = 1;
    switch(v161[12])
    {
      case 2:
        if (*v13 != 1)
        {
          v16 = (_QWORD *)operator new();
          v17 = *(_QWORD *)v161;
          *v16 = **(_QWORD **)v161;
          v18 = (std::string *)(v16 + 1);
          if (*(char *)(v17 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)(v17 + 8), *(_QWORD *)(v17 + 16));
          }
          else
          {
            v19 = *(_OWORD *)(v17 + 8);
            v16[3] = *(_QWORD *)(v17 + 24);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          }
          *(_QWORD *)v161 = v16;
          *v16 = 1;
          do
          {
            v50 = __ldaxr(v14);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v14));
          if (!v51)
          {
            v36 = 0x1012C404EF22A49;
            if (*((char *)v14 + 31) < 0)
            {
              operator delete(*v15);
              v36 = 0x1012C404EF22A49;
            }
            goto LABEL_65;
          }
        }
        break;
      case 3:
        if (*v13 != 1)
        {
          v31 = (_QWORD *)operator new();
          v32 = *(_QWORD *)v161;
          *v31 = **(_QWORD **)v161;
          v31[2] = 0;
          v31[3] = 0;
          v31[1] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v31 + 1, *(const void **)(v32 + 8), *(_QWORD *)(v32 + 16), (uint64_t)(*(_QWORD *)(v32 + 16) - *(_QWORD *)(v32 + 8)) >> 3);
          *(_QWORD *)v161 = v31;
          *v31 = 1;
          do
          {
            v33 = __ldaxr(v14);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v14));
          if (!v34)
          {
            v35 = *v15;
            v36 = 0x1080C409938AC02;
            if (*v15)
            {
              v14[2] = v35;
              operator delete(v35);
              v36 = 0x1080C409938AC02;
            }
            goto LABEL_65;
          }
        }
        break;
      case 4:
        if (*v13 != 1)
        {
          v20 = (_QWORD *)operator new();
          v21 = *(_QWORD *)v161;
          *v20 = **(_QWORD **)v161;
          v20[2] = 0;
          v20[3] = 0;
          v20[1] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v20 + 1, *(uint64_t **)(v21 + 8), *(uint64_t **)(v21 + 16), (uint64_t)(*(_QWORD *)(v21 + 16) - *(_QWORD *)(v21 + 8)) >> 4);
          *(_QWORD *)v161 = v20;
          *v20 = 1;
          do
          {
            v22 = __ldaxr(v14);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v14));
          if (!v23)
          {
            v160 = v15;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v160);
            goto LABEL_49;
          }
        }
        break;
      case 5:
        if (*v13 != 1)
        {
          v37 = (_QWORD *)operator new();
          v38 = *(_QWORD *)v161;
          *v37 = **(_QWORD **)v161;
          v37[2] = 0;
          v37[3] = 0;
          v37[1] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v37 + 1, *(uint64_t **)(v38 + 8), *(uint64_t **)(v38 + 16), (uint64_t)(*(_QWORD *)(v38 + 16) - *(_QWORD *)(v38 + 8)) >> 5);
          *(_QWORD *)v161 = v37;
          *v37 = 1;
          do
          {
            v39 = __ldaxr(v14);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v14));
          if (!v40)
          {
            v160 = v15;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v160);
LABEL_49:
            v36 = 0x1020C405E66F15BLL;
            goto LABEL_65;
          }
        }
        break;
      case 8:
        if (*v13 != 1)
        {
          v41 = operator new();
          v42 = *(_QWORD *)v161;
          *(_QWORD *)v41 = **(_QWORD **)v161;
          *(_QWORD *)(v41 + 8) = *(_QWORD *)(v42 + 8);
          v43 = *(_QWORD *)(v42 + 16);
          *(_QWORD *)(v41 + 16) = v43;
          if (v43)
          {
            v44 = (unsigned int *)(v43 + 8);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v46 = *(_OWORD *)(v42 + 24);
          v47 = *(_OWORD *)(v42 + 40);
          *(_OWORD *)(v41 + 56) = *(_OWORD *)(v42 + 56);
          *(_OWORD *)(v41 + 40) = v47;
          *(_OWORD *)(v41 + 24) = v46;
          *(_QWORD *)v161 = v41;
          *(_QWORD *)v41 = 1;
          do
          {
            v48 = __ldaxr(v14);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v14));
          if (!v49)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v14 + 2);
            v30 = -235920773;
            goto LABEL_58;
          }
        }
        break;
      case 9:
        if (*v13 != 1)
        {
          v24 = (_QWORD *)operator new();
          v25 = *(_QWORD *)v161 + 8;
          *v24 = **(_QWORD **)v161;
          turi::flexible_type_impl::ndarray<double>::ndarray(v24 + 1, v25);
          *(_QWORD *)v161 = v24;
          *v24 = 1;
          do
          {
            v26 = __ldaxr(v14);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v14));
          if (!v27)
          {
            v28 = (void *)v14[6];
            if (v28)
            {
              v14[7] = v28;
              operator delete(v28);
            }
            v29 = (void *)v14[3];
            if (v29)
            {
              v14[4] = v29;
              operator delete(v29);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v15);
            v30 = 2071181815;
LABEL_58:
            v36 = v30 | 0x1030C4000000000;
LABEL_65:
            MEMORY[0x219A19A08](v14, v36);
          }
        }
        break;
      default:
        break;
    }
    std::string::operator=((std::string *)(*(_QWORD *)v161 + 8), &__str);
    std::vector<turi::flexible_type>::vector(v143, 1uLL, (uint64_t *)v161);
    turi::gl_sarray::gl_sarray(&v145, v143, 7);
    turi::gl_sarray::astype((uint64_t)&v145, 5, 1, (uint64_t)__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v145);
    v160 = v143;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v160);
    switch(v161[12])
    {
      case 2:
        v52 = *(unint64_t **)v161;
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          v55 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            if (*(char *)(*(_QWORD *)v161 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)v161 + 8));
            v56 = v55;
            v57 = 0x1012C404EF22A49;
            goto LABEL_107;
          }
        }
        break;
      case 3:
        v69 = *(unint64_t **)v161;
        do
        {
          v70 = __ldaxr(v69);
          v71 = v70 - 1;
        }
        while (__stlxr(v71, v69));
        if (!v71)
        {
          v72 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            v73 = *(void **)(*(_QWORD *)v161 + 8);
            if (v73)
            {
              *(_QWORD *)(*(_QWORD *)v161 + 16) = v73;
              operator delete(v73);
            }
            v56 = v72;
            v57 = 0x1080C409938AC02;
            goto LABEL_107;
          }
        }
        break;
      case 4:
        v58 = *(unint64_t **)v161;
        do
        {
          v59 = __ldaxr(v58);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v58));
        if (!v60)
        {
          v61 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            v160 = (void **)(*(_QWORD *)v161 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v160);
            goto LABEL_100;
          }
        }
        break;
      case 5:
        v74 = *(unint64_t **)v161;
        do
        {
          v75 = __ldaxr(v74);
          v76 = v75 - 1;
        }
        while (__stlxr(v76, v74));
        if (!v76)
        {
          v61 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            v160 = (void **)(*(_QWORD *)v161 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v160);
LABEL_100:
            v56 = v61;
            v57 = 0x1020C405E66F15BLL;
            goto LABEL_107;
          }
        }
        break;
      case 8:
        v77 = *(unint64_t **)v161;
        do
        {
          v78 = __ldaxr(v77);
          v79 = v78 - 1;
        }
        while (__stlxr(v79, v77));
        if (!v79)
        {
          v80 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v161 + 16));
            v56 = v80;
            v68 = -235920773;
            goto LABEL_106;
          }
        }
        break;
      case 9:
        v62 = *(unint64_t **)v161;
        do
        {
          v63 = __ldaxr(v62);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v62));
        if (!v64)
        {
          v65 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            v66 = *(void **)(*(_QWORD *)v161 + 48);
            if (v66)
            {
              *(_QWORD *)(*(_QWORD *)v161 + 56) = v66;
              operator delete(v66);
            }
            v67 = *(void **)(v65 + 24);
            if (v67)
            {
              *(_QWORD *)(v65 + 32) = v67;
              operator delete(v67);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v65 + 8);
            v56 = v65;
            v68 = 2071181815;
LABEL_106:
            v57 = v68 | 0x1030C4000000000;
LABEL_107:
            MEMORY[0x219A19A08](v56, v57);
          }
        }
        break;
      default:
        break;
    }
    turi::gl_sarray::operator[]((_QWORD **)__p, 0, (uint64_t)v161);
    v146 = 0;
    v147 = 0;
    v145.__locale_ = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v145, *(uint64_t **)(*(_QWORD *)v161 + 8), *(uint64_t **)(*(_QWORD *)v161 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)v161 + 16) - *(_QWORD *)(*(_QWORD *)v161 + 8)) >> 5);
    switch(v161[12])
    {
      case 2:
        v81 = *(unint64_t **)v161;
        do
        {
          v82 = __ldaxr(v81);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, v81));
        if (!v83)
        {
          v84 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            if (*(char *)(*(_QWORD *)v161 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)v161 + 8));
            v85 = v84;
            v86 = 0x1012C404EF22A49;
            goto LABEL_149;
          }
        }
        break;
      case 3:
        v98 = *(unint64_t **)v161;
        do
        {
          v99 = __ldaxr(v98);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, v98));
        if (!v100)
        {
          v101 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            v102 = *(void **)(*(_QWORD *)v161 + 8);
            if (v102)
            {
              *(_QWORD *)(*(_QWORD *)v161 + 16) = v102;
              operator delete(v102);
            }
            v85 = v101;
            v86 = 0x1080C409938AC02;
            goto LABEL_149;
          }
        }
        break;
      case 4:
        v87 = *(unint64_t **)v161;
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          v90 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            v143[0] = (void *)(*(_QWORD *)v161 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
            goto LABEL_142;
          }
        }
        break;
      case 5:
        v103 = *(unint64_t **)v161;
        do
        {
          v104 = __ldaxr(v103);
          v105 = v104 - 1;
        }
        while (__stlxr(v105, v103));
        if (!v105)
        {
          v90 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            v143[0] = (void *)(*(_QWORD *)v161 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
LABEL_142:
            v85 = v90;
            v86 = 0x1020C405E66F15BLL;
            goto LABEL_149;
          }
        }
        break;
      case 8:
        v106 = *(unint64_t **)v161;
        do
        {
          v107 = __ldaxr(v106);
          v108 = v107 - 1;
        }
        while (__stlxr(v108, v106));
        if (!v108)
        {
          v109 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v161 + 16));
            v85 = v109;
            v97 = -235920773;
            goto LABEL_148;
          }
        }
        break;
      case 9:
        v91 = *(unint64_t **)v161;
        do
        {
          v92 = __ldaxr(v91);
          v93 = v92 - 1;
        }
        while (__stlxr(v93, v91));
        if (!v93)
        {
          v94 = *(_QWORD *)v161;
          if (*(_QWORD *)v161)
          {
            v95 = *(void **)(*(_QWORD *)v161 + 48);
            if (v95)
            {
              *(_QWORD *)(*(_QWORD *)v161 + 56) = v95;
              operator delete(v95);
            }
            v96 = *(void **)(v94 + 24);
            if (v96)
            {
              *(_QWORD *)(v94 + 32) = v96;
              operator delete(v96);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v94 + 8);
            v85 = v94;
            v97 = 2071181815;
LABEL_148:
            v86 = v97 | 0x1030C4000000000;
LABEL_149:
            MEMORY[0x219A19A08](v85, v86);
          }
        }
        break;
      default:
        break;
    }
    locale = v145.__locale_;
    v111 = v146;
    if (v145.__locale_ == v146)
      goto LABEL_231;
    v112 = 0;
    v113 = -1;
    v114 = -1;
    v115 = -1;
    do
    {
      v116 = (unsigned __int16 *)(*(_QWORD *)locale + 8);
      if (*(char *)(*(_QWORD *)locale + 31) < 0)
      {
        v118 = *(_QWORD *)(*(_QWORD *)locale + 16);
        if (v118 == 3)
        {
          v116 = *(unsigned __int16 **)v116;
LABEL_184:
          v127 = *v116;
          v128 = *((unsigned __int8 *)v116 + 2);
          if (v127 == 28261 && v128 == 100)
            v115 = *((_QWORD *)locale + 2);
          goto LABEL_209;
        }
        if (v118 == 5)
        {
          v116 = *(unsigned __int16 **)v116;
LABEL_172:
          if (*(_DWORD *)v116 == 1918989427 && *((_BYTE *)v116 + 4) == 116)
          {
            v113 = *((_QWORD *)locale + 2);
          }
          else
          {
            v124 = *(_DWORD *)v116;
            v125 = *((unsigned __int8 *)v116 + 4);
            if (v124 == 1701080681 && v125 == 120)
              v114 = *((_QWORD *)locale + 2);
          }
          goto LABEL_209;
        }
        if (v118 != 6)
          goto LABEL_209;
        v116 = *(unsigned __int16 **)v116;
      }
      else
      {
        v117 = *(unsigned __int8 *)(*(_QWORD *)locale + 31);
        if (v117 == 3)
          goto LABEL_184;
        if (v117 == 5)
          goto LABEL_172;
        if (v117 != 6)
          goto LABEL_209;
      }
      if (*(_DWORD *)v116 != 1752458605 || v116[2] != 25711)
      {
        v120 = *(_DWORD *)v116;
        v121 = v116[2];
        if (v120 == 1970040675 && v121 == 28269)
          std::string::operator=(&v150, (const std::string *)(*((_QWORD *)locale + 2) + 8));
        goto LABEL_209;
      }
      v130 = *((_QWORD *)locale + 2);
      v131 = (unint64_t *)(v130 + 8);
      if (*(char *)(v130 + 31) < 0)
      {
        v132 = *(_QWORD *)(v130 + 16);
        if (v132 != 8)
        {
          if (v132 != 13)
            goto LABEL_209;
          v131 = (unint64_t *)*v131;
LABEL_197:
          v133 = bswap64(*v131);
          v134 = 0x6765745F6163636FLL;
          if (v133 == 0x6765745F6163636FLL
            && (v133 = bswap64(*(unint64_t *)((char *)v131 + 5)),
                v134 = 0x63636F7264696F6ELL,
                v133 == 0x63636F7264696F6ELL))
          {
            v135 = 0;
          }
          else if (v133 < v134)
          {
            v135 = -1;
          }
          else
          {
            v135 = 1;
          }
          if (!v135)
            v112 = 2;
          goto LABEL_209;
        }
        v131 = (unint64_t *)*v131;
      }
      else if (*(_BYTE *)(v130 + 31) != 8)
      {
        if (*(_BYTE *)(v130 + 31) != 13)
          goto LABEL_209;
        goto LABEL_197;
      }
      if (*v131 == 0x73776F725F746567)
        v112 = 1;
LABEL_209:
      locale = (std::locale::__imp *)((char *)locale + 32);
    }
    while (locale != v111);
    if (v112 != 1)
    {
      if (v112 == 2)
      {
        turi::visualization::table_accordion(v142, (unsigned __int8 **)&v150, v114);
        turi::visualization::process_wrapper::operator<<((uint64_t)v162, (__int128 *)v143);
        goto LABEL_214;
      }
LABEL_231:
      turi::unity_sframe::explore(std::string const&,std::string const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
    }
    turi::visualization::table_data((uint64_t)v142, v8, v113, v115);
    turi::visualization::process_wrapper::operator<<((uint64_t)v162, (__int128 *)v143);
LABEL_214:
    if (v144 < 0)
      operator delete(v143[0]);
    v143[0] = &v145;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__p);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
LABEL_218:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  do
    v136 = __ldaxr(p_shared_owners);
  while (__stlxr(v136 - 1, p_shared_owners));
  if (!v136)
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
  }
  v137 = v153;
  if (v153)
  {
    v138 = (unint64_t *)&v153->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v156[0] = *MEMORY[0x24BEDB7F0];
  v140 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v156 + *(_QWORD *)(v156[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v157[0] = v140;
  v157[1] = MEMORY[0x24BEDB848] + 16;
  if (v158 < 0)
    operator delete((void *)v157[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v159);
  turi::visualization::process_wrapper::~process_wrapper((turi::visualization::process_wrapper *)v162);
}

void sub_2182961B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  unint64_t *v64;
  unint64_t v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  _QWORD *v84;
  unsigned int v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;

  MEMORY[0x219A19A08](v63, 0x1012C404EF22A49);
  switch(LOBYTE(STACK[0x214]))
  {
    case 2:
      v70 = (unint64_t *)STACK[0x208];
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        v73 = STACK[0x208];
        if (STACK[0x208])
        {
          if (*(char *)(v73 + 31) < 0)
            operator delete(*(void **)(v73 + 8));
          MEMORY[0x219A19A08](v73, 0x1012C404EF22A49);
        }
      }
      goto LABEL_2;
    case 3:
      v86 = (unint64_t *)STACK[0x208];
      do
      {
        v87 = __ldaxr(v86);
        v88 = v87 - 1;
      }
      while (__stlxr(v88, v86));
      if (v88)
        goto LABEL_2;
      v89 = STACK[0x208];
      if (!STACK[0x208])
        goto LABEL_59;
      v90 = *(void **)(v89 + 8);
      if (v90)
      {
        *(_QWORD *)(v89 + 16) = v90;
        operator delete(v90);
      }
      v84 = (_QWORD *)v89;
      v91 = 0x1080C409938AC02;
      goto LABEL_58;
    case 4:
      v74 = (unint64_t *)STACK[0x208];
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (v76)
        goto LABEL_2;
      v77 = STACK[0x208];
      if (!STACK[0x208])
        goto LABEL_59;
      STACK[0x200] = v77 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
      goto LABEL_51;
    case 5:
      v92 = (unint64_t *)STACK[0x208];
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (v94)
        goto LABEL_2;
      v77 = STACK[0x208];
      if (!STACK[0x208])
        goto LABEL_59;
      STACK[0x200] = v77 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
LABEL_51:
      v84 = (_QWORD *)v77;
      v91 = 0x1020C405E66F15BLL;
      goto LABEL_58;
    case 8:
      v95 = (unint64_t *)STACK[0x208];
      do
      {
        v96 = __ldaxr(v95);
        v97 = v96 - 1;
      }
      while (__stlxr(v97, v95));
      if (v97)
        goto LABEL_2;
      v98 = STACK[0x208];
      if (!STACK[0x208])
        goto LABEL_59;
      boost::detail::shared_count::~shared_count((unsigned int **)(v98 + 16));
      v84 = (_QWORD *)v98;
      v85 = -235920773;
      goto LABEL_57;
    case 9:
      v78 = (unint64_t *)STACK[0x208];
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (v80)
        goto LABEL_2;
      v81 = (_QWORD *)STACK[0x208];
      if (!STACK[0x208])
        goto LABEL_59;
      v82 = (void *)v81[6];
      if (v82)
      {
        v81[7] = v82;
        operator delete(v82);
      }
      v83 = (void *)v81[3];
      if (v83)
      {
        v81[4] = v83;
        operator delete(v83);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v81 + 1));
      v84 = v81;
      v85 = 2071181815;
LABEL_57:
      v91 = v85 | 0x1030C4000000000;
LABEL_58:
      MEMORY[0x219A19A08](v84, v91);
LABEL_59:
      STACK[0x208] = 0;
LABEL_2:
      if (a32 < 0)
        operator delete(__p);
      if (a38 < 0)
        operator delete(a33);
      do
        v66 = __ldaxr(v64);
      while (__stlxr(v66 - 1, v64));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
        std::__shared_weak_count::__release_weak(a10);
      }
      if (a40)
      {
        p_shared_owners = (unint64_t *)&a40->__shared_owners_;
        do
          v68 = __ldaxr(p_shared_owners);
        while (__stlxr(v68 - 1, p_shared_owners));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
          std::__shared_weak_count::__release_weak(a40);
        }
      }
      a44 = *MEMORY[0x24BEDB7F0];
      v69 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(uint64_t *)((char *)&a44 + *(_QWORD *)(a44 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      a46 = v69;
      a47 = MEMORY[0x24BEDB848] + 16;
      if (a60 < 0)
        operator delete(a55);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&a63);
      turi::visualization::process_wrapper::~process_wrapper((turi::visualization::process_wrapper *)&STACK[0x218]);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_2;
  }
}

uint64_t std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::target_type()
{
}

std::string *std::__compressed_pair_elem<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1 const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_2182969D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void std::__function::__alloc_func<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1,std::allocator<turi::unity_sframe::explore(std::string const&,std::string const&)::$_1>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *OUTLINED_FUNCTION_72_0(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t **v10;

  return std::to_string((std::string *)&a10, **v10);
}

uint64_t OUTLINED_FUNCTION_74_0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

size_t OUTLINED_FUNCTION_78()
{
  const char *v0;

  return strlen(v0);
}

_QWORD *OUTLINED_FUNCTION_81_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v3, a3);
}

void OUTLINED_FUNCTION_85_0()
{
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

void __cxx_global_var_init_132_0()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t *__cxx_global_var_init_133()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_134()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_135()
{
  uint64_t *result;

  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_136()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_137()
{
  uint64_t *result;

  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_138()
{
  uint64_t *result;

  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_unity_sframe_cpp()
{
  uint64_t i;
  uint64_t result;
  const void *v2[3];
  _QWORD v3[4];

  v3[3] = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0)
      operator delete((void *)v2[i + 3]);
  }
  result = __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_217E69000);
  boost::spirit::lit = 0;
  boost::spirit::bin = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::stream = 0;
  boost::spirit::wstream = 0;
  boost::spirit::left_align = 0;
  boost::spirit::right_align = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::token = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_token = 0;
  boost::spirit::tokenid_mask = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  parser_impl::restricted_string = 0;
  return result;
}

void sub_218296F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0)
      operator delete(*(void **)(v15 + v17 + 24));
    v17 -= 24;
    if (v17 == -48)
      _Unwind_Resume(exception_object);
  }
}

void sub_2182970F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_6_4()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_sframe_builder_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::unity_sgraph::get_dag(turi::unity_sgraph *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (turi::unity_sgraph::dag_singleton)
    return turi::unity_sgraph::dag_singleton;
  v1 = operator new();
  v10 = v9;
  v7[0] = &off_24D935E40;
  v8 = v7;
  v9[0] = &off_24D935DB0;
  turi::lazy_eval_operation_dag<turi::sgraph>::lazy_eval_operation_dag(v1, (uint64_t)v9, (uint64_t)v7);
  turi::unity_sgraph::dag_singleton = v1;
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
    goto LABEL_6;
  }
  if (v8)
  {
    v3 = 5;
LABEL_6:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  v4 = v10;
  if (v10 == v9)
  {
    v5 = 4;
    v4 = v9;
    goto LABEL_11;
  }
  if (v10)
  {
    v5 = 5;
LABEL_11:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return turi::unity_sgraph::dag_singleton;
}

void sub_218297380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  va_list v4;
  va_list v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, va_list);
  v6 = v12;
  if (v12 == v4)
  {
    v7 = 4;
    va_copy(v6, va);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_6:
  turi::unity_sgraph::get_dag(v3, (uint64_t *)va1);
  MEMORY[0x219A19A08](v2, 0x10A0C40A3EE9154);
  _Unwind_Resume(a1);
}

turi::unity_sgraph *turi::unity_sgraph::unity_sgraph(turi::unity_sgraph *this, unint64_t a2)
{
  _QWORD *v4;
  int v5;
  turi::unity_sgraph *v6;
  _QWORD *dag;
  turi::sgraph *v8;
  _QWORD *v9;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24D935AA8;
  *((_QWORD *)this + 3) = 0;
  v4 = (_QWORD *)((char *)this + 24);
  *((_QWORD *)this + 4) = 0;
  v5 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 40), 0);
  assert_msg(v5 == 0, "Mutex create error %d", v5);
  v6 = (turi::unity_sgraph *)pthread_mutex_lock(&turi::dag_access_mutex);
  dag = (_QWORD *)turi::unity_sgraph::get_dag(v6);
  v8 = (turi::sgraph *)operator new();
  turi::sgraph::sgraph(v8, a2);
  v9 = turi::lazy_eval_operation_dag<turi::sgraph>::add_value(dag, (uint64_t)v8);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>(v4, (uint64_t)v9);
  pthread_mutex_unlock(&turi::dag_access_mutex);
  return this;
}

void sub_2182974C8(_Unwind_Exception *a1)
{
  cppipc::ipc_object_base *v1;
  uint64_t v2;
  pthread_mutex_t *v3;
  uint64_t v4;

  MEMORY[0x219A19A08](v4, 0x1020C40CF206F44);
  pthread_mutex_unlock(&turi::dag_access_mutex);
  turi::mutex::~mutex(v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  cppipc::ipc_object_base::~ipc_object_base(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::shared_ptr[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *turi::lazy_eval_operation_dag<turi::sgraph>::add_value(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  std::shared_ptr<turi::sgraph>::shared_ptr[abi:ne180100]<turi::sgraph,void>(&v8, a2);
  v3 = turi::lazy_eval_operation_dag<turi::sgraph>::add_value(a1, &v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_218297614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::unity_sgraph(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  int v5;
  turi::unity_sgraph *v6;
  _QWORD *dag;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24D935AA8;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  v5 = pthread_mutex_init((pthread_mutex_t *)(a1 + 40), 0);
  assert_msg(v5 == 0, "Mutex create error %d", v5);
  v6 = (turi::unity_sgraph *)pthread_mutex_lock(&turi::dag_access_mutex);
  dag = (_QWORD *)turi::unity_sgraph::get_dag(v6);
  v8 = a2[1];
  v16 = *a2;
  v17 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = turi::lazy_eval_operation_dag<turi::sgraph>::add_value(dag, &v16);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>(v4, (uint64_t)v11);
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  pthread_mutex_unlock(&turi::dag_access_mutex);
  return a1;
}

void sub_218297734(_Unwind_Exception *a1)
{
  cppipc::ipc_object_base *v1;
  uint64_t v2;
  pthread_mutex_t *v3;

  pthread_mutex_unlock(&turi::dag_access_mutex);
  turi::mutex::~mutex(v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  cppipc::ipc_object_base::~ipc_object_base(v1);
  _Unwind_Resume(a1);
}

_QWORD *turi::lazy_eval_operation_dag<turi::sgraph>::add_value(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  _QWORD *v13;

  v4 = operator new();
  v5 = *a1;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 73) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 96) = v5;
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v4 + 16), a2);
  v7 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(v4 + 8);
  *(_QWORD *)v4 = v7;
  *(_QWORD *)(v4 + 8) = v6;
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  v13 = a1;
  std::__hash_table<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(a1 + 1), a1, (uint64_t)&std::piecewise_construct, &v13)[3] = v4;
  v11 = (_QWORD *)operator new();
  turi::lazy_eval_future<turi::sgraph>::lazy_eval_future(v11, (uint64_t)a1, *a1);
  ++*a1;
  return v11;
}

void sub_218297884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C404161829ELL);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::~unity_sgraph(turi::unity_sgraph *this)
{
  char *v2;

  *(_QWORD *)this = &off_24D935AA8;
  v2 = (char *)this + 24;
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 40));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  cppipc::ipc_object_base::~ipc_object_base(this);
}

{
  turi::unity_sgraph::~unity_sgraph(this);
  JUMPOUT(0x219A19A08);
}

double turi::unity_sgraph::clone@<D0>(turi::unity_sgraph *this@<X0>, _OWORD *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  double result;
  _QWORD *exception;
  __int128 v12;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "clone", 62, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet((const std::locale *)&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale((std::locale *)&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  std::allocate_shared[abi:ne180100]<turi::unity_sgraph,std::allocator<turi::unity_sgraph>,turi::unity_sgraph&,void>(this, &v12);
  result = *(double *)&v12;
  *a2 = v12;
  return result;
}

void sub_218297A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

double turi::unity_sgraph::get_vertices@<D0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, _QWORD *a3@<X2>, unint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  turi::unity_sframe *v10;
  uint64_t v11;
  uint64_t v12;
  turi::sgraph *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  double result;
  const turi::sframe *v18;
  std::__shared_weak_count *v19;
  double v20[3];
  _BYTE v21[296];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v10);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)v20, (uint64_t)v10);
  v11 = *(_QWORD *)&v20[0];
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(turi::sgraph **)(v12 + 16);
  if (!v13)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v12);
    v13 = *(turi::sgraph **)(v12 + 16);
  }
  turi::sgraph::get_vertices(v13, a2, a3, a4, (turi::sframe *)v21);
  std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe,void>((uint64_t)v21, &v18);
  turi::unity_sframe::set_sframe(v11, &v18);
  v14 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v21);
  result = v20[0];
  *a5 = *(_OWORD *)v20;
  return result;
}

void sub_218297BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  turi::sframe::~sframe((turi::sframe *)&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

double turi::unity_sgraph::get_edges@<D0>(turi::unity_sgraph *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, void **a5@<X4>, unint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  double result;
  turi::unity_sframe *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  const turi::sframe *v22;
  std::__shared_weak_count *v23;
  double v24[3];
  _BYTE v25[296];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (((uint64_t)(a3[1] - *a3) >> 4) + ((a2[1] - *a2) >> 4) + a4[2])
  {
    v15 = (turi::unity_sframe *)operator new();
    turi::unity_sframe::unity_sframe(v15);
    std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)v24, (uint64_t)v15);
    v16 = *(_QWORD *)&v24[0];
    v17 = *((_QWORD *)a1 + 3);
    v18 = *(unint64_t **)(v17 + 16);
    if (!v18)
    {
      turi::lazy_eval_future<turi::sgraph>::make_eager(v17);
      v18 = *(unint64_t **)(v17 + 16);
    }
    turi::sgraph::get_edges(v18, a2, a3, a4, a5, a6, (turi::sframe *)v25);
    std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe,void>((uint64_t)v25, &v22);
    turi::unity_sframe::set_sframe(v16, &v22);
    v19 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    turi::sframe::~sframe((turi::sframe *)v25);
    result = v24[0];
    *(_OWORD *)a7 = *(_OWORD *)v24;
  }
  else
  {
    turi::unity_sgraph::get_edges_lazy(a1, (std::string::size_type)a5, (std::string::size_type)a6, a7);
  }
  return result;
}

void sub_218297DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  turi::sframe::~sframe((turi::sframe *)&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::get_edges_lazy(turi::unity_sgraph *this@<X0>, std::string::size_type a2@<X1>, std::string::size_type a3@<X2>, _QWORD *a4@<X8>)
{
  turi::unity_sframe *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string::size_type v22;
  uint64_t v23;
  _QWORD *size;
  _QWORD *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _OWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  _OWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  std::string::size_type v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  _OWORD *v84;
  uint64_t v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  _OWORD *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  std::string::size_type v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::string::size_type v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  __int128 v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  _OWORD *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  __int128 *v152;
  _QWORD *v153;
  _QWORD *v154;
  char *v155;
  __int128 v156;
  int64x2_t v157;
  char *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  std::string::size_type v184;
  char v185;
  uint64_t *v186;
  std::string::size_type v187;
  std::string::size_type v188;
  uint64_t v189;
  __int128 v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  int64x2_t v209;
  char *v210;
  std::string v211;
  void *v212;
  void *v213;
  std::string v214;
  turi::unity_sframe *v215[2];
  __int128 *v216;
  _QWORD v217[3];
  _QWORD *v218;
  _QWORD v219[3];
  _QWORD *v220;
  std::string __p;
  char *v222;
  char **v223;
  uint64_t v224;

  v224 = *MEMORY[0x24BDAC8D0];
  v8 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v8);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)v215, (uint64_t)v8);
  v9 = *((_QWORD *)this + 3);
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(*((_QWORD *)this + 3));
    v10 = *(_QWORD *)(v9 + 16);
  }
  v214.__r_.__value_.__r.__words[0] = a2;
  v11 = *(void **)(v10 + 32);
  v212 = v11;
  if ((unint64_t)v11 <= a2)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v212;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  v214.__r_.__value_.__r.__words[0] = a3;
  v212 = v11;
  if ((unint64_t)v11 <= a3)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v212;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  __p.__r_.__value_.__r.__words[0] = a2;
  __p.__r_.__value_.__l.__size_ = a3;
  v12 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(v10 + 88, (unint64_t *)&__p);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == v14)
    goto LABEL_246;
  v15 = 0;
  do
  {
    if (*(_BYTE *)(v13 + 288))
      v16 = *(_QWORD *)(v13 + 32);
    else
      v16 = 0;
    v15 += v16;
    v13 += 296;
  }
  while (v13 != v14);
  if (!v15)
  {
LABEL_246:
    turi::sframe::sframe((turi::sframe *)&__p);
    (*(void (**)(std::string *__return_ptr, turi::unity_sgraph *, _QWORD, _QWORD))(*(_QWORD *)this + 48))(&v214, this, 0, 0);
    (*(void (**)(void **__return_ptr, turi::unity_sgraph *, _QWORD, _QWORD))(*(_QWORD *)this + 64))(&v212, this, 0, 0);
    std::string::basic_string[abi:ne180100]<0>(&v211, "");
    turi::sframe::open_for_write((uint64_t)&__p, &v214, &v212, &v211, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
    if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v211.__r_.__value_.__l.__data_);
    if (v212)
    {
      v213 = v212;
      operator delete(v212);
    }
    v212 = &v214;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
    turi::sframe::close((turi::sframe *)&__p);
    turi::unity_sframe::construct_from_sframe(v215[0], (const turi::sframe *)&__p);
    *(_OWORD *)a4 = *(_OWORD *)v215;
    v215[0] = 0;
    v215[1] = 0;
    turi::sframe::~sframe((turi::sframe *)&__p);
  }
  else
  {
    v214.__r_.__value_.__r.__words[0] = a2;
    v18 = *(_QWORD *)(v10 + 24);
    v17 = *(void **)(v10 + 32);
    v212 = v17;
    if ((unint64_t)v17 <= a2)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v212;
      turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
    }
    v214.__r_.__value_.__r.__words[0] = a3;
    v212 = v17;
    if ((unint64_t)v17 <= a3)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v212;
      turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
    }
    __p.__r_.__value_.__r.__words[0] = a2;
    __p.__r_.__value_.__l.__size_ = a3;
    v186 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(v10 + 88, (unint64_t *)&__p);
    v214.__r_.__value_.__r.__words[0] = a2;
    v19 = *(void **)(v10 + 32);
    v212 = v19;
    if ((unint64_t)v19 <= a2)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v212;
      turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
    }
    v20 = *(_QWORD *)(v10 + 64);
    v214.__r_.__value_.__r.__words[0] = a3;
    v212 = v19;
    if ((unint64_t)v19 <= a3)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v212;
      turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
    }
    turi::sgraph::get_edge_fields((turi::sgraph *)v10, 0, 0, &v214);
    turi::sgraph::get_edge_field_types((turi::sgraph *)v10, 0, 0, (uint64_t *)&v212);
    v185 = *(_BYTE *)(v10 + 56);
    *(_OWORD *)&v211.__r_.__value_.__r.__words[1] = 0uLL;
    v210 = 0;
    v211.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211.__r_.__value_.__l.__size_;
    v209 = 0uLL;
    if (v18)
    {
      v180 = a4;
      v21 = 0;
      v181 = (uint64_t *)(v20 + 24 * a3);
      v182 = (uint64_t *)(v20 + 24 * a2);
      v183 = v18;
      v184 = a3;
      while (1)
      {
        v22 = 0;
        v187 = v21;
        v188 = v21 * v18;
        do
        {
          v23 = *v186;
          size = (_QWORD *)v211.__r_.__value_.__l.__size_;
          if (v211.__r_.__value_.__l.__size_)
          {
            v25 = (_QWORD *)v211.__r_.__value_.__l.__size_;
            while (1)
            {
              v26 = v25[4];
              if (v26 <= a2)
              {
                if (v26 < a2)
                  goto LABEL_25;
                v27 = v25[5];
                if (v21 >= v27)
                  break;
              }
LABEL_26:
              v25 = (_QWORD *)*v25;
              if (!v25)
                goto LABEL_27;
            }
            if (v27 >= v21)
              goto LABEL_62;
LABEL_25:
            ++v25;
            goto LABEL_26;
          }
LABEL_27:
          v28 = *v182;
          std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME);
          turi::sframe::select_column(v28 + 296 * v21, (unsigned __int8 **)&__p, &v208);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
          turi::sarray<turi::flexible_type>::get_reader(v208, (uint64_t *)&v207);
          if (*(_BYTE *)(v208 + 248)
            && (v29 = *(uint64_t **)(v208 + 80), (v30 = *(_QWORD *)(v208 + 88) - (_QWORD)v29) != 0))
          {
            v31 = 0;
            v32 = v30 >> 3;
            if (v32 <= 1)
              v32 = 1;
            do
            {
              v33 = *v29++;
              v31 += v33;
              --v32;
            }
            while (v32);
          }
          else
          {
            v31 = 0;
          }
          (*(void (**)(_QWORD, _QWORD, uint64_t, std::string *))(*(_QWORD *)v207 + 48))(v207, 0, v31, &__p);
          v34 = v207;
          *(_QWORD *)&v207 = 0;
          if (v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>,std::vector<turi::flexible_type>&,void>((uint64_t **)&__p, &v207);
          v205 = v207;
          if (*((_QWORD *)&v207 + 1))
          {
            v35 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
          v206 = 0uLL;
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v206, (uint64_t *)&v205);
          *(_QWORD *)&v204 = a2;
          *((_QWORD *)&v204 + 1) = v21;
          v216 = &v204;
          v37 = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>((uint64_t **)&v211, (unint64_t *)&v204, (uint64_t)&std::piecewise_construct, &v216);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v37 + 3), &v206);
          v38 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
          if (*((_QWORD *)&v206 + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
          if (*((_QWORD *)&v205 + 1))
          {
            v42 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
          if (*((_QWORD *)&v207 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          *(_QWORD *)&v207 = &__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
          if (*((_QWORD *)&v208 + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          size = (_QWORD *)v211.__r_.__value_.__l.__size_;
LABEL_62:
          if (size)
          {
            while (1)
            {
              v50 = size[4];
              if (v50 <= a3)
              {
                if (v50 < a3)
                  goto LABEL_67;
                v51 = size[5];
                if (v22 >= v51)
                  break;
              }
LABEL_68:
              size = (_QWORD *)*size;
              if (!size)
                goto LABEL_69;
            }
            if (v51 >= v22)
              goto LABEL_103;
LABEL_67:
            ++size;
            goto LABEL_68;
          }
LABEL_69:
          v52 = *v181;
          std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME);
          turi::sframe::select_column(v52 + 296 * v22, (unsigned __int8 **)&__p, &v208);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
          turi::sarray<turi::flexible_type>::get_reader(v208, (uint64_t *)&v207);
          if (*(_BYTE *)(v208 + 248)
            && (v53 = *(uint64_t **)(v208 + 80), (v54 = *(_QWORD *)(v208 + 88) - (_QWORD)v53) != 0))
          {
            v55 = 0;
            v56 = v54 >> 3;
            if (v56 <= 1)
              v56 = 1;
            do
            {
              v57 = *v53++;
              v55 += v57;
              --v56;
            }
            while (v56);
          }
          else
          {
            v55 = 0;
          }
          (*(void (**)(_QWORD, _QWORD, uint64_t, std::string *))(*(_QWORD *)v207 + 48))(v207, 0, v55, &__p);
          v58 = v207;
          *(_QWORD *)&v207 = 0;
          if (v58)
            (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
          std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>,std::vector<turi::flexible_type>&,void>((uint64_t **)&__p, &v207);
          v203 = v207;
          if (*((_QWORD *)&v207 + 1))
          {
            v59 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          v206 = 0uLL;
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v206, (uint64_t *)&v203);
          *(_QWORD *)&v204 = a3;
          *((_QWORD *)&v204 + 1) = v22;
          v216 = &v204;
          v61 = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>((uint64_t **)&v211, (unint64_t *)&v204, (uint64_t)&std::piecewise_construct, &v216);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v61 + 3), &v206);
          v62 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
          if (*((_QWORD *)&v206 + 1))
          {
            v63 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          v65 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
          if (*((_QWORD *)&v203 + 1))
          {
            v66 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          v68 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
          if (*((_QWORD *)&v207 + 1))
          {
            v69 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          *(_QWORD *)&v207 = &__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          v71 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
          if (*((_QWORD *)&v208 + 1))
          {
            v72 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
LABEL_103:
          _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
          v74 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::SRC_COLUMN_NAME);
          v75 = v22 + v188;
          v76 = v23 + 296 * (v22 + v188);
          turi::sframe::select_column(v76, (unsigned __int8 **)&__p, &v202);
          turi::unity_sarray::construct_from_sarray(v74, (uint64_t *)&v202);
          v77 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
          if (*((_QWORD *)&v202 + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
          v80 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::DST_COLUMN_NAME);
          turi::sframe::select_column(v76, (unsigned __int8 **)&__p, &v201);
          turi::unity_sarray::construct_from_sarray(v80, (uint64_t *)&v201);
          v189 = v23;
          v81 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
          if (*((_QWORD *)&v201 + 1))
          {
            v82 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = a2;
          __p.__r_.__value_.__l.__size_ = v21;
          *(_QWORD *)&v207 = &__p;
          v84 = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>((uint64_t **)&v211, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v207);
          v85 = *((_QWORD *)v84 + 6);
          v191 = (std::__shared_weak_count *)*((_QWORD *)v84 + 7);
          if (v191)
          {
            p_shared_owners = (unint64_t *)&v191->__shared_owners_;
            do
              v87 = __ldxr(p_shared_owners);
            while (__stxr(v87 + 1, p_shared_owners));
          }
          __p.__r_.__value_.__r.__words[0] = a3;
          __p.__r_.__value_.__l.__size_ = v22;
          *(_QWORD *)&v207 = &__p;
          v88 = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>((uint64_t **)&v211, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v207);
          v89 = *((_QWORD *)v88 + 6);
          v192 = (std::__shared_weak_count *)*((_QWORD *)v88 + 7);
          if (v192)
          {
            v90 = (unint64_t *)&v192->__shared_owners_;
            do
              v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
          }
          if (v191)
          {
            v92 = (unint64_t *)&v191->__shared_owners_;
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          v219[0] = &off_24D936010;
          v219[1] = v85;
          v199 = 0;
          v200 = 0;
          v219[2] = v191;
          v220 = v219;
          turi::unity_sarray::transform_lambda(v74, (uint64_t)v219, v185, 0, 0, &v208);
          v94 = v220;
          if (v220 == v219)
          {
            v94 = v219;
            v95 = 4;
          }
          else
          {
            if (!v220)
              goto LABEL_131;
            v95 = 5;
          }
          (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_131:
          if (v192)
          {
            v96 = (unint64_t *)&v192->__shared_owners_;
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          v217[0] = &off_24D936090;
          v217[1] = v89;
          v197 = 0;
          v198 = 0;
          v217[2] = v192;
          v218 = v217;
          turi::unity_sarray::transform_lambda(v80, (uint64_t)v217, v185, 0, 0, &v207);
          v98 = v218;
          if (v218 == v217)
          {
            v98 = v217;
            v100 = 4;
            v99 = v189;
          }
          else
          {
            v99 = v189;
            if (!v218)
              goto LABEL_139;
            v100 = 5;
          }
          (*(void (**)(void))(*v98 + 8 * v100))();
LABEL_139:
          _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v206);
          std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::SRC_COLUMN_NAME);
          v101 = v99 + 296 * v75;
          v103 = *(_QWORD *)(v101 + 48);
          v102 = (uint64_t *)(v101 + 48);
          v104 = v102 - 1;
          v105 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(v102 - 1), v103, (unsigned __int8 **)&__p);
          if (v105 == *v102)
          {
            *(_QWORD *)&v204 = &__p;
            turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
          }
          v106 = v105;
          v107 = *v104;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::DST_COLUMN_NAME);
          v108 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*v104, *v102, (unsigned __int8 **)&__p);
          if (v108 == *v102)
          {
            *(_QWORD *)&v204 = &__p;
            turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
          }
          v109 = v108;
          v110 = *v104;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v111 = v189 + 296 * v75;
          v113 = *(_QWORD *)(v111 + 24);
          v112 = (unint64_t *)(v111 + 24);
          if (v113)
          {
            v114 = 0;
            v115 = 0xAAAAAAAAAAAAAAABLL * ((v106 - v107) >> 3);
            v116 = 0xAAAAAAAAAAAAAAABLL * ((v109 - v110) >> 3);
            do
            {
              if (v114 == v115)
              {
                v117 = v206;
                v196 = v208;
                if (*((_QWORD *)&v208 + 1))
                {
                  v118 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
                  do
                    v119 = __ldxr(v118);
                  while (__stxr(v119 + 1, v118));
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::SRC_COLUMN_NAME);
                (*(void (**)(uint64_t, __int128 *, std::string *))(*(_QWORD *)v117 + 200))(v117, &v196, &__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v120 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
                if (!*((_QWORD *)&v196 + 1))
                  goto LABEL_190;
                v121 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
              }
              else if (v114 == v116)
              {
                v123 = v206;
                v195 = v207;
                if (*((_QWORD *)&v207 + 1))
                {
                  v124 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
                  do
                    v125 = __ldxr(v124);
                  while (__stxr(v125 + 1, v124));
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::DST_COLUMN_NAME);
                (*(void (**)(uint64_t, __int128 *, std::string *))(*(_QWORD *)v123 + 200))(v123, &v195, &__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v120 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
                if (!*((_QWORD *)&v195 + 1))
                  goto LABEL_190;
                v126 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
                do
                  v122 = __ldaxr(v126);
                while (__stlxr(v122 - 1, v126));
              }
              else
              {
                _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v204);
                v127 = v204;
                turi::sframe::select_column(v76, v114, &v194);
                turi::unity_sarray::construct_from_sarray(v127, (uint64_t *)&v194);
                v128 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
                if (*((_QWORD *)&v194 + 1))
                {
                  v129 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
                  do
                    v130 = __ldaxr(v129);
                  while (__stlxr(v130 - 1, v129));
                  if (!v130)
                  {
                    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                    std::__shared_weak_count::__release_weak(v128);
                  }
                }
                v131 = *v104 + 24 * v114;
                if (*(char *)(v131 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v131, *(_QWORD *)(v131 + 8));
                }
                else
                {
                  v132 = *(_OWORD *)v131;
                  __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v131 + 16);
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v132;
                }
                v133 = v206;
                v193 = v204;
                if (*((_QWORD *)&v204 + 1))
                {
                  v134 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
                  do
                    v135 = __ldxr(v134);
                  while (__stxr(v135 + 1, v134));
                }
                (*(void (**)(uint64_t, __int128 *, std::string *))(*(_QWORD *)v133 + 200))(v133, &v193, &__p);
                v136 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
                if (*((_QWORD *)&v193 + 1))
                {
                  v137 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
                  do
                    v138 = __ldaxr(v137);
                  while (__stlxr(v138 - 1, v137));
                  if (!v138)
                  {
                    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                    std::__shared_weak_count::__release_weak(v136);
                  }
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v120 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
                if (!*((_QWORD *)&v204 + 1))
                  goto LABEL_190;
                v139 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
                do
                  v122 = __ldaxr(v139);
                while (__stlxr(v122 - 1, v139));
              }
              if (!v122)
              {
                ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                std::__shared_weak_count::__release_weak(v120);
              }
LABEL_190:
              ++v114;
            }
            while (v114 < *v112);
          }
          v140 = v206;
          v204 = v206;
          v141 = *((_QWORD *)&v206 + 1);
          if (*((_QWORD *)&v206 + 1))
          {
            v142 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
            do
              v143 = __ldxr(v142);
            while (__stxr(v143 + 1, v142));
          }
          v144 = v209.i64[1];
          v18 = v183;
          a3 = v184;
          v21 = v187;
          if (v209.i64[1] >= (unint64_t)v210)
          {
            v190 = v140;
            v146 = (v209.i64[1] - v209.i64[0]) >> 4;
            v147 = v146 + 1;
            if ((unint64_t)(v146 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v148 = (uint64_t)&v210[-v209.i64[0]];
            if ((uint64_t)&v210[-v209.i64[0]] >> 3 > v147)
              v147 = v148 >> 3;
            if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF0)
              v149 = 0xFFFFFFFFFFFFFFFLL;
            else
              v149 = v147;
            v223 = &v210;
            v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v210, v149);
            v152 = (__int128 *)&v150[16 * v146];
            *v152 = v190;
            v153 = (_QWORD *)v209.i64[1];
            v154 = (_QWORD *)v209.i64[0];
            if (v209.i64[1] == v209.i64[0])
            {
              v157 = vdupq_n_s64(v209.u64[1]);
              v155 = &v150[16 * v146];
            }
            else
            {
              v155 = &v150[16 * v146];
              do
              {
                v156 = *((_OWORD *)v153 - 1);
                v153 -= 2;
                *((_OWORD *)v155 - 1) = v156;
                v155 -= 16;
                *v153 = 0;
                v153[1] = 0;
              }
              while (v153 != v154);
              v157 = v209;
            }
            v145 = v152 + 1;
            v209.i64[0] = (uint64_t)v155;
            v209.i64[1] = (uint64_t)(v152 + 1);
            *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v157;
            v158 = v210;
            v210 = &v150[16 * v151];
            v222 = v158;
            __p.__r_.__value_.__r.__words[0] = v157.i64[0];
            std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            *(_QWORD *)v209.i64[1] = v140;
            *(_QWORD *)(v144 + 8) = v141;
            v145 = (_OWORD *)(v144 + 16);
          }
          v209.i64[1] = (uint64_t)v145;
          v159 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
          if (*((_QWORD *)&v206 + 1))
          {
            v160 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          v162 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
          if (*((_QWORD *)&v207 + 1))
          {
            v163 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
          v165 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
          if (*((_QWORD *)&v208 + 1))
          {
            v166 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          if (v192)
          {
            v168 = (unint64_t *)&v192->__shared_owners_;
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
              std::__shared_weak_count::__release_weak(v192);
            }
          }
          if (!v191)
            goto LABEL_232;
          v170 = (unint64_t *)&v191->__shared_owners_;
          do
            v171 = __ldaxr(v170);
          while (__stlxr(v171 - 1, v170));
          if (!v171)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
            if (!*((_QWORD *)&v80 + 1))
              goto LABEL_238;
          }
          else
          {
LABEL_232:
            if (!*((_QWORD *)&v80 + 1))
              goto LABEL_238;
          }
          v172 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v80 + 1) + 16))(*((_QWORD *)&v80 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v80 + 1));
          }
LABEL_238:
          if (*((_QWORD *)&v74 + 1))
          {
            v174 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v74 + 1) + 16))(*((_QWORD *)&v74 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v74 + 1));
            }
          }
          ++v22;
        }
        while (v22 != v183);
        v21 = v187 + 1;
        if (v187 + 1 == v183)
        {
          v176 = (v209.i64[1] - v209.i64[0]) >> 4;
          a4 = v180;
          goto LABEL_252;
        }
      }
    }
    v176 = 0;
LABEL_252:
    turi::binary_sframe_append(&v209, 0, v176, a4);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::destroy((uint64_t)&v211, (_QWORD *)v211.__r_.__value_.__l.__size_);
    if (v212)
    {
      v213 = v212;
      operator delete(v212);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  v177 = (std::__shared_weak_count *)v215[1];
  if (v215[1])
  {
    v178 = (unint64_t *)((char *)v215[1] + 8);
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
}

void sub_218299074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  uint64_t a66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;

  a51 = (uint64_t)&a53;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::destroy((uint64_t)&a56, (_QWORD *)a57);
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  __p = &a62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v67 = (std::__shared_weak_count *)a66;
  if (a66)
  {
    v68 = (unint64_t *)(a66 + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  _Unwind_Resume(a1);
}

void turi::binary_sframe_append(_QWORD *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  *a4 = 0;
  a4[1] = 0;
  if (a2 + 1 == a3)
  {
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a4, (uint64_t *)(*a1 + 16 * a2));
    return;
  }
  if (a3 > a2)
  {
    turi::binary_sframe_append(&v27, a1);
    turi::binary_sframe_append(&v25, a1);
    v6 = v27;
    if (v27)
    {
      if (v25)
      {
        v22 = v25;
        v23 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v8 = __ldxr(p_shared_owners);
          while (__stxr(v8 + 1, p_shared_owners));
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v6 + 288))(&v24, v6, &v22);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a4, &v24);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        if (*((_QWORD *)&v24 + 1))
        {
          v10 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v12 = v23;
        if (v23)
        {
          v13 = (unint64_t *)&v23->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        goto LABEL_22;
      }
      v15 = &v27;
    }
    else
    {
      v15 = &v25;
    }
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a4, v15);
LABEL_22:
    v16 = v26;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v28;
    if (v28)
    {
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void sub_21829978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::summary(turi::unity_sgraph *this@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::locale *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::locale *v24;
  std::locale::__imp *locale;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::locale *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::locale *v41;
  std::locale::__imp *v42;
  std::locale::__imp *v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  std::locale *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  std::locale *v56;
  std::locale::__imp *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::locale *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::locale *v73;
  std::locale::__imp *v74;
  std::locale::__imp *v75;
  _QWORD *exception;
  std::locale v77;
  char v78;
  std::locale *v79;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "summary", 225, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v77, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v77);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v10 = *((_QWORD *)this + 3);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v10);
    v11 = *(_QWORD *)(v10 + 16);
  }
  v12 = *(_QWORD *)(v11 + 40);
  std::string::basic_string[abi:ne180100]<0>(&v77, "num_vertices");
  v79 = &v77;
  v13 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&v77.__locale_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v79);
  v14 = v13;
  switch(*((_BYTE *)v13 + 68))
  {
    case 2:
      v15 = (unint64_t *)*((_QWORD *)v13 + 7);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *((_QWORD *)v13 + 7);
        if (!v18)
          goto LABEL_53;
        if (*(char *)(v18 + 31) < 0)
          operator delete(*(void **)(v18 + 8));
        v19 = (std::locale *)v18;
        v20 = 0x1012C404EF22A49;
        goto LABEL_52;
      }
      break;
    case 3:
      v21 = (unint64_t *)*((_QWORD *)v13 + 7);
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = (std::locale *)*((_QWORD *)v13 + 7);
        if (!v24)
          goto LABEL_53;
        locale = v24[1].__locale_;
        if (locale)
        {
          v24[2].__locale_ = locale;
          operator delete(locale);
        }
        v19 = v24;
        v20 = 0x1080C409938AC02;
        goto LABEL_52;
      }
      break;
    case 4:
      v26 = (unint64_t *)*((_QWORD *)v13 + 7);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = (std::locale *)*((_QWORD *)v13 + 7);
        if (!v29)
          goto LABEL_53;
        v79 = v29 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
        goto LABEL_36;
      }
      break;
    case 5:
      v30 = (unint64_t *)*((_QWORD *)v13 + 7);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v29 = (std::locale *)*((_QWORD *)v13 + 7);
        if (!v29)
          goto LABEL_53;
        v79 = v29 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
LABEL_36:
        v19 = v29;
        v20 = 0x1020C405E66F15BLL;
        goto LABEL_52;
      }
      break;
    case 8:
      v33 = (unint64_t *)*((_QWORD *)v13 + 7);
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = *((_QWORD *)v13 + 7);
        if (!v36)
          goto LABEL_53;
        boost::detail::shared_count::~shared_count((unsigned int **)(v36 + 16));
        v19 = (std::locale *)v36;
        v37 = -235920773;
        goto LABEL_51;
      }
      break;
    case 9:
      v38 = (unint64_t *)*((_QWORD *)v13 + 7);
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = (std::locale *)*((_QWORD *)v13 + 7);
        if (v41)
        {
          v42 = v41[6].__locale_;
          if (v42)
          {
            v41[7].__locale_ = v42;
            operator delete(v42);
          }
          v43 = v41[3].__locale_;
          if (v43)
          {
            v41[4].__locale_ = v43;
            operator delete(v43);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v41[1]);
          v19 = v41;
          v37 = 2071181815;
LABEL_51:
          v20 = v37 | 0x1030C4000000000;
LABEL_52:
          MEMORY[0x219A19A08](v19, v20);
        }
LABEL_53:
        *((_QWORD *)v14 + 7) = 0;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)v14 + 16) = 0;
  *((_BYTE *)v14 + 68) = 0;
  *((_QWORD *)v14 + 7) = v12;
  if (v78 < 0)
    operator delete(v77.__locale_);
  v44 = *(_QWORD *)(v11 + 48);
  std::string::basic_string[abi:ne180100]<0>(&v77, "num_edges");
  v79 = &v77;
  v45 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&v77.__locale_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v79);
  v46 = v45;
  switch(*((_BYTE *)v45 + 68))
  {
    case 2:
      v47 = (unint64_t *)*((_QWORD *)v45 + 7);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        v50 = *((_QWORD *)v45 + 7);
        if (!v50)
          goto LABEL_98;
        if (*(char *)(v50 + 31) < 0)
          operator delete(*(void **)(v50 + 8));
        v51 = (std::locale *)v50;
        v52 = 0x1012C404EF22A49;
        goto LABEL_97;
      }
      break;
    case 3:
      v53 = (unint64_t *)*((_QWORD *)v45 + 7);
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        v56 = (std::locale *)*((_QWORD *)v45 + 7);
        if (!v56)
          goto LABEL_98;
        v57 = v56[1].__locale_;
        if (v57)
        {
          v56[2].__locale_ = v57;
          operator delete(v57);
        }
        v51 = v56;
        v52 = 0x1080C409938AC02;
        goto LABEL_97;
      }
      break;
    case 4:
      v58 = (unint64_t *)*((_QWORD *)v45 + 7);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        v61 = (std::locale *)*((_QWORD *)v45 + 7);
        if (!v61)
          goto LABEL_98;
        v79 = v61 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
        goto LABEL_81;
      }
      break;
    case 5:
      v62 = (unint64_t *)*((_QWORD *)v45 + 7);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        v61 = (std::locale *)*((_QWORD *)v45 + 7);
        if (!v61)
          goto LABEL_98;
        v79 = v61 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
LABEL_81:
        v51 = v61;
        v52 = 0x1020C405E66F15BLL;
        goto LABEL_97;
      }
      break;
    case 8:
      v65 = (unint64_t *)*((_QWORD *)v45 + 7);
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
      {
        v68 = *((_QWORD *)v45 + 7);
        if (!v68)
          goto LABEL_98;
        boost::detail::shared_count::~shared_count((unsigned int **)(v68 + 16));
        v51 = (std::locale *)v68;
        v69 = -235920773;
        goto LABEL_96;
      }
      break;
    case 9:
      v70 = (unint64_t *)*((_QWORD *)v45 + 7);
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        v73 = (std::locale *)*((_QWORD *)v45 + 7);
        if (v73)
        {
          v74 = v73[6].__locale_;
          if (v74)
          {
            v73[7].__locale_ = v74;
            operator delete(v74);
          }
          v75 = v73[3].__locale_;
          if (v75)
          {
            v73[4].__locale_ = v75;
            operator delete(v75);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v73[1]);
          v51 = v73;
          v69 = 2071181815;
LABEL_96:
          v52 = v69 | 0x1030C4000000000;
LABEL_97:
          MEMORY[0x219A19A08](v51, v52);
        }
LABEL_98:
        *((_QWORD *)v46 + 7) = 0;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)v46 + 16) = 0;
  *((_BYTE *)v46 + 68) = 0;
  *((_QWORD *)v46 + 7) = v44;
  if (v78 < 0)
    operator delete(v77.__locale_);
}

void sub_218299D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v15, *(_QWORD **)(v15 + 8));
  _Unwind_Resume(a1);
}

std::string *turi::unity_sgraph::get_vertex_fields@<X0>(turi::unity_sgraph *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  turi::sgraph *v6;

  v5 = *((_QWORD *)this + 3);
  v6 = *(turi::sgraph **)(v5 + 16);
  if (!v6)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v5);
    v6 = *(turi::sgraph **)(v5 + 16);
  }
  return turi::sgraph::get_vertex_fields(v6, a2, a3);
}

std::string *turi::unity_sgraph::get_edge_fields@<X0>(turi::unity_sgraph *this@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7;
  turi::sgraph *v8;

  v7 = *((_QWORD *)this + 3);
  v8 = *(turi::sgraph **)(v7 + 16);
  if (!v8)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v7);
    v8 = *(turi::sgraph **)(v7 + 16);
  }
  return turi::sgraph::get_edge_fields(v8, a2, a3, a4);
}

_QWORD *turi::unity_sgraph::get_vertex_field_types@<X0>(turi::unity_sgraph *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  turi::sgraph *v6;

  v5 = *((_QWORD *)this + 3);
  v6 = *(turi::sgraph **)(v5 + 16);
  if (!v6)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v5);
    v6 = *(turi::sgraph **)(v5 + 16);
  }
  return turi::sgraph::get_vertex_field_types(v6, a2, a3);
}

void turi::unity_sgraph::get_edge_field_types(turi::unity_sgraph *this@<X0>, void **a2@<X1>, void **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  turi::sgraph *v8;

  v7 = *((_QWORD *)this + 3);
  v8 = *(turi::sgraph **)(v7 + 16);
  if (!v8)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v7);
    v8 = *(turi::sgraph **)(v7 + 16);
  }
  turi::sgraph::get_edge_field_types(v8, a2, a3, a4);
}

uint64_t turi::unity_sgraph::add_vertices@<X0>(const turi::unity_sgraph *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string::size_type a4@<X3>, _OWORD *a5@<X8>)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  turi::unity_sframe *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  turi::unity_sgraph *v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *dag;
  std::string *v26;
  std::string *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::locale::__imp *v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *exception;
  std::locale v44;
  std::locale::__imp *locale;
  char *v46;
  std::string::size_type v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  std::string v50;
  std::string::size_type v51;
  std::__shared_weak_count *v52;
  turi::unity_sframe *v53;
  std::__shared_weak_count *v54;

  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "add_vertices", 253, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet(&v44, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(&v44);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v16 = *(turi::unity_sframe **)a2;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  v53 = *(turi::unity_sframe **)a2;
  v54 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (!v16)
    turi::unity_sgraph::add_vertices(std::shared_ptr<turi::unity_sframe_base>,std::string const&,unsigned long)::$_0::operator()();
  turi::unity_sframe::get_underlying_sframe(v16, &v51);
  v21 = (uint64_t *)v51;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v50 = *(std::string *)a3;
  turi::unity_sgraph::fast_validate_add_vertices(v20, v21, (unsigned __int8 **)&v50);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v22 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v22, a1);
  v23 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v49, (uint64_t)v22);
  v24 = v49;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v23);
  v26 = (std::string *)operator new();
  v27 = v26;
  v47 = v51;
  v48 = v52;
  if (v52)
  {
    v28 = (unint64_t *)&v52->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  turi::add_vertices_op<turi::sframe>::add_vertices_op(v26, &v47, (__int128 *)a3, a4);
  v30 = *((_QWORD *)a1 + 3);
  v31 = (std::locale::__imp *)operator new(8uLL);
  v44.__locale_ = v31;
  *(_QWORD *)v31 = v30;
  locale = (std::locale::__imp *)((char *)v31 + 8);
  v46 = (char *)v31 + 8;
  v32 = turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(dag, v27, (uint64_t *)&v44);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v24 + 24), (uint64_t)v32);
  if (v44.__locale_)
  {
    locale = v44.__locale_;
    operator delete(v44.__locale_);
  }
  v33 = v48;
  if (v48)
  {
    v34 = (unint64_t *)&v48->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *a5 = v49;
  v36 = v52;
  if (v52)
  {
    v37 = (unint64_t *)&v52->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v54;
  if (v54)
  {
    v40 = (unint64_t *)&v54->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829A284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v24 - 80);
  pthread_mutex_unlock(&turi::dag_access_mutex);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::add_vertices(std::shared_ptr<turi::unity_sframe_base>,std::string const&,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"unity_sf != __null", 18);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "operator()", 256, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::unity_sgraph::add_vertices(std::shared_ptr<turi::unity_sframe_base>,std::string const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21829A464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::fast_validate_add_vertices(uint64_t a1, uint64_t *a2, unsigned __int8 **a3)
{
  uint64_t v5;
  uint64_t result;
  char v7;
  unsigned __int8 **v8;

  if (!turi::sframe::contains_column((uint64_t)a2, a3))
  {
    v8 = a3;
    turi::unity_sgraph::fast_validate_add_vertices(turi::sframe const&,std::string,unsigned long)const::$_0::operator()();
  }
  v5 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], a3);
  if (v5 == a2[6])
  {
    v8 = a3;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  result = turi::sframe::column_type((turi::sframe *)a2, 0xAAAAAAAAAAAAAAABLL * ((v5 - a2[5]) >> 3));
  v7 = result;
  if ((result & 0xFFFFFFFD) != 0)
  {
    v8 = (unsigned __int8 **)&v7;
    turi::unity_sgraph::fast_validate_add_vertices(turi::sframe const&,std::string,unsigned long)const::$_1::operator()();
  }
  return result;
}

_QWORD *turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(_QWORD *a1, uint64_t (***a2)(_QWORD), uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v26[2];
  uint64_t v27;
  uint64_t v28;

  if (!a2)
    turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#1}::operator()();
  v6 = (**a2)(a2);
  v27 = (a3[1] - *a3) >> 3;
  v28 = v6;
  if (v6 != v27)
  {
    v26[0] = &v28;
    v26[1] = &v27;
    turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#2}::operator()();
  }
  v7 = operator new();
  v8 = *a1;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 73) = 0u;
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 32) = a2;
  std::vector<unsigned long>::resize(v7 + 40, (a3[1] - *a3) >> 3);
  v9 = *a3;
  if (a3[1] != *a3)
  {
    v10 = 0;
    do
    {
      v11 = (_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v10);
      *v11 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * v10) + 8);
      v26[0] = v11;
      v12 = (_QWORD *)std::__hash_table<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(a1 + 1), v11, (uint64_t)&std::piecewise_construct, v26)[3];
      v13 = (char *)v12[9];
      v14 = v12[10];
      if ((unint64_t)v13 >= v14)
      {
        v16 = (char *)v12[8];
        v17 = (v13 - v16) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v18 = v14 - (_QWORD)v16;
        v19 = (uint64_t)(v14 - (_QWORD)v16) >> 2;
        if (v19 <= v17 + 1)
          v19 = v17 + 1;
        if (v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v12 + 10), v20);
          v16 = (char *)v12[8];
          v13 = (char *)v12[9];
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[8 * v17];
        *(_QWORD *)v22 = *a1;
        v15 = v22 + 8;
        while (v13 != v16)
        {
          v23 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v22 - 1) = v23;
          v22 -= 8;
        }
        v12[8] = v22;
        v12[9] = v15;
        v12[10] = &v21[8 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v13 = *a1;
        v15 = v13 + 8;
      }
      v12[9] = v15;
      ++v10;
      v9 = *a3;
    }
    while (v10 < (a3[1] - *a3) >> 3);
  }
  v26[0] = a1;
  std::__hash_table<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(a1 + 1), a1, (uint64_t)&std::piecewise_construct, v26)[3] = v7;
  v24 = (_QWORD *)operator new();
  turi::lazy_eval_future<turi::sgraph>::lazy_eval_future(v24, (uint64_t)a1, *a1);
  ++*a1;
  return v24;
}

void sub_21829A800(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C404161829ELL);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::add_edges@<X0>(const turi::unity_sgraph *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string::size_type a5@<X4>, std::string::size_type a6@<X5>, _OWORD *a7@<X8>)
{
  int *v14;
  file_logger *v15;
  file_logger *started;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  turi::unity_sframe *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  turi::unity_sgraph *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *dag;
  std::string *v30;
  std::string *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::locale::__imp *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *exception;
  std::locale v48;
  std::locale::__imp *locale;
  char *v50;
  std::string::size_type v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  std::string v54;
  std::string v55;
  std::string::size_type v56;
  std::__shared_weak_count *v57;
  turi::unity_sframe *v58;
  std::__shared_weak_count *v59;

  v14 = (int *)global_logger();
  if (v14[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v14))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v15 = (file_logger *)global_logger();
    started = file_logger::start_stream(v15, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "add_edges", 271, 1);
    v17 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v17 && *((_BYTE *)v17 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"Function entry", 14);
    v18 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v18)
    {
      if (*((_BYTE *)v18 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(v18[2] - 24) + 16));
        v19 = std::locale::use_facet(&v48, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(&v48);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v20 = *(turi::unity_sframe **)a2;
  v21 = *(std::__shared_weak_count **)(a2 + 8);
  v58 = *(turi::unity_sframe **)a2;
  v59 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  if (!v20)
    turi::unity_sgraph::add_edges(std::shared_ptr<turi::unity_sframe_base>,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()();
  turi::unity_sframe::get_underlying_sframe(v20, &v56);
  v25 = (uint64_t *)v56;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v55 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v54 = *(std::string *)a4;
  turi::unity_sgraph::fast_validate_add_edges(v24, v25, (unsigned __int8 **)&v55, (unsigned __int8 **)&v54);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v26 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v26, a1);
  v27 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v53, (uint64_t)v26);
  v28 = v53;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v27);
  v30 = (std::string *)operator new();
  v31 = v30;
  v51 = v56;
  v52 = v57;
  if (v57)
  {
    v32 = (unint64_t *)&v57->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  turi::add_edges_op<turi::sframe>::add_edges_op(v30, &v51, (__int128 *)a3, (__int128 *)a4, a5, a6);
  v34 = *((_QWORD *)a1 + 3);
  v35 = (std::locale::__imp *)operator new(8uLL);
  v48.__locale_ = v35;
  *(_QWORD *)v35 = v34;
  locale = (std::locale::__imp *)((char *)v35 + 8);
  v50 = (char *)v35 + 8;
  v36 = turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(dag, v31, (uint64_t *)&v48);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v28 + 24), (uint64_t)v36);
  if (v48.__locale_)
  {
    locale = v48.__locale_;
    operator delete(v48.__locale_);
  }
  v37 = v52;
  if (v52)
  {
    v38 = (unint64_t *)&v52->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  *a7 = v53;
  v40 = v57;
  if (v57)
  {
    v41 = (unint64_t *)&v57->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v59;
  if (v59)
  {
    v44 = (unint64_t *)&v59->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829ABF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;

  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v30 - 104);
  pthread_mutex_unlock(&turi::dag_access_mutex);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::add_edges(std::shared_ptr<turi::unity_sframe_base>,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"unity_sf != __null", 18);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "operator()", 274, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::unity_sgraph::add_edges(std::shared_ptr<turi::unity_sframe_base>,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21829ADE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::fast_validate_add_edges(uint64_t a1, uint64_t *a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  const std::string::value_type *v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  std::string v20;
  std::string v21;
  void *__p[2];
  int64_t v23;
  std::string v24;
  char v25;

  if (!turi::sframe::contains_column((uint64_t)a2, a3))
  {
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    turi::unity_sgraph::fast_validate_add_edges(turi::sframe const&,std::string,std::string,unsigned long,unsigned long)const::$_0::operator()();
  }
  if (!turi::sframe::contains_column((uint64_t)a2, a4))
  {
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
    turi::unity_sgraph::fast_validate_add_edges(turi::sframe const&,std::string,std::string,unsigned long,unsigned long)const::$_1::operator()();
  }
  v7 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], a3);
  if (v7 == a2[6])
  {
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    goto LABEL_25;
  }
  v8 = turi::sframe::column_type((turi::sframe *)a2, 0xAAAAAAAAAAAAAAABLL * ((v7 - a2[5]) >> 3));
  v25 = v8;
  v9 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], a4);
  if (v9 == a2[6])
  {
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
LABEL_25:
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  result = turi::sframe::column_type((turi::sframe *)a2, 0xAAAAAAAAAAAAAAABLL * ((v9 - a2[5]) >> 3));
  if (v8 != (_DWORD)result)
  {
    v11 = result;
    std::string::basic_string[abi:ne180100]<0>(&v24, "Source and target ids have different types: ");
    if (v8 > 9)
      v12 = "undefined";
    else
      v12 = off_24D936388[v8];
    std::string::basic_string[abi:ne180100]<0>(&v20, v12);
    v13 = std::string::append(&v20, " != ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v11 > 9)
      v15 = "undefined";
    else
      v15 = off_24D936388[v11];
    v16 = std::string::append(&v21, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v23 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if (v23 >= 0)
      v19 = HIBYTE(v23);
    else
      v19 = (std::string::size_type)__p[1];
    std::string::append(&v24, (const std::string::value_type *)v18, v19);
    turi::unity_sgraph::fast_validate_add_edges((char *)&v23 + 7, (uint64_t)&v20, (uint64_t)&v21, __p);
    __p[0] = &v24;
    turi::unity_sgraph::fast_validate_add_edges(turi::sframe const&,std::string,std::string,unsigned long,unsigned long)const::$_2::operator()();
  }
  if ((v8 & 0xFFFFFFFD) != 0)
  {
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
    turi::unity_sgraph::fast_validate_add_edges(turi::sframe const&,std::string,std::string,unsigned long,unsigned long)const::$_3::operator()();
  }
  return result;
}

uint64_t turi::unity_sgraph::copy_vertex_field@<X0>(const turi::unity_sgraph *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  size_t v23;
  size_t v24;
  const void *v25;
  turi::unity_sgraph *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *dag;
  uint64_t (***v30)(_QWORD);
  uint64_t v31;
  std::locale::__imp *v32;
  _QWORD *v33;
  _QWORD *exception;
  std::locale v36;
  std::locale::__imp *locale;
  char *v38;
  __int128 v39;

  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "copy_vertex_field", 289, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(&v36);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v16 = a2[23];
  if ((v16 & 0x80u) == 0)
    v17 = a2[23];
  else
    v17 = *((_QWORD *)a2 + 1);
  v18 = a3[23];
  v19 = *((_QWORD *)a3 + 1);
  if ((v18 & 0x80u) == 0)
    v20 = a3[23];
  else
    v20 = *((_QWORD *)a3 + 1);
  if (v17 != v20)
    goto LABEL_26;
  if ((v18 & 0x80u) == 0)
    v21 = a3;
  else
    v21 = *(unsigned __int8 **)a3;
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v21, *((_QWORD *)a2 + 1)))
      goto LABEL_26;
LABEL_24:
    turi::unity_sgraph::copy_vertex_field(std::string,std::string,unsigned long)::$_0::operator()();
  }
  if (!a2[23])
    goto LABEL_24;
  v22 = a2;
  while (*v22 == *v21)
  {
    ++v22;
    ++v21;
    if (!--v16)
      goto LABEL_24;
  }
LABEL_26:
  v23 = strlen(turi::sgraph::VID_COLUMN_NAME);
  v24 = v23;
  if ((v18 & 0x80) != 0)
  {
    if (v23 != v19)
      goto LABEL_33;
    if (v19 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v25 = *(const void **)a3;
  }
  else
  {
    v25 = a3;
    if (v24 != v18)
      goto LABEL_33;
  }
  if (!memcmp(v25, turi::sgraph::VID_COLUMN_NAME, v24))
  {
    v36.__locale_ = (std::locale::__imp *)a3;
    turi::unity_sgraph::copy_vertex_field(std::string,std::string,unsigned long)::$_1::operator()();
  }
LABEL_33:
  v26 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v26, a1);
  v27 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v39, (uint64_t)v26);
  v28 = v39;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v27);
  v30 = (uint64_t (***)(_QWORD))operator new();
  turi::copy_vertex_field_op::copy_vertex_field_op((uint64_t)v30, (__int128 *)a2, (__int128 *)a3, a4);
  v31 = *((_QWORD *)a1 + 3);
  v32 = (std::locale::__imp *)operator new(8uLL);
  v36.__locale_ = v32;
  *(_QWORD *)v32 = v31;
  locale = (std::locale::__imp *)((char *)v32 + 8);
  v38 = (char *)v32 + 8;
  v33 = turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(dag, v30, (uint64_t *)&v36);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v28 + 24), (uint64_t)v33);
  if (v36.__locale_)
  {
    locale = v36.__locale_;
    operator delete(v36.__locale_);
  }
  *a5 = v39;
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829B3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, char a13)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::delete_vertex_field@<X0>(const turi::unity_sgraph *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  size_t v14;
  size_t v15;
  const std::string::value_type *v16;
  turi::unity_sgraph *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *dag;
  uint64_t v21;
  std::string *v22;
  uint64_t v23;
  std::locale::__imp *v24;
  _QWORD *v25;
  _QWORD *exception;
  std::locale v28;
  std::locale::__imp *locale;
  char *v30;
  __int128 v31;

  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "delete_vertex_field", 307, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v28, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v28);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v14 = strlen(turi::sgraph::VID_COLUMN_NAME);
  v15 = v14;
  if (*(char *)(a2 + 23) < 0)
  {
    if (v14 != *(_QWORD *)(a2 + 8))
      goto LABEL_17;
    if (v14 == -1)
      goto LABEL_24;
    v16 = *(const std::string::value_type **)a2;
  }
  else
  {
    if (v14 != *(unsigned __int8 *)(a2 + 23))
      goto LABEL_17;
    v16 = (const std::string::value_type *)a2;
    if (v15 == -1)
LABEL_24:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v16, turi::sgraph::VID_COLUMN_NAME, v15))
  {
    v28.__locale_ = (std::locale::__imp *)a2;
    turi::unity_sgraph::delete_vertex_field(std::string,unsigned long)::$_0::operator()();
  }
LABEL_17:
  v17 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v17, a1);
  v18 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v31, (uint64_t)v17);
  v19 = v31;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v18);
  v21 = operator new();
  *(_QWORD *)v21 = &unk_24D935C20;
  v22 = (std::string *)(v21 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *(_QWORD *)(v21 + 24) = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)(v21 + 32) = a3;
  v23 = *((_QWORD *)a1 + 3);
  v24 = (std::locale::__imp *)operator new(8uLL);
  v28.__locale_ = v24;
  *(_QWORD *)v24 = v23;
  locale = (std::locale::__imp *)((char *)v24 + 8);
  v30 = (char *)v24 + 8;
  v25 = turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(dag, (uint64_t (***)(_QWORD))v21, (uint64_t *)&v28);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v19 + 24), (uint64_t)v25);
  if (v28.__locale_)
  {
    locale = v28.__locale_;
    operator delete(v28.__locale_);
  }
  *a4 = v31;
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829B770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  MEMORY[0x219A19A08](v13, 0x1093C4057897759);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  pthread_mutex_unlock(&turi::dag_access_mutex);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::add_vertex_field@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  size_t v14;
  size_t v15;
  const std::string::value_type *v16;
  turi::sgraph *v17;
  uint64_t v18;
  const turi::sgraph *v19;
  turi::unity_sarray *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  turi::unity_sgraph *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *dag;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *exception;
  __int128 v37;
  std::string v38;
  __int128 v39;
  std::locale v40;
  std::__shared_weak_count *v41;

  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "add_vertex_field", 322, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v40, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v40);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v14 = strlen(turi::sgraph::VID_COLUMN_NAME);
  v15 = v14;
  if (*(char *)(a3 + 23) < 0)
  {
    if (v14 != *(_QWORD *)(a3 + 8))
      goto LABEL_17;
    if (v14 == -1)
      goto LABEL_39;
    v16 = *(const std::string::value_type **)a3;
  }
  else
  {
    if (v14 != *(unsigned __int8 *)(a3 + 23))
      goto LABEL_17;
    v16 = (const std::string::value_type *)a3;
    if (v15 == -1)
LABEL_39:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v16, turi::sgraph::VID_COLUMN_NAME, v15))
  {
    v40.__locale_ = (std::locale::__imp *)a3;
    turi::unity_sgraph::add_vertex_field(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_0::operator()();
  }
LABEL_17:
  v17 = (turi::sgraph *)operator new();
  v18 = a1[3];
  v19 = *(const turi::sgraph **)(v18 + 16);
  if (!v19)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(a1[3]);
    v19 = *(const turi::sgraph **)(v18 + 16);
  }
  turi::sgraph::sgraph(v17, v19);
  v20 = *(turi::unity_sarray **)a2;
  v21 = *(std::__shared_weak_count **)(a2 + 8);
  v40.__locale_ = *(std::locale::__imp **)a2;
  v41 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  turi::unity_sarray::get_underlying_sarray(v20, &v39);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v38 = *(std::string *)a3;
  turi::sgraph::add_vertex_field(v17, (uint64_t *)&v39, (uint64_t)&v38);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v27, (const turi::unity_sgraph *)a1);
  v28 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v37, (uint64_t)v27);
  v29 = v37;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v28);
  v31 = turi::lazy_eval_operation_dag<turi::sgraph>::add_value(dag, (uint64_t)v17);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v29 + 24), (uint64_t)v31);
  *a4 = v37;
  v32 = v41;
  if (v41)
  {
    v33 = (unint64_t *)&v41->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829BB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, std::locale a20)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  pthread_mutex_unlock(&turi::dag_access_mutex);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::swap_vertex_fields@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  char *v14;
  size_t v15;
  size_t v16;
  const void *v17;
  const void *v18;
  turi::sgraph *v19;
  uint64_t v20;
  const turi::sgraph *v21;
  turi::unity_sgraph *v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *dag;
  _QWORD *v26;
  _QWORD *exception;
  __int128 v29;

  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "swap_vertex_fields", 338, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet((const std::locale *)&v29, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v29);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v14 = turi::sgraph::VID_COLUMN_NAME;
  v15 = strlen(turi::sgraph::VID_COLUMN_NAME);
  v16 = v15;
  if (*(char *)(a2 + 23) < 0)
  {
    if (v15 != *(_QWORD *)(a2 + 8))
      goto LABEL_17;
    if (v15 == -1)
      goto LABEL_30;
    v17 = *(const void **)a2;
  }
  else
  {
    if (v15 != *(unsigned __int8 *)(a2 + 23))
      goto LABEL_17;
    v17 = (const void *)a2;
    if (v16 == -1)
LABEL_30:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v17, turi::sgraph::VID_COLUMN_NAME, v16))
    goto LABEL_28;
LABEL_17:
  if (*(char *)(a3 + 23) < 0)
  {
    if (v16 != *(_QWORD *)(a3 + 8))
      goto LABEL_25;
    if (v16 == -1)
      goto LABEL_31;
    v18 = *(const void **)a3;
  }
  else
  {
    if (v16 != *(unsigned __int8 *)(a3 + 23))
      goto LABEL_25;
    v18 = (const void *)a3;
    if (v16 == -1)
LABEL_31:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v18, v14, v16))
  {
LABEL_28:
    *(_QWORD *)&v29 = a2;
    *((_QWORD *)&v29 + 1) = a3;
    turi::unity_sgraph::swap_vertex_fields(std::string const&,std::string const&)::$_0::operator()();
  }
LABEL_25:
  v19 = (turi::sgraph *)operator new();
  v20 = a1[3];
  v21 = *(const turi::sgraph **)(v20 + 16);
  if (!v21)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(a1[3]);
    v21 = *(const turi::sgraph **)(v20 + 16);
  }
  turi::sgraph::sgraph(v19, v21);
  turi::sgraph::swap_vertex_fields((uint64_t)v19, a2, a3);
  v22 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v22, (const turi::unity_sgraph *)a1);
  v23 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v29, (uint64_t)v22);
  v24 = v29;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v23);
  v26 = turi::lazy_eval_operation_dag<turi::sgraph>::add_value(dag, (uint64_t)v19);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v24 + 24), (uint64_t)v26);
  *a4 = v29;
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829BF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::rename_vertex_fields@<X0>(uint64_t *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  turi::sgraph *v14;
  uint64_t v15;
  const turi::sgraph *v16;
  turi::unity_sgraph *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *dag;
  _QWORD *v21;
  _QWORD *exception;
  __int128 v24;

  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "rename_vertex_fields", 353, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet((const std::locale *)&v24, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v24);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v14 = (turi::sgraph *)operator new();
  v15 = a1[3];
  v16 = *(const turi::sgraph **)(v15 + 16);
  if (!v16)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(a1[3]);
    v16 = *(const turi::sgraph **)(v15 + 16);
  }
  turi::sgraph::sgraph(v14, v16);
  turi::sgraph::rename_vertex_fields((uint64_t)v14, a2, a3);
  v17 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v17, (const turi::unity_sgraph *)a1);
  v18 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v24, (uint64_t)v17);
  v19 = v24;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v18);
  v21 = turi::lazy_eval_operation_dag<turi::sgraph>::add_value(dag, (uint64_t)v14);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v19 + 24), (uint64_t)v21);
  *a4 = v24;
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829C1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::select_vertex_fields@<X0>(const turi::unity_sgraph *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  std::string *end;
  turi::unity_sgraph *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *dag;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *exception;
  std::vector<std::string> v25;
  __int128 v26;
  __int128 __p;
  _QWORD *v28;
  __int128 v29;

  *(_QWORD *)&v29 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "select_vertex_fields", 364, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet((const std::locale *)&v25, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v25);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME);
  memset(&v25, 0, sizeof(v25));
  *(_QWORD *)&v26 = &v25;
  BYTE8(v26) = 0;
  v25.__begin_ = (std::vector<std::string>::pointer)operator new(0x18uLL);
  v25.__end_ = v25.__begin_;
  v25.__end_cap_.__value_ = v25.__begin_ + 1;
  end = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v25.__end_cap_, &__p, &v29, v25.__begin_);
  v25.__end_ = end;
  if (SHIBYTE(v28) < 0)
  {
    operator delete((void *)__p);
    end = v25.__end_;
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v25, end, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v15 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v15, a1);
  v16 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v26, (uint64_t)v15);
  v17 = v26;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v16);
  v19 = (_QWORD *)operator new();
  turi::select_vertex_fields_op::select_vertex_fields_op(v19, (__int128 **)&v25, a3);
  v20 = *((_QWORD *)a1 + 3);
  v21 = operator new(8uLL);
  *(_QWORD *)&__p = v21;
  *v21 = v20;
  *((_QWORD *)&__p + 1) = v21 + 1;
  v28 = v21 + 1;
  v22 = turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(dag, (uint64_t (***)(_QWORD))v19, (uint64_t *)&__p);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v17 + 24), (uint64_t)v22);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  *a4 = v26;
  *(_QWORD *)&__p = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829C54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::copy_edge_field@<X0>(const turi::unity_sgraph *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  int *v12;
  file_logger *v13;
  file_logger *started;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  size_t v25;
  size_t v26;
  const void *v27;
  char *v28;
  size_t v29;
  const void *v30;
  turi::unity_sgraph *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *dag;
  uint64_t (***v35)(_QWORD);
  uint64_t v36;
  std::locale::__imp *v37;
  _QWORD *v38;
  _QWORD *exception;
  std::locale v41;
  std::locale::__imp *locale;
  char *v43;
  __int128 v44;

  v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "copy_edge_field", 379, 1);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15 && *((_BYTE *)v15 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Function entry", 14);
    v16 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v16)
    {
      if (*((_BYTE *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[2] - 24) + 16));
        v17 = std::locale::use_facet(&v41, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(&v41);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v18 = a2[23];
  if ((v18 & 0x80u) == 0)
    v19 = a2[23];
  else
    v19 = *((_QWORD *)a2 + 1);
  v20 = a3[23];
  v21 = *((_QWORD *)a3 + 1);
  if ((v20 & 0x80u) == 0)
    v22 = a3[23];
  else
    v22 = *((_QWORD *)a3 + 1);
  if (v19 != v22)
    goto LABEL_26;
  if ((v20 & 0x80u) == 0)
    v23 = a3;
  else
    v23 = *(unsigned __int8 **)a3;
  if ((v18 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v23, *((_QWORD *)a2 + 1)))
      goto LABEL_26;
LABEL_24:
    turi::unity_sgraph::copy_edge_field(std::string,std::string,unsigned long,unsigned long)::$_0::operator()();
  }
  if (!a2[23])
    goto LABEL_24;
  v24 = a2;
  while (*v24 == *v23)
  {
    ++v24;
    ++v23;
    if (!--v18)
      goto LABEL_24;
  }
LABEL_26:
  v25 = strlen(turi::sgraph::SRC_COLUMN_NAME);
  v26 = v25;
  if ((v20 & 0x80) != 0)
  {
    if (v25 != v21)
    {
      v28 = turi::sgraph::DST_COLUMN_NAME;
      v29 = strlen(turi::sgraph::DST_COLUMN_NAME);
LABEL_37:
      if (v29 != v21)
        goto LABEL_41;
      if (v21 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v30 = *(const void **)a3;
      v20 = v21;
LABEL_40:
      if (memcmp(v30, v28, v20))
        goto LABEL_41;
LABEL_44:
      v41.__locale_ = (std::locale::__imp *)a3;
      turi::unity_sgraph::copy_edge_field(std::string,std::string,unsigned long,unsigned long)::$_1::operator()();
    }
    if (v21 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v27 = *(const void **)a3;
  }
  else
  {
    v27 = a3;
    if (v26 != v20)
    {
      v28 = turi::sgraph::DST_COLUMN_NAME;
      v29 = strlen(turi::sgraph::DST_COLUMN_NAME);
      goto LABEL_34;
    }
  }
  if (!memcmp(v27, turi::sgraph::SRC_COLUMN_NAME, v26))
    goto LABEL_44;
  v28 = turi::sgraph::DST_COLUMN_NAME;
  v29 = strlen(turi::sgraph::DST_COLUMN_NAME);
  if ((v20 & 0x80) != 0)
    goto LABEL_37;
LABEL_34:
  v30 = a3;
  if (v29 == v20)
    goto LABEL_40;
LABEL_41:
  v31 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v31, a1);
  v32 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v44, (uint64_t)v31);
  v33 = v44;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v32);
  v35 = (uint64_t (***)(_QWORD))operator new();
  turi::copy_edge_field_op::copy_edge_field_op((uint64_t)v35, (__int128 *)a2, (__int128 *)a3, a4, a5);
  v36 = *((_QWORD *)a1 + 3);
  v37 = (std::locale::__imp *)operator new(8uLL);
  v41.__locale_ = v37;
  *(_QWORD *)v37 = v36;
  locale = (std::locale::__imp *)((char *)v37 + 8);
  v43 = (char *)v37 + 8;
  v38 = turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(dag, v35, (uint64_t *)&v41);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v33 + 24), (uint64_t)v38);
  if (v41.__locale_)
  {
    locale = v41.__locale_;
    operator delete(v41.__locale_);
  }
  *a6 = v44;
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829CA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, char a13)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::delete_edge_field@<X0>(const turi::unity_sgraph *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  const std::string::value_type *v19;
  char *v20;
  size_t v21;
  const std::string::value_type *v22;
  turi::unity_sgraph *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *dag;
  uint64_t v27;
  std::string *v28;
  uint64_t v29;
  std::locale::__imp *v30;
  _QWORD *v31;
  _QWORD *exception;
  std::locale v34;
  std::locale::__imp *locale;
  char *v36;
  __int128 v37;

  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "delete_edge_field", 398, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet(&v34, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v16 = strlen(turi::sgraph::SRC_COLUMN_NAME);
  v17 = v16;
  v18 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (v16 != *(_QWORD *)(a2 + 8))
    {
      v20 = turi::sgraph::DST_COLUMN_NAME;
      v21 = strlen(turi::sgraph::DST_COLUMN_NAME);
      v18 = *(_QWORD *)(a2 + 8);
      goto LABEL_23;
    }
    if (v16 == -1)
      goto LABEL_35;
    v19 = *(const std::string::value_type **)a2;
  }
  else
  {
    if (v16 != v18)
    {
      v20 = turi::sgraph::DST_COLUMN_NAME;
      v21 = strlen(turi::sgraph::DST_COLUMN_NAME);
      goto LABEL_20;
    }
    v19 = (const std::string::value_type *)a2;
    if (v17 == -1)
LABEL_35:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v19, turi::sgraph::SRC_COLUMN_NAME, v17))
    goto LABEL_33;
  v20 = turi::sgraph::DST_COLUMN_NAME;
  v21 = strlen(turi::sgraph::DST_COLUMN_NAME);
  if ((v18 & 0x80) != 0)
  {
    v18 = *(_QWORD *)(a2 + 8);
LABEL_23:
    if (v21 != v18)
      goto LABEL_27;
    if (v18 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v22 = *(const std::string::value_type **)a2;
LABEL_26:
    if (memcmp(v22, v20, v18))
      goto LABEL_27;
LABEL_33:
    v34.__locale_ = (std::locale::__imp *)a2;
    turi::unity_sgraph::delete_edge_field(std::string,unsigned long,unsigned long)::$_0::operator()();
  }
LABEL_20:
  v22 = (const std::string::value_type *)a2;
  if (v21 == v18)
    goto LABEL_26;
LABEL_27:
  v23 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v23, a1);
  v24 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v37, (uint64_t)v23);
  v25 = v37;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v24);
  v27 = operator new();
  *(_QWORD *)v27 = &unk_24D935D10;
  v28 = (std::string *)(v27 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *(_QWORD *)(v27 + 24) = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)(v27 + 32) = a3;
  *(_QWORD *)(v27 + 40) = a4;
  v29 = *((_QWORD *)a1 + 3);
  v30 = (std::locale::__imp *)operator new(8uLL);
  v34.__locale_ = v30;
  *(_QWORD *)v30 = v29;
  locale = (std::locale::__imp *)((char *)v30 + 8);
  v36 = (char *)v30 + 8;
  v31 = turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(dag, (uint64_t (***)(_QWORD))v27, (uint64_t *)&v34);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v25 + 24), (uint64_t)v31);
  if (v34.__locale_)
  {
    locale = v34.__locale_;
    operator delete(v34.__locale_);
  }
  *a5 = v37;
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829CE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  MEMORY[0x219A19A08](v13, 0x1093C40110CF19CLL);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  pthread_mutex_unlock(&turi::dag_access_mutex);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::add_edge_field@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  const std::string::value_type *v17;
  char *v18;
  size_t v19;
  const std::string::value_type *v20;
  turi::sgraph *v21;
  uint64_t v22;
  const turi::sgraph *v23;
  turi::unity_sarray *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  turi::unity_sgraph *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *dag;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *exception;
  __int128 v41;
  std::string v42;
  __int128 v43;
  std::locale v44;
  std::__shared_weak_count *v45;

  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "add_edge_field", 414, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v44, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v44);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v14 = strlen(turi::sgraph::SRC_COLUMN_NAME);
  v15 = v14;
  v16 = *(unsigned __int8 *)(a3 + 23);
  if (*(char *)(a3 + 23) < 0)
  {
    if (v14 != *(_QWORD *)(a3 + 8))
    {
      v18 = turi::sgraph::DST_COLUMN_NAME;
      v19 = strlen(turi::sgraph::DST_COLUMN_NAME);
      v16 = *(_QWORD *)(a3 + 8);
      goto LABEL_23;
    }
    if (v14 == -1)
      goto LABEL_50;
    v17 = *(const std::string::value_type **)a3;
  }
  else
  {
    if (v14 != v16)
    {
      v18 = turi::sgraph::DST_COLUMN_NAME;
      v19 = strlen(turi::sgraph::DST_COLUMN_NAME);
      goto LABEL_20;
    }
    v17 = (const std::string::value_type *)a3;
    if (v15 == -1)
LABEL_50:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v17, turi::sgraph::SRC_COLUMN_NAME, v15))
    goto LABEL_48;
  v18 = turi::sgraph::DST_COLUMN_NAME;
  v19 = strlen(turi::sgraph::DST_COLUMN_NAME);
  if ((v16 & 0x80) != 0)
  {
    v16 = *(_QWORD *)(a3 + 8);
LABEL_23:
    if (v19 != v16)
      goto LABEL_27;
    if (v16 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v20 = *(const std::string::value_type **)a3;
LABEL_26:
    if (memcmp(v20, v18, v16))
      goto LABEL_27;
LABEL_48:
    v44.__locale_ = (std::locale::__imp *)a3;
    turi::unity_sgraph::add_edge_field(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_0::operator()();
  }
LABEL_20:
  v20 = (const std::string::value_type *)a3;
  if (v19 == v16)
    goto LABEL_26;
LABEL_27:
  v21 = (turi::sgraph *)operator new();
  v22 = a1[3];
  v23 = *(const turi::sgraph **)(v22 + 16);
  if (!v23)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(a1[3]);
    v23 = *(const turi::sgraph **)(v22 + 16);
  }
  turi::sgraph::sgraph(v21, v23);
  v24 = *(turi::unity_sarray **)a2;
  v25 = *(std::__shared_weak_count **)(a2 + 8);
  v44.__locale_ = *(std::locale::__imp **)a2;
  v45 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  turi::unity_sarray::get_underlying_sarray(v24, &v43);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v42 = *(std::string *)a3;
  turi::sgraph::add_edge_field(v21, (uint64_t *)&v43, (uint64_t)&v42);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v31, (const turi::unity_sgraph *)a1);
  v32 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v41, (uint64_t)v31);
  v33 = v41;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v32);
  v35 = turi::lazy_eval_operation_dag<turi::sgraph>::add_value(dag, (uint64_t)v21);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v33 + 24), (uint64_t)v35);
  *a4 = v41;
  v36 = v45;
  if (v45)
  {
    v37 = (unint64_t *)&v45->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829D2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, std::locale a20)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  pthread_mutex_unlock(&turi::dag_access_mutex);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::swap_edge_fields@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  char *v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  const void *v20;
  char *v21;
  size_t v22;
  size_t v23;
  const void *v24;
  const void *v25;
  turi::sgraph *v26;
  uint64_t v27;
  const turi::sgraph *v28;
  turi::unity_sgraph *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *dag;
  _QWORD *v33;
  _QWORD *exception;
  __int128 v36;

  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "swap_edge_fields", 432, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet((const std::locale *)&v36, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v36);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v14 = turi::sgraph::SRC_COLUMN_NAME;
  v15 = strlen(turi::sgraph::SRC_COLUMN_NAME);
  v16 = v15;
  v17 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (v15 != *(_QWORD *)(a2 + 8))
      goto LABEL_17;
    if (v15 == -1)
      goto LABEL_44;
    v18 = *(const void **)a2;
  }
  else
  {
    if (v15 != v17)
      goto LABEL_17;
    v18 = (const void *)a2;
    if (v16 == -1)
LABEL_44:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v18, turi::sgraph::SRC_COLUMN_NAME, v16))
    goto LABEL_42;
LABEL_17:
  v19 = *(unsigned __int8 *)(a3 + 23);
  if (*(char *)(a3 + 23) < 0)
  {
    if (v16 != *(_QWORD *)(a3 + 8))
      goto LABEL_25;
    if (v16 == -1)
      goto LABEL_45;
    v20 = *(const void **)a3;
  }
  else
  {
    if (v16 != v19)
      goto LABEL_25;
    v20 = (const void *)a3;
    if (v16 == -1)
LABEL_45:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v20, v14, v16))
    goto LABEL_42;
LABEL_25:
  v21 = turi::sgraph::DST_COLUMN_NAME;
  v22 = strlen(turi::sgraph::DST_COLUMN_NAME);
  v23 = v22;
  if ((v17 & 0x80) != 0)
  {
    if (v22 != *(_QWORD *)(a2 + 8))
      goto LABEL_32;
    if (v22 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v24 = *(const void **)a2;
  }
  else
  {
    v24 = (const void *)a2;
    if (v23 != v17)
      goto LABEL_32;
  }
  if (!memcmp(v24, turi::sgraph::DST_COLUMN_NAME, v23))
    goto LABEL_42;
LABEL_32:
  if ((v19 & 0x80) != 0)
  {
    if (v23 != *(_QWORD *)(a3 + 8))
      goto LABEL_39;
    if (v23 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v25 = *(const void **)a3;
LABEL_38:
    if (memcmp(v25, v21, v23))
      goto LABEL_39;
LABEL_42:
    *(_QWORD *)&v36 = a2;
    *((_QWORD *)&v36 + 1) = a3;
    turi::unity_sgraph::swap_edge_fields(std::string const&,std::string const&)::$_0::operator()();
  }
  v25 = (const void *)a3;
  if (v23 == v19)
    goto LABEL_38;
LABEL_39:
  v26 = (turi::sgraph *)operator new();
  v27 = a1[3];
  v28 = *(const turi::sgraph **)(v27 + 16);
  if (!v28)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(a1[3]);
    v28 = *(const turi::sgraph **)(v27 + 16);
  }
  turi::sgraph::sgraph(v26, v28);
  turi::sgraph::swap_edge_fields((uint64_t)v26, a2, a3);
  v29 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v29, (const turi::unity_sgraph *)a1);
  v30 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v36, (uint64_t)v29);
  v31 = v36;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v30);
  v33 = turi::lazy_eval_operation_dag<turi::sgraph>::add_value(dag, (uint64_t)v26);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v31 + 24), (uint64_t)v33);
  *a4 = v36;
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829D70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::rename_edge_fields@<X0>(uint64_t *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  turi::sgraph *v14;
  uint64_t v15;
  const turi::sgraph *v16;
  turi::unity_sgraph *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *dag;
  _QWORD *v21;
  _QWORD *exception;
  __int128 v24;

  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "rename_edge_fields", 448, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet((const std::locale *)&v24, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v24);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v14 = (turi::sgraph *)operator new();
  v15 = a1[3];
  v16 = *(const turi::sgraph **)(v15 + 16);
  if (!v16)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(a1[3]);
    v16 = *(const turi::sgraph **)(v15 + 16);
  }
  turi::sgraph::sgraph(v14, v16);
  turi::sgraph::rename_edge_fields((uint64_t)v14, a2, a3);
  v17 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v17, (const turi::unity_sgraph *)a1);
  v18 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v24, (uint64_t)v17);
  v19 = v24;
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v18);
  v21 = turi::lazy_eval_operation_dag<turi::sgraph>::add_value(dag, (uint64_t)v14);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v19 + 24), (uint64_t)v21);
  *a4 = v24;
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829D9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::select_edge_fields@<X0>(const turi::unity_sgraph *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  turi::unity_sgraph *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *dag;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *exception;
  std::vector<std::string> v30;
  uint64_t v31[3];
  __int128 v32;
  _QWORD *v33;
  _QWORD v34[3];
  __int128 v35;

  *(_QWORD *)&v35 = *MEMORY[0x24BDAC8D0];
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "select_edge_fields", 460, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet((const std::locale *)&v32, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v32);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  std::string::basic_string[abi:ne180100]<0>(&v32, turi::sgraph::SRC_COLUMN_NAME);
  std::string::basic_string[abi:ne180100]<0>(v34, turi::sgraph::DST_COLUMN_NAME);
  memset(&v30, 0, sizeof(v30));
  v31[0] = (uint64_t)&v30;
  LOBYTE(v31[1]) = 0;
  v30.__begin_ = (std::vector<std::string>::pointer)operator new(0x30uLL);
  v30.__end_ = v30.__begin_;
  v30.__end_cap_.__value_ = v30.__begin_ + 2;
  v16 = 0;
  v30.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v30.__end_cap_, &v32, &v35, v30.__begin_);
  do
  {
    if (SHIBYTE(v34[v16 + 2]) < 0)
      operator delete((void *)v34[v16]);
    v16 -= 3;
  }
  while (v16 != -6);
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v30, v30.__end_, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v17 = (turi::unity_sgraph *)operator new();
  turi::unity_sgraph::unity_sgraph(v17, a1);
  v18 = std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>(v31, (uint64_t)v17);
  v19 = v31[0];
  dag = (_QWORD *)turi::unity_sgraph::get_dag((turi::unity_sgraph *)v18);
  v21 = (_QWORD *)operator new();
  turi::select_edge_fields_op::select_edge_fields_op(v21, (__int128 **)&v30, a3, a4);
  v22 = *((_QWORD *)a1 + 3);
  v23 = operator new(8uLL);
  *(_QWORD *)&v32 = v23;
  *v23 = v22;
  *((_QWORD *)&v32 + 1) = v23 + 1;
  v33 = v23 + 1;
  v24 = turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(dag, (uint64_t (***)(_QWORD))v21, (uint64_t *)&v32);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)(v19 + 24), (uint64_t)v24);
  if ((_QWORD)v32)
  {
    *((_QWORD *)&v32 + 1) = v32;
    operator delete((void *)v32);
  }
  *((_QWORD *)&v32 + 1) = 0;
  v33 = 0;
  *(_QWORD *)&v32 = (char *)&v32 + 8;
  *a5 = *(_OWORD *)v31;
  *(_OWORD *)v31 = 0uLL;
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v32, 0);
  v25 = (std::__shared_weak_count *)v31[1];
  if (v31[1])
  {
    v26 = (unint64_t *)(v31[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)&v32 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_21829DDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::locale::~locale(&a16);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::lambda_triple_apply()
{
  turi::unity_sgraph::lambda_triple_apply(std::string const&,std::vector<std::string> const&)::$_0::operator()();
}

void turi::unity_sgraph::lambda_triple_apply_native(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  const turi::sgraph *v15;
  __int128 *v16;
  __int128 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  const std::string::value_type *v21;
  size_t v22;
  char *v23;
  size_t v24;
  const std::string::value_type *v25;
  char *v26;
  size_t v27;
  const std::string::value_type *v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  turi::sgraph *v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *exception;
  turi::sgraph *v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  char v90[8];
  char *v91;
  char v92[8];
  char *v93;
  void *v94;
  _QWORD *v95;
  unint64_t v96;
  void *v97;
  _QWORD *v98;
  unint64_t v99;
  std::string v100;
  std::string v101;
  const void **v102;
  std::string *v103;
  unint64_t v104;
  const void **v105;
  std::string *v106;
  unint64_t v107;
  turi::sgraph *v108;
  std::__shared_weak_count *v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  _QWORD v114[3];
  _QWORD *v115;
  void *v116[2];
  uint64_t v117;
  __int128 __p;
  uint64_t v119;
  _BYTE v120[24];
  _BYTE *v121;
  std::locale v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[3];
  _BYTE v126[24];
  _BYTE *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "lambda_triple_apply_native", 511, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v122, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v122);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (*a3 == a3[1])
    turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_0::operator()();
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(const turi::sgraph **)(v14 + 16);
  if (!v15)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v14);
    v15 = *(const turi::sgraph **)(v14 + 16);
  }
  std::allocate_shared[abi:ne180100]<turi::sgraph,std::allocator<turi::sgraph>,turi::sgraph&,void>(v15, &v108);
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  turi::sgraph::get_vertex_fields(v108, 0, &v101);
  turi::sgraph::get_edge_fields(v108, 0, 0, &v100);
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v92, (const void **)v101.__r_.__value_.__l.__data_, (const void **)v101.__r_.__value_.__l.__size_);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v90, (const void **)v100.__r_.__value_.__l.__data_, (const void **)v100.__r_.__value_.__l.__size_);
  v16 = *a3;
  v17 = a3[1];
  if (*a3 != v17)
  {
    do
    {
      v18 = strlen(turi::sgraph::VID_COLUMN_NAME);
      v19 = v18;
      v20 = *((unsigned __int8 *)v16 + 23);
      if (*((char *)v16 + 23) < 0)
      {
        v22 = *((_QWORD *)v16 + 1);
        if (v18 != v22)
        {
          v23 = turi::sgraph::SRC_COLUMN_NAME;
          v24 = strlen(turi::sgraph::SRC_COLUMN_NAME);
          goto LABEL_27;
        }
        if (v18 == -1)
LABEL_138:
          std::string::__throw_out_of_range[abi:ne180100]();
        v21 = *(const std::string::value_type **)v16;
      }
      else
      {
        if (v18 != v20)
        {
          v23 = turi::sgraph::SRC_COLUMN_NAME;
          v24 = strlen(turi::sgraph::SRC_COLUMN_NAME);
LABEL_24:
          v22 = v20;
          v25 = (const std::string::value_type *)v16;
          if (v24 != v20)
          {
            v26 = turi::sgraph::DST_COLUMN_NAME;
            v27 = strlen(turi::sgraph::DST_COLUMN_NAME);
LABEL_32:
            v28 = (const std::string::value_type *)v16;
            if (v27 == v20)
              goto LABEL_39;
            goto LABEL_40;
          }
          goto LABEL_30;
        }
        v21 = (const std::string::value_type *)v16;
        if (v19 == -1)
          goto LABEL_138;
      }
      if (!memcmp(v21, turi::sgraph::VID_COLUMN_NAME, v19))
        goto LABEL_137;
      v23 = turi::sgraph::SRC_COLUMN_NAME;
      v24 = strlen(turi::sgraph::SRC_COLUMN_NAME);
      if ((v20 & 0x80) == 0)
        goto LABEL_24;
      v22 = *((_QWORD *)v16 + 1);
LABEL_27:
      if (v24 != v22)
      {
        v26 = turi::sgraph::DST_COLUMN_NAME;
        v27 = strlen(turi::sgraph::DST_COLUMN_NAME);
        goto LABEL_36;
      }
      if (v22 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v25 = *(const std::string::value_type **)v16;
LABEL_30:
      if (!memcmp(v25, v23, v22))
        goto LABEL_137;
      v26 = turi::sgraph::DST_COLUMN_NAME;
      v27 = strlen(turi::sgraph::DST_COLUMN_NAME);
      if ((v20 & 0x80) == 0)
        goto LABEL_32;
      v22 = *((_QWORD *)v16 + 1);
LABEL_36:
      if (v27 == v22)
      {
        if (v22 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v28 = *(const std::string::value_type **)v16;
        v20 = v22;
LABEL_39:
        if (!memcmp(v28, v26, v20))
        {
LABEL_137:
          v122.__locale_ = (std::locale::__imp *)v16;
          turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_1::operator()();
        }
      }
LABEL_40:
      if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v92, (const void **)v16)&& !std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v90, (const void **)v16))
      {
        v122.__locale_ = (std::locale::__imp *)v16;
        turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_2::operator()();
      }
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v92, (const void **)v16))
      {
        v29 = v106;
        if ((unint64_t)v106 >= v107)
        {
          v31 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v105, v16);
        }
        else
        {
          if (*((char *)v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v106, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
          }
          else
          {
            v30 = *v16;
            v106->__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
            *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
          }
          v31 = v29 + 1;
        }
        v106 = v31;
        v32 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_, (unsigned __int8 **)v16);
        v33 = 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v32 - v101.__r_.__value_.__r.__words[0]) >> 3);
        v34 = v98;
        if ((unint64_t)v98 >= v99)
        {
          v36 = v97;
          v37 = ((char *)v98 - (_BYTE *)v97) >> 3;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v39 = v99 - (_QWORD)v97;
          if ((uint64_t)(v99 - (_QWORD)v97) >> 2 > v38)
            v38 = v39 >> 2;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v99, v40);
            v36 = v97;
            v34 = v98;
          }
          else
          {
            v41 = 0;
          }
          v42 = (unint64_t *)&v41[8 * v37];
          *v42 = v33;
          v35 = v42 + 1;
          while (v34 != v36)
          {
            v43 = *--v34;
            *--v42 = v43;
          }
          v97 = v42;
          v98 = v35;
          v99 = (unint64_t)&v41[8 * v40];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *v98 = v33;
          v35 = v34 + 1;
        }
        v98 = v35;
      }
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v90, (const void **)v16))
      {
        v44 = v103;
        if ((unint64_t)v103 >= v104)
        {
          v46 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v102, v16);
        }
        else
        {
          if (*((char *)v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v103, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
          }
          else
          {
            v45 = *v16;
            v103->__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
            *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
          }
          v46 = v44 + 1;
        }
        v103 = v46;
        v47 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_, (unsigned __int8 **)v16);
        v48 = 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v47 - v100.__r_.__value_.__r.__words[0]) >> 3);
        v49 = v95;
        if ((unint64_t)v95 >= v96)
        {
          v51 = v94;
          v52 = ((char *)v95 - (_BYTE *)v94) >> 3;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v54 = v96 - (_QWORD)v94;
          if ((uint64_t)(v96 - (_QWORD)v94) >> 2 > v53)
            v53 = v54 >> 2;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
            v55 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
          {
            v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v96, v55);
            v51 = v94;
            v49 = v95;
          }
          else
          {
            v56 = 0;
          }
          v57 = (unint64_t *)&v56[8 * v52];
          *v57 = v48;
          v50 = v57 + 1;
          while (v49 != v51)
          {
            v58 = *--v49;
            *--v57 = v58;
          }
          v94 = v57;
          v95 = v50;
          v96 = (unint64_t)&v56[8 * v55];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v95 = v48;
          v50 = v49 + 1;
        }
        v95 = v50;
      }
      v16 = (__int128 *)((char *)v16 + 24);
    }
    while (v16 != v17);
  }
  v88 = 0;
  v89 = 0;
  v87 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v87, (const std::string *)v101.__r_.__value_.__l.__data_, (const std::string *)v101.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101.__r_.__value_.__l.__size_ - v101.__r_.__value_.__r.__words[0]) >> 3));
  v85 = 0;
  v86 = 0;
  v84 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v84, (const std::string *)v100.__r_.__value_.__l.__data_, (const std::string *)v100.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 3));
  v122.__locale_ = 0;
  v123 = 0;
  v124 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v122, v87, v88, ((char *)v88 - (char *)v87) >> 4);
  memset(v125, 0, sizeof(v125));
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v125, v84, v85, ((char *)v85 - (char *)v84) >> 4);
  v59 = v126;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v126, a2);
  v128 = 0;
  v129 = 0;
  v130 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v128, v97, (uint64_t)v98, ((char *)v98 - (_BYTE *)v97) >> 3);
  v131 = 0;
  v132 = 0;
  v133 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v131, v94, (uint64_t)v95, ((char *)v95 - (_BYTE *)v94) >> 3);
  v60 = v108;
  turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3::$_3(&v110, (uint64_t)&v122);
  v121 = 0;
  v61 = (char *)operator new(0x88uLL);
  *(_OWORD *)(v61 + 8) = v110;
  *(_QWORD *)v61 = off_24D936278;
  v62 = v113;
  *((_QWORD *)v61 + 3) = v111;
  v110 = 0uLL;
  *((_OWORD *)v61 + 2) = v112;
  *((_QWORD *)v61 + 6) = v62;
  v111 = 0;
  v112 = 0uLL;
  v113 = 0;
  v63 = v114;
  v64 = (uint64_t)v115;
  if (!v115)
    goto LABEL_94;
  if (v115 != v114)
  {
    v64 = (*(uint64_t (**)(void))(*v115 + 16))();
LABEL_94:
    *((_QWORD *)v61 + 10) = v64;
    goto LABEL_96;
  }
  *((_QWORD *)v61 + 10) = v61 + 56;
  (*(void (**)(_QWORD *))(v114[0] + 24))(v114);
LABEL_96:
  v65 = v119;
  *((_QWORD *)v61 + 13) = v117;
  *(_OWORD *)(v61 + 88) = *(_OWORD *)v116;
  v116[0] = 0;
  v116[1] = 0;
  *((_OWORD *)v61 + 7) = __p;
  *((_QWORD *)v61 + 16) = v65;
  v117 = 0;
  __p = 0uLL;
  v119 = 0;
  v121 = v61;
  turi::sgraph_compute::triple_apply(v60, (uint64_t)v120, &v105, &v102, 1);
  v66 = v121;
  if (v121 == v120)
  {
    v67 = 4;
    v66 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_101;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_101:
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v116[0])
  {
    v116[1] = v116[0];
    operator delete(v116[0]);
  }
  if (v115 == v114)
  {
    v68 = 4;
  }
  else
  {
    if (!v115)
      goto LABEL_110;
    v68 = 5;
    v63 = v115;
  }
  (*(void (**)(_QWORD *))(*v63 + 8 * v68))(v63);
LABEL_110:
  *(_QWORD *)&v83 = &v112;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  *(_QWORD *)&v83 = &v110;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  v69 = operator new();
  v70 = v69;
  v81 = v108;
  v82 = v109;
  if (v109)
  {
    p_shared_owners = (unint64_t *)&v109->__shared_owners_;
    do
      v72 = __ldxr(p_shared_owners);
    while (__stxr(v72 + 1, p_shared_owners));
  }
  turi::unity_sgraph::unity_sgraph(v69, (uint64_t *)&v81);
  std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>((uint64_t *)&v83, v70);
  v73 = v82;
  if (v82)
  {
    v74 = (unint64_t *)&v82->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  *a4 = v83;
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  if (v127 == v126)
  {
    v76 = 4;
  }
  else
  {
    if (!v127)
      goto LABEL_127;
    v76 = 5;
    v59 = v127;
  }
  (*(void (**)(_QWORD *))(*v59 + 8 * v76))(v59);
LABEL_127:
  *(_QWORD *)&v83 = v125;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  *(_QWORD *)&v83 = &v122;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  v122.__locale_ = (std::locale::__imp *)&v84;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
  v122.__locale_ = (std::locale::__imp *)&v87;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v90, v91);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v92, v93);
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  v122.__locale_ = (std::locale::__imp *)&v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
  v122.__locale_ = (std::locale::__imp *)&v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
  v122.__locale_ = (std::locale::__imp *)&v102;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
  v122.__locale_ = (std::locale::__imp *)&v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
  v77 = v109;
  if (v109)
  {
    v78 = (unint64_t *)&v109->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_21829E99C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::locale::~locale((std::locale *)(v1 - 232));
  _Unwind_Resume(a1);
}

_QWORD *turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3::$_3(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 3, *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a1 + 6), a2 + 48);
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 10, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 13, *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  return a1;
}

void sub_21829ECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  void *v14;
  _QWORD *v15;
  uint64_t v16;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 88) = v14;
    operator delete(v14);
  }
  v15 = *(_QWORD **)(v10 + 72);
  if (v15 == v11)
  {
    v16 = 4;
    v15 = v11;
  }
  else
  {
    if (!v15)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_8:
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3::~$_3(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void **v7;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD **)(a1 + 72);
  if (v4 == (_QWORD *)(a1 + 48))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 48);
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v7 = (void **)(a1 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)a1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v7);
  return a1;
}

void turi::_map_to_flex_dict(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  void **v53[2];
  _BYTE v54[13];
  _BYTE v55[13];
  _QWORD v56[3];

  v56[2] = *MEMORY[0x24BDAC8D0];
  v51 = 0uLL;
  v52 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v51, a1[2]);
  v6 = (_QWORD *)*a1;
  v4 = a1 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      turi::flexible_type::flexible_type<std::string>((uint64_t)v54, (const std::string *)(v5 + 4));
      *(_QWORD *)&v55[5] = *(_QWORD *)&v54[5];
      *(_QWORD *)v55 = *(_QWORD *)v54;
      v55[12] = v54[12];
      v54[12] = 0;
      memset(v56, 0, 13);
      if (v56 != v5 + 7)
      {
        *(_QWORD *)((char *)v56 + 5) = *(_QWORD *)((char *)v5 + 61);
        v56[0] = v5[7];
        BYTE4(v56[1]) = *((_BYTE *)v5 + 68);
        if (BYTE4(v56[1]) <= 9u && ((1 << SBYTE4(v56[1])) & 0x33C) != 0)
        {
          v7 = (unint64_t *)v56[0];
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
        }
      }
      v9 = *((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1) >= v52)
      {
        v12 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v51, (uint64_t *)v55);
      }
      else
      {
        **((_QWORD **)&v51 + 1) = 0;
        *(_DWORD *)(v9 + 8) = 0;
        *(_BYTE *)(v9 + 12) = 0;
        v10 = *(_QWORD *)v55;
        *(_QWORD *)(v9 + 5) = *(_QWORD *)&v55[5];
        *(_QWORD *)v9 = v10;
        *(_BYTE *)(v9 + 12) = v55[12];
        v55[12] = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        *(_BYTE *)(v9 + 28) = 0;
        v11 = v56[0];
        *(_QWORD *)(v9 + 21) = *(_QWORD *)((char *)v56 + 5);
        *(_QWORD *)(v9 + 16) = v11;
        *(_BYTE *)(v9 + 28) = BYTE4(v56[1]);
        BYTE4(v56[1]) = 0;
        v12 = v9 + 32;
      }
      *((_QWORD *)&v51 + 1) = v12;
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v55);
      switch(v54[12])
      {
        case 2:
          v13 = *(unint64_t **)v54;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            v16 = *(_QWORD *)v54;
            if (*(_QWORD *)v54)
            {
              if (*(char *)(*(_QWORD *)v54 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)v54 + 8));
              v17 = v16;
              v18 = 0x1012C404EF22A49;
              goto LABEL_51;
            }
          }
          break;
        case 3:
          v19 = *(unint64_t **)v54;
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = *(_QWORD *)v54;
            if (*(_QWORD *)v54)
            {
              v23 = *(void **)(*(_QWORD *)v54 + 8);
              if (v23)
              {
                *(_QWORD *)(*(_QWORD *)v54 + 16) = v23;
                operator delete(v23);
              }
              v17 = v22;
              v18 = 0x1080C409938AC02;
              goto LABEL_51;
            }
          }
          break;
        case 4:
          v24 = *(unint64_t **)v54;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            v27 = *(_QWORD *)v54;
            if (*(_QWORD *)v54)
            {
              v53[0] = (void **)(*(_QWORD *)v54 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v53);
              goto LABEL_35;
            }
          }
          break;
        case 5:
          v28 = *(unint64_t **)v54;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v27 = *(_QWORD *)v54;
            if (*(_QWORD *)v54)
            {
              v53[0] = (void **)(*(_QWORD *)v54 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v53);
LABEL_35:
              v17 = v27;
              v18 = 0x1020C405E66F15BLL;
              goto LABEL_51;
            }
          }
          break;
        case 8:
          v38 = *(unint64_t **)v54;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            v41 = *(_QWORD *)v54;
            if (*(_QWORD *)v54)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v54 + 16));
              v17 = v41;
              v37 = -235920773;
              goto LABEL_50;
            }
          }
          break;
        case 9:
          v31 = *(unint64_t **)v54;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v34 = *(_QWORD *)v54;
            if (*(_QWORD *)v54)
            {
              v35 = *(void **)(*(_QWORD *)v54 + 48);
              if (v35)
              {
                *(_QWORD *)(*(_QWORD *)v54 + 56) = v35;
                operator delete(v35);
              }
              v36 = *(void **)(v34 + 24);
              if (v36)
              {
                *(_QWORD *)(v34 + 32) = v36;
                operator delete(v36);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v34 + 8);
              v17 = v34;
              v37 = 2071181815;
LABEL_50:
              v18 = v37 | 0x1030C4000000000;
LABEL_51:
              MEMORY[0x219A19A08](v17, v18);
            }
          }
          break;
        default:
          break;
      }
      v42 = (_QWORD *)v5[1];
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD *)v5[2];
          v44 = *v43 == (_QWORD)v5;
          v5 = v43;
        }
        while (!v44);
      }
      v5 = v43;
    }
    while (v43 != v4);
  }
  *(uint64_t *)((char *)a2 + 5) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 12) = 5;
  v45 = operator new();
  *(_QWORD *)v45 = 0;
  *(_QWORD *)(v45 + 8) = 0;
  *(_QWORD *)(v45 + 16) = 0;
  *(_QWORD *)(v45 + 24) = 0;
  *a2 = v45;
  *(_QWORD *)v45 = 1;
  if (*(_QWORD *)v45 != 1)
  {
    v46 = (_QWORD *)operator new();
    v47 = *(uint64_t **)(v45 + 8);
    *v46 = *(_QWORD *)v45;
    v46[2] = 0;
    v46[3] = 0;
    v46[1] = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v46 + 1, v47, *(uint64_t **)(v45 + 16), (uint64_t)(*(_QWORD *)(v45 + 16) - (_QWORD)v47) >> 5);
    *a2 = (uint64_t)v46;
    *v46 = 1;
    do
    {
      v48 = __ldaxr((unint64_t *)v45);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, (unint64_t *)v45));
    if (!v49)
    {
      *(_QWORD *)v55 = v45 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
      MEMORY[0x219A19A08](v45, 0x1020C405E66F15BLL);
    }
  }
  v50 = *a2;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(v50 + 8));
  *(_OWORD *)(v50 + 8) = v51;
  *(_QWORD *)(v50 + 24) = v52;
  v51 = 0uLL;
  v52 = 0;
  *(_QWORD *)v55 = &v51;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
}

void sub_21829F290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  uint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v19 = v17;
  MEMORY[0x219A19A08](v19, 0x1020C405E66F15BLL);
  do
  {
    v21 = __ldaxr(v18);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v18));
  if (!v22)
  {
    v23 = *v16;
    if (*v16)
    {
      a16 = (void **)(v23 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a16);
      MEMORY[0x219A19A08](v23, 0x1020C405E66F15BLL);
    }
    *v16 = 0;
  }
  *v16 = 0;
  *((_DWORD *)v16 + 2) = 0;
  *((_BYTE *)v16 + 12) = 0;
  a16 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void turi::_map_from_flex_dict(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  std::string v50;
  _OWORD *v51[2];
  uint64_t v52;
  uint64_t v53;
  void *__p;
  char v55;
  uint64_t v56;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v48 = *(_OWORD **)(MEMORY[0x24BEDB7F0] + 64);
    v49 = (_OWORD *)*MEMORY[0x24BEDB7F0];
    v47 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v46 = MEMORY[0x24BEDB848] + 16;
    while (2)
    {
      switch(*((_BYTE *)v3 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
          std::ostream::operator<<();
          std::stringbuf::str();
          v51[0] = v49;
          *(_OWORD **)((char *)v51 + *((_QWORD *)v49 - 3)) = v48;
          v52 = v47;
          v5 = v46;
          goto LABEL_12;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
          std::ostream::operator<<();
          std::stringbuf::str();
          v51[0] = v49;
          *(_OWORD **)((char *)v51 + *((_QWORD *)v49 - 3)) = v48;
          v5 = MEMORY[0x24BEDB848] + 16;
          v52 = v47;
LABEL_12:
          v53 = v5;
          if (v55 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v56);
          goto LABEL_19;
        case 2:
          v6 = *v3;
          if (*(char *)(*v3 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(v6 + 8), *(_QWORD *)(v6 + 16));
          }
          else
          {
            v7 = *(_OWORD *)(v6 + 8);
            v50.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 24);
            *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v7;
          }
          goto LABEL_19;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*v3 + 8));
          goto LABEL_19;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (uint64_t *)(*v3 + 8));
          goto LABEL_19;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*v3 + 8));
          goto LABEL_19;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v3, &v50);
          goto LABEL_19;
        case 7:
          memset(&v50, 0, sizeof(v50));
          goto LABEL_19;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_19;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (_QWORD *)(*v3 + 8));
LABEL_19:
          v51[0] = &v50;
          v8 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&v50.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v51);
          v9 = v8;
          v10 = (char *)v8 + 56;
          if (v3 + 2 != (uint64_t *)((char *)v8 + 56))
          {
            switch(*((_BYTE *)v8 + 68))
            {
              case 2:
                v11 = *(unint64_t **)v10;
                do
                {
                  v12 = __ldaxr(v11);
                  v13 = v12 - 1;
                }
                while (__stlxr(v13, v11));
                if (!v13)
                {
                  v14 = *(unint64_t **)v10;
                  if (!*(_QWORD *)v10)
                    goto LABEL_62;
                  if (*((char *)v14 + 31) < 0)
                    operator delete((void *)v14[1]);
                  v15 = v14;
                  v16 = 0x1012C404EF22A49;
                  goto LABEL_61;
                }
                break;
              case 3:
                v28 = *(unint64_t **)v10;
                do
                {
                  v29 = __ldaxr(v28);
                  v30 = v29 - 1;
                }
                while (__stlxr(v30, v28));
                if (!v30)
                {
                  v31 = *(unint64_t **)v10;
                  if (!*(_QWORD *)v10)
                    goto LABEL_62;
                  v32 = (void *)v31[1];
                  if (v32)
                  {
                    v31[2] = (unint64_t)v32;
                    operator delete(v32);
                  }
                  v15 = v31;
                  v16 = 0x1080C409938AC02;
                  goto LABEL_61;
                }
                break;
              case 4:
                v17 = *(unint64_t **)v10;
                do
                {
                  v18 = __ldaxr(v17);
                  v19 = v18 - 1;
                }
                while (__stlxr(v19, v17));
                if (!v19)
                {
                  v20 = *(unint64_t **)v10;
                  if (!*(_QWORD *)v10)
                    goto LABEL_62;
                  v51[0] = v20 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
                  goto LABEL_54;
                }
                break;
              case 5:
                v33 = *(unint64_t **)v10;
                do
                {
                  v34 = __ldaxr(v33);
                  v35 = v34 - 1;
                }
                while (__stlxr(v35, v33));
                if (!v35)
                {
                  v20 = *(unint64_t **)v10;
                  if (!*(_QWORD *)v10)
                    goto LABEL_62;
                  v51[0] = v20 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
LABEL_54:
                  v15 = v20;
                  v16 = 0x1020C405E66F15BLL;
                  goto LABEL_61;
                }
                break;
              case 8:
                v36 = *(unint64_t **)v10;
                do
                {
                  v37 = __ldaxr(v36);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, v36));
                if (!v38)
                {
                  v39 = *(unint64_t **)v10;
                  if (!*(_QWORD *)v10)
                    goto LABEL_62;
                  boost::detail::shared_count::~shared_count((unsigned int **)v39 + 2);
                  v15 = v39;
                  v27 = -235920773;
                  goto LABEL_60;
                }
                break;
              case 9:
                v21 = *(unint64_t **)v10;
                do
                {
                  v22 = __ldaxr(v21);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, v21));
                if (!v23)
                {
                  v24 = *(unint64_t **)v10;
                  if (*(_QWORD *)v10)
                  {
                    v25 = (void *)v24[6];
                    if (v25)
                    {
                      v24[7] = (unint64_t)v25;
                      operator delete(v25);
                    }
                    v26 = (void *)v24[3];
                    if (v26)
                    {
                      v24[4] = (unint64_t)v26;
                      operator delete(v26);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v24 + 1));
                    v15 = v24;
                    v27 = 2071181815;
LABEL_60:
                    v16 = v27 | 0x1030C4000000000;
LABEL_61:
                    MEMORY[0x219A19A08](v15, v16);
                  }
LABEL_62:
                  *(_QWORD *)v10 = 0;
                }
                break;
              default:
                break;
            }
            v40 = v3[2];
            *(_QWORD *)(v10 + 5) = *(uint64_t *)((char *)v3 + 21);
            *(_QWORD *)v10 = v40;
            LODWORD(v40) = *((unsigned __int8 *)v3 + 28);
            *((_BYTE *)v9 + 68) = v40;
            v41 = v40 > 9;
            v42 = (1 << v40) & 0x33C;
            if (!v41 && v42 != 0)
            {
              v44 = *(unint64_t **)v10;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 + 1, v44));
            }
          }
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
          v3 += 4;
          if (v3 == v4)
            return;
          continue;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
    }
  }
}

void sub_21829F934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v23, *(_QWORD **)(v23 + 8));
  _Unwind_Resume(a1);
}

std::locale *turi::unity_sgraph::lambda_triple_apply_native@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int *v17;
  file_logger *v18;
  file_logger *started;
  _QWORD *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  std::locale *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  std::locale *v27;
  uint64_t v28;
  std::locale *v29;
  uint64_t v30;
  std::locale *result;
  uint64_t v32;
  _QWORD *exception;
  _BYTE v34[24];
  std::locale *v35;
  _BYTE v36[24];
  _BYTE *v37;
  std::locale v38;
  std::__shared_weak_count *v39;
  std::locale *v40;
  _QWORD v41[3];
  std::locale *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  turi::get_unity_global_singleton((uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t *)&v38);
  v13 = turi::neural_net::external_float_array::shape(v38.__locale_);
  turi::toolkit_function_registry::get_native_function(v13, a2, (uint64_t)v41);
  v14 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (int *)global_logger();
  if (v17[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v17))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "lambda_triple_apply_native", 602, 1);
    v20 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && *((_BYTE *)v20 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20 + 2, (uint64_t)"Function entry", 14);
    v21 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v21 && *((_BYTE *)v21 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(v21[2] - 24) + 16));
      v22 = std::locale::use_facet(&v38, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v38);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  v23 = v42;
  if (!v42)
  {
    v40 = 0;
    goto LABEL_22;
  }
  if (v42 == (std::locale *)v41)
  {
    v40 = &v38;
    (*(void (**)(_QWORD *, std::locale *))(v41[0] + 24))(v41, &v38);
    v23 = v40;
    if (v40)
      goto LABEL_20;
LABEL_22:
    v35 = v23;
    goto LABEL_23;
  }
  v23 = (std::locale *)(*((uint64_t (**)(std::locale *))v42->__locale_ + 2))(v42);
  v40 = v23;
  if (!v23)
    goto LABEL_22;
LABEL_20:
  if (v23 != &v38)
  {
    v23 = (std::locale *)(*((uint64_t (**)(std::locale *))v23->__locale_ + 2))(v23);
    goto LABEL_22;
  }
  v35 = (std::locale *)v34;
  (*((void (**)(std::locale *, _BYTE *))v38.__locale_ + 3))(&v38, v34);
LABEL_23:
  v37 = 0;
  v24 = operator new(0x28uLL);
  *v24 = &off_24D936308;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v24 + 1), (uint64_t)v34);
  v37 = v24;
  turi::unity_sgraph::lambda_triple_apply_native(a1, (uint64_t)v36, a3, a9);
  v25 = v37;
  if (v37 == v36)
  {
    v26 = 4;
    v25 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_28;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_28:
  v27 = v35;
  if (v35 == (std::locale *)v34)
  {
    v28 = 4;
    v27 = (std::locale *)v34;
  }
  else
  {
    if (!v35)
      goto LABEL_33;
    v28 = 5;
  }
  (*((void (**)(void))v27->__locale_ + v28))();
LABEL_33:
  v29 = v40;
  if (v40 == &v38)
  {
    v30 = 4;
    v29 = &v38;
  }
  else
  {
    if (!v40)
      goto LABEL_38;
    v30 = 5;
  }
  (*((void (**)(void))v29->__locale_ + v30))();
LABEL_38:
  result = v42;
  if (v42 == (std::locale *)v41)
  {
    v32 = 4;
    result = (std::locale *)v41;
  }
  else
  {
    if (!v42)
      return result;
    v32 = 5;
  }
  return (std::locale *)(*((uint64_t (**)(void))result->__locale_ + v32))();
}

void sub_21829FCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;

  std::locale::~locale(&a18);
  v23 = *(_QWORD **)(v21 - 64);
  if (v23 == (_QWORD *)(v21 - 88))
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 88);
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::get_graph(turi::unity_sgraph *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    turi::unity_sgraph::get_graph(void)const::$_0::operator()();
  result = *(_QWORD *)(v1 + 16);
  if (!result)
  {
    turi::lazy_eval_future<turi::sgraph>::make_eager(v1);
    return *(_QWORD *)(v1 + 16);
  }
  return result;
}

void turi::unity_sgraph::get_graph(void)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_graph", 7);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "operator()", 623, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::unity_sgraph::get_graph(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21829FF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sgraph::save(turi::unity_sgraph *this, turi::oarchive *a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  char *v13;
  std::locale::__imp *v14;
  unint64_t v15;
  char *v16;
  turi::sgraph *graph;
  size_t v18;
  char **v19;
  size_t v20;
  BOOL v21;
  std::vector<char>::size_type v22;
  size_t v23;
  char **v24;
  size_t v25;
  BOOL v26;
  std::vector<char>::size_type v27;
  _QWORD *exception;
  std::locale v29;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "save", 628, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v29, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v29);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v10 = (const void *)turi::unity_sgraph::GRAPH_MAGIC_HEADER;
  v11 = strlen((const char *)turi::unity_sgraph::GRAPH_MAGIC_HEADER);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v12 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + v11 > v12)
    {
      v18 = 2 * (v12 + v11);
      *((_QWORD *)a2 + 5) = v18;
      v19 = (char **)*((_QWORD *)a2 + 2);
      if (v19)
      {
        v13 = *v19;
        v20 = v19[1] - *v19;
        v21 = v18 >= v20;
        v22 = v18 - v20;
        if (v22 != 0 && v21)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v22);
          v13 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v21)
        {
          v19[1] = &v13[v18];
        }
      }
      else
      {
        v13 = (char *)malloc_type_realloc(*((void **)a2 + 3), v18, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v13;
    }
    else
    {
      v13 = (char *)*((_QWORD *)a2 + 3);
    }
    memcpy(&v13[*((_QWORD *)a2 + 4)], v10, v11);
    *((_QWORD *)a2 + 4) += v11;
  }
  v14 = *(std::locale::__imp **)(turi::unity_sgraph::get_graph(this) + 24);
  v29.__locale_ = v14;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v15 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v15)
    {
      v23 = 2 * v15 + 16;
      *((_QWORD *)a2 + 5) = v23;
      v24 = (char **)*((_QWORD *)a2 + 2);
      if (v24)
      {
        v16 = *v24;
        v25 = v24[1] - *v24;
        v26 = v23 >= v25;
        v27 = v23 - v25;
        if (v27 != 0 && v26)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v27);
          v16 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v26)
        {
          v24[1] = &v16[v23];
        }
      }
      else
      {
        v16 = (char *)malloc_type_realloc(*((void **)a2 + 3), v23, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v16;
    }
    else
    {
      v16 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v16[*((_QWORD *)a2 + 4)] = v14;
    *((_QWORD *)a2 + 4) += 8;
  }
  graph = (turi::sgraph *)turi::unity_sgraph::get_graph(this);
  turi::sgraph::save(graph, a2);
}

void sub_2182A0288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::load(turi::unity_sgraph *this, turi::iarchive *a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  const char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  turi::sgraph *v16;
  turi::unity_sgraph *v17;
  _QWORD *dag;
  _QWORD *v19;
  _QWORD *exception;
  unint64_t v22;
  std::locale __dst[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "load", 641, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(__dst);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(&turi::dag_access_mutex);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  *(_OWORD *)&__dst[0].__locale_ = 0u;
  v24 = 0u;
  v10 = (const char *)turi::unity_sgraph::GRAPH_MAGIC_HEADER;
  v11 = strlen((const char *)turi::unity_sgraph::GRAPH_MAGIC_HEADER);
  v12 = *((_QWORD *)a2 + 2);
  if (v12)
  {
    v13 = *((_QWORD *)a2 + 3);
    memcpy(__dst, (const void *)(v12 + v13), v11);
    *((_QWORD *)a2 + 3) = v13 + v11;
  }
  else
  {
    std::istream::read();
    v10 = (const char *)turi::unity_sgraph::GRAPH_MAGIC_HEADER;
  }
  if (strcmp((const char *)__dst, v10))
    turi::unity_sgraph::load(turi::iarchive &)::$_0::operator()();
  v22 = 0;
  v14 = *((_QWORD *)a2 + 2);
  if (v14)
  {
    v15 = *((_QWORD *)a2 + 3);
    v22 = *(_QWORD *)(v14 + v15);
    *((_QWORD *)a2 + 3) = v15 + 8;
  }
  else
  {
    std::istream::read();
  }
  v16 = (turi::sgraph *)operator new();
  turi::sgraph::sgraph(v16, v22);
  turi::sgraph::load(v16, a2);
  dag = (_QWORD *)turi::unity_sgraph::get_dag(v17);
  v19 = turi::lazy_eval_operation_dag<turi::sgraph>::add_value(dag, (uint64_t)v16);
  std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>((_QWORD *)this + 3, (uint64_t)v19);
  return pthread_mutex_unlock(&turi::dag_access_mutex);
}

void sub_2182A0544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  pthread_mutex_unlock(&turi::dag_access_mutex);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::save_graph(turi::unity_sgraph *a1, uint64_t a2, std::locale::__imp *a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  int v12;
  std::locale::__imp *v13;
  uint64_t v15;
  int v17;
  int v18;
  turi::sgraph *v20;
  void *v21;
  turi::sgraph *graph;
  turi::general_ofstream *output_stream;
  _QWORD *exception;
  std::string v26;
  std::string v27;
  _BYTE v28[48];
  void *__p[2];
  char v30;
  void *v31[2];
  char v32;
  std::string v33;
  std::locale v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "save_graph", 669, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v34, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (*((char *)a3 + 23) < 0)
  {
    v15 = *((_QWORD *)a3 + 1);
    if (v15 == 4)
    {
      if (**(_DWORD **)a3 == 1852797802)
      {
LABEL_44:
        graph = (turi::sgraph *)turi::unity_sgraph::get_graph(a1);
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v27 = *(std::string *)a2;
        turi::save_sgraph_to_json(graph, (uint64_t)&v27);
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return 1;
        v21 = (void *)v27.__r_.__value_.__r.__words[0];
LABEL_43:
        operator delete(v21);
        return 1;
      }
      v15 = *((_QWORD *)a3 + 1);
    }
    else if (v15 == 6 && **(_DWORD **)a3 == 1634625890 && *(_WORD *)(*(_QWORD *)a3 + 4) == 31090)
    {
LABEL_18:
      v34.__locale_ = (std::locale::__imp *)-1;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = v39;
      v39[0] = 0;
      v39[1] = 0;
      v44 = 0;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v33 = *(std::string *)a2;
      turi::dir_archive::open_directory_for_write((uint64_t)&v34, (uint64_t)&v33, 0);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(v31, "contents");
      std::string::basic_string[abi:ne180100]<0>(__p, "graph");
      turi::dir_archive::set_metadata((uint64_t)&v34, (uint64_t)v31, (uint64_t)__p);
      if (v30 < 0)
        operator delete(__p[0]);
      if (v32 < 0)
        operator delete(v31[0]);
      *(_QWORD *)v28 = turi::dir_archive::get_output_stream((turi::dir_archive *)&v34);
      *(_QWORD *)&v28[8] = &v34;
      memset(&v28[16], 0, 32);
      output_stream = (turi::general_ofstream *)turi::dir_archive::get_output_stream((turi::dir_archive *)&v34);
      if (turi::general_ofstream::fail(output_stream))
        turi::unity_sgraph::save_graph(std::string,std::string)::$_0::operator()();
      (*(void (**)(turi::unity_sgraph *, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v28);
      turi::dir_archive::close((turi::dir_archive *)&v34);
      turi::dir_archive::~dir_archive((turi::dir_archive *)&v34);
      return 1;
    }
    if (v15 != 3)
      goto LABEL_59;
    v13 = *(std::locale::__imp **)a3;
  }
  else
  {
    v12 = *((unsigned __int8 *)a3 + 23);
    v13 = a3;
    if (v12 != 3)
    {
      if (v12 != 4)
      {
        if (v12 != 6)
          goto LABEL_59;
        if (*(_DWORD *)a3 != 1634625890 || *((_WORD *)a3 + 2) != 31090)
          goto LABEL_59;
        goto LABEL_18;
      }
      if (*(_DWORD *)a3 != 1852797802)
        goto LABEL_59;
      goto LABEL_44;
    }
  }
  v17 = *(unsigned __int16 *)v13;
  v18 = *((unsigned __int8 *)v13 + 2);
  if (v17 != 29539 || v18 != 118)
  {
LABEL_59:
    v34.__locale_ = a3;
    turi::unity_sgraph::save_graph(std::string,std::string)::$_1::operator()();
  }
  v20 = (turi::sgraph *)turi::unity_sgraph::get_graph(a1);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v26 = *(std::string *)a2;
  turi::save_sgraph_to_csv(v20, (uint64_t)&v26);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    v21 = (void *)v26.__r_.__value_.__r.__words[0];
    goto LABEL_43;
  }
  return 1;
}

void sub_2182A0E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  if (*(char *)(v55 - 201) < 0)
    operator delete(*(void **)(v55 - 224));
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2182A0F60()
{
  JUMPOUT(0x2182A0F7CLL);
}

void sub_2182A0F84(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sgraph::load_graph(uint64_t a1, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::string *v10;
  int data;
  int v12;
  BOOL v14;
  _QWORD *exception;
  std::string v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  std::string v22;
  std::string v23;
  std::locale v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sgraph.cpp", "load_graph", 705, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v24, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v24);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v24.__locale_ = (std::locale::__imp *)-1;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = v29;
  v29[0] = 0;
  v29[1] = 0;
  v34 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v23 = *(std::string *)a2;
  turi::dir_archive::open_directory_for_read((uint64_t)&v24, (uint64_t)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  memset(&v22, 0, sizeof(v22));
  std::string::basic_string[abi:ne180100]<0>(__p, "contents");
  if (!turi::dir_archive::get_metadata((uint64_t)&v24, (uint64_t)__p, &v22))
  {
    turi::unity_sarray::construct_from_sarray_index((uint64_t)__p);
    goto LABEL_34;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v22.__r_.__value_.__l.__size_ == 5)
    {
      v10 = (std::string *)v22.__r_.__value_.__r.__words[0];
      goto LABEL_20;
    }
LABEL_26:
    v14 = 1;
    goto LABEL_27;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) != 5)
    goto LABEL_26;
  v10 = &v22;
LABEL_20:
  data = (int)v10->__r_.__value_.__l.__data_;
  v12 = v10->__r_.__value_.__s.__data_[4];
  v14 = data != 1885434471 || v12 != 104;
LABEL_27:
  if (v21 < 0)
    operator delete(__p[0]);
  if (v14)
LABEL_34:
    turi::unity_sgraph::load_graph(std::string)::$_0::operator()();
  v17.__r_.__value_.__r.__words[0] = turi::dir_archive::get_input_stream((turi::dir_archive *)&v24);
  *(_OWORD *)&v17.__r_.__value_.__r.__words[1] = (unint64_t)&v24;
  v18 = 0;
  v19 = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 24))(a1, &v17);
  turi::dir_archive::close((turi::dir_archive *)&v24);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  turi::dir_archive::~dir_archive((turi::dir_archive *)&v24);
  return 1;
}

void sub_2182A163C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 185) < 0)
    operator delete(*(void **)(v51 - 208));
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2182A1780()
{
  JUMPOUT(0x2182A179CLL);
}

void sub_2182A17A4(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x2182A17ACLL);
  __clang_call_terminate(a1);
}

void sub_2182A1950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupa", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 314, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182A1B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupb", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 315, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182A1D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupa", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 303, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182A1F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupb", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 304, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182A21AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupid", 7);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 275, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182A23C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

turi::unity_sgraph *turi::unity_sgraph::unity_sgraph(turi::unity_sgraph *this, const turi::unity_sgraph *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  int v6;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24D935AA8;
  v3 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 40), 0);
  assert_msg(v6 == 0, "Mutex create error %d", v6);
  return this;
}

void sub_2182A24D8(_Unwind_Exception *a1)
{
  cppipc::ipc_object_base *v1;
  uint64_t v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  cppipc::ipc_object_base::~ipc_object_base(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::copy_vertex_field_op::copy_vertex_field_op(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 v7;
  std::string *v8;
  __int128 v9;

  *(_QWORD *)a1 = &unk_24D935BC0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v7;
  }
  v8 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)(a1 + 56) = a4;
  return a1;
}

void sub_2182A2590(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t turi::copy_vertex_field_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::copy_vertex_field(a2, (unsigned __int8 **)(a1 + 8), (std::string *)(a1 + 32), *(_QWORD *)(a1 + 56));
}

void turi::copy_vertex_field_op::~copy_vertex_field_op(void **this)
{
  *this = &unk_24D935BC0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_24D935BC0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::delete_vertex_field_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::remove_vertex_field(a2, (unsigned __int8 **)(a1 + 8), *(unsigned __int8 ***)(a1 + 32));
}

void turi::delete_vertex_field_op::~delete_vertex_field_op(void **this)
{
  *this = &unk_24D935C20;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_24D935C20;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x219A19A08);
}

turi::sgraph *turi::sgraph::sgraph(turi::sgraph *this, const turi::sgraph *a2)
{
  __int128 v4;
  __int128 v5;
  char v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this, *(__int128 **)a2, *((__int128 **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  v4 = *(_OWORD *)((char *)a2 + 24);
  v5 = *(_OWORD *)((char *)a2 + 40);
  v6 = *((_BYTE *)a2 + 56);
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 56) = v6;
  *(_OWORD *)((char *)this + 40) = v5;
  *(_OWORD *)((char *)this + 24) = v4;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  std::vector<std::vector<turi::sframe>>::__init_with_size[abi:ne180100]<std::vector<turi::sframe>*,std::vector<turi::sframe>*>((_QWORD *)this + 8, *((uint64_t **)a2 + 8), *((uint64_t **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3));
  std::map<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>::map[abi:ne180100]((uint64_t *)this + 11, (uint64_t)a2 + 88);
  return this;
}

void sub_2182A27BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<turi::sframe>>::__init_with_size[abi:ne180100]<std::vector<turi::sframe>*,std::vector<turi::sframe>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*,std::vector<turi::sframe>*,std::vector<turi::sframe>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2182A284C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*,std::vector<turi::sframe>*,std::vector<turi::sframe>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<turi::sframe>::__init_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(v4, *v6, v6[1], 0x14C1BACF914C1BADLL * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2182A291C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::sframe>::__init_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<turi::sframe>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sframe>,turi::sframe*,turi::sframe*,turi::sframe*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2182A2994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sframe>,turi::sframe*,turi::sframe*,turi::sframe*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      turi::sframe::sframe((turi::sframe *)(a4 + v7), (const turi::sframe *)(a2 + v7));
      v7 += 296;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2182A2A10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 296;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 296;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::map<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_2182A2B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_equal<std::pair<unsigned long,unsigned long>>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__construct_node<std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_equal<std::pair<unsigned long,unsigned long>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  if (a1 + 1 == a2)
    goto LABEL_3;
  v5 = *a5;
  v6 = a2[4];
  if (*a5 < v6)
    goto LABEL_3;
  if (v6 < v5)
  {
LABEL_9:
    v10 = a2[1];
    if (v10)
    {
      v11 = (_QWORD *)a2[1];
      do
      {
        a4 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      v17 = a2;
      do
      {
        a4 = (_QWORD *)v17[2];
        v13 = *a4 == (_QWORD)v17;
        v17 = a4;
      }
      while (!v13);
    }
    if (a4 != a1 + 1)
    {
      v18 = a4[4];
      if (v5 >= v18 && (v18 < v5 || a5[1] >= a4[5]))
        return std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, a3, a5);
    }
    if (v10)
    {
      *a3 = a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
    return a4;
  }
  v15 = a5[1];
  v16 = a2[5];
  if (v15 >= v16)
  {
    if (v16 >= v15)
    {
      *a3 = a2;
      *a4 = a2;
      return a4;
    }
    goto LABEL_9;
  }
LABEL_3:
  v7 = *a2;
  if ((_QWORD *)*a1 == a2)
  {
    v9 = a2;
  }
  else
  {
    if (v7)
    {
      v8 = (_QWORD *)*a2;
      do
      {
        v9 = v8;
        v8 = (_QWORD *)v8[1];
      }
      while (v8);
    }
    else
    {
      v12 = a2;
      do
      {
        v9 = (_QWORD *)v12[2];
        v13 = *v9 == (_QWORD)v12;
        v12 = v9;
      }
      while (v13);
    }
    v14 = v9[4];
    if (v14 >= *a5 && (*a5 < v14 || v9[5] >= a5[1]))
      return std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, a3, a5);
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

_QWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__construct_node<std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[2] = *(_OWORD *)a2;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 8) = 0;
  *((_QWORD *)v6 + 6) = 0;
  result = std::vector<turi::sframe>::__init_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>((_QWORD *)v6 + 6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), 0x14C1BACF914C1BADLL * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2182A2E70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 6;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 48);
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

_QWORD *turi::select_vertex_fields_op::select_vertex_fields_op(_QWORD *a1, __int128 **a2, uint64_t a3)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v11;
  uint64_t v12[2];

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &unk_24D935C70;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a3;
  v12[0] = 0;
  v12[1] = 0;
  v11 = v12;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v9 = 0;
  }
  else
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v11, (const void **)v5))
      {
        v7 = a1[2];
        if (v7 >= a1[3])
        {
          v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, v5);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, v5);
          v8 = v7 + 24;
        }
        a1[2] = v8;
        std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(&v11, v12, (const void **)v5, (uint64_t)v5);
      }
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != v6);
    v9 = (char *)v12[0];
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v11, v9);
  return a1;
}

void sub_2182A3014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char *a11)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a10, a11);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::select_vertex_fields_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::select_vertex_fields(a2, (const void ***)(a1 + 8), *(_QWORD *)(a1 + 32));
}

void turi::select_vertex_fields_op::~select_vertex_fields_op(turi::select_vertex_fields_op *this)
{
  void **v1;

  *(_QWORD *)this = &unk_24D935C70;
  v1 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &unk_24D935C70;
  v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C4069744673);
}

uint64_t turi::copy_edge_field_op::copy_edge_field_op(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v9;
  std::string *v10;
  __int128 v11;

  *(_QWORD *)a1 = &unk_24D935CC0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  v10 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_QWORD *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 64) = a5;
  return a1;
}

void sub_2182A3198(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t turi::copy_edge_field_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::copy_edge_field(a2, (unsigned __int8 **)(a1 + 8), (std::string *)(a1 + 32), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void turi::copy_edge_field_op::~copy_edge_field_op(void **this)
{
  *this = &unk_24D935CC0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_24D935CC0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::delete_edge_field_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::remove_edge_field(a2, (unsigned __int8 **)(a1 + 8), *(_QWORD *)(a1 + 32), *(unint64_t **)(a1 + 40));
}

void turi::delete_edge_field_op::~delete_edge_field_op(void **this)
{
  *this = &unk_24D935D10;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_24D935D10;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x219A19A08);
}

_QWORD *turi::select_edge_fields_op::select_edge_fields_op(_QWORD *a1, __int128 **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v12;
  uint64_t v13[2];

  *a1 = &unk_24D935D60;
  a1[1] = 0;
  v5 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a3;
  a1[5] = a4;
  v13[0] = 0;
  v13[1] = 0;
  v12 = v13;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v10 = 0;
  }
  else
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v12, (const void **)v6))
      {
        v8 = a1[2];
        if (v8 >= a1[3])
        {
          v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, v6);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, v6);
          v9 = v8 + 24;
        }
        a1[2] = v9;
        std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(&v12, v13, (const void **)v6, (uint64_t)v6);
      }
      v6 = (__int128 *)((char *)v6 + 24);
    }
    while (v6 != v7);
    v10 = (char *)v13[0];
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v12, v10);
  return a1;
}

void sub_2182A3408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char *a11)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a10, a11);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::select_edge_fields_op::execute(uint64_t a1, uint64_t a2)
{
  return turi::sgraph::select_edge_fields(a2, (const void ***)(a1 + 8), *(_QWORD *)(a1 + 32), *(unint64_t **)(a1 + 40));
}

void turi::select_edge_fields_op::~select_edge_fields_op(turi::select_edge_fields_op *this)
{
  void **v1;

  *(_QWORD *)this = &unk_24D935D60;
  v1 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &unk_24D935D60;
  v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C40AA212178);
}

void std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D935DB0;
  return result;
}

void std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D935DB0;
}

turi::sgraph *std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::operator()()
{
  turi::sgraph *v0;

  v0 = (turi::sgraph *)operator new();
  turi::sgraph::sgraph(v0, turi::SGRAPH_DEFAULT_NUM_PARTITIONS);
  return v0;
}

void sub_2182A3580(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C40CF206F44);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::unity_sgraph::get_dag(void)::$_0,std::allocator<turi::unity_sgraph::get_dag(void)::$_0>,turi::sgraph * ()(void)>::target_type()
{
}

void std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D935E40;
  return result;
}

void std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D935E40;
}

std::vector<std::string> *std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::operator()(int a1, std::vector<std::string> *this, uint64_t a3)
{
  return turi::sgraph::operator=(this, a3);
}

uint64_t std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::unity_sgraph::get_dag(void)::$_1,std::allocator<turi::unity_sgraph::get_dag(void)::$_1>,void ()(turi::sgraph &,turi::sgraph &)>::target_type()
{
}

std::vector<std::string> *turi::sgraph::operator=(std::vector<std::string> *this, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (this == (std::vector<std::string> *)a2)
  {
    v6 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 40);
    LOBYTE(this[2].__end_) = *(_BYTE *)(a2 + 56);
    *(_OWORD *)&this[1].__end_cap_.__value_ = v7;
    *(_OWORD *)&this[1].__begin_ = v6;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    v4 = *(_OWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 40);
    LOBYTE(this[2].__end_) = *(_BYTE *)(a2 + 56);
    *(_OWORD *)&this[1].__end_cap_.__value_ = v5;
    *(_OWORD *)&this[1].__begin_ = v4;
    std::vector<std::vector<turi::sframe>>::__assign_with_size[abi:ne180100]<std::vector<turi::sframe>*,std::vector<turi::sframe>*>((uint64_t)&this[2].__end_cap_, *(uint64_t **)(a2 + 64), *(uint64_t **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *> *,long>>((uint64_t **)&this[3].__end_cap_, *(_QWORD **)(a2 + 88), (_QWORD *)(a2 + 96));
  }
  return this;
}

void std::vector<std::vector<turi::sframe>>::__assign_with_size[abi:ne180100]<std::vector<turi::sframe>*,std::vector<turi::sframe>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<turi::sframe>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*,std::vector<turi::sframe>*,std::vector<turi::sframe>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sframe> *,std::vector<turi::sframe> *,std::vector<turi::sframe> *>((uint64_t)&v17, a2, v13, (uint64_t *)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::vector<turi::sframe>*,std::vector<turi::sframe>*,std::vector<turi::sframe>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sframe> *,std::vector<turi::sframe> *,std::vector<turi::sframe> *>((uint64_t)&v18, a2, a3, (uint64_t *)v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_2182A38B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2182A38BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::sframe>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sframe> *,std::vector<turi::sframe> *,std::vector<turi::sframe> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
        std::vector<turi::sframe>::__assign_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(a4, *v5, v5[1], 0x14C1BACF914C1BADLL * ((v5[1] - *v5) >> 3));
      v5 += 3;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<turi::sframe>::__assign_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t (***v14)(_QWORD);
  uint64_t (***v15)(_QWORD);
  uint64_t v16;
  uint64_t (***v17)(_QWORD);
  BOOL v18;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0x14C1BACF914C1BADLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<turi::sframe>::__vdeallocate(a1);
    if (a4 > 0xDD67C8A60DD67CLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x2983759F2298375ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x14C1BACF914C1BADLL * ((a1[2] - *a1) >> 3)) >= 0x6EB3E45306EB3ELL)
      v11 = 0xDD67C8A60DD67CLL;
    else
      v11 = v10;
    std::vector<turi::sframe>::__vallocate[abi:ne180100](a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sframe>,turi::sframe*,turi::sframe*,turi::sframe*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x14C1BACF914C1BADLL * ((a1[1] - v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,turi::sframe *,turi::sframe *,turi::sframe *,0>(a2, v13, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sframe>,turi::sframe*,turi::sframe*,turi::sframe*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = result;
    return result;
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,turi::sframe *,turi::sframe *,turi::sframe *,0>(a2, a3, v9);
  v15 = v14;
  v16 = a1[1];
  if ((uint64_t (***)(_QWORD))v16 != v14)
  {
    v17 = (uint64_t (***)(_QWORD))(v16 - 296);
    do
    {
      result = (**v17)(v17);
      v18 = v17 == v15;
      v17 -= 37;
    }
    while (!v18);
  }
  a1[1] = (uint64_t)v15;
  return result;
}

void sub_2182A3B40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2182A3B48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<turi::sframe>::__vdeallocate(_QWORD *a1)
{
  void (***v1)(_QWORD);
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  BOOL v6;

  v1 = (void (***)(_QWORD))*a1;
  if (*a1)
  {
    v3 = (void (***)(_QWORD))a1[1];
    v4 = (void (***)(_QWORD))*a1;
    if (v3 != v1)
    {
      v5 = v3 - 37;
      do
      {
        (**v5)(v5);
        v6 = v5 == v1;
        v5 -= 37;
      }
      while (!v6);
      v4 = (void (***)(_QWORD))*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,turi::sframe *,turi::sframe *,turi::sframe *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      turi::sframe::operator=(a3, v4);
      v4 += 296;
      a3 += 296;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t **std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t *v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (unint64_t *)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 6);
          std::pair<std::pair<unsigned long,unsigned long> &,std::vector<turi::sframe> &>::operator=[abi:ne180100]<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          v17 = (unint64_t *)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_multi<std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2182A3D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::pair<unsigned long,unsigned long> &,std::vector<turi::sframe> &>::operator=[abi:ne180100]<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _OWORD *v4;

  v4 = *(_OWORD **)a1;
  v3 = *(uint64_t **)(a1 + 8);
  *v4 = *(_OWORD *)a2;
  if (v3 != (uint64_t *)(a2 + 16))
    std::vector<turi::sframe>::__assign_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), 0x14C1BACF914C1BADLL * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3));
  return a1;
}

_QWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = *(_QWORD **)(a1 + 8);
  v3 = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    do
    {
      while (1)
      {
        v3 = v4;
        v7 = v4[4];
        if (v6 >= v7 && (v7 < v6 || a3[1] >= v4[5]))
          break;
        v4 = (_QWORD *)*v4;
        v8 = v3;
        if (!*v3)
          goto LABEL_11;
      }
      v4 = (_QWORD *)v4[1];
    }
    while (v4);
    v8 = v3 + 1;
  }
  else
  {
    v8 = v3;
  }
LABEL_11:
  *a2 = v3;
  return v8;
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

unint64_t *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_multi<std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  unint64_t *v6;

  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__construct_node<std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_2182A3F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::lazy_eval_operation_dag<turi::sgraph>::lazy_eval_operation_dag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  file_logger *v6;
  file_logger *started;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *exception;
  std::locale v13;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 48, a2);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 80, a3);
  v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "lazy_eval_operation_dag", 181, 1);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8 && *((_BYTE *)v8 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9)
    {
      if (*((_BYTE *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(v9[2] - 24) + 16));
        v10 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  return a1;
}

void sub_2182A40C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  std::locale::~locale(&a10);
  v14 = *(_QWORD **)(v10 + 104);
  if (v14 == v12)
  {
    v15 = 4;
    v14 = v12;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  v16 = *(_QWORD **)(v10 + 72);
  if (v16 == v11)
  {
    v17 = 4;
    v16 = v11;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_11:
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(v10 + 8);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::sgraph>::shared_ptr[abi:ne180100]<turi::sgraph,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D935ED0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2182A41B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<turi::sgraph>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::sgraph *,std::shared_ptr<turi::sgraph>::__shared_ptr_default_delete<turi::sgraph,turi::sgraph>,std::allocator<turi::sgraph>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<turi::sgraph>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::sgraph *,std::shared_ptr<turi::sgraph>::__shared_ptr_default_delete<turi::sgraph,turi::sgraph>,std::allocator<turi::sgraph>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<turi::sgraph>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(a2 + 88, *(char **)(a2 + 96));
    v4 = (void **)(a2 + 64);
    std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)a2;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x219A19A08](a2, 0x1020C40CF206F44);
  }
  return result;
}

_QWORD *std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::shared_ptr[abi:ne180100]<turi::lazy_eval_future<turi::sgraph>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D935F48;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2182A42E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<turi::lazy_eval_future<turi::sgraph> *,std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::__shared_ptr_default_delete<turi::lazy_eval_future<turi::sgraph>,turi::lazy_eval_future<turi::sgraph>>,std::allocator<turi::lazy_eval_future<turi::sgraph>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    turi::lazy_eval_future<turi::sgraph>::~lazy_eval_future(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::lazy_eval_future<turi::sgraph> *,std::shared_ptr<turi::lazy_eval_future<turi::sgraph>>::__shared_ptr_default_delete<turi::lazy_eval_future<turi::sgraph>,turi::lazy_eval_future<turi::sgraph>>,std::allocator<turi::lazy_eval_future<turi::sgraph>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t turi::lazy_eval_future<turi::sgraph>::~lazy_eval_future(uint64_t a1)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  _QWORD *exception;
  std::locale v10;

  v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "~lazy_eval_future", 80, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet(&v10, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v10);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::lazy_eval_operation_dag<turi::sgraph>::mark_for_deletion(*(_QWORD **)a1, *(_QWORD *)(a1 + 8));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 16);
  return a1;
}

void sub_2182A44D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

void turi::lazy_eval_operation_dag<turi::sgraph>::mark_for_deletion(_QWORD *a1, unint64_t a2)
{
  int *v3;
  file_logger *v4;
  file_logger *started;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  _QWORD *exception;
  unint64_t v11;
  std::locale v12;

  v11 = a2;
  v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "mark_for_deletion", 272, 1);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7)
    {
      if (*((_BYTE *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(v7[2] - 24) + 16));
        v8 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(a1 + 1, &v11))
  {
    v9 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(a1 + 1, &v11);
    if (!v9)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    *(_BYTE *)(v9[3] + 88) = 1;
    turi::lazy_eval_operation_dag<turi::sgraph>::cleanup(a1, 1);
  }
}

void sub_2182A467C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::lazy_eval_operation_dag<turi::sgraph>::cleanup(_QWORD *a1, int a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  std::locale::__imp *v13;
  std::locale::__imp *locale;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  std::locale::__imp *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::locale::__imp *v25;
  std::locale::__imp *v26;
  _QWORD *v27;
  _QWORD *exception;
  unint64_t v29;
  std::locale v30;
  std::locale::__imp *v31;
  unint64_t *v32;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "cleanup", 304, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v30, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v30.__locale_ = 0;
  v31 = 0;
  v32 = 0;
  v10 = (_QWORD *)a1[3];
  if (v10)
  {
    v11 = 0;
    do
    {
      if (*(_BYTE *)(v10[3] + 88))
      {
        v12 = v10[2];
        if (v11 >= v32)
        {
          locale = v30.__locale_;
          v15 = ((char *)v11 - (char *)v30.__locale_) >> 3;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v17 = (char *)v32 - (char *)v30.__locale_;
          if (((char *)v32 - (char *)v30.__locale_) >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v32, v18);
            locale = v30.__locale_;
            v11 = (unint64_t *)v31;
          }
          else
          {
            v19 = 0;
          }
          v20 = (std::locale::__imp *)&v19[8 * v15];
          *(_QWORD *)v20 = v12;
          v13 = (std::locale::__imp *)((char *)v20 + 8);
          while (v11 != (unint64_t *)locale)
          {
            v21 = *--v11;
            *((_QWORD *)v20 - 1) = v21;
            v20 = (std::locale::__imp *)((char *)v20 - 8);
          }
          v30.__locale_ = v20;
          v31 = v13;
          v32 = (unint64_t *)&v19[8 * v18];
          if (locale)
            operator delete(locale);
        }
        else
        {
          *v11 = v12;
          v13 = (std::locale::__imp *)(v11 + 1);
        }
        v31 = v13;
        v11 = (unint64_t *)v13;
      }
      v10 = (_QWORD *)*v10;
    }
    while (v10);
    v22 = (unint64_t *)v30.__locale_;
  }
  else
  {
    v22 = 0;
    v11 = 0;
  }
  v23 = 126 - 2 * __clz(v11 - v22);
  if (v11 == v22)
    v24 = 0;
  else
    v24 = v23;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,false>((uint64_t)v11, v11, (uint64_t)v22, v22, (uint64_t)&v29, v24, 1);
  v25 = v30.__locale_;
  v26 = v31;
  if (v30.__locale_ != v31)
  {
    do
    {
      v29 = *(_QWORD *)v25;
      v27 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(a1 + 1, &v29);
      if (!v27)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (*(_BYTE *)(v27[3] + 88))
        turi::lazy_eval_operation_dag<turi::sgraph>::delete_vertex(a1, v29, a2);
      v25 = (std::locale::__imp *)((char *)v25 + 8);
    }
    while (v25 != v26);
    v25 = v30.__locale_;
  }
  if (v25)
  {
    v31 = v25;
    operator delete(v25);
  }
}

void sub_2182A4988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::lazy_eval_operation_dag<turi::sgraph>::delete_vertex(_QWORD *a1, unint64_t a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  unint64_t v41;

  v41 = a2;
  v5 = a1 + 1;
  if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(a1 + 1, &v41))
  {
    v6 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v5, &v41);
    if (!v6)
LABEL_51:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v7 = v6[3];
    v8 = *(_QWORD *)(v7 + 72) - *(_QWORD *)(v7 + 64);
    if (v8)
    {
      if (v8 == 8 && *(_QWORD *)(v7 + 48) == *(_QWORD *)(v7 + 40))
      {
        v40 = v41;
        v10 = v7;
        if (*(_BYTE *)(v7 + 88))
        {
          v10 = v7;
          do
          {
            v11 = *(unint64_t **)(v10 + 64);
            if (*(_QWORD *)(v10 + 72) - (_QWORD)v11 != 8)
              break;
            v40 = *v11;
            v12 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v5, &v40);
            if (!v12)
              goto LABEL_51;
            v10 = v12[3];
          }
          while (*(_BYTE *)(v10 + 88));
        }
        if (!a3 || *(_QWORD *)(v10 + 16))
        {
          turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(a1, v40, &v38);
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v10 + 16), &v38);
          v14 = v38;
          v13 = v39;
          if (v39)
          {
            p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
            do
              v16 = __ldxr(p_shared_weak_owners);
            while (__stxr(v16 + 1, p_shared_weak_owners));
          }
          v17 = *(std::__shared_weak_count **)(v10 + 8);
          *(_QWORD *)v10 = v14;
          *(_QWORD *)(v10 + 8) = v13;
          if (v17)
            std::__shared_weak_count::__release_weak(v17);
          v37 = v41;
          v18 = *(unint64_t **)(v7 + 64);
          do
          {
            v36 = 0;
            v36 = *v18;
            v19 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v5, &v36);
            if (!v19)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v20 = v19[3];
            v22 = *(char **)(v20 + 40);
            v21 = *(char **)(v20 + 48);
            if (v22 != v21)
            {
              while (*(_QWORD *)v22 != v37)
              {
                v22 += 8;
                if (v22 == v21)
                {
                  v22 = *(char **)(v20 + 48);
                  break;
                }
              }
            }
            v23 = v21 - (v22 + 8);
            if (v21 != v22 + 8)
              memmove(v22, v22 + 8, v21 - (v22 + 8));
            *(_QWORD *)(v20 + 48) = &v22[v23];
            if (v7)
            {
              v24 = turi::lazy_eval_operation_dag<turi::sgraph>::vertex::~vertex((_QWORD *)v7);
              MEMORY[0x219A19A08](v24, 0x1030C40B7245AFFLL);
            }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(v5, &v37);
            v37 = v36;
            if (!*(_BYTE *)(v20 + 88))
              break;
            v18 = *(unint64_t **)(v20 + 64);
            v7 = v20;
          }
          while (*(_QWORD *)(v20 + 72) - (_QWORD)v18 == 8);
          v25 = v39;
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v27 = __ldaxr(p_shared_owners);
            while (__stlxr(v27 - 1, p_shared_owners));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
        }
      }
    }
    else
    {
      v28 = *(uint64_t **)(v7 + 40);
      v29 = *(uint64_t **)(v7 + 48);
      if (v28 == v29)
        goto LABEL_48;
      do
      {
        v38 = *v28;
        v30 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v5, (unint64_t *)&v38);
        if (!v30)
          goto LABEL_51;
        v31 = v30[3];
        v33 = *(char **)(v31 + 64);
        v32 = *(char **)(v31 + 72);
        if (v33 != v32)
        {
          while (*(_QWORD *)v33 != v41)
          {
            v33 += 8;
            if (v33 == v32)
            {
              v33 = *(char **)(v31 + 72);
              break;
            }
          }
        }
        v34 = v32 - (v33 + 8);
        if (v32 != v33 + 8)
          memmove(v33, v33 + 8, v32 - (v33 + 8));
        *(_QWORD *)(v31 + 72) = &v33[v34];
        ++v28;
      }
      while (v28 != v29);
      if (v7)
      {
LABEL_48:
        v35 = turi::lazy_eval_operation_dag<turi::sgraph>::vertex::~vertex((_QWORD *)v7);
        MEMORY[0x219A19A08](v35, 0x1030C40B7245AFFLL);
      }
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(v5, &v41);
    }
  }
}

void sub_2182A4CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,false>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  char v30;
  unint64_t v31;
  unint64_t *v32;
  BOOL v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  char v54;

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v6 = *(_QWORD *)(a4 - 8);
  v7 = *(_QWORD *)(a2 - 8);
  v8 = *(_QWORD *)(a6 - 8);
  if (v6 < v7)
  {
    if (v8 < v6)
    {
      *(_QWORD *)(a2 - 8) = v8;
      *(_QWORD *)(a6 - 8) = v7;
      return 1;
    }
    *(_QWORD *)(a2 - 8) = v6;
    *(_QWORD *)(a4 - 8) = v7;
    v11 = *(_QWORD *)(a6 - 8);
    if (v11 >= v7)
      return 1;
    *(_QWORD *)(a4 - 8) = v11;
    *(_QWORD *)(a6 - 8) = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *(_QWORD *)(a4 - 8) = v8;
    *(_QWORD *)(a6 - 8) = v6;
    v9 = *(_QWORD *)(a4 - 8);
    v10 = *(_QWORD *)(a2 - 8);
    if (v9 >= v10)
      return 1;
    *(_QWORD *)(a2 - 8) = v9;
    *(_QWORD *)(a4 - 8) = v10;
    return 2;
  }
  return 0;
}

void std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::__less<void,void> &>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v4 = *(a2 - 1);
  if (v4 >= *a4)
  {
    v8 = a2 - 1;
    do
    {
      v6 = v8;
      if (v8 <= a4)
        break;
      --v8;
    }
    while (v4 >= *(v6 - 1));
  }
  else
  {
    v5 = a2;
    do
    {
      v6 = v5 - 1;
      v7 = *(v5 - 2);
      --v5;
    }
    while (v4 >= v7);
  }
  if (v6 > a4)
  {
    do
      v9 = *a4++;
    while (v4 < v9);
  }
  while (a4 < v6)
  {
    v10 = *(v6 - 1);
    *(v6 - 1) = *(a4 - 1);
    *(a4 - 1) = v10;
    do
    {
      v11 = *(v6 - 2);
      --v6;
    }
    while (v4 >= v11);
    do
      v12 = *a4++;
    while (v4 < v12);
  }
  if (v6 + 1 != a2)
    *(a2 - 1) = *v6;
  *v6 = v4;
}

void std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::__less<void,void> &>(unint64_t *a1@<X1>, unint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v3 = 0;
  v4 = *(a1 - 1);
  do
  {
    v5 = a1[v3 - 2];
    --v3;
  }
  while (v5 < v4);
  v6 = (unint64_t)&a1[v3];
  if (v3 == -1)
  {
    do
    {
      if ((unint64_t)a2 >= v6)
        break;
      v8 = *a2++;
    }
    while (v8 >= v4);
  }
  else
  {
    do
      v7 = *a2++;
    while (v7 >= v4);
  }
  v9 = &a1[v3];
  if ((unint64_t)a2 < v6)
  {
    v10 = a2;
    do
    {
      v11 = *(v9 - 1);
      *(v9 - 1) = *(v10 - 1);
      *(v10 - 1) = v11;
      do
      {
        v12 = *(v9 - 2);
        --v9;
      }
      while (v12 < v4);
      do
        v13 = *v10++;
      while (v13 >= v4);
    }
    while (v10 < v9);
  }
  v14 = v9 + 1;
  if (v9 + 1 != a1)
    *(a1 - 1) = *v9;
  *v9 = v4;
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v14;
  *(_BYTE *)(a3 + 16) = (unint64_t)a2 >= v6;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;

  v6 = 1;
  switch((a2 - (uint64_t)a4) >> 3)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      v7 = *(_QWORD *)(a2 - 8);
      if (*a4 < v7)
      {
        *(_QWORD *)(a2 - 8) = *a4;
        *a4 = v7;
      }
      goto LABEL_18;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a2 - 8, a2 - 8, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a2 - 24, a2 - 24, a3, (uint64_t)(a4 + 1));
LABEL_18:
      v6 = 1;
      return v6 & 1;
    default:
      v8 = a2 - 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16);
      v10 = (_QWORD *)(a2 - 24);
      if ((unint64_t *)(a2 - 24) == a4)
        goto LABEL_14;
      v11 = 0;
      v9 = a2 - 24;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)(v9 - 8);
    v9 -= 8;
    v12 = v13;
    if (v13 < *(_QWORD *)(v8 - 8))
    {
      v14 = v10;
      while (1)
      {
        *(v14 - 1) = *v14;
        if (v14 + 1 == (_QWORD *)a2)
          break;
        v15 = v14 + 1;
        v16 = v14[1];
        ++v14;
        if (v12 >= v16)
          goto LABEL_12;
      }
      v15 = (_QWORD *)a2;
LABEL_12:
      *(v15 - 1) = v12;
      if (++v11 == 8)
        break;
    }
    v8 = (uint64_t)v10;
    v10 = (_QWORD *)v9;
    if ((unint64_t *)v9 == a4)
    {
LABEL_14:
      v17 = 1;
      goto LABEL_20;
    }
  }
  v17 = 0;
  LOBYTE(v9) = v9 == (_QWORD)a4;
LABEL_20:
  v6 = v17 | v9;
  return v6 & 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a3, a4, a5, a6);
  v13 = *(_QWORD *)(a8 - 8);
  v14 = *(_QWORD *)(a6 - 8);
  if (v13 < v14)
  {
    *(_QWORD *)(a6 - 8) = v13;
    *(_QWORD *)(a8 - 8) = v14;
    v15 = *(_QWORD *)(a6 - 8);
    v16 = *(_QWORD *)(a4 - 8);
    if (v15 < v16)
    {
      *(_QWORD *)(a4 - 8) = v15;
      *(_QWORD *)(a6 - 8) = v16;
      v17 = *(_QWORD *)(a4 - 8);
      v18 = *(_QWORD *)(a2 - 8);
      if (v17 < v18)
      {
        *(_QWORD *)(a2 - 8) = v17;
        *(_QWORD *)(a4 - 8) = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)(a10 - 8);
  v16 = *(_QWORD *)(a8 - 8);
  if (v15 < v16)
  {
    *(_QWORD *)(a8 - 8) = v15;
    *(_QWORD *)(a10 - 8) = v16;
    v17 = *(_QWORD *)(a8 - 8);
    v18 = *(_QWORD *)(a6 - 8);
    if (v17 < v18)
    {
      *(_QWORD *)(a6 - 8) = v17;
      *(_QWORD *)(a8 - 8) = v18;
      v19 = *(_QWORD *)(a6 - 8);
      v20 = *(_QWORD *)(a4 - 8);
      if (v19 < v20)
      {
        *(_QWORD *)(a4 - 8) = v19;
        *(_QWORD *)(a6 - 8) = v20;
        v21 = *(_QWORD *)(a4 - 8);
        v22 = *(_QWORD *)(a2 - 8);
        if (v21 < v22)
        {
          *(_QWORD *)(a2 - 8) = v21;
          *(_QWORD *)(a4 - 8) = v22;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t *v10;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = a2 - (_QWORD)a4;
  if ((unint64_t *)a2 == a4)
    return a5;
  v10 = a4;
  if (v8 >= 9)
  {
    v14 = (unint64_t)((v8 >> 3) - 2) >> 1;
    v15 = v14 + 1;
    v16 = a2 - 8 * v14;
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a7, v8 >> 3, v16, v16);
      v16 += 8;
      --v15;
    }
    while (v15);
  }
  if (v10 != a6)
  {
    v17 = v10;
    v18 = v10;
    do
    {
      v20 = *--v18;
      v19 = v20;
      v21 = *(_QWORD *)(a2 - 8);
      if (v20 < v21)
      {
        *(v17 - 1) = v21;
        *(_QWORD *)(a2 - 8) = v19;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a1, a2, a7, v8 >> 3, a1, a2);
      }
      v17 = v18;
    }
    while (v18 != a6);
  }
  if (v8 >= 9)
  {
    v22 = (unint64_t)v8 >> 3;
    do
    {
      v23 = 0;
      v24 = *(_QWORD *)(a2 - 8);
      v25 = a2;
      do
      {
        v26 = (unint64_t *)(v25 + 8 * ~v23);
        v27 = (2 * v23) | 1;
        v28 = 2 * v23 + 2;
        if (v28 < v22 && *(v26 - 1) < *(v26 - 2))
        {
          --v26;
          v27 = v28;
        }
        *(_QWORD *)(v25 - 8) = *(v26 - 1);
        v25 = (uint64_t)v26;
        v23 = v27;
      }
      while (v27 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
      v29 = v26 - 1;
      if (v26 == v10 + 1)
      {
        *v29 = v24;
      }
      else
      {
        *v29 = *v10;
        *v10 = v24;
        if (a2 - (uint64_t)v29 >= 9)
        {
          v30 = (((unint64_t)(a2 - (_QWORD)v29) >> 3) - 2) >> 1;
          v31 = a2 - 8 * v30;
          v32 = *(_QWORD *)(v31 - 8);
          v33 = *v29;
          if (v32 < v33)
          {
            do
            {
              *(v26 - 1) = v32;
              v26 = (unint64_t *)v31;
              if (!v30)
                break;
              v30 = (v30 - 1) >> 1;
              v31 = a2 - 8 * v30;
              v32 = *(_QWORD *)(v31 - 8);
            }
            while (v32 < v33);
            *(v26 - 1) = v33;
          }
        }
      }
      ++v10;
    }
    while (v22-- > 2);
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a4 >= 2)
  {
    v6 = a2 - a6;
    v7 = (unint64_t)(a4 - 2) >> 1;
    if (v7 >= (a2 - a6) >> 3)
    {
      v8 = v6 >> 2;
      v9 = (v6 >> 2) | 1;
      v10 = a2 - 8 * v9;
      v11 = v8 + 2;
      if (v11 < a4 && *(_QWORD *)(v10 - 8) < *(_QWORD *)(v10 - 16))
      {
        v10 -= 8;
        v9 = v11;
      }
      v12 = *(_QWORD *)(v10 - 8);
      v13 = *(_QWORD *)(a6 - 8);
      if (v12 >= v13)
      {
        do
        {
          *(_QWORD *)(a6 - 8) = v12;
          a6 = v10;
          if (v7 < v9)
            break;
          v14 = (2 * v9) | 1;
          v10 = a2 - 8 * v14;
          v15 = 2 * v9 + 2;
          if (v15 < a4 && *(_QWORD *)(v10 - 8) < *(_QWORD *)(v10 - 16))
          {
            v10 -= 8;
            v14 = v15;
          }
          v12 = *(_QWORD *)(v10 - 8);
          v9 = v14;
        }
        while (v12 >= v13);
        *(_QWORD *)(a6 - 8) = v13;
      }
    }
  }
}

std::__shared_weak_count *turi::lazy_eval_operation_dag<turi::sgraph>::make_eager@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int *v5;
  file_logger *v6;
  file_logger *started;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *result;
  uint64_t **i;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  _QWORD *exception;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::locale *v36;
  void *__p;
  _BYTE *v38;
  uint64_t v39;
  std::locale v40;
  uint64_t **v41;
  unint64_t v42;
  std::locale **v43;

  v42 = a2;
  v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "make_eager", 237, 1);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8 && *((_BYTE *)v8 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9)
    {
      if (*((_BYTE *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(v9[2] - 24) + 16));
        v10 = std::locale::use_facet(&v40, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v40);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v11 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(a1 + 1, &v42);
  v40.__locale_ = (std::locale::__imp *)(v11 != 0);
  if (!v11)
  {
    v36 = &v40;
    turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(unsigned long)::{lambda(void)#1}::operator()();
  }
  v12 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(a1 + 1, &v42);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v13 = (uint64_t *)v12[3];
  v14 = (std::__shared_weak_count *)v13[1];
  if (!v14 || v14->__shared_owners_ == -1)
  {
    turi::lazy_eval_operation_dag<turi::sgraph>::list_ancestors((uint64_t)a1, v42, (uint64_t)&v40);
    for (i = v41; i; i = (uint64_t **)*i)
    {
      v36 = (std::locale *)i[2];
      v38 = 0;
      v39 = 0;
      __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, i[3], (uint64_t)i[4], i[4] - i[3]);
      v17 = __p;
      if ((unint64_t)(v38 - (_BYTE *)__p) >= 9)
      {
        turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(&v34, a1, v36);
        v43 = &v36;
        v18 = std::__hash_table<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(a1 + 1), (unint64_t *)&v36, (uint64_t)&std::piecewise_construct, &v43);
        std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v18[3] + 16), &v34);
        v43 = &v36;
        v19 = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(a1 + 1), (unint64_t *)&v36, (uint64_t)&std::piecewise_construct, &v43)[3];
        v21 = v34;
        v20 = v35;
        if (v35)
        {
          p_shared_weak_owners = (unint64_t *)&v35->__shared_weak_owners_;
          do
            v23 = __ldxr(p_shared_weak_owners);
          while (__stxr(v23 + 1, p_shared_weak_owners));
        }
        v24 = (std::__shared_weak_count *)v19[1];
        *v19 = v21;
        v19[1] = (uint64_t)v20;
        if (v24)
          std::__shared_weak_count::__release_weak(v24);
        v25 = v35;
        if (v35)
        {
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v17 = __p;
      }
      if (v17)
      {
        v38 = v17;
        operator delete(v17);
      }
    }
    turi::lazy_eval_operation_dag<turi::sgraph>::preorder_compute(a1, v42, 1, a3);
    v29 = *a3;
    v28 = a3[1];
    if (v28)
    {
      v30 = (unint64_t *)(v28 + 16);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = (std::__shared_weak_count *)v13[1];
    *v13 = v29;
    v13[1] = v28;
    if (v32)
      std::__shared_weak_count::__release_weak(v32);
    return (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&v40);
  }
  else
  {
    *a3 = 0;
    result = std::__shared_weak_count::lock(v14);
    a3[1] = (uint64_t)result;
    if (result)
      *a3 = *v13;
  }
  return result;
}

void sub_2182A5BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, std::locale a15)
{
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

_QWORD *turi::lazy_eval_operation_dag<turi::sgraph>::vertex::~vertex(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vertices.count(vertex_id)", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "operator()", 239, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182A5E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::lazy_eval_operation_dag<turi::sgraph>::list_ancestors(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *__p;
  _BYTE *v31;
  _QWORD v32[6];
  uint64_t *v33;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  turi::mutable_queue<unsigned long,unsigned long>::mutable_queue(&__p);
  turi::mutable_queue<unsigned long,unsigned long>::push((uint64_t *)&__p, a2, a2);
  if (v31 - (_BYTE *)__p != 16)
  {
    v6 = (_QWORD *)(a1 + 8);
    do
    {
      v29 = 0;
      v29 = turi::mutable_queue<unsigned long,unsigned long>::pop((uint64_t *)&__p);
      if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((_QWORD *)a3, (unint64_t *)&v29))
      {
        v33 = &v29;
        v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a3, (unint64_t *)&v29, (uint64_t)&std::piecewise_construct, &v33);
        if (v7[4] - v7[3] > 8uLL)
          continue;
      }
      v8 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v6, (unint64_t *)&v29);
      if (!v8)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v9 = v8[3];
      v11 = *(unint64_t **)(v9 + 40);
      v10 = *(unint64_t **)(v9 + 48);
      while (v11 != v10)
      {
        v28 = 0;
        v28 = *v11;
        v12 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v6, (unint64_t *)&v29);
        if (!v12)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v13 = *(_QWORD *)(v12[3] + 8);
        if (!v13 || *(_QWORD *)(v13 + 8) == -1)
        {
          v33 = (uint64_t *)&v28;
          v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a3, &v28, (uint64_t)&std::piecewise_construct, &v33);
          v15 = v14;
          v16 = (uint64_t *)v14[4];
          v17 = (uint64_t)(v14 + 5);
          v18 = v14[5];
          if ((unint64_t)v16 >= v18)
          {
            v20 = (uint64_t *)v14[3];
            v21 = v16 - v20;
            if ((unint64_t)(v21 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v22 = v18 - (_QWORD)v20;
            v23 = (uint64_t)(v18 - (_QWORD)v20) >> 2;
            if (v23 <= v21 + 1)
              v23 = v21 + 1;
            if (v22 >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v23;
            if (v24)
            {
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v17, v24);
              v20 = (uint64_t *)v15[3];
              v16 = (uint64_t *)v15[4];
            }
            else
            {
              v25 = 0;
            }
            v26 = (uint64_t *)&v25[8 * v21];
            *v26 = v29;
            v19 = v26 + 1;
            while (v16 != v20)
            {
              v27 = *--v16;
              *--v26 = v27;
            }
            v15[3] = v26;
            v15[4] = v19;
            v15[5] = &v25[8 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v16 = v29;
            v19 = v16 + 1;
          }
          v15[4] = v19;
          if (!boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::find_node_impl<unsigned long,std::equal_to<unsigned long>>(v32, v28, &v28))turi::mutable_queue<unsigned long,unsigned long>::push((uint64_t *)&__p, v28, v28);
        }
        ++v11;
      }
    }
    while (v31 - (_BYTE *)__p != 16);
  }
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(v32);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
}

void sub_2182A6158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  turi::mutable_queue<unsigned long,unsigned long>::~mutable_queue((uint64_t)va);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table(v4);
  _Unwind_Resume(a1);
}

void turi::lazy_eval_operation_dag<turi::sgraph>::preorder_compute(_QWORD *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t i;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  __int128 v63;
  void *__p;
  char *v65;
  char *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;

  v70 = a2;
  v7 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(a1 + 1, &v70);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = v7[3];
  v9 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v9 || v9->__shared_owners_ == -1)
  {
    v16 = *(_QWORD *)(v8 + 48) - *(_QWORD *)(v8 + 40);
    if (!v16)
    {
      *a4 = 0;
      a4[1] = 0;
      v44 = a1[9];
      if (!v44)
        std::__throw_bad_function_call[abi:ne180100]();
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
      std::shared_ptr<turi::sgraph>::reset[abi:ne180100]<turi::sgraph,void>(a4, v45);
      v46 = *(_QWORD *)(v8 + 32);
      v47 = *a4;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v46 + 16))(v46, v47, &v67);
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      if ((a3 & 1) != 0)
        return;
      v49 = *a4;
      v48 = a4[1];
      if (v48)
      {
        v50 = (unint64_t *)(v48 + 16);
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v52 = *(std::__shared_weak_count **)(v8 + 8);
      *(_QWORD *)v8 = v49;
      *(_QWORD *)(v8 + 8) = v48;
      if (!v52)
        return;
      goto LABEL_85;
    }
    std::vector<std::shared_ptr<turi::sgraph>>::vector(&v67, v16 >> 3);
    __p = 0;
    v65 = 0;
    v66 = 0;
    v17 = *(_QWORD *)(v8 + 40);
    if (*(_QWORD *)(v8 + 48) == v17)
    {
LABEL_40:
      v33 = v67;
      *a4 = *(_QWORD *)v67;
      v34 = v33[1];
      a4[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 32) + 16))(*(_QWORD *)(v8 + 32));
      v65 = (char *)__p;
      v38 = v67;
      for (i = (uint64_t)v68; (void *)i != v38; i = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 16))
        ;
      v68 = v38;
      if ((a3 & 1) == 0)
      {
        v40 = *a4;
        v39 = a4[1];
        if (v39)
        {
          v41 = (unint64_t *)(v39 + 16);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        v43 = *(std::__shared_weak_count **)(v8 + 8);
        *(_QWORD *)v8 = v40;
        *(_QWORD *)(v8 + 8) = v39;
        if (v43)
          std::__shared_weak_count::__release_weak(v43);
      }
      if (__p)
      {
        v65 = (char *)__p;
        operator delete(__p);
      }
      __p = &v67;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      return;
    }
    v18 = 0;
    while (1)
    {
      turi::lazy_eval_operation_dag<turi::sgraph>::preorder_compute(&v63, a1, *(_QWORD *)(v17 + 8 * v18), v18 == 0);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v67 + 16 * v18, &v63);
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (!*((_QWORD *)&v63 + 1))
        goto LABEL_19;
      v20 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        if (v18)
        {
LABEL_20:
          v22 = *((_QWORD *)v67 + 2 * v18);
          v23 = v65;
          if (v65 >= v66)
          {
            v25 = (v65 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v26 = (v66 - (_BYTE *)__p) >> 2;
            if (v26 <= v25 + 1)
              v26 = v25 + 1;
            if ((unint64_t)(v66 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v66, v27);
            else
              v28 = 0;
            v29 = &v28[8 * v25];
            *(_QWORD *)v29 = v22;
            v24 = v29 + 8;
            v31 = (char *)__p;
            v30 = v65;
            if (v65 != __p)
            {
              do
              {
                v32 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              v30 = (char *)__p;
            }
            __p = v29;
            v65 = v24;
            v66 = &v28[8 * v27];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v65 = v22;
            v24 = v23 + 8;
          }
          v65 = v24;
        }
      }
      else
      {
LABEL_19:
        if (v18)
          goto LABEL_20;
      }
      ++v18;
      v17 = *(_QWORD *)(v8 + 40);
      if (v18 >= (*(_QWORD *)(v8 + 48) - v17) >> 3)
        goto LABEL_40;
    }
  }
  if (!a3)
  {
    *a4 = 0;
    v53 = std::__shared_weak_count::lock(v9);
    a4[1] = (uint64_t)v53;
    if (v53)
      *a4 = *(_QWORD *)v8;
    return;
  }
  *a4 = 0;
  a4[1] = 0;
  if (*(_QWORD *)(v8 + 32))
  {
    v10 = *(_QWORD *)(v8 + 24);
    if (!v10 || *(_QWORD *)(v10 + 8))
    {
      v11 = a1[9];
      if (v11)
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
        std::shared_ptr<turi::sgraph>::reset[abi:ne180100]<turi::sgraph,void>(a4, v12);
        v13 = *a4;
        v67 = 0;
        v68 = 0;
        v14 = *(std::__shared_weak_count **)(v8 + 8);
        if (v14)
        {
          v15 = std::__shared_weak_count::lock(v14);
          v68 = v15;
          if (v15)
            v67 = *(void **)v8;
        }
        else
        {
          v15 = 0;
        }
        v58 = a1[13];
        if (!v58)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 48))(v58, v13);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v60 = __ldaxr(p_shared_owners);
          while (__stlxr(v60 - 1, p_shared_owners));
LABEL_83:
          if (v60)
            return;
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          v52 = v15;
          goto LABEL_85;
        }
        return;
      }
LABEL_90:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a4, (uint64_t *)(v8 + 16));
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)(v8 + 16));
    v52 = *(std::__shared_weak_count **)(v8 + 8);
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    if (!v52)
      return;
LABEL_85:
    std::__shared_weak_count::__release_weak(v52);
    return;
  }
  v54 = a1[9];
  if (!v54)
    goto LABEL_90;
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 48))(v54);
  std::shared_ptr<turi::sgraph>::reset[abi:ne180100]<turi::sgraph,void>(a4, v55);
  v56 = *a4;
  v67 = 0;
  v68 = 0;
  v57 = *(std::__shared_weak_count **)(v8 + 8);
  if (v57)
  {
    v15 = std::__shared_weak_count::lock(v57);
    v68 = v15;
    if (v15)
      v67 = *(void **)v8;
  }
  else
  {
    v15 = 0;
  }
  v61 = a1[13];
  if (!v61)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 48))(v61, v56);
  if (v15)
  {
    v62 = (unint64_t *)&v15->__shared_owners_;
    do
      v60 = __ldaxr(v62);
    while (__stlxr(v60 - 1, v62));
    goto LABEL_83;
  }
}

void sub_2182A667C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

_QWORD *turi::mutable_queue<unsigned long,unsigned long>::push(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  char *v17;
  unint64_t v18;
  _QWORD *result;
  BOOL v20;
  unint64_t v21;

  v21 = a2;
  v6 = (uint64_t)(a1 + 2);
  v7 = a1[2];
  v8 = (unint64_t *)a1[1];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (unint64_t *)*a1;
    v11 = ((uint64_t)v8 - *a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v6, v14);
      v10 = (unint64_t *)*a1;
      v8 = (unint64_t *)a1[1];
    }
    else
    {
      v15 = 0;
    }
    v16 = (unint64_t *)&v15[16 * v11];
    v17 = &v15[16 * v14];
    *v16 = a2;
    v16[1] = a3;
    v9 = v16 + 2;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 2;
        v8 -= 2;
      }
      while (v8 != v10);
      v10 = (unint64_t *)*a1;
    }
    *a1 = (uint64_t)v16;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v8 = a2;
    v8[1] = a3;
    v9 = v8 + 2;
  }
  a1[1] = (uint64_t)v9;
  v18 = (((uint64_t)v9 - *a1) >> 4) - 1;
  result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::try_emplace_unique<unsigned long const&>(a1 + 3, &v21);
  result[3] = v18;
  if (v18 >= 2)
  {
    do
    {
      if (*(_QWORD *)(*a1 + 16 * (v18 >> 1) + 8) > a3)
        break;
      result = turi::mutable_queue<unsigned long,unsigned long>::swap(a1, v18, v18 >> 1);
      v20 = v18 > 3;
      v18 >>= 1;
    }
    while (v20);
  }
  return result;
}

uint64_t turi::mutable_queue<unsigned long,unsigned long>::pop(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v2 = *a1;
  v3 = a1[1];
  v5 = *(_OWORD *)(*a1 + 16);
  turi::mutable_queue<unsigned long,unsigned long>::swap(a1, 1, ((v3 - v2) >> 4) - 1);
  a1[1] -= 16;
  turi::mutable_queue<unsigned long,unsigned long>::heapify(a1, 1);
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::erase_key_unique(a1 + 3, &v5);
  return v5;
}

uint64_t turi::mutable_queue<unsigned long,unsigned long>::~mutable_queue(uint64_t a1)
{
  void *v2;

  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets((_QWORD *)(a1 + 24));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *turi::mutable_queue<unsigned long,unsigned long>::mutable_queue(_QWORD *a1)
{
  _QWORD *v2;
  __int128 v4;

  v4 = 0uLL;
  v2 = std::vector<std::pair<unsigned long,unsigned long>>::vector(a1, 1uLL, &v4);
  boost::unordered::unordered_map<unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,turi::any>>>::unordered_map((uint64_t)(v2 + 3));
  return a1;
}

void sub_2182A6944(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<unsigned long,unsigned long>>::vector(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_OWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2182A69C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *turi::mutable_queue<unsigned long,unsigned long>::swap(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *result;

  v6 = *a1;
  v7 = (unint64_t *)(*a1 + 16 * a2);
  v8 = *(_OWORD *)v7;
  *(_OWORD *)v7 = *(_OWORD *)(*a1 + 16 * a3);
  *(_OWORD *)(v6 + 16 * a3) = v8;
  v9 = a1 + 3;
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::try_emplace_unique<unsigned long const&>(a1 + 3, v7)[3] = a2;
  result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::try_emplace_unique<unsigned long const&>(v9, (unint64_t *)(*a1 + 16 * a3));
  result[3] = a3;
  return result;
}

_QWORD *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::try_emplace_unique<unsigned long const&>(_QWORD *a1, unint64_t *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v4 = *a2;
  v5 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::find_node_impl<unsigned long,std::equal_to<unsigned long>>(a1, *a2, a2);
  if (v5)
    return v5;
  v6 = operator new(0x20uLL);
  *v6 = 0;
  v6[1] = 0;
  v6[2] = *a2;
  v6[3] = 0;
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::reserve_for_insert(a1, a1[2] + 1);
  v7 = a1[1];
  v8 = v4 % v7;
  v9 = a1[5];
  v6[1] = (v4 % v7) & 0x7FFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD **)(v9 + 8 * (v4 % v7));
  if (v10)
  {
    *v6 = *v10;
    v11 = *(_QWORD *)(v9 + 8 * v8);
  }
  else
  {
    v11 = v9 + 8 * v7;
    if (*(_QWORD *)v11)
      *(_QWORD *)(v9 + 8 * *(_QWORD *)(*(_QWORD *)v11 + 8)) = v6;
    *(_QWORD *)(v9 + 8 * v8) = v11;
    *v6 = *(_QWORD *)v11;
  }
  *(_QWORD *)v11 = v6;
  ++a1[2];
  return v6;
}

void sub_2182A6B30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *turi::mutable_queue<unsigned long,unsigned long>::heapify(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = result;
  for (i = a2; ; a2 = i)
  {
    v4 = *v2;
    v5 = ((v2[1] - *v2) >> 4) - 1;
    if (2 * a2 <= v5)
    {
      if (*(_QWORD *)(v4 + 16 * a2 + 8) >= *(_QWORD *)(v4 + 32 * a2 + 8))
        i = a2;
      else
        i = 2 * a2;
    }
    v6 = (2 * a2) | 1;
    if (v6 <= v5 && *(_QWORD *)(v4 + 16 * i + 8) < *(_QWORD *)(v4 + 16 * v6 + 8))
      i = (2 * a2) | 1;
    if (i == a2)
      break;
    result = turi::mutable_queue<unsigned long,unsigned long>::swap(v2, a2, i);
  }
  return result;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::erase_key_unique(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1[2])
    return 0;
  v3 = *a2 % a1[1];
  result = (uint64_t)boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::find_previous_node((uint64_t)a1, a2, v3);
  if (!result)
    return result;
  v5 = (_QWORD *)result;
  v6 = *(uint64_t **)result;
  v7 = *v6;
  *v5 = *v6;
  --a1[2];
  if (!v7)
  {
    v9 = a1[5];
LABEL_8:
    if (*(_QWORD **)(v9 + 8 * v3) == v5)
      *(_QWORD *)(v9 + 8 * v3) = 0;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (v8 != v3)
  {
    v9 = a1[5];
    *(_QWORD *)(v9 + 8 * v8) = v5;
    goto LABEL_8;
  }
LABEL_10:
  operator delete(v6);
  return 1;
}

_QWORD *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,unsigned long>>,unsigned long,unsigned long,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::find_previous_node(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  result = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * a3);
  if (result)
  {
    v4 = (_QWORD *)*result;
    if (*result)
    {
      while (1)
      {
        v5 = v4;
        v6 = v4[1];
        if ((v6 & 0x8000000000000000) == 0)
        {
          if (v6 != a3)
            return 0;
          if (*a2 == v5[2])
            break;
        }
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2182A6EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,turi::lazy_eval_operation_dag<turi::sgraph>::vertex *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2182A7168(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::sgraph>::reset[abi:ne180100]<turi::sgraph,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::sgraph>::shared_ptr[abi:ne180100]<turi::sgraph,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::vector<std::shared_ptr<turi::sgraph>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2182A7254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unique_ptr<turi::lazy_eval_future<turi::sgraph>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::lazy_eval_future<turi::sgraph>::~lazy_eval_future(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

_QWORD *turi::lazy_eval_future<turi::sgraph>::lazy_eval_future(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *exception;
  std::locale v12;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = 0;
  a1[3] = 0;
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "lazy_eval_future", 103, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  return a1;
}

void sub_2182A7488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  uint64_t v10;

  std::locale::~locale(&a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::unity_sgraph,std::allocator<turi::unity_sgraph>,turi::unity_sgraph&,void>(const turi::unity_sgraph *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x80uLL);
  std::__shared_ptr_emplace<turi::unity_sgraph>::__shared_ptr_emplace[abi:ne180100]<turi::unity_sgraph&,std::allocator<turi::unity_sgraph>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_2182A74F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::unity_sgraph>::__shared_ptr_emplace[abi:ne180100]<turi::unity_sgraph&,std::allocator<turi::unity_sgraph>,0>(_QWORD *a1, const turi::unity_sgraph *a2)
{
  a1[2] = 0;
  *a1 = &unk_24D91ECE8;
  a1[1] = 0;
  turi::unity_sgraph::unity_sgraph((turi::unity_sgraph *)(a1 + 3), a2);
  return a1;
}

void sub_2182A7544(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void turi::lazy_eval_future<turi::sgraph>::make_eager(uint64_t a1)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *exception;
  __int128 v12;

  v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "make_eager", 107, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet((const std::locale *)&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale((std::locale *)&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::lazy_eval_operation_dag<turi::sgraph>::make_eager(*(_QWORD **)a1, *(_QWORD *)(a1 + 8), (uint64_t *)&v12);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 16, &v12);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2182A76EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::destroy(a1, a2[1]);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 6));
    operator delete(a2);
  }
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>,std::vector<turi::flexible_type>&,void>@<X0>(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>>::__shared_ptr_emplace[abi:ne180100]<std::vector<turi::flexible_type>&,std::allocator<std::vector<turi::flexible_type> const>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_2182A778C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>>::__shared_ptr_emplace[abi:ne180100]<std::vector<turi::flexible_type>&,std::allocator<std::vector<turi::flexible_type> const>,0>(uint64_t a1, uint64_t **a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_24D935FC0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)(a1 + 24), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void sub_2182A77F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D935FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D935FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<std::vector<turi::flexible_type> const,std::allocator<std::vector<turi::flexible_type> const>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_OWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v10[1] = a1 + 1;
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v11 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 48);
    operator delete(v2);
  }
}

_QWORD *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D936010;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D936010;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24D936010;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24D936010;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  turi::lazy_id_translation_functor::operator()((uint64_t **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void turi::lazy_id_translation_functor::operator()(uint64_t **a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  unint64_t *v28;
  unint64_t v29;
  std::runtime_error *exception;
  std::string *v31;
  __int128 v32;
  void *__p[2];
  void *v34[2];
  __int128 v35;
  __int128 v36;
  std::string v37;
  size_t __idx;

  v4 = 0;
  v5 = *a1;
  switch(a2[12])
  {
    case 0:
      v4 = *(_QWORD *)a2;
      goto LABEL_29;
    case 1:
      v4 = (uint64_t)*(double *)a2;
      goto LABEL_29;
    case 2:
      v9 = *(_QWORD *)a2;
      v10 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v11 = (char *)v10;
      if (*(char *)(v9 + 31) < 0)
        v11 = *v10;
      std::string::basic_string[abi:ne180100]<0>(__p, v11);
      v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v34[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v9 + 31) < 0)
        v12 = *(_QWORD *)(v9 + 16);
      else
        v12 = *(unsigned __int8 *)(v9 + 31);
      if (__idx != v12)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v31 = std::string::append(&v37, " cannot be interpreted as an integer");
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v34[0] = (void *)v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v6 = *(_QWORD *)a2;
      __p[1] = 0;
      v34[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v13 = *(_QWORD *)a2;
      __p[1] = 0;
      v34[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v37.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
      goto LABEL_28;
    case 5:
      v14 = *(_QWORD *)a2;
      __p[1] = 0;
      v34[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v37.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
      goto LABEL_28;
    case 6:
      v4 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v15 = *(_QWORD *)a2;
      v16 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *(_OWORD *)(v15 + 24);
      v20 = *(_OWORD *)(v15 + 56);
      v35 = *(_OWORD *)(v15 + 40);
      v36 = v20;
      *(_OWORD *)v34 = v19;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v35 + 1))
      {
        *(_QWORD *)&v36 = *((_QWORD *)&v35 + 1);
        operator delete(*((void **)&v35 + 1));
      }
      if (v34[0])
      {
        v34[1] = v34[0];
        operator delete(v34[0]);
      }
      v4 = (unint64_t)__p[1];
      if (!__p[1])
        goto LABEL_29;
      v7 = (unint64_t *)((char *)__p[1] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v4 + 16))(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
LABEL_28:
      v4 = 0;
LABEL_29:
      v21 = *v5;
      if (v4 >= (v5[1] - *v5) >> 4)
        std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)a3 = 0;
      v22 = (uint64_t *)(v21 + 16 * v4);
      *(_DWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 12) = 0;
      if (v22 != (uint64_t *)a3)
      {
        v23 = *v22;
        *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)v22 + 5);
        *(_QWORD *)a3 = v23;
        v24 = *((unsigned __int8 *)v22 + 12);
        *(_BYTE *)(a3 + 12) = v24;
        v25 = v24 > 9;
        v26 = (1 << v24) & 0x33C;
        if (!v25 && v26 != 0)
        {
          v28 = *(unint64_t **)a3;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
        }
      }
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_2182A7E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

_QWORD *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D936090;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D936090;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24D936090;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24D936090;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  turi::lazy_id_translation_functor::operator()((uint64_t **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1,std::allocator<turi::unity_sgraph::get_edges_lazy(unsigned long,unsigned long)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t *std::shared_ptr<turi::unity_sgraph>::shared_ptr[abi:ne180100]<turi::unity_sgraph,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D936110;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2182A80EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::unity_sgraph *,std::shared_ptr<turi::unity_sgraph>::__shared_ptr_default_delete<turi::unity_sgraph,turi::unity_sgraph>,std::allocator<turi::unity_sgraph>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::unity_sgraph *,std::shared_ptr<turi::unity_sgraph>::__shared_ptr_default_delete<turi::unity_sgraph,turi::unity_sgraph>,std::allocator<turi::unity_sgraph>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"operation != __null", 19);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "operator()", 215, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182A825C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"operation->num_arguments()", 26);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"parents.size()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/lazy_eval/lazy_eval_operation_dag.hpp", "operator()", 216, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::lazy_eval_operation_dag<turi::sgraph>::add_operation(turi::lazy_eval_operation_base<turi::sgraph> *,std::vector<turi::lazy_eval_future<turi::sgraph> *,std::allocator<turi::lazy_eval_future<turi::sgraph> *>> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182A8470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

std::string *turi::add_vertices_op<turi::sframe>::add_vertices_op(std::string *a1, std::string::size_type *a2, __int128 *a3, std::string::size_type a4)
{
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;
  std::string *v9;
  __int128 v10;

  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D936188;
  v6 = a2[1];
  a1->__r_.__value_.__l.__size_ = *a2;
  a1->__r_.__value_.__r.__words[2] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    a1[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  a1[2].__r_.__value_.__r.__words[0] = a4;
  return a1;
}

void sub_2182A8588(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::add_vertices_op<turi::sframe>::execute(uint64_t a1, turi::sgraph *a2)
{
  _QWORD v4[38];

  v4[37] = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe((turi::sframe *)v4, *(const turi::sframe **)(a1 + 8));
  turi::sgraph::add_vertices(a2, (uint64_t)v4, (unsigned __int8 **)(a1 + 24), 0);
  turi::sframe::~sframe((turi::sframe *)v4);
}

void sub_2182A8620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::sframe::~sframe((turi::sframe *)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::add_vertices_op<turi::sframe>::~add_vertices_op(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D936188;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void turi::add_vertices_op<turi::sframe>::~add_vertices_op(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D936188;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x219A19A08);
}

std::string *turi::add_edges_op<turi::sframe>::add_edges_op(std::string *a1, std::string::size_type *a2, __int128 *a3, __int128 *a4, std::string::size_type a5, std::string::size_type a6)
{
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;

  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D9361D8;
  v10 = a2[1];
  a1->__r_.__value_.__l.__size_ = *a2;
  a1->__r_.__value_.__r.__words[2] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v13 = *a3;
    a1[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&a1[1].__r_.__value_.__l.__data_ = v13;
  }
  v14 = a1 + 2;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v15 = *a4;
    a1[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  a1[3].__r_.__value_.__r.__words[0] = a5;
  a1[3].__r_.__value_.__l.__size_ = a6;
  return a1;
}

void sub_2182A87A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 47) < 0)
    operator delete(*v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::add_edges_op<turi::sframe>::execute(uint64_t a1, turi::sgraph *a2)
{
  _QWORD v4[38];

  v4[37] = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe((turi::sframe *)v4, *(const turi::sframe **)(a1 + 8));
  turi::sgraph::add_edges(a2, (uint64_t)v4, (unsigned __int8 **)(a1 + 24), (unsigned __int8 **)(a1 + 48), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  turi::sframe::~sframe((turi::sframe *)v4);
}

void sub_2182A885C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::sframe::~sframe((turi::sframe *)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::add_edges_op<turi::sframe>::~add_edges_op(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D9361D8;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void turi::add_edges_op<turi::sframe>::~add_edges_op(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D9361D8;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x219A19A08);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sgraph,std::allocator<turi::sgraph>,turi::sgraph&,void>@<X0>(const turi::sgraph *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x88uLL);
  result = std::__shared_ptr_emplace<turi::sgraph>::__shared_ptr_emplace[abi:ne180100]<turi::sgraph&,std::allocator<turi::sgraph>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2182A897C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sgraph>::__shared_ptr_emplace[abi:ne180100]<turi::sgraph&,std::allocator<turi::sgraph>,0>(_QWORD *a1, const turi::sgraph *a2)
{
  a1[2] = 0;
  *a1 = &unk_24D936228;
  a1[1] = 0;
  turi::sgraph::sgraph((turi::sgraph *)(a1 + 3), a2);
  return a1;
}

void sub_2182A89C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sgraph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D936228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sgraph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D936228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::sgraph>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<turi::sgraph>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<turi::sgraph>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(a2 + 88, *(char **)(a2 + 96));
  v3 = (void **)(a2 + 64);
  std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)a2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

_QWORD *std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(_QWORD *result, const std::string *a2, const std::string *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,std::string const*,std::string const*,turi::flexible_type*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2182A8AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,std::string const*,std::string const*,turi::flexible_type*>(uint64_t a1, const std::string *a2, const std::string *a3, uint64_t a4)
{
  uint64_t v4;
  const std::string *v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      turi::flexible_type::flexible_type<std::string>(v4, v6++);
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2182A8BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::~__func(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void **v7;

  *(_QWORD *)a1 = off_24D936278;
  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD **)(a1 + 80);
  if (v4 == (_QWORD *)(a1 + 56))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 56);
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v7 = (void **)(a1 + 32);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v7);
  return a1;
}

{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void **v7;

  *(_QWORD *)a1 = off_24D936278;
  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD **)(a1 + 80);
  if (v4 == (_QWORD *)(a1 + 56))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 56);
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v7 = (void **)(a1 + 32);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v7);
  return MEMORY[0x219A19A08](a1, 0x10B1C4021313D50);
}

_QWORD *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x88uLL);
  *v2 = off_24D936278;
  turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3::$_3(v2 + 1, v1);
  return v2;
}

void sub_2182A8D5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24D936278;
  return turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3::$_3(a2 + 1, a1 + 8);
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::operator()(uint64_t a1, uint64_t **a2)
{
  std::__invoke[abi:ne180100]<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3 &,turi::sgraph_compute::edge_scope &>((_QWORD *)(a1 + 8), a2);
}

uint64_t std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::target_type()
{
}

void std::__function::__alloc_func<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3>,void ()(turi::sgraph_compute::edge_scope &)>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD **)(a1 + 72);
  if (v4 == (_QWORD *)(a1 + 48))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 48);
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v6 = (void **)(a1 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)a1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void std::__invoke[abi:ne180100]<turi::unity_sgraph::lambda_triple_apply_native(std::function<void ()(turi::edge_triple &)> const&,std::vector<std::string> const&)::$_3 &,turi::sgraph_compute::edge_scope &>(_QWORD *a1, uint64_t **this)
{
  uint64_t v4;
  unint64_t v5;
  turi::flexible_type_impl *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  void *v28;
  void *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  unint64_t *v47;
  unint64_t v48;
  turi::flexible_type_impl *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  _OWORD *v53;
  _OWORD *v54;
  uint64_t *v55;
  char *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  void *v71;
  void *v72;
  unsigned int v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  void *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  int v87;
  unint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  turi::flexible_type_impl *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  _OWORD *v98;
  _OWORD *v99;
  uint64_t *v100;
  char *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  void *v116;
  void *v117;
  unsigned int v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  void *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  int v132;
  unint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  turi::flexible_type_impl *v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  _OWORD *v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  void *v161;
  void *v162;
  unsigned int v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  void *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  turi::flexible_type_impl *v177;
  uint64_t v178;
  __int128 v179;
  _OWORD *v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t *v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t *v195;
  void *v196;
  void *v197;
  unsigned int v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t *v202;
  void *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t *v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t v214;
  turi::flexible_type_impl *v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  _OWORD *v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t *v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t *v234;
  void *v235;
  void *v236;
  unsigned int v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t *v241;
  void *v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _OWORD *v255;
  _OWORD *v256;
  _OWORD *v257;
  _OWORD *v258;
  _OWORD *v259;
  _OWORD *v260;
  _OWORD *v261;
  _OWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  std::string v267;
  uint64_t *v268;
  _QWORD *v269[2];
  uint64_t *v270;
  _QWORD *v271[2];
  uint64_t *v272;
  _QWORD *v273[2];
  _OWORD *v274[2];
  uint64_t v275;
  uint64_t v276;
  void *__p;
  char v278;
  _BYTE v279[159];

  turi::sgraph_compute::edge_scope::lock_vertices((uint64_t)this);
  v268 = (uint64_t *)v269;
  v269[0] = 0;
  v271[0] = 0;
  v271[1] = 0;
  v269[1] = 0;
  v270 = (uint64_t *)v271;
  v273[0] = 0;
  v273[1] = 0;
  v272 = (uint64_t *)v273;
  v4 = **this;
  if ((*this)[1] != v4)
  {
    v5 = 0;
    v255 = (_OWORD *)*MEMORY[0x24BEDB7F0];
    v259 = *(_OWORD **)(MEMORY[0x24BEDB7F0] + 64);
    v263 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v251 = MEMORY[0x24BEDB848] + 16;
    while (2)
    {
      v6 = (turi::flexible_type_impl *)(*a1 + 16 * v5);
      switch(*((_BYTE *)v6 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
          std::ostream::operator<<();
          std::stringbuf::str();
          v274[0] = v255;
          *(_OWORD **)((char *)v274 + *((_QWORD *)v255 - 3)) = v259;
          v275 = v263;
          v7 = v251;
          goto LABEL_12;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
          std::ostream::operator<<();
          std::stringbuf::str();
          v274[0] = v255;
          *(_OWORD **)((char *)v274 + *((_QWORD *)v255 - 3)) = v259;
          v7 = MEMORY[0x24BEDB848] + 16;
          v275 = v263;
LABEL_12:
          v276 = v7;
          if (v278 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v279);
          goto LABEL_19;
        case 2:
          v8 = *(_QWORD *)v6;
          if (*(char *)(*(_QWORD *)v6 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
          }
          else
          {
            v9 = *(_OWORD *)(v8 + 8);
            v267.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
            *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v9;
          }
          goto LABEL_19;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v6 + 8));
          goto LABEL_19;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (uint64_t *)(*(_QWORD *)v6 + 8));
          goto LABEL_19;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v6 + 8));
          goto LABEL_19;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v6, &v267);
          goto LABEL_19;
        case 7:
          memset(&v267, 0, sizeof(v267));
          goto LABEL_19;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_19;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v6 + 8));
LABEL_19:
          v274[0] = &v267;
          v10 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v268, (const void **)&v267.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v274);
          v11 = v10;
          v12 = (uint64_t *)(v4 + 16 * v5);
          v13 = (char *)v10 + 56;
          if (v12 != (uint64_t *)((char *)v10 + 56))
          {
            switch(*((_BYTE *)v10 + 68))
            {
              case 2:
                v14 = *(unint64_t **)v13;
                do
                {
                  v15 = __ldaxr(v14);
                  v16 = v15 - 1;
                }
                while (__stlxr(v16, v14));
                if (!v16)
                {
                  v17 = *(unint64_t **)v13;
                  if (!*(_QWORD *)v13)
                    goto LABEL_62;
                  if (*((char *)v17 + 31) < 0)
                    operator delete((void *)v17[1]);
                  v18 = v17;
                  v19 = 0x1012C404EF22A49;
                  goto LABEL_61;
                }
                break;
              case 3:
                v31 = *(unint64_t **)v13;
                do
                {
                  v32 = __ldaxr(v31);
                  v33 = v32 - 1;
                }
                while (__stlxr(v33, v31));
                if (!v33)
                {
                  v34 = *(unint64_t **)v13;
                  if (!*(_QWORD *)v13)
                    goto LABEL_62;
                  v35 = (void *)v34[1];
                  if (v35)
                  {
                    v34[2] = (unint64_t)v35;
                    operator delete(v35);
                  }
                  v18 = v34;
                  v19 = 0x1080C409938AC02;
                  goto LABEL_61;
                }
                break;
              case 4:
                v20 = *(unint64_t **)v13;
                do
                {
                  v21 = __ldaxr(v20);
                  v22 = v21 - 1;
                }
                while (__stlxr(v22, v20));
                if (!v22)
                {
                  v23 = *(unint64_t **)v13;
                  if (!*(_QWORD *)v13)
                    goto LABEL_62;
                  v274[0] = v23 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
                  goto LABEL_54;
                }
                break;
              case 5:
                v36 = *(unint64_t **)v13;
                do
                {
                  v37 = __ldaxr(v36);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, v36));
                if (!v38)
                {
                  v23 = *(unint64_t **)v13;
                  if (!*(_QWORD *)v13)
                    goto LABEL_62;
                  v274[0] = v23 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
LABEL_54:
                  v18 = v23;
                  v19 = 0x1020C405E66F15BLL;
                  goto LABEL_61;
                }
                break;
              case 8:
                v39 = *(unint64_t **)v13;
                do
                {
                  v40 = __ldaxr(v39);
                  v41 = v40 - 1;
                }
                while (__stlxr(v41, v39));
                if (!v41)
                {
                  v42 = *(unint64_t **)v13;
                  if (!*(_QWORD *)v13)
                    goto LABEL_62;
                  boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
                  v18 = v42;
                  v30 = -235920773;
                  goto LABEL_60;
                }
                break;
              case 9:
                v24 = *(unint64_t **)v13;
                do
                {
                  v25 = __ldaxr(v24);
                  v26 = v25 - 1;
                }
                while (__stlxr(v26, v24));
                if (!v26)
                {
                  v27 = *(unint64_t **)v13;
                  if (*(_QWORD *)v13)
                  {
                    v28 = (void *)v27[6];
                    if (v28)
                    {
                      v27[7] = (unint64_t)v28;
                      operator delete(v28);
                    }
                    v29 = (void *)v27[3];
                    if (v29)
                    {
                      v27[4] = (unint64_t)v29;
                      operator delete(v29);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v27 + 1));
                    v18 = v27;
                    v30 = 2071181815;
LABEL_60:
                    v19 = v30 | 0x1030C4000000000;
LABEL_61:
                    MEMORY[0x219A19A08](v18, v19);
                  }
LABEL_62:
                  *(_QWORD *)v13 = 0;
                }
                break;
              default:
                break;
            }
            v43 = *v12;
            *(_QWORD *)(v13 + 5) = *(uint64_t *)((char *)v12 + 5);
            *(_QWORD *)v13 = v43;
            LODWORD(v43) = *((unsigned __int8 *)v12 + 12);
            *((_BYTE *)v11 + 68) = v43;
            v44 = v43 > 9;
            v45 = (1 << v43) & 0x33C;
            if (!v44 && v45 != 0)
            {
              v47 = *(unint64_t **)v13;
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 + 1, v47));
            }
          }
          if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v267.__r_.__value_.__l.__data_);
          v49 = (turi::flexible_type_impl *)(*a1 + 16 * v5);
          v50 = *this[1];
          switch(*((_BYTE *)v49 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_80;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_80:
              v274[0] = v255;
              *(_OWORD **)((char *)v274 + *((_QWORD *)v255 - 3)) = v259;
              v275 = v263;
              v276 = MEMORY[0x24BEDB848] + 16;
              if (v278 < 0)
                operator delete(__p);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x219A198F4](v279);
              break;
            case 2:
              v51 = *(_QWORD *)v49;
              if (*(char *)(*(_QWORD *)v49 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(v51 + 8), *(_QWORD *)(v51 + 16));
              }
              else
              {
                v52 = *(_OWORD *)(v51 + 8);
                v267.__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 24);
                *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v52;
              }
              break;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v49 + 8));
              break;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (uint64_t *)(*(_QWORD *)v49 + 8));
              break;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v49 + 8));
              break;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v49, &v267);
              break;
            case 7:
              memset(&v267, 0, sizeof(v267));
              break;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              break;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v49 + 8));
              break;
            default:
              goto LABEL_408;
          }
          v274[0] = &v267;
          v53 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v272, (const void **)&v267.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v274);
          v54 = v53;
          v55 = (uint64_t *)(v50 + 16 * v5);
          v56 = (char *)v53 + 56;
          if (v55 != (uint64_t *)((char *)v53 + 56))
          {
            switch(*((_BYTE *)v53 + 68))
            {
              case 2:
                v57 = *(unint64_t **)v56;
                do
                {
                  v58 = __ldaxr(v57);
                  v59 = v58 - 1;
                }
                while (__stlxr(v59, v57));
                if (!v59)
                {
                  v60 = *(unint64_t **)v56;
                  if (!*(_QWORD *)v56)
                    goto LABEL_130;
                  if (*((char *)v60 + 31) < 0)
                    operator delete((void *)v60[1]);
                  v61 = v60;
                  v62 = 0x1012C404EF22A49;
                  goto LABEL_129;
                }
                break;
              case 3:
                v74 = *(unint64_t **)v56;
                do
                {
                  v75 = __ldaxr(v74);
                  v76 = v75 - 1;
                }
                while (__stlxr(v76, v74));
                if (!v76)
                {
                  v77 = *(unint64_t **)v56;
                  if (!*(_QWORD *)v56)
                    goto LABEL_130;
                  v78 = (void *)v77[1];
                  if (v78)
                  {
                    v77[2] = (unint64_t)v78;
                    operator delete(v78);
                  }
                  v61 = v77;
                  v62 = 0x1080C409938AC02;
                  goto LABEL_129;
                }
                break;
              case 4:
                v63 = *(unint64_t **)v56;
                do
                {
                  v64 = __ldaxr(v63);
                  v65 = v64 - 1;
                }
                while (__stlxr(v65, v63));
                if (!v65)
                {
                  v66 = *(unint64_t **)v56;
                  if (!*(_QWORD *)v56)
                    goto LABEL_130;
                  v274[0] = v66 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
                  goto LABEL_122;
                }
                break;
              case 5:
                v79 = *(unint64_t **)v56;
                do
                {
                  v80 = __ldaxr(v79);
                  v81 = v80 - 1;
                }
                while (__stlxr(v81, v79));
                if (!v81)
                {
                  v66 = *(unint64_t **)v56;
                  if (!*(_QWORD *)v56)
                    goto LABEL_130;
                  v274[0] = v66 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
LABEL_122:
                  v61 = v66;
                  v62 = 0x1020C405E66F15BLL;
                  goto LABEL_129;
                }
                break;
              case 8:
                v82 = *(unint64_t **)v56;
                do
                {
                  v83 = __ldaxr(v82);
                  v84 = v83 - 1;
                }
                while (__stlxr(v84, v82));
                if (!v84)
                {
                  v85 = *(unint64_t **)v56;
                  if (!*(_QWORD *)v56)
                    goto LABEL_130;
                  boost::detail::shared_count::~shared_count((unsigned int **)v85 + 2);
                  v61 = v85;
                  v73 = -235920773;
                  goto LABEL_128;
                }
                break;
              case 9:
                v67 = *(unint64_t **)v56;
                do
                {
                  v68 = __ldaxr(v67);
                  v69 = v68 - 1;
                }
                while (__stlxr(v69, v67));
                if (!v69)
                {
                  v70 = *(unint64_t **)v56;
                  if (*(_QWORD *)v56)
                  {
                    v71 = (void *)v70[6];
                    if (v71)
                    {
                      v70[7] = (unint64_t)v71;
                      operator delete(v71);
                    }
                    v72 = (void *)v70[3];
                    if (v72)
                    {
                      v70[4] = (unint64_t)v72;
                      operator delete(v72);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v70 + 1));
                    v61 = v70;
                    v73 = 2071181815;
LABEL_128:
                    v62 = v73 | 0x1030C4000000000;
LABEL_129:
                    MEMORY[0x219A19A08](v61, v62);
                  }
LABEL_130:
                  *(_QWORD *)v56 = 0;
                }
                break;
              default:
                break;
            }
            v86 = *v55;
            *(_QWORD *)(v56 + 5) = *(uint64_t *)((char *)v55 + 5);
            *(_QWORD *)v56 = v86;
            LODWORD(v86) = *((unsigned __int8 *)v55 + 12);
            *((_BYTE *)v54 + 68) = v86;
            v44 = v86 > 9;
            v87 = (1 << v86) & 0x33C;
            if (!v44 && v87 != 0)
            {
              v89 = *(unint64_t **)v56;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 + 1, v89));
            }
          }
          if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v267.__r_.__value_.__l.__data_);
          ++v5;
          v4 = **this;
          if (v5 >= ((*this)[1] - v4) >> 4)
            break;
          continue;
        default:
LABEL_408:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
      break;
    }
  }
  v91 = this[2];
  v92 = *v91;
  if (v91[1] != *v91)
  {
    v93 = 0;
    v256 = *(_OWORD **)(MEMORY[0x24BEDB7F0] + 64);
    v260 = (_OWORD *)*MEMORY[0x24BEDB7F0];
    v264 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v252 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v94 = (turi::flexible_type_impl *)(a1[3] + 16 * v93);
      switch(*((_BYTE *)v94 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
          std::ostream::operator<<();
          std::stringbuf::str();
          v274[0] = v260;
          *(_OWORD **)((char *)v274 + *((_QWORD *)v260 - 3)) = v256;
          v275 = v264;
          v95 = v252;
          goto LABEL_151;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
          std::ostream::operator<<();
          std::stringbuf::str();
          v274[0] = v260;
          *(_OWORD **)((char *)v274 + *((_QWORD *)v260 - 3)) = v256;
          v95 = MEMORY[0x24BEDB848] + 16;
          v275 = v264;
LABEL_151:
          v276 = v95;
          if (v278 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v279);
          break;
        case 2:
          v96 = *(_QWORD *)v94;
          if (*(char *)(*(_QWORD *)v94 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(v96 + 8), *(_QWORD *)(v96 + 16));
          }
          else
          {
            v97 = *(_OWORD *)(v96 + 8);
            v267.__r_.__value_.__r.__words[2] = *(_QWORD *)(v96 + 24);
            *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v97;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v94 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (uint64_t *)(*(_QWORD *)v94 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v94 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v94, &v267);
          break;
        case 7:
          memset(&v267, 0, sizeof(v267));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v94 + 8));
          break;
        default:
          goto LABEL_408;
      }
      v274[0] = &v267;
      v98 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v270, (const void **)&v267.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v274);
      v99 = v98;
      v100 = (uint64_t *)(v92 + 16 * v93);
      v101 = (char *)v98 + 56;
      if (v100 != (uint64_t *)((char *)v98 + 56))
      {
        switch(*((_BYTE *)v98 + 68))
        {
          case 2:
            v102 = *(unint64_t **)v101;
            do
            {
              v103 = __ldaxr(v102);
              v104 = v103 - 1;
            }
            while (__stlxr(v104, v102));
            if (!v104)
            {
              v105 = *(unint64_t **)v101;
              if (!*(_QWORD *)v101)
                goto LABEL_201;
              if (*((char *)v105 + 31) < 0)
                operator delete((void *)v105[1]);
              v106 = v105;
              v107 = 0x1012C404EF22A49;
              goto LABEL_200;
            }
            break;
          case 3:
            v119 = *(unint64_t **)v101;
            do
            {
              v120 = __ldaxr(v119);
              v121 = v120 - 1;
            }
            while (__stlxr(v121, v119));
            if (!v121)
            {
              v122 = *(unint64_t **)v101;
              if (!*(_QWORD *)v101)
                goto LABEL_201;
              v123 = (void *)v122[1];
              if (v123)
              {
                v122[2] = (unint64_t)v123;
                operator delete(v123);
              }
              v106 = v122;
              v107 = 0x1080C409938AC02;
              goto LABEL_200;
            }
            break;
          case 4:
            v108 = *(unint64_t **)v101;
            do
            {
              v109 = __ldaxr(v108);
              v110 = v109 - 1;
            }
            while (__stlxr(v110, v108));
            if (!v110)
            {
              v111 = *(unint64_t **)v101;
              if (!*(_QWORD *)v101)
                goto LABEL_201;
              v274[0] = v111 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
              goto LABEL_193;
            }
            break;
          case 5:
            v124 = *(unint64_t **)v101;
            do
            {
              v125 = __ldaxr(v124);
              v126 = v125 - 1;
            }
            while (__stlxr(v126, v124));
            if (!v126)
            {
              v111 = *(unint64_t **)v101;
              if (!*(_QWORD *)v101)
                goto LABEL_201;
              v274[0] = v111 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
LABEL_193:
              v106 = v111;
              v107 = 0x1020C405E66F15BLL;
              goto LABEL_200;
            }
            break;
          case 8:
            v127 = *(unint64_t **)v101;
            do
            {
              v128 = __ldaxr(v127);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v127));
            if (!v129)
            {
              v130 = *(unint64_t **)v101;
              if (!*(_QWORD *)v101)
                goto LABEL_201;
              boost::detail::shared_count::~shared_count((unsigned int **)v130 + 2);
              v106 = v130;
              v118 = -235920773;
              goto LABEL_199;
            }
            break;
          case 9:
            v112 = *(unint64_t **)v101;
            do
            {
              v113 = __ldaxr(v112);
              v114 = v113 - 1;
            }
            while (__stlxr(v114, v112));
            if (!v114)
            {
              v115 = *(unint64_t **)v101;
              if (*(_QWORD *)v101)
              {
                v116 = (void *)v115[6];
                if (v116)
                {
                  v115[7] = (unint64_t)v116;
                  operator delete(v116);
                }
                v117 = (void *)v115[3];
                if (v117)
                {
                  v115[4] = (unint64_t)v117;
                  operator delete(v117);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v115 + 1));
                v106 = v115;
                v118 = 2071181815;
LABEL_199:
                v107 = v118 | 0x1030C4000000000;
LABEL_200:
                MEMORY[0x219A19A08](v106, v107);
              }
LABEL_201:
              *(_QWORD *)v101 = 0;
            }
            break;
          default:
            break;
        }
        v131 = *v100;
        *(_QWORD *)(v101 + 5) = *(uint64_t *)((char *)v100 + 5);
        *(_QWORD *)v101 = v131;
        LODWORD(v131) = *((unsigned __int8 *)v100 + 12);
        *((_BYTE *)v99 + 68) = v131;
        v44 = v131 > 9;
        v132 = (1 << v131) & 0x33C;
        if (!v44 && v132 != 0)
        {
          v134 = *(unint64_t **)v101;
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 + 1, v134));
        }
      }
      if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v267.__r_.__value_.__l.__data_);
      ++v93;
      v136 = this[2];
      v92 = *v136;
    }
    while (v93 < (v136[1] - *v136) >> 4);
  }
  v137 = a1[9];
  if (!v137)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v137 + 48))(v137, &v268);
  v139 = (uint64_t *)a1[10];
  v138 = (uint64_t *)a1[11];
  if (v139 != v138)
  {
    v257 = *(_OWORD **)(MEMORY[0x24BEDB7F0] + 64);
    v261 = (_OWORD *)*MEMORY[0x24BEDB7F0];
    v265 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v253 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v140 = *v139;
      v141 = (turi::flexible_type_impl *)(*a1 + 16 * *v139);
      switch(*((_BYTE *)v141 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
          std::ostream::operator<<();
          std::stringbuf::str();
          v274[0] = v261;
          *(_OWORD **)((char *)v274 + *((_QWORD *)v261 - 3)) = v257;
          v275 = v265;
          v142 = v253;
          goto LABEL_223;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
          std::ostream::operator<<();
          std::stringbuf::str();
          v274[0] = v261;
          *(_OWORD **)((char *)v274 + *((_QWORD *)v261 - 3)) = v257;
          v142 = MEMORY[0x24BEDB848] + 16;
          v275 = v265;
LABEL_223:
          v276 = v142;
          if (v278 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v279);
          break;
        case 2:
          v143 = *(_QWORD *)v141;
          if (*(char *)(*(_QWORD *)v141 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(v143 + 8), *(_QWORD *)(v143 + 16));
          }
          else
          {
            v144 = *(_OWORD *)(v143 + 8);
            v267.__r_.__value_.__r.__words[2] = *(_QWORD *)(v143 + 24);
            *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v144;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v141 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (uint64_t *)(*(_QWORD *)v141 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v141 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v141, &v267);
          break;
        case 7:
          memset(&v267, 0, sizeof(v267));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v141 + 8));
          break;
        default:
          goto LABEL_408;
      }
      v274[0] = &v267;
      v145 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v268, (const void **)&v267.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v274);
      v146 = **this + 16 * v140;
      if ((_OWORD *)((char *)v145 + 56) != (_OWORD *)v146)
      {
        switch(*(_BYTE *)(v146 + 12))
        {
          case 2:
            v147 = *(unint64_t **)v146;
            do
            {
              v148 = __ldaxr(v147);
              v149 = v148 - 1;
            }
            while (__stlxr(v149, v147));
            if (!v149)
            {
              v150 = *(unint64_t **)v146;
              if (!*(_QWORD *)v146)
                goto LABEL_273;
              if (*((char *)v150 + 31) < 0)
                operator delete((void *)v150[1]);
              v151 = v150;
              v152 = 0x1012C404EF22A49;
              goto LABEL_272;
            }
            break;
          case 3:
            v164 = *(unint64_t **)v146;
            do
            {
              v165 = __ldaxr(v164);
              v166 = v165 - 1;
            }
            while (__stlxr(v166, v164));
            if (!v166)
            {
              v167 = *(unint64_t **)v146;
              if (!*(_QWORD *)v146)
                goto LABEL_273;
              v168 = (void *)v167[1];
              if (v168)
              {
                v167[2] = (unint64_t)v168;
                operator delete(v168);
              }
              v151 = v167;
              v152 = 0x1080C409938AC02;
              goto LABEL_272;
            }
            break;
          case 4:
            v153 = *(unint64_t **)v146;
            do
            {
              v154 = __ldaxr(v153);
              v155 = v154 - 1;
            }
            while (__stlxr(v155, v153));
            if (!v155)
            {
              v156 = *(unint64_t **)v146;
              if (!*(_QWORD *)v146)
                goto LABEL_273;
              v274[0] = v156 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
              goto LABEL_265;
            }
            break;
          case 5:
            v169 = *(unint64_t **)v146;
            do
            {
              v170 = __ldaxr(v169);
              v171 = v170 - 1;
            }
            while (__stlxr(v171, v169));
            if (!v171)
            {
              v156 = *(unint64_t **)v146;
              if (!*(_QWORD *)v146)
                goto LABEL_273;
              v274[0] = v156 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
LABEL_265:
              v151 = v156;
              v152 = 0x1020C405E66F15BLL;
              goto LABEL_272;
            }
            break;
          case 8:
            v172 = *(unint64_t **)v146;
            do
            {
              v173 = __ldaxr(v172);
              v174 = v173 - 1;
            }
            while (__stlxr(v174, v172));
            if (!v174)
            {
              v175 = *(unint64_t **)v146;
              if (!*(_QWORD *)v146)
                goto LABEL_273;
              boost::detail::shared_count::~shared_count((unsigned int **)v175 + 2);
              v151 = v175;
              v163 = -235920773;
              goto LABEL_271;
            }
            break;
          case 9:
            v157 = *(unint64_t **)v146;
            do
            {
              v158 = __ldaxr(v157);
              v159 = v158 - 1;
            }
            while (__stlxr(v159, v157));
            if (!v159)
            {
              v160 = *(unint64_t **)v146;
              if (*(_QWORD *)v146)
              {
                v161 = (void *)v160[6];
                if (v161)
                {
                  v160[7] = (unint64_t)v161;
                  operator delete(v161);
                }
                v162 = (void *)v160[3];
                if (v162)
                {
                  v160[4] = (unint64_t)v162;
                  operator delete(v162);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v160 + 1));
                v151 = v160;
                v163 = 2071181815;
LABEL_271:
                v152 = v163 | 0x1030C4000000000;
LABEL_272:
                MEMORY[0x219A19A08](v151, v152);
              }
LABEL_273:
              *(_QWORD *)v146 = 0;
            }
            break;
          default:
            break;
        }
        v176 = *((_QWORD *)v145 + 7);
        *(_QWORD *)(v146 + 5) = *(_QWORD *)((char *)v145 + 61);
        *(_QWORD *)v146 = v176;
        *(_BYTE *)(v146 + 12) = *((_BYTE *)v145 + 68);
        *((_BYTE *)v145 + 68) = 0;
      }
      if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v267.__r_.__value_.__l.__data_);
      v177 = (turi::flexible_type_impl *)(*a1 + 16 * v140);
      switch(*((_BYTE *)v177 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_286;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_286:
          v274[0] = v261;
          *(_OWORD **)((char *)v274 + *((_QWORD *)v261 - 3)) = v257;
          v275 = v265;
          v276 = MEMORY[0x24BEDB848] + 16;
          if (v278 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v279);
          break;
        case 2:
          v178 = *(_QWORD *)v177;
          if (*(char *)(*(_QWORD *)v177 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(v178 + 8), *(_QWORD *)(v178 + 16));
          }
          else
          {
            v179 = *(_OWORD *)(v178 + 8);
            v267.__r_.__value_.__r.__words[2] = *(_QWORD *)(v178 + 24);
            *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v179;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v177 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (uint64_t *)(*(_QWORD *)v177 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v177 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v177, &v267);
          break;
        case 7:
          memset(&v267, 0, sizeof(v267));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v177 + 8));
          break;
        default:
          goto LABEL_408;
      }
      v274[0] = &v267;
      v180 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v272, (const void **)&v267.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v274);
      v181 = *this[1] + 16 * v140;
      if ((_OWORD *)((char *)v180 + 56) != (_OWORD *)v181)
      {
        switch(*(_BYTE *)(v181 + 12))
        {
          case 2:
            v182 = *(unint64_t **)v181;
            do
            {
              v183 = __ldaxr(v182);
              v184 = v183 - 1;
            }
            while (__stlxr(v184, v182));
            if (!v184)
            {
              v185 = *(unint64_t **)v181;
              if (!*(_QWORD *)v181)
                goto LABEL_336;
              if (*((char *)v185 + 31) < 0)
                operator delete((void *)v185[1]);
              v186 = v185;
              v187 = 0x1012C404EF22A49;
              goto LABEL_335;
            }
            break;
          case 3:
            v199 = *(unint64_t **)v181;
            do
            {
              v200 = __ldaxr(v199);
              v201 = v200 - 1;
            }
            while (__stlxr(v201, v199));
            if (!v201)
            {
              v202 = *(unint64_t **)v181;
              if (!*(_QWORD *)v181)
                goto LABEL_336;
              v203 = (void *)v202[1];
              if (v203)
              {
                v202[2] = (unint64_t)v203;
                operator delete(v203);
              }
              v186 = v202;
              v187 = 0x1080C409938AC02;
              goto LABEL_335;
            }
            break;
          case 4:
            v188 = *(unint64_t **)v181;
            do
            {
              v189 = __ldaxr(v188);
              v190 = v189 - 1;
            }
            while (__stlxr(v190, v188));
            if (!v190)
            {
              v191 = *(unint64_t **)v181;
              if (!*(_QWORD *)v181)
                goto LABEL_336;
              v274[0] = v191 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
              goto LABEL_328;
            }
            break;
          case 5:
            v204 = *(unint64_t **)v181;
            do
            {
              v205 = __ldaxr(v204);
              v206 = v205 - 1;
            }
            while (__stlxr(v206, v204));
            if (!v206)
            {
              v191 = *(unint64_t **)v181;
              if (!*(_QWORD *)v181)
                goto LABEL_336;
              v274[0] = v191 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
LABEL_328:
              v186 = v191;
              v187 = 0x1020C405E66F15BLL;
              goto LABEL_335;
            }
            break;
          case 8:
            v207 = *(unint64_t **)v181;
            do
            {
              v208 = __ldaxr(v207);
              v209 = v208 - 1;
            }
            while (__stlxr(v209, v207));
            if (!v209)
            {
              v210 = *(unint64_t **)v181;
              if (!*(_QWORD *)v181)
                goto LABEL_336;
              boost::detail::shared_count::~shared_count((unsigned int **)v210 + 2);
              v186 = v210;
              v198 = -235920773;
              goto LABEL_334;
            }
            break;
          case 9:
            v192 = *(unint64_t **)v181;
            do
            {
              v193 = __ldaxr(v192);
              v194 = v193 - 1;
            }
            while (__stlxr(v194, v192));
            if (!v194)
            {
              v195 = *(unint64_t **)v181;
              if (*(_QWORD *)v181)
              {
                v196 = (void *)v195[6];
                if (v196)
                {
                  v195[7] = (unint64_t)v196;
                  operator delete(v196);
                }
                v197 = (void *)v195[3];
                if (v197)
                {
                  v195[4] = (unint64_t)v197;
                  operator delete(v197);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v195 + 1));
                v186 = v195;
                v198 = 2071181815;
LABEL_334:
                v187 = v198 | 0x1030C4000000000;
LABEL_335:
                MEMORY[0x219A19A08](v186, v187);
              }
LABEL_336:
              *(_QWORD *)v181 = 0;
            }
            break;
          default:
            break;
        }
        v211 = *((_QWORD *)v180 + 7);
        *(_QWORD *)(v181 + 5) = *(_QWORD *)((char *)v180 + 61);
        *(_QWORD *)v181 = v211;
        *(_BYTE *)(v181 + 12) = *((_BYTE *)v180 + 68);
        *((_BYTE *)v180 + 68) = 0;
      }
      if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v267.__r_.__value_.__l.__data_);
      ++v139;
    }
    while (v139 != v138);
  }
  v212 = (uint64_t *)a1[13];
  v213 = (uint64_t *)a1[14];
  if (v212 != v213)
  {
    v258 = *(_OWORD **)(MEMORY[0x24BEDB7F0] + 64);
    v262 = (_OWORD *)*MEMORY[0x24BEDB7F0];
    v266 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v254 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v214 = *v212;
      v215 = (turi::flexible_type_impl *)(a1[3] + 16 * *v212);
      switch(*((_BYTE *)v215 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
          std::ostream::operator<<();
          std::stringbuf::str();
          v274[0] = v262;
          *(_OWORD **)((char *)v274 + *((_QWORD *)v262 - 3)) = v258;
          v275 = v266;
          v216 = v254;
          goto LABEL_352;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v274);
          std::ostream::operator<<();
          std::stringbuf::str();
          v274[0] = v262;
          *(_OWORD **)((char *)v274 + *((_QWORD *)v262 - 3)) = v258;
          v216 = MEMORY[0x24BEDB848] + 16;
          v275 = v266;
LABEL_352:
          v276 = v216;
          if (v278 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v279);
          break;
        case 2:
          v217 = *(_QWORD *)v215;
          if (*(char *)(*(_QWORD *)v215 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v267, *(const std::string::value_type **)(v217 + 8), *(_QWORD *)(v217 + 16));
          }
          else
          {
            v218 = *(_OWORD *)(v217 + 8);
            v267.__r_.__value_.__r.__words[2] = *(_QWORD *)(v217 + 24);
            *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v218;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v215 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (uint64_t *)(*(_QWORD *)v215 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v215 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v215, &v267);
          break;
        case 7:
          memset(&v267, 0, sizeof(v267));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v274, (_QWORD *)(*(_QWORD *)v215 + 8));
          break;
        default:
          goto LABEL_408;
      }
      v274[0] = &v267;
      v219 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v270, (const void **)&v267.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v274);
      v220 = *this[2] + 16 * v214;
      if ((_OWORD *)((char *)v219 + 56) != (_OWORD *)v220)
      {
        switch(*(_BYTE *)(v220 + 12))
        {
          case 2:
            v221 = *(unint64_t **)v220;
            do
            {
              v222 = __ldaxr(v221);
              v223 = v222 - 1;
            }
            while (__stlxr(v223, v221));
            if (!v223)
            {
              v224 = *(unint64_t **)v220;
              if (!*(_QWORD *)v220)
                goto LABEL_402;
              if (*((char *)v224 + 31) < 0)
                operator delete((void *)v224[1]);
              v225 = v224;
              v226 = 0x1012C404EF22A49;
              goto LABEL_401;
            }
            break;
          case 3:
            v238 = *(unint64_t **)v220;
            do
            {
              v239 = __ldaxr(v238);
              v240 = v239 - 1;
            }
            while (__stlxr(v240, v238));
            if (!v240)
            {
              v241 = *(unint64_t **)v220;
              if (!*(_QWORD *)v220)
                goto LABEL_402;
              v242 = (void *)v241[1];
              if (v242)
              {
                v241[2] = (unint64_t)v242;
                operator delete(v242);
              }
              v225 = v241;
              v226 = 0x1080C409938AC02;
              goto LABEL_401;
            }
            break;
          case 4:
            v227 = *(unint64_t **)v220;
            do
            {
              v228 = __ldaxr(v227);
              v229 = v228 - 1;
            }
            while (__stlxr(v229, v227));
            if (!v229)
            {
              v230 = *(unint64_t **)v220;
              if (!*(_QWORD *)v220)
                goto LABEL_402;
              v274[0] = v230 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
              goto LABEL_394;
            }
            break;
          case 5:
            v243 = *(unint64_t **)v220;
            do
            {
              v244 = __ldaxr(v243);
              v245 = v244 - 1;
            }
            while (__stlxr(v245, v243));
            if (!v245)
            {
              v230 = *(unint64_t **)v220;
              if (!*(_QWORD *)v220)
                goto LABEL_402;
              v274[0] = v230 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v274);
LABEL_394:
              v225 = v230;
              v226 = 0x1020C405E66F15BLL;
              goto LABEL_401;
            }
            break;
          case 8:
            v246 = *(unint64_t **)v220;
            do
            {
              v247 = __ldaxr(v246);
              v248 = v247 - 1;
            }
            while (__stlxr(v248, v246));
            if (!v248)
            {
              v249 = *(unint64_t **)v220;
              if (!*(_QWORD *)v220)
                goto LABEL_402;
              boost::detail::shared_count::~shared_count((unsigned int **)v249 + 2);
              v225 = v249;
              v237 = -235920773;
              goto LABEL_400;
            }
            break;
          case 9:
            v231 = *(unint64_t **)v220;
            do
            {
              v232 = __ldaxr(v231);
              v233 = v232 - 1;
            }
            while (__stlxr(v233, v231));
            if (!v233)
            {
              v234 = *(unint64_t **)v220;
              if (*(_QWORD *)v220)
              {
                v235 = (void *)v234[6];
                if (v235)
                {
                  v234[7] = (unint64_t)v235;
                  operator delete(v235);
                }
                v236 = (void *)v234[3];
                if (v236)
                {
                  v234[4] = (unint64_t)v236;
                  operator delete(v236);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v234 + 1));
                v225 = v234;
                v237 = 2071181815;
LABEL_400:
                v226 = v237 | 0x1030C4000000000;
LABEL_401:
                MEMORY[0x219A19A08](v225, v226);
              }
LABEL_402:
              *(_QWORD *)v220 = 0;
            }
            break;
          default:
            break;
        }
        v250 = *((_QWORD *)v219 + 7);
        *(_QWORD *)(v220 + 5) = *(_QWORD *)((char *)v219 + 61);
        *(_QWORD *)v220 = v250;
        *(_BYTE *)(v220 + 12) = *((_BYTE *)v219 + 68);
        *((_BYTE *)v219 + 68) = 0;
      }
      if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v267.__r_.__value_.__l.__data_);
      ++v212;
    }
    while (v212 != v213);
  }
  turi::sgraph_compute::edge_scope::unlock_vertices((uint64_t)this);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v272, v273[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v270, v271[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v268, v269[0]);
}

void sub_2182AA958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a18, a33);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a17, a30);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph_compute::edge_scope::lock_vertices(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 24);
  if (v1)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 32);
    if (v3)
    {
      this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 24));
      if (v1 != v3)
        return pthread_mutex_lock(*(pthread_mutex_t **)(v2 + 32));
    }
  }
  return this;
}

uint64_t turi::sgraph_compute::edge_scope::unlock_vertices(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 24);
  if (v1)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 32);
    if (v3)
    {
      this = pthread_mutex_unlock(*(pthread_mutex_t **)(this + 24));
      if (v1 != v3)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 32));
    }
  }
  return this;
}

_QWORD *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D936308;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D936308;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_24D936308;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2182AAC34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D936308;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::operator()(uint64_t a1, uint64_t a2)
{
  turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0::operator()(a1 + 8, a2);
}

uint64_t std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0,std::allocator<turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0>,void ()(turi::edge_triple &)>::target_type()
{
}

void turi::unity_sgraph::lambda_triple_apply_native(turi::function_closure_info const&,std::vector<std::string> const&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  unsigned int *v18;
  void *v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  void **v24;
  unsigned int *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  void **v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  void **v46;
  unsigned int *v47;
  void *v48;
  unsigned int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  void **v53;
  unsigned int *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  void **v61;
  _QWORD *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  void **v66;
  void **v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  void **v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  void **v76;
  unsigned int *v77;
  void *v78;
  unsigned int v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  void **v83;
  unsigned int *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  void **v91;
  uint64_t v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  __int128 v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  unsigned int v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  void *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  __int128 v134;
  __int128 v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  __int128 v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  void *v158;
  void *v159;
  unsigned int v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  void *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int v176;
  __int128 v177;
  __int128 v178;
  void *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  __int128 v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  void *v202;
  void *v203;
  unsigned int v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  void *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  __int128 v221;
  __int128 v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  void **v228;
  uint64_t v229;
  char v230;
  unsigned int **v231;
  _QWORD *v232;
  uint64_t v233;
  void **v234;
  _BYTE v235[13];
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;

  v240 = *MEMORY[0x24BDAC8D0];
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::vector(&v226, 3uLL);
  turi::_map_to_flex_dict((_QWORD *)a2, (uint64_t *)&v231);
  *(_QWORD *)&v236 = 0;
  DWORD2(v236) = 0;
  BYTE12(v236) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v236, (uint64_t *)&v231);
  *(_QWORD *)&v235[5] = *(_QWORD *)((char *)&v236 + 5);
  *(_QWORD *)v235 = v236;
  v235[12] = BYTE12(v236);
  LODWORD(v234) = 0;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v226, (unsigned int *)&v234);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v234);
  switch(BYTE4(v232))
  {
    case 2:
      v4 = (unint64_t *)v231;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = (void **)v231;
        if (v231)
        {
          if (*((char *)v231 + 31) < 0)
            operator delete(v231[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v21 = (unint64_t *)v231;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = (void **)v231;
        if (v231)
        {
          v25 = v231[1];
          if (v25)
          {
            v231[2] = v25;
            operator delete(v25);
          }
          v8 = v24;
          v9 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v10 = (unint64_t *)v231;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = (void **)v231;
        if (v231)
        {
          *(_QWORD *)&v236 = v231 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
          goto LABEL_35;
        }
      }
      break;
    case 5:
      v26 = (unint64_t *)v231;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v13 = (void **)v231;
        if (v231)
        {
          *(_QWORD *)&v236 = v231 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
LABEL_35:
          v8 = v13;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v29 = (unint64_t *)v231;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = (void **)v231;
        if (v231)
        {
          boost::detail::shared_count::~shared_count(v231 + 2);
          v8 = v32;
          v20 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v14 = (unint64_t *)v231;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = (void **)v231;
        if (v231)
        {
          v18 = v231[6];
          if (v18)
          {
            v231[7] = v18;
            operator delete(v18);
          }
          v19 = v17[3];
          if (v19)
          {
            v17[4] = v19;
            operator delete(v19);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v17 + 1));
          v8 = v17;
          v20 = 2071181815;
LABEL_41:
          v9 = v20 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v8, v9);
        }
      }
      break;
    default:
      break;
  }
  turi::_map_to_flex_dict((_QWORD *)(a2 + 24), (uint64_t *)&v231);
  *(_QWORD *)&v236 = 0;
  DWORD2(v236) = 0;
  BYTE12(v236) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v236, (uint64_t *)&v231);
  *(_QWORD *)&v235[5] = *(_QWORD *)((char *)&v236 + 5);
  *(_QWORD *)v235 = v236;
  v235[12] = BYTE12(v236);
  LODWORD(v234) = 0;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v226 + 80), (unsigned int *)&v234);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v234);
  switch(BYTE4(v232))
  {
    case 2:
      v33 = (unint64_t *)v231;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = (void **)v231;
        if (v231)
        {
          if (*((char *)v231 + 31) < 0)
            operator delete(v231[1]);
          v37 = v36;
          v38 = 0x1012C404EF22A49;
          goto LABEL_84;
        }
      }
      break;
    case 3:
      v50 = (unint64_t *)v231;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        v53 = (void **)v231;
        if (v231)
        {
          v54 = v231[1];
          if (v54)
          {
            v231[2] = v54;
            operator delete(v54);
          }
          v37 = v53;
          v38 = 0x1080C409938AC02;
          goto LABEL_84;
        }
      }
      break;
    case 4:
      v39 = (unint64_t *)v231;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        v42 = (void **)v231;
        if (v231)
        {
          *(_QWORD *)&v236 = v231 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
          goto LABEL_77;
        }
      }
      break;
    case 5:
      v55 = (unint64_t *)v231;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        v42 = (void **)v231;
        if (v231)
        {
          *(_QWORD *)&v236 = v231 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
LABEL_77:
          v37 = v42;
          v38 = 0x1020C405E66F15BLL;
          goto LABEL_84;
        }
      }
      break;
    case 8:
      v58 = (unint64_t *)v231;
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        v61 = (void **)v231;
        if (v231)
        {
          boost::detail::shared_count::~shared_count(v231 + 2);
          v37 = v61;
          v49 = -235920773;
          goto LABEL_83;
        }
      }
      break;
    case 9:
      v43 = (unint64_t *)v231;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        v46 = (void **)v231;
        if (v231)
        {
          v47 = v231[6];
          if (v47)
          {
            v231[7] = v47;
            operator delete(v47);
          }
          v48 = v46[3];
          if (v48)
          {
            v46[4] = v48;
            operator delete(v48);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v46 + 1));
          v37 = v46;
          v49 = 2071181815;
LABEL_83:
          v38 = v49 | 0x1030C4000000000;
LABEL_84:
          MEMORY[0x219A19A08](v37, v38);
        }
      }
      break;
    default:
      break;
  }
  v62 = (_QWORD *)(a2 + 48);
  turi::_map_to_flex_dict((_QWORD *)(a2 + 48), (uint64_t *)&v231);
  *(_QWORD *)&v236 = 0;
  DWORD2(v236) = 0;
  BYTE12(v236) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v236, (uint64_t *)&v231);
  *(_QWORD *)&v235[5] = *(_QWORD *)((char *)&v236 + 5);
  *(_QWORD *)v235 = v236;
  v235[12] = BYTE12(v236);
  LODWORD(v234) = 0;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v226 + 160), (unsigned int *)&v234);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v234);
  switch(BYTE4(v232))
  {
    case 2:
      v63 = (unint64_t *)v231;
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        v66 = (void **)v231;
        if (v231)
        {
          if (*((char *)v231 + 31) < 0)
            operator delete(v231[1]);
          v67 = v66;
          v68 = 0x1012C404EF22A49;
          goto LABEL_126;
        }
      }
      break;
    case 3:
      v80 = (unint64_t *)v231;
      do
      {
        v81 = __ldaxr(v80);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v80));
      if (!v82)
      {
        v83 = (void **)v231;
        if (v231)
        {
          v84 = v231[1];
          if (v84)
          {
            v231[2] = v84;
            operator delete(v84);
          }
          v67 = v83;
          v68 = 0x1080C409938AC02;
          goto LABEL_126;
        }
      }
      break;
    case 4:
      v69 = (unint64_t *)v231;
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        v72 = (void **)v231;
        if (v231)
        {
          *(_QWORD *)&v236 = v231 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
          goto LABEL_119;
        }
      }
      break;
    case 5:
      v85 = (unint64_t *)v231;
      do
      {
        v86 = __ldaxr(v85);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, v85));
      if (!v87)
      {
        v72 = (void **)v231;
        if (v231)
        {
          *(_QWORD *)&v236 = v231 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
LABEL_119:
          v67 = v72;
          v68 = 0x1020C405E66F15BLL;
          goto LABEL_126;
        }
      }
      break;
    case 8:
      v88 = (unint64_t *)v231;
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        v91 = (void **)v231;
        if (v231)
        {
          boost::detail::shared_count::~shared_count(v231 + 2);
          v67 = v91;
          v79 = -235920773;
          goto LABEL_125;
        }
      }
      break;
    case 9:
      v73 = (unint64_t *)v231;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        v76 = (void **)v231;
        if (v231)
        {
          v77 = v231[6];
          if (v77)
          {
            v231[7] = v77;
            operator delete(v77);
          }
          v78 = v76[3];
          if (v78)
          {
            v76[4] = v78;
            operator delete(v78);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v76 + 1));
          v67 = v76;
          v79 = 2071181815;
LABEL_125:
          v68 = v79 | 0x1030C4000000000;
LABEL_126:
          MEMORY[0x219A19A08](v67, v68);
        }
      }
      break;
    default:
      break;
  }
  v92 = *(_QWORD *)(a1 + 24);
  if (!v92)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(void ***__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v92 + 48))(&v234, v92, &v226);
  turi::variant_converter<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get((uint64_t *)&v234, &v236);
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vdeallocate((unsigned int **)&v226);
  v226 = v236;
  v227 = v237;
  *(_QWORD *)&v237 = 0;
  v236 = 0uLL;
  v231 = (unsigned int **)&v236;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v231);
  turi::variant_converter<turi::flexible_type,void>::get((int *)v226, (uint64_t)&v229);
  switch(v230)
  {
    case 0:
    case 1:
    case 6:
      turi::flexible_type_fail(0);
      goto LABEL_143;
    case 2:
      if (*(char *)(v229 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v236, *(const std::string::value_type **)(v229 + 8), *(_QWORD *)(v229 + 16));
      }
      else
      {
        v97 = *(_OWORD *)(v229 + 8);
        *(_QWORD *)&v237 = *(_QWORD *)(v229 + 24);
        v236 = v97;
      }
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      if ((SBYTE7(v237) & 0x80000000) == 0)
        goto LABEL_144;
      v93 = (void *)v236;
      break;
    case 3:
      *(_QWORD *)&v237 = 0;
      v236 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v236, *(const void **)(v229 + 8), *(_QWORD *)(v229 + 16), (uint64_t)(*(_QWORD *)(v229 + 16) - *(_QWORD *)(v229 + 8)) >> 3);
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      v93 = (void *)v236;
      if (!(_QWORD)v236)
        goto LABEL_144;
      *((_QWORD *)&v236 + 1) = v236;
      break;
    case 4:
      *(_QWORD *)&v237 = 0;
      v236 = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v236, *(uint64_t **)(v229 + 8), *(uint64_t **)(v229 + 16), (uint64_t)(*(_QWORD *)(v229 + 16) - *(_QWORD *)(v229 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      v228 = (void **)&v236;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v228);
      goto LABEL_144;
    case 5:
      v224 = 0;
      v225 = 0;
      v223 = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v223, *(uint64_t **)(v229 + 8), *(uint64_t **)(v229 + 16), (uint64_t)(*(_QWORD *)(v229 + 16) - *(_QWORD *)(v229 + 8)) >> 5);
      goto LABEL_144;
    case 7:
LABEL_143:
      v223 = 0;
      v224 = 0;
      v225 = 0;
      goto LABEL_144;
    case 8:
      v130 = v229;
      v131 = *(_QWORD *)(v229 + 16);
      *(_QWORD *)&v236 = *(_QWORD *)(v229 + 8);
      *((_QWORD *)&v236 + 1) = v131;
      if (v131)
      {
        v132 = (unsigned int *)(v131 + 8);
        do
          v133 = __ldxr(v132);
        while (__stxr(v133 + 1, v132));
      }
      v134 = *(_OWORD *)(v130 + 24);
      v135 = *(_OWORD *)(v130 + 56);
      v238 = *(_OWORD *)(v130 + 40);
      v239 = v135;
      v237 = v134;
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      boost::detail::shared_count::~shared_count((unsigned int **)&v236 + 1);
      goto LABEL_144;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v236, v229 + 8);
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      if (*((_QWORD *)&v238 + 1))
      {
        *(_QWORD *)&v239 = *((_QWORD *)&v238 + 1);
        operator delete(*((void **)&v238 + 1));
      }
      if ((_QWORD)v237)
      {
        *((_QWORD *)&v237 + 1) = v237;
        operator delete((void *)v237);
      }
      v94 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
      if (*((_QWORD *)&v236 + 1))
      {
        v95 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      goto LABEL_144;
    default:
      turi::flexible_type_fail(0);
LABEL_345:
      __break(1u);
      return;
  }
  operator delete(v93);
LABEL_144:
  turi::_map_from_flex_dict(&v223, (uint64_t)&v231);
  v98 = a2 + 8;
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a2, *(_QWORD **)(a2 + 8));
  v99 = v232;
  *(_QWORD *)a2 = v231;
  *(_QWORD *)(a2 + 8) = v99;
  v100 = v233;
  *(_QWORD *)(a2 + 16) = v233;
  if (v100)
  {
    v99[2] = v98;
    v231 = (unsigned int **)&v232;
    v232 = 0;
    v233 = 0;
    v99 = 0;
  }
  else
  {
    *(_QWORD *)a2 = v98;
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v231, v99);
  *(_QWORD *)&v236 = &v223;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
  switch(v230)
  {
    case 2:
      v101 = (unint64_t *)v229;
      do
      {
        v102 = __ldaxr(v101);
        v103 = v102 - 1;
      }
      while (__stlxr(v103, v101));
      if (!v103)
      {
        v104 = v229;
        if (v229)
        {
          if (*(char *)(v229 + 31) < 0)
            operator delete(*(void **)(v229 + 8));
          v105 = v104;
          v106 = 0x1012C404EF22A49;
          goto LABEL_188;
        }
      }
      break;
    case 3:
      v118 = (unint64_t *)v229;
      do
      {
        v119 = __ldaxr(v118);
        v120 = v119 - 1;
      }
      while (__stlxr(v120, v118));
      if (!v120)
      {
        v121 = v229;
        if (v229)
        {
          v122 = *(void **)(v229 + 8);
          if (v122)
          {
            *(_QWORD *)(v229 + 16) = v122;
            operator delete(v122);
          }
          v105 = v121;
          v106 = 0x1080C409938AC02;
          goto LABEL_188;
        }
      }
      break;
    case 4:
      v107 = (unint64_t *)v229;
      do
      {
        v108 = __ldaxr(v107);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v107));
      if (!v109)
      {
        v110 = v229;
        if (v229)
        {
          *(_QWORD *)&v236 = v229 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
          goto LABEL_181;
        }
      }
      break;
    case 5:
      v123 = (unint64_t *)v229;
      do
      {
        v124 = __ldaxr(v123);
        v125 = v124 - 1;
      }
      while (__stlxr(v125, v123));
      if (!v125)
      {
        v110 = v229;
        if (v229)
        {
          *(_QWORD *)&v236 = v229 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
LABEL_181:
          v105 = v110;
          v106 = 0x1020C405E66F15BLL;
          goto LABEL_188;
        }
      }
      break;
    case 8:
      v126 = (unint64_t *)v229;
      do
      {
        v127 = __ldaxr(v126);
        v128 = v127 - 1;
      }
      while (__stlxr(v128, v126));
      if (!v128)
      {
        v129 = v229;
        if (v229)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v229 + 16));
          v105 = v129;
          v117 = -235920773;
          goto LABEL_187;
        }
      }
      break;
    case 9:
      v111 = (unint64_t *)v229;
      do
      {
        v112 = __ldaxr(v111);
        v113 = v112 - 1;
      }
      while (__stlxr(v113, v111));
      if (!v113)
      {
        v114 = v229;
        if (v229)
        {
          v115 = *(void **)(v229 + 48);
          if (v115)
          {
            *(_QWORD *)(v229 + 56) = v115;
            operator delete(v115);
          }
          v116 = *(void **)(v114 + 24);
          if (v116)
          {
            *(_QWORD *)(v114 + 32) = v116;
            operator delete(v116);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v114 + 8);
          v105 = v114;
          v117 = 2071181815;
LABEL_187:
          v106 = v117 | 0x1030C4000000000;
LABEL_188:
          MEMORY[0x219A19A08](v105, v106);
        }
      }
      break;
    default:
      break;
  }
  turi::variant_converter<turi::flexible_type,void>::get((int *)(v226 + 80), (uint64_t)&v229);
  switch(v230)
  {
    case 0:
    case 1:
    case 6:
      turi::flexible_type_fail(0);
      goto LABEL_210;
    case 2:
      if (*(char *)(v229 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v236, *(const std::string::value_type **)(v229 + 8), *(_QWORD *)(v229 + 16));
      }
      else
      {
        v140 = *(_OWORD *)(v229 + 8);
        *(_QWORD *)&v237 = *(_QWORD *)(v229 + 24);
        v236 = v140;
      }
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      if ((SBYTE7(v237) & 0x80000000) == 0)
        break;
      v136 = (void *)v236;
      goto LABEL_337;
    case 3:
      *(_QWORD *)&v237 = 0;
      v236 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v236, *(const void **)(v229 + 8), *(_QWORD *)(v229 + 16), (uint64_t)(*(_QWORD *)(v229 + 16) - *(_QWORD *)(v229 + 8)) >> 3);
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      v136 = (void *)v236;
      if (!(_QWORD)v236)
        break;
      *((_QWORD *)&v236 + 1) = v236;
LABEL_337:
      operator delete(v136);
      break;
    case 4:
      *(_QWORD *)&v237 = 0;
      v236 = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v236, *(uint64_t **)(v229 + 8), *(uint64_t **)(v229 + 16), (uint64_t)(*(_QWORD *)(v229 + 16) - *(_QWORD *)(v229 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      v228 = (void **)&v236;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v228);
      break;
    case 5:
      v224 = 0;
      v225 = 0;
      v223 = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v223, *(uint64_t **)(v229 + 8), *(uint64_t **)(v229 + 16), (uint64_t)(*(_QWORD *)(v229 + 16) - *(_QWORD *)(v229 + 8)) >> 5);
      break;
    case 7:
LABEL_210:
      v223 = 0;
      v224 = 0;
      v225 = 0;
      break;
    case 8:
      v173 = v229;
      v174 = *(_QWORD *)(v229 + 16);
      *(_QWORD *)&v236 = *(_QWORD *)(v229 + 8);
      *((_QWORD *)&v236 + 1) = v174;
      if (v174)
      {
        v175 = (unsigned int *)(v174 + 8);
        do
          v176 = __ldxr(v175);
        while (__stxr(v176 + 1, v175));
      }
      v177 = *(_OWORD *)(v173 + 24);
      v178 = *(_OWORD *)(v173 + 56);
      v238 = *(_OWORD *)(v173 + 40);
      v239 = v178;
      v237 = v177;
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      boost::detail::shared_count::~shared_count((unsigned int **)&v236 + 1);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v236, v229 + 8);
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      if (*((_QWORD *)&v238 + 1))
      {
        *(_QWORD *)&v239 = *((_QWORD *)&v238 + 1);
        operator delete(*((void **)&v238 + 1));
      }
      if ((_QWORD)v237)
      {
        *((_QWORD *)&v237 + 1) = v237;
        operator delete((void *)v237);
      }
      v137 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
      if (*((_QWORD *)&v236 + 1))
      {
        v138 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      break;
    default:
LABEL_344:
      turi::flexible_type_fail(0);
      goto LABEL_345;
  }
  turi::_map_from_flex_dict(&v223, (uint64_t)&v231);
  v141 = a2 + 32;
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a2 + 24, *(_QWORD **)(a2 + 32));
  v142 = v232;
  *(_QWORD *)(a2 + 24) = v231;
  *(_QWORD *)(a2 + 32) = v142;
  v143 = v233;
  *(_QWORD *)(a2 + 40) = v233;
  if (v143)
  {
    v142[2] = v141;
    v231 = (unsigned int **)&v232;
    v232 = 0;
    v233 = 0;
    v142 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v141;
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v231, v142);
  *(_QWORD *)&v236 = &v223;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
  switch(v230)
  {
    case 2:
      v144 = (unint64_t *)v229;
      do
      {
        v145 = __ldaxr(v144);
        v146 = v145 - 1;
      }
      while (__stlxr(v146, v144));
      if (!v146)
      {
        v147 = v229;
        if (v229)
        {
          if (*(char *)(v229 + 31) < 0)
            operator delete(*(void **)(v229 + 8));
          v148 = v147;
          v149 = 0x1012C404EF22A49;
          goto LABEL_255;
        }
      }
      break;
    case 3:
      v161 = (unint64_t *)v229;
      do
      {
        v162 = __ldaxr(v161);
        v163 = v162 - 1;
      }
      while (__stlxr(v163, v161));
      if (!v163)
      {
        v164 = v229;
        if (v229)
        {
          v165 = *(void **)(v229 + 8);
          if (v165)
          {
            *(_QWORD *)(v229 + 16) = v165;
            operator delete(v165);
          }
          v148 = v164;
          v149 = 0x1080C409938AC02;
          goto LABEL_255;
        }
      }
      break;
    case 4:
      v150 = (unint64_t *)v229;
      do
      {
        v151 = __ldaxr(v150);
        v152 = v151 - 1;
      }
      while (__stlxr(v152, v150));
      if (!v152)
      {
        v153 = v229;
        if (v229)
        {
          *(_QWORD *)&v236 = v229 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
          goto LABEL_248;
        }
      }
      break;
    case 5:
      v166 = (unint64_t *)v229;
      do
      {
        v167 = __ldaxr(v166);
        v168 = v167 - 1;
      }
      while (__stlxr(v168, v166));
      if (!v168)
      {
        v153 = v229;
        if (v229)
        {
          *(_QWORD *)&v236 = v229 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
LABEL_248:
          v148 = v153;
          v149 = 0x1020C405E66F15BLL;
          goto LABEL_255;
        }
      }
      break;
    case 8:
      v169 = (unint64_t *)v229;
      do
      {
        v170 = __ldaxr(v169);
        v171 = v170 - 1;
      }
      while (__stlxr(v171, v169));
      if (!v171)
      {
        v172 = v229;
        if (v229)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v229 + 16));
          v148 = v172;
          v160 = -235920773;
          goto LABEL_254;
        }
      }
      break;
    case 9:
      v154 = (unint64_t *)v229;
      do
      {
        v155 = __ldaxr(v154);
        v156 = v155 - 1;
      }
      while (__stlxr(v156, v154));
      if (!v156)
      {
        v157 = v229;
        if (v229)
        {
          v158 = *(void **)(v229 + 48);
          if (v158)
          {
            *(_QWORD *)(v229 + 56) = v158;
            operator delete(v158);
          }
          v159 = *(void **)(v157 + 24);
          if (v159)
          {
            *(_QWORD *)(v157 + 32) = v159;
            operator delete(v159);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v157 + 8);
          v148 = v157;
          v160 = 2071181815;
LABEL_254:
          v149 = v160 | 0x1030C4000000000;
LABEL_255:
          MEMORY[0x219A19A08](v148, v149);
        }
      }
      break;
    default:
      break;
  }
  turi::variant_converter<turi::flexible_type,void>::get((int *)(v226 + 160), (uint64_t)&v229);
  switch(v230)
  {
    case 0:
    case 1:
    case 6:
      turi::flexible_type_fail(0);
      goto LABEL_277;
    case 2:
      if (*(char *)(v229 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v236, *(const std::string::value_type **)(v229 + 8), *(_QWORD *)(v229 + 16));
      }
      else
      {
        v183 = *(_OWORD *)(v229 + 8);
        *(_QWORD *)&v237 = *(_QWORD *)(v229 + 24);
        v236 = v183;
      }
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      if ((SBYTE7(v237) & 0x80000000) == 0)
        break;
      v179 = (void *)v236;
      goto LABEL_341;
    case 3:
      *(_QWORD *)&v237 = 0;
      v236 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v236, *(const void **)(v229 + 8), *(_QWORD *)(v229 + 16), (uint64_t)(*(_QWORD *)(v229 + 16) - *(_QWORD *)(v229 + 8)) >> 3);
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      v179 = (void *)v236;
      if (!(_QWORD)v236)
        break;
      *((_QWORD *)&v236 + 1) = v236;
LABEL_341:
      operator delete(v179);
      break;
    case 4:
      *(_QWORD *)&v237 = 0;
      v236 = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v236, *(uint64_t **)(v229 + 8), *(uint64_t **)(v229 + 16), (uint64_t)(*(_QWORD *)(v229 + 16) - *(_QWORD *)(v229 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      v228 = (void **)&v236;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v228);
      break;
    case 5:
      v224 = 0;
      v225 = 0;
      v223 = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v223, *(uint64_t **)(v229 + 8), *(uint64_t **)(v229 + 16), (uint64_t)(*(_QWORD *)(v229 + 16) - *(_QWORD *)(v229 + 8)) >> 5);
      break;
    case 7:
LABEL_277:
      v223 = 0;
      v224 = 0;
      v225 = 0;
      break;
    case 8:
      v217 = v229;
      v218 = *(_QWORD *)(v229 + 16);
      *(_QWORD *)&v236 = *(_QWORD *)(v229 + 8);
      *((_QWORD *)&v236 + 1) = v218;
      if (v218)
      {
        v219 = (unsigned int *)(v218 + 8);
        do
          v220 = __ldxr(v219);
        while (__stxr(v220 + 1, v219));
      }
      v221 = *(_OWORD *)(v217 + 24);
      v222 = *(_OWORD *)(v217 + 56);
      v238 = *(_OWORD *)(v217 + 40);
      v239 = v222;
      v237 = v221;
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      boost::detail::shared_count::~shared_count((unsigned int **)&v236 + 1);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v236, v229 + 8);
      turi::flexible_type_fail(0);
      v223 = 0;
      v224 = 0;
      v225 = 0;
      if (*((_QWORD *)&v238 + 1))
      {
        *(_QWORD *)&v239 = *((_QWORD *)&v238 + 1);
        operator delete(*((void **)&v238 + 1));
      }
      if ((_QWORD)v237)
      {
        *((_QWORD *)&v237 + 1) = v237;
        operator delete((void *)v237);
      }
      v180 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
      if (*((_QWORD *)&v236 + 1))
      {
        v181 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      break;
    default:
      goto LABEL_344;
  }
  turi::_map_from_flex_dict(&v223, (uint64_t)&v231);
  v185 = *(_QWORD **)(a2 + 56);
  v184 = (_QWORD *)(a2 + 56);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v62, v185);
  v186 = v232;
  *(v184 - 1) = v231;
  *v184 = v186;
  v187 = v233;
  v184[1] = v233;
  if (v187)
  {
    v186[2] = v184;
    v231 = (unsigned int **)&v232;
    v232 = 0;
    v233 = 0;
    v186 = 0;
  }
  else
  {
    *v62 = v184;
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v231, v186);
  *(_QWORD *)&v236 = &v223;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
  switch(v230)
  {
    case 2:
      v188 = (unint64_t *)v229;
      do
      {
        v189 = __ldaxr(v188);
        v190 = v189 - 1;
      }
      while (__stlxr(v190, v188));
      if (!v190)
      {
        v191 = v229;
        if (v229)
        {
          if (*(char *)(v229 + 31) < 0)
            operator delete(*(void **)(v229 + 8));
          v192 = v191;
          v193 = 0x1012C404EF22A49;
          goto LABEL_322;
        }
      }
      break;
    case 3:
      v205 = (unint64_t *)v229;
      do
      {
        v206 = __ldaxr(v205);
        v207 = v206 - 1;
      }
      while (__stlxr(v207, v205));
      if (!v207)
      {
        v208 = v229;
        if (v229)
        {
          v209 = *(void **)(v229 + 8);
          if (v209)
          {
            *(_QWORD *)(v229 + 16) = v209;
            operator delete(v209);
          }
          v192 = v208;
          v193 = 0x1080C409938AC02;
          goto LABEL_322;
        }
      }
      break;
    case 4:
      v194 = (unint64_t *)v229;
      do
      {
        v195 = __ldaxr(v194);
        v196 = v195 - 1;
      }
      while (__stlxr(v196, v194));
      if (!v196)
      {
        v197 = v229;
        if (v229)
        {
          *(_QWORD *)&v236 = v229 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
          goto LABEL_315;
        }
      }
      break;
    case 5:
      v210 = (unint64_t *)v229;
      do
      {
        v211 = __ldaxr(v210);
        v212 = v211 - 1;
      }
      while (__stlxr(v212, v210));
      if (!v212)
      {
        v197 = v229;
        if (v229)
        {
          *(_QWORD *)&v236 = v229 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
LABEL_315:
          v192 = v197;
          v193 = 0x1020C405E66F15BLL;
          goto LABEL_322;
        }
      }
      break;
    case 8:
      v213 = (unint64_t *)v229;
      do
      {
        v214 = __ldaxr(v213);
        v215 = v214 - 1;
      }
      while (__stlxr(v215, v213));
      if (!v215)
      {
        v216 = v229;
        if (v229)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v229 + 16));
          v192 = v216;
          v204 = -235920773;
          goto LABEL_321;
        }
      }
      break;
    case 9:
      v198 = (unint64_t *)v229;
      do
      {
        v199 = __ldaxr(v198);
        v200 = v199 - 1;
      }
      while (__stlxr(v200, v198));
      if (!v200)
      {
        v201 = v229;
        if (v229)
        {
          v202 = *(void **)(v229 + 48);
          if (v202)
          {
            *(_QWORD *)(v229 + 56) = v202;
            operator delete(v202);
          }
          v203 = *(void **)(v201 + 24);
          if (v203)
          {
            *(_QWORD *)(v201 + 32) = v203;
            operator delete(v203);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v201 + 8);
          v192 = v201;
          v204 = 2071181815;
LABEL_321:
          v193 = v204 | 0x1030C4000000000;
LABEL_322:
          MEMORY[0x219A19A08](v192, v193);
        }
      }
      break;
    default:
      break;
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v234);
  v234 = (void **)&v226;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&v234);
}

void sub_2182AC1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, _QWORD *a18, int a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  uint64_t v24;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;

  a17 = (void **)(v24 - 144);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  switch(a20)
  {
    case 2:
      v26 = a18;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_45;
      v44 = a18;
      if (!a18)
        goto LABEL_45;
      if (*((char *)a18 + 31) < 0)
        operator delete((void *)a18[1]);
      v45 = v44;
      v46 = 0x1012C404EF22A49;
      break;
    case 3:
      v35 = a18;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_45;
      v48 = a18;
      if (!a18)
        goto LABEL_45;
      v49 = (void *)a18[1];
      if (v49)
      {
        a18[2] = v49;
        operator delete(v49);
      }
      v45 = v48;
      v46 = 0x1080C409938AC02;
      break;
    case 4:
      v29 = a18;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_45;
      v47 = a18;
      if (!a18)
        goto LABEL_45;
      a17 = (void **)(a18 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
      goto LABEL_39;
    case 5:
      v38 = a18;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (v40)
        goto LABEL_45;
      v47 = a18;
      if (!a18)
        goto LABEL_45;
      a17 = (void **)(a18 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a17);
LABEL_39:
      v45 = v47;
      v46 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v41 = a18;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        v50 = a18;
        if (a18)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)a18 + 2);
          MEMORY[0x219A19A08](v50, 0x1030C40F1F0227BLL);
        }
        a18 = 0;
      }
      goto LABEL_45;
    case 9:
      v32 = a18;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34 || !a18)
        goto LABEL_45;
      v45 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a18);
      v46 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_45;
  }
  MEMORY[0x219A19A08](v45, v46);
LABEL_45:
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&a24);
  a24 = (void **)&a13;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&a24);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 80 * a2;
    v6 = 80 * a2;
    v7 = v4 + 16;
    do
    {
      *(_QWORD *)(v7 - 8) = 0;
      *(_DWORD *)v7 = 0;
      *(_BYTE *)(v7 + 4) = 0;
      *(_DWORD *)(v7 - 16) = 0;
      v7 += 80;
      v6 -= 80;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_2182ACA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *turi::variant_converter<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t *has_fallback_type;
  char v5;
  char *v6;

  v6 = &v5;
  has_fallback_type = (uint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*(unsigned int *)a1, *(_DWORD *)a1 ^ (*(int *)a1 >> 31), (uint64_t)&v6, a1 + 1);
  if (!has_fallback_type)
  {
    v6 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__init_with_size[abi:ne180100]<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(a2, *has_fallback_type, has_fallback_type[1], 0xCCCCCCCCCCCCCCCDLL * ((has_fallback_type[1] - *has_fallback_type) >> 4));
}

void sub_2182ACAB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  uint64_t v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v10);
}

void sub_2182ACAD4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;

  result = 0;
  if (a2 >= 7)
  {
    switch(a2)
    {
      case 7u:
        result = *a4;
        break;
      case 8u:
        return result;
      default:
        boost::detail::variant::forced_return<void>(0);
    }
  }
  return result;
}

void turi::full_type_name<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v3;
  _QWORD v4[10];

  v4[9] = *MEMORY[0x24BDAC8D0];
  boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(v4, a1);
  v3 = 7;
  std::string::basic_string[abi:ne180100]<0>(a2, "List");
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v3);
}

void sub_2182ACBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

_QWORD *boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__init_with_size[abi:ne180100]<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(v4, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  *a1 = v4;
  return a1;
}

void sub_2182ACC40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_34_3(uint64_t a1@<X8>, uint64_t a2)
{
  std::string::__init_copy_ctor_external((std::string *)&a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  return std::operator+<char>();
}

uint64_t OUTLINED_FUNCTION_38_0()
{
  return std::operator+<char>();
}

void OUTLINED_FUNCTION_67()
{
  uint64_t v0;

  std::locale::~locale((std::locale *)(v0 - 56));
}

_QWORD *OUTLINED_FUNCTION_80_0(_QWORD *a1, uint64_t a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, 30);
}

void __cxx_global_var_init_21_0()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_sgraph_cpp()
{
  int v0;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  v0 = pthread_mutex_init(&turi::dag_access_mutex, 0);
  assert_msg(v0 == 0, "Mutex create error %d", v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::dag_access_mutex, &dword_217E69000);
}

turi::sgraph *turi::sgraph::sgraph(turi::sgraph *this, uint64_t a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 1;
  *((_BYTE *)this + 56) = 0;
  if (!a2)
    turi::sgraph::sgraph(unsigned long)::$_0::operator()();
  turi::sgraph::init(this, a2);
  return this;
}

void sub_2182ACE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy(v11, *(char **)(v10 + 96));
  std::vector<std::vector<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void turi::sgraph::sgraph(unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_partitions", 14);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 50, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::sgraph(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182AD014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::init(turi::sgraph *this, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t i;
  char v18;
  _BYTE *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t j;
  __int16 v23;
  _WORD *v24;
  uint64_t k;
  void *v26;
  void *v27;
  _WORD *v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  void *v32;
  void *v33;
  _BYTE *v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  void *__p[2];
  std::string::size_type v39;
  void **p_end;
  std::__split_buffer<std::string> __v;
  __int128 v42;

  *(_QWORD *)&v42 = *MEMORY[0x24BDAC8D0];
  turi::sgraph::clear(this);
  if ((a2 & (a2 - 1)) != 0)
    turi::sgraph::init(unsigned long)::$_0::operator()();
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)turi::sgraph::DEFAULT_GROUP_NAME);
  v4 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 1);
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(_QWORD *)this) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(_QWORD *)this) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 16);
    if (v10)
      v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)this + 16, v10);
    else
      v11 = 0;
    v12 = v11 + v7;
    __v.__first_ = v11;
    __v.__begin_ = v12;
    __v.__end_cap_.__value_ = &v11[v10];
    v13 = *(_OWORD *)__p;
    v12->__r_.__value_.__r.__words[2] = v39;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    __p[1] = 0;
    v39 = 0;
    __p[0] = 0;
    __v.__end_ = v12 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)this, &__v);
    v14 = *((_QWORD *)this + 1);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v15 = SHIBYTE(v39);
    *((_QWORD *)this + 1) = v14;
    if (v15 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = *(_OWORD *)__p;
    *(_QWORD *)(v5 + 16) = v39;
    *(_OWORD *)v5 = v6;
    *((_QWORD *)this + 1) = v5 + 24;
  }
  std::vector<turi::sframe>::vector(&__v, *((_QWORD *)this + 3));
  std::vector<std::vector<turi::sframe>>::push_back[abi:ne180100]((uint64_t *)this + 8, (uint64_t)&__v);
  __p[0] = &__v;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v16 = **((_QWORD **)this + 8);
  for (i = *(_QWORD *)(*((_QWORD *)this + 8) + 8); v16 != i; v16 += 296)
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, turi::sgraph::VID_COLUMN_NAME);
    v35 = 0;
    v36 = 0;
    v37 = 0;
    __p[0] = &v35;
    LOBYTE(__p[1]) = 0;
    v35 = (std::string *)operator new(0x18uLL);
    v36 = v35;
    v37 = v35 + 1;
    v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v37, (__int128 *)&__v, (__int128 *)&__v.__end_cap_, v35);
    v18 = *((_BYTE *)this + 56);
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v19 = operator new(1uLL);
    v32 = v19;
    *v19 = v18;
    v33 = v19 + 1;
    v34 = v19 + 1;
    turi::sgraph::init_empty_sframe(v16, &v35, &v32);
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    __p[0] = &v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
  }
  std::vector<turi::sframe>::vector(__p, *((_QWORD *)this + 3) * *((_QWORD *)this + 3));
  memset(&__v, 0, sizeof(__v));
  std::vector<turi::sframe>::__init_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(&__v.__end_, (uint64_t)__p[0], (uint64_t)__p[1], 0x14C1BACF914C1BADLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>>>((uint64_t **)this + 11, (unint64_t *)&__v, (uint64_t)&__v);
  p_end = (void **)&__v.__end_;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&p_end);
  p_end = __p;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&p_end);
  __v.__first_ = 0;
  __v.__begin_ = 0;
  __p[0] = &__v;
  v20 = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>((uint64_t **)this + 11, (unint64_t *)&__v, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  v21 = *((_QWORD *)v20 + 6);
  for (j = *((_QWORD *)v20 + 7); v21 != j; v21 += 296)
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, turi::sgraph::SRC_COLUMN_NAME);
    std::string::basic_string[abi:ne180100]<0>(&__v.__end_cap_.__value_, turi::sgraph::DST_COLUMN_NAME);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    __p[0] = &v29;
    LOBYTE(__p[1]) = 0;
    v29 = (std::string *)operator new(0x30uLL);
    v30 = v29;
    v31 = v29 + 2;
    v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v31, (__int128 *)&__v, &v42, v29);
    v23 = *((unsigned __int8 *)this + 56);
    v27 = 0;
    v28 = 0;
    v26 = 0;
    v24 = operator new(2uLL);
    v26 = v24;
    *v24 = v23 | (v23 << 8);
    v27 = v24 + 1;
    v28 = v24 + 1;
    turi::sgraph::init_empty_sframe(v21, &v29, &v26);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    __p[0] = &v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (k = 0; k != -6; k -= 3)
    {
      if (*((char *)&__v + k * 8 + 47) < 0)
        operator delete((&__v.__end_cap_.__value_)[k]);
    }
  }
}

void sub_2182AD4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__split_buffer<std::string> *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__pa,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a31);
  if (a29 < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::clear(turi::sgraph *this)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  char *v5;
  void **v7;

  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
  v2 = (void **)*((_QWORD *)this + 8);
  v3 = (void **)*((_QWORD *)this + 9);
  while (v3 != v2)
  {
    v3 -= 3;
    v7 = v3;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
  v5 = (char *)*((_QWORD *)this + 12);
  v4 = (_QWORD *)((char *)this + 96);
  *(v4 - 3) = v2;
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::destroy((uint64_t)(v4 - 1), v5);
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  *(_OWORD *)(v4 - 9) = 0u;
  *(_OWORD *)(v4 - 7) = 0u;
  *((_BYTE *)v4 - 40) = 7;
  return 1;
}

void turi::sgraph::init(unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_power_of_2(num_partitions)", 29);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 56, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sgraph::init(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182AD79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<turi::sframe>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<turi::sframe>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<turi::sframe>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2182AD94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<turi::sframe>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sgraph::init_empty_sframe(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::string __p;
  _BYTE v7[296];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe((turi::sframe *)v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::sframe::open_for_write((uint64_t)v7, a2, a3, &__p, 1, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  turi::sframe::close((turi::sframe *)v7);
  turi::sframe::operator=(a1, (uint64_t)v7);
  turi::sframe::~sframe((turi::sframe *)v7);
}

void sub_2182ADA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  turi::sframe::~sframe((turi::sframe *)&a16);
  _Unwind_Resume(a1);
}

void turi::sgraph::bootstrap_vertex_id_type(uint64_t a1, char a2)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t j;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  void *v17;
  void *v18;
  _WORD *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  void *__p;
  void *v24;
  _BYTE *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string **v29;
  char v30;
  void *v31[2];
  char v32;
  _QWORD v33[3];
  __int128 v34;

  *(_QWORD *)&v34 = *MEMORY[0x24BDAC8D0];
  if ((a2 & 0xFD) != 0)
    turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_0::operator()();
  v31[0] = *(void **)(a1 + 48);
  if (v31[0])
  {
    v29 = (std::string **)v31;
    turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_1::operator()();
  }
  v31[0] = *(void **)(a1 + 40);
  if (v31[0])
  {
    v29 = (std::string **)v31;
    turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_2::operator()();
  }
  *(_BYTE *)(a1 + 56) = a2;
  v3 = *(uint64_t **)(a1 + 64);
  for (i = *(uint64_t **)(a1 + 72); v3 != i; v3 += 3)
  {
    v5 = *v3;
    v6 = v3[1];
    while (v5 != v6)
    {
      std::string::basic_string[abi:ne180100]<0>(v31, turi::sgraph::VID_COLUMN_NAME);
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = &v26;
      v30 = 0;
      v26 = (std::string *)operator new(0x18uLL);
      v27 = v26;
      v28 = v26 + 1;
      v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (__int128 *)v31, (__int128 *)v33, v26);
      v7 = *(_BYTE *)(a1 + 56);
      v24 = 0;
      v25 = 0;
      __p = 0;
      v8 = operator new(1uLL);
      __p = v8;
      *v8 = v7;
      v24 = v8 + 1;
      v25 = v8 + 1;
      turi::sgraph::init_empty_sframe(v5, &v26, &__p);
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
      v29 = &v26;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      if (v32 < 0)
        operator delete(v31[0]);
      v5 += 296;
    }
  }
  v9 = *(_QWORD **)(a1 + 88);
  if (v9 != (_QWORD *)(a1 + 96))
  {
    do
    {
      v10 = v9[6];
      v11 = v9[7];
      while (v10 != v11)
      {
        std::string::basic_string[abi:ne180100]<0>(v31, turi::sgraph::SRC_COLUMN_NAME);
        std::string::basic_string[abi:ne180100]<0>(v33, turi::sgraph::DST_COLUMN_NAME);
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v29 = &v20;
        v30 = 0;
        v20 = (std::string *)operator new(0x30uLL);
        v21 = v20;
        v22 = v20 + 2;
        v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, (__int128 *)v31, &v34, v20);
        v18 = 0;
        v19 = 0;
        v17 = 0;
        v12 = operator new(2uLL);
        v17 = v12;
        *v12 = 0;
        v18 = v12 + 1;
        v19 = v12 + 1;
        turi::sgraph::init_empty_sframe(v10, &v20, &v17);
        if (v17)
        {
          v18 = v17;
          operator delete(v17);
        }
        v29 = &v20;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        for (j = 0; j != -6; j -= 3)
        {
          if (SHIBYTE(v33[j + 2]) < 0)
            operator delete((void *)v33[j]);
        }
        v10 += 296;
      }
      v14 = (_QWORD *)v9[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v9[2];
          v16 = *v15 == (_QWORD)v9;
          v9 = v15;
        }
        while (!v16);
      }
      v9 = v15;
    }
    while (v15 != (_QWORD *)(a1 + 96));
  }
}

void sub_2182ADD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v37;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  v37 = 0;
  while (1)
  {
    if (*(&a36 + v37) < 0)
      operator delete(*(void **)((char *)&a31 + v37));
    v37 -= 24;
    if (v37 == -48)
      _Unwind_Resume(a1);
  }
}

void turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_edges()", 11);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 79, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182ADFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_2::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_vertices()", 14);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 80, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::bootstrap_vertex_id_type(turi::flex_type_enum)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182AE1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::increase_number_of_groups(turi::sgraph *this, std::string **a2)
{
  turi::sgraph *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE *v9;
  std::string **v10;
  unint64_t v11;
  _OWORD *v13;
  uint64_t v14;
  uint64_t i;
  _WORD *v16;
  uint64_t j;
  uint64_t *v18;
  std::string ***v19;
  std::string **v22;
  void *v23;
  void *v24;
  _WORD *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string **v29;
  uint64_t v30;
  void *__p;
  void *v32;
  _BYTE *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  std::string ***v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[3];
  __int128 v41;

  *(_QWORD *)&v41 = *MEMORY[0x24BDAC8D0];
  v29 = a2;
  v37 = (std::string ***)*((_QWORD *)this + 4);
  v19 = v37;
  if (v37 >= (std::string ***)a2)
  {
    *(_QWORD *)&v38 = &v29;
    *((_QWORD *)&v38 + 1) = &v37;
    turi::sgraph::increase_number_of_groups(unsigned long)::$_0::operator()();
  }
  v2 = this;
  v18 = (uint64_t *)((char *)this + 64);
  v3 = (uint64_t **)((char *)this + 88);
  v4 = (uint64_t **)((char *)this + 88);
  do
  {
    std::vector<turi::sframe>::vector(&v38, *((_QWORD *)v2 + 3));
    std::vector<std::vector<turi::sframe>>::push_back[abi:ne180100](v18, (uint64_t)&v38);
    v29 = (std::string **)&v38;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    v5 = (uint64_t *)(*v18 + 24 * (_QWORD)v19);
    v6 = *v5;
    v7 = v5[1];
    while (v6 != v7)
    {
      std::string::basic_string[abi:ne180100]<0>(&v38, turi::sgraph::VID_COLUMN_NAME);
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v29 = &v34;
      LOBYTE(v30) = 0;
      v34 = (std::string *)operator new(0x18uLL);
      v35 = v34;
      v36 = v34 + 1;
      v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, &v38, (__int128 *)v40, v34);
      v8 = *((_BYTE *)v2 + 56);
      v32 = 0;
      v33 = 0;
      __p = 0;
      v9 = operator new(1uLL);
      __p = v9;
      *v9 = v8;
      v32 = v9 + 1;
      v33 = v9 + 1;
      turi::sgraph::init_empty_sframe(v6, &v34, &__p);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      v29 = &v34;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      v3 = v4;
      if (SHIBYTE(v39) < 0)
        operator delete((void *)v38);
      v6 += 296;
    }
    v22 = 0;
    do
    {
      v10 = 0;
      do
      {
        v11 = *((_QWORD *)v2 + 4);
        if ((unint64_t)v22 >= v11 || (unint64_t)v10 >= v11)
        {
          std::vector<turi::sframe>::vector(&v29, *((_QWORD *)this + 3) * *((_QWORD *)this + 3));
          *(_QWORD *)&v38 = v22;
          *((_QWORD *)&v38 + 1) = v10;
          *(_OWORD *)v40 = 0uLL;
          v39 = 0;
          std::vector<turi::sframe>::__init_with_size[abi:ne180100]<turi::sframe*,turi::sframe*>(&v39, (uint64_t)v29, v30, 0x14C1BACF914C1BADLL * ((v30 - (uint64_t)v29) >> 3));
          std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>>>(v3, (unint64_t *)&v38, (uint64_t)&v38);
          v37 = (std::string ***)&v39;
          std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
          v37 = &v29;
          std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
          *(_QWORD *)&v38 = v22;
          *((_QWORD *)&v38 + 1) = v10;
          v29 = (std::string **)&v38;
          v13 = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(v3, (unint64_t *)&v38, (uint64_t)&std::piecewise_construct, (_OWORD **)&v29);
          v14 = *((_QWORD *)v13 + 6);
          for (i = *((_QWORD *)v13 + 7); v14 != i; v3 = v4)
          {
            std::string::basic_string[abi:ne180100]<0>(&v38, turi::sgraph::SRC_COLUMN_NAME);
            std::string::basic_string[abi:ne180100]<0>(v40, turi::sgraph::DST_COLUMN_NAME);
            v26 = 0;
            v27 = 0;
            v28 = 0;
            v29 = &v26;
            LOBYTE(v30) = 0;
            v26 = (std::string *)operator new(0x30uLL);
            v27 = v26;
            v28 = v26 + 2;
            v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, &v38, &v41, v26);
            v24 = 0;
            v25 = 0;
            v23 = 0;
            v16 = operator new(2uLL);
            v23 = v16;
            *v16 = 0;
            v24 = v16 + 1;
            v25 = v16 + 1;
            turi::sgraph::init_empty_sframe(v14, &v26, &v23);
            if (v23)
            {
              v24 = v23;
              operator delete(v23);
            }
            v29 = &v26;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
            for (j = 0; j != -6; j -= 3)
            {
              if (SHIBYTE(v40[j + 2]) < 0)
                operator delete((void *)v40[j]);
            }
            v14 += 296;
          }
        }
        v10 = (std::string **)((char *)v10 + 1);
        v2 = this;
      }
      while (v10 != a2);
      v22 = (std::string **)((char *)v22 + 1);
    }
    while (v22 != a2);
    v19 = (std::string ***)((char *)v19 + 1);
  }
  while (v19 != (std::string ***)a2);
  *((_QWORD *)this + 4) = a2;
}

void sub_2182AE610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30)
{
  uint64_t v30;

  a23 = v30 - 144;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void turi::sgraph::increase_number_of_groups(unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_groups", 10);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 96, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::increase_number_of_groups(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182AE8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

std::string *turi::sgraph::get_vertex_fields@<X0>(turi::sgraph *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3;

  if (*((_QWORD *)this + 4) <= a2)
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  v3 = *(_QWORD *)(*((_QWORD *)this + 8) + 24 * a2);
  if (0x14C1BACF914C1BADLL * ((*(_QWORD *)(*((_QWORD *)this + 8) + 24 * a2 + 8) - v3) >> 3) != *((_QWORD *)this + 3))
    turi::sgraph::get_vertex_fields(unsigned long)const::$_0::operator()();
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, *(__int128 **)(v3 + 40), *(__int128 **)(v3 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 48) - *(_QWORD *)(v3 + 40)) >> 3));
}

void turi::sgraph::get_vertex_fields(unsigned long)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vgroup.size()", 13);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 126, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::get_vertex_fields(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182AEB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *turi::sgraph::get_vertex_field_types@<X0>(turi::sgraph *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  size_t *v5;
  _QWORD *result;
  unint64_t v7;

  if (*((_QWORD *)this + 4) <= a2)
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  v4 = *((_QWORD *)this + 8) + 24 * a2;
  v5 = *(size_t **)v4;
  if (0x14C1BACF914C1BADLL * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3) != *((_QWORD *)this + 3))
    turi::sgraph::get_vertex_field_types(unsigned long)const::$_0::operator()();
  result = std::vector<turi::flex_type_enum>::vector(a3, v5[3]);
  if (v5[3])
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)turi::sframe::column_type((turi::sframe *)v5, v7);
      *(_BYTE *)(*a3 + v7++) = (_BYTE)result;
    }
    while (v7 < v5[3]);
  }
  return result;
}

void sub_2182AECF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::sgraph::get_vertex_field_types(unsigned long)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vgroup.size()", 13);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 132, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::get_vertex_field_types(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182AEE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

std::string *turi::sgraph::get_edge_fields@<X0>(turi::sgraph *this@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, std::string *a4@<X8>)
{
  unint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v5 = *((_QWORD *)this + 4);
  v13 = v5;
  v14 = a2;
  if (v5 <= a2)
  {
    v11 = &v14;
    v12 = &v13;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  v13 = v5;
  v14 = (unint64_t)a3;
  if (v5 <= (unint64_t)a3)
  {
    v11 = &v14;
    v12 = &v13;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  v11 = (_QWORD *)a2;
  v12 = a3;
  v7 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)this + 88, (unint64_t *)&v11);
  v8 = *v7;
  v9 = 0x14C1BACF914C1BADLL * ((v7[1] - *v7) >> 3);
  v13 = *((_QWORD *)this + 3) * *((_QWORD *)this + 3);
  v14 = v9;
  if (v9 != v13)
  {
    v11 = &v14;
    v12 = &v13;
    turi::sgraph::get_edge_fields(unsigned long,unsigned long)const::$_0::operator()();
  }
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a4, *(__int128 **)(v8 + 40), *(__int128 **)(v8 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 48) - *(_QWORD *)(v8 + 40)) >> 3));
}

void turi::sgraph::get_edge_fields(unsigned long,unsigned long)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"egroup.size()", 13);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions*m_num_partitions", 33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 139, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::get_edge_fields(unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182AF1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::get_edge_field_types(turi::sgraph *this@<X0>, void **a2@<X1>, void **a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  size_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t vertex_field_id;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  char v25;
  void *__p[2];
  char v27;
  unint64_t v28;
  void **v29;

  v5 = *((_QWORD *)this + 4);
  v28 = v5;
  v29 = a2;
  if (v5 <= (unint64_t)a2)
  {
    v23 = &v29;
    v24 = &v28;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  v28 = v5;
  v29 = a3;
  if (v5 <= (unint64_t)a3)
  {
    v23 = &v29;
    v24 = &v28;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  v23 = a2;
  v24 = a3;
  v7 = std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)this + 88, (unint64_t *)&v23);
  v8 = *(size_t **)v7;
  v9 = 0x14C1BACF914C1BADLL * ((uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  v28 = *((_QWORD *)this + 3) * *((_QWORD *)this + 3);
  v29 = (void **)v9;
  if (v9 != v28)
  {
    v23 = &v29;
    v24 = &v28;
    turi::sgraph::get_edge_field_types(unsigned long,unsigned long)const::$_0::operator()();
  }
  v10 = (uint64_t *)v7;
  std::vector<turi::flex_type_enum>::vector(a4, v8[3]);
  if (v8[3])
  {
    v11 = 0;
    do
    {
      *(_BYTE *)(*a4 + v11) = turi::sframe::column_type((turi::sframe *)v8, v11);
      ++v11;
    }
    while (v11 < v8[3]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::VID_COLUMN_NAME);
  vertex_field_id = turi::sgraph::get_vertex_field_id((uint64_t)this, (unsigned __int8 **)__p, 0);
  if (v27 < 0)
    operator delete(__p[0]);
  turi::sgraph::get_vertex_field_types(this, 0, &v23);
  v13 = *((_BYTE *)v23 + vertex_field_id);
  v24 = v23;
  operator delete(v23);
  v14 = *v10;
  std::string::basic_string[abi:ne180100]<0>(&v23, turi::sgraph::SRC_COLUMN_NAME);
  v15 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(v14 + 40), *(_QWORD *)(v14 + 48), (unsigned __int8 **)&v23);
  if (v15 == *(_QWORD *)(v14 + 48))
  {
    v29 = &v23;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v16 = v15;
  v17 = *(_QWORD *)(v14 + 40);
  if (v25 < 0)
    operator delete(v23);
  v18 = *v10;
  std::string::basic_string[abi:ne180100]<0>(&v23, turi::sgraph::DST_COLUMN_NAME);
  v19 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(v18 + 40), *(_QWORD *)(v18 + 48), (unsigned __int8 **)&v23);
  if (v19 == *(_QWORD *)(v18 + 48))
  {
    v29 = &v23;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v20 = v19;
  v21 = *(_QWORD *)(v18 + 40);
  if (v25 < 0)
    operator delete(v23);
  v22 = *a4;
  *(_BYTE *)(v22 - 0x5555555555555555 * ((v20 - v21) >> 3)) = v13;
  *(_BYTE *)(v22 - 0x5555555555555555 * ((v16 - v17) >> 3)) = v13;
}

void sub_2182AF488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  v22 = *(void **)v20;
  if (*(_QWORD *)v20)
  {
    *(_QWORD *)(v20 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

void turi::sgraph::get_edge_field_types(unsigned long,unsigned long)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"egroup.size()", 13);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions*m_num_partitions", 33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 146, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::get_edge_field_types(unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182AF670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::sgraph::get_vertex_field_id(uint64_t a1, unsigned __int8 **a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 32) <= a3)
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24 * a3);
  v4 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), a2);
  if (v4 == *(_QWORD *)(v3 + 48))
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  return 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)(v3 + 40)) >> 3);
}

void turi::sgraph::get_vertices(turi::sgraph *a1@<X0>, unsigned __int8 **a2@<X1>, _QWORD *a3@<X2>, unint64_t a4@<X3>, turi::sframe *a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const turi::sframe **v15;
  _QWORD *v16;
  const turi::sframe *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  std::string::size_type v27;
  uint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  std::string::size_type size;
  uint64_t v32;
  std::string::size_type v33;
  uint64_t v34;
  int64x2_t v35;
  std::string *v36;
  _QWORD *v37;
  _QWORD *v38;
  BOOL v39;
  const turi::sframe *v40;
  uint64_t v41;
  unint64_t v42;
  std::string *v43;
  std::string *v44;
  uint64_t v45;
  size_t *v46;
  size_t *v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t (***v54)();
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  const turi::sframe *v58;
  const turi::sframe *v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned __int8 **v63;
  _QWORD **v64;
  _QWORD *v65[2];
  std::string v66;
  std::string v67;
  unint64_t v68;
  int64x2_t v69;
  std::string *v70;
  std::string v71;
  void *v72;
  _QWORD v73[17];
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t (**v76)();
  int64x2_t *v77;
  uint64_t (***v78)();
  _QWORD v79[3];
  _QWORD *v80;
  std::string __p;
  std::string *p_p;
  std::string **v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe(a5);
  v72 = (void *)a4;
  v67.__r_.__value_.__r.__words[0] = *((_QWORD *)a1 + 4);
  if (v67.__r_.__value_.__r.__words[0] <= a4)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v67;
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  }
  v10 = (uint64_t *)(*((_QWORD *)a1 + 8) + 24 * a4);
  v11 = *v10;
  v12 = v10[1];
  if (v11 != v12)
  {
    v13 = 0;
    do
    {
      if (*(_BYTE *)(v11 + 288))
        v14 = *(_QWORD *)(v11 + 32);
      else
        v14 = 0;
      v13 += v14;
      v11 += 296;
    }
    while (v11 != v12);
    if (v13)
    {
      turi::sgraph::get_vertex_fields(a1, a4, &v71);
      v67.__r_.__value_.__r.__words[0] = a4;
      v79[0] = *((_QWORD *)a1 + 4);
      if (v79[0] <= a4)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v79;
        turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
      }
      v63 = a2;
      v60 = *((_QWORD *)a1 + 8);
      v61 = a4;
      v15 = (const turi::sframe **)(v60 + 24 * a4);
      v69 = 0uLL;
      v70 = 0;
      v62 = a3;
      v16 = (_QWORD *)*a3;
      if ((_QWORD *)*a3 != a3 + 1)
      {
        do
        {
          v17 = *v15;
          v18 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((_QWORD *)*v15 + 5), *((_QWORD *)*v15 + 6), (unsigned __int8 **)v16 + 4);
          if (v18 == *((_QWORD *)v17 + 6))
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v16 + 4);
            turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
          }
          v72 = (void *)(0xAAAAAAAAAAAAAAABLL * ((v18 - *((_QWORD *)v17 + 5)) >> 3));
          memset(v73, 0, 13);
          if (v73 != v16 + 7)
          {
            *(_QWORD *)((char *)v73 + 5) = *(_QWORD *)((char *)v16 + 61);
            v73[0] = v16[7];
            BYTE4(v73[1]) = *((_BYTE *)v16 + 68);
            if (BYTE4(v73[1]) <= 9u && ((1 << SBYTE4(v73[1])) & 0x33C) != 0)
            {
              v19 = (unint64_t *)v73[0];
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 + 1, v19));
            }
          }
          v21 = v69.i64[1];
          if (v69.i64[1] >= (unint64_t)v70)
          {
            v24 = 0xAAAAAAAAAAAAAAABLL * ((v69.i64[1] - v69.i64[0]) >> 3) + 1;
            if (v24 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((uint64_t)v70 - v69.i64[0]) >> 3) > v24)
              v24 = 0x5555555555555556 * (((uint64_t)v70 - v69.i64[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v70 - v69.i64[0]) >> 3) >= 0x555555555555555)
              v25 = 0xAAAAAAAAAAAAAAALL;
            else
              v25 = v24;
            v83 = &v70;
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v70, v25);
            v27 = (std::string::size_type)&v26[8 * ((v69.i64[1] - v69.i64[0]) >> 3)];
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
            __p.__r_.__value_.__l.__size_ = v27;
            p_p = (std::string *)&v26[24 * v28];
            *(_QWORD *)v27 = v72;
            *(_QWORD *)(v27 + 8) = 0;
            *(_DWORD *)(v27 + 16) = 0;
            *(_BYTE *)(v27 + 20) = 0;
            v29 = v73[0];
            *(_QWORD *)(v27 + 13) = *(_QWORD *)((char *)v73 + 5);
            *(_QWORD *)(v27 + 8) = v29;
            *(_BYTE *)(v27 + 20) = BYTE4(v73[1]);
            BYTE4(v73[1]) = 0;
            v23 = v27 + 24;
            __p.__r_.__value_.__r.__words[2] = v27 + 24;
            v30 = v69;
            size = __p.__r_.__value_.__l.__size_;
            if (v69.i64[1] == v69.i64[0])
            {
              v35 = vdupq_n_s64(v69.u64[1]);
            }
            else
            {
              v32 = 0;
              do
              {
                v33 = size + v32;
                *(_QWORD *)(v33 - 24) = *(_QWORD *)(v30.i64[1] + v32 - 24);
                *(_QWORD *)(v33 - 16) = 0;
                *(_DWORD *)(v33 - 8) = 0;
                *(_BYTE *)(v33 - 4) = 0;
                v34 = *(_QWORD *)(v30.i64[1] + v32 - 16);
                *(_QWORD *)(v33 - 11) = *(_QWORD *)(v30.i64[1] + v32 - 11);
                *(_QWORD *)(v33 - 16) = v34;
                *(_BYTE *)(v33 - 4) = *(_BYTE *)(v30.i64[1] + v32 - 4);
                *(_BYTE *)(v30.i64[1] + v32 - 4) = 0;
                v32 -= 24;
              }
              while (v30.i64[1] + v32 != v30.i64[0]);
              v35 = v69;
              v23 = __p.__r_.__value_.__r.__words[2];
              size += v32;
            }
            v69.i64[0] = size;
            v69.i64[1] = v23;
            *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v35;
            v36 = v70;
            v70 = p_p;
            p_p = v36;
            __p.__r_.__value_.__r.__words[0] = v35.i64[0];
            std::__split_buffer<std::pair<unsigned long,turi::flexible_type>>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            *(_QWORD *)v69.i64[1] = v72;
            *(_QWORD *)(v21 + 8) = 0;
            *(_DWORD *)(v21 + 16) = 0;
            *(_BYTE *)(v21 + 20) = 0;
            v22 = v73[0];
            *(_QWORD *)(v21 + 13) = *(_QWORD *)((char *)v73 + 5);
            *(_QWORD *)(v21 + 8) = v22;
            *(_BYTE *)(v21 + 20) = BYTE4(v73[1]);
            BYTE4(v73[1]) = 0;
            v23 = v21 + 24;
          }
          v69.i64[1] = v23;
          std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)&v72);
          v37 = (_QWORD *)v16[1];
          if (v37)
          {
            do
            {
              v38 = v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v38 = (_QWORD *)v16[2];
              v39 = *v38 == (_QWORD)v16;
              v16 = v38;
            }
            while (!v39);
          }
          v16 = v38;
        }
        while (v38 != a3 + 1);
      }
      v68 = 0;
      v40 = *v15;
      std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME);
      v41 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((_QWORD *)v40 + 5), *((_QWORD *)v40 + 6), (unsigned __int8 **)&__p);
      if (v41 == *((_QWORD *)v40 + 6))
      {
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      v42 = 0xAAAAAAAAAAAAAAABLL * ((v41 - *((_QWORD *)v40 + 5)) >> 3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v68 = v42;
      std::unordered_set<turi::flexible_type>::unordered_set<std::__wrap_iter<turi::flexible_type const*>>((uint64_t)&v67, *v63, v63[1]);
      if (*v63 == v63[1])
      {
        if (!v62[2])
        {
          v58 = *v15;
          v59 = *(const turi::sframe **)(v60 + 24 * v61 + 8);
          while (v58 != v59)
          {
            turi::sframe::append(a5, v58, (turi::sframe *)&__p);
            turi::sframe::operator=((uint64_t)a5, (uint64_t)&__p);
            turi::sframe::~sframe((turi::sframe *)&__p);
            v58 = (const turi::sframe *)((char *)v58 + 296);
          }
          goto LABEL_85;
        }
        v80 = 0;
        v76 = &off_24D936408;
        v77 = &v69;
        v78 = &v76;
        std::function<BOOL ()(std::vector<turi::flexible_type> const&)>::operator=(v79, (uint64_t)&v76);
      }
      else
      {
        v80 = 0;
        v76 = &off_24D936408;
        v77 = &v69;
        v78 = &v76;
        if (v62[2])
        {
          v43 = (std::string *)operator new(0x20uLL);
          v43->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24D936518;
          v43->__r_.__value_.__l.__size_ = (std::string::size_type)&v67;
          v43->__r_.__value_.__r.__words[2] = (std::string::size_type)&v68;
          v43[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
          p_p = v43;
        }
        else
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24D936498;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v67;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v68;
          p_p = &__p;
        }
        std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::swap[abi:ne180100](&__p, v79);
        v44 = p_p;
        if (p_p == &__p)
        {
          v45 = 4;
          v44 = &__p;
        }
        else
        {
          if (!p_p)
            goto LABEL_56;
          v45 = 5;
        }
        (*(void (**)(void))(v44->__r_.__value_.__r.__words[0] + 8 * v45))();
      }
LABEL_56:
      v46 = (size_t *)*v15;
      v47 = *(size_t **)(v60 + 24 * v61 + 8);
      if (*v15 != (const turi::sframe *)v47)
      {
        while (1)
        {
          turi::sframe::sframe((turi::sframe *)&__p);
          std::vector<turi::flex_type_enum>::vector(&v72, v46[3]);
          if (v46[3])
          {
            v48 = 0;
            do
            {
              v49 = turi::sframe::column_type((turi::sframe *)v46, v48);
              *((_BYTE *)v72 + v48++) = v49;
            }
            while (v48 < v46[3]);
          }
          std::string::basic_string[abi:ne180100]<0>(&v66, "");
          v50 = (*(uint64_t (**)(size_t *))(*v46 + 24))(v46);
          turi::sframe::open_for_write((uint64_t)&__p, v46 + 5, &v72, &v66, v50, 1);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          if (v72)
          {
            v73[0] = v72;
            operator delete(v72);
          }
          v51 = (uint64_t)v80;
          if (!v80)
            goto LABEL_67;
          if (v80 != v79)
            break;
          v75 = v74;
          (*(void (**)(_QWORD *, _BYTE *))(v79[0] + 24))(v79, v74);
LABEL_69:
          v65[0] = 0;
          v65[1] = 0;
          v64 = v65;
          turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>((turi::sframe *)v46, &__p, (uint64_t)v74, (uint64_t)&v64, -1);
          std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v64, v65[0]);
          v52 = v75;
          if (v75 == v74)
          {
            v52 = v74;
            v53 = 4;
            goto LABEL_73;
          }
          if (v75)
          {
            v53 = 5;
LABEL_73:
            (*(void (**)(void))(*v52 + 8 * v53))();
          }
          turi::sframe::close((turi::sframe *)&__p);
          turi::sframe::append(a5, (const turi::sframe *)&__p, (turi::sframe *)&v72);
          turi::sframe::operator=((uint64_t)a5, (uint64_t)&v72);
          turi::sframe::~sframe((turi::sframe *)&v72);
          turi::sframe::~sframe((turi::sframe *)&__p);
          v46 += 37;
          if (v46 == v47)
            goto LABEL_75;
        }
        v51 = (*(uint64_t (**)(void))(*v80 + 16))();
LABEL_67:
        v75 = (_BYTE *)v51;
        goto LABEL_69;
      }
LABEL_75:
      v54 = v78;
      if (v78 == &v76)
      {
        v55 = 4;
        v54 = &v76;
      }
      else
      {
        if (!v78)
          goto LABEL_80;
        v55 = 5;
      }
      (*v54)[v55]();
LABEL_80:
      v56 = v80;
      if (v80 == v79)
      {
        v57 = 4;
        v56 = v79;
      }
      else
      {
        if (!v80)
        {
LABEL_85:
          std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)&v67);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
          std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          return;
        }
        v57 = 5;
      }
      (*(void (**)(void))(*v56 + 8 * v57))();
      goto LABEL_85;
    }
  }
  turi::sgraph::get_vertex_fields(a1, 0, &__p);
  turi::sgraph::get_vertex_field_types(a1, 0, &v72);
  std::string::basic_string[abi:ne180100]<0>(&v67, "");
  turi::sframe::open_for_write((uint64_t)a5, &__p, &v72, &v67, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (v72)
  {
    v73[0] = v72;
    operator delete(v72);
  }
  v72 = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  turi::sframe::close(a5);
}

void sub_2182B0010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33)
{
  turi::sframe *v33;
  unint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;

  v35 = (unint64_t *)STACK[0x220];
  if ((unint64_t *)STACK[0x220] == &STACK[0x208])
  {
    v36 = 4;
    v35 = &STACK[0x208];
  }
  else
  {
    if (!v35)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_6:
  v37 = (unint64_t *)STACK[0x240];
  if ((unint64_t *)STACK[0x240] == &STACK[0x228])
  {
    v38 = 4;
    v37 = &STACK[0x228];
  }
  else
  {
    if (!v37)
      goto LABEL_11;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_11:
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)&a21);
  a33 = &a27;
  std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  turi::sframe::~sframe(v33);
  _Unwind_Resume(a1);
}

_QWORD *std::function<BOOL ()(std::vector<turi::flexible_type> const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

turi::sframe_reader *turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v9;
  file_logger *v10;
  file_logger *started;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  BOOL v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  turi::sframe_reader *result;
  _QWORD *exception;
  std::locale v25;
  void **p_p;
  turi::sframe_reader **v27;
  _BYTE *v28;
  uint64_t v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;
  turi::sframe_reader *v33;
  uint64_t v34;

  v34 = a5;
  v9 = (int *)global_logger();
  if (v9[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v9))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v10 = (file_logger *)global_logger();
    started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "copy_if", 141, 1);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12 && *((_BYTE *)v12 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"Function entry", 14);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13)
    {
      if (*((_BYTE *)v13 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(v13[2] - 24) + 16));
        v14 = std::locale::use_facet(&v25, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(&v25);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (*((_BYTE *)a1 + 288))
    v15 = *((_BYTE *)a1 + 289) == 0;
  else
    v15 = 0;
  if (!v15)
    turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator()();
  if (!a2[288] || !a2[289])
    turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator()();
  v16 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
  turi::sframe::get_reader(a1, v16, &v33);
  __p = 0;
  v31 = 0;
  v32 = 0;
  if (*(_QWORD *)(a4 + 16))
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::vector<unsigned long>>>(0, *(char **)a4, (char *)(a4 + 8), (uint64_t)&__p, (char **)&v25);
    v17 = __p;
    v18 = v31;
  }
  else
  {
    v19 = (*(uint64_t (**)(turi::sframe_reader *))(*(_QWORD *)v33 + 16))(v33);
    std::vector<unsigned long>::resize((uint64_t)&__p, v19);
    v20 = __p;
    v17 = v31;
    if (v31 == __p)
    {
      v18 = v31;
    }
    else
    {
      v21 = 0;
      v22 = (v31 - (_BYTE *)__p) >> 3;
      if (v22 <= 1)
        v22 = 1;
      do
      {
        v20[v21] = v21;
        ++v21;
      }
      while (v22 != v21);
      v18 = v17;
      v17 = v20;
    }
  }
  v25.__locale_ = (std::locale::__imp *)&v34;
  p_p = &__p;
  v27 = &v33;
  v28 = a2;
  v29 = a3;
  turi::parallel_for<void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(0, (v18 - v17) >> 3, (uint64_t)&v25);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  result = v33;
  v33 = 0;
  if (result)
    return (turi::sframe_reader *)(*(uint64_t (**)(turi::sframe_reader *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2182B0558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::sgraph::get_edges(unint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, void **a5@<X4>, unint64_t *a6@<X5>, turi::sframe *a7@<X8>)
{
  turi::sframe *v11;
  std::string::size_type v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  void **v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void **v35;
  int64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unint64_t v59;
  BOOL v60;
  int v61;
  int v62;
  _OWORD *v63;
  _OWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  const turi::sframe *v90;
  const turi::sframe *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  std::string *v96;
  uint64_t v97;
  turi::sframe *v98;
  _OWORD *v101[2];
  _QWORD v102[3];
  _QWORD v103[3];
  _QWORD v104[3];
  unint64_t v105;
  unint64_t v106;
  int64x2_t v107;
  _QWORD v108[2];
  std::string v109;
  unint64_t *v110;
  void **v111;
  _BYTE __p[32];
  _QWORD *v113;
  _BYTE v114[24];
  _BYTE *v115;
  _BYTE v116[24];
  _BYTE *v117;
  _OWORD *v118[4];
  _BYTE v119[24];
  _BYTE *v120;
  _BYTE v121[24];
  _BYTE *v122;
  _QWORD v123[3];
  _QWORD *v124;
  void **v125[4];
  int v126;
  _QWORD v127[3];
  _QWORD *v128;
  std::string v129;
  std::string *v130;
  uint64_t v131;

  v11 = a7;
  v131 = *MEMORY[0x24BDAC8D0];
  v110 = a6;
  v111 = a5;
  turi::sframe::sframe(a7);
  v125[0] = a5;
  v12 = a1[4];
  v129.__r_.__value_.__r.__words[0] = v12;
  if (v12 <= (unint64_t)a5)
  {
    *(_QWORD *)__p = v125;
    *(_QWORD *)&__p[8] = &v129;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  v125[0] = (void **)a6;
  v129.__r_.__value_.__r.__words[0] = v12;
  if (v12 <= (unint64_t)a6)
  {
    *(_QWORD *)__p = v125;
    *(_QWORD *)&__p[8] = &v129;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  *(_QWORD *)__p = a5;
  *(_QWORD *)&__p[8] = a6;
  v13 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)(a1 + 11), (unint64_t *)__p);
  v14 = *v13;
  v15 = v13[1];
  if (*v13 != v15)
  {
    v16 = 0;
    do
    {
      if (*(_BYTE *)(v14 + 288))
        v17 = *(_QWORD *)(v14 + 32);
      else
        v17 = 0;
      v16 += v17;
      v14 += 296;
    }
    while (v14 != v15);
    if (v16)
    {
      turi::sgraph::get_edge_fields((turi::sgraph *)a1, (unint64_t)v111, v110, &v109);
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
      v18 = a1[4];
      v127[0] = v18;
      if (v18 <= (unint64_t)v111)
      {
        *(_QWORD *)__p = &v129;
        *(_QWORD *)&__p[8] = v127;
        turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
      }
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
      v127[0] = v18;
      if (v18 <= (unint64_t)v110)
      {
        *(_QWORD *)__p = &v129;
        *(_QWORD *)&__p[8] = v127;
        turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
      }
      *(_QWORD *)__p = v111;
      *(_QWORD *)&__p[8] = v110;
      v19 = std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)(a1 + 11), (unint64_t *)__p);
      v98 = v11;
      v107 = 0uLL;
      v108[0] = 0;
      v22 = (_QWORD *)*a4;
      v21 = a4 + 1;
      v20 = v22;
      if (v22 != v21)
      {
        do
        {
          v23 = *(_QWORD *)v19;
          v24 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(*(_QWORD *)v19 + 40), *(_QWORD *)(*(_QWORD *)v19 + 48), (unsigned __int8 **)v20 + 4);
          if (v24 == *(_QWORD *)(v23 + 48))
          {
            *(_QWORD *)__p = v20 + 4;
            turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
          }
          v125[0] = (void **)(0xAAAAAAAAAAAAAAABLL * ((v24 - *(_QWORD *)(v23 + 40)) >> 3));
          v125[1] = 0;
          LODWORD(v125[2]) = 0;
          BYTE4(v125[2]) = 0;
          if (&v125[1] != v20 + 7)
          {
            *(void ***)((char *)&v125[1] + 5) = *(void ***)((char *)v20 + 61);
            v125[1] = *((void ***)v20 + 7);
            BYTE4(v125[2]) = *((_BYTE *)v20 + 68);
            if (BYTE4(v125[2]) <= 9u && ((1 << SBYTE4(v125[2])) & 0x33C) != 0)
            {
              v25 = (unint64_t *)v125[1];
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 + 1, v25));
            }
          }
          v27 = v107.i64[1];
          if (v107.i64[1] >= v108[0])
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * ((v107.i64[1] - v107.i64[0]) >> 3) + 1;
            if (v30 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v108[0] - v107.i64[0]) >> 3) > v30)
              v30 = 0x5555555555555556 * ((v108[0] - v107.i64[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v108[0] - v107.i64[0]) >> 3) >= 0x555555555555555)
              v31 = 0xAAAAAAAAAAAAAAALL;
            else
              v31 = v30;
            v113 = v108;
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)v108, v31);
            v33 = &v32[8 * ((v107.i64[1] - v107.i64[0]) >> 3)];
            *(_QWORD *)__p = v32;
            *(_QWORD *)&__p[8] = v33;
            *(_QWORD *)&__p[24] = &v32[24 * v34];
            *(void ***)v33 = v125[0];
            *((_QWORD *)v33 + 1) = 0;
            *((_DWORD *)v33 + 4) = 0;
            v33[20] = 0;
            v35 = v125[1];
            *(void ***)(v33 + 13) = *(void ***)((char *)&v125[1] + 5);
            *((_QWORD *)v33 + 1) = v35;
            v33[20] = BYTE4(v125[2]);
            BYTE4(v125[2]) = 0;
            v29 = v33 + 24;
            *(_QWORD *)&__p[16] = v33 + 24;
            v36 = v107;
            v37 = *(_QWORD *)&__p[8];
            if (v107.i64[1] == v107.i64[0])
            {
              v41 = vdupq_n_s64(v107.u64[1]);
            }
            else
            {
              v38 = 0;
              do
              {
                v39 = v37 + v38;
                *(_QWORD *)(v39 - 24) = *(_QWORD *)(v36.i64[1] + v38 - 24);
                *(_QWORD *)(v39 - 16) = 0;
                *(_DWORD *)(v39 - 8) = 0;
                *(_BYTE *)(v39 - 4) = 0;
                v40 = *(_QWORD *)(v36.i64[1] + v38 - 16);
                *(_QWORD *)(v39 - 11) = *(_QWORD *)(v36.i64[1] + v38 - 11);
                *(_QWORD *)(v39 - 16) = v40;
                *(_BYTE *)(v39 - 4) = *(_BYTE *)(v36.i64[1] + v38 - 4);
                *(_BYTE *)(v36.i64[1] + v38 - 4) = 0;
                v38 -= 24;
              }
              while (v36.i64[1] + v38 != v36.i64[0]);
              v41 = v107;
              v29 = *(char **)&__p[16];
              v37 += v38;
            }
            v107.i64[0] = v37;
            v107.i64[1] = (uint64_t)v29;
            *(int64x2_t *)&__p[8] = v41;
            v42 = v108[0];
            v108[0] = *(_QWORD *)&__p[24];
            *(_QWORD *)&__p[24] = v42;
            *(_QWORD *)__p = v41.i64[0];
            std::__split_buffer<std::pair<unsigned long,turi::flexible_type>>::~__split_buffer((uint64_t)__p);
          }
          else
          {
            *(_QWORD *)v107.i64[1] = v125[0];
            *(_QWORD *)(v27 + 8) = 0;
            *(_DWORD *)(v27 + 16) = 0;
            *(_BYTE *)(v27 + 20) = 0;
            v28 = v125[1];
            *(void ***)(v27 + 13) = *(void ***)((char *)&v125[1] + 5);
            *(_QWORD *)(v27 + 8) = v28;
            *(_BYTE *)(v27 + 20) = BYTE4(v125[2]);
            BYTE4(v125[2]) = 0;
            v29 = (char *)(v27 + 24);
          }
          v107.i64[1] = (uint64_t)v29;
          std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)v125);
          v43 = (_QWORD *)v20[1];
          if (v43)
          {
            do
            {
              v44 = v43;
              v43 = (_QWORD *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v44 = (_QWORD *)v20[2];
              v45 = *v44 == (_QWORD)v20;
              v20 = v44;
            }
            while (!v45);
          }
          v20 = v44;
        }
        while (v44 != v21);
      }
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24D9365B8;
      v129.__r_.__value_.__l.__size_ = (std::string::size_type)&v107;
      v130 = &v129;
      v106 = 0;
      v46 = *(_QWORD *)v19;
      std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::SRC_COLUMN_NAME);
      v47 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(v46 + 40), *(_QWORD *)(v46 + 48), (unsigned __int8 **)__p);
      if (v47 == *(_QWORD *)(v46 + 48))
      {
        v127[0] = __p;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      v48 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *(_QWORD *)(v46 + 40)) >> 3);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v105 = 0;
      v106 = v48;
      v49 = *(_QWORD *)v19;
      std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::DST_COLUMN_NAME);
      v50 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(v49 + 40), *(_QWORD *)(v49 + 48), (unsigned __int8 **)__p);
      if (v50 == *(_QWORD *)(v49 + 48))
      {
        v127[0] = __p;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      v51 = 0xAAAAAAAAAAAAAAABLL * ((v50 - *(_QWORD *)(v49 + 40)) >> 3);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v105 = v51;
      v127[0] = &off_24D936638;
      v127[1] = &v106;
      v127[2] = &v105;
      v128 = v127;
      memset(v125, 0, sizeof(v125));
      v126 = 1065353216;
      v52 = operator new(0x28uLL);
      *v52 = &off_24D9366C8;
      v52[1] = &v111;
      v52[2] = &v110;
      v52[3] = v125;
      v52[4] = a1;
      v124 = v52;
      v53 = *a2;
      v54 = a2[1] - *a2;
      if (v54)
      {
        v55 = v54 >> 4;
        if (v55 <= 1)
          v56 = 1;
        else
          v56 = v55;
        if (*(_BYTE *)(v53 + 12) == 7)
        {
          v57 = (unsigned __int8 *)(*a3 + 12);
          v58 = (unsigned __int8 *)(v53 + 28);
          v59 = 1;
          v60 = 1;
          do
          {
            v61 = *v57;
            v57 += 16;
            if (v61 != 7)
              break;
            v60 = v59 < v55;
            if (v56 == v59)
              break;
            v62 = *v58;
            v58 += 16;
            ++v59;
          }
          while (v62 == 7);
        }
        else
        {
          v60 = 1;
        }
      }
      else
      {
        v60 = 0;
      }
      std::vector<turi::sframe>::vector(v104, a1[3] * a1[3]);
      if (v60)
      {
        std::vector<std::unordered_set<turi::flexible_type>>::vector(v103, a1[3]);
        std::vector<std::unordered_set<turi::flexible_type>>::vector(v102, a1[3]);
        memset(__p, 0, sizeof(__p));
        LODWORD(v113) = 1065353216;
        if (a1[3])
        {
          v63 = 0;
          do
          {
            v64 = 0;
            do
            {
              v118[0] = v63;
              v118[1] = v64;
              v101[0] = v118;
              v65 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>((uint64_t)__p, v118, (uint64_t)&std::piecewise_construct, v101);
              std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__assign_unique<std::pair<turi::flexible_type,turi::flexible_type> const*>(v65 + 4, 0, 0);
              v64 = (_OWORD *)((char *)v64 + 1);
              v66 = a1[3];
            }
            while ((unint64_t)v64 < v66);
            v63 = (_OWORD *)((char *)v63 + 1);
          }
          while ((unint64_t)v63 < v66);
        }
        else
        {
          v66 = 0;
        }
        v69 = *a2;
        if (a2[1] != *a2)
        {
          v70 = 0;
          v71 = 0;
          while (1)
          {
            v72 = (unsigned __int8 *)(v69 + v70);
            v73 = *a3;
            v74 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(v69 + v70));
            v75 = a1[3];
            v76 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(v73 + v70))
                % v75;
            if (*(_BYTE *)(v69 + v70 + 12) == 7)
            {
              v72 = (unsigned __int8 *)(v73 + 16 * v71);
              v77 = v102[0] + 40 * v76;
            }
            else
            {
              if (*(_BYTE *)(v73 + v70 + 12) != 7)
              {
                v101[0] = (_OWORD *)(v74 % v75);
                v101[1] = (_OWORD *)v76;
                v118[0] = v101;
                v78 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>((uint64_t)__p, v101, (uint64_t)&std::piecewise_construct, v118)+ 4;
                std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)v118, (uint64_t *)(v69 + v70), v73 + v70);
                std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t)v78, (unsigned __int8 *)v118, (uint64_t)v118);
                std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v118);
                goto LABEL_82;
              }
              v77 = v103[0] + 40 * (v74 % v75);
            }
            std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(v77, v72, (char *)v72);
LABEL_82:
            ++v71;
            v69 = *a2;
            v70 += 16;
            if (v71 >= (a2[1] - *a2) >> 4)
            {
              v66 = a1[3];
              v11 = v98;
              break;
            }
          }
        }
        v79 = (uint64_t)v124;
        if (v124)
        {
          if (v124 == v123)
          {
            v117 = v116;
            (*(void (**)(_QWORD *, _BYTE *))(v123[0] + 24))(v123, v116);
LABEL_100:
            v115 = 0;
            v85 = operator new(0x68uLL);
            *v85 = &off_24D936828;
            v85[1] = v125;
            v85[2] = &v111;
            v85[3] = &v110;
            v85[4] = a1;
            v85[5] = &v106;
            v85[6] = &v105;
            v85[7] = v103;
            v85[8] = v102;
            v85[9] = __p;
            v85[10] = &v129;
            v85[11] = v127;
            v85[12] = v104;
            v115 = v85;
            turi::sgraph_compute::hilbert_blocked_parallel_for (v66, (uint64_t)v116, (uint64_t)v114, turi::SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS);
            v86 = v115;
            if (v115 == v114)
            {
              v87 = 4;
              v86 = v114;
            }
            else
            {
              if (!v115)
                goto LABEL_105;
              v87 = 5;
            }
            (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_105:
            v88 = v117;
            if (v117 == v116)
            {
              v89 = 4;
              v88 = v116;
            }
            else
            {
              if (!v117)
              {
LABEL_110:
                std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::~__hash_table((uint64_t)__p);
                *(_QWORD *)__p = v102;
                std::vector<std::unordered_set<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                *(_QWORD *)__p = v103;
                std::vector<std::unordered_set<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_111;
              }
              v89 = 5;
            }
            (*(void (**)(void))(*v88 + 8 * v89))();
            goto LABEL_110;
          }
          v79 = (*(uint64_t (**)(void))(*v124 + 16))();
        }
        v117 = (_BYTE *)v79;
        goto LABEL_100;
      }
      v67 = a1[3];
      v68 = (uint64_t)v124;
      if (v124)
      {
        if (v124 == v123)
        {
          v122 = v121;
          (*(void (**)(_QWORD *, _BYTE *))(v123[0] + 24))(v123, v121);
LABEL_89:
          v120 = 0;
          v80 = operator new(0x50uLL);
          *v80 = &off_24D936778;
          v80[1] = v125;
          v80[2] = &v111;
          v80[3] = &v110;
          v80[4] = a1;
          v80[5] = &v106;
          v80[6] = &v105;
          v80[7] = &v129;
          v80[8] = v127;
          v80[9] = v104;
          v120 = v80;
          turi::sgraph_compute::hilbert_blocked_parallel_for (v67, (uint64_t)v121, (uint64_t)v119, turi::SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS);
          v81 = v120;
          if (v120 == v119)
          {
            v82 = 4;
            v81 = v119;
          }
          else
          {
            if (!v120)
              goto LABEL_94;
            v82 = 5;
          }
          (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_94:
          v83 = v122;
          if (v122 == v121)
          {
            v84 = 4;
            v83 = v121;
          }
          else
          {
            if (!v122)
            {
LABEL_111:
              v91 = (const turi::sframe *)v104[0];
              v90 = (const turi::sframe *)v104[1];
              while (v91 != v90)
              {
                turi::sframe::append(v11, v91, (turi::sframe *)__p);
                turi::sframe::operator=((uint64_t)v11, (uint64_t)__p);
                turi::sframe::~sframe((turi::sframe *)__p);
                v91 = (const turi::sframe *)((char *)v91 + 296);
              }
              *(_QWORD *)__p = v104;
              std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              v92 = v124;
              if (v124 == v123)
              {
                v93 = 4;
                v92 = v123;
              }
              else
              {
                if (!v124)
                  goto LABEL_119;
                v93 = 5;
              }
              (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_119:
              std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::~__hash_table((uint64_t)v125);
              v94 = v128;
              if (v128 == v127)
              {
                v95 = 4;
                v94 = v127;
              }
              else
              {
                if (!v128)
                  goto LABEL_124;
                v95 = 5;
              }
              (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_124:
              v96 = v130;
              if (v130 == &v129)
              {
                v97 = 4;
                v96 = &v129;
              }
              else
              {
                if (!v130)
                {
LABEL_129:
                  *(_QWORD *)__p = &v107;
                  std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  *(_QWORD *)__p = &v109;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  return;
                }
                v97 = 5;
              }
              (*(void (**)(void))(v96->__r_.__value_.__r.__words[0] + 8 * v97))();
              goto LABEL_129;
            }
            v84 = 5;
          }
          (*(void (**)(void))(*v83 + 8 * v84))();
          goto LABEL_111;
        }
        v68 = (*(uint64_t (**)(void))(*v124 + 16))();
      }
      v122 = (_BYTE *)v68;
      goto LABEL_89;
    }
  }
  turi::sgraph::get_edge_fields((turi::sgraph *)a1, 0, 0, (std::string *)__p);
  turi::sgraph::get_edge_field_types((turi::sgraph *)a1, 0, 0, (uint64_t *)v125);
  std::string::basic_string[abi:ne180100]<0>(&v129, "");
  turi::sframe::open_for_write((uint64_t)v11, __p, v125, &v129, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (v125[0])
  {
    v125[1] = v125[0];
    operator delete(v125[0]);
  }
  v125[0] = (void **)__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v125);
  turi::sframe::close(v11);
}

void sub_2182B117C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  turi::sframe *v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::~__hash_table((uint64_t)&__p);
  __p = &a14;
  std::vector<std::unordered_set<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a17;
  std::vector<std::unordered_set<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a20;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v38 = *(_QWORD **)(v36 - 216);
  if (v38 == (_QWORD *)(v36 - 240))
  {
    v39 = 4;
    v38 = (_QWORD *)(v36 - 240);
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_6:
  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::~__hash_table(v36 - 208);
  v40 = *(_QWORD **)(v36 - 144);
  if (v40 == (_QWORD *)(v36 - 168))
  {
    v41 = 4;
    v40 = (_QWORD *)(v36 - 168);
  }
  else
  {
    if (!v40)
      goto LABEL_11;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_11:
  v42 = *(_QWORD **)(v36 - 112);
  if (v42 == (_QWORD *)(v36 - 136))
  {
    v43 = 4;
    v42 = (_QWORD *)(v36 - 136);
  }
  else
  {
    if (!v42)
      goto LABEL_16;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_16:
  *(_QWORD *)(v36 - 208) = &a25;
  std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 208));
  *(_QWORD *)(v36 - 208) = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 208));
  turi::sframe::~sframe(v35);
  _Unwind_Resume(a1);
}

void turi::sgraph_compute::hilbert_blocked_parallel_for (unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  void *v28;
  void *v29;
  uint64_t v30;
  void *__p;
  char *v32;
  unint64_t v33;

  v4 = a1 * a1;
  if (a1 * a1)
  {
    v6 = 0;
    v24 = a1 * a1;
    do
    {
      v7 = 0;
      v8 = 0;
      __p = 0;
      v32 = 0;
      v33 = 0;
      v9 = v6 + a4;
      if (v4 >= v6 + a4)
        v4 = v6 + a4;
      if (v6 < v4)
      {
        do
        {
          v10 = turi::hilbert_index_to_coordinate(v6, a1);
          v12 = v10;
          v13 = v11;
          v14 = v32;
          if ((unint64_t)v32 >= v33)
          {
            v15 = (char *)__p;
            v16 = (v32 - (_BYTE *)__p) >> 4;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v18 = v33 - (_QWORD)__p;
            if ((uint64_t)(v33 - (_QWORD)__p) >> 3 > v17)
              v17 = v18 >> 3;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
              v19 = 0xFFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (v19)
            {
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v33, v19);
              v15 = (char *)__p;
              v14 = v32;
            }
            else
            {
              v20 = 0;
            }
            v21 = &v20[16 * v16];
            *(_QWORD *)v21 = v12;
            *((_QWORD *)v21 + 1) = v13;
            v22 = v21;
            if (v14 != v15)
            {
              do
              {
                *((_OWORD *)v22 - 1) = *((_OWORD *)v14 - 1);
                v22 -= 16;
                v14 -= 16;
              }
              while (v14 != v15);
              v15 = (char *)__p;
            }
            v7 = v21 + 16;
            __p = v22;
            v32 = v21 + 16;
            v33 = (unint64_t)&v20[16 * v19];
            if (v15)
              operator delete(v15);
          }
          else
          {
            *(_QWORD *)v32 = v10;
            *((_QWORD *)v14 + 1) = v11;
            v7 = v14 + 16;
          }
          v32 = v7;
          ++v6;
        }
        while (v6 < v4);
        v8 = (__int128 *)__p;
      }
      v28 = 0;
      v29 = 0;
      v30 = 0;
      std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)&v28, v8, (__int128 *)v7, (v7 - (char *)v8) >> 4);
      v4 = v24;
      v23 = *(_QWORD *)(a2 + 24);
      if (!v23)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &v28);
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      turi::parallel_for<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)>>((turi::thread_pool *)__p, v32, a3);
      if (__p)
      {
        v32 = (char *)__p;
        operator delete(__p);
      }
      v6 = v9;
    }
    while (v9 < v24);
  }
}

void sub_2182B1654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t turi::sgraph::add_vertices(turi::sgraph *this, uint64_t a2, unsigned __int8 **a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int *v15;
  file_logger *v16;
  file_logger *started;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  _QWORD *exception;
  std::string __p;
  unint64_t v32;
  std::locale v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE v37[24];
  _BYTE *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _BYTE v41[296];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 288) || !*(_QWORD *)(a2 + 32) || !*(_QWORD *)(a2 + 24))
    return 1;
  if (*((_QWORD *)this + 4) <= a4)
    turi::sgraph::increase_number_of_groups(this, (std::string **)(a4 + 1));
  v32 = 0;
  v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), a3);
  if (v8 == *(_QWORD *)(a2 + 48))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v32 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)(a2 + 40)) >> 3);
  v9 = v32;
  std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME);
  turi::sframe::set_column_name(a2, v9, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  turi::sgraph::fast_validate_add_vertices(this, (const turi::sframe *)a2, a4);
  turi::sframe::sframe((turi::sframe *)v41, (const turi::sframe *)a2);
  v10 = (void *)*((_QWORD *)this + 3);
  v39[0] = &off_24D936928;
  v39[1] = this;
  v39[2] = &v32;
  v40 = v39;
  v38 = 0;
  turi::shuffle((uint64_t)v41, v10, (uint64_t)v39, (uint64_t)v37, (uint64_t *)&__p);
  v11 = v38;
  if (v38 == v37)
  {
    v12 = 4;
    v11 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_14;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_14:
  v13 = v40;
  if (v40 == v39)
  {
    v14 = 4;
    v13 = v39;
    goto LABEL_18;
  }
  if (v40)
  {
    v14 = 5;
LABEL_18:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  turi::sframe::~sframe((turi::sframe *)v41);
  turi::sgraph::commit_vertex_buffer((unint64_t *)this, a4, (const turi::sframe **)&__p);
  v15 = (int *)global_logger();
  if (v15[169] <= 3)
  {
    if (cppipc::must_cancel((cppipc *)v15))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v16 = (file_logger *)global_logger();
    started = file_logger::start_stream(v16, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "add_vertices", 460, 1);
    v18 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v18 && *((_BYTE *)v18 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)"Num vertices for group ", 23);
    v19 = file_logger::operator<<<unsigned long>((uint64_t)started);
    v20 = pthread_getspecific(*(_QWORD *)(v19 + 592));
    if (v20 && *((_BYTE *)v20 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20 + 2, (uint64_t)": ", 2);
    v35 = *((_QWORD *)this + 4);
    v36 = a4;
    if (v35 <= a4)
    {
      v33.__locale_ = (std::locale::__imp *)&v36;
      v34 = &v35;
      turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
    }
    v21 = (uint64_t *)(*((_QWORD *)this + 8) + 24 * a4);
    v22 = *v21;
    v23 = v21[1];
    if (v22 != v23)
    {
      v24 = 0;
      do
      {
        if (*(_BYTE *)(v22 + 288))
          v25 = *(_QWORD *)(v22 + 32);
        else
          v25 = 0;
        v24 += v25;
        v22 += 296;
      }
      while (v22 != v23);
    }
    v26 = file_logger::operator<<<unsigned long>(v19);
    v27 = pthread_getspecific(*(_QWORD *)(v26 + 592));
    if (v27)
    {
      if (*((_BYTE *)v27 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(v27[2] - 24) + 16));
        v28 = std::locale::use_facet(&v33, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale(&v33);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v26);
        if (*(_DWORD *)(v26 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v33.__locale_ = (std::locale::__imp *)&__p;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  return 1;
}

void sub_2182B1A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,void **p_p,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::locale::~locale(&a17);
  p_p = &__p;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&p_p);
  _Unwind_Resume(a1);
}

void turi::sgraph::fast_validate_add_vertices(turi::sgraph *this, const turi::sframe *a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 *v15;
  __int128 v16;
  std::string::size_type v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  std::string v21;
  void *__p[2];
  __int128 v23;
  int v24;
  void *v25[3];
  std::string v26;
  unsigned __int8 v27;
  std::string *v28;

  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::VID_COLUMN_NAME);
  v6 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), (unsigned __int8 **)__p);
  if (v6 == *((_QWORD *)a2 + 6))
  {
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *((_QWORD *)a2 + 5)) >> 3);
  if (SBYTE7(v23) < 0)
    operator delete(__p[0]);
  v8 = turi::sframe::column_type(a2, v7);
  if (v8 == 7)
    turi::sgraph::fast_validate_add_vertices(turi::sframe const&,unsigned long)::$_0::operator()();
  v9 = *((unsigned __int8 *)this + 56);
  if (v9 == 7)
  {
    turi::sgraph::bootstrap_vertex_id_type((uint64_t)this, v8);
  }
  else if (v9 != v8)
  {
    __p[0] = this;
    turi::sgraph::fast_validate_add_vertices(turi::sframe const&,unsigned long)::$_1::operator()((uint64_t *)__p);
  }
  turi::sgraph::get_vertex_fields(this, a3, &v26);
  turi::sgraph::get_vertex_field_types(this, a3, v25);
  *(_OWORD *)__p = 0u;
  v23 = 0u;
  v24 = 1065353216;
  if (*((_QWORD *)a2 + 3))
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = turi::sframe::column_type(a2, v11);
      v13 = *((_QWORD *)a2 + 5);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 6) - v13) >> 3) <= v11)
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      v14 = v12;
      v15 = (__int128 *)(v13 + v10);
      if (*((char *)v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
      }
      else
      {
        v16 = *v15;
        v21.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
      }
      v28 = &v21;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)&v21, (uint64_t)&std::piecewise_construct, (__int128 **)&v28)+ 40) = v14;
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      ++v11;
      v10 += 24;
    }
    while (v11 < *((_QWORD *)a2 + 3));
  }
  v17 = v26.__r_.__value_.__r.__words[0];
  if (v26.__r_.__value_.__l.__size_ != v26.__r_.__value_.__r.__words[0])
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v27 = *((_BYTE *)v25[0] + v19);
      if (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(__p, (unsigned __int8 *)(v17 + v18)))
      {
        v21.__r_.__value_.__r.__words[0] = v17 + v18;
        v20 = std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)(v17 + v18), (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
        if (v20[40] != v27)
        {
          v21.__r_.__value_.__r.__words[0] = v17 + v18;
          v21.__r_.__value_.__l.__size_ = (std::string::size_type)&v27;
          turi::sgraph::fast_validate_add_vertices(turi::sframe const&,unsigned long)::$_2::operator()();
        }
      }
      ++v19;
      v17 = v26.__r_.__value_.__r.__words[0];
      v18 += 24;
    }
    while (v19 < 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v26.__r_.__value_.__l.__size_ - v26.__r_.__value_.__r.__words[0]) >> 3));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  __p[0] = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void turi::sgraph::commit_vertex_buffer(unint64_t *a1, unint64_t a2, const turi::sframe **a3)
{
  std::string::size_type v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t i;
  __int128 *v11;
  __int128 v12;
  unsigned __int8 v13;
  _OWORD *size;
  __int128 v15;
  std::string::size_type v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  unsigned __int8 *v26;
  char *v27;
  char v28;
  turi::thread_pool *v29;
  unint64_t v30;
  turi::thread_pool *instance;
  turi::thread *v32;
  turi::thread_pool *tls_data;
  turi::thread_pool *v34;
  uint64_t v35;
  double v36;
  turi::thread *v37;
  unint64_t v38;
  unint64_t j;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 *v45;
  __int128 *v46[6];
  uint64_t *v47;
  uint64_t *v48;
  _OWORD v49[2];
  int v50;
  void *__p;
  char *v52;
  char *v53;
  std::string v54;
  unint64_t v55;
  uint64_t v56[4];
  void **v57[3];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v55 = a2;
  turi::sgraph::get_vertex_fields((turi::sgraph *)a1, a2, &v54);
  turi::sgraph::get_vertex_field_types((turi::sgraph *)a1, a2, &__p);
  memset(v49, 0, sizeof(v49));
  v50 = 1065353216;
  v6 = v54.__r_.__value_.__r.__words[0];
  if (v54.__r_.__value_.__l.__size_ != v54.__r_.__value_.__r.__words[0])
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *((_BYTE *)__p + v8);
      v61.__r_.__value_.__r.__words[0] = v6 + v7;
      std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v49, (unsigned __int8 *)(v6 + v7), (uint64_t)&std::piecewise_construct, (__int128 **)&v61)[40] = v9;
      ++v8;
      v6 = v54.__r_.__value_.__r.__words[0];
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v54.__r_.__value_.__l.__size_ - v54.__r_.__value_.__r.__words[0]) >> 3));
  }
  v45 = (__int128 *)a3;
  turi::sframe::sframe((turi::sframe *)v57, *a3);
  if (v58)
  {
    for (i = 0; i < v58; ++i)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v60 - v59) >> 3) <= i)
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      v11 = (__int128 *)(v59 + 24 * i);
      if (*((char *)v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
      }
      else
      {
        v12 = *v11;
        v61.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v12;
      }
      v13 = turi::sframe::column_type((turi::sframe *)v57, i);
      if (!std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(v49, (unsigned __int8 *)&v61))
      {
        v46[0] = (__int128 *)&v61;
        std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v49, (unsigned __int8 *)&v61, (uint64_t)&std::piecewise_construct, v46)[40] = v13;
        size = (_OWORD *)v54.__r_.__value_.__l.__size_;
        if (v54.__r_.__value_.__l.__size_ >= v54.__r_.__value_.__r.__words[2])
        {
          v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v54, (__int128 *)&v61);
        }
        else
        {
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v54.__r_.__value_.__l.__size_, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
          }
          else
          {
            v15 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
            *(_QWORD *)(v54.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v61.__r_.__value_.__l + 2);
            *size = v15;
          }
          v16 = (std::string::size_type)size + 24;
        }
        v54.__r_.__value_.__l.__size_ = v16;
        v17 = v52;
        if (v52 >= v53)
        {
          v19 = (unint64_t)__p;
          v20 = v52 - (_BYTE *)__p;
          v21 = v52 - (_BYTE *)__p + 1;
          if (v21 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v22 = v53 - (_BYTE *)__p;
          if (2 * (v53 - (_BYTE *)__p) > (unint64_t)v21)
            v21 = 2 * v22;
          if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
            v23 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
            v24 = (char *)operator new(v23);
          else
            v24 = 0;
          v25 = &v24[v20];
          v26 = (unsigned __int8 *)&v24[v20];
          *v26 = v13;
          v18 = (char *)(v26 + 1);
          if (v17 != (char *)v19)
          {
            v27 = &v17[~v19];
            do
            {
              v28 = *--v17;
              (v27--)[(_QWORD)v24] = v28;
            }
            while (v17 != (char *)v19);
            v25 = v24;
          }
          __p = v25;
          v52 = v18;
          v53 = &v24[v23];
          if (v19)
            operator delete((void *)v19);
        }
        else
        {
          *v52 = v13;
          v18 = v17 + 1;
        }
        v52 = v18;
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
    }
  }
  v29 = (turi::thread_pool *)std::vector<unsigned long>::vector(&v47, a1[3]);
  v30 = a1[3];
  v46[0] = (__int128 *)a1;
  v46[1] = (__int128 *)&v55;
  v46[2] = v45;
  v46[3] = (__int128 *)&v54;
  v46[4] = (__int128 *)&__p;
  v46[5] = (__int128 *)&v47;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v29);
  v32 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v32);
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v32 <= 1)
  {
    if (v30)
    {
      for (j = 0; j != v30; ++j)
        turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0::operator()((uint64_t *)v46, j);
    }
  }
  else
  {
    v34 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v61, v34);
    v35 = 0;
    v36 = (double)v30 / (double)(unint64_t)v32;
    do
    {
      v37 = (turi::thread *)(v35 + 1);
      v38 = (unint64_t)(v36 * (double)(unint64_t)(v35 + 1) + 0.0);
      if ((turi::thread *)v35 == (turi::thread *)((char *)v32 - 1))
        v38 = v30;
      v56[2] = (unint64_t)(v36 * (double)(unint64_t)v35 + 0.0);
      v56[3] = v38;
      v56[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0>(unsigned long,unsigned long,turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0 const&)::{lambda(void)#1}>(turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0)::stored_vtable
             + 1;
      v56[1] = (uint64_t)v46;
      turi::parallel_task_queue::launch((uint64_t)&v61, (uint64_t)v56, v35);
      boost::function0<void>::~function0(v56);
      v35 = (uint64_t)v37;
    }
    while (v37 != v32);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&v61);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v61);
  }
  v40 = v47;
  v41 = v48;
  if (v47 != v48)
  {
    v42 = a1[5];
    v43 = v47;
    do
    {
      v44 = *v43++;
      v42 += v44;
      a1[5] = v42;
    }
    while (v43 != v41);
  }
  if (v40)
  {
    v48 = v40;
    operator delete(v40);
  }
  turi::sframe::~sframe((turi::sframe *)v57);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v49);
  if (__p)
  {
    v52 = (char *)__p;
    operator delete(__p);
  }
  v57[0] = (void **)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v57);
}

void sub_2182B2294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&STACK[0x200]);
  if (__p)
    operator delete(__p);
  turi::sframe::~sframe((turi::sframe *)&a36);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a19);
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  a36 = (uint64_t)&a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  _Unwind_Resume(a1);
}

void turi::sgraph::merge_vertex_partition(turi::sframe *a1@<X1>, turi::sframe *a2@<X2>, turi::sframe *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  _QWORD *i;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  turi::sframe *v26;
  __int128 v27;
  __int128 v28;
  int v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  std::string v34;
  void *__p[2];
  char v36;
  void **v37;
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::VID_COLUMN_NAME);
  v7 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((_QWORD *)a1 + 5), *((_QWORD *)a1 + 6), (unsigned __int8 **)__p);
  if (v7 == *((_QWORD *)a1 + 6))
  {
    *(_QWORD *)&v27 = __p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v8 = v7;
  v9 = *((_QWORD *)a1 + 5);
  if (v36 < 0)
    operator delete(__p[0]);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  memset(v30, 0, sizeof(v30));
  v27 = 0u;
  v28 = 0u;
  v29 = 1065353216;
  turi::sframe::get_reader(a1, (turi::sframe_reader **)__p);
  (*(void (**)(void))(*(_QWORD *)__p[0] + 48))();
  v10 = __p[0];
  __p[0] = 0;
  if (v10)
    (*(void (**)(void *))(*(_QWORD *)v10 + 8))(v10);
  turi::sframe::get_reader(a2, (turi::sframe_reader **)__p);
  (*(void (**)(void))(*(_QWORD *)__p[0] + 48))();
  v26 = a3;
  v11 = (v8 - v9) >> 3;
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = 0xAAAAAAAAAAAAAAABLL * v11;
  turi::sframe::sframe(a3);
  std::vector<turi::flex_type_enum>::vector(__p, *((_QWORD *)a1 + 3));
  if (*((_QWORD *)a1 + 3))
  {
    v14 = 0;
    do
    {
      v15 = turi::sframe::column_type(a1, v14);
      *((_BYTE *)__p[0] + v14++) = v15;
    }
    while (v14 < *((_QWORD *)a1 + 3));
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, "");
  turi::sframe::open_for_write((uint64_t)a3, (_QWORD *)a1 + 5, __p, &v34, 1, 1);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  turi::sframe::get_output_iterator((size_t *)a3, 0, (uint64_t)__p);
  v16 = v31;
  v17 = v32;
  while (v16 != v17)
  {
    v18 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(&v27, (unsigned __int8 *)(*v16 + 16 * v13));
    if (!v39)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v39 + 48))(v39, *((_QWORD *)v18 + 4));
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::remove(&v27, v18, (uint64_t)&v34);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>>>>::reset[abi:ne180100]((uint64_t)&v34, 0);
    v16 += 3;
  }
  for (i = (_QWORD *)v28; i; i = (_QWORD *)*i)
  {
    if (!v39)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v39 + 48))(v39, i[4]);
  }
  turi::sframe::close(v26);
  v20 = v41;
  if (v41 == v40)
  {
    v21 = 4;
    v20 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_27;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_27:
  v22 = v39;
  if (v39 == v38)
  {
    v23 = 4;
    v22 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  v24 = v37;
  if (v37 == __p)
  {
    v25 = 4;
    v24 = __p;
    goto LABEL_36;
  }
  if (v37)
  {
    v25 = 5;
LABEL_36:
    (*((void (**)(void))*v24 + v25))();
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>>>::~__hash_table((uint64_t)&v27);
  __p[0] = v30;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v31;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_2182B2C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, turi::sframe *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a30);
  turi::sframe::~sframe(a10);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>>>::~__hash_table((uint64_t)&a11);
  a30 = &a17;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = &a20;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void sub_2182B2EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unint64_t *a27,int a28,char a29)
{
  switch(a29)
  {
    case 2:
      turi::gl_sarray::clip(&a27);
      break;
    case 3:
      turi::gl_sarray::clip(&a27);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a27);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a27);
      break;
    case 8:
      turi::gl_sarray::clip(&a27);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a27);
      break;
    default:
      break;
  }
  JUMPOUT(0x2182B2CFCLL);
}

void sub_2182B2F64()
{
  JUMPOUT(0x2182B2D24);
}

uint64_t turi::sgraph::add_edges(turi::sgraph *this, uint64_t a2, unsigned __int8 **a3, unsigned __int8 **a4, unint64_t a5, unint64_t a6)
{
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  file_logger *v23;
  file_logger *started;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  pthread_key_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  pthread_key_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  _QWORD *exception;
  std::string __p;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64[38];

  v64[37] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 288) && *(_QWORD *)(a2 + 32) && *(_QWORD *)(a2 + 24))
  {
    v12 = *((_QWORD *)this + 4);
    if (v12 <= a5 || v12 <= a6)
    {
      if (a5 <= a6)
        v14 = a6;
      else
        v14 = a5;
      turi::sgraph::increase_number_of_groups(this, (std::string **)(v14 + 1));
      v12 = *((_QWORD *)this + 4);
    }
    v62 = v12;
    v63 = a5;
    if (v12 <= a5)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v62;
      turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()();
    }
    v62 = v12;
    v63 = a6;
    if (v12 <= a6)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v62;
      turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_1::operator()();
    }
    v15 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), a3);
    v16 = *(_QWORD *)(a2 + 48);
    if (v15 == v16)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
      turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
    }
    v17 = v15;
    v18 = *(_QWORD *)(a2 + 40);
    v19 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v18, v16, a4);
    if (v19 == *(_QWORD *)(a2 + 48))
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
      turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
    }
    v20 = v19;
    v21 = *(_QWORD *)(a2 + 40);
    std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::SRC_COLUMN_NAME);
    turi::sframe::set_column_name(a2, 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::DST_COLUMN_NAME);
    turi::sframe::set_column_name(a2, 0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 3), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    turi::sgraph::fast_validate_add_edges(this, (const turi::sframe *)a2, (void **)a5, (unint64_t *)a6);
    turi::sframe::sframe((turi::sframe *)v64, (const turi::sframe *)a2);
    turi::sgraph::commit_edge_buffer(this, a5, a6, v64);
    turi::sframe::~sframe((turi::sframe *)v64);
    v22 = (int *)global_logger();
    if (v22[169] <= 3)
    {
      if (cppipc::must_cancel((cppipc *)v22))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v23 = (file_logger *)global_logger();
      started = file_logger::start_stream(v23, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "add_edges", 584, 1);
      v25 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v25 && *((_BYTE *)v25 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"Num vertices for group ", 23);
      v26 = file_logger::operator<<<unsigned long>((uint64_t)started);
      v27 = pthread_getspecific(*(_QWORD *)(v26 + 592));
      if (v27 && *((_BYTE *)v27 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27 + 2, (uint64_t)": ", 2);
      v62 = *((_QWORD *)this + 4);
      v63 = a5;
      if (v62 <= a5)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v62;
        turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
      }
      v28 = (uint64_t *)(*((_QWORD *)this + 8) + 24 * a5);
      v29 = *v28;
      v30 = v28[1];
      if (v29 != v30)
      {
        v31 = 0;
        do
        {
          if (*(_BYTE *)(v29 + 288))
            v32 = *(_QWORD *)(v29 + 32);
          else
            v32 = 0;
          v31 += v32;
          v29 += 296;
        }
        while (v29 != v30);
      }
      v33 = (pthread_key_t *)file_logger::operator<<<unsigned long>(v26);
      v34 = pthread_getspecific(v33[74]);
      if (v34 && *((_BYTE *)v34 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush((file_logger *)v33);
      }
      v35 = pthread_getspecific(v33[74]);
      if (v35 && *((_BYTE *)v35 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35 + 2, (uint64_t)"Num vertices for group ", 23);
      v36 = file_logger::operator<<<unsigned long>((uint64_t)v33);
      v37 = pthread_getspecific(*(_QWORD *)(v36 + 592));
      if (v37 && *((_BYTE *)v37 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)": ", 2);
      v62 = *((_QWORD *)this + 4);
      v63 = a6;
      if (v62 <= a6)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v62;
        turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
      }
      v38 = (uint64_t *)(*((_QWORD *)this + 8) + 24 * a6);
      v39 = *v38;
      v40 = v38[1];
      if (v39 != v40)
      {
        v41 = 0;
        do
        {
          if (*(_BYTE *)(v39 + 288))
            v42 = *(_QWORD *)(v39 + 32);
          else
            v42 = 0;
          v41 += v42;
          v39 += 296;
        }
        while (v39 != v40);
      }
      v43 = (pthread_key_t *)file_logger::operator<<<unsigned long>(v36);
      v44 = pthread_getspecific(v43[74]);
      if (v44 && *((_BYTE *)v44 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush((file_logger *)v43);
      }
      v45 = pthread_getspecific(v43[74]);
      if (v45 && *((_BYTE *)v45 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45 + 2, (uint64_t)"Num edges ", 10);
      v46 = file_logger::operator<<<unsigned long>((uint64_t)v43);
      v47 = pthread_getspecific(*(_QWORD *)(v46 + 592));
      if (v47 && *((_BYTE *)v47 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47 + 2, (uint64_t)" -> ", 4);
      v48 = file_logger::operator<<<unsigned long>(v46);
      v49 = pthread_getspecific(*(_QWORD *)(v48 + 592));
      if (v49 && *((_BYTE *)v49 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49 + 2, (uint64_t)": ", 2);
      v50 = *((_QWORD *)this + 4);
      v62 = v50;
      v63 = a5;
      if (v50 <= a5)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v62;
        turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
      }
      v62 = v50;
      v63 = a6;
      if (v50 <= a6)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v62;
        turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
      }
      __p.__r_.__value_.__r.__words[0] = a5;
      __p.__r_.__value_.__l.__size_ = a6;
      v51 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)this + 88, (unint64_t *)&__p);
      v52 = *v51;
      v53 = v51[1];
      if (*v51 != v53)
      {
        v54 = 0;
        do
        {
          if (*(_BYTE *)(v52 + 288))
            v55 = *(_QWORD *)(v52 + 32);
          else
            v55 = 0;
          v54 += v55;
          v52 += 296;
        }
        while (v52 != v53);
      }
      v56 = file_logger::operator<<<unsigned long>(v48);
      v57 = pthread_getspecific(*(_QWORD *)(v56 + 592));
      if (v57)
      {
        if (*((_BYTE *)v57 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(v57[2] - 24) + 16));
          v58 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v56);
          if (*(_DWORD *)(v56 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
  }
  return 1;
}

void sub_2182B35E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupa", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 574, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182B37B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupb", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 575, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::add_edges(turi::sframe,std::string const&,std::string const&,unsigned long,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182B39CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::fast_validate_add_edges(turi::sgraph *this, const turi::sframe *a2, void **a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  __int128 *v22;
  __int128 v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v26;
  std::string::size_type v27;
  size_t v28;
  size_t v29;
  size_t v30;
  const void *v31;
  int v32;
  unsigned __int8 *v33;
  char *v34;
  size_t v35;
  const void *v36;
  int v37;
  unsigned __int8 *v38;
  std::string v39;
  void *__p[2];
  __int128 v41;
  int v42;
  void *v43[3];
  std::string v44;
  unsigned __int8 v45;
  std::string *v46;

  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::SRC_COLUMN_NAME);
  v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), (unsigned __int8 **)__p);
  if (v8 == *((_QWORD *)a2 + 6))
  {
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v9 = v8;
  v10 = *((_QWORD *)a2 + 5);
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::DST_COLUMN_NAME);
  v11 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), (unsigned __int8 **)__p);
  if (v11 == *((_QWORD *)a2 + 6))
  {
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *((_QWORD *)a2 + 5)) >> 3);
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  v14 = turi::sframe::column_type(a2, v12);
  if (v14 != turi::sframe::column_type(a2, v13))
    turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_0::operator()();
  if (v14 == 7)
    turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_1::operator()();
  v16 = (char *)this + 56;
  v15 = *((unsigned __int8 *)this + 56);
  if (v15 == 7)
  {
    turi::sgraph::bootstrap_vertex_id_type((uint64_t)this, v14);
  }
  else if (v15 != v14)
  {
    __p[0] = this;
    turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_2::operator()((uint64_t *)__p);
  }
  turi::sgraph::get_edge_fields(this, (unint64_t)a3, a4, &v44);
  turi::sgraph::get_edge_field_types(this, a3, (void **)a4, (uint64_t *)v43);
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  v42 = 1065353216;
  if (*((_QWORD *)a2 + 3))
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = turi::sframe::column_type(a2, v18);
      v20 = *((_QWORD *)a2 + 5);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 6) - v20) >> 3) <= v18)
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      v21 = v19;
      v22 = (__int128 *)(v20 + v17);
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
      }
      else
      {
        v23 = *v22;
        v39.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
      }
      v46 = &v39;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)&v39, (uint64_t)&std::piecewise_construct, (__int128 **)&v46)+ 40) = v21;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      ++v18;
      v17 += 24;
    }
    while (v18 < *((_QWORD *)a2 + 3));
  }
  v24 = v44.__r_.__value_.__r.__words[0];
  if (v44.__r_.__value_.__l.__size_ != v44.__r_.__value_.__r.__words[0])
  {
    v25 = 0;
    v26 = 0;
    do
    {
      v27 = v24 + v25;
      v45 = 0;
      v28 = strlen(turi::sgraph::SRC_COLUMN_NAME);
      v29 = v28;
      v30 = *(unsigned __int8 *)(v24 + v25 + 23);
      if (*(char *)(v24 + v25 + 23) < 0)
      {
        if (v28 != *(_QWORD *)(v27 + 8))
        {
          v34 = turi::sgraph::DST_COLUMN_NAME;
          v35 = strlen(turi::sgraph::DST_COLUMN_NAME);
          v30 = *(_QWORD *)(v27 + 8);
          goto LABEL_37;
        }
        if (v28 == -1)
LABEL_51:
          std::string::__throw_out_of_range[abi:ne180100]();
        v31 = *(const void **)v27;
      }
      else
      {
        if (v28 != v30)
        {
          v34 = turi::sgraph::DST_COLUMN_NAME;
          v35 = strlen(turi::sgraph::DST_COLUMN_NAME);
LABEL_34:
          v36 = (const void *)(v24 + v25);
          if (v35 == v30)
            goto LABEL_40;
          goto LABEL_41;
        }
        v31 = (const void *)(v24 + v25);
        if (v29 == -1)
          goto LABEL_51;
      }
      v32 = memcmp(v31, turi::sgraph::SRC_COLUMN_NAME, v29);
      v33 = (unsigned __int8 *)v16;
      if (!v32)
        goto LABEL_42;
      v34 = turi::sgraph::DST_COLUMN_NAME;
      v35 = strlen(turi::sgraph::DST_COLUMN_NAME);
      if ((v30 & 0x80) == 0)
        goto LABEL_34;
      v30 = *(_QWORD *)(v24 + v25 + 8);
LABEL_37:
      if (v35 == v30)
      {
        if (v30 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v36 = *(const void **)v27;
LABEL_40:
        v37 = memcmp(v36, v34, v30);
        v33 = (unsigned __int8 *)v16;
        if (!v37)
          goto LABEL_42;
      }
LABEL_41:
      v33 = (unsigned __int8 *)v43[0] + v26;
LABEL_42:
      v45 = *v33;
      if (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(__p, (unsigned __int8 *)(v24 + v25)))
      {
        v39.__r_.__value_.__r.__words[0] = v24 + v25;
        v38 = std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)(v24 + v25), (uint64_t)&std::piecewise_construct, (__int128 **)&v39);
        if (v38[40] != v45)
        {
          v39.__r_.__value_.__r.__words[0] = v24 + v25;
          v39.__r_.__value_.__l.__size_ = (std::string::size_type)&v45;
          turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_3::operator()();
        }
      }
      ++v26;
      v24 = v44.__r_.__value_.__r.__words[0];
      v25 += 24;
    }
    while (v26 < 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v44.__r_.__value_.__l.__size_ - v44.__r_.__value_.__r.__words[0]) >> 3));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
  __p[0] = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void turi::sgraph::commit_edge_buffer(turi::sgraph *a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  unint64_t v16;
  uint64_t i;
  timeval *v18;
  __darwin_suseconds_t *p_tv_usec;
  timeval *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  __int128 v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  file_logger *v45;
  file_logger *v46;
  _QWORD *v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int *v57;
  file_logger *v58;
  file_logger *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  _BYTE *v63;
  const std::locale::facet *v64;
  int *v65;
  file_logger *v66;
  file_logger *v67;
  _QWORD *v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  turi::thread_pool *v71;
  int64x2_t v72;
  turi::thread_pool *instance;
  turi::thread *v74;
  turi::thread_pool *tls_data;
  uint64_t v76;
  turi::thread_pool *v77;
  uint64_t v78;
  double v79;
  turi::thread *v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  file_logger *v84;
  file_logger *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  _BYTE *v89;
  const std::locale::facet *v90;
  int *v91;
  file_logger *v92;
  file_logger *v93;
  _QWORD *v94;
  _QWORD *v95;
  const std::locale::facet *v96;
  turi::thread_pool *vertex_field_types;
  int64x2_t v98;
  turi::thread_pool *v99;
  turi::thread *v100;
  turi::thread_pool *v101;
  uint64_t v102;
  turi::thread_pool *v103;
  uint64_t v104;
  double v105;
  turi::thread *v106;
  uint64_t v107;
  unint64_t v108;
  int *v109;
  file_logger *v110;
  file_logger *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  _BYTE *v115;
  const std::locale::facet *v116;
  int *v117;
  file_logger *v118;
  file_logger *v119;
  _QWORD *v120;
  _QWORD *v121;
  const std::locale::facet *v122;
  _QWORD *v123;
  _OWORD *v124;
  unint64_t v125;
  char *v126;
  __int128 v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  int *v133;
  file_logger *v134;
  file_logger *v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  _BYTE *v139;
  const std::locale::facet *v140;
  int *v141;
  file_logger *v142;
  file_logger *v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  const std::locale::facet *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *exception;
  _QWORD *v158;
  turi::sgraph *v159;
  void *__p[3];
  std::string v161;
  void *v162[3];
  std::string v163;
  _QWORD v164[3];
  uint64_t v165[3];
  unint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  int64x2_t v174;
  _QWORD v175[2];
  unint64_t v176;
  unint64_t v177;
  timeval v178;
  timeval v179;
  unint64_t v180;
  unint64_t v181;
  timeval v182;
  unint64_t v183;
  uint64_t v184;
  _BYTE v185[24];
  _BYTE *v186;
  _BYTE v187[24];
  _BYTE *v188;
  turi::sgraph *v189;
  timeval *v190;
  std::string *v191;
  uint64_t *v192;
  unint64_t *v193;
  std::string *v194;
  void **v195;
  _QWORD *v196;
  unint64_t *v197;
  _BYTE v198[24];
  _BYTE *v199;
  _BYTE v200[24];
  _BYTE *v201;
  _BYTE v202[49];
  timeval v203[2];
  _QWORD *v204;
  uint64_t v205;

  v205 = *MEMORY[0x24BDAC8D0];
  v180 = a3;
  v181 = a2;
  gettimeofday(&v179, 0);
  gettimeofday(&v178, 0);
  v176 = 0;
  v177 = 0;
  gettimeofday(&v178, 0);
  v6 = (int *)global_logger();
  if (v6[169] <= 3)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 609, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"In commit edge buffer (", 23);
    v10 = file_logger::operator<<<unsigned long>((uint64_t)started);
    v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)",", 1);
    v12 = file_logger::operator<<<unsigned long>(v10);
    v13 = pthread_getspecific(*(_QWORD *)(v12 + 592));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)")", 1);
    v14 = pthread_getspecific(*(_QWORD *)(v12 + 592));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet((const std::locale *)v203, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)v203);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v12);
        if (*(_DWORD *)(v12 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  gettimeofday(&v179, 0);
  v174 = 0uLL;
  v175[0] = 0;
  v16 = *((_QWORD *)a1 + 3) << (v181 != v180);
  if (!v16)
  {
    v171 = 0;
    v172 = 0;
    v173 = 0;
    v168 = 0;
    v169 = 0;
    v170 = 0;
    goto LABEL_45;
  }
  v159 = a1;
  for (i = 0; i != v16; ++i)
  {
    v18 = (timeval *)operator new(0x140uLL);
    *(_QWORD *)&v18->tv_usec = 0;
    v18[1].tv_sec = 0;
    v18->tv_sec = (__darwin_time_t)&unk_24D9369D8;
    p_tv_usec = &v18[1].tv_usec;
    v203[0].tv_sec = (__darwin_time_t)&off_24D936A28;
    *(_QWORD *)&v203[1].tv_usec = v203;
    turi::sarray_sorted_buffer<turi::flexible_type>::sarray_sorted_buffer(&v18[1].tv_usec, turi::SGRAPH_INGRESS_VID_BUFFER_SIZE, v203, 1);
    v20 = *(timeval **)&v203[1].tv_usec;
    if (*(timeval **)&v203[1].tv_usec == v203)
    {
      v20 = v203;
      v21 = 4;
    }
    else
    {
      if (!*(_QWORD *)&v203[1].tv_usec)
        goto LABEL_22;
      v21 = 5;
    }
    (*(void (**)(void))(v20->tv_sec + 8 * v21))();
LABEL_22:
    v189 = (turi::sgraph *)&v18[1].tv_usec;
    v190 = v18;
    v22 = v174.i64[1];
    if (v174.i64[1] >= v175[0])
    {
      v24 = (v174.i64[1] - v174.i64[0]) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v26 = v175[0] - v174.i64[0];
      if ((v175[0] - v174.i64[0]) >> 3 > v25)
        v25 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      v204 = v175;
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v175, v27);
      v30 = &v28[16 * v24];
      *(_QWORD *)v30 = p_tv_usec;
      *((_QWORD *)v30 + 1) = v18;
      v31 = (_QWORD *)v174.i64[1];
      v32 = (_QWORD *)v174.i64[0];
      if (v174.i64[1] == v174.i64[0])
      {
        v35 = vdupq_n_s64(v174.u64[1]);
        v33 = &v28[16 * v24];
      }
      else
      {
        v33 = &v28[16 * v24];
        do
        {
          v34 = *((_OWORD *)v31 - 1);
          v31 -= 2;
          *((_OWORD *)v33 - 1) = v34;
          v33 -= 16;
          *v31 = 0;
          v31[1] = 0;
        }
        while (v31 != v32);
        v35 = v174;
      }
      v23 = v30 + 16;
      v174.i64[0] = (uint64_t)v33;
      v174.i64[1] = (uint64_t)(v30 + 16);
      *(timeval *)&v203[0].tv_usec = (timeval)v35;
      v36 = v175[0];
      v175[0] = &v28[16 * v29];
      *(_QWORD *)&v203[1].tv_usec = v36;
      v203[0].tv_sec = v35.i64[0];
      std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)v203);
    }
    else
    {
      *(_QWORD *)v174.i64[1] = p_tv_usec;
      *(_QWORD *)(v22 + 8) = v18;
      v23 = (_QWORD *)(v22 + 16);
    }
    v174.i64[1] = (uint64_t)v23;
  }
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  if (v181 == v180)
  {
    v37 = 0;
    a1 = v159;
    do
    {
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](&v171, (__int128 *)(v174.i64[0] + v37));
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](&v168, (__int128 *)(v174.i64[0] + v37));
      v37 += 16;
      --v16;
    }
    while (v16);
  }
  else
  {
    a1 = v159;
    if (v16 >= 2)
    {
      v38 = 0;
      v39 = 0;
      do
      {
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](&v171, (__int128 *)(v174.i64[0] + v38));
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](&v168, (__int128 *)(v174.i64[0] + 16 * (v39 + *((_QWORD *)v159 + 3))));
        ++v39;
        v38 += 16;
      }
      while (v16 >> 1 != v39);
    }
  }
LABEL_45:
  v167 = 0;
  std::string::basic_string[abi:ne180100]<0>(v203, turi::sgraph::SRC_COLUMN_NAME);
  v40 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a4[5], a4[6], (unsigned __int8 **)v203);
  if (v40 == a4[6])
  {
    v182.tv_sec = (__darwin_time_t)v203;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v41 = 0xAAAAAAAAAAAAAAABLL * ((v40 - a4[5]) >> 3);
  if (SHIBYTE(v203[1].tv_sec) < 0)
    operator delete((void *)v203[0].tv_sec);
  v166 = 0;
  v167 = v41;
  std::string::basic_string[abi:ne180100]<0>(v203, turi::sgraph::DST_COLUMN_NAME);
  v42 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a4[5], a4[6], (unsigned __int8 **)v203);
  if (v42 == a4[6])
  {
    v182.tv_sec = (__darwin_time_t)v203;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v43 = 0xAAAAAAAAAAAAAAABLL * ((v42 - a4[5]) >> 3);
  if (SHIBYTE(v203[1].tv_sec) < 0)
    operator delete((void *)v203[0].tv_sec);
  v166 = v43;
  v44 = (int *)global_logger();
  if (v44[169] <= 3)
  {
    if (cppipc::must_cancel((cppipc *)v44))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v45 = (file_logger *)global_logger();
    v46 = file_logger::start_stream(v45, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 680, 1);
    v47 = pthread_getspecific(*((_QWORD *)v46 + 74));
    if (v47 && *((_BYTE *)v47 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47 + 2, (uint64_t)"Shuffling edges ...", 19);
    v48 = pthread_getspecific(*((_QWORD *)v46 + 74));
    if (v48)
    {
      if (*((_BYTE *)v48 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(v48[2] - 24) + 16));
        v49 = std::locale::use_facet((const std::locale *)v203, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
        std::locale::~locale((std::locale *)v203);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v46);
        if (*((_DWORD *)v46 + 150) == 7)
        {
          __print_back_trace();
          v158 = __cxa_allocate_exception(8uLL);
          *v158 = "LOG_FATAL encountered";
          __cxa_throw(v158, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::sframe::sframe((turi::sframe *)v202, (const turi::sframe *)a4);
  v50 = *((_QWORD *)a1 + 3);
  v201 = 0;
  v51 = operator new(0x20uLL);
  *v51 = &off_24D936AB8;
  v51[1] = a1;
  v51[2] = &v167;
  v51[3] = &v166;
  v201 = v51;
  v199 = 0;
  v52 = operator new(0x30uLL);
  *v52 = &off_24D936B38;
  v52[1] = &v167;
  v52[2] = &v166;
  v52[3] = a1;
  v52[4] = &v171;
  v52[5] = &v168;
  v199 = v52;
  turi::shuffle((uint64_t)v202, (void *)(v50 * v50), (uint64_t)v200, (uint64_t)v198, v165);
  v53 = v199;
  if (v199 == v198)
  {
    v54 = 4;
    v53 = v198;
LABEL_63:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  else if (v199)
  {
    v54 = 5;
    goto LABEL_63;
  }
  v55 = v201;
  if (v201 == v200)
  {
    v56 = 4;
    v55 = v200;
LABEL_68:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  else if (v201)
  {
    v56 = 5;
    goto LABEL_68;
  }
  turi::sframe::~sframe((turi::sframe *)v202);
  v57 = (int *)global_logger();
  if (v57[169] <= 3)
  {
    if (!cppipc::must_cancel((cppipc *)v57))
    {
      v58 = (file_logger *)global_logger();
      v59 = file_logger::start_stream(v58, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 688, 1);
      v60 = pthread_getspecific(*((_QWORD *)v59 + 74));
      if (v60 && *((_BYTE *)v60 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60 + 2, (uint64_t)"Done shuffling edges in ", 24);
      gettimeofday(v203, 0);
      v61 = file_logger::operator<<<double>((uint64_t)v59);
      v62 = pthread_getspecific(*(_QWORD *)(v61 + 592));
      if (v62 && *((_BYTE *)v62 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62 + 2, (uint64_t)" secs", 5);
      v63 = pthread_getspecific(*(_QWORD *)(v61 + 592));
      if (!v63)
        goto LABEL_80;
      if (!v63[280])
        goto LABEL_80;
      std::ios_base::getloc((const std::ios_base *)&v63[*(_QWORD *)(*((_QWORD *)v63 + 2) - 24) + 16]);
      v64 = std::locale::use_facet((const std::locale *)v203, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
      std::locale::~locale((std::locale *)v203);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v61);
      if (*(_DWORD *)(v61 + 600) != 7)
        goto LABEL_80;
LABEL_197:
      __print_back_trace();
      v153 = __cxa_allocate_exception(8uLL);
      *v153 = "LOG_FATAL encountered";
      __cxa_throw(v153, MEMORY[0x24BEDB718], 0);
    }
LABEL_191:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_80:
  gettimeofday(&v179, 0);
  v65 = (int *)global_logger();
  if (v65[169] <= 3)
  {
    if (cppipc::must_cancel((cppipc *)v65))
      goto LABEL_191;
    v66 = (file_logger *)global_logger();
    v67 = file_logger::start_stream(v66, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 692, 1);
    v68 = pthread_getspecific(*((_QWORD *)v67 + 74));
    if (v68 && *((_BYTE *)v68 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68 + 2, (uint64_t)"Aggregating unique vertices...", 30);
    v69 = pthread_getspecific(*((_QWORD *)v67 + 74));
    if (v69)
    {
      if (*((_BYTE *)v69 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(v69[2] - 24) + 16));
        v70 = std::locale::use_facet((const std::locale *)v203, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
        std::locale::~locale((std::locale *)v203);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v67);
        if (*((_DWORD *)v67 + 150) == 7)
          goto LABEL_197;
      }
    }
  }
  v71 = (turi::thread_pool *)std::vector<turi::sarray<turi::flexible_type>>::vector(v164, (v174.i64[1] - v174.i64[0]) >> 4);
  v72 = v174;
  v182.tv_sec = (__darwin_time_t)&v174;
  *(_QWORD *)&v182.tv_usec = v164;
  v183 = (unint64_t)a1;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v71);
  v74 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v74);
  v76 = (v72.i64[1] - v72.i64[0]) >> 4;
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v74 <= 1)
  {
    if (v72.i64[1] != v72.i64[0])
    {
      v82 = 0;
      do
        turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3::operator()((uint64_t)&v182, v82++);
      while (v76 != v82);
    }
  }
  else
  {
    v77 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v203, v77);
    v78 = 0;
    v79 = (double)(unint64_t)v76 / (double)(unint64_t)v74;
    do
    {
      v80 = (turi::thread *)(v78 + 1);
      v81 = (unint64_t)(v79 * (double)(unint64_t)(v78 + 1) + 0.0);
      if ((turi::thread *)v78 == (turi::thread *)((char *)v74 - 1))
        v81 = (v72.i64[1] - v72.i64[0]) >> 4;
      v191 = (std::string *)(v79 * (double)(unint64_t)v78 + 0.0);
      v192 = (uint64_t *)v81;
      v189 = (turi::sgraph *)((char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3 const&)::{lambda(void)#1}>(turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3)::stored_vtable
                            + 1);
      v190 = &v182;
      turi::parallel_task_queue::launch((uint64_t)v203, (uint64_t)&v189, v78);
      boost::function0<void>::~function0((uint64_t *)&v189);
      v78 = (uint64_t)v80;
    }
    while (v80 != v74);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v203);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v203);
  }
  v83 = (int *)global_logger();
  if (v83[169] <= 3)
  {
    if (!cppipc::must_cancel((cppipc *)v83))
    {
      v84 = (file_logger *)global_logger();
      v85 = file_logger::start_stream(v84, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 705, 1);
      v86 = pthread_getspecific(*((_QWORD *)v85 + 74));
      if (v86 && *((_BYTE *)v86 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86 + 2, (uint64_t)"Done aggregating unique vertex in ", 34);
      gettimeofday(v203, 0);
      v87 = file_logger::operator<<<double>((uint64_t)v85);
      v88 = pthread_getspecific(*(_QWORD *)(v87 + 592));
      if (v88 && *((_BYTE *)v88 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88 + 2, (uint64_t)" secs", 5);
      v89 = pthread_getspecific(*(_QWORD *)(v87 + 592));
      if (!v89)
        goto LABEL_109;
      if (!v89[280])
        goto LABEL_109;
      std::ios_base::getloc((const std::ios_base *)&v89[*(_QWORD *)(*((_QWORD *)v89 + 2) - 24) + 16]);
      v90 = std::locale::use_facet((const std::locale *)v203, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
      std::locale::~locale((std::locale *)v203);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v87);
      if (*(_DWORD *)(v87 + 600) != 7)
        goto LABEL_109;
LABEL_198:
      __print_back_trace();
      v154 = __cxa_allocate_exception(8uLL);
      *v154 = "LOG_FATAL encountered";
      __cxa_throw(v154, MEMORY[0x24BEDB718], 0);
    }
LABEL_192:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_109:
  gettimeofday(&v179, 0);
  v91 = (int *)global_logger();
  if (v91[169] <= 3)
  {
    if (cppipc::must_cancel((cppipc *)v91))
      goto LABEL_192;
    v92 = (file_logger *)global_logger();
    v93 = file_logger::start_stream(v92, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 713, 1);
    v94 = pthread_getspecific(*((_QWORD *)v93 + 74));
    if (v94 && *((_BYTE *)v94 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94 + 2, (uint64_t)"Combine vertex data", 19);
    v95 = pthread_getspecific(*((_QWORD *)v93 + 74));
    if (v95)
    {
      if (*((_BYTE *)v95 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v95 + *(_QWORD *)(v95[2] - 24) + 16));
        v96 = std::locale::use_facet((const std::locale *)v203, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v96->__vftable[2].~facet_0)(v96, 10);
        std::locale::~locale((std::locale *)v203);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v93);
        if (*((_DWORD *)v93 + 150) == 7)
          goto LABEL_198;
      }
    }
  }
  turi::sgraph::get_vertex_fields(a1, v181, &v163);
  turi::sgraph::get_vertex_field_types(a1, v181, v162);
  turi::sgraph::get_vertex_fields(a1, v180, &v161);
  vertex_field_types = (turi::thread_pool *)turi::sgraph::get_vertex_field_types(a1, v180, __p);
  v98 = v174;
  v189 = a1;
  v190 = (timeval *)&v181;
  v191 = &v163;
  v192 = (uint64_t *)v162;
  v193 = &v180;
  v194 = &v161;
  v195 = __p;
  v196 = v164;
  v197 = &v177;
  v99 = (turi::thread_pool *)turi::thread_pool::get_instance(vertex_field_types);
  v100 = (turi::thread *)turi::thread_pool::size(v99);
  v101 = (turi::thread_pool *)turi::thread::get_tls_data(v100);
  v102 = (v98.i64[1] - v98.i64[0]) >> 4;
  if (*((_BYTE *)v101 + 8) || (unint64_t)v100 <= 1)
  {
    if (v98.i64[1] != v98.i64[0])
    {
      v108 = 0;
      do
        turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4::operator()((uint64_t *)&v189, v108++);
      while (v102 != v108);
    }
  }
  else
  {
    v103 = (turi::thread_pool *)turi::thread_pool::get_instance(v101);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v203, v103);
    v104 = 0;
    v105 = (double)(unint64_t)v102 / (double)(unint64_t)v100;
    do
    {
      v106 = (turi::thread *)(v104 + 1);
      v107 = (unint64_t)(v105 * (double)(unint64_t)(v104 + 1) + 0.0);
      if ((turi::thread *)v104 == (turi::thread *)((char *)v100 - 1))
        v107 = (v98.i64[1] - v98.i64[0]) >> 4;
      v183 = (unint64_t)(v105 * (double)(unint64_t)v104 + 0.0);
      v184 = v107;
      v182.tv_sec = (__darwin_time_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4 const&)::{lambda(void)#1}>(turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4)::stored_vtable
                  + 1;
      *(_QWORD *)&v182.tv_usec = &v189;
      turi::parallel_task_queue::launch((uint64_t)v203, (uint64_t)&v182, v104);
      boost::function0<void>::~function0(&v182.tv_sec);
      v104 = (uint64_t)v106;
    }
    while (v106 != v100);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v203);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v203);
  }
  v109 = (int *)global_logger();
  if (v109[169] <= 3)
  {
    if (!cppipc::must_cancel((cppipc *)v109))
    {
      v110 = (file_logger *)global_logger();
      v111 = file_logger::start_stream(v110, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 779, 1);
      v112 = pthread_getspecific(*((_QWORD *)v111 + 74));
      if (v112 && *((_BYTE *)v112 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112 + 2, (uint64_t)"Done phase 2 in ", 16);
      gettimeofday(v203, 0);
      v113 = file_logger::operator<<<double>((uint64_t)v111);
      v114 = pthread_getspecific(*(_QWORD *)(v113 + 592));
      if (v114 && *((_BYTE *)v114 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114 + 2, (uint64_t)" secs", 5);
      v115 = pthread_getspecific(*(_QWORD *)(v113 + 592));
      if (!v115)
        goto LABEL_138;
      if (!v115[280])
        goto LABEL_138;
      std::ios_base::getloc((const std::ios_base *)&v115[*(_QWORD *)(*((_QWORD *)v115 + 2) - 24) + 16]);
      v116 = std::locale::use_facet((const std::locale *)v203, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v116->__vftable[2].~facet_0)(v116, 10);
      std::locale::~locale((std::locale *)v203);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v113);
      if (*(_DWORD *)(v113 + 600) != 7)
        goto LABEL_138;
LABEL_199:
      __print_back_trace();
      v155 = __cxa_allocate_exception(8uLL);
      *v155 = "LOG_FATAL encountered";
      __cxa_throw(v155, MEMORY[0x24BEDB718], 0);
    }
LABEL_193:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_138:
  gettimeofday(&v179, 0);
  v117 = (int *)global_logger();
  if (v117[169] <= 3)
  {
    if (cppipc::must_cancel((cppipc *)v117))
      goto LABEL_193;
    v118 = (file_logger *)global_logger();
    v119 = file_logger::start_stream(v118, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 787, 1);
    v120 = pthread_getspecific(*((_QWORD *)v119 + 74));
    if (v120 && *((_BYTE *)v120 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120 + 2, (uint64_t)"Rename id columns ", 18);
    v121 = pthread_getspecific(*((_QWORD *)v119 + 74));
    if (v121)
    {
      if (*((_BYTE *)v121 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v121 + *(_QWORD *)(v121[2] - 24) + 16));
        v122 = std::locale::use_facet((const std::locale *)v203, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v122->__vftable[2].~facet_0)(v122, 10);
        std::locale::~locale((std::locale *)v203);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v119);
        if (*((_DWORD *)v119 + 150) == 7)
          goto LABEL_199;
      }
    }
  }
  memset(v203, 0, sizeof(v203));
  LODWORD(v204) = 1065353216;
  v123 = operator new(0x28uLL);
  *v123 = &off_24D936C28;
  v123[1] = &v181;
  v124 = v123 + 1;
  v123[2] = &v180;
  v123[3] = v203;
  v123[4] = a1;
  v192 = v123;
  v125 = *((_QWORD *)a1 + 3);
  v126 = (char *)operator new(0x28uLL);
  *(_QWORD *)v126 = &off_24D936C28;
  v127 = v124[1];
  *(_OWORD *)(v126 + 8) = *v124;
  *(_OWORD *)(v126 + 24) = v127;
  v188 = v126;
  v186 = 0;
  v128 = operator new(0x38uLL);
  *v128 = &off_24D936CC8;
  v128[1] = a1;
  v128[2] = v203;
  v128[3] = &v181;
  v128[4] = &v180;
  v128[5] = v165;
  v128[6] = &v176;
  v186 = v128;
  turi::sgraph_compute::hilbert_blocked_parallel_for (v125, (uint64_t)v187, (uint64_t)v185, turi::SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS);
  v129 = v186;
  if (v186 == v185)
  {
    v130 = 4;
    v129 = v185;
LABEL_150:
    (*(void (**)(void))(*v129 + 8 * v130))();
  }
  else if (v186)
  {
    v130 = 5;
    goto LABEL_150;
  }
  v131 = v188;
  if (v188 == v187)
  {
    v132 = 4;
    v131 = v187;
LABEL_155:
    (*(void (**)(void))(*v131 + 8 * v132))();
  }
  else if (v188)
  {
    v132 = 5;
    goto LABEL_155;
  }
  v133 = (int *)global_logger();
  if (v133[169] <= 3)
  {
    if (!cppipc::must_cancel((cppipc *)v133))
    {
      v134 = (file_logger *)global_logger();
      v135 = file_logger::start_stream(v134, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 890, 1);
      v136 = pthread_getspecific(*((_QWORD *)v135 + 74));
      if (v136 && *((_BYTE *)v136 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136 + 2, (uint64_t)"Done in ", 8);
      gettimeofday(&v182, 0);
      v137 = file_logger::operator<<<double>((uint64_t)v135);
      v138 = pthread_getspecific(*(_QWORD *)(v137 + 592));
      if (v138 && *((_BYTE *)v138 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138 + 2, (uint64_t)" secs", 5);
      v139 = pthread_getspecific(*(_QWORD *)(v137 + 592));
      if (!v139)
        goto LABEL_167;
      if (!v139[280])
        goto LABEL_167;
      std::ios_base::getloc((const std::ios_base *)&v139[*(_QWORD *)(*((_QWORD *)v139 + 2) - 24) + 16]);
      v140 = std::locale::use_facet((const std::locale *)&v182, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v140->__vftable[2].~facet_0)(v140, 10);
      std::locale::~locale((std::locale *)&v182);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v137);
      if (*(_DWORD *)(v137 + 600) != 7)
        goto LABEL_167;
LABEL_200:
      __print_back_trace();
      v156 = __cxa_allocate_exception(8uLL);
      *v156 = "LOG_FATAL encountered";
      __cxa_throw(v156, MEMORY[0x24BEDB718], 0);
    }
LABEL_194:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_167:
  v141 = (int *)global_logger();
  if (v141[169] <= 3)
  {
    if (cppipc::must_cancel((cppipc *)v141))
      goto LABEL_194;
    v142 = (file_logger *)global_logger();
    v143 = file_logger::start_stream(v142, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "commit_edge_buffer", 892, 1);
    v144 = pthread_getspecific(*((_QWORD *)v143 + 74));
    if (v144 && *((_BYTE *)v144 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144 + 2, (uint64_t)"Finish committing edge in ", 26);
    gettimeofday(&v182, 0);
    v145 = file_logger::operator<<<double>((uint64_t)v143);
    v146 = pthread_getspecific(*(_QWORD *)(v145 + 592));
    if (v146 && *((_BYTE *)v146 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146 + 2, (uint64_t)" secs", 5);
    v147 = pthread_getspecific(*(_QWORD *)(v145 + 592));
    if (v147)
    {
      if (*((_BYTE *)v147 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v147 + *(_QWORD *)(v147[2] - 24) + 16));
        v148 = std::locale::use_facet((const std::locale *)&v182, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v148->__vftable[2].~facet_0)(v148, 10);
        std::locale::~locale((std::locale *)&v182);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v145);
        if (*(_DWORD *)(v145 + 600) == 7)
          goto LABEL_200;
      }
    }
  }
  v149 = atomic_load(&v176);
  *((_QWORD *)a1 + 6) += v149;
  v150 = atomic_load(&v177);
  *((_QWORD *)a1 + 5) += v150;
  v151 = v192;
  if (v192 == (uint64_t *)&v189)
  {
    v152 = 4;
    v151 = (uint64_t *)&v189;
LABEL_182:
    (*(void (**)(void))(*v151 + 8 * v152))();
  }
  else if (v192)
  {
    v152 = 5;
    goto LABEL_182;
  }
  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::~__hash_table((uint64_t)v203);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v203[0].tv_sec = (__darwin_time_t)&v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v203);
  if (v162[0])
  {
    v162[1] = v162[0];
    operator delete(v162[0]);
  }
  v203[0].tv_sec = (__darwin_time_t)&v163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v203);
  v203[0].tv_sec = (__darwin_time_t)v164;
  std::vector<turi::sarray<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v203);
  v203[0].tv_sec = (__darwin_time_t)v165;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)v203);
  v203[0].tv_sec = (__darwin_time_t)&v168;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v203);
  v203[0].tv_sec = (__darwin_time_t)&v171;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v203);
  v203[0].tv_sec = (__darwin_time_t)&v174;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v203);
}

void sub_2182B5598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::locale a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  _QWORD *v65;
  uint64_t v66;

  std::locale::~locale(&a49);
  v65 = (_QWORD *)a64;
  if ((uint64_t *)a64 == &a61)
  {
    v66 = 4;
    v65 = &a61;
  }
  else
  {
    if (!a64)
      goto LABEL_6;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_6:
  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::~__hash_table((uint64_t)&STACK[0x350]);
  if (__p)
    operator delete(__p);
  a61 = (uint64_t)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  a61 = (uint64_t)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  a61 = (uint64_t)&a23;
  std::vector<turi::sarray<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  a61 = (uint64_t)&a26;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  a61 = (uint64_t)&a31;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  a61 = (uint64_t)&a34;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  a61 = (uint64_t)&a37;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  _Unwind_Resume(a1);
}

void sub_2182B58B0()
{
  JUMPOUT(0x2182B5898);
}

void sub_2182B58B8()
{
  std::__shared_weak_count *v0;
  unint64_t *v1;
  uint64_t v2;
  void *v3;

  v1 = (unint64_t *)STACK[0x368];
  if ((unint64_t *)STACK[0x368] == &STACK[0x350])
  {
    v2 = 4;
    v1 = &STACK[0x350];
  }
  else
  {
    if (!v1)
    {
LABEL_6:
      std::__shared_weak_count::~__shared_weak_count(v0);
      operator delete(v3);
      JUMPOUT(0x2182B5898);
    }
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
  goto LABEL_6;
}

uint64_t turi::sgraph::copy_vertex_field(uint64_t a1, unsigned __int8 **a2, std::string *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  _OWORD v40[18];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v38 = a4;
  v39 = *(_QWORD *)(a1 + 32);
  if (v39 <= a4)
  {
    *(_QWORD *)&v40[0] = &v38;
    *((_QWORD *)&v40[0] + 1) = &v39;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v7 = *(_QWORD *)(a1 + 64);
  v8 = (uint64_t *)(v7 + 24 * a4);
  if (!turi::sframe::contains_column(*v8, a2))
    turi::sgraph::copy_vertex_field(std::string const&,std::string const&,unsigned long)::$_0::operator()();
  v9 = turi::sframe::contains_column(*v8, (unsigned __int8 **)a3);
  v10 = *v8;
  v11 = *(_QWORD *)(v7 + 24 * a4 + 8);
  v12 = v10 == v11;
  if (v9)
  {
    for (; v10 != v11; v10 += 296)
    {
      turi::sframe::select_column(v10, a2, v40);
      turi::sarray<turi::flexible_type>::clone(*(uint64_t *)&v40[0], 0, (uint64_t *)&v38);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v40[0] + 1);
      if (*((_QWORD *)&v40[0] + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v40[0] + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v37 = v38;
      if (*((_QWORD *)&v38 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      turi::sframe::replace_column(v10, &v37, a3, (uint64_t *)v40);
      turi::sframe::operator=(v10, (uint64_t)v40);
      turi::sframe::~sframe((turi::sframe *)v40);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (*((_QWORD *)&v37 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  else
  {
    while (!v12)
    {
      turi::sframe::select_column(v10, a2, v40);
      turi::sarray<turi::flexible_type>::clone(*(uint64_t *)&v40[0], 0, (uint64_t *)&v38);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v40[0] + 1);
      if (*((_QWORD *)&v40[0] + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v40[0] + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v36 = v38;
      if (*((_QWORD *)&v38 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      turi::sframe::add_column(v10, &v36, (uint64_t)a3, (uint64_t)v40);
      turi::sframe::operator=(v10, (uint64_t)v40);
      turi::sframe::~sframe((turi::sframe *)v40);
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v10 += 296;
      v12 = v10 == v11;
    }
  }
  return 1;
}

void sub_2182B5C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void turi::sgraph::copy_vertex_field(std::string const&,std::string const&,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vdata[0].contains_column(field)", 31);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 904, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sgraph::copy_vertex_field(std::string const&,std::string const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182B5D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::copy_edge_field(uint64_t a1, unsigned __int8 **a2, std::string *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  _OWORD v40[18];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v38 = a4;
  v5 = *(_QWORD *)(a1 + 32);
  v39 = v5;
  if (v5 <= a4)
  {
    *(_QWORD *)&v40[0] = &v38;
    *((_QWORD *)&v40[0] + 1) = &v39;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  *(_QWORD *)&v38 = a5;
  v39 = v5;
  if (v5 <= a5)
  {
    *(_QWORD *)&v40[0] = &v38;
    *((_QWORD *)&v40[0] + 1) = &v39;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  *(_QWORD *)&v40[0] = a4;
  *((_QWORD *)&v40[0] + 1) = a5;
  v8 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)v40);
  if (!turi::sframe::contains_column(*v8, a2))
    turi::sgraph::copy_edge_field(std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()();
  v9 = turi::sframe::contains_column(*v8, (unsigned __int8 **)a3);
  v10 = *v8;
  v11 = v8[1];
  v12 = *v8 == v11;
  if (v9)
  {
    if (*v8 != v11)
    {
      do
      {
        turi::sframe::select_column(v10, a2, v40);
        turi::sarray<turi::flexible_type>::clone(*(uint64_t *)&v40[0], 0, (uint64_t *)&v38);
        v13 = (std::__shared_weak_count *)*((_QWORD *)&v40[0] + 1);
        if (*((_QWORD *)&v40[0] + 1))
        {
          v14 = (unint64_t *)(*((_QWORD *)&v40[0] + 1) + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v37 = v38;
        if (*((_QWORD *)&v38 + 1))
        {
          v16 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        turi::sframe::replace_column(v10, &v37, a3, (uint64_t *)v40);
        turi::sframe::operator=(v10, (uint64_t)v40);
        turi::sframe::~sframe((turi::sframe *)v40);
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
        if (*((_QWORD *)&v37 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
        if (*((_QWORD *)&v38 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v10 += 296;
      }
      while (v10 != v11);
    }
  }
  else
  {
    while (!v12)
    {
      turi::sframe::select_column(v10, a2, v40);
      turi::sarray<turi::flexible_type>::clone(*(uint64_t *)&v40[0], 0, (uint64_t *)&v38);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v40[0] + 1);
      if (*((_QWORD *)&v40[0] + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v40[0] + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v36 = v38;
      if (*((_QWORD *)&v38 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      turi::sframe::add_column(v10, &v36, (uint64_t)a3, (uint64_t)v40);
      turi::sframe::operator=(v10, (uint64_t)v40);
      turi::sframe::~sframe((turi::sframe *)v40);
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v10 += 296;
      v12 = v10 == v11;
    }
  }
  return 1;
}

void sub_2182B6134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void turi::sgraph::copy_edge_field(std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"edata[0].contains_column(field)", 31);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 926, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sgraph::copy_edge_field(std::string const&,std::string const&,unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182B628C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::remove_vertex_field(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *i;
  uint64_t v9;
  unint64_t v11;
  unsigned __int8 **v12;
  _QWORD v13[38];

  v13[37] = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a1 + 32);
  v12 = a3;
  if (v11 <= (unint64_t)a3)
  {
    v13[0] = &v12;
    v13[1] = &v11;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v5 = *(_QWORD *)(a1 + 64);
  v6 = (uint64_t *)(v5 + 24 * (_QWORD)a3);
  if (!turi::sframe::contains_column(*v6, a2))
    turi::sgraph::remove_vertex_field(std::string const&,unsigned long)::$_0::operator()();
  v7 = (uint64_t *)*v6;
  for (i = *(uint64_t **)(v5 + 24 * (_QWORD)a3 + 8); v7 != i; v7 += 37)
  {
    v9 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v7[5], v7[6], a2);
    if (v9 == v7[6])
    {
      v12 = a2;
      turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
    }
    turi::sframe::remove_column((turi::sframe *)v7, 0xAAAAAAAAAAAAAAABLL * ((v9 - v7[5]) >> 3), (uint64_t)v13);
    turi::sframe::operator=((uint64_t)v7, (uint64_t)v13);
    turi::sframe::~sframe((turi::sframe *)v13);
  }
  return 1;
}

void sub_2182B6448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::sframe::~sframe((turi::sframe *)va);
  _Unwind_Resume(a1);
}

void turi::sgraph::remove_vertex_field(std::string const&,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vdata[0].contains_column(field)", 31);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 945, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sgraph::remove_vertex_field(std::string const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182B655C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::remove_edge_field(uint64_t a1, unsigned __int8 **a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *i;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  v11 = v4;
  v12 = a3;
  if (v4 <= a3)
  {
    v13 = &v12;
    v14 = &v11;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v11 = v4;
  v12 = (unint64_t)a4;
  if (v4 <= (unint64_t)a4)
  {
    v13 = &v12;
    v14 = &v11;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  v13 = (_QWORD *)a3;
  v14 = a4;
  v6 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)&v13);
  if (!turi::sframe::contains_column(*v6, a2))
    turi::sgraph::remove_edge_field(std::string const&,unsigned long,unsigned long)::$_0::operator()();
  v7 = (uint64_t *)*v6;
  for (i = (uint64_t *)v6[1]; v7 != i; v7 += 37)
  {
    v9 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v7[5], v7[6], a2);
    if (v9 == v7[6])
    {
      v12 = (unint64_t)a2;
      turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
    }
    turi::sframe::remove_column((turi::sframe *)v7, 0xAAAAAAAAAAAAAAABLL * ((v9 - v7[5]) >> 3), (uint64_t)&v13);
    turi::sframe::operator=((uint64_t)v7, (uint64_t)&v13);
    turi::sframe::~sframe((turi::sframe *)&v13);
  }
  return 1;
}

void sub_2182B673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::sframe::~sframe((turi::sframe *)va);
  _Unwind_Resume(a1);
}

void turi::sgraph::remove_edge_field(std::string const&,unsigned long,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"edata[0].contains_column(field)", 31);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 956, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sgraph::remove_edge_field(std::string const&,unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182B6850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::select_vertex_fields(uint64_t a1, const void ***a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[38];

  v10[37] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 32);
  v9 = a3;
  if (v8 <= a3)
  {
    v10[0] = &v9;
    v10[1] = &v8;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v3 = *(_QWORD *)(a1 + 64) + 24 * a3;
  v4 = *(uint64_t **)v3;
  v5 = *(uint64_t **)(v3 + 8);
  if (*(uint64_t **)v3 != v5)
  {
    do
    {
      turi::sframe::select_columns(v4, a2, (uint64_t)v10);
      turi::sframe::operator=((uint64_t)v4, (uint64_t)v10);
      turi::sframe::~sframe((turi::sframe *)v10);
      v4 += 37;
    }
    while (v4 != v5);
  }
  return 1;
}

void sub_2182B69A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::sframe::~sframe((turi::sframe *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::select_edge_fields(uint64_t a1, const void ***a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  v10 = v4;
  v11 = a3;
  if (v4 <= a3)
  {
    v12 = &v11;
    v13 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v10 = v4;
  v11 = (unint64_t)a4;
  if (v4 <= (unint64_t)a4)
  {
    v12 = &v11;
    v13 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  v12 = (_QWORD *)a3;
  v13 = a4;
  v6 = std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)&v12);
  v7 = *(uint64_t **)v6;
  v8 = *(uint64_t **)(v6 + 8);
  while (v7 != v8)
  {
    turi::sframe::select_columns(v7, a2, (uint64_t)&v12);
    turi::sframe::operator=((uint64_t)v7, (uint64_t)&v12);
    turi::sframe::~sframe((turi::sframe *)&v12);
    v7 += 37;
  }
  return 1;
}

void sub_2182B6AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::sframe::~sframe((turi::sframe *)va);
  _Unwind_Resume(a1);
}

void turi::segment_sarray(uint64_t *a1@<X0>, uint64_t **a2@<X1>, char **a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  int type;
  uint64_t *v33;
  uint64_t *v34;
  turi::thread_pool *v35;
  turi::thread_pool *instance;
  turi::thread *v37;
  turi::thread_pool *tls_data;
  uint64_t v39;
  turi::thread_pool *v40;
  uint64_t v41;
  double v42;
  turi::thread *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  _QWORD v49[2];
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64x2_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v8 = v4 + 1;
    do
    {
      v9 = *(v8 - 1);
      if (v9)
        v10 = 1;
      else
        v10 = v8 == v5;
      ++v8;
    }
    while (!v10);
    if (v4 != v5)
    {
      v11 = 0;
      do
      {
        _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v51);
        v13 = a3[1];
        v12 = (unint64_t)a3[2];
        if ((unint64_t)v13 >= v12)
        {
          v14 = (v13 - *a3) >> 4;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v16 = v12 - (_QWORD)*a3;
          if (v16 >> 3 > v15)
            v15 = v16 >> 3;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
            v17 = 0xFFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          v57 = a3 + 2;
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(a3 + 2), v17);
          v20 = &v18[16 * v14];
          *(_OWORD *)v20 = v51;
          v51 = 0uLL;
          v22 = *a3;
          v21 = a3[1];
          if (v21 == *a3)
          {
            v25 = vdupq_n_s64((unint64_t)v21);
            v23 = &v18[16 * v14];
          }
          else
          {
            v23 = &v18[16 * v14];
            do
            {
              v24 = *((_OWORD *)v21 - 1);
              v21 -= 16;
              *((_OWORD *)v23 - 1) = v24;
              v23 -= 16;
              *(_QWORD *)v21 = 0;
              *((_QWORD *)v21 + 1) = 0;
            }
            while (v21 != v22);
            v25 = *(int64x2_t *)a3;
          }
          v26 = v20 + 16;
          *a3 = v23;
          a3[1] = v20 + 16;
          v55 = v25;
          v27 = a3[2];
          a3[2] = &v18[16 * v19];
          v56 = v27;
          v54 = v25.i64[0];
          std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v54);
          v28 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
          a3[1] = v26;
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldaxr(p_shared_owners);
            while (__stlxr(v30 - 1, p_shared_owners));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        else
        {
          *(_OWORD *)v13 = v51;
          a3[1] = v13 + 16;
        }
        turi::sarray<turi::flexible_type>::open_for_write(*(_QWORD *)&(*a3)[16 * v11], 1, 0);
        v31 = *(_QWORD *)&(*a3)[16 * v11];
        type = turi::sarray<turi::flexible_type>::get_type(*a1);
        turi::sarray<turi::flexible_type>::set_type(v31, type);
        ++v11;
      }
      while (v11 < a2[1] - *a2);
    }
    if (v9)
    {
      turi::sarray<turi::flexible_type>::get_reader(*a1, a2, &v50);
      v34 = *a2;
      v33 = a2[1];
      v49[0] = a3;
      v49[1] = &v50;
      instance = (turi::thread_pool *)turi::thread_pool::get_instance(v35);
      v37 = (turi::thread *)turi::thread_pool::size(instance);
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v37);
      v39 = v33 - v34;
      if (*((_BYTE *)tls_data + 8) || (unint64_t)v37 <= 1)
      {
        if (v33 != v34)
        {
          v45 = 0;
          do
            turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1::operator()((uint64_t)v49, v45++);
          while (v39 != v45);
        }
      }
      else
      {
        v40 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
        turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v54, v40);
        v41 = 0;
        v42 = (double)(unint64_t)v39 / (double)(unint64_t)v37;
        do
        {
          v43 = (turi::thread *)(v41 + 1);
          v44 = (unint64_t)(v42 * (double)(unint64_t)(v41 + 1) + 0.0);
          if ((turi::thread *)v41 == (turi::thread *)((char *)v37 - 1))
            v44 = v33 - v34;
          v52 = (unint64_t)(v42 * (double)(unint64_t)v41 + 0.0);
          v53 = v44;
          *(_QWORD *)&v51 = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1>(unsigned long,unsigned long,turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1 const&)::{lambda(void)#1}>(turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1)::stored_vtable
                          + 1;
          *((_QWORD *)&v51 + 1) = v49;
          turi::parallel_task_queue::launch((uint64_t)&v54, (uint64_t)&v51, v41);
          boost::function0<void>::~function0((uint64_t *)&v51);
          v41 = (uint64_t)v43;
        }
        while (v43 != v37);
        turi::parallel_task_queue::join((turi::parallel_task_queue *)&v54);
        turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v54);
      }
      v46 = v50;
      v50 = 0;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    }
  }
  v47 = *a3;
  v48 = a3[1];
  while (v47 != v48)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)v47 + 40))(*(_QWORD *)v47);
    v47 += 16;
  }
}

void sub_2182B6E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void **v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void **);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va1);
  if (a5)
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 8))(a5);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::sgraph::add_vertex_field(turi::sgraph *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::string v27;
  uint64_t v28[2];
  char *v29[3];
  void *__p;
  char *v31;
  char *v32;
  uint64_t v33;
  char **v34;

  __p = 0;
  v31 = 0;
  v34 = 0;
  v3 = *((_QWORD *)a1 + 4);
  v32 = 0;
  v33 = v3;
  if (!v3)
  {
    v29[0] = (char *)&v34;
    v29[1] = (char *)&v33;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v7 = (uint64_t *)*((_QWORD *)a1 + 8);
  v8 = *v7;
  v9 = v7[1];
  if (*v7 != v9)
  {
    v10 = 0;
    do
    {
      if (*(_BYTE *)(v8 + 288))
        v11 = *(_QWORD *)(v8 + 32);
      else
        v11 = 0;
      if (v10 >= v32)
      {
        v13 = (char *)__p;
        v14 = (v10 - (_BYTE *)__p) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v16 = v32 - (_BYTE *)__p;
        if ((v32 - (_BYTE *)__p) >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v32, v17);
          v13 = (char *)__p;
          v10 = v31;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v11;
        v12 = v19 + 8;
        while (v10 != v13)
        {
          v20 = *((_QWORD *)v10 - 1);
          v10 -= 8;
          *((_QWORD *)v19 - 1) = v20;
          v19 -= 8;
        }
        __p = v19;
        v31 = v12;
        v32 = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v10 = v11;
        v12 = v10 + 8;
      }
      v31 = v12;
      v8 += 296;
      v10 = v12;
    }
    while (v8 != v9);
  }
  v21 = *a2;
  v22 = (std::__shared_weak_count *)a2[1];
  v28[0] = v21;
  v28[1] = (uint64_t)v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  turi::segment_sarray(v28, (uint64_t **)&__p, v29);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v27 = *(std::string *)a3;
  turi::sgraph::add_vertex_field(a1, v29, (unsigned __int8 **)&v27, 0);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v34 = v29;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2182B70E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  *(_QWORD *)(v22 - 88) = &a18;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 88));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::add_vertex_field(turi::sgraph *a1, _QWORD *a2, unsigned __int8 **a3, unint64_t a4)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD *exception;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  file_logger *v27;
  file_logger *v28;
  _QWORD *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  _QWORD *v33;
  __int128 v34;
  std::string v35;
  unint64_t v36;
  unint64_t v37;
  std::locale v38;
  unint64_t *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  turi::sgraph::get_vertex_fields(a1, 0, &v35);
  if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::string,std::__identity>((uint64_t)v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_, a3))
  {
    v8 = (int *)global_logger();
    if (v8[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v8))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v9 = (file_logger *)global_logger();
      started = file_logger::start_stream(v9, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "add_vertex_field", 1170, 1);
      v11 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v11 && *((_BYTE *)v11 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Vertex field already exists.", 28);
      v12 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v12)
      {
        if (*((_BYTE *)v12 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
          v13 = std::locale::use_facet(&v38, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
          std::locale::~locale(&v38);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
LABEL_33:
    v25 = 0;
    goto LABEL_34;
  }
  v36 = *((_QWORD *)a1 + 4);
  v37 = a4;
  if (v36 <= a4)
  {
    v38.__locale_ = (std::locale::__imp *)&v37;
    v39 = &v36;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v15 = (uint64_t *)(*((_QWORD *)a1 + 8) + 24 * a4);
  v16 = v15[1];
  v17 = *v15;
  if (0x14C1BACF914C1BADLL * ((v16 - *v15) >> 3) != (uint64_t)(a2[1] - *a2) >> 4)
  {
    v26 = (int *)global_logger();
    if (v26[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v26))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v27 = (file_logger *)global_logger();
      v28 = file_logger::start_stream(v27, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "add_vertex_field", 1175, 1);
      v29 = pthread_getspecific(*((_QWORD *)v28 + 74));
      if (v29 && *((_BYTE *)v29 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29 + 2, (uint64_t)"Partition Size Mismatch.", 24);
      v30 = pthread_getspecific(*((_QWORD *)v28 + 74));
      if (v30)
      {
        if (*((_BYTE *)v30 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(v30[2] - 24) + 16));
          v31 = std::locale::use_facet(&v38, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
          std::locale::~locale(&v38);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v28);
          if (*((_DWORD *)v28 + 150) == 7)
          {
            __print_back_trace();
            v33 = __cxa_allocate_exception(8uLL);
            *v33 = "LOG_FATAL encountered";
            __cxa_throw(v33, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    goto LABEL_33;
  }
  if (v16 != v17)
  {
    v18 = 0;
    do
    {
      v19 = *(_OWORD *)(*a2 + 16 * v18);
      v34 = v19;
      if (*((_QWORD *)&v19 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      turi::sframe::add_column(v17 + 296 * v18, &v34, (uint64_t)a3, (uint64_t)&v38);
      turi::sframe::operator=(*v15 + 296 * v18, (uint64_t)&v38);
      turi::sframe::~sframe((turi::sframe *)&v38);
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      ++v18;
      v17 = *v15;
    }
    while (v18 < 0x14C1BACF914C1BADLL * ((v15[1] - *v15) >> 3));
  }
  v25 = 1;
LABEL_34:
  v38.__locale_ = (std::locale::__imp *)&v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  return v25;
}

void sub_2182B7578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, std::locale a17)
{
  std::locale::~locale(&a17);
  a16 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::sgraph::add_edge_field(turi::sgraph *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::string v27;
  uint64_t v28[2];
  void ***v29;
  uint64_t *v30;
  void *__p;
  char *v32;
  char *v33;
  uint64_t v34;
  void ****v35;

  __p = 0;
  v32 = 0;
  v35 = 0;
  v3 = *((_QWORD *)a1 + 4);
  v33 = 0;
  v34 = v3;
  if (!v3)
  {
    v29 = (void ***)&v35;
    v30 = &v34;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v29 = 0;
  v30 = 0;
  v7 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)a1 + 88, (unint64_t *)&v29);
  v8 = *v7;
  v9 = v7[1];
  if (*v7 != v9)
  {
    do
    {
      if (*(_BYTE *)(v8 + 288))
        v10 = *(_QWORD *)(v8 + 32);
      else
        v10 = 0;
      v11 = v32;
      if (v32 >= v33)
      {
        v13 = (char *)__p;
        v14 = (v32 - (_BYTE *)__p) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v16 = v33 - (_BYTE *)__p;
        if ((v33 - (_BYTE *)__p) >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v33, v17);
          v13 = (char *)__p;
          v11 = v32;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v10;
        v12 = v19 + 8;
        while (v11 != v13)
        {
          v20 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *((_QWORD *)v19 - 1) = v20;
          v19 -= 8;
        }
        __p = v19;
        v32 = v12;
        v33 = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v32 = v10;
        v12 = v11 + 8;
      }
      v32 = v12;
      v8 += 296;
    }
    while (v8 != v9);
  }
  v21 = *a2;
  v22 = (std::__shared_weak_count *)a2[1];
  v28[0] = v21;
  v28[1] = (uint64_t)v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  turi::segment_sarray(v28, (uint64_t **)&__p, (char **)&v29);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v27 = *(std::string *)a3;
  turi::sgraph::add_edge_field(a1, &v29, (unsigned __int8 **)&v27, 0, 0);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v35 = &v29;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2182B7814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  *(_QWORD *)(v22 - 88) = &a18;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 88));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::add_edge_field(turi::sgraph *a1, _QWORD *a2, unsigned __int8 **a3, std::locale::__imp *a4, unint64_t *a5)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD *exception;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  file_logger *v30;
  file_logger *v31;
  _QWORD *v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  _QWORD *v36;
  __int128 v37;
  std::string v38;
  unint64_t v39;
  _QWORD v40[2];
  std::locale v41;
  unint64_t *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  turi::sgraph::get_edge_fields(a1, 0, 0, &v38);
  if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::string,std::__identity>((uint64_t)v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_, a3))
  {
    v10 = (int *)global_logger();
    if (v10[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v10))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v11 = (file_logger *)global_logger();
      started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "add_edge_field", 1190, 1);
      v13 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v13 && *((_BYTE *)v13 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Edge field already exists.", 26);
      v14 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v14)
      {
        if (*((_BYTE *)v14 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
          v15 = std::locale::use_facet(&v41, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
          std::locale::~locale(&v41);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
LABEL_34:
    v28 = 0;
    goto LABEL_35;
  }
  v17 = *((_QWORD *)a1 + 4);
  v39 = v17;
  v40[0] = a4;
  if (v17 <= (unint64_t)a4)
  {
    v41.__locale_ = (std::locale::__imp *)v40;
    v42 = &v39;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v39 = v17;
  v40[0] = a5;
  if (v17 <= (unint64_t)a5)
  {
    v41.__locale_ = (std::locale::__imp *)v40;
    v42 = &v39;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  v41.__locale_ = a4;
  v42 = a5;
  v18 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)a1 + 88, (unint64_t *)&v41);
  v19 = *v18;
  v20 = v18[1];
  if (0x14C1BACF914C1BADLL * ((v20 - *v18) >> 3) != (uint64_t)(a2[1] - *a2) >> 4)
  {
    v29 = (int *)global_logger();
    if (v29[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v29))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v30 = (file_logger *)global_logger();
      v31 = file_logger::start_stream(v30, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "add_edge_field", 1195, 1);
      v32 = pthread_getspecific(*((_QWORD *)v31 + 74));
      if (v32 && *((_BYTE *)v32 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32 + 2, (uint64_t)"Partition Size Mismatch.", 24);
      v33 = pthread_getspecific(*((_QWORD *)v31 + 74));
      if (v33)
      {
        if (*((_BYTE *)v33 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(v33[2] - 24) + 16));
          v34 = std::locale::use_facet(&v41, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
          std::locale::~locale(&v41);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v31);
          if (*((_DWORD *)v31 + 150) == 7)
          {
            __print_back_trace();
            v36 = __cxa_allocate_exception(8uLL);
            *v36 = "LOG_FATAL encountered";
            __cxa_throw(v36, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    goto LABEL_34;
  }
  if (v20 != v19)
  {
    v21 = 0;
    do
    {
      v22 = *(_OWORD *)(*a2 + 16 * v21);
      v37 = v22;
      if (*((_QWORD *)&v22 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      turi::sframe::add_column(v19 + 296 * v21, &v37, (uint64_t)a3, (uint64_t)&v41);
      turi::sframe::operator=(*v18 + 296 * v21, (uint64_t)&v41);
      turi::sframe::~sframe((turi::sframe *)&v41);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (*((_QWORD *)&v37 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      ++v21;
      v19 = *v18;
    }
    while (v21 < 0x14C1BACF914C1BADLL * ((v18[1] - *v18) >> 3));
  }
  v28 = 1;
LABEL_35:
  v41.__locale_ = (std::locale::__imp *)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  return v28;
}

void sub_2182B7CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, std::locale a17)
{
  std::locale::~locale(&a17);
  a16 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::sgraph::swap_vertex_fields(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type vertex_field_id;
  std::string::size_type v6;
  turi::sframe **v7;
  turi::sframe *v8;
  turi::sframe *v9;
  std::string __p;
  std::string v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[38];

  v14[37] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  vertex_field_id = turi::sgraph::get_vertex_field_id(a1, (unsigned __int8 **)&v11, 0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v6 = turi::sgraph::get_vertex_field_id(a1, (unsigned __int8 **)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = 0;
  if (!v12)
  {
    v14[0] = &v13;
    v14[1] = &v12;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v7 = *(turi::sframe ***)(a1 + 64);
  v8 = *v7;
  v9 = v7[1];
  while (v8 != v9)
  {
    turi::sframe::swap_columns(v8, vertex_field_id, v6, (uint64_t)v14);
    turi::sframe::operator=((uint64_t)v8, (uint64_t)v14);
    turi::sframe::~sframe((turi::sframe *)v14);
    v8 = (turi::sframe *)((char *)v8 + 296);
  }
}

void sub_2182B7E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::sgraph::swap_edge_fields(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type edge_field_id;
  std::string::size_type v6;
  uint64_t v7;
  turi::sframe *v8;
  turi::sframe *v9;
  std::string __p;
  std::string v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  edge_field_id = turi::sgraph::get_edge_field_id(a1, (unsigned __int8 **)&v11, 0, 0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v6 = turi::sgraph::get_edge_field_id(a1, (unsigned __int8 **)&__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = 0;
  if (!v12)
  {
    v14 = &v13;
    v15 = &v12;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v14 = 0;
  v15 = 0;
  v7 = std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)&v14);
  v8 = *(turi::sframe **)v7;
  v9 = *(turi::sframe **)(v7 + 8);
  while (v8 != v9)
  {
    turi::sframe::swap_columns(v8, edge_field_id, v6, (uint64_t)&v14);
    turi::sframe::operator=((uint64_t)v8, (uint64_t)&v14);
    turi::sframe::~sframe((turi::sframe *)&v14);
    v8 = (turi::sframe *)((char *)v8 + 296);
  }
}

void sub_2182B804C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t turi::sgraph::get_edge_field_id(uint64_t a1, unsigned __int8 **a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a1 + 32);
  v12 = v4;
  v13 = a3;
  if (v4 <= a3)
  {
    v10 = &v13;
    v11 = &v12;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v12 = v4;
  v13 = (unint64_t)a4;
  if (v4 <= (unint64_t)a4)
  {
    v10 = &v13;
    v11 = &v12;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  v10 = (_QWORD *)a3;
  v11 = a4;
  v6 = std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)&v10);
  v7 = *(_QWORD *)v6;
  v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(*(_QWORD *)v6 + 40), *(_QWORD *)(*(_QWORD *)v6 + 48), a2);
  if (v8 == *(_QWORD *)(v7 + 48))
  {
    v10 = a2;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)(v7 + 40)) >> 3);
}

void turi::sgraph::rename_vertex_fields(uint64_t a1, __int128 **a2, _QWORD *a3)
{
  __int128 *v6;
  __int128 *v7;
  __int128 v8;
  unint64_t vertex_field_id;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  std::string v29;
  void *__p;
  char *v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;

  __p = 0;
  v31 = 0;
  v32[0] = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v8 = *v6;
        v29.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v8;
      }
      vertex_field_id = turi::sgraph::get_vertex_field_id(a1, (unsigned __int8 **)&v29, 0);
      v10 = vertex_field_id;
      v11 = v31;
      if ((unint64_t)v31 >= v32[0])
      {
        v13 = (char *)__p;
        v14 = (v31 - (_BYTE *)__p) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v16 = v32[0] - (_QWORD)__p;
        if ((uint64_t)(v32[0] - (_QWORD)__p) >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v32, v17);
          v13 = (char *)__p;
          v11 = v31;
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        *v19 = v10;
        v12 = (char *)(v19 + 1);
        while (v11 != v13)
        {
          v20 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *--v19 = v20;
        }
        __p = v19;
        v31 = v12;
        v32[0] = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v31 = vertex_field_id;
        v12 = v11 + 8;
      }
      v31 = v12;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      v6 = (__int128 *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
  v33 = *(_QWORD *)(a1 + 32);
  v34 = 0;
  if (!v33)
  {
    v32[1] = &v34;
    v32[2] = &v33;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v21 = *(uint64_t **)(a1 + 64);
  v22 = *v21;
  v23 = v21[1];
  if (*v21 != v23)
  {
    v25 = *a2;
    v24 = a2[1];
    do
    {
      v26 = v24 == v25;
      v24 = v25;
      if (!v26)
      {
        v27 = 0;
        v28 = 0;
        do
        {
          turi::sframe::set_column_name(v22, *((_QWORD *)__p + v28++), (std::string *)(*a3 + v27));
          v25 = *a2;
          v24 = a2[1];
          v27 += 24;
        }
        while (v28 < 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)*a2) >> 3));
      }
      v22 += 296;
    }
    while (v22 != v23);
  }
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2182B8370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::sgraph::rename_edge_fields(uint64_t a1, __int128 **a2, _QWORD *a3)
{
  __int128 *v6;
  __int128 *v7;
  __int128 v8;
  unint64_t edge_field_id;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  std::string v29;
  void *__p;
  char *v31;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  __p = 0;
  v31 = 0;
  v32 = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v8 = *v6;
        v29.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v8;
      }
      edge_field_id = turi::sgraph::get_edge_field_id(a1, (unsigned __int8 **)&v29, 0, 0);
      v10 = edge_field_id;
      v11 = v31;
      if (v31 >= v32)
      {
        v13 = (char *)__p;
        v14 = (v31 - (_BYTE *)__p) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v16 = v32 - (_BYTE *)__p;
        if ((v32 - (_BYTE *)__p) >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v32, v17);
          v13 = (char *)__p;
          v11 = v31;
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        *v19 = v10;
        v12 = (char *)(v19 + 1);
        while (v11 != v13)
        {
          v20 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *--v19 = v20;
        }
        __p = v19;
        v31 = v12;
        v32 = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v31 = edge_field_id;
        v12 = v11 + 8;
      }
      v31 = v12;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      v6 = (__int128 *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
  v35 = *(_QWORD *)(a1 + 32);
  v36 = 0;
  if (!v35)
  {
    v33 = &v36;
    v34 = &v35;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v33 = 0;
  v34 = 0;
  v21 = (uint64_t *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at(a1 + 88, (unint64_t *)&v33);
  v22 = *v21;
  v23 = v21[1];
  if (*v21 != v23)
  {
    v25 = *a2;
    v24 = a2[1];
    do
    {
      v26 = v24 == v25;
      v24 = v25;
      if (!v26)
      {
        v27 = 0;
        v28 = 0;
        do
        {
          turi::sframe::set_column_name(v22, *((_QWORD *)__p + v28++), (std::string *)(*a3 + v27));
          v25 = *a2;
          v24 = a2[1];
          v27 += 24;
        }
        while (v28 < 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)*a2) >> 3));
      }
      v22 += 296;
    }
    while (v22 != v23);
  }
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2182B85D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **std::vector<std::vector<turi::flexible_type>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<turi::flexible_type>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2182B8740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::parallel_save_sframes(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v6;
  std::vector<std::string>::pointer end;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  uint64_t v16;
  unint64_t v17;
  turi::thread_pool *instance;
  turi::thread *v19;
  turi::thread_pool *tls_data;
  turi::thread_pool *v21;
  uint64_t v22;
  double v23;
  turi::thread *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  std::vector<std::string> v28;
  char v29;
  void *__p[2];
  unint64_t v31;
  unint64_t v32;
  std::__split_buffer<std::string> __v;
  uint64_t v34;

  v3 = a1;
  v34 = *MEMORY[0x24BDAC8D0];
  v29 = a3;
  memset(&v28, 0, sizeof(v28));
  v4 = a1[1];
  if (v4 == *a1)
  {
    v17 = 0x14C1BACF914C1BADLL * ((v4 - *a1) >> 3);
    v16 = a1[1];
  }
  else
  {
    v6 = 0;
    do
    {
      a1 = (uint64_t *)turi::dir_archive::get_next_write_prefix(*(turi::dir_archive **)(a2 + 8), (unsigned __int8 *)__p);
      end = v28.__end_;
      if (v28.__end_ >= v28.__end_cap_.__value_)
      {
        v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3);
        v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3) > v10)
          v10 = 0x5555555555555556 * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3) >= 0x555555555555555)
          v11 = 0xAAAAAAAAAAAAAAALL;
        else
          v11 = v10;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v28.__end_cap_;
        if (v11)
          v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v28.__end_cap_, v11);
        else
          v12 = 0;
        v13 = v12 + v9;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        v14 = *(_OWORD *)__p;
        v13->__r_.__value_.__r.__words[2] = v31;
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        __p[1] = 0;
        v31 = 0;
        __p[0] = 0;
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v28, &__v);
        v15 = v28.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v28.__end_ = v15;
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v8 = *(_OWORD *)__p;
        v28.__end_->__r_.__value_.__r.__words[2] = v31;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        v28.__end_ = end + 1;
      }
      ++v6;
      v16 = *v3;
      v4 = v3[1];
      v17 = 0x14C1BACF914C1BADLL * ((v4 - *v3) >> 3);
    }
    while (v6 < v17);
  }
  v27[0] = &v28;
  v27[1] = &v29;
  v27[2] = v3;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)a1);
  v19 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v19);
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v19 <= 1)
  {
    if (v4 != v16)
    {
      v26 = 0;
      do
        turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0::operator()((uint64_t)v27, v26++);
      while (v17 != v26);
    }
  }
  else
  {
    v21 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&__v, v21);
    v22 = 0;
    v23 = (double)v17 / (double)(unint64_t)v19;
    do
    {
      v24 = (turi::thread *)(v22 + 1);
      v25 = (unint64_t)(v23 * (double)(unint64_t)(v22 + 1) + 0.0);
      if ((turi::thread *)v22 == (turi::thread *)((char *)v19 - 1))
        v25 = v17;
      v31 = (unint64_t)(v23 * (double)(unint64_t)v22 + 0.0);
      v32 = v25;
      __p[0] = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0>(unsigned long,unsigned long,turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0 const&)::{lambda(void)#1}>(turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0)::stored_vtable
             + 1;
      __p[1] = v27;
      turi::parallel_task_queue::launch((uint64_t)&__v, (uint64_t)__p, v22);
      boost::function0<void>::~function0((uint64_t *)__p);
      v22 = (uint64_t)v24;
    }
    while (v24 != v19);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&__v);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&__v);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_2182B8A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__split_buffer<std::string> *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__pa,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a24);
  __pa = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void turi::sgraph::save(turi::sgraph *this, turi::oarchive *a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  uint64_t *i;
  unint64_t v17;
  char *v18;
  size_t v19;
  char **v20;
  size_t v21;
  BOOL v22;
  std::vector<char>::size_type v23;
  turi::sgraph *v24;
  unint64_t v25;
  char *v26;
  turi::sgraph *v27;
  turi::sgraph *v28;
  BOOL v29;
  size_t v30;
  char **v31;
  size_t v32;
  BOOL v33;
  std::vector<char>::size_type v34;
  size_t v35;
  char **v36;
  size_t v37;
  BOOL v38;
  std::vector<char>::size_type v39;
  size_t v40;
  char **v41;
  size_t v42;
  BOOL v43;
  std::vector<char>::size_type v44;
  size_t v45;
  char **v46;
  size_t v47;
  BOOL v48;
  std::vector<char>::size_type v49;
  size_t v50;
  char **v51;
  size_t v52;
  BOOL v53;
  std::vector<char>::size_type v54;
  size_t v55;
  _QWORD *v56;
  size_t v57;
  BOOL v58;
  std::vector<char>::size_type v59;
  uint64_t v60;
  uint64_t v61;

  v4 = (_QWORD *)((char *)this + 24);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v5)
    {
      v35 = 2 * v5 + 16;
      *((_QWORD *)a2 + 5) = v35;
      v36 = (char **)*((_QWORD *)a2 + 2);
      if (v36)
      {
        v6 = *v36;
        v37 = v36[1] - *v36;
        v38 = v35 >= v37;
        v39 = v35 - v37;
        if (v39 != 0 && v38)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v39);
          v6 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v38)
        {
          v36[1] = &v6[v35];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*((void **)a2 + 3), v35, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v6;
    }
    else
    {
      v6 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v6[*((_QWORD *)a2 + 4)] = *v4;
    *((_QWORD *)a2 + 4) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v7 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v7)
    {
      v40 = 2 * v7 + 16;
      *((_QWORD *)a2 + 5) = v40;
      v41 = (char **)*((_QWORD *)a2 + 2);
      if (v41)
      {
        v8 = *v41;
        v42 = v41[1] - *v41;
        v43 = v40 >= v42;
        v44 = v40 - v42;
        if (v44 != 0 && v43)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v44);
          v8 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v43)
        {
          v41[1] = &v8[v40];
        }
      }
      else
      {
        v8 = (char *)malloc_type_realloc(*((void **)a2 + 3), v40, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v8;
    }
    else
    {
      v8 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v8[*((_QWORD *)a2 + 4)] = *((_QWORD *)this + 4);
    *((_QWORD *)a2 + 4) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v9 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v9)
    {
      v45 = 2 * v9 + 16;
      *((_QWORD *)a2 + 5) = v45;
      v46 = (char **)*((_QWORD *)a2 + 2);
      if (v46)
      {
        v10 = *v46;
        v47 = v46[1] - *v46;
        v48 = v45 >= v47;
        v49 = v45 - v47;
        if (v49 != 0 && v48)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v49);
          v10 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v48)
        {
          v46[1] = &v10[v45];
        }
      }
      else
      {
        v10 = (char *)malloc_type_realloc(*((void **)a2 + 3), v45, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v10;
    }
    else
    {
      v10 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v10[*((_QWORD *)a2 + 4)] = *((_QWORD *)this + 5);
    *((_QWORD *)a2 + 4) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v11 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v11)
    {
      v50 = 2 * v11 + 16;
      *((_QWORD *)a2 + 5) = v50;
      v51 = (char **)*((_QWORD *)a2 + 2);
      if (v51)
      {
        v12 = *v51;
        v52 = v51[1] - *v51;
        v53 = v50 >= v52;
        v54 = v50 - v52;
        if (v54 != 0 && v53)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v54);
          v12 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v53)
        {
          v51[1] = &v12[v50];
        }
      }
      else
      {
        v12 = (char *)malloc_type_realloc(*((void **)a2 + 3), v50, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v12;
    }
    else
    {
      v12 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v12[*((_QWORD *)a2 + 4)] = *((_QWORD *)this + 6);
    *((_QWORD *)a2 + 4) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v13 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v13)
    {
      v55 = 2 * v13 + 2;
      *((_QWORD *)a2 + 5) = v55;
      v56 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v56)
      {
        v14 = (_BYTE *)*v56;
        v57 = v56[1] - *v56;
        v58 = v55 >= v57;
        v59 = v55 - v57;
        if (v59 != 0 && v58)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v59);
          v14 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v58)
        {
          v56[1] = &v14[v55];
        }
      }
      else
      {
        v14 = malloc_type_realloc(*((void **)a2 + 3), v55, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v14;
    }
    else
    {
      v14 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v14[(*((_QWORD *)a2 + 4))++] = *((_BYTE *)this + 56);
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this);
  v15 = (uint64_t *)*((_QWORD *)this + 8);
  for (i = (uint64_t *)*((_QWORD *)this + 9); v15 != i; v15 += 3)
  {
    v60 = 0x14C1BACF914C1BADLL * ((v15[1] - *v15) >> 3);
    if (*(_QWORD *)a2)
    {
      std::ostream::write();
    }
    else
    {
      v17 = *((_QWORD *)a2 + 5);
      if (*((_QWORD *)a2 + 4) + 8 > v17)
      {
        v19 = 2 * v17 + 16;
        *((_QWORD *)a2 + 5) = v19;
        v20 = (char **)*((_QWORD *)a2 + 2);
        if (v20)
        {
          v18 = *v20;
          v21 = v20[1] - *v20;
          v22 = v19 >= v21;
          v23 = v19 - v21;
          if (v23 != 0 && v22)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v23);
            v18 = (char *)**((_QWORD **)a2 + 2);
          }
          else if (!v22)
          {
            v20[1] = &v18[v19];
          }
        }
        else
        {
          v18 = (char *)malloc_type_realloc(*((void **)a2 + 3), v19, 0xF6EA6B1uLL);
        }
        *((_QWORD *)a2 + 3) = v18;
      }
      else
      {
        v18 = (char *)*((_QWORD *)a2 + 3);
      }
      *(_QWORD *)&v18[*((_QWORD *)a2 + 4)] = v60;
      *((_QWORD *)a2 + 4) += 8;
    }
    turi::parallel_save_sframes(v15, (uint64_t)a2, 0);
  }
  v24 = (turi::sgraph *)*((_QWORD *)this + 11);
  if (v24 != (turi::sgraph *)((char *)this + 96))
  {
    do
    {
      turi::archive_detail::serialize_impl<turi::oarchive,std::pair<double,unsigned long>,false,void>::exec((uint64_t)a2, (_QWORD *)v24 + 4);
      v61 = 0x14C1BACF914C1BADLL * ((uint64_t)(*((_QWORD *)v24 + 7) - *((_QWORD *)v24 + 6)) >> 3);
      if (*(_QWORD *)a2)
      {
        std::ostream::write();
      }
      else
      {
        v25 = *((_QWORD *)a2 + 5);
        if (*((_QWORD *)a2 + 4) + 8 > v25)
        {
          v30 = 2 * v25 + 16;
          *((_QWORD *)a2 + 5) = v30;
          v31 = (char **)*((_QWORD *)a2 + 2);
          if (v31)
          {
            v26 = *v31;
            v32 = v31[1] - *v31;
            v33 = v30 >= v32;
            v34 = v30 - v32;
            if (v34 != 0 && v33)
            {
              std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v34);
              v26 = (char *)**((_QWORD **)a2 + 2);
            }
            else if (!v33)
            {
              v31[1] = &v26[v30];
            }
          }
          else
          {
            v26 = (char *)malloc_type_realloc(*((void **)a2 + 3), v30, 0xF6EA6B1uLL);
          }
          *((_QWORD *)a2 + 3) = v26;
        }
        else
        {
          v26 = (char *)*((_QWORD *)a2 + 3);
        }
        *(_QWORD *)&v26[*((_QWORD *)a2 + 4)] = v61;
        *((_QWORD *)a2 + 4) += 8;
      }
      turi::parallel_save_sframes((uint64_t *)v24 + 6, (uint64_t)a2, 0);
      v27 = (turi::sgraph *)*((_QWORD *)v24 + 1);
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = *(turi::sgraph **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (turi::sgraph *)*((_QWORD *)v24 + 2);
          v29 = *(_QWORD *)v28 == (_QWORD)v24;
          v24 = v28;
        }
        while (!v29);
      }
      v24 = v28;
    }
    while (v28 != (turi::sgraph *)((char *)this + 96));
  }
}

void turi::sgraph::load(turi::sgraph *this, turi::iarchive *a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  unint64_t v13;
  _OWORD *v14;
  void **v15[2];
  __int128 v16;
  uint64_t v17;
  void ***v18;
  void **v19;

  turi::sgraph::clear(this);
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = *(_QWORD *)(v4 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  v5 = (unint64_t *)((char *)this + 32);
  v6 = *((_QWORD *)a2 + 2);
  if (v6)
  {
    *v5 = *(_QWORD *)(v6 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = *((_QWORD *)a2 + 2);
  if (v7)
  {
    *((_QWORD *)this + 5) = *(_QWORD *)(v7 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
  {
    *((_QWORD *)this + 6) = *(_QWORD *)(v8 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  v9 = *((_QWORD *)a2 + 2);
  if (v9)
    *((_BYTE *)this + 56) = *(_BYTE *)(v9 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this);
  if (*((_QWORD *)this + 4))
  {
    v10 = 0;
    do
    {
      v16 = 0uLL;
      v17 = 0;
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sframe,false>::exec(a2, (uint64_t *)&v16);
      std::vector<std::vector<turi::sframe>>::push_back[abi:ne180100]((uint64_t *)this + 8, (uint64_t)&v16);
      v15[0] = (void **)&v16;
      std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](v15);
      ++v10;
    }
    while (v10 < *v5);
    if (*v5)
    {
      v11 = 0;
      v12 = (uint64_t **)((char *)this + 88);
      do
      {
        v13 = 0;
        do
        {
          v15[0] = 0;
          v15[1] = 0;
          v16 = 0uLL;
          v17 = 0;
          turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<double,unsigned long>,false,void>::exec((uint64_t)a2, v15);
          turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sframe,false>::exec(a2, (uint64_t *)&v16);
          v18 = v15;
          v14 = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(v12, (unint64_t *)v15, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
          std::vector<turi::sframe>::__vdeallocate((_QWORD *)v14 + 6);
          v14[3] = v16;
          *((_QWORD *)v14 + 8) = v17;
          v17 = 0;
          v16 = 0uLL;
          v19 = (void **)&v16;
          std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v19);
          ++v13;
        }
        while (v13 < *v5);
        ++v11;
      }
      while (v11 < *v5);
    }
  }
}

void sub_2182B92DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void turi::sgraph::fetch_vid_hash_map(turi::sgraph *this@<X0>, void **a2@<X1>, void **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void **v31[10];
  uint64_t v32;
  std::__shared_weak_count *v33;
  void *__p;
  _QWORD *v35;
  char v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  _QWORD v42[4];

  v42[3] = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparse_hashtable(v8, 0);
  std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::shared_ptr[abi:ne180100]<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,void>(a4, v8);
  v31[0] = a2;
  v42[0] = *((_QWORD *)this + 3);
  if (v42[0] <= (unint64_t)a2)
  {
    __p = v31;
    v35 = v42;
    turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v31[0] = a3;
  v42[0] = *((_QWORD *)this + 4);
  if (v42[0] <= (unint64_t)a3)
  {
    __p = v31;
    v35 = v42;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v9 = *(_QWORD *)(*((_QWORD *)this + 8) + 24 * (_QWORD)a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME);
  turi::sframe::select_column(v9 + 296 * (_QWORD)a2, (unsigned __int8 **)&__p, &v41);
  if (v36 < 0)
    operator delete(__p);
  turi::sarray<turi::flexible_type>::get_reader(v41, &v40);
  v32 = v40;
  v10 = (std::__shared_weak_count *)operator new();
  v11 = v40;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E558;
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
  v33 = v10;
  v40 = 0;
  if (*(_BYTE *)(v41 + 248) && (v12 = *(uint64_t **)(v41 + 80), (v13 = *(_QWORD *)(v41 + 88) - (_QWORD)v12) != 0))
  {
    v14 = 0;
    v15 = v13 >> 3;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v16 = *v12++;
      v14 += v16;
      --v15;
    }
    while (v15);
  }
  else
  {
    v14 = 0;
  }
  turi::sarray_reader_buffer<turi::flexible_type>::sarray_reader_buffer((uint64_t)&__p, &v32, 0, v14, 1024);
  v17 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v39 < v38)
  {
    v20 = 0;
    do
    {
      v21 = (_QWORD *)*a4;
      v22 = turi::sarray_reader_buffer<turi::flexible_type>::next((uint64_t *)&__p);
      memset(v42, 0, 13);
      v23 = *(_QWORD *)v22;
      *(_QWORD *)((char *)v42 + 5) = *(_QWORD *)(v22 + 5);
      v42[0] = v23;
      BYTE4(v42[1]) = *(_BYTE *)(v22 + 12);
      *(_BYTE *)(v22 + 12) = 0;
      v42[2] = v20;
      _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::resize_delta((uint64_t)v21, 1);
      _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::insert_noresize(v21, (unsigned __int8 *)v42, (uint64_t)v31);
      std::pair<turi::flexible_type const,unsigned long>::~pair((uint64_t)v42);
      ++v20;
    }
    while (v39 < v38);
  }
  v24 = v37;
  if (v37)
  {
    v25 = (unint64_t *)&v37->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v31[0] = &__p;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v31);
  v27 = v40;
  v40 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_2182B9654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  v30 = *(_QWORD *)(v28 - 104);
  *(_QWORD *)(v28 - 104) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v28 - 96);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::reorder_and_add_new_columns(uint64_t a1, const void ***a2, _QWORD *a3)
{
  const void **v6;
  const void **v7;
  const void **v8;
  unint64_t i;
  unsigned __int8 **v10;
  uint64_t v11;
  char v12;
  void **v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v24;
  int v25;
  __int128 v26;
  char v27;
  _QWORD v28[3];
  _BYTE v29[8];
  char *v30;
  void **v31[38];

  v31[37] = *(void ***)MEMORY[0x24BDAC8D0];
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v29, *a2, a2[1]);
  v6 = *(const void ***)(a1 + 40);
  v7 = *(const void ***)(a1 + 48);
  while (v6 != v7)
  {
    if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v29, v6))
    {
      v22 = 0;
      goto LABEL_31;
    }
    v6 += 3;
  }
  memset(v28, 0, sizeof(v28));
  v8 = *a2;
  if (a2[1] != *a2)
  {
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2); ++i)
    {
      v10 = (unsigned __int8 **)&v8[3 * i];
      v27 = 0;
      v27 = *(_BYTE *)(*a3 + i);
      if (turi::sframe::contains_column(a1, v10))
      {
        v11 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v10);
        if (v11 == *(_QWORD *)(a1 + 48))
        {
          *(_QWORD *)&v26 = v10;
          turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
        }
        v12 = turi::sframe::column_type((turi::sframe *)a1, 0xAAAAAAAAAAAAAAABLL * ((v11 - *(_QWORD *)(a1 + 40)) >> 3));
        if (v27 != v12)
        {
          v22 = 0;
          goto LABEL_30;
        }
      }
      else
      {
        if (*(_BYTE *)(a1 + 288))
          v13 = *(void ***)(a1 + 32);
        else
          v13 = 0;
        v31[0] = v13;
        v25 = 1;
        std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::flexible_type&,unsigned long,int,turi::flex_type_enum &,void>((uint64_t)&turi::FLEX_UNDEFINED, (unint64_t *)v31, &v25, &v27, &v26);
        v24 = v26;
        if (*((_QWORD *)&v26 + 1))
        {
          v14 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        turi::sframe::add_column(a1, &v24, (uint64_t)v10, (uint64_t)v31);
        turi::sframe::operator=(a1, (uint64_t)v31);
        turi::sframe::~sframe((turi::sframe *)v31);
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        if (*((_QWORD *)&v24 + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
        if (*((_QWORD *)&v26 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      v8 = *a2;
    }
  }
  turi::sframe::select_columns((uint64_t *)a1, a2, (uint64_t)v31);
  turi::sframe::operator=(a1, (uint64_t)v31);
  turi::sframe::~sframe((turi::sframe *)v31);
  v22 = 1;
LABEL_30:
  v31[0] = (void **)v28;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v31);
LABEL_31:
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v29, v30);
  return v22;
}

void sub_2182B99C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, char *a20,uint64_t a21,uint64_t a22,void **a23)
{
  turi::sframe::~sframe((turi::sframe *)&a23);
  a23 = (void **)&a16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a23);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::union_columns(turi::sgraph *this, const void ***a2, turi::sframe *a3)
{
  char **v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  char *v13;
  char **v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  const void **v18;
  const void **v19;
  __int128 v20;
  char v21;
  _OWORD *size;
  __int128 v23;
  std::string::size_type v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  int *v38;
  file_logger *v39;
  file_logger *started;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  const char *v44;
  char *v45;
  _QWORD *v46;
  size_t v47;
  size_t v48;
  _QWORD *v49;
  const char *v50;
  char *v51;
  _QWORD *v52;
  size_t v53;
  size_t v54;
  _QWORD *v55;
  const std::locale::facet *v56;
  _QWORD *exception;
  std::string __p;
  void *v60;
  char *v61;
  char *v62;
  std::string v63;
  std::string v64;
  char v65[8];
  char *v66;
  char **v67;
  char *v68[2];

  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v67, *((const void ***)this + 5), *((const void ***)this + 6));
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v65, a2[5], a2[6]);
  v5 = v67;
  if (v67 == v68)
  {
LABEL_19:
    memset(&v63, 0, sizeof(v63));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v63, *((__int128 **)this + 5), *((__int128 **)this + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3));
    std::vector<turi::flex_type_enum>::vector(&v60, *((_QWORD *)this + 3));
    if (*((_QWORD *)this + 3))
    {
      v15 = 0;
      do
      {
        v16 = turi::sframe::column_type(this, v15);
        *((_BYTE *)v60 + v15++) = v16;
      }
      while (v15 < *((_QWORD *)this + 3));
    }
    if (a2[3])
    {
      v17 = 0;
      do
      {
        v18 = a2[5];
        if (0xAAAAAAAAAAAAAAABLL * (a2[6] - v18) <= v17)
          turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
        v19 = &v18[3 * v17];
        if (*((char *)v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v19, (std::string::size_type)v19[1]);
        }
        else
        {
          v20 = *(_OWORD *)v19;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v19[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        }
        v21 = turi::sframe::column_type((turi::sframe *)a2, v17);
        if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v67, (const void **)&__p.__r_.__value_.__l.__data_))
        {
          size = (_OWORD *)v63.__r_.__value_.__l.__size_;
          if (v63.__r_.__value_.__l.__size_ >= v63.__r_.__value_.__r.__words[2])
          {
            v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v63, (__int128 *)&__p);
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v63.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else
            {
              v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v63.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *size = v23;
            }
            v24 = (std::string::size_type)size + 24;
          }
          v63.__r_.__value_.__l.__size_ = v24;
          v25 = v61;
          if (v61 >= v62)
          {
            v27 = (unint64_t)v60;
            v28 = v61 - (_BYTE *)v60;
            v29 = v61 - (_BYTE *)v60 + 1;
            if (v29 < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v30 = v62 - (_BYTE *)v60;
            if (2 * (v62 - (_BYTE *)v60) > (unint64_t)v29)
              v29 = 2 * v30;
            if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
              v31 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
              v32 = (char *)operator new(v31);
            else
              v32 = 0;
            v33 = &v32[v28];
            v34 = &v32[v28];
            *v34 = v21;
            v26 = v34 + 1;
            if (v25 != (char *)v27)
            {
              v35 = &v25[~v27];
              do
              {
                v36 = *--v25;
                (v35--)[(_QWORD)v32] = v36;
              }
              while (v25 != (char *)v27);
              v33 = v32;
            }
            v60 = v33;
            v61 = v26;
            v62 = &v32[v31];
            if (v27)
              operator delete((void *)v27);
          }
          else
          {
            *v61 = v21;
            v26 = v25 + 1;
          }
          v61 = v26;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v17;
      }
      while (v17 < (unint64_t)a2[3]);
    }
    if (turi::sgraph::reorder_and_add_new_columns((uint64_t)this, (const void ***)&v63, &v60))
      v37 = turi::sgraph::reorder_and_add_new_columns((uint64_t)a2, (const void ***)&v63, &v60);
    else
      v37 = 0;
    if (v60)
    {
      v61 = (char *)v60;
      operator delete(v60);
    }
    v60 = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  }
  else
  {
    while (1)
    {
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v65, (const void **)v5 + 4))
      {
        v6 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((_QWORD *)this + 5), *((_QWORD *)this + 6), (unsigned __int8 **)v5 + 4);
        if (v6 == *((_QWORD *)this + 6))
        {
          v63.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 4);
          turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
        }
        v7 = turi::sframe::column_type(this, 0xAAAAAAAAAAAAAAABLL * ((v6 - *((_QWORD *)this + 5)) >> 3));
        v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)a2[5], (uint64_t)a2[6], (unsigned __int8 **)v5 + 4);
        if ((const void **)v8 == a2[6])
        {
          v63.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 4);
          turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
        }
        v9 = turi::sframe::column_type((turi::sframe *)a2, 0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)a2[5]) >> 3));
        v10 = v9;
        v11 = v7 == 7 || v9 == 7;
        if (!v11 && v7 != v9)
          break;
      }
      v13 = v5[1];
      if (v13)
      {
        do
        {
          v14 = (char **)v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char **)v5[2];
          v11 = *v14 == (char *)v5;
          v5 = v14;
        }
        while (!v11);
      }
      v5 = v14;
      if (v14 == v68)
        goto LABEL_19;
    }
    v38 = (int *)global_logger();
    if (v38[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v38))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v39 = (file_logger *)global_logger();
      started = file_logger::start_stream(v39, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "union_columns", 1426, 1);
      v41 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v41 && *((_BYTE *)v41 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41 + 2, (uint64_t)"Column type does not match for field : ", 39);
      if (*((char *)v5 + 55) < 0)
        std::string::__init_copy_ctor_external(&v64, v5[4], (std::string::size_type)v5[5]);
      else
        v64 = *(std::string *)(v5 + 4);
      v42 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v64);
      v43 = pthread_getspecific(*(_QWORD *)(v42 + 592));
      if (v43 && *((_BYTE *)v43 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43 + 2, (uint64_t)" ", 1);
      if (v7 > 9)
        v44 = "undefined";
      else
        v44 = off_24D936E50[v7];
      v45 = (char *)pthread_getspecific(*(_QWORD *)(v42 + 592));
      if (v45)
      {
        if (v45[280])
        {
          v46 = v45 + 16;
          v47 = strlen(v44);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v44, v47);
          v48 = strlen(v44);
          if (v48)
          {
            if (v44[v48 - 1] == 10)
              file_logger::stream_flush((file_logger *)v42);
          }
        }
      }
      v49 = pthread_getspecific(*(_QWORD *)(v42 + 592));
      if (v49 && *((_BYTE *)v49 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49 + 2, (uint64_t)"!=", 2);
      if (v10 > 9)
        v50 = "undefined";
      else
        v50 = off_24D936E50[v10];
      v51 = (char *)pthread_getspecific(*(_QWORD *)(v42 + 592));
      if (v51)
      {
        if (v51[280])
        {
          v52 = v51 + 16;
          v53 = strlen(v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v50, v53);
          v54 = strlen(v50);
          if (v54)
          {
            if (v50[v54 - 1] == 10)
              file_logger::stream_flush((file_logger *)v42);
          }
        }
      }
      v55 = pthread_getspecific(*(_QWORD *)(v42 + 592));
      if (v55)
      {
        if (*((_BYTE *)v55 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(_QWORD *)(v55[2] - 24) + 16));
          v56 = std::locale::use_facet((const std::locale *)&v63, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
          std::locale::~locale((std::locale *)&v63);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v42);
          if (*(_DWORD *)(v42 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
    }
    v37 = 0;
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v65, v66);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v67, v68[0]);
  return v37;
}

void sub_2182BA0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,char *a30)
{
  uint64_t v30;

  std::locale::~locale(&a19);
  if (a27 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a29, a30);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v30 - 120, *(char **)(v30 - 112));
  _Unwind_Resume(a1);
}

void turi::sgraph::fast_validate_add_vertices(turi::sframe const&,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vid_type != flex_type_enum::UNDEFINED", 37);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 1454, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sgraph::fast_validate_add_vertices(turi::sframe const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182BA28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"src_vid_type != flex_type_enum::UNDEFINED", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 1492, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sgraph::fast_validate_add_edges(turi::sframe const&,unsigned long,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182BA40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"groupid", 7);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_groups", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 284, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182BA620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void sub_2182BA83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned long,turi::flexible_type>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 20))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 8);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 8);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 8);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 8);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 8);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 8);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 8);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 8);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 8);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 8);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 8);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 8);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  return a1;
}

unint64_t turi::hilbert_index_to_coordinate(unint64_t this, unint64_t a2)
{
  char v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!this && a2 == 1)
    return 0;
  if (a2 <= 1)
    turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  if ((a2 & (a2 - 1)) != 0)
    turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  v3 = 2 * __clz(__rbit64(a2));
  v4 = (1431655765 << v3) | this;
  v5 = (this >> 1) & 0x55555555;
  v6 = ((v4 & 0x55555555) + v5) ^ 0x55555555 ^ ((((v4 & 0x55555555) + v5) ^ 0x55555555) >> 2);
  v7 = v6 ^ (v6 >> 4) ^ ((v6 ^ (v6 >> 4)) >> 8);
  v8 = v4 & 0x55555555 & ((v7 >> 16) ^ v7) ^ (((v7 >> 16) ^ v7) >> 1) & 0x55555555;
  v9 = (v4 ^ v8 ^ (v5 | (2 * v8))) & ~(-1 << v3);
  v10 = ((v9 ^ (v9 >> 1)) & 0x22222222 | (2
                                                                    * ((v9 ^ (v9 >> 1)) & 0x22222222))) ^ v9;
  v11 = ((v10 ^ (v10 >> 2)) & 0xC0C0C0C | (4
                                                                     * ((v10 ^ (v10 >> 2)) & 0xC0C0C0C))) ^ v10;
  v12 = ((v11 ^ (v11 >> 4)) & 0xF000F0 | (16
                                                                      * ((v11 ^ (v11 >> 4)) & 0xF000F0))) ^ v11;
  v13 = (unsigned __int16)(v12 ^ (v12 >> 8)) & 0xFF00;
  return ((v13 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)BYTE1(v13) << 16)) ^ v12) >> 16;
}

void turi::parallel_for<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)>>(turi::thread_pool *a1, char *a2, uint64_t a3)
{
  turi::thread_pool *v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  turi::thread_pool *v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  char *v15;
  _QWORD *v16;
  turi::thread *v17;
  unint64_t v18;
  uint64_t v19[4];
  turi::thread_pool *v20;
  _OWORD v21[12];
  uint64_t v22;

  v5 = a1;
  v22 = *MEMORY[0x24BDAC8D0];
  v20 = a1;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v11 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v21, v11);
    v12 = 0;
    v13 = (a2 - (char *)v5) >> 4;
    v14 = (double)(unint64_t)v13 / (double)(unint64_t)v7;
    v15 = (char *)v7 - 1;
    do
    {
      v19[0] = 0;
      v16 = (_QWORD *)operator new();
      v17 = (turi::thread *)(v12 + 1);
      v18 = (unint64_t)(v14 * (double)(v12 + 1));
      if (!v15)
        v18 = v13;
      *v16 = a3;
      v16[1] = (unint64_t)(v14 * (double)v12);
      v16[2] = v18;
      v16[3] = &v20;
      v19[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)>>(std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)> const&,std::random_access_iterator_tag)::{lambda(void)#1}>(std::__wrap_iter<std::pair<unsigned long,unsigned long> *>)::stored_vtable;
      v19[1] = (uint64_t)v16;
      turi::parallel_task_queue::launch((uint64_t)v21, (uint64_t)v19, -1);
      boost::function0<void>::~function0(v19);
      --v15;
      ++v12;
    }
    while (v17 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v21);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v21);
  }
  else
  {
    while (v5 != (turi::thread_pool *)a2)
    {
      v21[0] = *(_OWORD *)v5;
      v10 = *(_QWORD *)(a3 + 24);
      if (!v10)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 48))(v10, v21);
      v5 = (turi::thread_pool *)((char *)v5 + 16);
    }
  }
}

void sub_2182BAD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/hilbert_curve.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"n", 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/hilbert_curve.hpp", "operator()", 34, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182BAF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/hilbert_curve.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_power_of_2(n)", 16);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/hilbert_curve.hpp", "operator()", 35, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::hilbert_index_to_coordinate(unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182BB0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)>>(std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)> const&,std::random_access_iterator_tag)::{lambda(void)#1}>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  _OWORD *v5;
  __int128 v6;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_OWORD **)result;
      result = operator new();
      v6 = v5[1];
      *(_OWORD *)result = *v5;
      *(_OWORD *)(result + 16) = v6;
      *(_QWORD *)a2 = result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        result = MEMORY[0x219A19A08](result, 0x1060C40F6749743);
      goto LABEL_9;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186EE40ALL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186EE40ALL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)>>(std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::__wrap_iter<std::pair<unsigned long,unsigned long> *>,std::function<void ()(std::pair<unsigned long,unsigned long>)> const&,std::random_access_iterator_tag)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v1 = *(uint64_t **)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 8);
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2 != v3)
  {
    v4 = (__int128 *)(*(_QWORD *)v1[3] + 16 * v2);
    v5 = 16 * v3 - 16 * v2;
    do
    {
      v6 = *v1;
      v8 = *v4;
      v7 = *(_QWORD *)(v6 + 24);
      if (!v7)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 48))(v7, &v8);
      ++v4;
      v5 -= 16;
    }
    while (v5);
  }
  return result;
}

void turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 332, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182BB448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::sframe>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>,std::reverse_iterator<std::vector<turi::sframe>*>,std::reverse_iterator<std::vector<turi::sframe>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>,std::reverse_iterator<std::vector<turi::sframe>*>,std::reverse_iterator<std::vector<turi::sframe>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sframe>>,std::reverse_iterator<std::vector<turi::sframe>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<turi::sframe>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<turi::sframe>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<turi::sframe>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_OWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::vector<turi::sframe>>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  __int128 v8;
  uint64_t v10;

  v5 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v8 = *(_OWORD *)(a3 + 16);
    v6[2] = *(_OWORD *)a3;
    v6[3] = v8;
    *((_QWORD *)v6 + 8) = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v7, (uint64_t *)v6);
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::pair<unsigned long,turi::flexible_type>::~pair(v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::pair<unsigned long,turi::flexible_type>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::pair<unsigned long,turi::flexible_type>::~pair(i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::unordered_set<turi::flexible_type>::unordered_set<std::__wrap_iter<turi::flexible_type const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(a1, v5, (char *)v5);
      v5 += 16;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2182BB91C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D936408;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D936408;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  double v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  int v11;
  size_t v12;
  size_t v13;
  unsigned int v14;
  double *v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t result;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    return 1;
LABEL_2:
  if (*(_BYTE *)(v3 + 20) == 7)
    goto LABEL_3;
  v6 = (unsigned __int8 *)(*a2 + 16 * *(_QWORD *)v3);
  switch(*(_BYTE *)(v3 + 20))
  {
    case 0:
      switch(v6[12])
      {
        case 0u:
          if (*(_QWORD *)v6 != *(_QWORD *)(v3 + 8))
            return 0;
          goto LABEL_3;
        case 1u:
          v7 = *(double *)v6;
          v8 = *(_QWORD *)(v3 + 8);
          goto LABEL_65;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(_QWORD *)(v3 + 8) != (uint64_t)(*(_QWORD *)v6 << 8) >> 8 || *((_DWORD *)v6 + 2))
            return 0;
          goto LABEL_3;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(v6[12])
      {
        case 0u:
          v7 = *(double *)(v3 + 8);
          v8 = *(_QWORD *)v6;
LABEL_65:
          v60 = (double)v8;
          goto LABEL_66;
        case 1u:
          v7 = *(double *)v6;
          v60 = *(double *)(v3 + 8);
LABEL_66:
          if (v7 != v60)
            return 0;
          goto LABEL_3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          v61 = vabdd_f64((double)*((int *)v6 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v6 << 8) >> 8), *(double *)(v3 + 8));
          goto LABEL_74;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v9 = v6[12];
      if (v9 != 2)
      {
        if (v9 > 9 || v9 == 2)
          turi::apply_binary_op_ff();
        return 0;
      }
      v10 = *(double *)v6;
      v11 = *(char *)(*(_QWORD *)v6 + 31);
      v12 = *(unsigned __int8 *)(*(_QWORD *)v6 + 31);
      if (v11 < 0)
        v13 = *(_QWORD *)(*(_QWORD *)&v10 + 16);
      else
        v13 = v12;
      v62 = *(_QWORD *)(v3 + 8);
      if (*(char *)(v62 + 31) < 0)
        v63 = *(_QWORD *)(v62 + 16);
      else
        v63 = *(unsigned __int8 *)(v62 + 31);
      if (v13 != v63)
        return 0;
      v64 = (unsigned __int8 *)(*(_QWORD *)&v10 + 8);
      if ((v12 & 0x80) != 0)
        v64 = *(unsigned __int8 **)v64;
      v65 = (unsigned __int8 *)(v62 + 8);
      if ((*(_BYTE *)(v62 + 31) & 0x80) != 0)
      {
        v65 = *(unsigned __int8 **)v65;
        if ((v12 & 0x80) == 0)
          goto LABEL_88;
      }
      else if ((v12 & 0x80) == 0)
      {
LABEL_88:
        if (!v13)
          goto LABEL_3;
        while (*v64 == *v65)
        {
          ++v64;
          ++v65;
          if (!--v13)
            goto LABEL_3;
        }
        return 0;
      }
      if (!memcmp(v64, v65, v13))
        goto LABEL_3;
      return 0;
    case 3:
      v14 = v6[12];
      if (v14 == 3)
      {
        v17 = *(_QWORD *)v6 + 8;
        v15 = *(double **)v17;
        v16 = *(double **)(v17 + 8);
        v18 = ((uint64_t)v16 - *(_QWORD *)v17) >> 3;
        v19 = *(double **)(*(_QWORD *)(v3 + 8) + 8);
        if (v18 == (uint64_t)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 16) - (_QWORD)v19) >> 3)
        {
          if (v16 == v15)
            goto LABEL_3;
          if (v18 <= 1)
            v18 = 1;
          while (*v15 == *v19)
          {
            ++v19;
            ++v15;
            if (!--v18)
              goto LABEL_3;
          }
        }
      }
      else if (v14 > 9 || v14 == 3)
      {
        turi::apply_binary_op_ff();
      }
      return 0;
    case 4:
      v20 = v6[12];
      if (v20 == 4)
      {
        if ((turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t *)(*(_QWORD *)v6 + 8), (_QWORD *)(*(_QWORD *)(v3 + 8) + 8)) & 1) != 0)goto LABEL_3;
      }
      else if (v20 > 9 || v20 == 4)
      {
        turi::apply_binary_op_ff();
      }
      return 0;
    case 5:
      v21 = v6[12];
      if (v21 == 5)
      {
        if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t **)(*(_QWORD *)v6 + 8), (uint64_t **)(*(_QWORD *)(v3 + 8) + 8)))
        {
          goto LABEL_3;
        }
      }
      else if (v21 > 9 || v21 == 5)
      {
        turi::apply_binary_op_ff();
      }
      return 0;
    case 6:
      switch(v6[12])
      {
        case 0u:
          if (*(_QWORD *)v6 != (uint64_t)(*(_QWORD *)(v3 + 8) << 8) >> 8 || *(_DWORD *)(v3 + 16))
            return 0;
          goto LABEL_3;
        case 1u:
          v61 = vabdd_f64(*(double *)v6, (double)*(int *)(v3 + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(v3 + 8) << 8) >> 8));
LABEL_74:
          if (v61 >= 0.0000005)
            return 0;
          goto LABEL_3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(_QWORD *)(v3 + 8) ^ *(_QWORD *)v6) & 0xFFFFFFFFFFFFFFLL) != 0
            || *((_DWORD *)v6 + 2) != *(_DWORD *)(v3 + 16))
          {
            return 0;
          }
          goto LABEL_3;
        default:
          turi::apply_binary_op_ff();
      }
    case 8:
      v22 = v6[12];
      if (v22 != 8)
      {
        if (v22 > 9 || v22 == 8)
          turi::apply_binary_op_ff();
        return 0;
      }
      result = turi::image_type::operator==(*(_QWORD *)v6 + 8, *(_QWORD *)(v3 + 8) + 8);
      if ((_DWORD)result)
        goto LABEL_3;
      return result;
    case 9:
      v24 = v6[12];
      if (v24 != 9)
      {
        if (v24 >= 9)
          turi::apply_binary_op_ff();
        return 0;
      }
      v25 = *(_QWORD *)(v3 + 8);
      v26 = *(_QWORD **)v6;
      if (v25 == *(_QWORD *)v6)
        goto LABEL_3;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v26 + 1), v25 + 8))
        return 0;
      v28 = (char *)v26[3];
      v27 = (char *)v26[4];
      v29 = v27 - v28;
      if (v27 == v28)
        goto LABEL_3;
      if (!v26[1])
        goto LABEL_3;
      v30 = 1;
      do
      {
        v31 = *(_QWORD *)v28;
        v28 += 8;
        v30 *= v31;
      }
      while (v28 != v27);
      if (!v30)
        goto LABEL_3;
      v72 = 0;
      std::vector<unsigned long>::vector(&v73, v29 >> 3, &v72);
      result = v73;
      v32 = v74;
      v33 = **(_QWORD **)(v25 + 8);
      v34 = v74 - v73;
      v35 = (v74 - v73) >> 3;
      v36 = v35 - 1;
      if (v35 <= 1)
        v37 = 1;
      else
        v37 = (v74 - v73) >> 3;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (v32 == result)
    {
      v45 = 0;
      v46 = *(double *)(*(_QWORD *)v26[1] + 8 * v26[9]);
    }
    else
    {
      v38 = 0;
      v39 = (uint64_t *)v26[6];
      v40 = (uint64_t *)result;
      v41 = v37;
      do
      {
        v43 = *v40++;
        v42 = v43;
        v44 = *v39++;
        v38 += v44 * v42;
        --v41;
      }
      while (v41);
      v45 = 0;
      v46 = *(double *)(*(_QWORD *)v26[1] + 8 * (v26[9] + v38));
      v47 = *(uint64_t **)(v25 + 48);
      v48 = (uint64_t *)result;
      v49 = v37;
      do
      {
        v51 = *v48++;
        v50 = v51;
        v52 = *v47++;
        v45 += v52 * v50;
        --v49;
      }
      while (v49);
    }
    if (v46 != *(double *)(v33 + 8 * (*(_QWORD *)(v25 + 72) + v45)))
      break;
    v53 = v35;
    v54 = v35 - 1;
    if (v34 >= 1)
    {
      v55 = v26[3];
      v56 = *(_QWORD *)(result + 8 * v36) + 1;
      *(_QWORD *)(result + 8 * v36) = v56;
      v57 = (v34 & 0xFFFFFFFFFFFFFFF8) - 16;
      v54 = v35 - 1;
      if (v56 >= *(_QWORD *)(v55 + 8 * v36))
      {
        do
        {
          *(_QWORD *)(result + v57 + 8) = 0;
          if (v54 <= 0)
            goto LABEL_63;
          --v54;
          v58 = *(_QWORD *)(result + v57) + 1;
          *(_QWORD *)(result + v57) = v58;
          v59 = *(_QWORD *)(v55 + v57);
          v57 -= 8;
        }
        while (v58 >= v59);
        v53 = 1;
      }
      else
      {
        v53 = 1;
        v54 = v35 - 1;
      }
    }
    if (!v53 || v54 < 0)
    {
      if (result)
      {
LABEL_63:
        v74 = result;
        operator delete((void *)result);
      }
LABEL_3:
      v3 += 24;
      if (v3 == v4)
        return 1;
      goto LABEL_2;
    }
  }
  if (result)
  {
    v74 = result;
    operator delete((void *)result);
    return 0;
  }
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

_QWORD *std::__function::__value_func<BOOL ()(std::vector<turi::flexible_type> const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2182BC130(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D936498;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D936498;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  return std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(*a2 + 16 * **(_QWORD **)(a1 + 16))) != 0;
}

uint64_t std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_1>,BOOL ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D936518;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D936518;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned __int8 *std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *result;
  uint64_t v5;

  result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(*(_QWORD **)(a1 + 8), (unsigned __int8 *)(*a2 + 16 * **(_QWORD **)(a1 + 16)));
  if (result)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, a2);
  }
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2,std::allocator<turi::sgraph::get_vertices(std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long)::$_2>,BOOL ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 142, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182BC448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 143, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182BC5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::parallel_for<void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe const& const&)::{lambda(void)#1}>(turi::sframe const&)::stored_vtable
             + 1;
      v16[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2182BC7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::vector<unsigned long>>>(char *__src@<X4>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  char *v6;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;

  v6 = a2;
  if (a2 != a3)
  {
    do
    {
      v9 = std::vector<unsigned long>::insert(a4, __src, v6 + 32);
      v10 = (char *)*((_QWORD *)v6 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v6 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      __src = v9 + 8;
      v6 = v11;
    }
    while (v11 != a3);
    v6 = a3;
  }
  *a5 = v6;
  a5[1] = (char *)a4;
  a5[2] = __src;
}

void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  turi::random::generator *source;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void ***v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _BYTE v50[24];
  _BYTE *v51;
  _BYTE v52[24];
  _BYTE *v53;
  _BYTE v54[24];
  _BYTE *v55;
  void **v56[3];
  void ***v57;
  _QWORD v58[3];
  _QWORD *v59;
  _QWORD v60[3];
  _QWORD *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (**(_QWORD **)a1 != -1)
  {
    source = turi::random::get_source((turi::random *)a1);
    turi::random::generator::seed(source, **(_QWORD **)a1 + a2);
  }
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8 * a2);
  if (v5 < (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 16))(**(_QWORD **)(a1 + 16)))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 16) + 32))(&v38, **(_QWORD **)(a1 + 16), v5);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 16) + 40))(&v35, **(_QWORD **)(a1 + 16), v5);
    (*(void (**)(void ***__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 32))(v56, *(_QWORD *)(a1 + 24), v5);
    turi::sframe_iterator::sframe_iterator((turi::sframe_iterator *)&v32, (const turi::sframe_iterator *)&v38);
    turi::sframe_iterator::sframe_iterator((turi::sframe_iterator *)&v29, (const turi::sframe_iterator *)&v35);
    v6 = (uint64_t)v57;
    if (v57)
    {
      if (v57 == v56)
      {
        v45 = v44;
        (*((void (**)(void ***, _BYTE *))v56[0] + 3))(v56, v44);
LABEL_9:
        v7 = v46;
        v8 = v58;
        v9 = (uint64_t)v59;
        if (v59)
        {
          if (v59 == v58)
          {
            v47 = v46;
            (*(void (**)(_QWORD *, _BYTE *))(v58[0] + 24))(v58, v46);
LABEL_14:
            v10 = v48;
            v11 = v60;
            v12 = (uint64_t)v61;
            if (v61)
            {
              if (v61 == v60)
              {
                v49 = v48;
                (*(void (**)(_QWORD *, _BYTE *))(v60[0] + 24))(v60, v48);
LABEL_19:
                std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v42, *(_QWORD *)(a1 + 32));
                std::copy_if[abi:ne180100]<turi::sframe_iterator,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>>(&v32, &v29, (uint64_t)v44, (uint64_t)v42, (uint64_t)v50);
                v13 = v55;
                if (v55 == v54)
                {
                  v14 = 4;
                  v13 = v54;
                }
                else
                {
                  if (!v55)
                    goto LABEL_24;
                  v14 = 5;
                }
                (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_24:
                v15 = v53;
                if (v53 == v52)
                {
                  v16 = 4;
                  v15 = v52;
                }
                else
                {
                  if (!v53)
                    goto LABEL_29;
                  v16 = 5;
                }
                (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_29:
                v17 = v51;
                if (v51 == v50)
                {
                  v18 = 4;
                  v17 = v50;
                }
                else
                {
                  if (!v51)
                    goto LABEL_34;
                  v18 = 5;
                }
                (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_34:
                v19 = v43;
                if (v43 == v42)
                {
                  v20 = 4;
                  v19 = v42;
                }
                else
                {
                  if (!v43)
                    goto LABEL_39;
                  v20 = 5;
                }
                (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_39:
                if (v49 == v48)
                {
                  v21 = 4;
                }
                else
                {
                  if (!v49)
                    goto LABEL_44;
                  v21 = 5;
                  v10 = v49;
                }
                (*(void (**)(_QWORD *))(*v10 + 8 * v21))(v10);
LABEL_44:
                if (v47 == v46)
                {
                  v22 = 4;
                }
                else
                {
                  if (!v47)
                    goto LABEL_49;
                  v22 = 5;
                  v7 = v47;
                }
                (*(void (**)(_QWORD *))(*v7 + 8 * v22))(v7);
LABEL_49:
                v23 = v45;
                if (v45 == v44)
                {
                  v24 = 4;
                  v23 = v44;
                }
                else
                {
                  if (!v45)
                    goto LABEL_54;
                  v24 = 5;
                }
                (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_54:
                v41 = (void **)&v31;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
                v41 = (void **)&v30;
                std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
                v41 = (void **)&v34;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
                v41 = (void **)&v33;
                std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
                if (v61 == v60)
                {
                  v25 = 4;
                }
                else
                {
                  if (!v61)
                    goto LABEL_59;
                  v25 = 5;
                  v11 = v61;
                }
                (*(void (**)(_QWORD *))(*v11 + 8 * v25))(v11);
LABEL_59:
                if (v59 == v58)
                {
                  v26 = 4;
                }
                else
                {
                  if (!v59)
                    goto LABEL_64;
                  v26 = 5;
                  v8 = v59;
                }
                (*(void (**)(_QWORD *))(*v8 + 8 * v26))(v8);
LABEL_64:
                v27 = v57;
                if (v57 == v56)
                {
                  v28 = 4;
                  v27 = v56;
                }
                else
                {
                  if (!v57)
                  {
LABEL_69:
                    v56[0] = (void **)&v37;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v56);
                    v56[0] = (void **)&v36;
                    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v56);
                    v56[0] = (void **)&v40;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v56);
                    v56[0] = (void **)&v39;
                    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v56);
                    return;
                  }
                  v28 = 5;
                }
                ((void (*)(void))(*v27)[v28])();
                goto LABEL_69;
              }
              v12 = (*(uint64_t (**)(void))(*v61 + 16))();
            }
            v49 = (_BYTE *)v12;
            goto LABEL_19;
          }
          v9 = (*(uint64_t (**)(void))(*v59 + 16))();
        }
        v47 = (_BYTE *)v9;
        goto LABEL_14;
      }
      v6 = ((uint64_t (*)(void))(*v57)[2])();
    }
    v45 = (_BYTE *)v6;
    goto LABEL_9;
  }
}

void sub_2182BCCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,char *a57,uint64_t a58,uint64_t a59,uint64_t a60,_QWORD *a61)
{
  _QWORD *v61;
  uint64_t v62;
  uint64_t v64;
  char *v65;
  uint64_t v66;

  if (a61 == v61)
  {
    v64 = 4;
  }
  else
  {
    if (!a61)
      goto LABEL_6;
    v64 = 5;
    v61 = a61;
  }
  (*(void (**)(_QWORD *))(*v61 + 8 * v64))(v61);
LABEL_6:
  v65 = a57;
  if (a57 == &a54)
  {
    v66 = 4;
    v65 = &a54;
  }
  else
  {
    if (!a57)
      goto LABEL_11;
    v66 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v65 + 8 * v66))();
LABEL_11:
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)&a9);
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)&a19);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v62 - 168));
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)&a29);
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)&a39);
  _Unwind_Resume(a1);
}

void sub_2182BCDE8()
{
  JUMPOUT(0x2182BCDC8);
}

void sub_2182BCDF0()
{
  JUMPOUT(0x2182BCDD0);
}

void sub_2182BCDF8()
{
  JUMPOUT(0x2182BCDD8);
}

void sub_2182BCE00()
{
  JUMPOUT(0x2182BCDE0);
}

uint64_t std::copy_if[abi:ne180100]<turi::sframe_iterator,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  while (*a1 != *a2 || a1[4] != a2[4] || a1[5] != a2[5])
  {
    v10 = turi::sframe_iterator::operator*(a1);
    v11 = *(_QWORD *)(a4 + 24);
    if (!v11)
      goto LABEL_10;
    if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 48))(v11, v10))
    {
      v12 = turi::sframe_iterator::operator*(a1);
      v13 = *(_QWORD *)(a3 + 24);
      if (!v13)
LABEL_10:
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v12);
    }
    turi::sframe_iterator::operator++(a1);
  }
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a5, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a5 + 32, a3 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a5 + 64, a3 + 64);
}

turi::sframe_iterator *turi::sframe_iterator::sframe_iterator(turi::sframe_iterator *this, const turi::sframe_iterator *a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__init_with_size[abi:ne180100]<turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*>((_QWORD *)this + 1, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 4));
  v4 = *((_OWORD *)a2 + 2);
  v5 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = v5;
  *((_OWORD *)this + 2) = v4;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)this + 7, *((uint64_t **)a2 + 7), *((uint64_t **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 4);
  return this;
}

void sub_2182BCF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::sarray_iterator<turi::flexible_type>>::__init_with_size[abi:ne180100]<turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sarray_iterator<turi::flexible_type>>,turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2182BCFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sarray_iterator<turi::flexible_type>>,turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*,turi::sarray_iterator<turi::flexible_type>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t **v5;
  unint64_t *v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;

  for (result = a4; a2 != a3; result += 48)
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_QWORD *)(result + 16) = 0;
    v5 = (unint64_t **)(result + 16);
    *(_DWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 28) = 0;
    if (a2 != result)
    {
      v6 = *(unint64_t **)(a2 + 16);
      *(_QWORD *)(result + 21) = *(_QWORD *)(a2 + 21);
      *v5 = v6;
      v7 = *(unsigned __int8 *)(a2 + 28);
      *(_BYTE *)(result + 28) = v7;
      if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
      {
        v8 = *v5;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
    }
    *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
    a2 += 48;
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe const& const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186EEA19 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186EEA19 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe const& const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  unint64_t i;

  for (i = a1[1]; i < a1[2]; ++i)
    turi::copy_if<turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,void,void>(turi::sframe const&,turi::sframe&,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(*a1, i);
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D9365B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D9365B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  double v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  int v11;
  size_t v12;
  size_t v13;
  unsigned int v14;
  double *v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t result;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    return 1;
LABEL_2:
  if (*(_BYTE *)(v3 + 20) == 7)
    goto LABEL_3;
  v6 = (unsigned __int8 *)(*a2 + 16 * *(_QWORD *)v3);
  switch(*(_BYTE *)(v3 + 20))
  {
    case 0:
      switch(v6[12])
      {
        case 0u:
          if (*(_QWORD *)v6 != *(_QWORD *)(v3 + 8))
            return 0;
          goto LABEL_3;
        case 1u:
          v7 = *(double *)v6;
          v8 = *(_QWORD *)(v3 + 8);
          goto LABEL_65;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(_QWORD *)(v3 + 8) != (uint64_t)(*(_QWORD *)v6 << 8) >> 8 || *((_DWORD *)v6 + 2))
            return 0;
          goto LABEL_3;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(v6[12])
      {
        case 0u:
          v7 = *(double *)(v3 + 8);
          v8 = *(_QWORD *)v6;
LABEL_65:
          v60 = (double)v8;
          goto LABEL_66;
        case 1u:
          v7 = *(double *)v6;
          v60 = *(double *)(v3 + 8);
LABEL_66:
          if (v7 != v60)
            return 0;
          goto LABEL_3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          v61 = vabdd_f64((double)*((int *)v6 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v6 << 8) >> 8), *(double *)(v3 + 8));
          goto LABEL_74;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v9 = v6[12];
      if (v9 != 2)
      {
        if (v9 > 9 || v9 == 2)
          turi::apply_binary_op_ff();
        return 0;
      }
      v10 = *(double *)v6;
      v11 = *(char *)(*(_QWORD *)v6 + 31);
      v12 = *(unsigned __int8 *)(*(_QWORD *)v6 + 31);
      if (v11 < 0)
        v13 = *(_QWORD *)(*(_QWORD *)&v10 + 16);
      else
        v13 = v12;
      v62 = *(_QWORD *)(v3 + 8);
      if (*(char *)(v62 + 31) < 0)
        v63 = *(_QWORD *)(v62 + 16);
      else
        v63 = *(unsigned __int8 *)(v62 + 31);
      if (v13 != v63)
        return 0;
      v64 = (unsigned __int8 *)(*(_QWORD *)&v10 + 8);
      if ((v12 & 0x80) != 0)
        v64 = *(unsigned __int8 **)v64;
      v65 = (unsigned __int8 *)(v62 + 8);
      if ((*(_BYTE *)(v62 + 31) & 0x80) != 0)
      {
        v65 = *(unsigned __int8 **)v65;
        if ((v12 & 0x80) == 0)
          goto LABEL_88;
      }
      else if ((v12 & 0x80) == 0)
      {
LABEL_88:
        if (!v13)
          goto LABEL_3;
        while (*v64 == *v65)
        {
          ++v64;
          ++v65;
          if (!--v13)
            goto LABEL_3;
        }
        return 0;
      }
      if (!memcmp(v64, v65, v13))
        goto LABEL_3;
      return 0;
    case 3:
      v14 = v6[12];
      if (v14 == 3)
      {
        v17 = *(_QWORD *)v6 + 8;
        v15 = *(double **)v17;
        v16 = *(double **)(v17 + 8);
        v18 = ((uint64_t)v16 - *(_QWORD *)v17) >> 3;
        v19 = *(double **)(*(_QWORD *)(v3 + 8) + 8);
        if (v18 == (uint64_t)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 16) - (_QWORD)v19) >> 3)
        {
          if (v16 == v15)
            goto LABEL_3;
          if (v18 <= 1)
            v18 = 1;
          while (*v15 == *v19)
          {
            ++v19;
            ++v15;
            if (!--v18)
              goto LABEL_3;
          }
        }
      }
      else if (v14 > 9 || v14 == 3)
      {
        turi::apply_binary_op_ff();
      }
      return 0;
    case 4:
      v20 = v6[12];
      if (v20 == 4)
      {
        if ((turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t *)(*(_QWORD *)v6 + 8), (_QWORD *)(*(_QWORD *)(v3 + 8) + 8)) & 1) != 0)goto LABEL_3;
      }
      else if (v20 > 9 || v20 == 4)
      {
        turi::apply_binary_op_ff();
      }
      return 0;
    case 5:
      v21 = v6[12];
      if (v21 == 5)
      {
        if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t **)(*(_QWORD *)v6 + 8), (uint64_t **)(*(_QWORD *)(v3 + 8) + 8)))
        {
          goto LABEL_3;
        }
      }
      else if (v21 > 9 || v21 == 5)
      {
        turi::apply_binary_op_ff();
      }
      return 0;
    case 6:
      switch(v6[12])
      {
        case 0u:
          if (*(_QWORD *)v6 != (uint64_t)(*(_QWORD *)(v3 + 8) << 8) >> 8 || *(_DWORD *)(v3 + 16))
            return 0;
          goto LABEL_3;
        case 1u:
          v61 = vabdd_f64(*(double *)v6, (double)*(int *)(v3 + 16) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(v3 + 8) << 8) >> 8));
LABEL_74:
          if (v61 >= 0.0000005)
            return 0;
          goto LABEL_3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(_QWORD *)(v3 + 8) ^ *(_QWORD *)v6) & 0xFFFFFFFFFFFFFFLL) != 0
            || *((_DWORD *)v6 + 2) != *(_DWORD *)(v3 + 16))
          {
            return 0;
          }
          goto LABEL_3;
        default:
          turi::apply_binary_op_ff();
      }
    case 8:
      v22 = v6[12];
      if (v22 != 8)
      {
        if (v22 > 9 || v22 == 8)
          turi::apply_binary_op_ff();
        return 0;
      }
      result = turi::image_type::operator==(*(_QWORD *)v6 + 8, *(_QWORD *)(v3 + 8) + 8);
      if ((_DWORD)result)
        goto LABEL_3;
      return result;
    case 9:
      v24 = v6[12];
      if (v24 != 9)
      {
        if (v24 >= 9)
          turi::apply_binary_op_ff();
        return 0;
      }
      v25 = *(_QWORD *)(v3 + 8);
      v26 = *(_QWORD **)v6;
      if (v25 == *(_QWORD *)v6)
        goto LABEL_3;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v26 + 1), v25 + 8))
        return 0;
      v28 = (char *)v26[3];
      v27 = (char *)v26[4];
      v29 = v27 - v28;
      if (v27 == v28)
        goto LABEL_3;
      if (!v26[1])
        goto LABEL_3;
      v30 = 1;
      do
      {
        v31 = *(_QWORD *)v28;
        v28 += 8;
        v30 *= v31;
      }
      while (v28 != v27);
      if (!v30)
        goto LABEL_3;
      v72 = 0;
      std::vector<unsigned long>::vector(&v73, v29 >> 3, &v72);
      result = v73;
      v32 = v74;
      v33 = **(_QWORD **)(v25 + 8);
      v34 = v74 - v73;
      v35 = (v74 - v73) >> 3;
      v36 = v35 - 1;
      if (v35 <= 1)
        v37 = 1;
      else
        v37 = (v74 - v73) >> 3;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (v32 == result)
    {
      v45 = 0;
      v46 = *(double *)(*(_QWORD *)v26[1] + 8 * v26[9]);
    }
    else
    {
      v38 = 0;
      v39 = (uint64_t *)v26[6];
      v40 = (uint64_t *)result;
      v41 = v37;
      do
      {
        v43 = *v40++;
        v42 = v43;
        v44 = *v39++;
        v38 += v44 * v42;
        --v41;
      }
      while (v41);
      v45 = 0;
      v46 = *(double *)(*(_QWORD *)v26[1] + 8 * (v26[9] + v38));
      v47 = *(uint64_t **)(v25 + 48);
      v48 = (uint64_t *)result;
      v49 = v37;
      do
      {
        v51 = *v48++;
        v50 = v51;
        v52 = *v47++;
        v45 += v52 * v50;
        --v49;
      }
      while (v49);
    }
    if (v46 != *(double *)(v33 + 8 * (*(_QWORD *)(v25 + 72) + v45)))
      break;
    v53 = v35;
    v54 = v35 - 1;
    if (v34 >= 1)
    {
      v55 = v26[3];
      v56 = *(_QWORD *)(result + 8 * v36) + 1;
      *(_QWORD *)(result + 8 * v36) = v56;
      v57 = (v34 & 0xFFFFFFFFFFFFFFF8) - 16;
      v54 = v35 - 1;
      if (v56 >= *(_QWORD *)(v55 + 8 * v36))
      {
        do
        {
          *(_QWORD *)(result + v57 + 8) = 0;
          if (v54 <= 0)
            goto LABEL_63;
          --v54;
          v58 = *(_QWORD *)(result + v57) + 1;
          *(_QWORD *)(result + v57) = v58;
          v59 = *(_QWORD *)(v55 + v57);
          v57 -= 8;
        }
        while (v58 >= v59);
        v53 = 1;
      }
      else
      {
        v53 = 1;
        v54 = v35 - 1;
      }
    }
    if (!v53 || v54 < 0)
    {
      if (result)
      {
LABEL_63:
        v74 = result;
        operator delete((void *)result);
      }
LABEL_3:
      v3 += 24;
      if (v3 == v4)
        return 1;
      goto LABEL_2;
    }
  }
  if (result)
  {
    v74 = result;
    operator delete((void *)result);
    return 0;
  }
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_0>,BOOL ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D936638;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D936638;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  void *v60;
  void *v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  BOOL v76;
  int v77;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  void *v97;
  void *v98;
  unsigned int v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  void *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  int v113;
  unint64_t *v115;
  unint64_t v116;
  std::runtime_error *exception;
  std::string *v118;
  __int128 v119;
  std::runtime_error *v120;
  std::string *v121;
  __int128 v122;
  void *__p[2];
  void *v124[2];
  __int128 v125;
  __int128 v126;
  std::string v127;
  size_t __idx;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a5, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v10 = (uint64_t)&(*a2)[2 * **(_QWORD **)(a1 + 8)];
  v11 = 0;
  switch(*(_BYTE *)(v10 + 12))
  {
    case 0:
      v11 = *(_QWORD *)v10;
      goto LABEL_29;
    case 1:
      v11 = (uint64_t)*(double *)v10;
      goto LABEL_29;
    case 2:
      v15 = *(_QWORD *)v10;
      v16 = (char **)(*(_QWORD *)v10 + 8);
      __idx = 0;
      v17 = (char *)v16;
      if (*(char *)(v15 + 31) < 0)
        v17 = *v16;
      std::string::basic_string[abi:ne180100]<0>(__p, v17);
      v11 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v124[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v15 + 31) < 0)
        v18 = *(_QWORD *)(v15 + 16);
      else
        v18 = *(unsigned __int8 *)(v15 + 31);
      if (__idx != v18)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v118 = std::string::append(&v127, " cannot be interpreted as an integer");
        v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
        v124[0] = (void *)v118->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v119;
        v118->__r_.__value_.__l.__size_ = 0;
        v118->__r_.__value_.__r.__words[2] = 0;
        v118->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v12 = *(_QWORD *)v10;
      __p[1] = 0;
      v124[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v12 + 8), *(_QWORD *)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v19 = *(_QWORD *)v10;
      __p[1] = 0;
      v124[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
      goto LABEL_28;
    case 5:
      v20 = *(_QWORD *)v10;
      __p[1] = 0;
      v124[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
      goto LABEL_28;
    case 6:
      v11 = (uint64_t)(*(_QWORD *)v10 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v21 = *(_QWORD *)v10;
      v22 = *(unsigned int **)(v21 + 16);
      __p[0] = *(void **)(v21 + 8);
      __p[1] = v22;
      if (v22)
      {
        v23 = v22 + 2;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = *(_OWORD *)(v21 + 24);
      v26 = *(_OWORD *)(v21 + 56);
      v125 = *(_OWORD *)(v21 + 40);
      v126 = v26;
      *(_OWORD *)v124 = v25;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v10 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v125 + 1))
      {
        *(_QWORD *)&v126 = *((_QWORD *)&v125 + 1);
        operator delete(*((void **)&v125 + 1));
      }
      if (v124[0])
      {
        v124[1] = v124[0];
        operator delete(v124[0]);
      }
      v11 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_29;
      v13 = (unint64_t *)((char *)__p[1] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
      }
LABEL_28:
      v11 = 0;
LABEL_29:
      v27 = (uint64_t)&(*a2)[2 * **(_QWORD **)(a1 + 16)];
      v28 = 0;
      switch(*(_BYTE *)(v27 + 12))
      {
        case 0:
          v28 = *(_QWORD *)v27;
          goto LABEL_57;
        case 1:
          v28 = (uint64_t)*(double *)v27;
          goto LABEL_57;
        case 2:
          v32 = *(_QWORD *)v27;
          v33 = (char **)(*(_QWORD *)v27 + 8);
          __idx = 0;
          v34 = (char *)v33;
          if (*(char *)(v32 + 31) < 0)
            v34 = *v33;
          std::string::basic_string[abi:ne180100]<0>(__p, v34);
          v28 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SHIBYTE(v124[0]) < 0)
            operator delete(__p[0]);
          if (*(char *)(v32 + 31) < 0)
            v35 = *(_QWORD *)(v32 + 16);
          else
            v35 = *(unsigned __int8 *)(v32 + 31);
          if (__idx != v35)
          {
            v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v121 = std::string::append(&v127, " cannot be interpreted as an integer");
            v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
            v124[0] = (void *)v121->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v122;
            v121->__r_.__value_.__l.__size_ = 0;
            v121->__r_.__value_.__r.__words[2] = 0;
            v121->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v120, (const std::string *)__p);
            __cxa_throw(v120, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_57;
        case 3:
          v29 = *(_QWORD *)v27;
          __p[1] = 0;
          v124[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v29 + 8), *(_QWORD *)(v29 + 16), (uint64_t)(*(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_56;
        case 4:
          v36 = *(_QWORD *)v27;
          __p[1] = 0;
          v124[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v127.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
          goto LABEL_56;
        case 5:
          v37 = *(_QWORD *)v27;
          __p[1] = 0;
          v124[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v37 + 8), *(uint64_t **)(v37 + 16), (uint64_t)(*(_QWORD *)(v37 + 16) - *(_QWORD *)(v37 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v127.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
          goto LABEL_56;
        case 6:
          v28 = (uint64_t)(*(_QWORD *)v27 << 8) >> 8;
          goto LABEL_57;
        case 7:
          goto LABEL_57;
        case 8:
          v38 = *(_QWORD *)v27;
          v39 = *(unsigned int **)(v38 + 16);
          __p[0] = *(void **)(v38 + 8);
          __p[1] = v39;
          if (v39)
          {
            v40 = v39 + 2;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
          v42 = *(_OWORD *)(v38 + 24);
          v43 = *(_OWORD *)(v38 + 56);
          v125 = *(_OWORD *)(v38 + 40);
          v126 = v43;
          *(_OWORD *)v124 = v42;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          goto LABEL_56;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v27 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v125 + 1))
          {
            *(_QWORD *)&v126 = *((_QWORD *)&v125 + 1);
            operator delete(*((void **)&v125 + 1));
          }
          if (v124[0])
          {
            v124[1] = v124[0];
            operator delete(v124[0]);
          }
          v28 = (uint64_t)__p[1];
          if (!__p[1])
            goto LABEL_57;
          v30 = (unint64_t *)((char *)__p[1] + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v28);
          }
LABEL_56:
          v28 = 0;
LABEL_57:
          v44 = *a3 + 16 * v11;
          v45 = *a5 + 16 * **(_QWORD **)(a1 + 8);
          if (v44 != v45)
          {
            switch(*(_BYTE *)(v45 + 12))
            {
              case 2:
                v46 = *(unint64_t **)v45;
                do
                {
                  v47 = __ldaxr(v46);
                  v48 = v47 - 1;
                }
                while (__stlxr(v48, v46));
                if (!v48)
                {
                  v49 = *(unint64_t **)v45;
                  if (!*(_QWORD *)v45)
                    goto LABEL_100;
                  if (*((char *)v49 + 31) < 0)
                    operator delete((void *)v49[1]);
                  v50 = v49;
                  v51 = 0x1012C404EF22A49;
                  goto LABEL_99;
                }
                break;
              case 3:
                v63 = *(unint64_t **)v45;
                do
                {
                  v64 = __ldaxr(v63);
                  v65 = v64 - 1;
                }
                while (__stlxr(v65, v63));
                if (!v65)
                {
                  v66 = *(unint64_t **)v45;
                  if (!*(_QWORD *)v45)
                    goto LABEL_100;
                  v67 = (void *)v66[1];
                  if (v67)
                  {
                    v66[2] = (unint64_t)v67;
                    operator delete(v67);
                  }
                  v50 = v66;
                  v51 = 0x1080C409938AC02;
                  goto LABEL_99;
                }
                break;
              case 4:
                v52 = *(unint64_t **)v45;
                do
                {
                  v53 = __ldaxr(v52);
                  v54 = v53 - 1;
                }
                while (__stlxr(v54, v52));
                if (!v54)
                {
                  v55 = *(unint64_t **)v45;
                  if (!*(_QWORD *)v45)
                    goto LABEL_100;
                  __p[0] = v55 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_92;
                }
                break;
              case 5:
                v68 = *(unint64_t **)v45;
                do
                {
                  v69 = __ldaxr(v68);
                  v70 = v69 - 1;
                }
                while (__stlxr(v70, v68));
                if (!v70)
                {
                  v55 = *(unint64_t **)v45;
                  if (!*(_QWORD *)v45)
                    goto LABEL_100;
                  __p[0] = v55 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_92:
                  v50 = v55;
                  v51 = 0x1020C405E66F15BLL;
                  goto LABEL_99;
                }
                break;
              case 8:
                v71 = *(unint64_t **)v45;
                do
                {
                  v72 = __ldaxr(v71);
                  v73 = v72 - 1;
                }
                while (__stlxr(v73, v71));
                if (!v73)
                {
                  v74 = *(unint64_t **)v45;
                  if (!*(_QWORD *)v45)
                    goto LABEL_100;
                  boost::detail::shared_count::~shared_count((unsigned int **)v74 + 2);
                  v50 = v74;
                  v62 = -235920773;
                  goto LABEL_98;
                }
                break;
              case 9:
                v56 = *(unint64_t **)v45;
                do
                {
                  v57 = __ldaxr(v56);
                  v58 = v57 - 1;
                }
                while (__stlxr(v58, v56));
                if (!v58)
                {
                  v59 = *(unint64_t **)v45;
                  if (*(_QWORD *)v45)
                  {
                    v60 = (void *)v59[6];
                    if (v60)
                    {
                      v59[7] = (unint64_t)v60;
                      operator delete(v60);
                    }
                    v61 = (void *)v59[3];
                    if (v61)
                    {
                      v59[4] = (unint64_t)v61;
                      operator delete(v61);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v59 + 1));
                    v50 = v59;
                    v62 = 2071181815;
LABEL_98:
                    v51 = v62 | 0x1030C4000000000;
LABEL_99:
                    MEMORY[0x219A19A08](v50, v51);
                  }
LABEL_100:
                  *(_QWORD *)v45 = 0;
                }
                break;
              default:
                break;
            }
            v75 = *(_QWORD *)v44;
            *(_QWORD *)(v45 + 5) = *(_QWORD *)(v44 + 5);
            *(_QWORD *)v45 = v75;
            LODWORD(v75) = *(unsigned __int8 *)(v44 + 12);
            *(_BYTE *)(v45 + 12) = v75;
            v76 = v75 > 9;
            v77 = (1 << v75) & 0x33C;
            if (!v76 && v77 != 0)
            {
              v79 = *(unint64_t **)v45;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 + 1, v79));
            }
          }
          v81 = *a4 + 16 * v28;
          v82 = *a5 + 16 * **(_QWORD **)(a1 + 16);
          if (v81 != v82)
          {
            switch(*(_BYTE *)(v82 + 12))
            {
              case 2:
                v83 = *(unint64_t **)v82;
                do
                {
                  v84 = __ldaxr(v83);
                  v85 = v84 - 1;
                }
                while (__stlxr(v85, v83));
                if (!v85)
                {
                  v86 = *(unint64_t **)v82;
                  if (!*(_QWORD *)v82)
                    goto LABEL_150;
                  if (*((char *)v86 + 31) < 0)
                    operator delete((void *)v86[1]);
                  v87 = v86;
                  v88 = 0x1012C404EF22A49;
                  goto LABEL_149;
                }
                break;
              case 3:
                v100 = *(unint64_t **)v82;
                do
                {
                  v101 = __ldaxr(v100);
                  v102 = v101 - 1;
                }
                while (__stlxr(v102, v100));
                if (!v102)
                {
                  v103 = *(unint64_t **)v82;
                  if (!*(_QWORD *)v82)
                    goto LABEL_150;
                  v104 = (void *)v103[1];
                  if (v104)
                  {
                    v103[2] = (unint64_t)v104;
                    operator delete(v104);
                  }
                  v87 = v103;
                  v88 = 0x1080C409938AC02;
                  goto LABEL_149;
                }
                break;
              case 4:
                v89 = *(unint64_t **)v82;
                do
                {
                  v90 = __ldaxr(v89);
                  v91 = v90 - 1;
                }
                while (__stlxr(v91, v89));
                if (!v91)
                {
                  v92 = *(unint64_t **)v82;
                  if (!*(_QWORD *)v82)
                    goto LABEL_150;
                  __p[0] = v92 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_142;
                }
                break;
              case 5:
                v105 = *(unint64_t **)v82;
                do
                {
                  v106 = __ldaxr(v105);
                  v107 = v106 - 1;
                }
                while (__stlxr(v107, v105));
                if (!v107)
                {
                  v92 = *(unint64_t **)v82;
                  if (!*(_QWORD *)v82)
                    goto LABEL_150;
                  __p[0] = v92 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_142:
                  v87 = v92;
                  v88 = 0x1020C405E66F15BLL;
                  goto LABEL_149;
                }
                break;
              case 8:
                v108 = *(unint64_t **)v82;
                do
                {
                  v109 = __ldaxr(v108);
                  v110 = v109 - 1;
                }
                while (__stlxr(v110, v108));
                if (!v110)
                {
                  v111 = *(unint64_t **)v82;
                  if (!*(_QWORD *)v82)
                    goto LABEL_150;
                  boost::detail::shared_count::~shared_count((unsigned int **)v111 + 2);
                  v87 = v111;
                  v99 = -235920773;
                  goto LABEL_148;
                }
                break;
              case 9:
                v93 = *(unint64_t **)v82;
                do
                {
                  v94 = __ldaxr(v93);
                  v95 = v94 - 1;
                }
                while (__stlxr(v95, v93));
                if (!v95)
                {
                  v96 = *(unint64_t **)v82;
                  if (*(_QWORD *)v82)
                  {
                    v97 = (void *)v96[6];
                    if (v97)
                    {
                      v96[7] = (unint64_t)v97;
                      operator delete(v97);
                    }
                    v98 = (void *)v96[3];
                    if (v98)
                    {
                      v96[4] = (unint64_t)v98;
                      operator delete(v98);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v96 + 1));
                    v87 = v96;
                    v99 = 2071181815;
LABEL_148:
                    v88 = v99 | 0x1030C4000000000;
LABEL_149:
                    MEMORY[0x219A19A08](v87, v88);
                  }
LABEL_150:
                  *(_QWORD *)v82 = 0;
                }
                break;
              default:
                break;
            }
            v112 = *(_QWORD *)v81;
            *(_QWORD *)(v82 + 5) = *(_QWORD *)(v81 + 5);
            *(_QWORD *)v82 = v112;
            LODWORD(v112) = *(unsigned __int8 *)(v81 + 12);
            *(_BYTE *)(v82 + 12) = v112;
            v76 = v112 > 9;
            v113 = (1 << v112) & 0x33C;
            if (!v76 && v113 != 0)
            {
              v115 = *(unint64_t **)v82;
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 + 1, v115));
            }
          }
          break;
        default:
          turi::flexible_type_fail(0);
          goto LABEL_166;
      }
      return;
    default:
      turi::flexible_type_fail(0);
LABEL_166:
      __break(1u);
      return;
  }
}

void sub_2182BE2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_1>,std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 32);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D9366C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D9366C8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::operator()(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  turi::sgraph *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *i;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  turi::thread_pool *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  turi::thread_pool *instance;
  turi::thread *v28;
  turi::thread_pool *tls_data;
  uint64_t v30;
  turi::thread_pool *v31;
  uint64_t v32;
  double v33;
  turi::thread *v34;
  unint64_t v35;
  uint64_t v36;
  void **v37;
  _QWORD v38[3];
  void *__p;
  _BYTE *v40;
  uint64_t *v41;
  _QWORD *v42[2];
  uint64_t *v43;
  _QWORD *v44[2];
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  __int128 *v48;
  void **v49;
  __int128 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = (turi::sgraph *)a1[4];
  v44[0] = 0;
  v44[1] = 0;
  v42[1] = 0;
  v43 = (uint64_t *)v44;
  v41 = (uint64_t *)v42;
  v42[0] = 0;
  if (v3 != v4)
  {
    v6 = v3;
    do
    {
      v7 = (_QWORD *)a1[1];
      *(_QWORD *)&v50 = *v6;
      *((_QWORD *)&v50 + 1) = *v7;
      std::__tree<std::pair<unsigned long,unsigned long>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(&v43, (unint64_t *)&v50, &v50);
      v8 = (_QWORD *)a1[2];
      *(_QWORD *)&v50 = v6[1];
      *((_QWORD *)&v50 + 1) = *v8;
      std::__tree<std::pair<unsigned long,unsigned long>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(&v43, (unint64_t *)&v50, &v50);
      v6 += 2;
    }
    while (v6 != v4);
  }
  for (i = *(_QWORD **)(a1[3] + 16); i; i = (_QWORD *)*i)
  {
    if (std::__tree<std::pair<unsigned long,unsigned long>>::__count_unique<std::pair<unsigned long,unsigned long>>((uint64_t)&v43, i + 2))
    {
      v10 = std::__tree<std::pair<unsigned long,unsigned long>>::find<std::pair<unsigned long,unsigned long>>((uint64_t)&v43, i + 2);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(&v43, v10);
      operator delete(v10);
    }
    else
    {
      std::__tree<std::pair<unsigned long,unsigned long>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(&v41, i + 2, (_OWORD *)i + 1);
    }
  }
  v11 = v41;
  if (v41 != (uint64_t *)v42)
  {
    do
    {
      v12 = (_QWORD *)a1[3];
      v13 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v12, v11 + 4);
      std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::erase(v12, v13);
      v14 = (uint64_t *)v11[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v11[2];
          v16 = *v15 == (_QWORD)v11;
          v11 = v15;
        }
        while (!v16);
      }
      v11 = v15;
    }
    while (v15 != (uint64_t *)v42);
  }
  v17 = v43;
  if (v43 == (uint64_t *)v44)
  {
    v22 = (uint64_t *)v44;
  }
  else
  {
    do
    {
      v18 = a1[3];
      *(_QWORD *)&v50 = v17 + 4;
      v19 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v18, v17 + 4, (uint64_t)&std::piecewise_construct, (_OWORD **)&v50);
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*>((uint64_t)(v19 + 4), 0, 0, 0);
      v20 = (uint64_t *)v17[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (uint64_t *)v17[2];
          v16 = *v21 == (_QWORD)v17;
          v17 = v21;
        }
        while (!v16);
      }
      v17 = v21;
    }
    while (v21 != (uint64_t *)v44);
    v22 = v43;
  }
  v23 = (turi::thread_pool *)std::vector<std::pair<unsigned long,unsigned long>>::vector<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,0>(&__p, v22, v44);
  v25 = __p;
  v24 = v40;
  v26 = a1[3];
  v38[0] = &__p;
  v38[1] = v26;
  v38[2] = v5;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v23);
  v28 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v28);
  v30 = (v24 - v25) >> 4;
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v28 <= 1)
  {
    if (v24 != v25)
    {
      v36 = 0;
      do
      {
        v45 = *(_OWORD *)((char *)__p + v36);
        turi::sgraph::get_vertex_ids(v5, v45, *((unint64_t *)&v45 + 1), (uint64_t *)&v50);
        v48 = &v45;
        v37 = (void **)std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v26, &v45, (uint64_t)&std::piecewise_construct, &v48);
        std::vector<turi::flexible_type>::__vdeallocate(v37 + 4);
        *((_OWORD *)v37 + 2) = v50;
        v37[6] = v51;
        v51 = 0;
        v49 = (void **)&v50;
        v50 = 0uLL;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v49);
        v36 += 16;
        --v30;
      }
      while (v30);
    }
  }
  else
  {
    v31 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v50, v31);
    v32 = 0;
    v33 = (double)(unint64_t)v30 / (double)(unint64_t)v28;
    do
    {
      v34 = (turi::thread *)(v32 + 1);
      v35 = (unint64_t)(v33 * (double)(unint64_t)(v32 + 1) + 0.0);
      if ((turi::thread *)v32 == (turi::thread *)((char *)v28 - 1))
        v35 = v30;
      v46 = (unint64_t)(v33 * (double)(unint64_t)v32 + 0.0);
      v47 = v35;
      *(_QWORD *)&v45 = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1})::stored_vtable
                      + 1;
      *((_QWORD *)&v45 + 1) = v38;
      turi::parallel_task_queue::launch((uint64_t)&v50, (uint64_t)&v45, v32);
      boost::function0<void>::~function0((uint64_t *)&v45);
      v32 = (uint64_t)v34;
    }
    while (v34 != v28);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&v50);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v50);
  }
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v41, v42[0]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v43, v44[0]);
  if (v3)
    operator delete(v3);
}

void sub_2182BE99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a29);
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a15, a16);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a18, a19);
  if (v29)
    operator delete(v29);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target_type()
{
}

uint64_t *std::__tree<std::pair<unsigned long,unsigned long>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<std::tuple<unsigned long,unsigned long>,std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>,std::less<std::tuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long,unsigned long>,unsigned long>>>::__find_equal<std::tuple<unsigned long,unsigned long>>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t std::__tree<std::pair<unsigned long,unsigned long>>::__count_unique<std::pair<unsigned long,unsigned long>>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = *a2;
    v4 = a2[1];
    result = 1;
    while (1)
    {
      v6 = v2[4];
      if (v3 >= v6)
      {
        if (v6 < v3)
          goto LABEL_7;
        v7 = v2[5];
        if (v4 >= v7)
          break;
      }
LABEL_8:
      v2 = (_QWORD *)*v2;
      if (!v2)
        return 0;
    }
    if (v7 >= v4)
      return result;
LABEL_7:
    ++v2;
    goto LABEL_8;
  }
  return 0;
}

_QWORD *std::__tree<std::pair<unsigned long,unsigned long>>::find<std::pair<unsigned long,unsigned long>>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = *a2;
  v5 = a2[1];
  v7 = v2;
  do
  {
    v8 = v3[4];
    if (v8 >= v6)
    {
      if (v6 >= v8)
      {
        if (v3[5] < v5)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v9 = v7[4];
  if (v6 < v9 || v9 >= v6 && v5 < v7[5])
    return v2;
  return v7;
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 4;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1];
  v4 = v3 ^ *a2;
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v3 ^ *a2;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v9 == v4)
      {
        if (result[2] == *a2 && result[3] == v3)
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v2)
            v9 %= *(_QWORD *)&v2;
        }
        else
        {
          v9 &= *(_QWORD *)&v2 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = a2[1];
  v8 = v7 ^ *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v7 ^ *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == v7)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_42:
    *v23 = i;
    goto LABEL_43;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2182BEF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4;
  if (v14 < a4)
  {
    v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type*>((uint64_t)&v19, a2, v15, (uint64_t)v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type*>((uint64_t)&v20, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 16;
      std::allocator<turi::flexible_type>::destroy[abi:ne180100](v8, v18);
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_2182BF0B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2182BF0C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<unsigned long,unsigned long>>::vector<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

_QWORD *std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    return (_QWORD *)std::vector<std::pair<unsigned long,unsigned long>>::__construct_at_end<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>>(v6, a2, a3);
  }
  return result;
}

void sub_2182BF19C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<unsigned long,unsigned long>>::__construct_at_end<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _OWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = *(_OWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *v3 = *((_OWORD *)a2 + 2);
      v4 = (_QWORD *)a2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)a2[2];
          v6 = *v5 == (_QWORD)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

void turi::sgraph::get_vertex_ids(turi::sgraph *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p;
  unint64_t *v16;
  char v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v20 = a2;
  v19 = *((_QWORD *)this + 3);
  if (v19 <= a2)
  {
    __p = &v20;
    v16 = &v19;
    turi::sgraph::vertex_partition(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  v20 = a3;
  v19 = *((_QWORD *)this + 4);
  if (v19 <= a3)
  {
    __p = &v20;
    v16 = &v19;
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 8) + 24 * a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME);
  turi::sframe::select_column(v6 + 296 * a2, (unsigned __int8 **)&__p, &v18);
  if (v17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 + 248) && (v7 = *(uint64_t **)(v18 + 80), (v8 = *(_QWORD *)(v18 + 88) - (_QWORD)v7) != 0))
  {
    v9 = 0;
    v10 = v8 >> 3;
    if (v10 <= 1)
      v10 = 1;
    do
    {
      v11 = *v7++;
      v9 += v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  std::vector<turi::flexible_type>::reserve(a4, v9);
  turi::copy<turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,void>(v18, a4, *a4, 0xFFFFFFFFFFFFFFFFLL);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2182BF378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::sgraph::vertex_partition(unsigned long,unsigned long)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 343, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182BF548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZZNKS_6sgraph9get_edgesERKNSt3__16vectorINS_13flexible_typ"
                                        "eENS2_9allocatorIS4_EEEES9_RKNS2_3mapINS2_12basic_stringIcNS2_11char_traitsIcEEN"
                                        "S5_IcEEEES4_NS2_4lessISF_EENS5_INS2_4pairIKSF_S4_EEEEEEmmENK3$_2clENS3_INSI_ImmE"
                                        "ENS5_ISQ_EEEEEUlmE_EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZZNKS_6sgraph9get_edgesERKNSt3__16vectorINS_13flexible_typeENS2_9allocatorIS4_EEEES9_RKNS2_3mapINS2_12basic_stringIcNS2_11char_traitsIcEENS5_IcEEEES4_NS2_4lessISF_EENS5_INS2_4pairIKSF_S4_EEEEEEmmENK3$_2clENS3_INSI_ImmEENS5_ISQ_EEEEEUlmE_EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_2::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  turi::sgraph *v5;
  uint64_t v6;
  void **v7;
  __int128 v8;
  void *v9;
  __int128 v10;
  __int128 *v11;
  void **v12;

  v1 = a1[1];
  if (v1 < a1[2])
  {
    v3 = 16 * v1;
    do
    {
      v4 = *a1;
      v5 = *(turi::sgraph **)(*a1 + 16);
      v10 = *(_OWORD *)(**(_QWORD **)*a1 + v3);
      turi::sgraph::get_vertex_ids(v5, v10, *((unint64_t *)&v10 + 1), (uint64_t *)&v8);
      v6 = *(_QWORD *)(v4 + 8);
      v11 = &v10;
      v7 = (void **)std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v6, &v10, (uint64_t)&std::piecewise_construct, &v11);
      std::vector<turi::flexible_type>::__vdeallocate(v7 + 4);
      *((_OWORD *)v7 + 2) = v8;
      v7[6] = v9;
      v9 = 0;
      v8 = 0uLL;
      v12 = (void **)&v8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v12);
      ++v1;
      v3 += 16;
    }
    while (v1 < a1[2]);
  }
}

void sub_2182BF74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24D936778;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24D936778;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  const turi::sframe *v12;
  unint64_t i;
  char v14;
  _BYTE *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *p_p;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD **v25;
  _QWORD *v26[2];
  void *v27[3];
  _BYTE v28[24];
  _BYTE *v29;
  std::string __p;
  std::string *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[296];
  unint64_t v35;
  uint64_t v36;
  size_t v37;
  _QWORD v38[21];
  uint64_t v39;
  BOOL v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 16);
  v35 = *a2;
  v36 = *v7;
  v8 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v6, &v35);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *(_QWORD **)(a1 + 8);
  v10 = *(uint64_t **)(a1 + 24);
  v35 = v4;
  v36 = *v10;
  v11 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v9, &v35);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v12 = (const turi::sframe *)turi::sgraph::edge_partition((turi::sgraph *)v5, v3, v4, **(_QWORD **)(a1 + 16), **(unint64_t ***)(a1 + 24));
  turi::sframe::sframe((turi::sframe *)&v35, v12);
  std::vector<turi::flex_type_enum>::vector(v27, v37);
  if (v37)
  {
    for (i = 0; i < v37; ++i)
    {
      v14 = turi::sframe::column_type((turi::sframe *)&v35, i);
      *((_BYTE *)v27[0] + i) = v14;
    }
  }
  v15 = v27[0];
  *((_BYTE *)v27[0] + **(_QWORD **)(a1 + 40)) = *(_BYTE *)(v5 + 56);
  v15[**(_QWORD **)(a1 + 48)] = *(_BYTE *)(v5 + 56);
  turi::sframe::sframe((turi::sframe *)v34);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  assert_msg(v40, "Invalid SFrame");
  if (v41)
  {
    v16 = &v39;
    v17 = 15;
LABEL_10:
    v18 = (*(uint64_t (**)(void))(*(_QWORD *)*v16 + 8 * v17))();
    goto LABEL_11;
  }
  if (v37)
  {
    v16 = (uint64_t *)v38[18];
    v17 = 3;
    goto LABEL_10;
  }
  v18 = 0;
LABEL_11:
  turi::sframe::open_for_write((uint64_t)v34, v38, v27, &__p, v18, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v32, *(_QWORD *)(a1 + 56));
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v28, *(_QWORD *)(a1 + 64));
  boost::bind<std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>((uint64_t)v28, (uint64_t)(v8 + 4), (uint64_t)(v11 + 4), &__p);
  v26[0] = 0;
  v26[1] = 0;
  v25 = v26;
  turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>((turi::sframe *)&v35, (std::locale::__imp *)v34, (std::locale::__imp *)v32, (std::locale::__imp *)&__p, (uint64_t)&v25, -1);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v25, v26[0]);
  p_p = v31;
  if (v31 == &__p)
  {
    v20 = 4;
    p_p = &__p;
  }
  else
  {
    if (!v31)
      goto LABEL_18;
    v20 = 5;
  }
  (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v20))();
LABEL_18:
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_23;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_23:
  v23 = v33;
  if (v33 == v32)
  {
    v24 = 4;
    v23 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_28;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_28:
  turi::sframe::close((turi::sframe *)v34);
  turi::sframe::operator=(**(_QWORD **)(a1 + 72) + 296 * (v4 + *(_QWORD *)(v5 + 24) * v3), (uint64_t)v34);
  turi::sframe::~sframe((turi::sframe *)v34);
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  turi::sframe::~sframe((turi::sframe *)&v35);
}

void sub_2182BFB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a10, (_QWORD *)a11);
  v69 = (_QWORD *)a23;
  if (a23 == v67)
  {
    v70 = 4;
    v69 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_6:
  v71 = (_QWORD *)a19;
  if ((char *)a19 == &a16)
  {
    v72 = 4;
    v71 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_11:
  v73 = (_QWORD *)a29;
  if ((char *)a29 == &a26)
  {
    v74 = 4;
    v73 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_16;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_16:
  turi::sframe::~sframe((turi::sframe *)&a30);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::sframe::~sframe((turi::sframe *)&a67);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_3>,void ()(std::pair<unsigned long,unsigned long>)>::target_type()
{
}

unint64_t turi::sgraph::edge_partition(turi::sgraph *this, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t *a5)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *((_QWORD *)this + 3);
  v10 = v5;
  v11 = a2;
  if (v5 <= a2)
  {
    v8 = &v11;
    v9 = &v10;
    turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  v10 = v5;
  v11 = a3;
  if (v5 <= a3)
  {
    v8 = &v11;
    v9 = &v10;
    turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  v6 = *((_QWORD *)this + 4);
  v10 = v6;
  v11 = a4;
  if (v6 <= a4)
  {
    v8 = &v11;
    v9 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#1}::operator()();
  }
  v10 = v6;
  v11 = (unint64_t)a5;
  if (v6 <= (unint64_t)a5)
  {
    v8 = &v11;
    v9 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)const::{lambda(void)#2}::operator()();
  }
  v8 = (_QWORD *)a4;
  v9 = a5;
  return *(_QWORD *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)this + 88, (unint64_t *)&v8)+ 296 * (a3 + *((_QWORD *)this + 3) * a2);
}

{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *((_QWORD *)this + 3);
  v10 = v5;
  v11 = a2;
  if (v5 <= a2)
  {
    v8 = &v11;
    v9 = &v10;
    turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v10 = v5;
  v11 = a3;
  if (v5 <= a3)
  {
    v8 = &v11;
    v9 = &v10;
    turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  v6 = *((_QWORD *)this + 4);
  v10 = v6;
  v11 = a4;
  if (v6 <= a4)
  {
    v8 = &v11;
    v9 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v10 = v6;
  v11 = (unint64_t)a5;
  if (v6 <= (unint64_t)a5)
  {
    v8 = &v11;
    v9 = &v10;
    turi::sgraph::edge_group(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  v8 = (_QWORD *)a4;
  v9 = a5;
  return *(_QWORD *)std::map<std::tuple<unsigned long,unsigned long>,unsigned long>::at((uint64_t)this + 88, (unint64_t *)&v8)+ 296 * (a3 + *((_QWORD *)this + 3) * a2);
}

turi::sframe_reader *turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe *a1, std::locale::__imp *a2, std::locale::__imp *a3, std::locale::__imp *a4, uint64_t a5, uint64_t a6)
{
  int *v11;
  file_logger *v12;
  file_logger *started;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  BOOL v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  turi::sframe_reader *result;
  _QWORD *exception;
  std::locale v27[6];
  void *__p;
  _BYTE *v29;
  uint64_t v30;
  turi::sframe_reader *v31;
  uint64_t v32;

  v32 = a6;
  v11 = (int *)global_logger();
  if (v11[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v11))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "copy_transform_if", 216, 1);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Function entry", 14);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15)
    {
      if (*((_BYTE *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
        v16 = std::locale::use_facet(v27, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(v27);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (*((_BYTE *)a1 + 288))
    v17 = *((_BYTE *)a1 + 289) == 0;
  else
    v17 = 0;
  if (!v17)
    turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator()();
  if (!*((_BYTE *)a2 + 288) || !*((_BYTE *)a2 + 289))
    turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator()();
  v18 = (*(uint64_t (**)(std::locale::__imp *))(*(_QWORD *)a2 + 24))(a2);
  turi::sframe::get_reader(a1, v18, &v31);
  __p = 0;
  v29 = 0;
  v30 = 0;
  if (*(_QWORD *)(a5 + 16))
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::vector<unsigned long>>>(0, *(char **)a5, (char *)(a5 + 8), (uint64_t)&__p, (char **)v27);
    v19 = __p;
    v20 = v29;
  }
  else
  {
    v21 = (*(uint64_t (**)(turi::sframe_reader *))(*(_QWORD *)v31 + 16))(v31);
    std::vector<unsigned long>::resize((uint64_t)&__p, v21);
    v22 = __p;
    v19 = v29;
    if (v29 == __p)
    {
      v20 = v29;
    }
    else
    {
      v23 = 0;
      v24 = (v29 - (_BYTE *)__p) >> 3;
      if (v24 <= 1)
        v24 = 1;
      do
      {
        v22[v23] = v23;
        ++v23;
      }
      while (v24 != v23);
      v20 = v19;
      v19 = v22;
    }
  }
  v27[0].__locale_ = (std::locale::__imp *)&v32;
  v27[1].__locale_ = (std::locale::__imp *)&__p;
  v27[2].__locale_ = (std::locale::__imp *)&v31;
  v27[3].__locale_ = a2;
  v27[4].__locale_ = a3;
  v27[5].__locale_ = a4;
  turi::parallel_for<void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(0, (v20 - v19) >> 3, (uint64_t)v27);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  result = v31;
  v31 = 0;
  if (result)
    return (turi::sframe_reader *)(*(uint64_t (**)(turi::sframe_reader *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2182C003C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *boost::bind<std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v9, a1);
  result = v10;
  if (!v10)
  {
    a4[3] = 0;
    a4[4] = a2;
    a4[5] = a3;
    return result;
  }
  if (v10 == v9)
  {
    a4[3] = a4;
    (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, a4);
  }
  else
  {
    a4[3] = (*(uint64_t (**)(void))(*v10 + 16))();
  }
  result = v10;
  a4[4] = a2;
  a4[5] = a3;
  if (result == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!result)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_2182C0170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition1", 10);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 399, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182C0340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)const::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition2", 10);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 400, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182C0554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 217, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182C06D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 218, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182C0854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::parallel_for<void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1}>(turi::sframe &)::stored_vtable
             + 1;
      v16[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2182C0A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  turi::random::generator *source;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void ***v18;
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;
  _QWORD v22[6];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void **v29;
  void **v30[3];
  void ***v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (**(_QWORD **)a1 != -1)
  {
    source = turi::random::get_source((turi::random *)a1);
    turi::random::generator::seed(source, **(_QWORD **)a1 + a2);
  }
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8 * a2);
  if (v5 < (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 16))(**(_QWORD **)(a1 + 16)))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 16) + 32))(&v24, **(_QWORD **)(a1 + 16), v5);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 16) + 40))(&v21, **(_QWORD **)(a1 + 16), v5);
    (*(void (**)(void ***__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 32))(v30, *(_QWORD *)(a1 + 24), v5);
    while (v24 != v21 || v25[3] != v22[3] || v26 != v22[4])
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = turi::sframe_iterator::operator*(&v24);
      v8 = *(_QWORD *)(v6 + 24);
      if (!v8)
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v7))
      {
        v9 = *(_QWORD **)(a1 + 40);
        v10 = turi::sframe_iterator::operator*(&v24);
        boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>::operator()<std::vector<turi::flexible_type> const&>(v9, (uint64_t)v10);
        if (!v33)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v33 + 48))(v33, v20);
        v29 = (void **)v20;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v29);
      }
      v11 = v25[0];
      v12 = v25[1];
      while (v11 != v12)
      {
        turi::sarray_iterator<turi::flexible_type>::operator++(v11);
        v11 += 48;
      }
      if (v26 + 1 < v27)
        v13 = v26 + 1;
      else
        v13 = v27;
      v26 = v13;
    }
    v14 = v35;
    if (v35 == v34)
    {
      v15 = 4;
      v14 = v34;
    }
    else
    {
      if (!v35)
        goto LABEL_24;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_24:
    v16 = v33;
    if (v33 == v32)
    {
      v17 = 4;
      v16 = v32;
    }
    else
    {
      if (!v33)
        goto LABEL_29;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_29:
    v18 = v31;
    if (v31 == v30)
    {
      v19 = 4;
      v18 = v30;
    }
    else
    {
      if (!v31)
      {
LABEL_34:
        v30[0] = (void **)&v23;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v30);
        v30[0] = (void **)v22;
        std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v30);
        v30[0] = (void **)&v28;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v30);
        v30[0] = (void **)v25;
        std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v30);
        return;
      }
      v19 = 5;
    }
    ((void (*)(void))(*v18)[v19])();
    goto LABEL_34;
  }
}

void sub_2182C0D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)va);
  turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)va1);
  _Unwind_Resume(a1);
}

uint64_t boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>::operator()<std::vector<turi::flexible_type> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1[3];
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 48))(v3, a2, a1[4], a1[5]);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186EF2C6 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186EF2C6 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sframe & const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  unint64_t i;

  for (i = a1[1]; i < a1[2]; ++i)
    turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>(turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,std::set<unsigned long>,unsigned long)::{lambda(unsigned long)#1}::operator()(*a1, i);
}

_QWORD *std::vector<std::unordered_set<turi::flexible_type>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 40 * a2;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_DWORD *)(v4 + 32) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2182C0F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unordered_set<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::unordered_set<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)(v2 + 4));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = a2[1];
  v8 = v7 ^ *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v7 ^ *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == v7)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x48uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + 1) = **a4;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v12 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_2182C12CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::unordered_set<std::pair<turi::flexible_type,turi::flexible_type>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__assign_unique<std::pair<turi::flexible_type,turi::flexible_type> const*>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)(v8 + 2), v4);
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique(a1, (uint64_t)v8);
        v4 += 4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::pair<turi::flexible_type,turi::flexible_type> const&>((uint64_t)a1, (unsigned __int8 *)v4, v4);
    v4 += 4;
  }
}

void sub_2182C13F4(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_2182C140C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;

  v2 = (_QWORD *)a2;
  v4 = a2 + 16;
  v5 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()((uint64_t)(a1 + 3), (unsigned __int8 *)(a2 + 16));
  v2[1] = v5;
  v6 = std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

uint64_t std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2 + 16);
  v5 = 5
     * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v3) | ((0x87C37B91114253D5 * v3) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
  return (5
        * (v5
         + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v4) | ((unint64_t)(0x4CF5AD432745937FLL * v4) >> 33))) ^ 0x73A3916AE45D01E5, 31))+ 944331445) ^ v5;
}

unsigned __int8 *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(unsigned __int8 **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == a2)
        {
          if ((std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, a3) & 1) != 0)return i;
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4)
              v12 %= v4;
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

_QWORD *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

uint64_t std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  double v7;
  double v8;
  char v9;
  size_t v10;
  unsigned int v11;
  double v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  double v49;
  double v50;
  uint64_t v51;
  unsigned int v52;
  double *v53;
  double *v54;
  unint64_t v55;
  double *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  _BOOL8 v60;
  double v62;
  double v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  unsigned int v71;
  double *v72;
  double *v73;
  unint64_t v74;
  double *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  double v79;
  double v80;
  unsigned int v81;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  double v115;
  double v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  size_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  char v125;
  char v126;
  uint64_t v127;
  void *__p;
  uint64_t *v129;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(a1[12])
      {
        case 0u:
          if (*(_QWORD *)a1 == *(_QWORD *)a2)
            goto LABEL_94;
          return 0;
        case 1u:
          v34 = *(double *)a1;
          v51 = *(_QWORD *)a2;
          goto LABEL_88;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(_QWORD *)a2 == (uint64_t)(*(_QWORD *)a1 << 8) >> 8 && !*((_DWORD *)a1 + 2))
            goto LABEL_94;
          return 0;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(a1[12])
      {
        case 0u:
          v34 = *(double *)a2;
          v51 = *(_QWORD *)a1;
LABEL_88:
          v41 = (double)v51;
          goto LABEL_89;
        case 1u:
          v34 = *(double *)a1;
          v41 = *(double *)a2;
          goto LABEL_89;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          v62 = vabdd_f64((double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8), *(double *)a2);
          goto LABEL_93;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v5 = a1[12];
      v6 = v5 - 3 >= 7 && v5 >= 2;
      if (!v6)
        return 0;
      if (v5 != 2)
        turi::apply_binary_op_ff();
      v7 = *(double *)a2;
      v8 = *(double *)a1;
      v9 = *(_BYTE *)(*(_QWORD *)a1 + 31);
      v10 = v9 < 0 ? *(_QWORD *)(*(_QWORD *)&v8 + 16) : *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
      v112 = *(char *)(*(_QWORD *)&v7 + 31) < 0
           ? *(_QWORD *)(*(_QWORD *)&v7 + 16)
           : *(unsigned __int8 *)(*(_QWORD *)&v7 + 31);
      if (v10 != v112)
        return 0;
      v113 = (unsigned __int8 *)(*(_QWORD *)&v8 + 8);
      if (v9 < 0)
        v113 = *(unsigned __int8 **)v113;
      v114 = (unsigned __int8 *)(*(_QWORD *)&v7 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v7 + 31) & 0x80) != 0)
        v114 = *(unsigned __int8 **)v114;
      if (v9 < 0)
      {
        if (memcmp(v113, v114, v10))
          return 0;
      }
      else
      {
        if (!v10)
          goto LABEL_94;
        do
        {
          if (*v113 != *v114)
            return 0;
          ++v113;
          ++v114;
          --v10;
        }
        while (v10);
      }
      goto LABEL_94;
    case 3:
      v52 = a1[12];
      if (v52 > 9)
        turi::apply_binary_op_ff();
      if (v52 != 3)
        return 0;
      v53 = *(double **)(*(_QWORD *)a1 + 8);
      v54 = *(double **)(*(_QWORD *)a1 + 16);
      v55 = v54 - v53;
      v56 = *(double **)(*(_QWORD *)a2 + 8);
      if (v55 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v56) >> 3)
        return 0;
      if (v54 == v53)
        goto LABEL_94;
      if (v55 <= 1)
        v55 = 1;
      while (*v53 == *v56)
      {
        ++v56;
        ++v53;
        if (!--v55)
          goto LABEL_94;
      }
      return 0;
    case 4:
      v4 = a1[12];
      if (v4 > 9)
        turi::apply_binary_op_ff();
      if (v4 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v126, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)a2 + 8)) & 1) != 0)
      {
        goto LABEL_94;
      }
      return 0;
    case 5:
      v58 = a1[12];
      if (v58 > 9)
        turi::apply_binary_op_ff();
      if (v58 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v126, (uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t **)(*(_QWORD *)a2 + 8)))
      {
        goto LABEL_94;
      }
      return 0;
    case 6:
      switch(a1[12])
      {
        case 0u:
          if (*(_QWORD *)a1 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*(_DWORD *)(a2 + 8))
            goto LABEL_94;
          return 0;
        case 1u:
          v62 = vabdd_f64(*(double *)a1, (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8));
LABEL_93:
          if (v62 < 0.0000005)
            goto LABEL_94;
          return 0;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(_QWORD *)a2 ^ *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8))
            goto LABEL_94;
          return 0;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v57 = a1[12];
      if (v57 < 7 || v57 - 8 < 2)
        return 0;
      if (v57 != 7)
        turi::apply_binary_op_ff();
      goto LABEL_94;
    case 8:
      v59 = a1[12];
      if (v59 < 8)
        return 0;
      if (v59 != 8)
      {
        if (v59 != 9)
          turi::apply_binary_op_ff();
        return 0;
      }
      if (!turi::image_type::operator==(*(_QWORD *)a1 + 8, *(_QWORD *)a2 + 8))
        return 0;
      goto LABEL_94;
    case 9:
      v11 = a1[12];
      if (v11 < 9)
        return 0;
      if (v11 != 9)
        turi::apply_binary_op_ff();
      v12 = *(double *)a2;
      v13 = *(_QWORD **)a1;
      if (*(_QWORD *)a2 == *(_QWORD *)a1)
        goto LABEL_94;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v13 + 1), *(_QWORD *)&v12 + 8))
        return 0;
      v15 = (char *)v13[3];
      v14 = (char *)v13[4];
      v16 = v14 - v15;
      if (v14 == v15)
        goto LABEL_94;
      if (!v13[1])
        goto LABEL_94;
      v17 = 1;
      do
      {
        v18 = *(_QWORD *)v15;
        v15 += 8;
        v17 *= v18;
      }
      while (v15 != v14);
      if (!v17)
        goto LABEL_94;
      v127 = 0;
      std::vector<unsigned long>::vector(&__p, v16 >> 3, &v127);
      v19 = (uint64_t *)__p;
      v20 = v129;
      v21 = **(_QWORD **)(*(_QWORD *)&v12 + 8);
      v22 = (char *)v129 - (_BYTE *)__p;
      v23 = ((char *)v129 - (_BYTE *)__p) >> 3;
      v24 = v23 - 1;
      if (v23 <= 1)
        v25 = 1;
      else
        v25 = ((char *)v129 - (_BYTE *)__p) >> 3;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (v20 == v19)
    {
      v33 = 0;
      v34 = *(double *)(*(_QWORD *)v13[1] + 8 * v13[9]);
    }
    else
    {
      v26 = 0;
      v27 = (uint64_t *)v13[6];
      v28 = v19;
      v29 = v25;
      do
      {
        v31 = *v28++;
        v30 = v31;
        v32 = *v27++;
        v26 += v32 * v30;
        --v29;
      }
      while (v29);
      v33 = 0;
      v34 = *(double *)(*(_QWORD *)v13[1] + 8 * (v13[9] + v26));
      v35 = *(uint64_t **)(*(_QWORD *)&v12 + 48);
      v36 = v19;
      v37 = v25;
      do
      {
        v39 = *v36++;
        v38 = v39;
        v40 = *v35++;
        v33 += v40 * v38;
        --v37;
      }
      while (v37);
    }
    v41 = *(double *)(v21 + 8 * (*(_QWORD *)(*(_QWORD *)&v12 + 72) + v33));
    if (v34 != v41)
      break;
    v42 = v23;
    v43 = v23 - 1;
    if (v22 >= 1)
    {
      v44 = v13[3];
      v45 = v19[v24] + 1;
      v19[v24] = v45;
      v46 = (v22 & 0xFFFFFFFFFFFFFFF8) - 16;
      v43 = v23 - 1;
      if (v45 >= *(_QWORD *)(v44 + 8 * v24))
      {
        while (1)
        {
          *(uint64_t *)((char *)v19 + v46 + 8) = 0;
          if (v43 <= 0)
            break;
          --v43;
          v47 = *(uint64_t *)((char *)v19 + v46) + 1;
          *(uint64_t *)((char *)v19 + v46) = v47;
          v48 = *(_QWORD *)(v44 + v46);
          v46 -= 8;
          if (v47 < v48)
          {
            v42 = 1;
            goto LABEL_44;
          }
        }
        v129 = v19;
        operator delete(v19);
        goto LABEL_94;
      }
      v42 = 1;
      v43 = v23 - 1;
    }
LABEL_44:
    ;
  }
  while ((v43 & 0x8000000000000000) == 0 && v42);
  if (v19)
  {
    v129 = v19;
    v49 = v34;
    v50 = v41;
    operator delete(v19);
    if (v49 != v50)
      return 0;
  }
  else
  {
LABEL_89:
    if (v34 != v41)
      return 0;
  }
LABEL_94:
  switch(*(_BYTE *)(a2 + 28))
  {
    case 0:
      v60 = 0;
      switch(a1[28])
      {
        case 0u:
          return *((_QWORD *)a1 + 2) == *(_QWORD *)(a2 + 16);
        case 1u:
          v64 = *((double *)a1 + 2);
          v65 = *(_QWORD *)(a2 + 16);
          return v64 == (double)v65;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v60;
        case 6u:
          return *(_QWORD *)(a2 + 16) == (uint64_t)(*((_QWORD *)a1 + 2) << 8) >> 8 && *((_DWORD *)a1 + 6) == 0;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      v60 = 0;
      switch(a1[28])
      {
        case 0u:
          v64 = *(double *)(a2 + 16);
          v65 = *((_QWORD *)a1 + 2);
          return v64 == (double)v65;
        case 1u:
          return *((double *)a1 + 2) == *(double *)(a2 + 16);
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v60;
        case 6u:
          v115 = *(double *)(a2 + 16);
          v116 = (double)*((int *)a1 + 6) / 1000000.0 + (double)((uint64_t)(*((_QWORD *)a1 + 2) << 8) >> 8);
          return vabdd_f64(v116, v115) < 0.0000005;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v66 = a1[28];
      if (v66 - 3 < 7 || v66 < 2)
        return 0;
      if (v66 != 2)
        turi::apply_binary_op_ff();
      v68 = *(_QWORD *)(a2 + 16);
      v69 = *((_QWORD *)a1 + 2);
      v70 = *(char *)(v69 + 31) < 0 ? *(_QWORD *)(v69 + 16) : *(unsigned __int8 *)(v69 + 31);
      v117 = *(char *)(v68 + 31) < 0 ? *(_QWORD *)(v68 + 16) : *(unsigned __int8 *)(v68 + 31);
      if (v70 != v117)
        return 0;
      v118 = (_QWORD *)(v69 + 8);
      if ((*(_BYTE *)(v69 + 31) & 0x80) != 0)
        v118 = (_QWORD *)*v118;
      v119 = (_QWORD *)(v68 + 8);
      if ((*(_BYTE *)(v68 + 31) & 0x80) != 0)
        v119 = (_QWORD *)*v119;
      if ((*(_BYTE *)(v69 + 31) & 0x80) != 0)
      {
        return memcmp(v118, v119, v70) == 0;
      }
      else if (v70)
      {
        v120 = v70 - 1;
        do
        {
          v122 = *(unsigned __int8 *)v118;
          v118 = (_QWORD *)((char *)v118 + 1);
          v121 = v122;
          v124 = *(unsigned __int8 *)v119;
          v119 = (_QWORD *)((char *)v119 + 1);
          v123 = v124;
          v6 = v120-- != 0;
          v125 = v6;
          v60 = v121 == v123;
        }
        while (v121 == v123 && (v125 & 1) != 0);
      }
      else
      {
        return 1;
      }
      return v60;
    case 3:
      v71 = a1[28];
      if (v71 > 9)
        turi::apply_binary_op_ff();
      if (v71 != 3)
        return 0;
      v72 = *(double **)(*((_QWORD *)a1 + 2) + 8);
      v73 = *(double **)(*((_QWORD *)a1 + 2) + 16);
      v74 = v73 - v72;
      v75 = *(double **)(*(_QWORD *)(a2 + 16) + 8);
      if (v74 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) - (_QWORD)v75) >> 3)
        return 0;
      if (v73 == v72)
        return 1;
      if (v74 <= 1)
        v76 = 1;
      else
        v76 = v73 - v72;
      if (*v72 != *v75)
        return 0;
      v77 = 1;
      do
      {
        v78 = v77;
        if (v76 == v77)
          break;
        v79 = v72[v77];
        v80 = v75[v77++];
      }
      while (v79 == v80);
      return v78 >= v74;
    case 4:
      v81 = a1[28];
      if (v81 > 9)
        turi::apply_binary_op_ff();
      if (v81 != 4)
        return 0;
      return turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__p, (uint64_t *)(*((_QWORD *)a1 + 2) + 8), (_QWORD *)(*(_QWORD *)(a2 + 16) + 8));
    case 5:
      v109 = a1[28];
      if (v109 > 9)
        turi::apply_binary_op_ff();
      if (v109 != 5)
        return 0;
      return turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__p, (uint64_t **)(*((_QWORD *)a1 + 2) + 8), (uint64_t **)(*(_QWORD *)(a2 + 16) + 8));
    case 6:
      v60 = 0;
      switch(a1[28])
      {
        case 0u:
          return *((_QWORD *)a1 + 2) == (uint64_t)(*(_QWORD *)(a2 + 16) << 8) >> 8 && *(_DWORD *)(a2 + 24) == 0;
        case 1u:
          v116 = *((double *)a1 + 2);
          v115 = (double)*(int *)(a2 + 24) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a2 + 16) << 8) >> 8);
          return vabdd_f64(v116, v115) < 0.0000005;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v60;
        case 6u:
          return ((*(_QWORD *)(a2 + 16) ^ *((_QWORD *)a1 + 2)) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)a1 + 6) == *(_DWORD *)(a2 + 24);
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v83 = a1[28];
      if (v83 >= 0xA)
        turi::apply_binary_op_ff();
      return v83 == 7;
    case 8:
      v110 = a1[28];
      if (v110 < 8 || v110 == 9)
        return 0;
      if (v110 != 8)
        turi::apply_binary_op_ff();
      return turi::image_type::operator==(*((_QWORD *)a1 + 2) + 8, *(_QWORD *)(a2 + 16) + 8);
    case 9:
      v84 = a1[28];
      if (v84 < 9)
        return 0;
      if (v84 != 9)
        turi::apply_binary_op_ff();
      v85 = *(_QWORD *)(a2 + 16);
      v86 = (_QWORD *)*((_QWORD *)a1 + 2);
      if ((_QWORD *)v85 == v86)
        return 1;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v86 + 1), v85 + 8))
        return 0;
      v88 = (char *)v86[3];
      v87 = (char *)v86[4];
      v89 = v87 - v88;
      if (v87 == v88)
        return 1;
      if (!v86[1])
        return 1;
      v90 = 1;
      do
      {
        v91 = *(_QWORD *)v88;
        v88 += 8;
        v90 *= v91;
      }
      while (v88 != v87);
      if (!v90)
        return 1;
      v127 = 0;
      std::vector<unsigned long>::vector(&__p, v89 >> 3, &v127);
      break;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    v92 = (uint64_t *)__p;
    if (v129 == __p)
    {
      v101 = 0;
      v102 = *(double *)(*(_QWORD *)v86[1] + 8 * v86[9]);
    }
    else
    {
      v93 = 0;
      v94 = ((char *)v129 - (_BYTE *)__p) >> 3;
      v95 = (uint64_t *)v86[6];
      if (v94 <= 1)
        v94 = 1;
      v96 = (uint64_t *)__p;
      v97 = v94;
      do
      {
        v99 = *v96++;
        v98 = v99;
        v100 = *v95++;
        v93 += v100 * v98;
        --v97;
      }
      while (v97);
      v101 = 0;
      v102 = *(double *)(*(_QWORD *)v86[1] + 8 * (v86[9] + v93));
      v103 = *(uint64_t **)(v85 + 48);
      v104 = (uint64_t *)__p;
      do
      {
        v106 = *v104++;
        v105 = v106;
        v107 = *v103++;
        v101 += v107 * v105;
        --v94;
      }
      while (v94);
    }
    v108 = *(double *)(**(_QWORD **)(v85 + 8) + 8 * (*(_QWORD *)(v85 + 72) + v101));
    v60 = v102 == v108;
    if (v102 != v108)
      break;
    if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v86 + 1), (uint64_t *)&__p))
    {
      v92 = (uint64_t *)__p;
      break;
    }
  }
  if (v92)
  {
    v129 = v92;
    operator delete(v92);
  }
  return v60;
}

void sub_2182C2238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::pair<turi::flexible_type,turi::flexible_type> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, (uint64_t)a2) & 1) != 0)return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x30uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)(v16 + 2), a3);
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_2182C24B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::pair<turi::flexible_type,turi::flexible_type>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, (uint64_t)a2) & 1) != 0)return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x30uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  *(_QWORD *)((char *)v16 + 21) = *(_QWORD *)(a3 + 5);
  v16[2] = *(_QWORD *)a3;
  *((_BYTE *)v16 + 28) = *(_BYTE *)(a3 + 12);
  *(_BYTE *)(a3 + 12) = 0;
  *(_QWORD *)((char *)v16 + 37) = *(_QWORD *)(a3 + 21);
  v16[4] = *(_QWORD *)(a3 + 16);
  *((_BYTE *)v16 + 44) = *(_BYTE *)(a3 + 28);
  *(_BYTE *)(a3 + 28) = 0;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_2182C27A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &off_24D936828;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24D936828;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  const turi::sframe *v12;
  unint64_t i;
  char v14;
  _BYTE *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  std::string *p_p;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD **v35;
  _QWORD *v36[2];
  void *v37[3];
  unint64_t v38;
  unint64_t v39;
  _BYTE v40[24];
  _BYTE *v41;
  std::string __p;
  std::string *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[296];
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  _QWORD v52[21];
  uint64_t v53;
  BOOL v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 32);
  v38 = v4;
  v39 = v3;
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 16);
  v49 = v3;
  v50 = *v7;
  v8 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v6, &v49);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = *(_QWORD **)(a1 + 8);
  v10 = *(uint64_t **)(a1 + 24);
  v49 = v4;
  v50 = *v10;
  v11 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v9, &v49);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v12 = (const turi::sframe *)turi::sgraph::edge_partition((turi::sgraph *)v5, v39, v38, **(_QWORD **)(a1 + 16), **(unint64_t ***)(a1 + 24));
  turi::sframe::sframe((turi::sframe *)&v49, v12);
  std::vector<turi::flex_type_enum>::vector(v37, v51);
  if (v51)
  {
    for (i = 0; i < v51; ++i)
    {
      v14 = turi::sframe::column_type((turi::sframe *)&v49, i);
      *((_BYTE *)v37[0] + i) = v14;
    }
  }
  v15 = v37[0];
  *((_BYTE *)v37[0] + **(_QWORD **)(a1 + 40)) = *(_BYTE *)(v5 + 56);
  v15[**(_QWORD **)(a1 + 48)] = *(_BYTE *)(v5 + 56);
  turi::sframe::sframe((turi::sframe *)v48);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  assert_msg(v54, "Invalid SFrame");
  if (v55)
  {
    v16 = &v53;
    v17 = 15;
LABEL_10:
    v18 = (*(uint64_t (**)(void))(*(_QWORD *)*v16 + 8 * v17))();
    goto LABEL_11;
  }
  if (v51)
  {
    v16 = (uint64_t *)v52[18];
    v17 = 3;
    goto LABEL_10;
  }
  v18 = 0;
LABEL_11:
  turi::sframe::open_for_write((uint64_t)v48, v52, v37, &__p, v18, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v34 = *(_OWORD *)(a1 + 56);
  v32 = *(_OWORD *)(a1 + 40);
  v33 = *(_OWORD *)(a1 + 72);
  v19 = (char *)operator new(0x58uLL);
  *(_OWORD *)(v19 + 8) = v32;
  v20 = (__int128 *)(v19 + 8);
  *(_QWORD *)v19 = &off_24D936898;
  *((_QWORD *)v19 + 3) = v8 + 4;
  *((_QWORD *)v19 + 4) = v11 + 4;
  *((_QWORD *)v19 + 5) = &v39;
  *((_QWORD *)v19 + 6) = &v38;
  *(_OWORD *)(v19 + 56) = v34;
  *(_OWORD *)(v19 + 72) = v33;
  v47 = v19;
  v21 = (char *)operator new(0x58uLL);
  *(_QWORD *)v21 = &off_24D936898;
  v22 = *v20;
  *(_OWORD *)(v21 + 24) = v20[1];
  v23 = v20[3];
  *(_OWORD *)(v21 + 40) = v20[2];
  *(_OWORD *)(v21 + 56) = v23;
  *(_OWORD *)(v21 + 72) = v20[4];
  *(_OWORD *)(v21 + 8) = v22;
  v45 = v21;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v40, *(_QWORD *)(a1 + 88));
  boost::bind<std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>((uint64_t)v40, (uint64_t)(v8 + 4), (uint64_t)(v11 + 4), &__p);
  v36[0] = 0;
  v36[1] = 0;
  v35 = v36;
  turi::copy_transform_if<turi::sframe &,turi::sframe &,std::function<BOOL ()(std::vector<turi::flexible_type> const&)>,boost::_bi::bind_t<boost::_bi::unspecified,std::function<std::vector<turi::flexible_type> ()(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&)>,boost::_bi::list3<boost::arg<1>,boost::reference_wrapper<std::vector<turi::flexible_type> const>,boost::reference_wrapper<std::vector<turi::flexible_type> const>>>,void,void>((turi::sframe *)&v49, (std::locale::__imp *)v48, (std::locale::__imp *)v44, (std::locale::__imp *)&__p, (uint64_t)&v35, -1);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v35, v36[0]);
  p_p = v43;
  if (v43 == &__p)
  {
    v25 = 4;
    p_p = &__p;
  }
  else
  {
    if (!v43)
      goto LABEL_18;
    v25 = 5;
  }
  (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v25))();
LABEL_18:
  v26 = v41;
  if (v41 == v40)
  {
    v27 = 4;
    v26 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_23;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_23:
  v28 = v45;
  if (v45 == v44)
  {
    v29 = 4;
    v28 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_28;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_28:
  turi::sframe::close((turi::sframe *)v48);
  turi::sframe::operator=(**(_QWORD **)(a1 + 96) + 296 * (v38 + *(_QWORD *)(v5 + 24) * v39), (uint64_t)v48);
  v30 = v47;
  if (v47 == v46)
  {
    v31 = 4;
    v30 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_33;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_33:
  turi::sframe::~sframe((turi::sframe *)v48);
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  turi::sframe::~sframe((turi::sframe *)&v49);
}

void sub_2182C2C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a16, (_QWORD *)a17);
  v44 = (_QWORD *)a31;
  if (a31 == v42)
  {
    v45 = 4;
    v44 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_6;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_6:
  v46 = (_QWORD *)a27;
  if ((char *)a27 == &a24)
  {
    v47 = 4;
    v46 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_11;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_11:
  v48 = (_QWORD *)a37;
  if ((char *)a37 == &a34)
  {
    v49 = 4;
    v48 = &a34;
  }
  else
  {
    if (!a37)
      goto LABEL_16;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_16:
  v50 = (_QWORD *)a41;
  if ((char *)a41 == &a38)
  {
    v51 = 4;
    v50 = &a38;
  }
  else
  {
    if (!a41)
      goto LABEL_21;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_21:
  turi::sframe::~sframe((turi::sframe *)&a42);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::sframe::~sframe((turi::sframe *)&STACK[0x230]);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4,std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4>,void ()(std::pair<unsigned long,unsigned long>)>::target_type()
{
}

void std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_24D936898;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24D936898;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  uint64_t *v39;
  unsigned __int8 *v40;
  std::string::size_type *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  std::runtime_error *exception;
  std::string *v47;
  __int128 v48;
  std::runtime_error *v49;
  std::string *v50;
  __int128 v51;
  std::string v52;
  size_t __idx;
  void *__p[2];
  void *v55[2];
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v2 = *a2 + 16 * **(_QWORD **)(a1 + 8);
  v5 = 0;
  switch(*(_BYTE *)(v2 + 12))
  {
    case 0:
      v5 = *(_QWORD *)v2;
      goto LABEL_29;
    case 1:
      v5 = (uint64_t)*(double *)v2;
      goto LABEL_29;
    case 2:
      v9 = *(_QWORD *)v2;
      v10 = (char **)(*(_QWORD *)v2 + 8);
      __idx = 0;
      v11 = (char *)v10;
      if (*(char *)(v9 + 31) < 0)
        v11 = *v10;
      std::string::basic_string[abi:ne180100]<0>(__p, v11);
      v5 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v55[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v9 + 31) < 0)
        v12 = *(_QWORD *)(v9 + 16);
      else
        v12 = *(unsigned __int8 *)(v9 + 31);
      if (__idx != v12)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v47 = std::string::append(&v52, " cannot be interpreted as an integer");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v55[0] = (void *)v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v6 = *(_QWORD *)v2;
      __p[1] = 0;
      v55[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v13 = *(_QWORD *)v2;
      __p[1] = 0;
      v55[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
      goto LABEL_28;
    case 5:
      v14 = *(_QWORD *)v2;
      __p[1] = 0;
      v55[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
      goto LABEL_28;
    case 6:
      v5 = (uint64_t)(*(_QWORD *)v2 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v15 = *(_QWORD *)v2;
      v16 = *(unsigned int **)(v15 + 16);
      __p[0] = *(void **)(v15 + 8);
      __p[1] = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *(_OWORD *)(v15 + 24);
      v20 = *(_OWORD *)(v15 + 56);
      v56 = *(_OWORD *)(v15 + 40);
      v57 = v20;
      *(_OWORD *)v55 = v19;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v56 + 1))
      {
        *(_QWORD *)&v57 = *((_QWORD *)&v56 + 1);
        operator delete(*((void **)&v56 + 1));
      }
      if (v55[0])
      {
        v55[1] = v55[0];
        operator delete(v55[0]);
      }
      v5 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_29;
      v7 = (unint64_t *)((char *)__p[1] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
      }
LABEL_28:
      v5 = 0;
LABEL_29:
      v21 = *a2 + 16 * **(_QWORD **)(a1 + 16);
      v22 = 0;
      switch(*(_BYTE *)(v21 + 12))
      {
        case 0:
          v22 = *(_QWORD *)v21;
          goto LABEL_57;
        case 1:
          v22 = (uint64_t)*(double *)v21;
          goto LABEL_57;
        case 2:
          v27 = *(_QWORD *)v21;
          v28 = (char **)(*(_QWORD *)v21 + 8);
          __idx = 0;
          v29 = (char *)v28;
          if (*(char *)(v27 + 31) < 0)
            v29 = *v28;
          std::string::basic_string[abi:ne180100]<0>(__p, v29);
          v22 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SHIBYTE(v55[0]) < 0)
            operator delete(__p[0]);
          if (*(char *)(v27 + 31) < 0)
            v30 = *(_QWORD *)(v27 + 16);
          else
            v30 = *(unsigned __int8 *)(v27 + 31);
          if (__idx != v30)
          {
            v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v50 = std::string::append(&v52, " cannot be interpreted as an integer");
            v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            v55[0] = (void *)v50->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v49, (const std::string *)__p);
            __cxa_throw(v49, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_57;
        case 3:
          v23 = *(_QWORD *)v21;
          __p[1] = 0;
          v55[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v23 + 8), *(_QWORD *)(v23 + 16), (uint64_t)(*(_QWORD *)(v23 + 16) - *(_QWORD *)(v23 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_56;
        case 4:
          v31 = *(_QWORD *)v21;
          __p[1] = 0;
          v55[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(_QWORD *)(v31 + 16) - *(_QWORD *)(v31 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v52.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
          goto LABEL_56;
        case 5:
          v32 = *(_QWORD *)v21;
          __p[1] = 0;
          v55[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v32 + 8), *(uint64_t **)(v32 + 16), (uint64_t)(*(_QWORD *)(v32 + 16) - *(_QWORD *)(v32 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v52.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
          goto LABEL_56;
        case 6:
          v22 = (uint64_t)(*(_QWORD *)v21 << 8) >> 8;
          goto LABEL_57;
        case 7:
          goto LABEL_57;
        case 8:
          v33 = *(_QWORD *)v21;
          v34 = *(unsigned int **)(v33 + 16);
          __p[0] = *(void **)(v33 + 8);
          __p[1] = v34;
          if (v34)
          {
            v35 = v34 + 2;
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
          v37 = *(_OWORD *)(v33 + 24);
          v38 = *(_OWORD *)(v33 + 56);
          v56 = *(_OWORD *)(v33 + 40);
          v57 = v38;
          *(_OWORD *)v55 = v37;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          goto LABEL_56;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v21 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v56 + 1))
          {
            *(_QWORD *)&v57 = *((_QWORD *)&v56 + 1);
            operator delete(*((void **)&v56 + 1));
          }
          if (v55[0])
          {
            v55[1] = v55[0];
            operator delete(v55[0]);
          }
          v24 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v25 = (unint64_t *)((char *)__p[1] + 8);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
LABEL_56:
          v22 = 0;
LABEL_57:
          v39 = (uint64_t *)(**(_QWORD **)(a1 + 24) + 16 * v5);
          v40 = (unsigned __int8 *)(**(_QWORD **)(a1 + 32) + 16 * v22);
          v41 = *(std::string::size_type **)(a1 + 48);
          v52.__r_.__value_.__r.__words[0] = **(_QWORD **)(a1 + 40);
          v52.__r_.__value_.__l.__size_ = *v41;
          std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)__p, v39, (uint64_t)v40);
          if (std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>((_QWORD *)(**(_QWORD **)(a1 + 56) + 40 * **(_QWORD **)(a1 + 40)), (unsigned __int8 *)v39)|| std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>((_QWORD *)(**(_QWORD **)(a1 + 64) + 40 * **(_QWORD **)(a1 + 48)), v40))
          {
            goto LABEL_61;
          }
          v42 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(*(_QWORD **)(a1 + 72), &v52);
          if (!v42)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::find<std::pair<turi::flexible_type,turi::flexible_type>>(v42 + 4, (unsigned __int8 *)__p))
          {
LABEL_61:
            v43 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24);
            if (!v43)
              std::__throw_bad_function_call[abi:ne180100]();
            v44 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v43 + 48))(v43, a2);
          }
          else
          {
            v44 = 0;
          }
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)__p);
          return v44;
        default:
          turi::apply_binary_op_ff();
      }
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_2182C3570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;

  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v26 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1},std::allocator<turi::sgraph::get_edges(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::map<std::string,turi::flexible_type> const&,unsigned long,unsigned long)::$_4::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(std::vector<turi::flexible_type> const&)#1}>,BOOL ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

unsigned __int8 *std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::find<std::pair<turi::flexible_type,turi::flexible_type>>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if ((std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, (uint64_t)a2) & 1) != 0)return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D936928;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D936928;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  return (unint64_t)turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(*a2 + 16 * **(_QWORD **)(a1 + 16)))
       % *(_QWORD *)(v2 + 24);
}

uint64_t std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0,std::allocator<turi::sgraph::add_vertices(turi::sframe,std::string const&,unsigned long)::$_0>,unsigned long ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_2182C3B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[40] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_2182C3C30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0::operator()(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  turi::sframe *v7;
  uint64_t v8;
  turi::sframe *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)a1[1];
  v13 = *(_QWORD *)(*a1 + 24);
  v14 = a2;
  if (v13 <= a2)
  {
    v15 = (uint64_t *)&v14;
    v16 = &v13;
    turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v13 = *(_QWORD *)(v2 + 32);
  v14 = v3;
  if (v13 <= v3)
  {
    v15 = (uint64_t *)&v14;
    v16 = &v13;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 24 * v3);
  v7 = (turi::sframe *)(v6 + 296 * a2);
  v8 = *(_QWORD *)a1[2];
  v9 = (turi::sframe *)(v8 + 296 * a2);
  turi::sgraph::reorder_and_add_new_columns((uint64_t)v7, (const void ***)a1[3], (_QWORD *)a1[4]);
  turi::sgraph::reorder_and_add_new_columns((uint64_t)v9, (const void ***)a1[3], (_QWORD *)a1[4]);
  turi::sgraph::merge_vertex_partition(v7, v9, (turi::sframe *)&v15);
  turi::sframe::operator=((uint64_t)v9, (uint64_t)&v15);
  turi::sframe::~sframe((turi::sframe *)&v15);
  if (*(_BYTE *)(v8 + 296 * a2 + 288))
    v10 = *(_QWORD *)(v8 + 296 * a2 + 32);
  else
    v10 = 0;
  if (*(_BYTE *)(v6 + 296 * a2 + 288))
    v11 = *(_QWORD *)(v6 + 296 * a2 + 32);
  else
    v11 = 0;
  *(_QWORD *)(*(_QWORD *)a1[5] + 8 * a2) = v10 - v11;
  return turi::sframe::operator=((uint64_t)v7, (uint64_t)v9);
}

void sub_2182C3DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::sframe::~sframe((turi::sframe *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0>(unsigned long,unsigned long,turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph20commit_vertex_bufferEmRNSt3__16vectorINS_6sfr"
                                        "ameENS2_9allocatorIS4_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph20commit_vertex_bufferEmRNSt3__16vectorINS_6sframeENS2_9allocatorIS4_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0>(unsigned long,unsigned long,turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = result;
    do
      result = turi::sgraph::commit_vertex_buffer(unsigned long,std::vector<turi::sframe> &)::$_0::operator()(*(uint64_t **)v2, v1++);
    while (v1 < *(_QWORD *)(v2 + 16));
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<turi::flexible_type const,std::vector<turi::flexible_type> *>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::pair<turi::flexible_type const,std::vector<turi::flexible_type> *>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(a1, v9, a4, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_2182C43BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,std::vector<turi::flexible_type> *>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<turi::flexible_type const,std::vector<turi::flexible_type> *>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<turi::sarray_sorted_buffer<turi::flexible_type>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9369D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sarray_sorted_buffer<turi::flexible_type>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9369D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::sarray_sorted_buffer<turi::flexible_type>>::__on_zero_shared(uint64_t a1)
{
  return turi::sarray_sorted_buffer<turi::flexible_type>::~sarray_sorted_buffer(a1 + 24);
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D936A28;
  return result;
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D936A28;
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::operator()(__n128 a1, uint64_t a2, int *a3, uint64_t a4)
{
  BOOL v4;
  double v5;
  char v6;
  const void *v7;
  size_t v8;
  double *v9;
  double *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  BOOL v16;
  double v17;
  double v18;
  BOOL v19;
  uint64_t v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  char v25;

  switch(*(_BYTE *)(a4 + 12))
  {
    case 0:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v4 = *(_QWORD *)a3 < *(_QWORD *)a4;
          goto LABEL_27;
        case 1:
          v17 = *(double *)a3;
          v18 = (double)*(uint64_t *)a4;
          goto LABEL_37;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          v16 = *(_QWORD *)a4 <= (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
          return !v16;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v16 = *(double *)a4 <= (double)*(uint64_t *)a3;
          return !v16;
        case 1:
          v17 = *(double *)a3;
          v18 = *(double *)a4;
LABEL_37:
          v19 = v17 < v18;
          goto LABEL_39;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          v19 = (double)a3[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8) < *(double *)a4;
LABEL_39:
          result = v19;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 2:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 2:
          v5 = *(double *)a3;
          v6 = *(_BYTE *)(*(_QWORD *)a4 + 31);
          if (*(char *)(*(_QWORD *)a3 + 31) < 0)
          {
            v7 = *(const void **)(*(_QWORD *)&v5 + 8);
            v8 = *(_QWORD *)(*(_QWORD *)&v5 + 16);
          }
          else
          {
            v7 = (const void *)(*(_QWORD *)&v5 + 8);
            v8 = *(unsigned __int8 *)(*(_QWORD *)a3 + 31);
          }
          if (v6 >= 0)
            v21 = *(unsigned __int8 *)(*(_QWORD *)a4 + 31);
          else
            v21 = *(_QWORD *)(*(_QWORD *)a4 + 16);
          if (v6 >= 0)
            v22 = (const void *)(*(_QWORD *)a4 + 8);
          else
            v22 = *(const void **)(*(_QWORD *)a4 + 8);
          if (v21 >= v8)
            v23 = v8;
          else
            v23 = v21;
          v24 = memcmp(v7, v22, v23);
          if (v24)
            return v24 < 0;
          else
            return v8 < v21;
        default:
          turi::apply_binary_op_ff();
      }
    case 3:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 3:
          v9 = *(double **)(*(_QWORD *)a3 + 8);
          v10 = *(double **)(*(_QWORD *)a4 + 8);
          v11 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 16) - (_QWORD)v10) >> 3;
          v12 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v9) >> 3;
          if (*(double **)(*(_QWORD *)a3 + 16) == v9)
            return v12 < v11;
          if (v12 <= 1)
            v13 = 1;
          else
            v13 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v9) >> 3;
          v14 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 16) - (_QWORD)v10) >> 3;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 4:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 4:
          return turi::flexible_type_impl::lt_operator::operator()(a1, (uint64_t)&v25, (uint64_t *)(*(_QWORD *)a3 + 8), (_QWORD *)(*(_QWORD *)a4 + 8));
        default:
          turi::apply_binary_op_ff();
      }
    case 5:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_31;
    case 6:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v4 = *(_QWORD *)a3 < (uint64_t)(*(_QWORD *)a4 << 8) >> 8;
          goto LABEL_27;
        case 1:
          v16 = (double)*(int *)(a4 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a4 << 8) >> 8) <= *(double *)a3;
          return !v16;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        case 6:
          v20 = (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
          if (v20 < (uint64_t)(*(_QWORD *)a4 << 8) >> 8)
            return 1;
          if (v20 != (uint64_t)(*(_QWORD *)a4 << 8) >> 8)
            return 0;
          v4 = a3[2] < *(_DWORD *)(a4 + 8);
LABEL_27:
          result = v4;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 7:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_31;
    case 8:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_31;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_31;
    case 9:
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          break;
        default:
          turi::apply_binary_op_ff();
      }
LABEL_31:
      turi::flexible_type_fail(0);
      return 0;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (!v14 || *v9 > *v10)
      return 0;
    if (*v9 < *v10)
      break;
    ++v10;
    ++v9;
    --v14;
    if (!--v13)
      return v12 < v11;
  }
  return 1;
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_0>,BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::target_type()
{
}

uint64_t turi::sarray_sorted_buffer<turi::flexible_type>::~sarray_sorted_buffer(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v13;

  v2 = (_QWORD *)(a1 + 256);
  v3 = *(_QWORD **)(a1 + 280);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v13 = (void **)(a1 + 232);
  std::vector<turi::simple_spinlock>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = (void **)(a1 + 200);
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v13);
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 136));
  v5 = *(void **)(a1 + 112);
  if (v5)
  {
    *(_QWORD *)(a1 + 120) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD **)(a1 + 104);
  if (v6 == (_QWORD *)(a1 + 80))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 80);
  }
  else
  {
    if (!v6)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_13:
  v8 = *(_QWORD **)(a1 + 72);
  if (v8 == (_QWORD *)(a1 + 48))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v8)
      goto LABEL_18;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_18:
  v10 = *(_QWORD **)(a1 + 40);
  if (v10 == (_QWORD *)(a1 + 16))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 16);
    goto LABEL_22;
  }
  if (v10)
  {
    v11 = 5;
LABEL_22:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1);
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D936AB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D936AB8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (unsigned __int8 *)(*a2 + 16 * **(_QWORD **)(a1 + 24));
  v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(*a2 + 16 * **(_QWORD **)(a1 + 16)));
  v5 = *(_QWORD *)(v2 + 24);
  return turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v3) % v5 + v4 % v5 * v5;
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_2>,unsigned long ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D936B38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D936B38;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::string *v11;
  std::string v12;
  __n128 v13;

  v3 = *a2 + 16 * **(_QWORD **)(a1 + 8);
  if (*(_BYTE *)(v3 + 12) == 7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "source vid column cannot contain missing value. ");
    v10 = std::string::append(&v12, "Please use dropna() to drop the missing value from the input and try again");
    turi::sgraph::merge_vertex_partition(&v13, (__n128 *)v10);
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1::operator() const(std::vector<turi::flexible_type> const&,unsigned long)::{lambda(void)#1}::operator()();
  }
  v5 = (unsigned __int8 *)(*a2 + 16 * **(_QWORD **)(a1 + 16));
  if (v5[12] == 7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "target vid column cannot contain missing value. ");
    v11 = std::string::append(&v12, "Please use dropna() to drop the missing value from the input and try again");
    turi::sgraph::merge_vertex_partition(&v13, (__n128 *)v11);
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1::operator() const(std::vector<turi::flexible_type> const&,unsigned long)::{lambda(void)#2}::operator()();
  }
  v6 = *a3;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = (unint64_t)turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(*a2 + 16 * **(_QWORD **)(a1 + 8)))
     % *(_QWORD *)(v7 + 24);
  v9 = (unint64_t)turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v5)
     % *(_QWORD *)(v7 + 24);
  turi::sarray_sorted_buffer<turi::flexible_type>::add(*(_QWORD **)(**(_QWORD **)(a1 + 32) + 16 * v8), (uint64_t *)v3, v6);
  turi::sarray_sorted_buffer<turi::flexible_type>::add(*(_QWORD **)(**(_QWORD **)(a1 + 40) + 16 * v9), (uint64_t *)v5, v6);
}

void sub_2182C4D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_1>,void ()(std::vector<turi::flexible_type> const&,unsigned long)>::target_type()
{
}

_QWORD *std::vector<turi::sarray<turi::flexible_type>>::vector(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::sarray<turi::flexible_type>>::__vallocate[abi:ne180100](a1, a2);
    std::vector<turi::sarray<turi::flexible_type>>::__construct_at_end((uint64_t)a1, a2);
  }
  return a1;
}

void sub_2182C4DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::sarray<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::sarray<turi::flexible_type>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray<turi::flexible_type>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

uint64_t std::vector<turi::sarray<turi::flexible_type>>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v4 = v3 + 280 * a2;
    v5 = 280 * a2;
    do
    {
      *(_QWORD *)(v3 + 272) = 0;
      *(_OWORD *)(v3 + 240) = 0u;
      *(_OWORD *)(v3 + 256) = 0u;
      *(_OWORD *)(v3 + 208) = 0u;
      *(_OWORD *)(v3 + 224) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_OWORD *)(v3 + 192) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)v3 = 0u;
      result = turi::sarray<turi::flexible_type>::sarray(v3);
      v3 += 280;
      v5 -= 280;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(v2 + 8) = v3;
  return result;
}

void sub_2182C4EDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray<turi::flexible_type>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(280 * a2);
}

void std::vector<turi::sarray<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = *a1;
  v2 = (void (***)(_QWORD))**a1;
  if (v2)
  {
    v4 = (void (***)(_QWORD))v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 35;
      do
      {
        (**v6)(v6);
        v7 = v6 == v2;
        v6 -= 35;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  _BYTE v27[24];
  _BYTE *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = 16 * a2;
  turi::sarray_sorted_buffer<turi::flexible_type>::close(*(_QWORD *)(**(_QWORD **)a1 + 16 * a2));
  v6 = **(_QWORD **)(a1 + 8) + 280 * a2;
  turi::sarray<turi::flexible_type>::open_for_write(v6, 1, 0);
  turi::sarray<turi::flexible_type>::set_type(v6, *(char *)(v4 + 56));
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v29, v6, 0);
  v7 = *(_QWORD *)(**(_QWORD **)a1 + v5);
  v8 = (uint64_t)v30;
  if (!v30)
    goto LABEL_4;
  if (v30 != v29)
  {
    v8 = (*(uint64_t (**)(void))(*v30 + 16))();
LABEL_4:
    v24 = (_BYTE *)v8;
    goto LABEL_6;
  }
  v24 = v23;
  (*(void (**)(_QWORD *, _BYTE *))(v29[0] + 24))(v29, v23);
LABEL_6:
  v9 = v25;
  v10 = v31;
  v11 = (uint64_t)v32;
  if (!v32)
  {
LABEL_9:
    v26 = (_BYTE *)v11;
    goto LABEL_11;
  }
  if (v32 != v31)
  {
    v11 = (*(uint64_t (**)(void))(*v32 + 16))();
    goto LABEL_9;
  }
  v26 = v25;
  (*(void (**)(_QWORD *, _BYTE *))(v31[0] + 24))(v31, v25);
LABEL_11:
  v12 = v27;
  v13 = v33;
  v14 = (uint64_t)v34;
  if (!v34)
  {
LABEL_14:
    v28 = (_BYTE *)v14;
    goto LABEL_16;
  }
  if (v34 != v33)
  {
    v14 = (*(uint64_t (**)(void))(*v34 + 16))();
    goto LABEL_14;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _BYTE *))(v33[0] + 24))(v33, v27);
LABEL_16:
  turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(v7, (uint64_t)v23);
  if (v28 == v27)
  {
    v15 = 4;
  }
  else
  {
    if (!v28)
      goto LABEL_21;
    v15 = 5;
    v12 = v28;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v15))(v12);
LABEL_21:
  if (v26 == v25)
  {
    v16 = 4;
  }
  else
  {
    if (!v26)
      goto LABEL_26;
    v16 = 5;
    v9 = v26;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v16))(v9);
LABEL_26:
  v17 = v24;
  if (v24 == v23)
  {
    v18 = 4;
    v17 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_31;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_31:
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  if (v34 == v33)
  {
    v19 = 4;
  }
  else
  {
    if (!v34)
      goto LABEL_36;
    v19 = 5;
    v13 = v34;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v19))(v13);
LABEL_36:
  if (v32 == v31)
  {
    v20 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_41;
    v20 = 5;
    v10 = v32;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v20))(v10);
LABEL_41:
  result = v30;
  if (v30 == v29)
  {
    v22 = 4;
    result = v29;
  }
  else
  {
    if (!v30)
      return result;
    v22 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v22))();
}

void sub_2182C5298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD *);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD *);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  if (v15 == v2)
  {
    v4 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v4 = 5;
    v2 = v15;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v4))(v2);
LABEL_6:
  v5 = (va_list)v11;
  if (v11 == (_QWORD *)va)
  {
    v6 = 4;
    va_copy(v5, va);
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count_vtbl *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  double v38;
  char v39;
  BOOL v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  size_t v83;
  double *v84;
  double *v85;
  unint64_t v86;
  double *v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  unint64_t v92;
  unint64_t v93;
  BOOL v94;
  double v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;
  unint64_t v100;
  unint64_t v101;
  BOOL v102;
  void *v103;
  void *v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  BOOL v108;
  void *v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v115;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  void *v135;
  void *v136;
  unsigned int v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  void *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  unint64_t v154;
  double v155;
  double v156;
  uint64_t v157;
  uint64_t i;
  uint64_t v159;
  unint64_t v160;
  BOOL v161;
  uint64_t v162;
  char v163;
  unint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  double v192;
  BOOL v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  size_t v205;
  double *v206;
  double *v207;
  unint64_t v208;
  double *v209;
  uint64_t v210;
  double v211;
  double v212;
  double v213;
  unint64_t v214;
  unint64_t v215;
  BOOL v216;
  double v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  BOOL v221;
  unint64_t v222;
  unint64_t v223;
  BOOL v224;
  void *v225;
  void *v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v229;
  BOOL v230;
  void *v231;
  unint64_t v232;
  unint64_t v233;
  BOOL v234;
  unint64_t v235;
  unint64_t v236;
  BOOL v237;
  unint64_t v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  void *v255;
  void *v256;
  unsigned int v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  void *v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unsigned __int8 *v271;
  unsigned __int8 *v272;
  uint64_t v273;
  unint64_t v274;
  double v275;
  double v276;
  unint64_t v277;
  unint64_t v278;
  BOOL v279;
  double v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  BOOL v284;
  unint64_t v285;
  unint64_t v286;
  BOOL v287;
  void *v288;
  void *v289;
  unsigned int v290;
  unint64_t v291;
  unint64_t v292;
  BOOL v293;
  void *v294;
  unint64_t v295;
  unint64_t v296;
  BOOL v297;
  unint64_t v298;
  unint64_t v299;
  BOOL v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  _QWORD *v304;
  unint64_t v305;
  uint64_t *v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  __int128 v311;
  _BYTE v312[24];
  __int128 v313;
  __int128 v314;
  __int128 v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  unint64_t v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  char v322;
  _QWORD v323[2];
  unint64_t v324[2];
  __int128 v325;
  unint64_t v326;
  uint64_t v327;

  v327 = *MEMORY[0x24BDAC8D0];
  turi::sarray<turi::flexible_type>::get_reader(*(_QWORD *)a1, (uint64_t *)&v311);
  v320 = v311;
  v4 = (std::__shared_weak_count *)operator new();
  v5 = (std::__shared_weak_count_vtbl *)v311;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E558;
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = v5;
  v321 = v4;
  v317 = 0;
  v318 = 0;
  v319 = 0;
  v6 = *(_QWORD *)(a1 + 112);
  if (*(_QWORD *)(a1 + 120) == v6)
  {
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = v7;
      v10 = *(_QWORD *)(v6 + 8 * v8);
      v309 = v320;
      v310 = v321;
      if (v321)
      {
        p_shared_owners = (unint64_t *)&v321->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v7 += v10;
      turi::sarray_reader_buffer<turi::flexible_type>::sarray_reader_buffer((uint64_t)&v311, &v309, v9, v10 + v9, 1024);
      v13 = v318;
      if ((unint64_t)v318 >= v319)
      {
        v17 = std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__push_back_slow_path<turi::sarray_reader_buffer<turi::flexible_type>>(&v317, (uint64_t)&v311);
        v18 = *(std::__shared_weak_count **)&v312[16];
        v318 = (_QWORD *)v17;
        if (*(_QWORD *)&v312[16])
        {
          v19 = (unint64_t *)(*(_QWORD *)&v312[16] + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      else
      {
        *v318 = 0;
        v13[1] = 0;
        v13[2] = 0;
        *(_OWORD *)v13 = v311;
        v13[2] = *(_QWORD *)v312;
        v311 = 0uLL;
        *(_QWORD *)v312 = 0;
        *(_OWORD *)(v13 + 3) = *(_OWORD *)&v312[8];
        *(_QWORD *)&v312[8] = 0;
        *(_QWORD *)&v312[16] = 0;
        v15 = v314;
        v14 = v315;
        v16 = v316;
        *(_OWORD *)(v13 + 5) = v313;
        v13[11] = v16;
        *(_OWORD *)(v13 + 9) = v14;
        *(_OWORD *)(v13 + 7) = v15;
        v318 = v13 + 12;
      }
      *(_QWORD *)&v325 = &v311;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
      v21 = v310;
      if (v310)
      {
        v22 = (unint64_t *)&v310->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      ++v8;
      v6 = *(_QWORD *)(a1 + 112);
    }
    while (v8 < (*(_QWORD *)(a1 + 120) - v6) >> 3);
    v24 = v317;
    v25 = v318;
  }
  v311 = 0u;
  *(_OWORD *)v312 = 0u;
  *(_DWORD *)&v312[16] = 1065353216;
  v306 = 0;
  v307 = 0;
  v308 = 0;
  v324[0] = 0;
  if (v25 == (_QWORD *)v24)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v26 = 0;
    do
    {
      if (*(_QWORD *)(v24 + 96 * v26 + 88) < *(_QWORD *)(v24 + 96 * v26 + 72))
      {
        v27 = turi::sarray_reader_buffer<turi::flexible_type>::next((uint64_t *)(v24 + 96 * v26));
        *(_QWORD *)&v325 = 0;
        DWORD2(v325) = 0;
        BYTE12(v325) = 0;
        v28 = *(_QWORD *)v27;
        *(_QWORD *)((char *)&v325 + 5) = *(_QWORD *)(v27 + 5);
        *(_QWORD *)&v325 = v28;
        BYTE12(v325) = *(_BYTE *)(v27 + 12);
        *(_BYTE *)(v27 + 12) = 0;
        v326 = v324[0];
        std::vector<std::pair<turi::flexible_type,unsigned long>>::push_back[abi:ne180100]((uint64_t *)&v306, (uint64_t *)&v325);
        std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&v325);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v311, v324, v324);
        v26 = v324[0];
        v24 = v317;
      }
      v324[0] = ++v26;
    }
    while (v26 < 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v318 - v24) >> 5));
    v30 = v306;
    v29 = (uint64_t)v307;
  }
  *(_QWORD *)&v325 = a1;
  v31 = v29 - (_QWORD)v30;
  if (v31 >= 25)
  {
    v32 = v31 / 24;
    v33 = (unint64_t)(v31 / 24 - 2) >> 1;
    v34 = v33 + 1;
    v35 = (uint64_t)&v30[3 * v33];
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>((uint64_t)v30, (uint64_t)&v325, v32, v35);
      v35 -= 24;
      --v34;
    }
    while (v34);
    v30 = v306;
  }
  if (v30 == v307)
  {
    v36 = 0;
    v37 = 0;
    v38 = 0.0;
    v39 = 1;
  }
  else
  {
    v36 = 0;
    v37 = 0;
    v38 = 0.0;
    v39 = 1;
    do
    {
      v305 = 0;
      memset(v324, 0, 13);
      *(_QWORD *)&v325 = v324;
      *((_QWORD *)&v325 + 1) = &v305;
      std::tuple<turi::flexible_type &,unsigned long &>::operator=[abi:ne180100]<turi::flexible_type,unsigned long,0>((uint64_t **)&v325, v30);
      std::pop_heap[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,unsigned long> *>,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1}>((uint64_t)v306, (uint64_t)v307, a1);
      v307 = (uint64_t *)std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)(v307 - 3));
      if (*(_BYTE *)(a1 + 288))
      {
        switch(v36)
        {
          case 0:
            switch(BYTE4(v324[1]))
            {
              case 0:
                v40 = v324[0] == *(_QWORD *)&v38;
                goto LABEL_112;
              case 1:
                v89 = *(double *)v324;
                v90 = (double)*(uint64_t *)&v38;
                goto LABEL_111;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_119;
              case 6:
                if (*(_QWORD *)&v38 != (uint64_t)(v324[0] << 8) >> 8)
                  goto LABEL_119;
                v40 = LODWORD(v324[1]) == 0;
                break;
              default:
                goto LABEL_516;
            }
            goto LABEL_112;
          case 1:
            switch(BYTE4(v324[1]))
            {
              case 0:
                v89 = v38;
                v90 = (double)(uint64_t)v324[0];
LABEL_111:
                v40 = v89 == v90;
                goto LABEL_112;
              case 1:
                v72 = *(double *)v324 == v38;
                goto LABEL_118;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_119;
              case 6:
                v91 = vabdd_f64((double)SLODWORD(v324[1]) / 1000000.0 + (double)((uint64_t)(v324[0] << 8) >> 8), v38);
                goto LABEL_117;
              default:
                goto LABEL_516;
            }
          case 2:
            if (BYTE4(v324[1]) - 3 < 7 || BYTE4(v324[1]) < 2u)
              goto LABEL_119;
            if (BYTE4(v324[1]) != 2)
              goto LABEL_516;
            if (*(char *)(v324[0] + 31) < 0)
              v83 = *(_QWORD *)(v324[0] + 16);
            else
              v83 = *(unsigned __int8 *)(v324[0] + 31);
            if (*(char *)(*(_QWORD *)&v38 + 31) < 0)
              v150 = *(_QWORD *)(*(_QWORD *)&v38 + 16);
            else
              v150 = *(unsigned __int8 *)(*(_QWORD *)&v38 + 31);
            if (v83 != v150)
              goto LABEL_119;
            v151 = (unsigned __int8 *)(v324[0] + 8);
            if ((*(_BYTE *)(v324[0] + 31) & 0x80) != 0)
              v151 = *(unsigned __int8 **)v151;
            v152 = (unsigned __int8 *)(*(_QWORD *)&v38 + 8);
            if ((*(_BYTE *)(*(_QWORD *)&v38 + 31) & 0x80) != 0)
              v152 = *(unsigned __int8 **)v152;
            if ((*(_BYTE *)(v324[0] + 31) & 0x80) != 0)
            {
              v40 = memcmp(v151, v152, v83) == 0;
LABEL_112:
              v72 = v40;
            }
            else
            {
              if (!v83)
              {
LABEL_91:
                v72 = 1;
                goto LABEL_118;
              }
              do
              {
                if (*v151 != *v152)
                  goto LABEL_119;
                ++v151;
                ++v152;
                v72 = 1;
                --v83;
              }
              while (v83);
            }
            goto LABEL_118;
          case 3:
            if (BYTE4(v324[1]) > 9u)
              goto LABEL_516;
            if (BYTE4(v324[1]) != 3)
              goto LABEL_119;
            v84 = *(double **)(v324[0] + 8);
            v85 = *(double **)(v324[0] + 16);
            v86 = v85 - v84;
            v87 = *(double **)(*(_QWORD *)&v38 + 8);
            if (v86 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v38 + 16) - (_QWORD)v87) >> 3)
              goto LABEL_119;
            if (v85 == v84)
              goto LABEL_91;
            if (v86 <= 1)
              v88 = 1;
            else
              v88 = v85 - v84;
            if (*v84 == *v87)
            {
              v153 = 1;
              do
              {
                v154 = v153;
                if (v88 == v153)
                  break;
                v155 = v84[v153];
                v156 = v87[v153++];
              }
              while (v155 == v156);
              v72 = v154 >= v86;
            }
            else
            {
              v72 = 0;
            }
            goto LABEL_118;
          case 4:
            if (BYTE4(v324[1]) > 9u)
              goto LABEL_516;
            if (BYTE4(v324[1]) != 4)
              goto LABEL_119;
            v42 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v322, (uint64_t *)(v324[0] + 8), (_QWORD *)(*(_QWORD *)&v38 + 8));
            goto LABEL_104;
          case 5:
            if (BYTE4(v324[1]) > 9u)
              goto LABEL_516;
            if (BYTE4(v324[1]) != 5)
              goto LABEL_119;
            v42 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v322, (uint64_t **)(v324[0] + 8), (uint64_t **)(*(_QWORD *)&v38 + 8));
            goto LABEL_104;
          case 6:
            switch(BYTE4(v324[1]))
            {
              case 0:
                if (v324[0] != (uint64_t)(*(_QWORD *)&v38 << 8) >> 8)
                  goto LABEL_119;
                v40 = v37 == 0;
                break;
              case 1:
                v91 = vabdd_f64(*(double *)v324, (double)v37 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v38 << 8) >> 8));
LABEL_117:
                v72 = v91 < 0.0000005;
                goto LABEL_118;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_119;
              case 6:
                if (((*(_QWORD *)&v38 ^ v324[0]) & 0xFFFFFFFFFFFFFFLL) != 0)
                  goto LABEL_119;
                v40 = LODWORD(v324[1]) == v37;
                break;
              default:
                goto LABEL_516;
            }
            goto LABEL_112;
          case 7:
            if (BYTE4(v324[1]) < 7u || BYTE4(v324[1]) - 8 < 2)
              goto LABEL_119;
            if (BYTE4(v324[1]) == 7)
              goto LABEL_91;
            goto LABEL_516;
          case 8:
            if (BYTE4(v324[1]) < 8u || BYTE4(v324[1]) == 9)
              goto LABEL_119;
            if (BYTE4(v324[1]) != 8)
              goto LABEL_516;
            v42 = turi::image_type::operator==(v324[0] + 8, *(_QWORD *)&v38 + 8);
LABEL_104:
            v72 = v42;
            goto LABEL_118;
          case 9:
            if (BYTE4(v324[1]) < 9u)
              goto LABEL_119;
            if (BYTE4(v324[1]) != 9)
            {
LABEL_516:
              turi::flexible_type_fail(0);
              __break(1u);
            }
            v43 = v324[0];
            if (v324[0] == *(_QWORD *)&v38)
              goto LABEL_91;
            v44 = (_QWORD *)(v324[0] + 8);
            if (!turi::flexible_type_impl::ndarray<double>::same_shape(v324[0] + 8, *(_QWORD *)&v38 + 8))
              goto LABEL_119;
            v46 = *(char **)(v43 + 24);
            v45 = *(char **)(v43 + 32);
            v47 = v45 - v46;
            if (v45 == v46)
              goto LABEL_91;
            if (!*v44)
              goto LABEL_91;
            v48 = 1;
            do
            {
              v49 = *(_QWORD *)v46;
              v46 += 8;
              v48 *= v49;
            }
            while (v46 != v45);
            if (!v48)
              goto LABEL_91;
            v323[0] = 0;
            std::vector<unsigned long>::vector(&v325, v47 >> 3, v323);
            v50 = v325;
            v51 = **(_QWORD **)(*(_QWORD *)&v38 + 8);
            v52 = *((_QWORD *)&v325 + 1) - v325;
            v53 = (uint64_t)(*((_QWORD *)&v325 + 1) - v325) >> 3;
            v54 = v53 - 1;
            if (v53 <= 1)
              v55 = 1;
            else
              v55 = (uint64_t)(*((_QWORD *)&v325 + 1) - v325) >> 3;
            break;
          default:
            goto LABEL_516;
        }
        do
        {
          if (*((_QWORD *)&v50 + 1) == (_QWORD)v50)
          {
            v63 = 0;
            v64 = *(double *)(**(_QWORD **)(v43 + 8) + 8 * *(_QWORD *)(v43 + 72));
          }
          else
          {
            v56 = 0;
            v57 = *(uint64_t **)(v43 + 48);
            v58 = (uint64_t *)v50;
            v59 = v55;
            do
            {
              v61 = *v58++;
              v60 = v61;
              v62 = *v57++;
              v56 += v62 * v60;
              --v59;
            }
            while (v59);
            v63 = 0;
            v64 = *(double *)(**(_QWORD **)(v43 + 8) + 8 * (*(_QWORD *)(v43 + 72) + v56));
            v65 = *(uint64_t **)(*(_QWORD *)&v38 + 48);
            v66 = (uint64_t *)v50;
            v67 = v55;
            do
            {
              v69 = *v66++;
              v68 = v69;
              v70 = *v65++;
              v63 += v70 * v68;
              --v67;
            }
            while (v67);
          }
          v71 = *(double *)(v51 + 8 * (*(_QWORD *)(*(_QWORD *)&v38 + 72) + v63));
          v72 = v64 == v71;
          if (v64 != v71)
            break;
          v73 = (uint64_t)(*((_QWORD *)&v50 + 1) - v50) >> 3;
          v74 = v53 - 1;
          if (v52 >= 1)
          {
            v75 = *(_QWORD *)(v43 + 24);
            v76 = *(_QWORD *)(v50 + 8 * v54) + 1;
            *(_QWORD *)(v50 + 8 * v54) = v76;
            if (v76 >= *(_QWORD *)(v75 + 8 * v54))
            {
              v77 = v75 - 16;
              v78 = (uint64_t)(*((_QWORD *)&v50 + 1) - v50) >> 3;
              v79 = (unint64_t *)(v50 + (v52 & 0xFFFFFFFFFFFFFFF8) - 16);
              while (1)
              {
                v80 = v78 - 1;
                v79[1] = 0;
                if (v78 - 1 <= 0)
                  break;
                v81 = *v79 + 1;
                *v79-- = v81;
                v82 = *(_QWORD *)(v77 + 8 * v78--);
                if (v81 < v82)
                {
                  v74 = v80 - 1;
                  v73 = 1;
                  goto LABEL_70;
                }
              }
              v72 = 1;
              goto LABEL_242;
            }
            v73 = 1;
            v74 = v53 - 1;
          }
LABEL_70:
          ;
        }
        while ((v74 & 0x8000000000000000) == 0 && v73);
        if (!(_QWORD)v50)
          goto LABEL_118;
LABEL_242:
        *((_QWORD *)&v325 + 1) = v50;
        operator delete((void *)v50);
LABEL_118:
        if (v39 & 1 | !v72)
        {
LABEL_119:
          switch(v36)
          {
            case 2:
              do
              {
                v92 = __ldaxr(*(unint64_t **)&v38);
                v93 = v92 - 1;
              }
              while (__stlxr(v93, *(unint64_t **)&v38));
              if (v93)
                v94 = 1;
              else
                v94 = *(_QWORD *)&v38 == 0;
              if (!v94)
              {
                if (*(char *)(*(_QWORD *)&v38 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v38 + 8));
                v95 = v38;
                v96 = 0x1012C404EF22A49;
                goto LABEL_166;
              }
              break;
            case 3:
              do
              {
                v106 = __ldaxr(*(unint64_t **)&v38);
                v107 = v106 - 1;
              }
              while (__stlxr(v107, *(unint64_t **)&v38));
              if (v107)
                v108 = 1;
              else
                v108 = *(_QWORD *)&v38 == 0;
              if (!v108)
              {
                v109 = *(void **)(*(_QWORD *)&v38 + 8);
                if (v109)
                {
                  *(_QWORD *)(*(_QWORD *)&v38 + 16) = v109;
                  operator delete(v109);
                }
                v95 = v38;
                v96 = 0x1080C409938AC02;
                goto LABEL_166;
              }
              break;
            case 4:
              do
              {
                v97 = __ldaxr(*(unint64_t **)&v38);
                v98 = v97 - 1;
              }
              while (__stlxr(v98, *(unint64_t **)&v38));
              if (v98)
                v99 = 1;
              else
                v99 = *(_QWORD *)&v38 == 0;
              if (!v99)
              {
                *(_QWORD *)&v325 = *(_QWORD *)&v38 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
                goto LABEL_158;
              }
              break;
            case 5:
              do
              {
                v110 = __ldaxr(*(unint64_t **)&v38);
                v111 = v110 - 1;
              }
              while (__stlxr(v111, *(unint64_t **)&v38));
              if (v111)
                v112 = 1;
              else
                v112 = *(_QWORD *)&v38 == 0;
              if (!v112)
              {
                *(_QWORD *)&v325 = *(_QWORD *)&v38 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
LABEL_158:
                v95 = v38;
                v96 = 0x1020C405E66F15BLL;
                goto LABEL_166;
              }
              break;
            case 8:
              do
              {
                v113 = __ldaxr(*(unint64_t **)&v38);
                v114 = v113 - 1;
              }
              while (__stlxr(v114, *(unint64_t **)&v38));
              if (v114)
                v115 = 1;
              else
                v115 = *(_QWORD *)&v38 == 0;
              if (!v115)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v38 + 16));
                v95 = v38;
                v105 = -235920773;
                goto LABEL_165;
              }
              break;
            case 9:
              do
              {
                v100 = __ldaxr(*(unint64_t **)&v38);
                v101 = v100 - 1;
              }
              while (__stlxr(v101, *(unint64_t **)&v38));
              if (v101)
                v102 = 1;
              else
                v102 = *(_QWORD *)&v38 == 0;
              if (!v102)
              {
                v103 = *(void **)(*(_QWORD *)&v38 + 48);
                if (v103)
                {
                  *(_QWORD *)(*(_QWORD *)&v38 + 56) = v103;
                  operator delete(v103);
                }
                v104 = *(void **)(*(_QWORD *)&v38 + 24);
                if (v104)
                {
                  *(_QWORD *)(*(_QWORD *)&v38 + 32) = v104;
                  operator delete(v104);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v38 + 8);
                v95 = v38;
                v105 = 2071181815;
LABEL_165:
                v96 = v105 | 0x1030C4000000000;
LABEL_166:
                MEMORY[0x219A19A08](*(_QWORD *)&v95, v96);
              }
              break;
            default:
              break;
          }
          v38 = *(double *)v324;
          v37 = v324[1];
          v36 = BYTE4(v324[1]);
          if (BYTE4(v324[1]) <= 9u && ((1 << SBYTE4(v324[1])) & 0x33C) != 0)
          {
            do
              v117 = __ldaxr(*(unint64_t **)&v38);
            while (__stlxr(v117 + 1, *(unint64_t **)&v38));
          }
          v118 = *(_QWORD *)(a2 + 56);
          if (!v118)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v118 + 48))(v118, v324);
        }
        v39 = 0;
      }
      else
      {
        v41 = *(_QWORD *)(a2 + 56);
        if (!v41)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v41 + 48))(v41, v324);
      }
      if (*(_QWORD *)(v317 + 96 * v305 + 88) >= *(_QWORD *)(v317 + 96 * v305 + 72))
      {
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(&v311, &v305);
      }
      else
      {
        v119 = turi::sarray_reader_buffer<turi::flexible_type>::next((uint64_t *)(v317 + 96 * v305));
        *(_QWORD *)&v325 = 0;
        DWORD2(v325) = 0;
        BYTE12(v325) = 0;
        v120 = *(_QWORD *)v119;
        *(_QWORD *)((char *)&v325 + 5) = *(_QWORD *)(v119 + 5);
        *(_QWORD *)&v325 = v120;
        BYTE12(v325) = *(_BYTE *)(v119 + 12);
        *(_BYTE *)(v119 + 12) = 0;
        v326 = v305;
        std::vector<std::pair<turi::flexible_type,unsigned long>>::push_back[abi:ne180100]((uint64_t *)&v306, (uint64_t *)&v325);
        std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&v325);
        *(_QWORD *)&v325 = a1;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>((uint64_t)v306, (uint64_t)v307, (uint64_t)&v325, 0xAAAAAAAAAAAAAAABLL * (v307 - v306));
      }
      switch(BYTE4(v324[1]))
      {
        case 2:
          v121 = (unint64_t *)v324[0];
          do
          {
            v122 = __ldaxr(v121);
            v123 = v122 - 1;
          }
          while (__stlxr(v123, v121));
          if (!v123)
          {
            v124 = v324[0];
            if (v324[0])
            {
              if (*(char *)(v324[0] + 31) < 0)
                operator delete(*(void **)(v324[0] + 8));
              v125 = v124;
              v126 = 0x1012C404EF22A49;
              goto LABEL_219;
            }
          }
          break;
        case 3:
          v138 = (unint64_t *)v324[0];
          do
          {
            v139 = __ldaxr(v138);
            v140 = v139 - 1;
          }
          while (__stlxr(v140, v138));
          if (!v140)
          {
            v141 = v324[0];
            if (v324[0])
            {
              v142 = *(void **)(v324[0] + 8);
              if (v142)
              {
                *(_QWORD *)(v324[0] + 16) = v142;
                operator delete(v142);
              }
              v125 = v141;
              v126 = 0x1080C409938AC02;
              goto LABEL_219;
            }
          }
          break;
        case 4:
          v127 = (unint64_t *)v324[0];
          do
          {
            v128 = __ldaxr(v127);
            v129 = v128 - 1;
          }
          while (__stlxr(v129, v127));
          if (!v129)
          {
            v130 = v324[0];
            if (v324[0])
            {
              *(_QWORD *)&v325 = v324[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
              goto LABEL_212;
            }
          }
          break;
        case 5:
          v143 = (unint64_t *)v324[0];
          do
          {
            v144 = __ldaxr(v143);
            v145 = v144 - 1;
          }
          while (__stlxr(v145, v143));
          if (!v145)
          {
            v130 = v324[0];
            if (v324[0])
            {
              *(_QWORD *)&v325 = v324[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
LABEL_212:
              v125 = v130;
              v126 = 0x1020C405E66F15BLL;
              goto LABEL_219;
            }
          }
          break;
        case 8:
          v146 = (unint64_t *)v324[0];
          do
          {
            v147 = __ldaxr(v146);
            v148 = v147 - 1;
          }
          while (__stlxr(v148, v146));
          if (!v148)
          {
            v149 = v324[0];
            if (v324[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v324[0] + 16));
              v125 = v149;
              v137 = -235920773;
              goto LABEL_218;
            }
          }
          break;
        case 9:
          v131 = (unint64_t *)v324[0];
          do
          {
            v132 = __ldaxr(v131);
            v133 = v132 - 1;
          }
          while (__stlxr(v133, v131));
          if (!v133)
          {
            v134 = v324[0];
            if (v324[0])
            {
              v135 = *(void **)(v324[0] + 48);
              if (v135)
              {
                *(_QWORD *)(v324[0] + 56) = v135;
                operator delete(v135);
              }
              v136 = *(void **)(v134 + 24);
              if (v136)
              {
                *(_QWORD *)(v134 + 32) = v136;
                operator delete(v136);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v134 + 8);
              v125 = v134;
              v137 = 2071181815;
LABEL_218:
              v126 = v137 | 0x1030C4000000000;
LABEL_219:
              MEMORY[0x219A19A08](v125, v126);
            }
          }
          break;
        default:
          break;
      }
      v30 = v306;
    }
    while (v306 != v307);
  }
  if (*(_QWORD *)&v312[8] >= 2uLL)
    turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(void)#1}::operator()();
  if (*(_QWORD *)&v312[8])
  {
    v157 = *(_QWORD *)(*(_QWORD *)v312 + 16);
    for (i = v317; *(_QWORD *)(v317 + 96 * v157 + 88) < *(_QWORD *)(v317 + 96 * v157 + 72); i = v317)
    {
      v159 = turi::sarray_reader_buffer<turi::flexible_type>::next((uint64_t *)(i + 96 * v157));
      memset(v324, 0, 13);
      v160 = *(_QWORD *)v159;
      *(unint64_t *)((char *)v324 + 5) = *(_QWORD *)(v159 + 5);
      v324[0] = v160;
      BYTE4(v324[1]) = *(_BYTE *)(v159 + 12);
      *(_BYTE *)(v159 + 12) = 0;
      if (*(_BYTE *)(a1 + 288))
      {
        switch(v36)
        {
          case 0:
            switch(BYTE4(v324[1]))
            {
              case 0:
                v161 = v324[0] == *(_QWORD *)&v38;
                goto LABEL_329;
              case 1:
                v211 = *(double *)v324;
                v212 = (double)*(uint64_t *)&v38;
                goto LABEL_328;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_336;
              case 6:
                if (*(_QWORD *)&v38 != (uint64_t)(v324[0] << 8) >> 8)
                  goto LABEL_336;
                v161 = LODWORD(v324[1]) == 0;
                break;
              default:
                goto LABEL_516;
            }
            goto LABEL_329;
          case 1:
            switch(BYTE4(v324[1]))
            {
              case 0:
                v211 = v38;
                v212 = (double)(uint64_t)v324[0];
LABEL_328:
                v161 = v211 == v212;
                goto LABEL_329;
              case 1:
                v193 = *(double *)v324 == v38;
                goto LABEL_335;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_336;
              case 6:
                v213 = vabdd_f64((double)SLODWORD(v324[1]) / 1000000.0 + (double)((uint64_t)(v324[0] << 8) >> 8), v38);
                goto LABEL_334;
              default:
                goto LABEL_516;
            }
          case 2:
            if (BYTE4(v324[1]) - 3 < 7 || BYTE4(v324[1]) < 2u)
              goto LABEL_336;
            if (BYTE4(v324[1]) != 2)
              goto LABEL_516;
            if (*(char *)(v324[0] + 31) < 0)
              v205 = *(_QWORD *)(v324[0] + 16);
            else
              v205 = *(unsigned __int8 *)(v324[0] + 31);
            if (*(char *)(*(_QWORD *)&v38 + 31) < 0)
              v270 = *(_QWORD *)(*(_QWORD *)&v38 + 16);
            else
              v270 = *(unsigned __int8 *)(*(_QWORD *)&v38 + 31);
            if (v205 != v270)
              goto LABEL_336;
            v271 = (unsigned __int8 *)(v324[0] + 8);
            if ((*(_BYTE *)(v324[0] + 31) & 0x80) != 0)
              v271 = *(unsigned __int8 **)v271;
            v272 = (unsigned __int8 *)(*(_QWORD *)&v38 + 8);
            if ((*(_BYTE *)(*(_QWORD *)&v38 + 31) & 0x80) != 0)
              v272 = *(unsigned __int8 **)v272;
            if ((*(_BYTE *)(v324[0] + 31) & 0x80) != 0)
            {
              v161 = memcmp(v271, v272, v205) == 0;
LABEL_329:
              v193 = v161;
            }
            else
            {
              if (!v205)
              {
LABEL_308:
                v193 = 1;
                goto LABEL_335;
              }
              do
              {
                if (*v271 != *v272)
                  goto LABEL_336;
                ++v271;
                ++v272;
                v193 = 1;
                --v205;
              }
              while (v205);
            }
            goto LABEL_335;
          case 3:
            if (BYTE4(v324[1]) > 9u)
              goto LABEL_516;
            if (BYTE4(v324[1]) != 3)
              goto LABEL_336;
            v206 = *(double **)(v324[0] + 8);
            v207 = *(double **)(v324[0] + 16);
            v208 = v207 - v206;
            v209 = *(double **)(*(_QWORD *)&v38 + 8);
            if (v208 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v38 + 16) - (_QWORD)v209) >> 3)
              goto LABEL_336;
            if (v207 == v206)
              goto LABEL_308;
            if (v208 <= 1)
              v210 = 1;
            else
              v210 = v207 - v206;
            if (*v206 == *v209)
            {
              v273 = 1;
              do
              {
                v274 = v273;
                if (v210 == v273)
                  break;
                v275 = v206[v273];
                v276 = v209[v273++];
              }
              while (v275 == v276);
              v193 = v274 >= v208;
            }
            else
            {
              v193 = 0;
            }
            goto LABEL_335;
          case 4:
            if (BYTE4(v324[1]) > 9u)
              goto LABEL_516;
            if (BYTE4(v324[1]) != 4)
              goto LABEL_336;
            v163 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v305, (uint64_t *)(v324[0] + 8), (_QWORD *)(*(_QWORD *)&v38 + 8));
            goto LABEL_321;
          case 5:
            if (BYTE4(v324[1]) > 9u)
              goto LABEL_516;
            if (BYTE4(v324[1]) != 5)
              goto LABEL_336;
            v163 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v305, (uint64_t **)(v324[0] + 8), (uint64_t **)(*(_QWORD *)&v38 + 8));
            goto LABEL_321;
          case 6:
            switch(BYTE4(v324[1]))
            {
              case 0:
                if (v324[0] != (uint64_t)(*(_QWORD *)&v38 << 8) >> 8)
                  goto LABEL_336;
                v161 = v37 == 0;
                break;
              case 1:
                v213 = vabdd_f64(*(double *)v324, (double)v37 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v38 << 8) >> 8));
LABEL_334:
                v193 = v213 < 0.0000005;
                goto LABEL_335;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_336;
              case 6:
                if (((*(_QWORD *)&v38 ^ v324[0]) & 0xFFFFFFFFFFFFFFLL) != 0)
                  goto LABEL_336;
                v161 = LODWORD(v324[1]) == v37;
                break;
              default:
                goto LABEL_516;
            }
            goto LABEL_329;
          case 7:
            if (BYTE4(v324[1]) < 7u || BYTE4(v324[1]) - 8 < 2)
              goto LABEL_336;
            if (BYTE4(v324[1]) == 7)
              goto LABEL_308;
            goto LABEL_516;
          case 8:
            if (BYTE4(v324[1]) < 8u || BYTE4(v324[1]) == 9)
              goto LABEL_336;
            if (BYTE4(v324[1]) != 8)
              goto LABEL_516;
            v163 = turi::image_type::operator==(v324[0] + 8, *(_QWORD *)&v38 + 8);
LABEL_321:
            v193 = v163;
            goto LABEL_335;
          case 9:
            if (BYTE4(v324[1]) < 9u)
              goto LABEL_336;
            if (BYTE4(v324[1]) != 9)
              goto LABEL_516;
            v164 = v324[0];
            if (v324[0] == *(_QWORD *)&v38)
              goto LABEL_308;
            v304 = (_QWORD *)(v324[0] + 8);
            if (!turi::flexible_type_impl::ndarray<double>::same_shape(v324[0] + 8, *(_QWORD *)&v38 + 8))
              goto LABEL_336;
            v166 = *(char **)(v164 + 24);
            v165 = *(char **)(v164 + 32);
            v167 = v165 - v166;
            if (v165 == v166)
              goto LABEL_308;
            if (!*v304)
              goto LABEL_308;
            v168 = 1;
            do
            {
              v169 = *(_QWORD *)v166;
              v166 += 8;
              v168 *= v169;
            }
            while (v166 != v165);
            if (!v168)
              goto LABEL_308;
            v323[0] = 0;
            std::vector<unsigned long>::vector(&v325, v167 >> 3, v323);
            v170 = v325;
            v171 = **(_QWORD **)(*(_QWORD *)&v38 + 8);
            v172 = *((_QWORD *)&v325 + 1) - v325;
            v173 = (uint64_t)(*((_QWORD *)&v325 + 1) - v325) >> 3;
            v174 = v173 - 1;
            if (v173 <= 1)
              v175 = 1;
            else
              v175 = (uint64_t)(*((_QWORD *)&v325 + 1) - v325) >> 3;
            v176 = v164;
            break;
          default:
            goto LABEL_516;
        }
        do
        {
          if (*((_QWORD *)&v170 + 1) == (_QWORD)v170)
          {
            v184 = 0;
            v185 = *(double *)(**(_QWORD **)(v176 + 8) + 8 * *(_QWORD *)(v176 + 72));
          }
          else
          {
            v177 = 0;
            v178 = *(uint64_t **)(v176 + 48);
            v179 = (uint64_t *)v170;
            v180 = v175;
            do
            {
              v182 = *v179++;
              v181 = v182;
              v183 = *v178++;
              v177 += v183 * v181;
              --v180;
            }
            while (v180);
            v184 = 0;
            v185 = *(double *)(**(_QWORD **)(v176 + 8) + 8 * (*(_QWORD *)(v176 + 72) + v177));
            v186 = *(uint64_t **)(*(_QWORD *)&v38 + 48);
            v187 = (uint64_t *)v170;
            v188 = v175;
            do
            {
              v190 = *v187++;
              v189 = v190;
              v191 = *v186++;
              v184 += v191 * v189;
              --v188;
            }
            while (v188);
          }
          v192 = *(double *)(v171 + 8 * (*(_QWORD *)(*(_QWORD *)&v38 + 72) + v184));
          v193 = v185 == v192;
          if (v185 != v192)
            break;
          v194 = (uint64_t)(*((_QWORD *)&v170 + 1) - v170) >> 3;
          v195 = v173 - 1;
          if (v172 >= 1)
          {
            v196 = *(_QWORD *)(v176 + 24);
            v197 = *(_QWORD *)(v170 + 8 * v174) + 1;
            *(_QWORD *)(v170 + 8 * v174) = v197;
            if (v197 >= *(_QWORD *)(v196 + 8 * v174))
            {
              v198 = v196 - 16;
              v199 = (uint64_t)(*((_QWORD *)&v170 + 1) - v170) >> 3;
              v200 = (unint64_t *)(v170 + (v172 & 0xFFFFFFFFFFFFFFF8) - 16);
              while (1)
              {
                v201 = v199 - 1;
                v200[1] = 0;
                if (v199 - 1 <= 0)
                  break;
                v202 = *v200 + 1;
                *v200-- = v202;
                v203 = *(_QWORD *)(v198 + 8 * v199--);
                if (v202 < v203)
                {
                  v195 = v201 - 1;
                  v194 = 1;
                  goto LABEL_284;
                }
              }
              v193 = 1;
              goto LABEL_456;
            }
            v194 = 1;
            v195 = v173 - 1;
          }
LABEL_284:
          ;
        }
        while ((v195 & 0x8000000000000000) == 0 && v194);
        if (!(_QWORD)v170)
          goto LABEL_335;
LABEL_456:
        *((_QWORD *)&v325 + 1) = v170;
        operator delete((void *)v170);
LABEL_335:
        if (v39 & 1 | !v193)
        {
LABEL_336:
          switch(v36)
          {
            case 2:
              do
              {
                v214 = __ldaxr(*(unint64_t **)&v38);
                v215 = v214 - 1;
              }
              while (__stlxr(v215, *(unint64_t **)&v38));
              if (v215)
                v216 = 1;
              else
                v216 = *(_QWORD *)&v38 == 0;
              if (!v216)
              {
                if (*(char *)(*(_QWORD *)&v38 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v38 + 8));
                v217 = v38;
                v218 = 0x1012C404EF22A49;
                goto LABEL_383;
              }
              break;
            case 3:
              do
              {
                v228 = __ldaxr(*(unint64_t **)&v38);
                v229 = v228 - 1;
              }
              while (__stlxr(v229, *(unint64_t **)&v38));
              if (v229)
                v230 = 1;
              else
                v230 = *(_QWORD *)&v38 == 0;
              if (!v230)
              {
                v231 = *(void **)(*(_QWORD *)&v38 + 8);
                if (v231)
                {
                  *(_QWORD *)(*(_QWORD *)&v38 + 16) = v231;
                  operator delete(v231);
                }
                v217 = v38;
                v218 = 0x1080C409938AC02;
                goto LABEL_383;
              }
              break;
            case 4:
              do
              {
                v219 = __ldaxr(*(unint64_t **)&v38);
                v220 = v219 - 1;
              }
              while (__stlxr(v220, *(unint64_t **)&v38));
              if (v220)
                v221 = 1;
              else
                v221 = *(_QWORD *)&v38 == 0;
              if (!v221)
              {
                *(_QWORD *)&v325 = *(_QWORD *)&v38 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
                goto LABEL_375;
              }
              break;
            case 5:
              do
              {
                v232 = __ldaxr(*(unint64_t **)&v38);
                v233 = v232 - 1;
              }
              while (__stlxr(v233, *(unint64_t **)&v38));
              if (v233)
                v234 = 1;
              else
                v234 = *(_QWORD *)&v38 == 0;
              if (!v234)
              {
                *(_QWORD *)&v325 = *(_QWORD *)&v38 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
LABEL_375:
                v217 = v38;
                v218 = 0x1020C405E66F15BLL;
                goto LABEL_383;
              }
              break;
            case 8:
              do
              {
                v235 = __ldaxr(*(unint64_t **)&v38);
                v236 = v235 - 1;
              }
              while (__stlxr(v236, *(unint64_t **)&v38));
              if (v236)
                v237 = 1;
              else
                v237 = *(_QWORD *)&v38 == 0;
              if (!v237)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v38 + 16));
                v217 = v38;
                v227 = -235920773;
                goto LABEL_382;
              }
              break;
            case 9:
              do
              {
                v222 = __ldaxr(*(unint64_t **)&v38);
                v223 = v222 - 1;
              }
              while (__stlxr(v223, *(unint64_t **)&v38));
              if (v223)
                v224 = 1;
              else
                v224 = *(_QWORD *)&v38 == 0;
              if (!v224)
              {
                v225 = *(void **)(*(_QWORD *)&v38 + 48);
                if (v225)
                {
                  *(_QWORD *)(*(_QWORD *)&v38 + 56) = v225;
                  operator delete(v225);
                }
                v226 = *(void **)(*(_QWORD *)&v38 + 24);
                if (v226)
                {
                  *(_QWORD *)(*(_QWORD *)&v38 + 32) = v226;
                  operator delete(v226);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v38 + 8);
                v217 = v38;
                v227 = 2071181815;
LABEL_382:
                v218 = v227 | 0x1030C4000000000;
LABEL_383:
                MEMORY[0x219A19A08](*(_QWORD *)&v217, v218);
              }
              break;
            default:
              break;
          }
          v38 = *(double *)v324;
          v37 = v324[1];
          v36 = BYTE4(v324[1]);
          if (BYTE4(v324[1]) <= 9u && ((1 << SBYTE4(v324[1])) & 0x33C) != 0)
          {
            do
              v239 = __ldaxr(*(unint64_t **)&v38);
            while (__stlxr(v239 + 1, *(unint64_t **)&v38));
          }
          v240 = *(_QWORD *)(a2 + 56);
          if (!v240)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v240 + 48))(v240, v324);
        }
        v39 = 0;
      }
      else
      {
        v162 = *(_QWORD *)(a2 + 56);
        if (!v162)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v162 + 48))(v162, v324);
      }
      switch(BYTE4(v324[1]))
      {
        case 2:
          v241 = (unint64_t *)v324[0];
          do
          {
            v242 = __ldaxr(v241);
            v243 = v242 - 1;
          }
          while (__stlxr(v243, v241));
          if (!v243)
          {
            v244 = v324[0];
            if (v324[0])
            {
              if (*(char *)(v324[0] + 31) < 0)
                operator delete(*(void **)(v324[0] + 8));
              v245 = v244;
              v246 = 0x1012C404EF22A49;
              goto LABEL_433;
            }
          }
          break;
        case 3:
          v258 = (unint64_t *)v324[0];
          do
          {
            v259 = __ldaxr(v258);
            v260 = v259 - 1;
          }
          while (__stlxr(v260, v258));
          if (!v260)
          {
            v261 = v324[0];
            if (v324[0])
            {
              v262 = *(void **)(v324[0] + 8);
              if (v262)
              {
                *(_QWORD *)(v324[0] + 16) = v262;
                operator delete(v262);
              }
              v245 = v261;
              v246 = 0x1080C409938AC02;
              goto LABEL_433;
            }
          }
          break;
        case 4:
          v247 = (unint64_t *)v324[0];
          do
          {
            v248 = __ldaxr(v247);
            v249 = v248 - 1;
          }
          while (__stlxr(v249, v247));
          if (!v249)
          {
            v250 = v324[0];
            if (v324[0])
            {
              *(_QWORD *)&v325 = v324[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
              goto LABEL_426;
            }
          }
          break;
        case 5:
          v263 = (unint64_t *)v324[0];
          do
          {
            v264 = __ldaxr(v263);
            v265 = v264 - 1;
          }
          while (__stlxr(v265, v263));
          if (!v265)
          {
            v250 = v324[0];
            if (v324[0])
            {
              *(_QWORD *)&v325 = v324[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
LABEL_426:
              v245 = v250;
              v246 = 0x1020C405E66F15BLL;
              goto LABEL_433;
            }
          }
          break;
        case 8:
          v266 = (unint64_t *)v324[0];
          do
          {
            v267 = __ldaxr(v266);
            v268 = v267 - 1;
          }
          while (__stlxr(v268, v266));
          if (!v268)
          {
            v269 = v324[0];
            if (v324[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v324[0] + 16));
              v245 = v269;
              v257 = -235920773;
              goto LABEL_432;
            }
          }
          break;
        case 9:
          v251 = (unint64_t *)v324[0];
          do
          {
            v252 = __ldaxr(v251);
            v253 = v252 - 1;
          }
          while (__stlxr(v253, v251));
          if (!v253)
          {
            v254 = v324[0];
            if (v324[0])
            {
              v255 = *(void **)(v324[0] + 48);
              if (v255)
              {
                *(_QWORD *)(v324[0] + 56) = v255;
                operator delete(v255);
              }
              v256 = *(void **)(v254 + 24);
              if (v256)
              {
                *(_QWORD *)(v254 + 32) = v256;
                operator delete(v256);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v254 + 8);
              v245 = v254;
              v257 = 2071181815;
LABEL_432:
              v246 = v257 | 0x1030C4000000000;
LABEL_433:
              MEMORY[0x219A19A08](v245, v246);
            }
          }
          break;
        default:
          continue;
      }
    }
  }
  switch(v36)
  {
    case 2:
      do
      {
        v277 = __ldaxr(*(unint64_t **)&v38);
        v278 = v277 - 1;
      }
      while (__stlxr(v278, *(unint64_t **)&v38));
      if (v278)
        v279 = 1;
      else
        v279 = *(_QWORD *)&v38 == 0;
      if (!v279)
      {
        if (*(char *)(*(_QWORD *)&v38 + 31) < 0)
          operator delete(*(void **)(*(_QWORD *)&v38 + 8));
        v280 = v38;
        v281 = 0x1012C404EF22A49;
        goto LABEL_504;
      }
      break;
    case 3:
      do
      {
        v291 = __ldaxr(*(unint64_t **)&v38);
        v292 = v291 - 1;
      }
      while (__stlxr(v292, *(unint64_t **)&v38));
      if (v292)
        v293 = 1;
      else
        v293 = *(_QWORD *)&v38 == 0;
      if (!v293)
      {
        v294 = *(void **)(*(_QWORD *)&v38 + 8);
        if (v294)
        {
          *(_QWORD *)(*(_QWORD *)&v38 + 16) = v294;
          operator delete(v294);
        }
        v280 = v38;
        v281 = 0x1080C409938AC02;
        goto LABEL_504;
      }
      break;
    case 4:
      do
      {
        v282 = __ldaxr(*(unint64_t **)&v38);
        v283 = v282 - 1;
      }
      while (__stlxr(v283, *(unint64_t **)&v38));
      if (v283)
        v284 = 1;
      else
        v284 = *(_QWORD *)&v38 == 0;
      if (!v284)
      {
        *(_QWORD *)&v325 = *(_QWORD *)&v38 + 8;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
        goto LABEL_496;
      }
      break;
    case 5:
      do
      {
        v295 = __ldaxr(*(unint64_t **)&v38);
        v296 = v295 - 1;
      }
      while (__stlxr(v296, *(unint64_t **)&v38));
      if (v296)
        v297 = 1;
      else
        v297 = *(_QWORD *)&v38 == 0;
      if (!v297)
      {
        *(_QWORD *)&v325 = *(_QWORD *)&v38 + 8;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
LABEL_496:
        v280 = v38;
        v281 = 0x1020C405E66F15BLL;
        goto LABEL_504;
      }
      break;
    case 8:
      do
      {
        v298 = __ldaxr(*(unint64_t **)&v38);
        v299 = v298 - 1;
      }
      while (__stlxr(v299, *(unint64_t **)&v38));
      if (v299)
        v300 = 1;
      else
        v300 = *(_QWORD *)&v38 == 0;
      if (!v300)
      {
        boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v38 + 16));
        v280 = v38;
        v290 = -235920773;
        goto LABEL_503;
      }
      break;
    case 9:
      do
      {
        v285 = __ldaxr(*(unint64_t **)&v38);
        v286 = v285 - 1;
      }
      while (__stlxr(v286, *(unint64_t **)&v38));
      if (v286)
        v287 = 1;
      else
        v287 = *(_QWORD *)&v38 == 0;
      if (!v287)
      {
        v288 = *(void **)(*(_QWORD *)&v38 + 48);
        if (v288)
        {
          *(_QWORD *)(*(_QWORD *)&v38 + 56) = v288;
          operator delete(v288);
        }
        v289 = *(void **)(*(_QWORD *)&v38 + 24);
        if (v289)
        {
          *(_QWORD *)(*(_QWORD *)&v38 + 32) = v289;
          operator delete(v289);
        }
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v38 + 8);
        v280 = v38;
        v290 = 2071181815;
LABEL_503:
        v281 = v290 | 0x1030C4000000000;
LABEL_504:
        MEMORY[0x219A19A08](*(_QWORD *)&v280, v281);
      }
      break;
    default:
      break;
  }
  *(_QWORD *)&v325 = &v306;
  std::vector<std::pair<turi::flexible_type,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v325);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&v311);
  *(_QWORD *)&v311 = &v317;
  std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
  v301 = v321;
  if (v321)
  {
    v302 = (unint64_t *)&v321->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
}

void sub_2182C6D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  void *v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;

  switch(*(_BYTE *)(v34 - 148))
  {
    case 2:
      v36 = *(unint64_t **)(v34 - 160);
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_39;
      v39 = *(_QWORD *)(v34 - 160);
      if (!v39)
        goto LABEL_39;
      if (*(char *)(v39 + 31) < 0)
        operator delete(*(void **)(v39 + 8));
      v40 = (_QWORD *)v39;
      v41 = 0x1012C404EF22A49;
      break;
    case 3:
      v42 = *(unint64_t **)(v34 - 160);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_39;
      v45 = *(_QWORD **)(v34 - 160);
      if (!v45)
        goto LABEL_39;
      v46 = (void *)v45[1];
      if (v46)
      {
        v45[2] = v46;
        operator delete(v46);
      }
      v40 = v45;
      v41 = 0x1080C409938AC02;
      break;
    case 4:
      v47 = *(unint64_t **)(v34 - 160);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_39;
      v50 = *(_QWORD **)(v34 - 160);
      if (!v50)
        goto LABEL_39;
      *(_QWORD *)(v34 - 168) = v50 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 168));
      goto LABEL_26;
    case 5:
      v51 = *(unint64_t **)(v34 - 160);
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (v53)
        goto LABEL_39;
      v50 = *(_QWORD **)(v34 - 160);
      if (!v50)
        goto LABEL_39;
      *(_QWORD *)(v34 - 168) = v50 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 168));
LABEL_26:
      v40 = v50;
      v41 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v54 = *(unint64_t **)(v34 - 160);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = *(_QWORD *)(v34 - 160);
        if (v57)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v57 + 16));
          MEMORY[0x219A19A08](v57, 0x1030C40F1F0227BLL);
        }
        *(_QWORD *)(v34 - 160) = 0;
      }
      goto LABEL_39;
    case 9:
      v58 = *(unint64_t **)(v34 - 160);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (v60)
        goto LABEL_39;
      v61 = *(_QWORD **)(v34 - 160);
      if (!v61)
        goto LABEL_39;
      v40 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v61);
      v41 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_39;
  }
  MEMORY[0x219A19A08](v40, v41);
LABEL_39:
  switch(v33)
  {
    case 2:
      do
      {
        v62 = __ldaxr((unint64_t *)v32);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, (unint64_t *)v32));
      if (v63)
        v64 = 1;
      else
        v64 = v32 == 0;
      if (v64)
        goto LABEL_83;
      if (*(char *)(v32 + 31) < 0)
        operator delete(*(void **)(v32 + 8));
      v65 = (_QWORD *)v32;
      v66 = 0x1012C404EF22A49;
      goto LABEL_82;
    case 3:
      do
      {
        v74 = __ldaxr((unint64_t *)v32);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, (unint64_t *)v32));
      if (v75)
        v76 = 1;
      else
        v76 = v32 == 0;
      if (v76)
        goto LABEL_83;
      v77 = *(void **)(v32 + 8);
      if (v77)
      {
        *(_QWORD *)(v32 + 16) = v77;
        operator delete(v77);
      }
      v65 = (_QWORD *)v32;
      v66 = 0x1080C409938AC02;
      goto LABEL_82;
    case 4:
      do
      {
        v67 = __ldaxr((unint64_t *)v32);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, (unint64_t *)v32));
      if (v68)
        v69 = 1;
      else
        v69 = v32 == 0;
      if (v69)
        goto LABEL_83;
      *(_QWORD *)(v34 - 160) = v32 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));
      goto LABEL_74;
    case 5:
      do
      {
        v78 = __ldaxr((unint64_t *)v32);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, (unint64_t *)v32));
      if (v79)
        v80 = 1;
      else
        v80 = v32 == 0;
      if (v80)
        goto LABEL_83;
      *(_QWORD *)(v34 - 160) = v32 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));
LABEL_74:
      v65 = (_QWORD *)v32;
      v66 = 0x1020C405E66F15BLL;
      goto LABEL_82;
    case 8:
      do
      {
        v81 = __ldaxr((unint64_t *)v32);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, (unint64_t *)v32));
      if (v82)
        v83 = 1;
      else
        v83 = v32 == 0;
      if (v83)
        goto LABEL_83;
      boost::detail::shared_count::~shared_count((unsigned int **)(v32 + 16));
      v65 = (_QWORD *)v32;
      v73 = -235920773;
      goto LABEL_81;
    case 9:
      do
      {
        v70 = __ldaxr((unint64_t *)v32);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, (unint64_t *)v32));
      if (v71)
        v72 = 1;
      else
        v72 = v32 == 0;
      if (v72)
        goto LABEL_83;
      v65 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v32);
      v73 = 2071181815;
LABEL_81:
      v66 = v73 | 0x1030C4000000000;
LABEL_82:
      MEMORY[0x219A19A08](v65, v66);
LABEL_83:
      *(_QWORD *)(v34 - 160) = &a12;
      std::vector<std::pair<turi::flexible_type,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&a17);
      a17 = (void **)&a29;
      std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a17);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_83;
  }
}

uint64_t std::pop_heap[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,unsigned long> *>,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1}>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _BYTE v10[13];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  if (a2 - result >= 25)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    *(_QWORD *)&v10[5] = *(_QWORD *)(result + 5);
    *(_QWORD *)v10 = v5;
    v10[12] = *(_BYTE *)(result + 12);
    *(_BYTE *)(result + 12) = 0;
    v11 = *(_QWORD *)(result + 16);
    v6 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>(result, (uint64_t)&v9, (a2 - result) / 0x18uLL);
    v7 = v6;
    v8 = (uint64_t *)(a2 - 24);
    if (v8 == v6)
    {
      std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100]((uint64_t)v6, (uint64_t *)v10);
    }
    else
    {
      std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100]((uint64_t)v6, v8);
      std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100]((uint64_t)v8, (uint64_t *)v10);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>(v4, (uint64_t)(v7 + 3), (uint64_t)&v9, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v4 + 24) >> 3));
    }
    return std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)v10);
  }
  return result;
}

void sub_2182C740C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_sorted_buffer.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"remaining_chunks.size() <= 1", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_sorted_buffer.hpp", "operator()", 188, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182C7518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__push_back_slow_path<turi::sarray_reader_buffer<turi::flexible_type>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[96 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v12 = *(_OWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v11 + 40) = v14;
  *((_QWORD *)v11 + 11) = v13;
  *(_OWORD *)(v11 + 72) = v12;
  v17[2] = v11 + 96;
  std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<turi::sarray_reader_buffer<turi::flexible_type>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_2182C76CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_reader_buffer<turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[13];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3 - 2;
  if (a3 < 2)
    return result;
  v5 = a4;
  v6 = result;
  v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - result) >> 3)))
    return result;
  v10 = (0x5555555555555556 * ((a4 - result) >> 3)) | 1;
  v11 = (uint64_t *)(result + 24 * v10);
  v12 = 0x5555555555555556 * ((a4 - result) >> 3) + 2;
  if (v12 < a3)
  {
    v13 = *(_QWORD *)(*(_QWORD *)a2 + 280);
    if (!v13)
      goto LABEL_23;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, v6 + 24 * v10, v11 + 3))
    {
      v11 += 3;
      v10 = v12;
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)a2 + 280);
  if (!v14)
LABEL_23:
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v14 + 48))(v14, v11, v5);
  if ((_DWORD)result)
  {
    v15 = *(_QWORD *)v5;
    *(_QWORD *)&v20[5] = *(_QWORD *)(v5 + 5);
    *(_QWORD *)v20 = v15;
    v20[12] = *(_BYTE *)(v5 + 12);
    *(_BYTE *)(v5 + 12) = 0;
    v21 = *(_QWORD *)(v5 + 16);
    do
    {
      v16 = v5;
      v5 = (uint64_t)v11;
      std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100](v16, v11);
      if (v7 < v10)
        break;
      v17 = (2 * v10) | 1;
      v11 = (uint64_t *)(v6 + 24 * v17);
      v10 = 2 * v10 + 2;
      if (v10 >= a3)
      {
        v10 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(*(_QWORD *)a2 + 280);
        if (!v18)
          std::__throw_bad_function_call[abi:ne180100]();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, v6 + 24 * v17, v11 + 3))
        {
          v10 = v17;
        }
        else
        {
          v11 += 3;
        }
      }
      v19 = *(_QWORD *)(*(_QWORD *)a2 + 280);
      if (!v19)
        std::__throw_bad_function_call[abi:ne180100]();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v19 + 48))(v19, v11, v20) & 1) != 0);
    std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100](v5, (uint64_t *)v20);
    return std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)v20);
  }
  return result;
}

void sub_2182C78D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (uint64_t *)(a1 + 24 * v6 + 24);
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 280);
      if (!v12)
        std::__throw_bad_function_call[abi:ne180100]();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, a1 + 24 * v6 + 24, a1 + 24 * v6 + 48))
      {
        v9 += 3;
        v10 = v11;
      }
    }
    std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100](a1, v9);
    a1 = (uint64_t)v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,void turi::sarray_sorted_buffer<turi::flexible_type>::sort_and_write<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>)::{lambda(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long> const)#1} &,std::__wrap_iter<std::pair*>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[13];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = *(_QWORD *)(*(_QWORD *)a3 + 280);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    v9 = v4 >> 1;
    v10 = (uint64_t *)(v6 + 24 * (v4 >> 1));
    v11 = (uint64_t *)(a2 - 24);
    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v7 + 48))(v7, v10, a2 - 24);
    if ((result & 1) == 0)
    {
      v12 = *v11;
      *(_QWORD *)&v15[5] = *(uint64_t *)((char *)v11 + 5);
      *(_QWORD *)v15 = v12;
      v15[12] = *(_BYTE *)(a2 - 12);
      *(_BYTE *)(a2 - 12) = 0;
      v16 = *(_QWORD *)(a2 - 8);
      do
      {
        v13 = (uint64_t)v10;
        std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100]((uint64_t)v11, v10);
        if (!v9)
          break;
        v14 = *(_QWORD *)(*(_QWORD *)a3 + 280);
        if (!v14)
          std::__throw_bad_function_call[abi:ne180100]();
        v9 = (v9 - 1) >> 1;
        v10 = (uint64_t *)(v6 + 24 * v9);
        v11 = (uint64_t *)v13;
      }
      while (!(*(unsigned int (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v14 + 48))(v14, v10, v15));
      std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100](v13, (uint64_t *)v15);
      return std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)v15);
    }
  }
  return result;
}

void sub_2182C7B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
      result = turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_3::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4::operator()(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char **v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  int *v13;
  file_logger *v14;
  file_logger *started;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  uint64_t v19;
  std::string::size_type v20;
  turi::thread_pool *v21;
  _BYTE *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  turi::thread_pool *instance;
  turi::thread *v28;
  turi::thread_pool *tls_data;
  uint64_t v30;
  turi::thread_pool *v31;
  uint64_t v32;
  double v33;
  turi::thread *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int *v47;
  turi::sframe *v48;
  file_logger *v49;
  file_logger *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  const std::locale::facet *v57;
  turi::sgraph *v58;
  _QWORD *v59;
  _QWORD *exception;
  __int128 v61;
  int v62[2];
  _QWORD *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  std::vector<std::string> v70;
  timeval v71;
  void *__p;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  void *v78[2];
  unint64_t v79;
  uint64_t v80;
  timeval v81;
  uint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  std::locale v85;
  _QWORD v86[10];
  uint64_t *v87;
  _QWORD *v88;
  char v89;
  char v90;
  _BYTE v91[32];
  uint64_t v92;
  _QWORD v93[7];

  v93[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  gettimeofday(&v71, 0);
  memset(&v70, 0, sizeof(v70));
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v5 = *(_QWORD *)(v4 + 24);
  v6 = a2 - v5;
  if (a2 >= v5)
  {
    v10 = a1[5];
    v8 = *(_QWORD *)a1[4];
    if (&v70 != (std::vector<std::string> *)v10)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v70, *(std::string **)v10, *(__int128 **)(v10 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3));
    v11 = (char **)a1[6];
    if (&v67 != (void **)v11)
      std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(&v67, *v11, v11[1], v11[1] - *v11);
  }
  else
  {
    v7 = a1[2];
    v8 = *(_QWORD *)a1[1];
    if (&v70 != (std::vector<std::string> *)v7)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v70, *(std::string **)v7, *(__int128 **)(v7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3));
    v9 = (char **)a1[3];
    if (&v67 != (void **)v9)
      std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(&v67, *v9, v9[1], v9[1] - *v9);
    v6 = a2;
  }
  turi::sgraph::get_vertex_ids((turi::sgraph *)v4, v6, v8, (uint64_t *)&v65);
  _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hash_set<std::move_iterator<std::__wrap_iter<turi::flexible_type*>>>((uint64_t)v91, v65, v66, 0);
  v12 = *(_QWORD *)a1[7];
  turi::sarray<turi::flexible_type>::sarray((uint64_t)v86);
  if (v65 == v66)
  {
    turi::sarray<turi::flexible_type>::operator=((uint64_t)v86, v12 + 280 * a2);
  }
  else
  {
    turi::sarray<turi::flexible_type>::open_for_write((uint64_t)v86, 1, 0);
    turi::sarray<turi::flexible_type>::set_type((uint64_t)v86, *(char *)(v4 + 56));
    v63 = 0;
    v64 = 0;
    *(_QWORD *)v62 = &v63;
    v77 = v91;
    v76 = -1;
    v13 = (int *)global_logger();
    if (v13[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v13))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v14 = (file_logger *)global_logger();
      started = file_logger::start_stream(v14, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "copy_if", 141, 1);
      v16 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v16 && *((_BYTE *)v16 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)"Function entry", 14);
      v17 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v17)
      {
        if (*((_BYTE *)v17 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[2] - 24) + 16));
          v18 = std::locale::use_facet(&v85, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
          std::locale::~locale(&v85);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    v19 = v12 + 280 * a2;
    if (!*(_BYTE *)(v19 + 248) || *(_BYTE *)(v19 + 249))
      _ZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlvE_clEv();
    if (!v89 || !v90)
      _ZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlvE0_clEv();
    v20 = (*(uint64_t (**)(_QWORD *))(v86[0] + 24))(v86);
    turi::sarray<turi::flexible_type>::get_reader(v12 + 280 * a2, v20, &v75);
    __p = 0;
    v73 = 0;
    v74 = 0;
    if (v64)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::vector<unsigned long>>>(0, *(char **)v62, (char *)&v63, (uint64_t)&__p, (char **)&v85);
      v23 = __p;
      v22 = v73;
    }
    else
    {
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 16))(v75);
      std::vector<unsigned long>::resize((uint64_t)&__p, v24);
      v23 = __p;
      v22 = v73;
      if (v73 == __p)
      {
        v23 = v73;
      }
      else
      {
        v25 = 0;
        v26 = (v73 - (_BYTE *)__p) >> 3;
        if (v26 <= 1)
          v26 = 1;
        do
        {
          v23[v25] = v25;
          ++v25;
        }
        while (v26 != v25);
      }
    }
    v81.tv_sec = (__darwin_time_t)&v76;
    *(_QWORD *)&v81.tv_usec = &__p;
    v82 = &v75;
    v83 = v86;
    v84 = &v77;
    instance = (turi::thread_pool *)turi::thread_pool::get_instance(v21);
    v28 = (turi::thread *)turi::thread_pool::size(instance);
    tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v28);
    v30 = (v22 - (_BYTE *)v23) >> 3;
    if (*((_BYTE *)tls_data + 8) || (unint64_t)v28 <= 1)
    {
      if (v22 != (_BYTE *)v23)
      {
        v36 = 0;
        do
          _ZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlmE_clEm((uint64_t)&v81, v36++);
        while (v30 != v36);
      }
    }
    else
    {
      v31 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v85, v31);
      v32 = 0;
      v33 = (double)(unint64_t)v30 / (double)(unint64_t)v28;
      do
      {
        v34 = (turi::thread *)(v32 + 1);
        v35 = (unint64_t)(v33 * (double)(unint64_t)(v32 + 1) + 0.0);
        if ((turi::thread *)v32 == (turi::thread *)((char *)v28 - 1))
          v35 = (v22 - (_BYTE *)v23) >> 3;
        v79 = (unint64_t)(v33 * (double)(unint64_t)v32 + 0.0);
        v80 = v35;
        v78[0] = (char *)_ZZN5boost9function0IvE9assign_toIZN4turi12parallel_forIZNS3_7copy_ifIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__4clEmEUlRKS7_E_vvEEvOT_OT0_T1_NSt3__13setImNSL_4lessImEENSL_9allocatorImEEEEmEUlmE_EEvmmRKSG_EUlvE_EEvSG_E13stored_vtable
               + 1;
        v78[1] = &v81;
        turi::parallel_task_queue::launch((uint64_t)&v85, (uint64_t)v78, v32);
        boost::function0<void>::~function0((uint64_t *)v78);
        v32 = (uint64_t)v34;
      }
      while (v34 != v28);
      turi::parallel_task_queue::join((turi::parallel_task_queue *)&v85);
      turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v85);
    }
    if (__p)
    {
      v73 = __p;
      operator delete(__p);
    }
    v37 = v75;
    v75 = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v62, v63);
    turi::sarray<turi::flexible_type>::close((uint64_t)v86);
  }
  if (!v89 || (v38 = v87, v88 == v87))
  {
    v39 = 0;
  }
  else
  {
    v39 = 0;
    v40 = v88 - v87;
    if (v40 <= 1)
      v40 = 1;
    do
    {
      v41 = *v38++;
      v39 += v41;
      --v40;
    }
    while (v40);
  }
  turi::sframe::sframe((turi::sframe *)&v85);
  v42 = (unint64_t *)a1[8];
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 + v39, v42));
  std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::sarray<turi::flexible_type>&,void>((uint64_t)v86, &v61);
  std::string::basic_string[abi:ne180100]<0>(v78, turi::sgraph::VID_COLUMN_NAME);
  turi::sframe::add_column((uint64_t)&v85, &v61, (uint64_t)v78, (uint64_t)&v81);
  turi::sframe::operator=((uint64_t)&v85, (uint64_t)&v81);
  turi::sframe::~sframe((turi::sframe *)&v81);
  if (SHIBYTE(v79) < 0)
    operator delete(v78[0]);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (int *)global_logger();
  if (v47[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v47))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v49 = (file_logger *)global_logger();
    v50 = file_logger::start_stream(v49, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 766, 1);
    v51 = pthread_getspecific(*((_QWORD *)v50 + 74));
    if (v51 && *((_BYTE *)v51 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51 + 2, (uint64_t)"Finish writing new vertices in partition ", 41);
    v52 = file_logger::operator<<<unsigned long>((uint64_t)v50);
    v53 = pthread_getspecific(*(_QWORD *)(v52 + 592));
    if (v53 && *((_BYTE *)v53 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53 + 2, (uint64_t)" in ", 4);
    gettimeofday(&v81, 0);
    v54 = file_logger::operator<<<double>(v52);
    v55 = pthread_getspecific(*(_QWORD *)(v54 + 592));
    if (v55 && *((_BYTE *)v55 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55 + 2, (uint64_t)" secs", 5);
    v56 = pthread_getspecific(*(_QWORD *)(v54 + 592));
    if (v56)
    {
      if (*((_BYTE *)v56 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(_QWORD *)(v56[2] - 24) + 16));
        v57 = std::locale::use_facet((const std::locale *)&v81, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
        std::locale::~locale((std::locale *)&v81);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v54);
        if (*(_DWORD *)(v54 + 600) == 7)
        {
          __print_back_trace();
          v59 = __cxa_allocate_exception(8uLL);
          *v59 = "LOG_FATAL encountered";
          __cxa_throw(v59, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v78[0] = (void *)v6;
  __p = *(void **)(v4 + 24);
  if ((unint64_t)__p <= v6)
  {
    v81.tv_sec = (__darwin_time_t)v78;
    *(_QWORD *)&v81.tv_usec = &__p;
    turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v78[0] = (void *)v8;
  __p = *(void **)(v4 + 32);
  if ((unint64_t)__p <= v8)
  {
    v81.tv_sec = (__darwin_time_t)v78;
    *(_QWORD *)&v81.tv_usec = &__p;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v58 = (turi::sgraph *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 24 * v8) + 296 * v6);
  if ((turi::sgraph::union_columns(v58, (const void ***)&v85, v48) & 1) == 0)
    turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4::operator() const(unsigned long)::{lambda(void)#1}::operator()();
  turi::sframe::append(v58, (const turi::sframe *)&v85, (turi::sframe *)&v81);
  turi::sframe::operator=((uint64_t)v58, (uint64_t)&v81);
  turi::sframe::~sframe((turi::sframe *)&v81);
  turi::sframe::~sframe((turi::sframe *)&v85);
  turi::sarray<turi::flexible_type>::~sarray((uint64_t)v86);
  v85.__locale_ = (std::locale::__imp *)v93;
  std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo((uint64_t)&v92);
  v85.__locale_ = (std::locale::__imp *)&v65;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  v85.__locale_ = (std::locale::__imp *)&v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
}

void sub_2182C84F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::locale::~locale((std::locale *)&STACK[0x200]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a12, (_QWORD *)a13);
  turi::sarray<turi::flexible_type>::~sarray((uint64_t)&STACK[0x328]);
  _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::~sparse_hash_set(v21 - 208);
  STACK[0x328] = (unint64_t)&a15;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x328]);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  STACK[0x328] = (unint64_t)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x328]);
  _Unwind_Resume(a1);
}

void turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4::operator() const(unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"union_columns(old_vertices, new_vertices)", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 770, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4::operator() const(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182C8750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::~sparse_hash_set(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 56);
  std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo(a1 + 32);
  return a1;
}

uint64_t _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hash_set<std::move_iterator<std::__wrap_iter<turi::flexible_type*>>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unint64_t a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)_tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hashtable(a1, a4);
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert<std::move_iterator<std::__wrap_iter<turi::flexible_type*>>>(v7, a2, a3);
  return a1;
}

void sub_2182C887C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::~sparse_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hashtable(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0x3EA3D70A3F4CCCCDLL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (a2)
    v3 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, a2, 0);
  else
    v3 = 32;
  _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsetable((uint64_t *)(a1 + 56), v3);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

void sub_2182C8930(_Unwind_Exception *a1)
{
  uint64_t v1;

  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo(v1);
  _Unwind_Resume(a1);
}

unint64_t _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(uint64_t a1, unint64_t a2, unint64_t a3)
{
  float v3;
  unint64_t result;
  std::logic_error *exception;

  v3 = *(float *)(a1 + 16);
  for (result = 4; result < a3 || (unint64_t)(float)(v3 * (float)result) <= a2; result *= 2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::length_error::length_error[abi:ne180100](exception, "resize overflow");
      __cxa_throw(exception, (struct type_info *)off_24D916A78, (void (*)(void *))MEMORY[0x24BEDAAF0]);
    }
  }
  return result;
}

void sub_2182C89C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *_tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsetable(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD v5[2];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 0;
  if (a2)
    v3 = (a2 - 1) / 0x30uLL + 1;
  else
    v3 = 0;
  v5[0] = 0;
  v5[1] = 0;
  std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::resize(a1, v3, (uint64_t)v5);
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group((uint64_t)v5);
  return a1;
}

void sub_2182C8A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group((uint64_t)&a9);
  std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = (a1[1] - *a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 16 * a2);
  }
  else
  {
    std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__append(a1, a2 - v3, a3);
  }
}

uint64_t *std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__append(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  char *v21;
  _QWORD *v22;

  v5 = result;
  v6 = result[2];
  v7 = result[1];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      v14 = 16 * a2;
      v15 = v7 + 16 * a2;
      do
      {
        result = (uint64_t *)_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsegroup(v7, a3);
        v7 += 16;
        v14 -= 16;
      }
      while (v14);
      v7 = v15;
    }
    v5[1] = v7;
  }
  else
  {
    v8 = v7 - *result;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v6 - *result;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v22 = result + 2;
    if (v12)
      v13 = (char *)malloc_type_malloc(16 * v12, 0x1020040EDED9539uLL);
    else
      v13 = 0;
    v16 = (uint64_t)&v13[16 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v20 = v16;
    v21 = &v13[16 * v12];
    v17 = 16 * a2;
    v18 = v16 + 16 * a2;
    do
    {
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsegroup(v16, a3);
      v16 += 16;
      v17 -= 16;
    }
    while (v17);
    v20 = v18;
    std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__swap_out_circular_buffer(v5, v19);
    return (uint64_t *)std::__split_buffer<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>> &>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_2182C8BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsegroup(uint64_t a1, uint64_t a2)
{
  int v4;
  char *group;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  int v14;

  *(_QWORD *)a1 = 0;
  v4 = *(unsigned __int16 *)(a2 + 8);
  *(_WORD *)(a1 + 8) = v4;
  if (v4)
  {
    group = (char *)_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::allocate_group(a1, *(unsigned __int16 *)(a2 + 8));
    *(_QWORD *)a1 = group;
    if (*(_WORD *)(a2 + 8))
    {
      v6 = *(char **)a2;
      v7 = *(_QWORD *)a2 + 16 * *(unsigned __int16 *)(a2 + 8);
      do
      {
        *(_QWORD *)group = 0;
        *((_DWORD *)group + 2) = 0;
        group[12] = 0;
        if (v6 != group)
        {
          v8 = *(_QWORD *)v6;
          *(_QWORD *)(group + 5) = *(_QWORD *)(v6 + 5);
          *(_QWORD *)group = v8;
          LODWORD(v8) = v6[12];
          group[12] = v8;
          v9 = v8 > 9;
          v10 = (1 << v8) & 0x33C;
          if (!v9 && v10 != 0)
          {
            v12 = *(unint64_t **)group;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 + 1, v12));
          }
        }
        v6 += 16;
        group += 16;
      }
      while (v6 != (char *)v7);
    }
  }
  v14 = *(_DWORD *)(a2 + 10);
  *(_WORD *)(a1 + 14) = *(_WORD *)(a2 + 14);
  *(_DWORD *)(a1 + 10) = v14;
  return a1;
}

void *_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::allocate_group(uint64_t a1, unsigned int a2)
{
  void *result;

  result = malloc_type_malloc(16 * a2, 0x1022040F5B21F82uLL);
  if (!result)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "sparsehash FATAL ERROR: failed to allocate %lu groups\n", a2);
    exit(1);
  }
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 16;
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsegroup(v7 - 16, v9);
      v7 = *((_QWORD *)&v15 + 1) - 16;
      *((_QWORD *)&v15 + 1) -= 16;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2182C8E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  for (result = *(_QWORD *)(a2 + 32); result != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(result);
    result = *(_QWORD *)(a2 + 32) + 16;
  }
  return result;
}

uint64_t std::__split_buffer<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>> &>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    free(*(void **)a1);
  return a1;
}

void std::__split_buffer<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(a1 + 16) = v4 - 16;
    _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(v4 - 16);
  }
}

void std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8);
        i != a2;
        _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(i))
  {
    i -= 16;
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(uint64_t a1)
{
  unint64_t **v1;
  unint64_t **v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  void **v33;

  v1 = *(unint64_t ***)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_WORD *)(a1 + 8))
    {
      v3 = &v1[2 * *(unsigned __int16 *)(a1 + 8)];
      do
      {
        switch(*((_BYTE *)v1 + 12))
        {
          case 2:
            v4 = *v1;
            do
            {
              v5 = __ldaxr(v4);
              v6 = v5 - 1;
            }
            while (__stlxr(v6, v4));
            if (!v6)
            {
              v7 = *v1;
              if (*v1)
              {
                if (*((char *)v7 + 31) < 0)
                  operator delete((void *)v7[1]);
                v8 = v7;
                v9 = 0x1012C404EF22A49;
                goto LABEL_45;
              }
            }
            break;
          case 3:
            v10 = *v1;
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v13 = *v1;
              if (*v1)
              {
                v14 = (void *)v13[1];
                if (v14)
                {
                  v13[2] = (unint64_t)v14;
                  operator delete(v14);
                }
                v8 = v13;
                v9 = 0x1080C409938AC02;
                goto LABEL_45;
              }
            }
            break;
          case 4:
            v15 = *v1;
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              v18 = *v1;
              if (*v1)
              {
                v33 = (void **)(v18 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v33);
                goto LABEL_29;
              }
            }
            break;
          case 5:
            v19 = *v1;
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              v18 = *v1;
              if (*v1)
              {
                v33 = (void **)(v18 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v33);
LABEL_29:
                v8 = v18;
                v9 = 0x1020C405E66F15BLL;
                goto LABEL_45;
              }
            }
            break;
          case 8:
            v22 = *v1;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              v25 = *v1;
              if (*v1)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
                v8 = v25;
                v26 = -235920773;
                goto LABEL_44;
              }
            }
            break;
          case 9:
            v27 = *v1;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              v30 = *v1;
              if (*v1)
              {
                v31 = (void *)v30[6];
                if (v31)
                {
                  v30[7] = (unint64_t)v31;
                  operator delete(v31);
                }
                v32 = (void *)v30[3];
                if (v32)
                {
                  v30[4] = (unint64_t)v32;
                  operator delete(v32);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
                v8 = v30;
                v26 = 2071181815;
LABEL_44:
                v9 = v26 | 0x1030C4000000000;
LABEL_45:
                MEMORY[0x219A19A08](v8, v9);
              }
            }
            break;
          default:
            break;
        }
        *v1 = 0;
        *((_DWORD *)v1 + 2) = 0;
        *((_BYTE *)v1 + 12) = 0;
        v1 += 2;
      }
      while (v1 != v3);
      v1 = *(unint64_t ***)a1;
    }
    free(v1);
    *(_QWORD *)a1 = 0;
  }
}

void std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    free(**a1);
  }
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert<std::move_iterator<std::__wrap_iter<turi::flexible_type*>>>(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t result;
  std::logic_error *exception;
  uint64_t v10;

  v3 = a3 - a2;
  if (a3 - a2 == -16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "insert-range overflow");
    __cxa_throw(exception, (struct type_info *)off_24D916A78, (void (*)(void *))MEMORY[0x24BEDAAF0]);
  }
  v5 = a2;
  v7 = v3 >> 4;
  result = _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::resize_delta((uint64_t)a1, v3 >> 4);
  if (a3 != v5)
  {
    do
    {
      result = _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert_noresize(a1, v5, (uint64_t)&v10);
      v5 += 16;
      --v7;
    }
    while (v7);
  }
  return result;
}

void sub_2182C9528(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::resize_delta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  std::logic_error *exception;
  void **v15;
  _BYTE v16[32];
  uint64_t v17;
  _QWORD v18[6];

  v18[5] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 24))
    v4 = _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::maybe_shrink(a1);
  else
    v4 = 0;
  v5 = *(_QWORD *)(a1 + 88);
  if (v5 >= ~a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "resize overflow");
    __cxa_throw(exception, (struct type_info *)off_24D916A78, (void (*)(void *))MEMORY[0x24BEDAAF0]);
  }
  v6 = v5 + a2;
  if (*(_QWORD *)(a1 + 80) < 4uLL || v6 > *(_QWORD *)a1)
  {
    v7 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, v6, 0);
    v8 = *(_QWORD *)(a1 + 80);
    if (v7 > v8)
    {
      v9 = v7;
      v10 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, *(_QWORD *)(a1 + 88) + a2 - *(_QWORD *)(a1 + 48), v8);
      v11 = v10;
      v12 = v10 >= v9 || v10 > 0x7FFFFFFFFFFFFFFELL;
      if (!v12
        && *(_QWORD *)(a1 + 88) + a2 - *(_QWORD *)(a1 + 48) >= (unint64_t)(float)(*(float *)(a1 + 20)
                                                                                       * (float)(2 * v10)))
      {
        v11 = 2 * v10;
      }
      _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hashtable((uint64_t)v16, 0, a1, v11);
      _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::swap(a1, (uint64_t)v16);
      v15 = (void **)v18;
      std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v15);
      _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo((uint64_t)&v17);
      return 1;
    }
  }
  return v4;
}

void sub_2182C96C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::~sparse_hash_set((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert_noresize@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t position;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  _BYTE v17[48];
  __int128 v18;
  uint64_t v19;

  position = _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::find_position((uint64_t)a1, a2);
  if (position == -1)
  {
    result = _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert_at(a1, (uint64_t *)a2, v7, (uint64_t)v17);
    v14 = v18;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v17[32];
    *(_OWORD *)(a3 + 48) = v14;
    *(_QWORD *)(a3 + 64) = v19;
    v15 = *(_OWORD *)&v17[16];
    *(_OWORD *)a3 = *(_OWORD *)v17;
    *(_OWORD *)(a3 + 16) = v15;
    v11 = 1;
  }
  else
  {
    _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::get_iter(a1 + 7, position, v16);
    v8 = a1[7];
    v9 = a1[8];
    *(_QWORD *)v17 = a1;
    *(_OWORD *)&v17[8] = v16[0];
    *(_OWORD *)&v17[24] = v16[1];
    *(_QWORD *)&v17[40] = v8;
    *(_QWORD *)&v18 = v9;
    *((_QWORD *)&v18 + 1) = v9;
    v19 = 0;
    result = _tc_google::sparse_hashtable_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted((uint64_t)v17);
    v11 = 0;
    v12 = v18;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v17[32];
    *(_OWORD *)(a3 + 48) = v12;
    *(_QWORD *)(a3 + 64) = v19;
    v13 = *(_OWORD *)&v17[16];
    *(_OWORD *)a3 = *(_OWORD *)v17;
    *(_OWORD *)(a3 + 16) = v13;
  }
  *(_BYTE *)(a3 + 72) = v11;
  return result;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::maybe_shrink(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  void **v8;
  _BYTE v9[32];
  uint64_t v10;
  _QWORD v11[6];

  v11[5] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = v2 >= v3;
  else
    v4 = 1;
  if (v4 || (v5 = *(_QWORD *)(a1 + 80), v5 < 0x21))
  {
    result = 0;
  }
  else
  {
    do
    {
      v6 = v5;
      v5 >>= 1;
    }
    while (v6 >= 0x42 && v2 < (unint64_t)(float)(*(float *)(a1 + 20) * (float)v5));
    _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hashtable((uint64_t)v9, 0, a1, v5);
    _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::swap(a1, (uint64_t)v9);
    v8 = (void **)v11;
    std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo((uint64_t)&v10);
    result = 1;
  }
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

void sub_2182C98B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::~sparse_hash_set((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64x2_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::swap(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64x2_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64x2_t result;
  _BYTE v15[13];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64x2_t *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(uint64x2_t *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  v7 = a2 + 32;
  *(_QWORD *)&v15[5] = *(_QWORD *)(a1 + 37);
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 32);
  v15[12] = *(_BYTE *)(a1 + 44);
  *(_BYTE *)(a1 + 44) = 0;
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::operator=(a1 + 32, (uint64_t *)(a2 + 32));
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::operator=(v7, (uint64_t *)v15);
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo((uint64_t)v15);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v8;
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v9;
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v10;
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v11;
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v12;
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v13;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(_BYTE *)(a1 + 24) = 0;
  result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)*(unint64_t *)(a2 + 80))));
  *(uint64x2_t *)a2 = result;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparse_hashtable(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  __int128 v8;
  unint64_t **v9;
  unint64_t *v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;

  v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 32) = 0;
  v9 = (unint64_t **)(a1 + 32);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  if (a3 != a1)
  {
    v10 = *(unint64_t **)(a3 + 32);
    *(_QWORD *)(a1 + 37) = *(_QWORD *)(a3 + 37);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a3 + 44);
    *(_BYTE *)(a1 + 44) = v11;
    if (v11 <= 9 && ((1 << v11) & 0x33C) != 0)
    {
      v12 = *v9;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  *(_QWORD *)(a1 + 48) = 0;
  _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::sparsetable((uint64_t *)(a1 + 56), 0);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(_BYTE *)(a1 + 24) = 0;
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::move_from(a1, a2, (_QWORD *)a3, a4);
  return a1;
}

void sub_2182C9B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::~KeyInfo(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *_tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::move_from(uint64_t a1, int a2, _QWORD *a3, unint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::clear(a1);
  if (a2 == 1)
    v8 = a3[10];
  else
    v8 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, a3[11] - a3[6], a4);
  if (v8 > *(_QWORD *)(a1 + 80))
  {
    _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::resize((uint64_t *)(a1 + 56), v8);
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
    *(_BYTE *)(a1 + 24) = 0;
  }
  _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::destructive_begin((uint64_t)a3, (uint64_t)v29);
  while (1)
  {
    v9 = a3[7];
    v10 = a3[8];
    v20 = a3;
    v21 = v9;
    v22 = v10;
    v23 = v10;
    v24 = 0;
    v25 = v9;
    v26 = v10;
    v27 = v10;
    v28 = 0;
    result = (unsigned __int8 *)_tc_google::sparse_hashtable_destructive_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted((uint64_t)&v20);
    if (v30 != v21 || v31 != v22 || v32 != v23)
    {
      result = (unsigned __int8 *)v33;
      goto LABEL_11;
    }
    if (v32 == v31)
      break;
    result = (unsigned __int8 *)v33;
    if (v33 == v24)
      break;
LABEL_11:
    v12 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(result);
    v13 = *(_QWORD *)(a1 + 80) - 1;
    for (i = 1; ; ++i)
    {
      v15 = v12 & v13;
      v16 = (v12 & (unint64_t)v13) / 0x30;
      v17 = (v12 & (unint64_t)v13) % 0x30;
      v18 = *(_QWORD *)(a1 + 56) + 16 * v16;
      if (((*(unsigned __int8 *)(v18 + (v17 >> 3) + 10) >> (v17 & 7)) & 1) == 0)
        break;
      v12 = i + v15;
    }
    v19 = *(unsigned __int16 *)(v18 + 8);
    _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::set(v18, (unsigned __int16)v17, v33);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 88) - v19 + *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16 * v16 + 8);
    v33 += 2;
    _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>>::advance_past_end(&v30);
    _tc_google::sparse_hashtable_destructive_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted((uint64_t)v29);
  }
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64x2_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64x2_t result;

  if (*(_QWORD *)(a1 + 48) | *(_QWORD *)(a1 + 88))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v2 = *(_QWORD *)(a1 + 64);
    while (v3 != v2)
    {
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(v3);
      *(_QWORD *)(v3 + 8) = 0;
      v2 = *(_QWORD *)(a1 + 64);
      v3 += 16;
    }
    *(_QWORD *)(a1 + 88) = 0;
  }
  result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(uint64x2_t *)a1 = result;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

void _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  if (a2)
    v4 = (a2 - 1) / 0x30 + 1;
  else
    v4 = 0;
  v10[0] = 0;
  v10[1] = 0;
  std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>::resize(a1, v4, (uint64_t)v10);
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group((uint64_t)v10);
  if (a1[3] > a2)
  {
    v5 = a2 % 0x30;
    if (a2 % 0x30)
    {
      v6 = a1[1] - 16;
      do
        _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::erase(v6, (unsigned __int16)v5++);
      while ((unsigned __int16)v5 != 48);
    }
    a1[4] = 0;
    v7 = *a1;
    v8 = a1[1];
    if (*a1 != v8)
    {
      v9 = 0;
      do
      {
        v9 += *(unsigned __int16 *)(v7 + 8);
        v7 += 16;
      }
      while (v7 != v8);
      a1[4] = v9;
    }
  }
  a1[3] = a2;
}

void sub_2182C9E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::destructive_begin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;

  v4 = *(_QWORD **)(a1 + 56);
  v5 = *(_QWORD **)(a1 + 64);
  *(_QWORD *)&v9 = v4;
  *((_QWORD *)&v9 + 1) = v5;
  v10 = (unint64_t)v4;
  if (v4 == v5)
  {
    v6 = v4;
  }
  else
  {
    *((_QWORD *)&v10 + 1) = *v4;
    _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>>::advance_past_end(&v9);
    v4 = *(_QWORD **)(a1 + 56);
    v6 = *(_QWORD **)(a1 + 64);
  }
  *(_QWORD *)a2 = a1;
  v7 = v10;
  *(_OWORD *)(a2 + 8) = v9;
  *(_OWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = 0;
  return _tc_google::sparse_hashtable_destructive_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted(a2);
}

void _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::erase(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;
  int v5;
  unsigned int v7;

  v2 = a1 + (a2 >> 3);
  v4 = *(unsigned __int8 *)(v2 + 10);
  v3 = (_BYTE *)(v2 + 10);
  v5 = 1 << (a2 & 7);
  if ((v5 & v4) != 0)
  {
    v7 = _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset((unsigned __int8 *)(a1 + 10), a2);
    if (*(_WORD *)(a1 + 8) == 1)
    {
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(a1);
      *(_QWORD *)a1 = 0;
    }
    else
    {
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::erase_aux(a1, v7);
    }
    --*(_WORD *)(a1 + 8);
    *v3 &= ~(_BYTE)v5;
  }
}

uint64_t _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset(unsigned __int8 *a1, unsigned int a2)
{
  __int16 v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;

  v2 = 0;
  if (a2 >= 9)
  {
    v3 = ((unsigned __int16)(a2 - 9) >> 3) + 1;
    v4 = a1;
    do
    {
      v5 = *v4++;
      v2 += _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::bits_in_char(unsigned char)::bits_in[v5];
      LOWORD(a2) = a2 - 8;
    }
    while ((unsigned __int16)a2 > 8u);
    a1 += v3;
  }
  return (unsigned __int16)(v2
                          + _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::bits_in_char(unsigned char)::bits_in[~(-1 << a2) & (unint64_t)*a1]);
}

void _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::erase_aux(uint64_t a1, unsigned int a2)
{
  char *group;
  char *v5;
  uint64_t *v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  int v19;
  unint64_t *v21;
  unint64_t v22;

  group = (char *)_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::allocate_group(a1, (unsigned __int16)(*(_WORD *)(a1 + 8) - 1));
  v5 = group;
  v6 = *(uint64_t **)a1;
  if (a2)
  {
    v7 = group;
    v8 = &v6[2 * a2];
    do
    {
      *(_QWORD *)v7 = 0;
      *((_DWORD *)v7 + 2) = 0;
      v7[12] = 0;
      if (v6 != (uint64_t *)v7)
      {
        v9 = *v6;
        *(_QWORD *)(v7 + 5) = *(uint64_t *)((char *)v6 + 5);
        *(_QWORD *)v7 = v9;
        LODWORD(v9) = *((unsigned __int8 *)v6 + 12);
        v7[12] = v9;
        v10 = v9 > 9;
        v11 = (1 << v9) & 0x33C;
        if (!v10 && v11 != 0)
        {
          v13 = *(unint64_t **)v7;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
        }
      }
      v6 += 2;
      v7 += 16;
    }
    while (v6 != v8);
    v6 = *(uint64_t **)a1;
  }
  v15 = (uint64_t)&v6[2 * a2 + 2];
  v16 = &v6[2 * *(unsigned __int16 *)(a1 + 8)];
  if ((uint64_t *)v15 != v16)
  {
    v17 = &group[16 * a2];
    do
    {
      *(_QWORD *)v17 = 0;
      *((_DWORD *)v17 + 2) = 0;
      v17[12] = 0;
      if ((char *)v15 != v17)
      {
        v18 = *(_QWORD *)v15;
        *(_QWORD *)(v17 + 5) = *(_QWORD *)(v15 + 5);
        *(_QWORD *)v17 = v18;
        LODWORD(v18) = *(unsigned __int8 *)(v15 + 12);
        v17[12] = v18;
        v10 = v18 > 9;
        v19 = (1 << v18) & 0x33C;
        if (!v10 && v19 != 0)
        {
          v21 = *(unint64_t **)v17;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
      }
      v15 += 16;
      v17 += 16;
    }
    while ((uint64_t *)v15 != v16);
  }
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(a1);
  *(_QWORD *)a1 = v5;
}

uint64_t _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>>::advance_past_end(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = a1 + 2;
  result = a1[2];
  v4 = (_QWORD *)(result + 8);
  if (v3[1] == *(_QWORD *)result + 16 * *(unsigned __int16 *)(result + 8))
  {
    do
    {
      _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(result);
      *v4 = 0;
      v5 = a1[1];
      v6 = a1[2];
      result = v6 + 16;
      a1[2] = v6 + 16;
      if (v6 + 16 == v5)
        break;
      v7 = *(unsigned __int16 *)(v6 + 24);
      v4 = (_QWORD *)(v6 + 24);
      a1[3] = *(v4 - 1);
    }
    while (!v7);
  }
  return result;
}

uint64_t _tc_google::sparse_hashtable_destructive_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted(uint64_t result)
{
  uint64_t *v1;
  _QWORD *i;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)result;
  for (i = (_QWORD *)(result + 8);
        ;
        result = _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>>>>::advance_past_end(i))
  {
    if (v1[1] == v1[5])
    {
      v3 = v1[2];
      if (v3 == v1[6])
      {
        v4 = v1[3];
        if (v4 == v1[7] && (v4 == v3 || v1[4] == v1[8]))
          break;
      }
    }
    if (!*(_QWORD *)(*v1 + 48))
      break;
    result = std::equal_to<turi::flexible_type>::operator()[abi:ne180100](*v1 + 32, (unsigned __int8 *)(*v1 + 32), v1[4]);
    if (!(_DWORD)result)
      break;
    v1[4] += 16;
  }
  return result;
}

uint64_t _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::set(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  void **v48;

  v6 = a1 + 10;
  v7 = _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset((unsigned __int8 *)(a1 + 10), a2);
  v8 = v7;
  v9 = (_BYTE *)(v6 + (a2 >> 3));
  v10 = 1 << (a2 & 7);
  if ((v10 & *v9) != 0)
  {
    v11 = v7;
    v12 = *(_QWORD *)a1 + 16 * v7;
    switch(*(_BYTE *)(v12 + 12))
    {
      case 2:
        v13 = *(unint64_t **)v12;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = *(unint64_t **)v12;
          if (*(_QWORD *)v12)
          {
            if (*((char *)v16 + 31) < 0)
              operator delete((void *)v16[1]);
            v17 = v16;
            v18 = 0x1012C404EF22A49;
            goto LABEL_44;
          }
        }
        break;
      case 3:
        v19 = *(unint64_t **)v12;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = *(unint64_t **)v12;
          if (*(_QWORD *)v12)
          {
            v23 = (void *)v22[1];
            if (v23)
            {
              v22[2] = (unint64_t)v23;
              operator delete(v23);
            }
            v17 = v22;
            v18 = 0x1080C409938AC02;
            goto LABEL_44;
          }
        }
        break;
      case 4:
        v24 = *(unint64_t **)v12;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *(unint64_t **)v12;
          if (*(_QWORD *)v12)
          {
            v48 = (void **)(v27 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v48);
            goto LABEL_28;
          }
        }
        break;
      case 5:
        v28 = *(unint64_t **)v12;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v27 = *(unint64_t **)v12;
          if (*(_QWORD *)v12)
          {
            v48 = (void **)(v27 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v48);
LABEL_28:
            v17 = v27;
            v18 = 0x1020C405E66F15BLL;
            goto LABEL_44;
          }
        }
        break;
      case 8:
        v31 = *(unint64_t **)v12;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v34 = *(unint64_t **)v12;
          if (*(_QWORD *)v12)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v34 + 2);
            v17 = v34;
            v35 = -235920773;
            goto LABEL_43;
          }
        }
        break;
      case 9:
        v36 = *(unint64_t **)v12;
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          v39 = *(unint64_t **)v12;
          if (*(_QWORD *)v12)
          {
            v40 = (void *)v39[6];
            if (v40)
            {
              v39[7] = (unint64_t)v40;
              operator delete(v40);
            }
            v41 = (void *)v39[3];
            if (v41)
            {
              v39[4] = (unint64_t)v41;
              operator delete(v41);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v39 + 1));
            v17 = v39;
            v35 = 2071181815;
LABEL_43:
            v18 = v35 | 0x1030C4000000000;
LABEL_44:
            MEMORY[0x219A19A08](v17, v18);
          }
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v12 = 0;
    *(_DWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 12) = 0;
  }
  else
  {
    _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::set_aux(a1, v7);
    ++*(_WORD *)(a1 + 8);
    *v9 |= v10;
    v11 = v8;
  }
  v42 = *(_QWORD *)a1 + 16 * v11;
  *(_QWORD *)v42 = 0;
  *(_DWORD *)(v42 + 8) = 0;
  *(_BYTE *)(v42 + 12) = 0;
  if ((uint64_t *)v42 != a3)
  {
    v43 = *a3;
    *(_QWORD *)(v42 + 5) = *(uint64_t *)((char *)a3 + 5);
    *(_QWORD *)v42 = v43;
    v44 = *((unsigned __int8 *)a3 + 12);
    *(_BYTE *)(v42 + 12) = v44;
    if (v44 <= 9 && ((1 << v44) & 0x33C) != 0)
    {
      v45 = *(unint64_t **)v42;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 + 1, v45));
    }
  }
  return *(_QWORD *)a1 + 16 * v11;
}

void _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::set_aux(uint64_t a1, unsigned int a2)
{
  char *group;
  char *v5;
  uint64_t *v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t *v22;
  unint64_t v23;

  group = (char *)_tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::allocate_group(a1, (unsigned __int16)(*(_WORD *)(a1 + 8) + 1));
  v5 = group;
  v6 = *(uint64_t **)a1;
  if (a2)
  {
    v7 = group;
    v8 = &v6[2 * a2];
    do
    {
      *(_QWORD *)v7 = 0;
      *((_DWORD *)v7 + 2) = 0;
      v7[12] = 0;
      if (v6 != (uint64_t *)v7)
      {
        v9 = *v6;
        *(_QWORD *)(v7 + 5) = *(uint64_t *)((char *)v6 + 5);
        *(_QWORD *)v7 = v9;
        LODWORD(v9) = *((unsigned __int8 *)v6 + 12);
        v7[12] = v9;
        v10 = v9 > 9;
        v11 = (1 << v9) & 0x33C;
        if (!v10 && v11 != 0)
        {
          v13 = *(unint64_t **)v7;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
        }
      }
      v6 += 2;
      v7 += 16;
    }
    while (v6 != v8);
    v6 = *(uint64_t **)a1;
  }
  if (*(unsigned __int16 *)(a1 + 8) != a2)
  {
    v15 = &v6[2 * *(unsigned __int16 *)(a1 + 8)];
    v16 = &group[16 * a2];
    v17 = &v6[2 * a2];
    do
    {
      v18 = v16;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 16;
      *((_DWORD *)v16 + 2) = 0;
      v16[12] = 0;
      if (v17 != (uint64_t *)v16)
      {
        v19 = *v17;
        *(_QWORD *)(v16 + 5) = *(uint64_t *)((char *)v17 + 5);
        *(_QWORD *)v16 = v19;
        v20 = *((unsigned __int8 *)v17 + 12);
        v18[28] = v20;
        if (v20 <= 9 && ((1 << v20) & 0x33C) != 0)
        {
          v22 = *(unint64_t **)v16;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 + 1, v22));
        }
      }
      v17 += 2;
    }
    while (v17 != v15);
  }
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::free_group(a1);
  *(_QWORD *)a1 = v5;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::KeyInfo::operator=(uint64_t a1, uint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void **v35;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(_BYTE *)(a1 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a1;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a1;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a1;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v35);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a1;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v35);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a1;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a1;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)a1 = v33;
    *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
    *((_BYTE *)a2 + 12) = 0;
  }
  return a1;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::find_position(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v3 = *(_QWORD *)(a1 + 80) - 1;
  v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v5 = 0;
  v6 = -1;
  while (1)
  {
    v7 = v4 & v3;
    v8 = (v4 & (unint64_t)v3) / 0x30;
    v9 = (v4 & (unint64_t)v3) % 0x30;
    if (((*(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 16 * v8 + (v9 >> 3) + 10) >> (v9 & 7)) & 1) == 0)
      break;
    if (_tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::test_deleted(a1, v7))
    {
      if (v6 == -1)
        v6 = v7;
    }
    else
    {
      v10 = (unsigned __int16)v9;
      v11 = *(_QWORD *)(a1 + 56) + 16 * v8;
      v12 = *(_QWORD *)v11;
      v13 = _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset((unsigned __int8 *)(v11 + 10), v10);
      if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, a2, v12 + 16 * v13) & 1) != 0)
        return v7;
    }
    v4 = ++v5 + v7;
  }
  return -1;
}

uint64_t _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::get_iter@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v5 = *a1;
  v4 = a1[1];
  v6 = *a1 + 16 * (a2 / 0x30);
  v7 = *(_QWORD *)v6;
  result = _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset((unsigned __int8 *)(v6 + 10), a2 % 0x30);
  v9 = v7 + 16 * result;
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = v9;
  if (*(_QWORD *)v6 + 16 * *(unsigned __int16 *)(v6 + 8) == v9)
  {
    v10 = v6 + 16;
    while (v10 != v4)
    {
      a3[3] = *(_QWORD *)v10;
      v11 = *(unsigned __int16 *)(v10 + 8);
      v10 += 16;
      if (v11)
      {
        v4 = v10 - 16;
        break;
      }
    }
    a3[2] = v4;
  }
  return result;
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::insert_at@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::logic_error *exception;
  _OWORD v15[2];

  if (a1[11] - a1[6] >= 0xFFFFFFFFFFFFFFFuLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "insert overflow");
    __cxa_throw(exception, (struct type_info *)off_24D916A78, (void (*)(void *))MEMORY[0x24BEDAAF0]);
  }
  if (_tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::test_deleted((uint64_t)a1, a3))--a1[6];
  v8 = a1[7] + 16 * (a3 / 0x30);
  v9 = *(unsigned __int16 *)(v8 + 8);
  _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::set(v8, a3 % 0x30, a2);
  a1[11] = a1[11] - v9 + *(unsigned __int16 *)(a1[7] + 16 * (a3 / 0x30) + 8);
  _tc_google::sparsetable<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::get_iter(a1 + 7, a3, v15);
  v10 = a1[7];
  v11 = a1[8];
  *(_QWORD *)a4 = a1;
  v12 = v15[1];
  *(_OWORD *)(a4 + 8) = v15[0];
  *(_OWORD *)(a4 + 24) = v12;
  *(_QWORD *)(a4 + 40) = v10;
  *(_QWORD *)(a4 + 48) = v11;
  *(_QWORD *)(a4 + 56) = v11;
  *(_QWORD *)(a4 + 64) = 0;
  return _tc_google::sparse_hashtable_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted(a4);
}

void sub_2182CAB80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::test_deleted(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)(a1 + 48))
    return 0;
  v3 = *(_QWORD *)(a1 + 56) + 16 * (a2 / 0x30);
  if (((*(unsigned __int8 *)(v3 + ((a2 % 0x30) >> 3) + 10) >> ((a2 % 0x30) & 7)) & 1) == 0)
    return 0;
  v4 = *(_QWORD *)v3;
  v5 = v4
     + 16
     * _tc_google::sparsegroup<turi::flexible_type,(unsigned short)48,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::pos_to_offset((unsigned __int8 *)(v3 + 10), a2 % 0x30);
  return std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)(a1 + 32), v5);
}

uint64_t _tc_google::sparse_hashtable_iterator<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::advance_past_deleted(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v1 = (_QWORD *)result;
  while (1)
  {
    if (v1[1] == v1[5])
    {
      v2 = v1[2];
      if (v2 == v1[6])
      {
        v3 = v1[3];
        if (v3 == v1[7] && (v3 == v2 || v1[4] == v1[8]))
          return result;
      }
    }
    if (!*(_QWORD *)(*v1 + 48))
      return result;
    result = std::equal_to<turi::flexible_type>::operator()[abi:ne180100](*v1 + 32, (unsigned __int8 *)(*v1 + 32), v1[4]);
    if (!(_DWORD)result)
      return result;
    v4 = v1[3];
    v5 = v1[4] + 16;
    v1[4] = v5;
    if (v5 == *(_QWORD *)v4 + 16 * *(unsigned __int16 *)(v4 + 8))
    {
      v6 = v1[2];
      v7 = v4 + 16;
      while (v7 != v6)
      {
        v1[4] = *(_QWORD *)v7;
        v8 = *(unsigned __int16 *)(v7 + 8);
        v7 += 16;
        if (v8)
        {
          v6 = v7 - 16;
          break;
        }
      }
      v1[3] = v6;
    }
  }
}

void _ZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlvE_clEv()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 142, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  _ZZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlvE_clEvENKUlvE_clEv();
}

void sub_2182CADE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void _ZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlvE0_clEv()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 143, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  _ZZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlvE0_clEvENKUlvE_clEv();
}

void sub_2182CAF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

unint64_t _ZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlmE_clEm(uint64_t a1, uint64_t a2)
{
  turi::random::generator *source;
  unint64_t v5;
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  __int128 v37;
  _BYTE v38[13];
  __int128 v39;
  __int128 v40;
  _BYTE v41[13];
  __int128 v42;
  _BYTE v43[24];
  _BYTE *v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  __int128 v55;
  _BYTE v56[13];
  __int128 v57;
  __int128 v58;
  _BYTE v59[13];
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (**(_QWORD **)a1 != -1)
  {
    source = turi::random::get_source((turi::random *)a1);
    turi::random::generator::seed(source, **(_QWORD **)a1 + a2);
  }
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8 * a2);
  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 16))(**(_QWORD **)(a1 + 16));
  if (v5 < result)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 16) + 32))(&v58, **(_QWORD **)(a1 + 16), v5);
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 16) + 40))(&v55, **(_QWORD **)(a1 + 16), v5);
    (*(void (**)(_QWORD *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 32))(v49, *(_QWORD *)(a1 + 24), v5);
    v40 = v58;
    *(_QWORD *)&v41[5] = *(_QWORD *)&v59[5];
    *(_QWORD *)v41 = *(_QWORD *)v59;
    v41[12] = v59[12];
    if (v59[12] <= 9u && ((1 << v59[12]) & 0x33C) != 0)
    {
      do
        v7 = __ldaxr(*(unint64_t **)v41);
      while (__stlxr(v7 + 1, *(unint64_t **)v41));
    }
    v42 = v60;
    v37 = v55;
    *(_QWORD *)&v38[5] = *(_QWORD *)&v56[5];
    *(_QWORD *)v38 = *(_QWORD *)v56;
    v38[12] = v56[12];
    if (v56[12] <= 9u && ((1 << v56[12]) & 0x33C) != 0)
    {
      do
        v8 = __ldaxr(*(unint64_t **)v38);
      while (__stlxr(v8 + 1, *(unint64_t **)v38));
    }
    v39 = v57;
    v9 = (uint64_t)v50;
    if (v50)
    {
      if (v50 == v49)
      {
        v32 = v31;
        (*(void (**)(_QWORD *, _BYTE *))(v49[0] + 24))(v49, v31);
LABEL_15:
        v10 = v33;
        v11 = v51;
        v12 = (uint64_t)v52;
        if (v52)
        {
          if (v52 == v51)
          {
            v34 = v33;
            (*(void (**)(_QWORD *, _BYTE *))(v51[0] + 24))(v51, v33);
LABEL_20:
            v13 = v35;
            v14 = v53;
            v15 = (uint64_t)v54;
            if (v54)
            {
              if (v54 == v53)
              {
                v36 = v35;
                (*(void (**)(_QWORD *, _BYTE *))(v53[0] + 24))(v53, v35);
                goto LABEL_25;
              }
              v15 = (*(uint64_t (**)(void))(*v54 + 16))();
            }
            v36 = (_BYTE *)v15;
LABEL_25:
            v16 = **(_QWORD **)(a1 + 32);
            while (v40 != v37 || (_QWORD)v42 != (_QWORD)v39)
            {
              if (_tc_google::sparse_hashtable<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::Identity,_tc_google::sparse_hash_set<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<turi::flexible_type>>::find_position(v16, v41) == -1)
              {
                if (!v32)
                  std::__throw_bad_function_call[abi:ne180100]();
                (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v32 + 48))(v32, v41);
              }
              turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)&v40);
            }
            std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v31);
            std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v45, (uint64_t)v33);
            std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v47, (uint64_t)v35);
            v17 = v48;
            if (v48 == v47)
            {
              v18 = 4;
              v17 = v47;
            }
            else
            {
              if (!v48)
                goto LABEL_37;
              v18 = 5;
            }
            (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_37:
            v19 = v46;
            if (v46 == v45)
            {
              v20 = 4;
              v19 = v45;
            }
            else
            {
              if (!v46)
                goto LABEL_42;
              v20 = 5;
            }
            (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_42:
            v21 = v44;
            if (v44 == v43)
            {
              v22 = 4;
              v21 = v43;
            }
            else
            {
              if (!v44)
                goto LABEL_47;
              v22 = 5;
            }
            (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_47:
            if (v36 == v35)
            {
              v23 = 4;
            }
            else
            {
              if (!v36)
                goto LABEL_52;
              v23 = 5;
              v13 = v36;
            }
            (*(void (**)(_QWORD *))(*v13 + 8 * v23))(v13);
LABEL_52:
            if (v34 == v33)
            {
              v24 = 4;
            }
            else
            {
              if (!v34)
                goto LABEL_57;
              v24 = 5;
              v10 = v34;
            }
            (*(void (**)(_QWORD *))(*v10 + 8 * v24))(v10);
LABEL_57:
            v25 = v32;
            if (v32 == v31)
            {
              v26 = 4;
              v25 = v31;
            }
            else
            {
              if (!v32)
                goto LABEL_62;
              v26 = 5;
            }
            (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_62:
            turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v37);
            turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v40);
            if (v54 == v53)
            {
              v27 = 4;
            }
            else
            {
              if (!v54)
                goto LABEL_67;
              v27 = 5;
              v14 = v54;
            }
            (*(void (**)(_QWORD *))(*v14 + 8 * v27))(v14);
LABEL_67:
            if (v52 == v51)
            {
              v28 = 4;
            }
            else
            {
              if (!v52)
                goto LABEL_72;
              v28 = 5;
              v11 = v52;
            }
            (*(void (**)(_QWORD *))(*v11 + 8 * v28))(v11);
LABEL_72:
            v29 = v50;
            if (v50 == v49)
            {
              v30 = 4;
              v29 = v49;
            }
            else
            {
              if (!v50)
              {
LABEL_77:
                turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v55);
                return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v58);
              }
              v30 = 5;
            }
            (*(void (**)(void))(*v29 + 8 * v30))();
            goto LABEL_77;
          }
          v12 = (*(uint64_t (**)(void))(*v52 + 16))();
        }
        v34 = (_BYTE *)v12;
        goto LABEL_20;
      }
      v9 = (*(uint64_t (**)(void))(*v50 + 16))();
    }
    v32 = (_BYTE *)v9;
    goto LABEL_15;
  }
  return result;
}

void sub_2182CB4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  _QWORD *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;

  if (a16 == v46)
  {
    v49 = 4;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v49 = 5;
    v46 = a16;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v49))(v46);
LABEL_6:
  v50 = a12;
  if (a12 == &a9)
  {
    v51 = 4;
    v50 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_11;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_11:
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a21);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a27);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a46);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v47 - 168);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v47 - 120);
  _Unwind_Resume(a1);
}

uint64_t _ZN5boost6detail8function15functor_managerIZN4turi12parallel_forIZNS3_7copy_ifIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__4clEmEUlRKS7_E_vvEEvOT_OT0_T1_NSt3__13setImNSL_4lessImEENSL_9allocatorImEEEEmEUlmE_EEvmmRKSG_EUlvE_E6manageERKNS1_15function_bufferERSX_NS1_30functor_manager_operation_typeE(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_QWORD *)a2 = &_ZTIZN4turi12parallel_forIZNS_7copy_ifIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS3_E_vvEEvOT_OT0_T1_NSt3__13setImNSH_4lessImEENSH_9allocatorImEEEEmEUlmE_EEvmmRKSC_EUlvE_;
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_7copy_ifIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgr"
                                        "aph18commit_edge_bufferEmmNS_6sframeEENK3$_4clEmEUlRKS3_E_vvEEvOT_OT0_T1_NSt3__1"
                                        "3setImNSH_4lessImEENSH_9allocatorImEEEEmEUlmE_EEvmmRKSC_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_7copy_ifIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3$_4clEmEUlRKS3_E_vvEEvOT_OT0_T1_NSt3__13setImNSH_4lessImEENSH_9allocatorImEEEEmEUlmE_EEvmmRKSC_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t _ZN5boost6detail8function26void_function_obj_invoker0IZN4turi12parallel_forIZNS3_7copy_ifIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__4clEmEUlRKS7_E_vvEEvOT_OT0_T1_NSt3__13setImNSL_4lessImEENSL_9allocatorImEEEEmEUlmE_EEvmmRKSG_EUlvE_vE6invokeERNS1_15function_bufferE(unint64_t result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = (uint64_t *)result;
    do
      result = _ZZN4turi7copy_ifIRNS_6sarrayINS_13flexible_typeEEES4_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__4clEmEUlRKS2_E_vvEEvOT_OT0_T1_NSt3__13setImNSG_4lessImEENSG_9allocatorImEEEEmENKUlmE_clEm(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEE3$_4EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEE3$_4EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4 const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  unint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i < *(_QWORD *)(a1 + 16); ++i)
    turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_4::operator()(*(uint64_t **)a1, i);
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 4));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D936C28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D936C28;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::operator()(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  turi::sgraph *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *i;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  turi::thread_pool *instance;
  turi::thread *v28;
  turi::thread_pool *tls_data;
  uint64_t v30;
  turi::thread_pool *v31;
  uint64_t v32;
  double v33;
  turi::thread *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int *v44;
  file_logger *v45;
  file_logger *started;
  uint64_t v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  int *v50;
  file_logger *v51;
  file_logger *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  const std::locale::facet *v56;
  uint64_t v57;
  _QWORD *exception;
  _QWORD *v59;
  std::locale v60;
  uint64_t v61;
  turi::sgraph *v62;
  void *v63;
  _BYTE *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  int v68;
  __int128 v69;
  __int128 v70;
  int v71;
  __int128 __p;
  unint64_t v73;
  uint64_t v74;
  __int128 *v75;
  __int128 v76;
  _QWORD v77[11];
  char v78;
  _QWORD v79[20];

  v79[19] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = (turi::sgraph *)a1[4];
  v69 = 0u;
  v70 = 0u;
  v71 = 1065353216;
  if (v3 != v4)
  {
    v6 = v3;
    do
    {
      v7 = (_QWORD *)a1[1];
      *(_QWORD *)&v76 = *v6;
      *((_QWORD *)&v76 + 1) = *v7;
      std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v69, &v76, &v76);
      v8 = (_QWORD *)a1[2];
      *(_QWORD *)&v76 = v6[1];
      *((_QWORD *)&v76 + 1) = *v8;
      std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v69, &v76, &v76);
      v6 += 2;
    }
    while (v6 != v4);
  }
  v66 = 0u;
  v67 = 0u;
  v68 = 1065353216;
  v9 = *(_QWORD **)(a1[3] + 16);
  if (v9)
  {
    do
    {
      if (std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::find<std::pair<unsigned long,unsigned long>>(&v69, v9 + 2))
      {
        v10 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(&v69, v9 + 2);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::erase(&v69, v10);
      }
      else
      {
        std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v66, v9 + 2, (_OWORD *)v9 + 1);
      }
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    for (i = (_QWORD *)v67; i; i = (_QWORD *)*i)
    {
      v12 = (_QWORD *)a1[3];
      v13 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::flexible_type>>>>::find<std::pair<unsigned long,unsigned long>>(v12, i + 2);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::remove(v12, v13, (uint64_t)&v76);
      std::unique_ptr<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>>>>::reset[abi:ne180100]((uint64_t)&v76, 0);
    }
  }
  v14 = (_QWORD *)v70;
  if ((_QWORD)v70)
  {
    do
    {
      v76 = 0uLL;
      v15 = a1[3];
      *(_QWORD *)&__p = v14 + 2;
      v16 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v15, v14 + 2, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v16 + 4), &v76);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v14 = (_QWORD *)*v14;
    }
    while (v14);
    v20 = (uint64_t *)v70;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v21 = 0;
    if ((_QWORD)v70)
    {
      v22 = (_QWORD *)v70;
      do
      {
        ++v21;
        v22 = (_QWORD *)*v22;
      }
      while (v22);
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
  }
  v23 = std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::pair<unsigned long,unsigned long>,void *> *>,std::__hash_const_iterator<std::__hash_node<std::pair<unsigned long,unsigned long>,void *> *>>((char *)&v63, v20, 0, v21);
  v25 = v63;
  v24 = v64;
  v26 = a1[3];
  v60.__locale_ = (std::locale::__imp *)&v63;
  v61 = v26;
  v62 = v5;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)v23);
  v28 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v28);
  v30 = (v24 - v25) >> 4;
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v28 <= 1)
  {
    if (v24 != v25)
    {
      v36 = 0;
      do
      {
        v76 = *(_OWORD *)(*(_QWORD *)v60.__locale_ + 16 * v36);
        turi::sgraph::fetch_vid_hash_map(v62, (void **)v76, *((void ***)&v76 + 1), &__p);
        v75 = &v76;
        v37 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v61, &v76, (uint64_t)&std::piecewise_construct, &v75);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v37 + 4), &__p);
        v38 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v39 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        ++v36;
      }
      while (v36 != v30);
    }
  }
  else
  {
    v31 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v76, v31);
    v32 = 0;
    v33 = (double)(unint64_t)v30 / (double)(unint64_t)v28;
    do
    {
      v34 = (turi::thread *)(v32 + 1);
      v35 = (unint64_t)(v33 * (double)(unint64_t)(v32 + 1) + 0.0);
      if ((turi::thread *)v32 == (turi::thread *)((char *)v28 - 1))
        v35 = (v24 - v25) >> 4;
      v73 = (unint64_t)(v33 * (double)(unint64_t)v32 + 0.0);
      v74 = v35;
      *(_QWORD *)&__p = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1})::stored_vtable
                      + 1;
      *((_QWORD *)&__p + 1) = &v60;
      turi::parallel_task_queue::launch((uint64_t)&v76, (uint64_t)&__p, v32);
      boost::function0<void>::~function0((uint64_t *)&__p);
      v32 = (uint64_t)v34;
    }
    while (v34 != v28);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&v76);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v76);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v76);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Processing edge partitions: ", 28);
  if (v3 != v4)
  {
    v41 = v3;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"(", 1);
      v42 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" , ", 3);
      v43 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") ", 2);
      v41 += 2;
    }
    while (v41 != v4);
  }
  v44 = (int *)global_logger();
  if (v44[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v44))
      goto LABEL_63;
    v45 = (file_logger *)global_logger();
    started = file_logger::start_stream(v45, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 829, 1);
    std::stringbuf::str();
    v47 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v48 = pthread_getspecific(*(_QWORD *)(v47 + 592));
    if (v48)
    {
      if (*((_BYTE *)v48 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(v48[2] - 24) + 16));
        v49 = std::locale::use_facet(&v60, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
        std::locale::~locale(&v60);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v47);
        if (*(_DWORD *)(v47 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v73) < 0)
      operator delete((void *)__p);
  }
  v50 = (int *)global_logger();
  if (v50[169] > 2)
    goto LABEL_56;
  if (cppipc::must_cancel((cppipc *)v50))
LABEL_63:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v51 = (file_logger *)global_logger();
  v52 = file_logger::start_stream(v51, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 830, 1);
  v53 = pthread_getspecific(*((_QWORD *)v52 + 74));
  if (v53 && *((_BYTE *)v53 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53 + 2, (uint64_t)"Number of vid maps in cache: ", 29);
  v54 = file_logger::operator<<<unsigned long>((uint64_t)v52);
  v55 = pthread_getspecific(*(_QWORD *)(v54 + 592));
  if (v55)
  {
    if (*((_BYTE *)v55 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(_QWORD *)(v55[2] - 24) + 16));
      v56 = std::locale::use_facet(&v60, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
      std::locale::~locale(&v60);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v54);
      if (*(_DWORD *)(v54 + 600) == 7)
      {
        __print_back_trace();
        v59 = __cxa_allocate_exception(8uLL);
        *v59 = "LOG_FATAL encountered";
        __cxa_throw(v59, MEMORY[0x24BEDB718], 0);
      }
    }
  }
LABEL_56:
  *(_QWORD *)&v76 = *MEMORY[0x24BEDB7F0];
  v57 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v77[-2] + *(_QWORD *)(v76 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v77[0] = v57;
  v77[1] = MEMORY[0x24BEDB848] + 16;
  if (v78 < 0)
    operator delete((void *)v77[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](v79);
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&v66);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&v69);
  if (v3)
    operator delete(v3);
}

void sub_2182CBFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  void *v55;
  uint64_t v57;

  std::locale::~locale((std::locale *)&a9);
  a36 = *MEMORY[0x24BEDB7F0];
  v57 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a36 + *(_QWORD *)(a36 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a38 = v57;
  a39 = MEMORY[0x24BEDB848] + 16;
  if (a52 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&a55);
  if (a12)
  {
    a13 = (uint64_t)a12;
    operator delete(a12);
  }
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&a15);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)&a21);
  if (v55)
    operator delete(v55);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target_type()
{
}

_QWORD *std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = a2[1];
  v7 = v6 ^ *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v6 ^ *a2;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == v6)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_42:
    *v21 = i;
    goto LABEL_43;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2182CC35C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::pair<unsigned long,unsigned long>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::find<std::pair<unsigned long,unsigned long>>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1];
  v4 = v3 ^ *a2;
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v3 ^ *a2;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v4 == v9)
      {
        if (result[2] == *a2 && result[3] == v3)
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v2)
            v9 %= *(_QWORD *)&v2;
        }
        else
        {
          v9 &= *(_QWORD *)&v2 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = a2[1];
  v8 = v7 ^ *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v7 ^ *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == v7)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x30uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + 1) = **a4;
  v16[4] = 0;
  v16[5] = 0;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v12 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_2182CC678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::pair<unsigned long,unsigned long>,void *> *>,std::__hash_const_iterator<std::__hash_node<std::pair<unsigned long,unsigned long>,void *> *>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *((_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_2182CC6E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3$_5clENS"
                                        "t3__16vectorINS4_4pairImmEENS4_9allocatorIS7_EEEEEUlmE_EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3$_5clENSt3__16vectorINS4_4pairImmEENS4_9allocatorIS7_EEEEEUlmE_EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5::operator() const(std::vector<std::pair<unsigned long,unsigned long>>)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(_QWORD *a1)
{
  unint64_t i;
  uint64_t v3;
  turi::sgraph *v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;

  for (i = a1[1]; i < a1[2]; ++i)
  {
    v3 = *a1;
    v4 = *(turi::sgraph **)(*a1 + 16);
    v11 = *(_OWORD *)(**(_QWORD **)*a1 + 16 * i);
    turi::sgraph::fetch_vid_hash_map(v4, (void **)v11, *((void ***)&v11 + 1), &v10);
    v5 = *(_QWORD *)(v3 + 8);
    v12 = &v11;
    v6 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v6 + 4), &v10);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2182CC880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_5>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::operator()(a10);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24D936CC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D936CC8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::operator()(uint64_t a1, unint64_t *a2)
{
  char *v3;
  unint64_t v4;
  uint64_t v5;
  turi::sgraph *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  int *v38;
  file_logger *v39;
  file_logger *started;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  std::string::size_type v44;
  turi::thread_pool *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  turi::thread_pool *instance;
  turi::thread *v52;
  turi::thread_pool *tls_data;
  uint64_t v54;
  turi::thread_pool *v55;
  uint64_t v56;
  double v57;
  turi::thread *v58;
  uint64_t v59;
  uint64_t v60;
  const void **p_data;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  int *v66;
  file_logger *v67;
  file_logger *v68;
  _QWORD *v69;
  _QWORD *v70;
  const std::locale::facet *v71;
  std::string::size_type v72;
  turi::thread_pool *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  turi::thread_pool *v79;
  turi::thread *v80;
  turi::thread_pool *v81;
  uint64_t v82;
  turi::thread_pool *v83;
  uint64_t v84;
  double v85;
  turi::thread *v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t i;
  uint64_t j;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  size_t v104;
  size_t v105;
  unsigned __int8 *v106;
  char *v107;
  size_t v108;
  const void *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  turi::sframe *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *exception;
  _QWORD *v145;
  uint64_t v146;
  turi::sgraph *v147;
  unint64_t v148;
  unint64_t v149;
  std::string *v150;
  std::string *v151;
  const void **v152;
  int v153[2];
  _QWORD *v154;
  uint64_t v155;
  int v156[2];
  _QWORD *v157;
  uint64_t v158;
  _BYTE *v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  __int128 v168;
  _OWORD *v169;
  const void ***v170;
  char v171;
  __int128 v172;
  unint64_t v173;
  _QWORD v174[3];
  __int128 v175[15];
  void *__p;
  uint64_t v177;
  char v178;
  __int128 v179;
  uint64_t v180;
  int *v181;
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v3 = (char *)a2[1];
  v6 = *(turi::sgraph **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *((_QWORD *)v6 + 3);
  v8 = *(uint64_t **)(a1 + 24);
  __p = (void *)*a2;
  v177 = *v8;
  *(_QWORD *)&v172 = &__p;
  v9 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v5, &__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v172);
  v10 = (std::__shared_weak_count *)v9[5];
  v166 = v9[4];
  v167 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(uint64_t **)(a1 + 32);
  __p = v3;
  v177 = *v14;
  *(_QWORD *)&v172 = &__p;
  v15 = std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::hash<std::pair<unsigned long,unsigned long>>,std::equal_to<std::pair<unsigned long,unsigned long>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned long>,std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>,std::equal_to<std::pair<unsigned long,unsigned long>>,std::hash<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long> const&>,std::tuple<>>(v13, &__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v172);
  v16 = (std::__shared_weak_count *)v15[5];
  v164 = v15[4];
  v165 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = **(_QWORD **)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::SRC_COLUMN_NAME);
  v147 = v6;
  v148 = v4;
  v149 = (unint64_t)v3;
  v20 = &v3[v7 * v4];
  v21 = v19 + 296 * (_QWORD)v20;
  v23 = *(_QWORD *)(v21 + 48);
  v22 = (uint64_t *)(v21 + 48);
  v24 = v22 - 1;
  v25 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(v22 - 1), v23, (unsigned __int8 **)&__p);
  if (v25 == *v22)
  {
    *(_QWORD *)&v172 = &__p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v26 = v25;
  v27 = *v24;
  if (v178 < 0)
    operator delete(__p);
  v146 = a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::DST_COLUMN_NAME);
  v28 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*v24, *v22, (unsigned __int8 **)&__p);
  if (v28 == *v22)
  {
    *(_QWORD *)&v172 = &__p;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v29 = v28;
  v30 = (v26 - v27) >> 3;
  v31 = v19 + 296 * (_QWORD)v20;
  v32 = 0xAAAAAAAAAAAAAAABLL * v30;
  v33 = *v24;
  if (v178 < 0)
    operator delete(__p);
  turi::sframe::select_column(v31, v32, &v163);
  turi::sframe::select_column(v31, 0xAAAAAAAAAAAAAAABLL * ((v29 - v33) >> 3), &v162);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v161);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v159);
  v34 = v161;
  v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v163 + 24))(v163);
  turi::sarray<turi::flexible_type>::open_for_write(v34, v35, 0);
  turi::sarray<turi::flexible_type>::set_type(v161, 0);
  v36 = v163;
  v37 = (_BYTE *)v161;
  v157 = 0;
  v158 = 0;
  *(_QWORD *)v156 = &v157;
  *(_QWORD *)v153 = &v166;
  v38 = (int *)global_logger();
  if (v38[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v38))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v39 = (file_logger *)global_logger();
    started = file_logger::start_stream(v39, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "transform", 67, 1);
    v41 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v41 && *((_BYTE *)v41 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41 + 2, (uint64_t)"Function entry", 14);
    v42 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v42)
    {
      if (*((_BYTE *)v42 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(v42[2] - 24) + 16));
        v43 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (!*(_BYTE *)(v36 + 248) || *(_BYTE *)(v36 + 249))
    turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(void)#1}::operator()();
  if (!v37[248] || !v37[249])
    turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(void)#2}::operator()();
  v44 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v37 + 24))(v37);
  turi::sarray<turi::flexible_type>::get_reader(v36, v44, (uint64_t *)&v150);
  v168 = 0uLL;
  v169 = 0;
  if (v158)
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::vector<unsigned long>>>(0, *(char **)v156, (char *)&v157, (uint64_t)&v168, (char **)&__p);
    v46 = *((_QWORD *)&v168 + 1);
    v47 = v168;
  }
  else
  {
    v48 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v37 + 24))(v37);
    std::vector<unsigned long>::resize((uint64_t)&v168, v48);
    v46 = *((_QWORD *)&v168 + 1);
    v47 = v168;
    if (*((_QWORD *)&v168 + 1) == (_QWORD)v168)
    {
      v47 = *((_QWORD *)&v168 + 1);
    }
    else
    {
      v49 = 0;
      v50 = (uint64_t)(*((_QWORD *)&v168 + 1) - v168) >> 3;
      if (v50 <= 1)
        v50 = 1;
      do
      {
        *(_QWORD *)(v47 + 8 * v49) = v49;
        ++v49;
      }
      while (v50 != v49);
    }
  }
  *(_QWORD *)&v179 = &v168;
  *((_QWORD *)&v179 + 1) = &v150;
  v180 = (uint64_t)v37;
  v181 = v153;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v45);
  v52 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v52);
  v54 = (v46 - v47) >> 3;
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v52 <= 1)
  {
    if (v46 != v47)
    {
      v60 = 0;
      do
        turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()((uint64_t)&v179, v60++);
      while (v54 != v60);
    }
  }
  else
  {
    v55 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&__p, v55);
    v56 = 0;
    v57 = (double)(unint64_t)v54 / (double)(unint64_t)v52;
    do
    {
      v58 = (turi::thread *)(v56 + 1);
      v59 = (unint64_t)(v57 * (double)(unint64_t)(v56 + 1) + 0.0);
      if ((turi::thread *)v56 == (turi::thread *)((char *)v52 - 1))
        v59 = (v46 - v47) >> 3;
      v173 = (unint64_t)(v57 * (double)(unint64_t)v56 + 0.0);
      v174[0] = v59;
      *(_QWORD *)&v172 = (char *)_ZZN5boost9function0IvE9assign_toIZN4turi12parallel_forIZNS3_9transformIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS7_E_vvEEvOT_OT0_T1_NSD_3setImNSD_4lessImEENSD_9allocatorImEEEEEUlmE_EEvmmRKSJ_EUlvE_EEvSJ_E13stored_vtable
                       + 1;
      *((_QWORD *)&v172 + 1) = &v179;
      turi::parallel_task_queue::launch((uint64_t)&__p, (uint64_t)&v172, v56);
      boost::function0<void>::~function0((uint64_t *)&v172);
      v56 = (uint64_t)v58;
    }
    while (v58 != v52);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&__p);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&__p);
  }
  if ((_QWORD)v168)
  {
    *((_QWORD *)&v168 + 1) = v168;
    operator delete((void *)v168);
  }
  p_data = (const void **)&v150->__r_.__value_.__l.__data_;
  v150 = 0;
  if (p_data)
    (*((void (**)(const void **))*p_data + 1))(p_data);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v156, v157);
  (*(void (**)(_QWORD))(*(_QWORD *)v161 + 40))(v161);
  v62 = (uint64_t)v159;
  v63 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v162 + 24))(v162);
  turi::sarray<turi::flexible_type>::open_for_write(v62, v63, 0);
  turi::sarray<turi::flexible_type>::set_type((uint64_t)v159, 0);
  v64 = v162;
  v65 = v159;
  v154 = 0;
  v155 = 0;
  *(_QWORD *)v153 = &v154;
  v150 = (std::string *)&v164;
  v66 = (int *)global_logger();
  if (v66[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v66))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v67 = (file_logger *)global_logger();
    v68 = file_logger::start_stream(v67, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "transform", 67, 1);
    v69 = pthread_getspecific(*((_QWORD *)v68 + 74));
    if (v69 && *((_BYTE *)v69 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69 + 2, (uint64_t)"Function entry", 14);
    v70 = pthread_getspecific(*((_QWORD *)v68 + 74));
    if (v70)
    {
      if (*((_BYTE *)v70 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(_QWORD *)(v70[2] - 24) + 16));
        v71 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v68);
        if (*((_DWORD *)v68 + 150) == 7)
        {
          __print_back_trace();
          v145 = __cxa_allocate_exception(8uLL);
          *v145 = "LOG_FATAL encountered";
          __cxa_throw(v145, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (!*(_BYTE *)(v64 + 248) || *(_BYTE *)(v64 + 249))
    turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(void)#1}::operator()();
  if (!v65[248] || !v65[249])
    turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(void)#2}::operator()();
  v72 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v65 + 24))(v65);
  turi::sarray<turi::flexible_type>::get_reader(v64, v72, (uint64_t *)&v170);
  v168 = 0uLL;
  v169 = 0;
  if (v155)
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::vector<unsigned long>>>(0, *(char **)v153, (char *)&v154, (uint64_t)&v168, (char **)&__p);
    v74 = *((_QWORD *)&v168 + 1);
    v75 = v168;
  }
  else
  {
    v76 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v65 + 24))(v65);
    std::vector<unsigned long>::resize((uint64_t)&v168, v76);
    v74 = *((_QWORD *)&v168 + 1);
    v75 = v168;
    if (*((_QWORD *)&v168 + 1) == (_QWORD)v168)
    {
      v75 = *((_QWORD *)&v168 + 1);
    }
    else
    {
      v77 = 0;
      v78 = (uint64_t)(*((_QWORD *)&v168 + 1) - v168) >> 3;
      if (v78 <= 1)
        v78 = 1;
      do
      {
        *(_QWORD *)(v75 + 8 * v77) = v77;
        ++v77;
      }
      while (v78 != v77);
    }
  }
  *(_QWORD *)&v179 = &v168;
  *((_QWORD *)&v179 + 1) = &v170;
  v180 = (uint64_t)v65;
  v181 = (int *)&v150;
  v79 = (turi::thread_pool *)turi::thread_pool::get_instance(v73);
  v80 = (turi::thread *)turi::thread_pool::size(v79);
  v81 = (turi::thread_pool *)turi::thread::get_tls_data(v80);
  v82 = (v74 - v75) >> 3;
  if (*((_BYTE *)v81 + 8) || (unint64_t)v80 <= 1)
  {
    if (v74 != v75)
    {
      v88 = 0;
      do
        turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()((uint64_t)&v179, v88++);
      while (v82 != v88);
    }
  }
  else
  {
    v83 = (turi::thread_pool *)turi::thread_pool::get_instance(v81);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&__p, v83);
    v84 = 0;
    v85 = (double)(unint64_t)v82 / (double)(unint64_t)v80;
    do
    {
      v86 = (turi::thread *)(v84 + 1);
      v87 = (unint64_t)(v85 * (double)(unint64_t)(v84 + 1) + 0.0);
      if ((turi::thread *)v84 == (turi::thread *)((char *)v80 - 1))
        v87 = (v74 - v75) >> 3;
      v173 = (unint64_t)(v85 * (double)(unint64_t)v84 + 0.0);
      v174[0] = v87;
      *(_QWORD *)&v172 = (char *)_ZZN5boost9function0IvE9assign_toIZN4turi12parallel_forIZNS3_9transformIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS7_E0_vvEEvOT_OT0_T1_NSD_3setImNSD_4lessImEENSD_9allocatorImEEEEEUlmE_EEvmmRKSJ_EUlvE_EEvSJ_E13stored_vtable
                       + 1;
      *((_QWORD *)&v172 + 1) = &v179;
      turi::parallel_task_queue::launch((uint64_t)&__p, (uint64_t)&v172, v84);
      boost::function0<void>::~function0((uint64_t *)&v172);
      v84 = (uint64_t)v86;
    }
    while (v86 != v80);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&__p);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&__p);
  }
  if ((_QWORD)v168)
  {
    *((_QWORD *)&v168 + 1) = v168;
    operator delete((void *)v168);
  }
  v89 = (void **)v170;
  v170 = 0;
  if (v89)
    (*((void (**)(void **))*v89 + 1))(v89);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v153, v154);
  (*(void (**)(_BYTE *))(*(_QWORD *)v159 + 40))(v159);
  v179 = v161;
  if (*((_QWORD *)&v161 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  v180 = (uint64_t)v159;
  v181 = (int *)v160;
  if (v160)
  {
    v92 = (unint64_t *)(v160 + 8);
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  v168 = 0uLL;
  v169 = 0;
  *(_QWORD *)&v172 = &v168;
  BYTE8(v172) = 0;
  v94 = operator new(0x20uLL);
  v95 = 0;
  *(_QWORD *)&v168 = v94;
  *((_QWORD *)&v168 + 1) = v94;
  v169 = v94 + 2;
  do
  {
    v96 = *(&v179 + v95);
    *v94 = v96;
    if (*((_QWORD *)&v96 + 1))
    {
      v97 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    ++v95;
    ++v94;
  }
  while (v95 != 2);
  *((_QWORD *)&v168 + 1) = v94;
  std::string::basic_string[abi:ne180100]<0>(&v172, turi::sgraph::SRC_COLUMN_NAME);
  std::string::basic_string[abi:ne180100]<0>(v174, turi::sgraph::DST_COLUMN_NAME);
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v170 = (const void ***)&v150;
  v171 = 0;
  v150 = (std::string *)operator new(0x30uLL);
  v151 = v150;
  v152 = (const void **)&v150[2].__r_.__value_.__l.__data_;
  v151 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v152, &v172, v175, v150);
  turi::sframe::sframe((uint64_t)&__p, (uint64_t **)&v168, (const void ***)&v150, 1);
  v170 = (const void ***)&v150;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v170);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v174[i + 2]) < 0)
      operator delete((void *)v174[i]);
  }
  *(_QWORD *)&v172 = &v168;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
  for (j = 16; j != -16; j -= 16)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v179 + j);
  v101 = *v24;
  v102 = *v22;
  while (v101 != v102)
  {
    v103 = strlen(turi::sgraph::SRC_COLUMN_NAME);
    v104 = v103;
    v105 = *(unsigned __int8 *)(v101 + 23);
    if (*(char *)(v101 + 23) < 0)
    {
      if (v103 != *(_QWORD *)(v101 + 8))
      {
        v107 = turi::sgraph::DST_COLUMN_NAME;
        v108 = strlen(turi::sgraph::DST_COLUMN_NAME);
        v105 = *(_QWORD *)(v101 + 8);
        goto LABEL_113;
      }
      if (v103 == -1)
LABEL_178:
        std::string::__throw_out_of_range[abi:ne180100]();
      v106 = *(unsigned __int8 **)v101;
    }
    else
    {
      if (v103 != v105)
      {
        v107 = turi::sgraph::DST_COLUMN_NAME;
        v108 = strlen(turi::sgraph::DST_COLUMN_NAME);
        goto LABEL_110;
      }
      v106 = (unsigned __int8 *)v101;
      if (v104 == -1)
        goto LABEL_178;
    }
    if (!memcmp(v106, turi::sgraph::SRC_COLUMN_NAME, v104))
      goto LABEL_131;
    v107 = turi::sgraph::DST_COLUMN_NAME;
    v108 = strlen(turi::sgraph::DST_COLUMN_NAME);
    if ((v105 & 0x80) != 0)
    {
      v105 = *(_QWORD *)(v101 + 8);
LABEL_113:
      if (v108 != v105)
        goto LABEL_117;
      if (v105 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v109 = *(const void **)v101;
      goto LABEL_116;
    }
LABEL_110:
    v109 = (const void *)v101;
    if (v108 != v105)
      goto LABEL_117;
LABEL_116:
    if (memcmp(v109, v107, v105))
    {
LABEL_117:
      v110 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*v24, *v22, (unsigned __int8 **)v101);
      if (v110 == *v22)
      {
        *(_QWORD *)&v172 = v101;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      turi::sframe::select_column(v31, 0xAAAAAAAAAAAAAAABLL * ((v110 - *v24) >> 3), &v179);
      v168 = v179;
      if (*((_QWORD *)&v179 + 1))
      {
        v111 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      turi::sframe::add_column((uint64_t)&__p, &v168, v101, (uint64_t)&v172);
      turi::sframe::operator=((uint64_t)&__p, (uint64_t)&v172);
      turi::sframe::~sframe((turi::sframe *)&v172);
      v113 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      if (*((_QWORD *)&v168 + 1))
      {
        v114 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      v116 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
      if (*((_QWORD *)&v179 + 1))
      {
        v117 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
    }
LABEL_131:
    v101 += 24;
  }
  v119 = turi::sgraph::edge_partition(v147, v148, v149, **(_QWORD **)(v146 + 24), **(unint64_t ***)(v146 + 32));
  if ((turi::sgraph::union_columns((turi::sgraph *)v119, (const void ***)&__p, v120) & 1) == 0)
    turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(void)#1}::operator()();
  if (*(_BYTE *)(v119 + 288))
    v121 = *(_QWORD *)(v119 + 32);
  else
    v121 = 0;
  turi::sframe::append((turi::sframe *)v119, (const turi::sframe *)&__p, (turi::sframe *)&v172);
  turi::sframe::operator=(v119, (uint64_t)&v172);
  turi::sframe::~sframe((turi::sframe *)&v172);
  if (*(_BYTE *)(v119 + 288))
    v122 = *(_QWORD *)(v119 + 32);
  else
    v122 = 0;
  v123 = v122 - v121;
  v124 = *(unint64_t **)(v146 + 48);
  do
    v125 = __ldaxr(v124);
  while (__stlxr(v125 + v123, v124));
  turi::sframe::~sframe((turi::sframe *)&__p);
  v126 = (std::__shared_weak_count *)v160;
  if (v160)
  {
    v127 = (unint64_t *)(v160 + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v130 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v133 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v165;
  if (v165)
  {
    v139 = (unint64_t *)&v165->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v167;
  if (v167)
  {
    v142 = (unint64_t *)&v167->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
}

void sub_2182CD804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;

  std::locale::~locale((std::locale *)&STACK[0x218]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a16, (_QWORD *)a17);
  v34 = (std::__shared_weak_count *)a23;
  if (a23)
  {
    v35 = (unint64_t *)(a23 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)a25;
  if (a25)
  {
    v38 = (unint64_t *)(a25 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count *)a27;
  if (a27)
  {
    v41 = (unint64_t *)(a27 + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)a29;
  if (a29)
  {
    v44 = (unint64_t *)(a29 + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = (std::__shared_weak_count *)a31;
  if (a31)
  {
    v47 = (unint64_t *)(a31 + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = (std::__shared_weak_count *)a33;
  if (a33)
  {
    v50 = (unint64_t *)(a33 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6,std::allocator<turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6>,void ()(std::pair<unsigned long,unsigned long>)>::target_type()
{
}

void turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"union_columns(old_edges, normalized_edges)", 42);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.cpp", "operator()", 883, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182CDE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 68, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182CDFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 69, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182CE148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD **v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  void *v30;
  void *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void **v59[9];
  _BYTE v60[24];
  _BYTE *v61;
  _BYTE v62[24];
  _BYTE *v63;
  _BYTE v64[24];
  _BYTE *v65;
  __int128 v66;
  _BYTE v67[13];
  __int128 v68;
  __int128 v69;
  _BYTE v70[13];
  __int128 v71;
  _BYTE v72[24];
  _BYTE *v73;
  _BYTE v74[24];
  _BYTE *v75;
  _BYTE v76[24];
  _BYTE *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  __int128 v84;
  _BYTE v85[13];
  __int128 v86;
  __int128 v87;
  _BYTE v88[13];
  __int128 v89;
  char *v90;
  int v91;
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(**(_QWORD **)a1 + 8 * a2);
  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8));
  if (v3 < result)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 8) + 32))(&v87, **(_QWORD **)(a1 + 8), v3);
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 8) + 40))(&v84, **(_QWORD **)(a1 + 8), v3);
    (*(void (**)(_QWORD *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(a1 + 16) + 32))(v78, *(_QWORD *)(a1 + 16), v3);
    v69 = v87;
    *(_QWORD *)&v70[5] = *(_QWORD *)&v88[5];
    *(_QWORD *)v70 = *(_QWORD *)v88;
    v70[12] = v88[12];
    if (v88[12] <= 9u && ((1 << v88[12]) & 0x33C) != 0)
    {
      do
        v5 = __ldaxr(*(unint64_t **)v70);
      while (__stlxr(v5 + 1, *(unint64_t **)v70));
    }
    v71 = v89;
    v66 = v84;
    *(_QWORD *)&v67[5] = *(_QWORD *)&v85[5];
    *(_QWORD *)v67 = *(_QWORD *)v85;
    v67[12] = v85[12];
    if (v85[12] <= 9u && ((1 << v85[12]) & 0x33C) != 0)
    {
      do
        v6 = __ldaxr(*(unint64_t **)v67);
      while (__stlxr(v6 + 1, *(unint64_t **)v67));
    }
    v68 = v86;
    v7 = (uint64_t)v79;
    if (v79)
    {
      if (v79 == v78)
      {
        v61 = v60;
        (*(void (**)(_QWORD *, _BYTE *))(v78[0] + 24))(v78, v60);
LABEL_13:
        v8 = v62;
        v9 = v80;
        v10 = (uint64_t)v81;
        if (v81)
        {
          if (v81 == v80)
          {
            v63 = v62;
            (*(void (**)(_QWORD *, _BYTE *))(v80[0] + 24))(v80, v62);
LABEL_18:
            v11 = v64;
            v12 = v82;
            v13 = (uint64_t)v83;
            if (v83)
            {
              if (v83 == v82)
              {
                v65 = v64;
                (*(void (**)(_QWORD *, _BYTE *))(v82[0] + 24))(v82, v64);
                goto LABEL_23;
              }
              v13 = (*(uint64_t (**)(void))(*v83 + 16))();
            }
            v65 = (_BYTE *)v13;
LABEL_23:
            v14 = **(_QWORD ****)(a1 + 24);
            while ((_QWORD)v69 != (_QWORD)v66
                 || *((_QWORD *)&v69 + 1) != *((_QWORD *)&v66 + 1)
                 || (_QWORD)v71 != (_QWORD)v68)
            {
              _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find(*v14, v70, v59);
              v15 = (char *)v59[4][2];
              v92 = 0;
              v91 = 0;
              v90 = v15;
              if (!v63)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_BYTE *, char **))(*(_QWORD *)v63 + 48))(v63, &v90);
              switch(v92)
              {
                case 2:
                  v16 = (unint64_t *)v90;
                  do
                  {
                    v17 = __ldaxr(v16);
                    v18 = v17 - 1;
                  }
                  while (__stlxr(v18, v16));
                  if (!v18)
                  {
                    v19 = v90;
                    if (v90)
                    {
                      if (v90[31] < 0)
                        operator delete(*((void **)v90 + 1));
                      v20 = v19;
                      v21 = 0x1012C404EF22A49;
                      goto LABEL_69;
                    }
                  }
                  break;
                case 3:
                  v33 = (unint64_t *)v90;
                  do
                  {
                    v34 = __ldaxr(v33);
                    v35 = v34 - 1;
                  }
                  while (__stlxr(v35, v33));
                  if (!v35)
                  {
                    v36 = v90;
                    if (v90)
                    {
                      v37 = (void *)*((_QWORD *)v90 + 1);
                      if (v37)
                      {
                        *((_QWORD *)v90 + 2) = v37;
                        operator delete(v37);
                      }
                      v20 = v36;
                      v21 = 0x1080C409938AC02;
                      goto LABEL_69;
                    }
                  }
                  break;
                case 4:
                  v22 = (unint64_t *)v90;
                  do
                  {
                    v23 = __ldaxr(v22);
                    v24 = v23 - 1;
                  }
                  while (__stlxr(v24, v22));
                  if (!v24)
                  {
                    v25 = v90;
                    if (v90)
                    {
                      v59[0] = (void **)(v90 + 8);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v59);
                      goto LABEL_62;
                    }
                  }
                  break;
                case 5:
                  v38 = (unint64_t *)v90;
                  do
                  {
                    v39 = __ldaxr(v38);
                    v40 = v39 - 1;
                  }
                  while (__stlxr(v40, v38));
                  if (!v40)
                  {
                    v25 = v90;
                    if (v90)
                    {
                      v59[0] = (void **)(v90 + 8);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v59);
LABEL_62:
                      v20 = v25;
                      v21 = 0x1020C405E66F15BLL;
                      goto LABEL_69;
                    }
                  }
                  break;
                case 8:
                  v41 = (unint64_t *)v90;
                  do
                  {
                    v42 = __ldaxr(v41);
                    v43 = v42 - 1;
                  }
                  while (__stlxr(v43, v41));
                  if (!v43)
                  {
                    v44 = v90;
                    if (v90)
                    {
                      boost::detail::shared_count::~shared_count((unsigned int **)v90 + 2);
                      v20 = v44;
                      v32 = -235920773;
                      goto LABEL_68;
                    }
                  }
                  break;
                case 9:
                  v26 = (unint64_t *)v90;
                  do
                  {
                    v27 = __ldaxr(v26);
                    v28 = v27 - 1;
                  }
                  while (__stlxr(v28, v26));
                  if (!v28)
                  {
                    v29 = v90;
                    if (v90)
                    {
                      v30 = (void *)*((_QWORD *)v90 + 6);
                      if (v30)
                      {
                        *((_QWORD *)v90 + 7) = v30;
                        operator delete(v30);
                      }
                      v31 = (void *)*((_QWORD *)v29 + 3);
                      if (v31)
                      {
                        *((_QWORD *)v29 + 4) = v31;
                        operator delete(v31);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v29 + 8));
                      v20 = v29;
                      v32 = 2071181815;
LABEL_68:
                      v21 = v32 | 0x1030C4000000000;
LABEL_69:
                      MEMORY[0x219A19A08](v20, v21);
                    }
                  }
                  break;
                default:
                  break;
              }
              turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)&v69);
            }
            std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v72, (uint64_t)v60);
            std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v74, (uint64_t)v62);
            std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v76, (uint64_t)v64);
            v45 = v77;
            if (v77 == v76)
            {
              v46 = 4;
              v45 = v76;
            }
            else
            {
              if (!v77)
                goto LABEL_76;
              v46 = 5;
            }
            (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_76:
            v47 = v75;
            if (v75 == v74)
            {
              v48 = 4;
              v47 = v74;
            }
            else
            {
              if (!v75)
                goto LABEL_81;
              v48 = 5;
            }
            (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_81:
            v49 = v73;
            if (v73 == v72)
            {
              v50 = 4;
              v49 = v72;
            }
            else
            {
              if (!v73)
                goto LABEL_86;
              v50 = 5;
            }
            (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_86:
            if (v65 == v64)
            {
              v51 = 4;
            }
            else
            {
              if (!v65)
                goto LABEL_91;
              v51 = 5;
              v11 = v65;
            }
            (*(void (**)(_QWORD *))(*v11 + 8 * v51))(v11);
LABEL_91:
            if (v63 == v62)
            {
              v52 = 4;
            }
            else
            {
              if (!v63)
                goto LABEL_96;
              v52 = 5;
              v8 = v63;
            }
            (*(void (**)(_QWORD *))(*v8 + 8 * v52))(v8);
LABEL_96:
            v53 = v61;
            if (v61 == v60)
            {
              v54 = 4;
              v53 = v60;
            }
            else
            {
              if (!v61)
                goto LABEL_101;
              v54 = 5;
            }
            (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_101:
            turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v66);
            turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v69);
            if (v83 == v82)
            {
              v55 = 4;
            }
            else
            {
              if (!v83)
                goto LABEL_106;
              v55 = 5;
              v12 = v83;
            }
            (*(void (**)(_QWORD *))(*v12 + 8 * v55))(v12);
LABEL_106:
            if (v81 == v80)
            {
              v56 = 4;
            }
            else
            {
              if (!v81)
                goto LABEL_111;
              v56 = 5;
              v9 = v81;
            }
            (*(void (**)(_QWORD *))(*v9 + 8 * v56))(v9);
LABEL_111:
            v57 = v79;
            if (v79 == v78)
            {
              v58 = 4;
              v57 = v78;
            }
            else
            {
              if (!v79)
              {
LABEL_116:
                turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v84);
                return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v87);
              }
              v58 = 5;
            }
            (*(void (**)(void))(*v57 + 8 * v58))();
            goto LABEL_116;
          }
          v10 = (*(uint64_t (**)(void))(*v81 + 16))();
        }
        v63 = (_BYTE *)v10;
        goto LABEL_18;
      }
      v7 = (*(uint64_t (**)(void))(*v79 + 16))();
    }
    v61 = (_BYTE *)v7;
    goto LABEL_13;
  }
  return result;
}

void sub_2182CE8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  _QWORD *v56;
  uint64_t v57;
  uint64_t v59;
  char *v60;
  uint64_t v61;

  if (a26 == v56)
  {
    v59 = 4;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v59 = 5;
    v56 = a26;
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v59))(v56);
LABEL_6:
  v60 = a22;
  if (a22 == &a19)
  {
    v61 = 4;
    v60 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_11;
    v61 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
LABEL_11:
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a31);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a37);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a56);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v57 - 200);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v57 - 152);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t position;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];

  if (a1[11] == a1[6]
    || (position = _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find_position((uint64_t)a1, a2), position == -1))
  {
    v10 = a1[7];
    v11 = a1[8];
    *a3 = a1;
    a3[1] = v10;
    a3[2] = v11;
    a3[3] = v11;
    a3[4] = 0;
    a3[5] = v10;
    a3[6] = v11;
    a3[7] = v11;
    a3[8] = 0;
    return _tc_google::sparse_hashtable_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted((uint64_t)a3);
  }
  else
  {
    _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::get_iter(a1 + 7, position, v12);
    v6 = a1[7];
    v7 = a1[8];
    *a3 = a1;
    v8 = v12[1];
    *(_OWORD *)(a3 + 1) = v12[0];
    *(_OWORD *)(a3 + 3) = v8;
    a3[5] = v6;
    a3[6] = v7;
    a3[7] = v7;
    a3[8] = 0;
    return _tc_google::sparse_hashtable_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted((uint64_t)a3);
  }
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find_position(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v3 = *(_QWORD *)(a1 + 80) - 1;
  v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v5 = 0;
  v6 = -1;
  while (1)
  {
    v7 = v4 & v3;
    v8 = (v4 & (unint64_t)v3) / 0x30;
    v9 = (v4 & (unint64_t)v3) % 0x30;
    if (((*(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 16 * v8 + (v9 >> 3) + 10) >> (v9 & 7)) & 1) == 0)
      break;
    if (_tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::test_deleted(a1, v7))
    {
      if (v6 == -1)
        v6 = v7;
    }
    else
    {
      v10 = (unsigned __int16)v9;
      v11 = *(_QWORD *)(a1 + 56) + 16 * v8;
      v12 = *(_QWORD *)v11;
      v13 = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset((unsigned __int8 *)(v11 + 10), v10);
      if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, a2, v12 + 24 * v13) & 1) != 0)
        return v7;
    }
    v4 = ++v5 + v7;
  }
  return -1;
}

uint64_t _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::get_iter@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v5 = *a1;
  v4 = a1[1];
  v6 = *a1 + 16 * (a2 / 0x30);
  v7 = *(_QWORD *)v6;
  result = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset((unsigned __int8 *)(v6 + 10), a2 % 0x30);
  v9 = v7 + 24 * result;
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = v9;
  if (*(_QWORD *)v6 + 24 * *(unsigned __int16 *)(v6 + 8) == v9)
  {
    v10 = v6 + 16;
    while (v10 != v4)
    {
      a3[3] = *(_QWORD *)v10;
      v11 = *(unsigned __int16 *)(v10 + 8);
      v10 += 16;
      if (v11)
      {
        v4 = v10 - 16;
        break;
      }
    }
    a3[2] = v4;
  }
  return result;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::test_deleted(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)(a1 + 48))
    return 0;
  v3 = *(_QWORD *)(a1 + 56) + 16 * (a2 / 0x30);
  if (((*(unsigned __int8 *)(v3 + ((a2 % 0x30) >> 3) + 10) >> ((a2 % 0x30) & 7)) & 1) == 0)
    return 0;
  v4 = *(_QWORD *)v3;
  v5 = v4
     + 24
     * _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset((unsigned __int8 *)(v3 + 10), a2 % 0x30);
  return std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)(a1 + 32), v5);
}

uint64_t _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset(unsigned __int8 *a1, unsigned int a2)
{
  __int16 v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;

  v2 = 0;
  if (a2 >= 9)
  {
    v3 = ((unsigned __int16)(a2 - 9) >> 3) + 1;
    v4 = a1;
    do
    {
      v5 = *v4++;
      v2 += _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::bits_in_char(unsigned char)::bits_in[v5];
      LOWORD(a2) = a2 - 8;
    }
    while ((unsigned __int16)a2 > 8u);
    a1 += v3;
  }
  return (unsigned __int16)(v2
                          + _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::bits_in_char(unsigned char)::bits_in[~(-1 << a2) & (unint64_t)*a1]);
}

uint64_t _tc_google::sparse_hashtable_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted(uint64_t result)
{
  uint64_t *v1;
  _QWORD *i;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)result;
  for (i = (_QWORD *)(result + 8);
        ;
        result = (uint64_t)_tc_google::two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::operator++(i))
  {
    if (v1[1] == v1[5])
    {
      v3 = v1[2];
      if (v3 == v1[6])
      {
        v4 = v1[3];
        if (v4 == v1[7] && (v4 == v3 || v1[4] == v1[8]))
          break;
      }
    }
    if (!*(_QWORD *)(*v1 + 48))
      break;
    result = std::equal_to<turi::flexible_type>::operator()[abi:ne180100](*v1 + 32, (unsigned __int8 *)(*v1 + 32), v1[4]);
    if (!(_DWORD)result)
      break;
  }
  return result;
}

_QWORD *_tc_google::two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::operator++(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = result[2];
  v2 = result[3] + 24;
  result[3] = v2;
  if (v2 == *(_QWORD *)v1 + 24 * *(unsigned __int16 *)(v1 + 8))
  {
    v3 = result[1];
    v4 = v1 + 16;
    while (v4 != v3)
    {
      result[3] = *(_QWORD *)v4;
      v5 = *(unsigned __int16 *)(v4 + 8);
      v4 += 16;
      if (v5)
      {
        v3 = v4 - 16;
        break;
      }
    }
    result[2] = v3;
  }
  return result;
}

uint64_t _ZN5boost6detail8function15functor_managerIZN4turi12parallel_forIZNS3_9transformIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS7_E_vvEEvOT_OT0_T1_NSD_3setImNSD_4lessImEENSD_9allocatorImEEEEEUlmE_EEvmmRKSJ_EUlvE_E6manageERKNS1_15function_bufferERSZ_NS1_30functor_manager_operation_typeE(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_QWORD *)a2 = &_ZTIZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS3_E_vvEEvOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_;
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6s"
                                        "graph18commit_edge_bufferEmmNS_6sframeEENK3$_6clENSt3__14pairImmEEEUlRKS3_E_vvEE"
                                        "vOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3$_6clENSt3__14pairImmEEEUlRKS3_E_vvEEvOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t _ZN5boost6detail8function26void_function_obj_invoker0IZN4turi12parallel_forIZNS3_9transformIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS7_E_vvEEvOT_OT0_T1_NSD_3setImNSD_4lessImEENSD_9allocatorImEEEEEUlmE_EEvmmRKSJ_EUlvE_vE6invokeERNS1_15function_bufferE(unint64_t result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = (uint64_t *)result;
    do
      result = turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#1},std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 68, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182CF134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 69, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182CF2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD **v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  void *v30;
  void *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void **v59[9];
  _BYTE v60[24];
  _BYTE *v61;
  _BYTE v62[24];
  _BYTE *v63;
  _BYTE v64[24];
  _BYTE *v65;
  __int128 v66;
  _BYTE v67[13];
  __int128 v68;
  __int128 v69;
  _BYTE v70[13];
  __int128 v71;
  _BYTE v72[24];
  _BYTE *v73;
  _BYTE v74[24];
  _BYTE *v75;
  _BYTE v76[24];
  _BYTE *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  __int128 v84;
  _BYTE v85[13];
  __int128 v86;
  __int128 v87;
  _BYTE v88[13];
  __int128 v89;
  char *v90;
  int v91;
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(**(_QWORD **)a1 + 8 * a2);
  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8));
  if (v3 < result)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 8) + 32))(&v87, **(_QWORD **)(a1 + 8), v3);
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 8) + 40))(&v84, **(_QWORD **)(a1 + 8), v3);
    (*(void (**)(_QWORD *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(a1 + 16) + 32))(v78, *(_QWORD *)(a1 + 16), v3);
    v69 = v87;
    *(_QWORD *)&v70[5] = *(_QWORD *)&v88[5];
    *(_QWORD *)v70 = *(_QWORD *)v88;
    v70[12] = v88[12];
    if (v88[12] <= 9u && ((1 << v88[12]) & 0x33C) != 0)
    {
      do
        v5 = __ldaxr(*(unint64_t **)v70);
      while (__stlxr(v5 + 1, *(unint64_t **)v70));
    }
    v71 = v89;
    v66 = v84;
    *(_QWORD *)&v67[5] = *(_QWORD *)&v85[5];
    *(_QWORD *)v67 = *(_QWORD *)v85;
    v67[12] = v85[12];
    if (v85[12] <= 9u && ((1 << v85[12]) & 0x33C) != 0)
    {
      do
        v6 = __ldaxr(*(unint64_t **)v67);
      while (__stlxr(v6 + 1, *(unint64_t **)v67));
    }
    v68 = v86;
    v7 = (uint64_t)v79;
    if (v79)
    {
      if (v79 == v78)
      {
        v61 = v60;
        (*(void (**)(_QWORD *, _BYTE *))(v78[0] + 24))(v78, v60);
LABEL_13:
        v8 = v62;
        v9 = v80;
        v10 = (uint64_t)v81;
        if (v81)
        {
          if (v81 == v80)
          {
            v63 = v62;
            (*(void (**)(_QWORD *, _BYTE *))(v80[0] + 24))(v80, v62);
LABEL_18:
            v11 = v64;
            v12 = v82;
            v13 = (uint64_t)v83;
            if (v83)
            {
              if (v83 == v82)
              {
                v65 = v64;
                (*(void (**)(_QWORD *, _BYTE *))(v82[0] + 24))(v82, v64);
                goto LABEL_23;
              }
              v13 = (*(uint64_t (**)(void))(*v83 + 16))();
            }
            v65 = (_BYTE *)v13;
LABEL_23:
            v14 = **(_QWORD ****)(a1 + 24);
            while ((_QWORD)v69 != (_QWORD)v66
                 || *((_QWORD *)&v69 + 1) != *((_QWORD *)&v66 + 1)
                 || (_QWORD)v71 != (_QWORD)v68)
            {
              _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find(*v14, v70, v59);
              v15 = (char *)v59[4][2];
              v92 = 0;
              v91 = 0;
              v90 = v15;
              if (!v63)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_BYTE *, char **))(*(_QWORD *)v63 + 48))(v63, &v90);
              switch(v92)
              {
                case 2:
                  v16 = (unint64_t *)v90;
                  do
                  {
                    v17 = __ldaxr(v16);
                    v18 = v17 - 1;
                  }
                  while (__stlxr(v18, v16));
                  if (!v18)
                  {
                    v19 = v90;
                    if (v90)
                    {
                      if (v90[31] < 0)
                        operator delete(*((void **)v90 + 1));
                      v20 = v19;
                      v21 = 0x1012C404EF22A49;
                      goto LABEL_69;
                    }
                  }
                  break;
                case 3:
                  v33 = (unint64_t *)v90;
                  do
                  {
                    v34 = __ldaxr(v33);
                    v35 = v34 - 1;
                  }
                  while (__stlxr(v35, v33));
                  if (!v35)
                  {
                    v36 = v90;
                    if (v90)
                    {
                      v37 = (void *)*((_QWORD *)v90 + 1);
                      if (v37)
                      {
                        *((_QWORD *)v90 + 2) = v37;
                        operator delete(v37);
                      }
                      v20 = v36;
                      v21 = 0x1080C409938AC02;
                      goto LABEL_69;
                    }
                  }
                  break;
                case 4:
                  v22 = (unint64_t *)v90;
                  do
                  {
                    v23 = __ldaxr(v22);
                    v24 = v23 - 1;
                  }
                  while (__stlxr(v24, v22));
                  if (!v24)
                  {
                    v25 = v90;
                    if (v90)
                    {
                      v59[0] = (void **)(v90 + 8);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v59);
                      goto LABEL_62;
                    }
                  }
                  break;
                case 5:
                  v38 = (unint64_t *)v90;
                  do
                  {
                    v39 = __ldaxr(v38);
                    v40 = v39 - 1;
                  }
                  while (__stlxr(v40, v38));
                  if (!v40)
                  {
                    v25 = v90;
                    if (v90)
                    {
                      v59[0] = (void **)(v90 + 8);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v59);
LABEL_62:
                      v20 = v25;
                      v21 = 0x1020C405E66F15BLL;
                      goto LABEL_69;
                    }
                  }
                  break;
                case 8:
                  v41 = (unint64_t *)v90;
                  do
                  {
                    v42 = __ldaxr(v41);
                    v43 = v42 - 1;
                  }
                  while (__stlxr(v43, v41));
                  if (!v43)
                  {
                    v44 = v90;
                    if (v90)
                    {
                      boost::detail::shared_count::~shared_count((unsigned int **)v90 + 2);
                      v20 = v44;
                      v32 = -235920773;
                      goto LABEL_68;
                    }
                  }
                  break;
                case 9:
                  v26 = (unint64_t *)v90;
                  do
                  {
                    v27 = __ldaxr(v26);
                    v28 = v27 - 1;
                  }
                  while (__stlxr(v28, v26));
                  if (!v28)
                  {
                    v29 = v90;
                    if (v90)
                    {
                      v30 = (void *)*((_QWORD *)v90 + 6);
                      if (v30)
                      {
                        *((_QWORD *)v90 + 7) = v30;
                        operator delete(v30);
                      }
                      v31 = (void *)*((_QWORD *)v29 + 3);
                      if (v31)
                      {
                        *((_QWORD *)v29 + 4) = v31;
                        operator delete(v31);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v29 + 8));
                      v20 = v29;
                      v32 = 2071181815;
LABEL_68:
                      v21 = v32 | 0x1030C4000000000;
LABEL_69:
                      MEMORY[0x219A19A08](v20, v21);
                    }
                  }
                  break;
                default:
                  break;
              }
              turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)&v69);
            }
            std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v72, (uint64_t)v60);
            std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v74, (uint64_t)v62);
            std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v76, (uint64_t)v64);
            v45 = v77;
            if (v77 == v76)
            {
              v46 = 4;
              v45 = v76;
            }
            else
            {
              if (!v77)
                goto LABEL_76;
              v46 = 5;
            }
            (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_76:
            v47 = v75;
            if (v75 == v74)
            {
              v48 = 4;
              v47 = v74;
            }
            else
            {
              if (!v75)
                goto LABEL_81;
              v48 = 5;
            }
            (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_81:
            v49 = v73;
            if (v73 == v72)
            {
              v50 = 4;
              v49 = v72;
            }
            else
            {
              if (!v73)
                goto LABEL_86;
              v50 = 5;
            }
            (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_86:
            if (v65 == v64)
            {
              v51 = 4;
            }
            else
            {
              if (!v65)
                goto LABEL_91;
              v51 = 5;
              v11 = v65;
            }
            (*(void (**)(_QWORD *))(*v11 + 8 * v51))(v11);
LABEL_91:
            if (v63 == v62)
            {
              v52 = 4;
            }
            else
            {
              if (!v63)
                goto LABEL_96;
              v52 = 5;
              v8 = v63;
            }
            (*(void (**)(_QWORD *))(*v8 + 8 * v52))(v8);
LABEL_96:
            v53 = v61;
            if (v61 == v60)
            {
              v54 = 4;
              v53 = v60;
            }
            else
            {
              if (!v61)
                goto LABEL_101;
              v54 = 5;
            }
            (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_101:
            turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v66);
            turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v69);
            if (v83 == v82)
            {
              v55 = 4;
            }
            else
            {
              if (!v83)
                goto LABEL_106;
              v55 = 5;
              v12 = v83;
            }
            (*(void (**)(_QWORD *))(*v12 + 8 * v55))(v12);
LABEL_106:
            if (v81 == v80)
            {
              v56 = 4;
            }
            else
            {
              if (!v81)
                goto LABEL_111;
              v56 = 5;
              v9 = v81;
            }
            (*(void (**)(_QWORD *))(*v9 + 8 * v56))(v9);
LABEL_111:
            v57 = v79;
            if (v79 == v78)
            {
              v58 = 4;
              v57 = v78;
            }
            else
            {
              if (!v79)
              {
LABEL_116:
                turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v84);
                return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v87);
              }
              v58 = 5;
            }
            (*(void (**)(void))(*v57 + 8 * v58))();
            goto LABEL_116;
          }
          v10 = (*(uint64_t (**)(void))(*v81 + 16))();
        }
        v63 = (_BYTE *)v10;
        goto LABEL_18;
      }
      v7 = (*(uint64_t (**)(void))(*v79 + 16))();
    }
    v61 = (_BYTE *)v7;
    goto LABEL_13;
  }
  return result;
}

void sub_2182CFA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  _QWORD *v56;
  uint64_t v57;
  uint64_t v59;
  char *v60;
  uint64_t v61;

  if (a26 == v56)
  {
    v59 = 4;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v59 = 5;
    v56 = a26;
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v59))(v56);
LABEL_6:
  v60 = a22;
  if (a22 == &a19)
  {
    v61 = 4;
    v60 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_11;
    v61 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
LABEL_11:
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a31);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a37);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a56);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v57 - 200);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v57 - 152);
  _Unwind_Resume(a1);
}

uint64_t _ZN5boost6detail8function15functor_managerIZN4turi12parallel_forIZNS3_9transformIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS7_E0_vvEEvOT_OT0_T1_NSD_3setImNSD_4lessImEENSD_9allocatorImEEEEEUlmE_EEvmmRKSJ_EUlvE_E6manageERKNS1_15function_bufferERSZ_NS1_30functor_manager_operation_typeE(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_QWORD *)a2 = &_ZTIZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS3_E0_vvEEvOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_;
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6s"
                                        "graph18commit_edge_bufferEmmNS_6sframeEENK3$_6clENSt3__14pairImmEEEUlRKS3_E0_vvE"
                                        "EvOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZZNS_6sgraph18commit_edge_bufferEmmNS_6sframeEENK3$_6clENSt3__14pairImmEEEUlRKS3_E0_vvEEvOT_OT0_T1_NS9_3setImNS9_4lessImEENS9_9allocatorImEEEEEUlmE_EEvmmRKSF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t _ZN5boost6detail8function26void_function_obj_invoker0IZN4turi12parallel_forIZNS3_9transformIRNS3_6sarrayINS3_13flexible_typeEEES9_ZZNS3_6sgraph18commit_edge_bufferEmmNS3_6sframeEENK3__6clENSt3__14pairImmEEEUlRKS7_E0_vvEEvOT_OT0_T1_NSD_3setImNSD_4lessImEENSD_9allocatorImEEEEEUlmE_EEvmmRKSJ_EUlvE_vE6invokeERNS1_15function_bufferE(unint64_t result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = (uint64_t *)result;
    do
      result = turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::sgraph::commit_edge_buffer(unsigned long,unsigned long,turi::sframe)::$_6::operator() const(std::pair<unsigned long,unsigned long>)::{lambda(turi::flexible_type const&)#2},std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition1", 10);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 385, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182CFEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"partition2", 10);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_num_partitions", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph.hpp", "operator()", 386, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sgraph::edge_partition(unsigned long,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182D0110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray<turi::flexible_type>::sarray(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  int v10;
  _QWORD v12[5];
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v14 = a4;
  v15 = a3;
  *(_QWORD *)a1 = &unk_24D91E658;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v10 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v10 == 0, "Mutex create error %d", v10);
  *(_WORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  if (a5 == 7)
    LOBYTE(a5) = *(_BYTE *)(a2 + 12);
  v12[0] = a4;
  if (!a4)
  {
    v13 = (unint64_t)v12;
    turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(void)#1}::operator()();
  }
  turi::sarray<turi::flexible_type>::open_for_write(a1, a4, 0);
  turi::sarray<turi::flexible_type>::set_type(a1, (char)a5);
  v12[4] = a2;
  v13 = a3 / a4;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  v12[3] = &v15;
  turi::parallel_for<turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}>(0, a4, (uint64_t)v12);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  return a1;
}

void sub_2182D02FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  turi::index_file_information *v11;
  uint64_t v12;
  pthread_mutex_t *v13;
  void **v14;

  a11 = (void **)(v12 + 256);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a11);
  turi::mutex::~mutex(v13);
  if (*(char *)(v12 + 175) < 0)
    operator delete(*v14);
  turi::index_file_information::~index_file_information(v11);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_segments", 12);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(size_t)0", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 211, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182D04D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::parallel_for<turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2182D06AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 32))(v14);
  v4 = **(_QWORD **)(a1 + 8);
  v5 = v4 * a2;
  if (**(_QWORD **)(a1 + 16) - 1 == a2)
    v6 = **(_QWORD **)(a1 + 24);
  else
    v6 = v4 + v5;
  v7 = v6 - v5;
  if (v6 > v5)
  {
    do
    {
      if (!v15)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, _QWORD))(*v15 + 48))(v15, *(_QWORD *)(a1 + 32));
      --v7;
    }
    while (v7);
  }
  v8 = v19;
  if (v19 == v18)
  {
    v9 = 4;
    v8 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_12;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_17;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_17:
  result = v15;
  if (v15 == v14)
  {
    v13 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_2182D0834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000218707EF8 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x8000000218707EF8 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
      result = turi::sarray<turi::flexible_type>::sarray(turi::flexible_type const&,unsigned long,unsigned long,turi::flex_type_enum)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

_QWORD *turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[6];
  _QWORD v12[2];
  _QWORD v13[4];
  _QWORD v14[3];
  _QWORD *v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(**(_QWORD **)a1 + 16 * a2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v14, v4, 0);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 32))(v12, **(_QWORD **)(a1 + 8), a2);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 40))(v11, **(_QWORD **)(a1 + 8), a2);
  while (v12[0] != v11[0] || v12[1] != v11[1] || v13[2] != v11[4])
  {
    if (!v15)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, _QWORD *))(*v15 + 48))(v15, v13);
    turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)v12);
  }
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v11);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v12);
  v5 = v19;
  if (v19 == v18)
  {
    v6 = 4;
    v5 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_12;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  v7 = v17;
  if (v17 == v16)
  {
    v8 = 4;
    v7 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_17;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_17:
  result = v15;
  if (v15 == v14)
  {
    v10 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_2182D0AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)va);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1>(unsigned long,unsigned long,turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_14segment_sarrayENSt3__110shared_ptrINS_6sarrayINS_13f"
                                        "lexible_typeEEEEERKNS1_6vectorImNS1_9allocatorImEEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_14segment_sarrayENSt3__110shared_ptrINS_6sarrayINS_13flexible_typeEEEEERKNS1_6vectorImNS1_9allocatorImEEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1>(unsigned long,unsigned long,turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
      result = turi::segment_sarray(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::vector<unsigned long> const&)::$_1::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = 0;
    v6 = *((_BYTE *)a3 + 23);
    if (v6 >= 0)
      v7 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v7 = a3[1];
    if (v6 >= 0)
      v8 = (unsigned __int8 *)a3;
    else
      v8 = *a3;
    while (1)
    {
      v9 = *(unsigned __int8 *)(v4 + 23);
      if ((v9 & 0x80u) == 0)
        v10 = (unsigned __int8 *)*(unsigned __int8 *)(v4 + 23);
      else
        v10 = *(unsigned __int8 **)(v4 + 8);
      if (v10 != v7)
        goto LABEL_20;
      if ((v9 & 0x80) == 0)
        break;
      if (!memcmp(*(const void **)v4, v8, *(_QWORD *)(v4 + 8)))
        goto LABEL_19;
LABEL_20:
      v4 += 24;
      if (v4 == a2)
        return v5;
    }
    if (*(_BYTE *)(v4 + 23))
    {
      v11 = 0;
      while (*(unsigned __int8 *)(v4 + v11) == v8[v11])
      {
        if (v9 == ++v11)
          goto LABEL_19;
      }
      goto LABEL_20;
    }
LABEL_19:
    ++v5;
    goto LABEL_20;
  }
  return 0;
}

void turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  std::string *p_p;
  const void *v7;
  unint64_t *v8;
  std::string *p_str;
  std::string v10;
  std::string __str;
  std::string __p;

  v4 = **(_QWORD **)a1 + 24 * a2;
  if (*(char *)(v4 + 23) >= 0)
    v5 = *(unsigned __int8 *)(v4 + 23);
  else
    v5 = *(_QWORD *)(v4 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*(char *)(v4 + 23) >= 0)
      v7 = (const void *)v4;
    else
      v7 = *(const void **)v4;
    memmove(p_p, v7, v5);
  }
  strcpy((char *)p_p + v5, ".frame_idx");
  v8 = (unint64_t *)(**(_QWORD **)(a1 + 16) + 296 * a2);
  if (**(_BYTE **)(a1 + 8))
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __str = __p;
    turi::sframe_save_weak_reference(v8, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      p_str = &__str;
LABEL_22:
      operator delete(p_str->__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v10 = __p;
    turi::sframe::save((turi *)v8, (uint64_t)&v10);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      p_str = &v10;
      goto LABEL_22;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2182D0E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0>(unsigned long,unsigned long,turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_21parallel_save_sframesERKNSt3__16vectorINS_6sframeENS"
                                        "1_9allocatorIS3_EEEERNS_8oarchiveEbE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_21parallel_save_sframesERKNSt3__16vectorINS_6sframeENS1_9allocatorIS3_EEEERNS_8oarchiveEbE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0>(unsigned long,unsigned long,turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  unint64_t i;

  for (i = a1[1]; i < a1[2]; ++i)
    turi::parallel_save_sframes(std::vector<turi::sframe> const&,turi::oarchive &,BOOL)::$_0::operator()(*a1, i);
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sframe,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (***v8)(_QWORD);
  BOOL v9;
  uint64_t v10;
  unint64_t i;
  unint64_t v12;

  v12 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v12 = *(_QWORD *)(v4 + v5);
    *((_QWORD *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v8 = (void (***)(_QWORD))(v6 - 296);
    do
    {
      (**v8)(v8);
      v9 = v8 == (void (***)(_QWORD))v7;
      v8 -= 37;
    }
    while (!v9);
  }
  a2[1] = v7;
  std::vector<turi::sframe>::resize(a2, v12);
  if (v12)
  {
    v10 = 0;
    for (i = 0; i < v12; ++i)
    {
      turi::sframe::load((turi::sframe *)(*a2 + v10), a1);
      v10 += 296;
    }
  }
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparse_hashtable(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0x3EA3D70A3F4CCCCDLL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (a2)
    v3 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, a2, 0);
  else
    v3 = 32;
  _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsetable((uint64_t *)(a1 + 56), v3);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

void sub_2182D10F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t *_tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsetable(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD v5[2];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 0;
  if (a2)
    v3 = (a2 - 1) / 0x30uLL + 1;
  else
    v3 = 0;
  v5[0] = 0;
  v5[1] = 0;
  std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::resize(a1, v3, (uint64_t)v5);
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group((uint64_t)v5);
  return a1;
}

void sub_2182D1174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group((uint64_t)&a9);
  std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = (a1[1] - *a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 16 * a2);
  }
  else
  {
    std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__append(a1, a2 - v3, a3);
  }
}

uint64_t *std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__append(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  char *v21;
  _QWORD *v22;

  v5 = result;
  v6 = result[2];
  v7 = result[1];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      v14 = 16 * a2;
      v15 = v7 + 16 * a2;
      do
      {
        result = (uint64_t *)_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsegroup(v7, a3);
        v7 += 16;
        v14 -= 16;
      }
      while (v14);
      v7 = v15;
    }
    v5[1] = v7;
  }
  else
  {
    v8 = v7 - *result;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v6 - *result;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v22 = result + 2;
    if (v12)
      v13 = (char *)malloc_type_malloc(16 * v12, 0x1020040EDED9539uLL);
    else
      v13 = 0;
    v16 = (uint64_t)&v13[16 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v20 = v16;
    v21 = &v13[16 * v12];
    v17 = 16 * a2;
    v18 = v16 + 16 * a2;
    do
    {
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsegroup(v16, a3);
      v16 += 16;
      v17 -= 16;
    }
    while (v17);
    v20 = v18;
    std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__swap_out_circular_buffer(v5, v19);
    return (uint64_t *)std::__split_buffer<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>> &>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_2182D12FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsegroup(uint64_t a1, uint64_t a2)
{
  int v4;
  void *group;
  int v6;

  *(_QWORD *)a1 = 0;
  v4 = *(unsigned __int16 *)(a2 + 8);
  *(_WORD *)(a1 + 8) = v4;
  if (v4)
  {
    group = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::allocate_group(a1, *(unsigned __int16 *)(a2 + 8));
    *(_QWORD *)a1 = group;
    std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>(*(uint64_t **)a2, (uint64_t *)(*(_QWORD *)a2 + 24 * *(unsigned __int16 *)(a2 + 8)), (uint64_t)group);
  }
  v6 = *(_DWORD *)(a2 + 10);
  *(_WORD *)(a1 + 14) = *(_WORD *)(a2 + 14);
  *(_DWORD *)(a1 + 10) = v6;
  return a1;
}

void *_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::allocate_group(uint64_t a1, unsigned int a2)
{
  void *result;

  result = malloc_type_malloc(24 * a2, 0x10220405EB27603uLL);
  if (!result)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "sparsehash FATAL ERROR: failed to allocate %lu groups\n", a2);
    exit(1);
  }
  return result;
}

uint64_t std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;

  for (; a1 != a2; a3 += 24)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    if (a1 != (uint64_t *)a3)
    {
      v3 = *a1;
      *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)a1 + 5);
      *(_QWORD *)a3 = v3;
      LODWORD(v3) = *((unsigned __int8 *)a1 + 12);
      *(_BYTE *)(a3 + 12) = v3;
      v4 = v3 > 9;
      v5 = (1 << v3) & 0x33C;
      if (!v4 && v5 != 0)
      {
        v7 = *(unint64_t **)a3;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
      }
    }
    *(_QWORD *)(a3 + 16) = a1[2];
    a1 += 3;
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 16;
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsegroup(v7 - 16, v9);
      v7 = *((_QWORD *)&v15 + 1) - 16;
      *((_QWORD *)&v15 + 1) -= 16;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2182D15A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>,std::reverse_iterator<std::reverse_iterator<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  for (result = *(_QWORD *)(a2 + 32); result != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(result);
    result = *(_QWORD *)(a2 + 32) + 16;
  }
  return result;
}

uint64_t std::__split_buffer<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>> &>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    free(*(void **)a1);
  return a1;
}

void std::__split_buffer<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(a1 + 16) = v4 - 16;
    _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(v4 - 16);
  }
}

void std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8);
        i != a2;
        _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(i))
  {
    i -= 16;
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)a1;
  if (v2)
  {
    if (*(_WORD *)(a1 + 8))
    {
      v3 = 24 * *(unsigned __int16 *)(a1 + 8);
      do
      {
        v2 = (void *)(std::pair<turi::flexible_type const,unsigned long>::~pair((uint64_t)v2) + 24);
        v3 -= 24;
      }
      while (v3);
      v2 = *(void **)a1;
    }
    free(v2);
    *(_QWORD *)a1 = 0;
  }
}

void std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    free(**a1);
  }
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

_QWORD *std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::shared_ptr[abi:ne180100]<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D936DE8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2182D1A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>> *,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::__shared_ptr_default_delete<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::allocator<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>> *,std::shared_ptr<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::__shared_ptr_default_delete<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>,std::allocator<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 56);
    std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo(a2 + 32);
    return MEMORY[0x219A19A08](a2, 0x1022C400BF3CCBBLL);
  }
  return result;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::~sparse_hashtable(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 56);
  std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo(a1 + 32);
  return a1;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::resize_delta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  std::logic_error *exception;
  void **v15;
  _BYTE v16[32];
  uint64_t v17;
  _QWORD v18[6];

  v18[5] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 24))
    v4 = _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::maybe_shrink(a1);
  else
    v4 = 0;
  v5 = *(_QWORD *)(a1 + 88);
  if (v5 >= ~a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "resize overflow");
    __cxa_throw(exception, (struct type_info *)off_24D916A78, (void (*)(void *))MEMORY[0x24BEDAAF0]);
  }
  v6 = v5 + a2;
  if (*(_QWORD *)(a1 + 80) < 4uLL || v6 > *(_QWORD *)a1)
  {
    v7 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, v6, 0);
    v8 = *(_QWORD *)(a1 + 80);
    if (v7 > v8)
    {
      v9 = v7;
      v10 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, *(_QWORD *)(a1 + 88) + a2 - *(_QWORD *)(a1 + 48), v8);
      v11 = v10;
      v12 = v10 >= v9 || v10 > 0x7FFFFFFFFFFFFFFELL;
      if (!v12
        && *(_QWORD *)(a1 + 88) + a2 - *(_QWORD *)(a1 + 48) >= (unint64_t)(float)(*(float *)(a1 + 20)
                                                                                       * (float)(2 * v10)))
      {
        v11 = 2 * v10;
      }
      _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparse_hashtable((uint64_t)v16, 0, a1, v11);
      _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::swap(a1, (uint64_t)v16);
      v15 = (void **)v18;
      std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100](&v15);
      _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo((uint64_t)&v17);
      return 1;
    }
  }
  return v4;
}

void sub_2182D1CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::~sparse_hashtable((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::insert_noresize@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t position;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  _BYTE v17[48];
  __int128 v18;
  uint64_t v19;

  position = _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::find_position((uint64_t)a1, a2);
  if (position == -1)
  {
    result = _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::insert_at(a1, (uint64_t *)a2, v7, (uint64_t)v17);
    v14 = v18;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v17[32];
    *(_OWORD *)(a3 + 48) = v14;
    *(_QWORD *)(a3 + 64) = v19;
    v15 = *(_OWORD *)&v17[16];
    *(_OWORD *)a3 = *(_OWORD *)v17;
    *(_OWORD *)(a3 + 16) = v15;
    v11 = 1;
  }
  else
  {
    _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::get_iter(a1 + 7, position, v16);
    v8 = a1[7];
    v9 = a1[8];
    *(_QWORD *)v17 = a1;
    *(_OWORD *)&v17[8] = v16[0];
    *(_OWORD *)&v17[24] = v16[1];
    *(_QWORD *)&v17[40] = v8;
    *(_QWORD *)&v18 = v9;
    *((_QWORD *)&v18 + 1) = v9;
    v19 = 0;
    result = _tc_google::sparse_hashtable_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted((uint64_t)v17);
    v11 = 0;
    v12 = v18;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v17[32];
    *(_OWORD *)(a3 + 48) = v12;
    *(_QWORD *)(a3 + 64) = v19;
    v13 = *(_OWORD *)&v17[16];
    *(_OWORD *)a3 = *(_OWORD *)v17;
    *(_OWORD *)(a3 + 16) = v13;
  }
  *(_BYTE *)(a3 + 72) = v11;
  return result;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::maybe_shrink(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  void **v8;
  _BYTE v9[32];
  uint64_t v10;
  _QWORD v11[6];

  v11[5] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = v2 >= v3;
  else
    v4 = 1;
  if (v4 || (v5 = *(_QWORD *)(a1 + 80), v5 < 0x21))
  {
    result = 0;
  }
  else
  {
    do
    {
      v6 = v5;
      v5 >>= 1;
    }
    while (v6 >= 0x42 && v2 < (unint64_t)(float)(*(float *)(a1 + 20) * (float)v5));
    _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparse_hashtable((uint64_t)v9, 0, a1, v5);
    _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::swap(a1, (uint64_t)v9);
    v8 = (void **)v11;
    std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo((uint64_t)&v10);
    result = 1;
  }
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

void sub_2182D1ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::~sparse_hashtable((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64x2_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::swap(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64x2_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64x2_t result;
  _BYTE v15[13];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64x2_t *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(uint64x2_t *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  v7 = a2 + 32;
  *(_QWORD *)&v15[5] = *(_QWORD *)(a1 + 37);
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 32);
  v15[12] = *(_BYTE *)(a1 + 44);
  *(_BYTE *)(a1 + 44) = 0;
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::operator=(a1 + 32, (uint64_t *)(a2 + 32));
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::operator=(v7, (uint64_t *)v15);
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo((uint64_t)v15);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v8;
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v9;
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v10;
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v11;
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v12;
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v13;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(_BYTE *)(a1 + 24) = 0;
  result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)*(unint64_t *)(a2 + 80))));
  *(uint64x2_t *)a2 = result;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparse_hashtable(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  __int128 v8;
  unint64_t **v9;
  unint64_t *v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;

  v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 32) = 0;
  v9 = (unint64_t **)(a1 + 32);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  if (a3 != a1)
  {
    v10 = *(unint64_t **)(a3 + 32);
    *(_QWORD *)(a1 + 37) = *(_QWORD *)(a3 + 37);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a3 + 44);
    *(_BYTE *)(a1 + 44) = v11;
    if (v11 <= 9 && ((1 << v11) & 0x33C) != 0)
    {
      v12 = *v9;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  *(_QWORD *)(a1 + 48) = 0;
  _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::sparsetable((uint64_t *)(a1 + 56), 0);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(_BYTE *)(a1 + 24) = 0;
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::move_from(a1, a2, (_QWORD *)a3, a4);
  return a1;
}

void sub_2182D2130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::~KeyInfo(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *_tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::move_from(uint64_t a1, int a2, _QWORD *a3, unint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::clear(a1);
  if (a2 == 1)
    v8 = a3[10];
  else
    v8 = _tc_google::sparsehash_internal::sh_hashtable_settings<turi::flexible_type,std::hash<turi::flexible_type>,unsigned long,4>::min_buckets(a1, a3[11] - a3[6], a4);
  if (v8 > *(_QWORD *)(a1 + 80))
  {
    _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::resize((uint64_t *)(a1 + 56), v8);
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
    *(_BYTE *)(a1 + 24) = 0;
  }
  _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::destructive_begin((uint64_t)a3, (uint64_t)v29);
  while (1)
  {
    v9 = a3[7];
    v10 = a3[8];
    v20 = a3;
    v21 = v9;
    v22 = v10;
    v23 = v10;
    v24 = 0;
    v25 = v9;
    v26 = v10;
    v27 = v10;
    v28 = 0;
    result = (unsigned __int8 *)_tc_google::sparse_hashtable_destructive_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted((uint64_t)&v20);
    if (v30 != v21 || v31 != v22 || v32 != v23)
    {
      result = (unsigned __int8 *)v33;
      goto LABEL_11;
    }
    if (v32 == v31)
      break;
    result = (unsigned __int8 *)v33;
    if (v33 == v24)
      break;
LABEL_11:
    v12 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(result);
    v13 = *(_QWORD *)(a1 + 80) - 1;
    for (i = 1; ; ++i)
    {
      v15 = v12 & v13;
      v16 = (v12 & (unint64_t)v13) / 0x30;
      v17 = (v12 & (unint64_t)v13) % 0x30;
      v18 = *(_QWORD *)(a1 + 56) + 16 * v16;
      if (((*(unsigned __int8 *)(v18 + (v17 >> 3) + 10) >> (v17 & 7)) & 1) == 0)
        break;
      v12 = i + v15;
    }
    v19 = *(unsigned __int16 *)(v18 + 8);
    _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::set(v18, (unsigned __int16)v17, v33);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 88) - v19 + *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16 * v16 + 8);
    v33 += 3;
    _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::advance_past_end(&v30);
    _tc_google::sparse_hashtable_destructive_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted((uint64_t)v29);
  }
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64x2_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64x2_t result;

  if (*(_QWORD *)(a1 + 48) | *(_QWORD *)(a1 + 88))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v2 = *(_QWORD *)(a1 + 64);
    while (v3 != v2)
    {
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(v3);
      *(_QWORD *)(v3 + 8) = 0;
      v2 = *(_QWORD *)(a1 + 64);
      v3 += 16;
    }
    *(_QWORD *)(a1 + 88) = 0;
  }
  result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 80))));
  *(uint64x2_t *)a1 = result;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

void _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  if (a2)
    v4 = (a2 - 1) / 0x30 + 1;
  else
    v4 = 0;
  v10[0] = 0;
  v10[1] = 0;
  std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>::resize(a1, v4, (uint64_t)v10);
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group((uint64_t)v10);
  if (a1[3] > a2)
  {
    v5 = a2 % 0x30;
    if (a2 % 0x30)
    {
      v6 = a1[1] - 16;
      do
        _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::erase(v6, (unsigned __int16)v5++);
      while ((unsigned __int16)v5 != 48);
    }
    a1[4] = 0;
    v7 = *a1;
    v8 = a1[1];
    if (*a1 != v8)
    {
      v9 = 0;
      do
      {
        v9 += *(unsigned __int16 *)(v7 + 8);
        v7 += 16;
      }
      while (v7 != v8);
      a1[4] = v9;
    }
  }
  a1[3] = a2;
}

void sub_2182D248C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::destructive_begin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;

  v4 = *(_QWORD **)(a1 + 56);
  v5 = *(_QWORD **)(a1 + 64);
  *(_QWORD *)&v9 = v4;
  *((_QWORD *)&v9 + 1) = v5;
  v10 = (unint64_t)v4;
  if (v4 == v5)
  {
    v6 = v4;
  }
  else
  {
    *((_QWORD *)&v10 + 1) = *v4;
    _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::advance_past_end(&v9);
    v4 = *(_QWORD **)(a1 + 56);
    v6 = *(_QWORD **)(a1 + 64);
  }
  *(_QWORD *)a2 = a1;
  v7 = v10;
  *(_OWORD *)(a2 + 8) = v9;
  *(_OWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = 0;
  return _tc_google::sparse_hashtable_destructive_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted(a2);
}

void _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::erase(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;
  int v5;
  unsigned int v7;

  v2 = a1 + (a2 >> 3);
  v4 = *(unsigned __int8 *)(v2 + 10);
  v3 = (_BYTE *)(v2 + 10);
  v5 = 1 << (a2 & 7);
  if ((v5 & v4) != 0)
  {
    v7 = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset((unsigned __int8 *)(a1 + 10), a2);
    if (*(_WORD *)(a1 + 8) == 1)
    {
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(a1);
      *(_QWORD *)a1 = 0;
    }
    else
    {
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::erase_aux(a1, v7);
    }
    --*(_WORD *)(a1 + 8);
    *v3 &= ~(_BYTE)v5;
  }
}

void _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::erase_aux(uint64_t a1, unsigned int a2)
{
  void *group;

  group = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::allocate_group(a1, (unsigned __int16)(*(_WORD *)(a1 + 8) - 1));
  std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>(*(uint64_t **)a1, (uint64_t *)(*(_QWORD *)a1 + 24 * a2), (uint64_t)group);
  std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>((uint64_t *)(*(_QWORD *)a1 + 24 * a2 + 24), (uint64_t *)(*(_QWORD *)a1 + 24 * *(unsigned __int16 *)(a1 + 8)), (uint64_t)group + 24 * a2);
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(a1);
  *(_QWORD *)a1 = group;
}

uint64_t _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::advance_past_end(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = a1 + 2;
  result = a1[2];
  v4 = (_QWORD *)(result + 8);
  if (v3[1] == *(_QWORD *)result + 24 * *(unsigned __int16 *)(result + 8))
  {
    do
    {
      _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(result);
      *v4 = 0;
      v5 = a1[1];
      v6 = a1[2];
      result = v6 + 16;
      a1[2] = v6 + 16;
      if (v6 + 16 == v5)
        break;
      v7 = *(unsigned __int16 *)(v6 + 24);
      v4 = (_QWORD *)(v6 + 24);
      a1[3] = *(v4 - 1);
    }
    while (!v7);
  }
  return result;
}

uint64_t _tc_google::sparse_hashtable_destructive_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted(uint64_t result)
{
  uint64_t *v1;
  _QWORD *i;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)result;
  for (i = (_QWORD *)(result + 8);
        ;
        result = _tc_google::destructive_two_d_iterator<std::vector<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>,_tc_google::libc_allocator_with_realloc<_tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>>>>::advance_past_end(i))
  {
    if (v1[1] == v1[5])
    {
      v3 = v1[2];
      if (v3 == v1[6])
      {
        v4 = v1[3];
        if (v4 == v1[7] && (v4 == v3 || v1[4] == v1[8]))
          break;
      }
    }
    if (!*(_QWORD *)(*v1 + 48))
      break;
    result = std::equal_to<turi::flexible_type>::operator()[abi:ne180100](*v1 + 32, (unsigned __int8 *)(*v1 + 32), v1[4]);
    if (!(_DWORD)result)
      break;
    v1[4] += 24;
  }
  return result;
}

uint64_t _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::set(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t *v16;
  unint64_t v17;

  v6 = a1 + 10;
  v7 = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::pos_to_offset((unsigned __int8 *)(a1 + 10), a2);
  v8 = v7;
  v9 = (_BYTE *)(v6 + (a2 >> 3));
  v10 = 1 << (a2 & 7);
  if ((v10 & *v9) != 0)
  {
    v11 = v7;
    std::pair<turi::flexible_type const,unsigned long>::~pair(*(_QWORD *)a1 + 24 * v7);
  }
  else
  {
    _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::set_aux(a1, v7);
    ++*(_WORD *)(a1 + 8);
    *v9 |= v10;
    v11 = v8;
  }
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)a1 + 24 * v11;
  *(_QWORD *)v13 = 0;
  *(_DWORD *)(v13 + 8) = 0;
  *(_BYTE *)(v13 + 12) = 0;
  if ((uint64_t *)v13 != a3)
  {
    v14 = *a3;
    *(_QWORD *)(v13 + 5) = *(uint64_t *)((char *)a3 + 5);
    *(_QWORD *)v13 = v14;
    v15 = *((unsigned __int8 *)a3 + 12);
    *(_BYTE *)(v13 + 12) = v15;
    if (v15 <= 9 && ((1 << v15) & 0x33C) != 0)
    {
      v16 = *(unint64_t **)v13;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
  }
  *(_QWORD *)(v12 + 24 * v11 + 16) = a3[2];
  return *(_QWORD *)a1 + 24 * v11;
}

void _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::set_aux(uint64_t a1, unsigned int a2)
{
  void *group;

  group = _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::allocate_group(a1, (unsigned __int16)(*(_WORD *)(a1 + 8) + 1));
  std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>(*(uint64_t **)a1, (uint64_t *)(*(_QWORD *)a1 + 24 * a2), (uint64_t)group);
  std::uninitialized_copy[abi:ne180100]<std::pair<turi::flexible_type const,unsigned long> *,std::pair<turi::flexible_type const,unsigned long> *>((uint64_t *)(*(_QWORD *)a1 + 24 * a2), (uint64_t *)(*(_QWORD *)a1 + 24 * *(unsigned __int16 *)(a1 + 8)), (uint64_t)group + 24 * a2 + 24);
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::free_group(a1);
  *(_QWORD *)a1 = group;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::KeyInfo::operator=(uint64_t a1, uint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void **v35;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(_BYTE *)(a1 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a1;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a1;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a1;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v35);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a1;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v35);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a1;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a1;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)a1 = v33;
    *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
    *((_BYTE *)a2 + 12) = 0;
  }
  return a1;
}

uint64_t _tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::insert_at@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::logic_error *exception;
  _OWORD v15[2];

  if (a1[11] - a1[6] >= 0xAAAAAAAAAAAAAAAuLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "insert overflow");
    __cxa_throw(exception, (struct type_info *)off_24D916A78, (void (*)(void *))MEMORY[0x24BEDAAF0]);
  }
  if (_tc_google::sparse_hashtable<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::test_deleted((uint64_t)a1, a3))--a1[6];
  v8 = a1[7] + 16 * (a3 / 0x30);
  v9 = *(unsigned __int16 *)(v8 + 8);
  _tc_google::sparsegroup<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::set(v8, a3 % 0x30, a2);
  a1[11] = a1[11] - v9 + *(unsigned __int16 *)(a1[7] + 16 * (a3 / 0x30) + 8);
  _tc_google::sparsetable<std::pair<turi::flexible_type const,unsigned long>,(unsigned short)48,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::get_iter(a1 + 7, a3, v15);
  v10 = a1[7];
  v11 = a1[8];
  *(_QWORD *)a4 = a1;
  v12 = v15[1];
  *(_OWORD *)(a4 + 8) = v15[0];
  *(_OWORD *)(a4 + 24) = v12;
  *(_QWORD *)(a4 + 40) = v10;
  *(_QWORD *)(a4 + 48) = v11;
  *(_QWORD *)(a4 + 56) = v11;
  *(_QWORD *)(a4 + 64) = 0;
  return _tc_google::sparse_hashtable_iterator<std::pair<turi::flexible_type const,unsigned long>,turi::flexible_type,std::hash<turi::flexible_type>,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SelectKey,_tc_google::sparse_hash_map<turi::flexible_type,unsigned long,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::SetKey,std::equal_to<turi::flexible_type>,_tc_google::libc_allocator_with_realloc<std::pair<turi::flexible_type const,unsigned long>>>::advance_past_deleted(a4);
}

void sub_2182D2C24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::flexible_type&,unsigned long,int,turi::flex_type_enum &,void>@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X2>, int *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x130uLL);
  result = std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type&,unsigned long,int,turi::flex_type_enum &,std::allocator<turi::sarray<turi::flexible_type>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_2182D2C9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type&,unsigned long,int,turi::flex_type_enum &,std::allocator<turi::sarray<turi::flexible_type>>,0>(_QWORD *a1, uint64_t a2, unint64_t *a3, int *a4, char *a5)
{
  a1[2] = 0;
  *a1 = &unk_24D91E608;
  a1[1] = 0;
  turi::sarray<turi::flexible_type>::sarray((uint64_t)(a1 + 3), a2, *a3, *a4, *a5);
  return a1;
}

void sub_2182D2CF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,turi::flex_type_enum>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flex_type_enum>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_BYTE *)i + 40) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_2182D2F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

__n128 OUTLINED_FUNCTION_23_2(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

__n128 OUTLINED_FUNCTION_26_2(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

void OUTLINED_FUNCTION_61(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16)
{
  std::locale::~locale(&a16);
}

void OUTLINED_FUNCTION_64(uint64_t a1, uint64_t a2, void **a3)
{
  operator delete(*a3);
}

uint64_t OUTLINED_FUNCTION_73_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  return file_logger::operator<<<std::string>(v4, (uint64_t)va);
}

void __cxx_global_var_init_37()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sgraph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t std::map<std::string,turi::flexible_type>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

turi::supervised_2::linear_regression *turi::supervised_2::linear_regression::linear_regression(turi::supervised_2::linear_regression *this)
{
  turi::supervised_2::supervised_learning_model_base *v2;
  unint64_t v3;

  v2 = turi::supervised_2::supervised_learning_model_base::supervised_learning_model_base(this);
  *(_QWORD *)v2 = &off_24D936EB0;
  *((_QWORD *)v2 + 103) = 0;
  *((_QWORD *)v2 + 105) = 0;
  *((_QWORD *)v2 + 104) = 0;
  v3 = turi::thread::cpu_count(v2);
  std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::vector((_QWORD *)this + 106, v3);
  *((_QWORD *)this + 109) = 0;
  *((_BYTE *)this + 880) = 1;
  return this;
}

void sub_2182D315C(_Unwind_Exception *a1)
{
  void **v1;

  free(v1[103]);
  turi::supervised_2::supervised_learning_model_base::~supervised_learning_model_base((turi::supervised_2::supervised_learning_model_base *)v1);
  _Unwind_Resume(a1);
}

turi::supervised_2::supervised_learning_model_base *turi::supervised_2::supervised_learning_model_base::supervised_learning_model_base(turi::supervised_2::supervised_learning_model_base *this)
{
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = (char *)this + 208;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = (char *)this + 280;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = (char *)this + 304;
  *(_QWORD *)this = &unk_24D9459F0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 320) = 1;
  *((_QWORD *)this + 41) = 0;
  *((_BYTE *)this + 336) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_BYTE *)this + 360) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  turi::ml_data::ml_data((turi::supervised_2::supervised_learning_model_base *)((char *)this + 384));
  turi::ml_data::ml_data((turi::supervised_2::supervised_learning_model_base *)((char *)this + 576));
  *((_QWORD *)this + 102) = 0;
  *((_QWORD *)this + 101) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_QWORD *)this + 100) = (char *)this + 808;
  return this;
}

void sub_2182D3278(_Unwind_Exception *a1)
{
  uint64_t v1;
  turi::ml_data *v2;
  turi::ml_data *v3;

  v3 = v2;
  turi::ml_data::~ml_data(v3);
  free(*(void **)(v1 + 368));
  free(*(void **)(v1 + 344));
  turi::ml_model_base::~ml_model_base((char **)v1);
  _Unwind_Resume(a1);
}

void turi::supervised_2::supervised_learning_model_base::~supervised_learning_model_base(turi::supervised_2::supervised_learning_model_base *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &unk_24D9459F0;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 800, *((char **)this + 101));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 768);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 752);
  v4 = (void **)((char *)this + 728);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 712);
  v4 = (void **)((char *)this + 680);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 80);
  if (v2)
  {
    *((_QWORD *)this + 81) = v2;
    operator delete(v2);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 560);
  v4 = (void **)((char *)this + 536);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  v4 = (void **)((char *)this + 488);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 56);
  if (v3)
  {
    *((_QWORD *)this + 57) = v3;
    operator delete(v3);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 384);
  free(*((void **)this + 46));
  free(*((void **)this + 43));
  *(_QWORD *)this = &unk_24D918858;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 296, *((char **)this + 38));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  v4 = (void **)((char *)this + 248);
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 224, *((char **)this + 29));
  turi::model_base::~model_base(this);
}

void turi::supervised_2::linear_regression::~linear_regression(turi::supervised_2::linear_regression *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_24D936EB0;
  v2 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 848);
  std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  free(*((void **)this + 103));
  turi::supervised_2::supervised_learning_model_base::~supervised_learning_model_base(this);
}

{
  turi::supervised_2::linear_regression::~linear_regression(this);
  JUMPOUT(0x219A19A08);
}

void turi::supervised_2::linear_regression::internal_init_options(turi::supervised_2::linear_regression *this)
{
  turi::option_manager *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  std::string *v90;
  std::string *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::string::size_type v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  std::string::size_type v101;
  void *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  std::string::size_type v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  void *v111;
  void *v112;
  unsigned int v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  std::string::size_type v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  void *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  void *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  void *v176;
  void *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  void *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  void *v205;
  void *v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t *v209;
  std::string v210;
  std::string __p;
  void **v212;
  char v213;
  uint64_t v214;
  int v215;
  char v216;
  _QWORD v217[2];
  std::string v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  int v222;
  char v223;
  uint64_t v224;
  int v225;
  char v226;
  uint64_t v227;
  int v228;
  char v229;
  uint64_t v230;

  v230 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v218, "convergence_threshold");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Convergence threshold for training");
  v2 = (turi::supervised_2::linear_regression *)((char *)this + 224);
  v228 = 0;
  v229 = 1;
  v227 = 0x3F1A36E2EB1C432DLL;
  turi::option_manager::create_real_option(v2, &v218, &__p, (uint64_t)&v227, 0, 1.0e-10, 1.0e20);
  switch(v229)
  {
    case 2:
      v3 = (unint64_t *)v227;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        v6 = v227;
        if (v227)
        {
          if (*(char *)(v227 + 31) < 0)
            operator delete(*(void **)(v227 + 8));
          v7 = v6;
          v8 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v9 = (unint64_t *)v227;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v227;
        if (v227)
        {
          v13 = *(void **)(v227 + 8);
          if (v13)
          {
            *(_QWORD *)(v227 + 16) = v13;
            operator delete(v13);
          }
          v7 = v12;
          v8 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v14 = (unint64_t *)v227;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = v227;
        if (v227)
        {
          v210.__r_.__value_.__r.__words[0] = v227 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v18 = (unint64_t *)v227;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v17 = v227;
        if (v227)
        {
          v210.__r_.__value_.__r.__words[0] = v227 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
LABEL_26:
          v7 = v17;
          v8 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v21 = (unint64_t *)v227;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = v227;
        if (v227)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v227 + 16));
          v7 = v24;
          v25 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v26 = (unint64_t *)v227;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v227;
        if (v227)
        {
          v30 = *(void **)(v227 + 48);
          if (v30)
          {
            *(_QWORD *)(v227 + 56) = v30;
            operator delete(v30);
          }
          v31 = *(void **)(v29 + 24);
          if (v31)
          {
            *(_QWORD *)(v29 + 32) = v31;
            operator delete(v31);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29 + 8);
          v7 = v29;
          v25 = 2071181815;
LABEL_41:
          v8 = v25 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v7, v8);
        }
      }
      break;
    default:
      break;
  }
  v227 = 0;
  v228 = 0;
  v229 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v218, "step_size");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Guess for the initial step size for the solver.");
  v225 = 0;
  v226 = 1;
  v224 = 0x3FF0000000000000;
  turi::option_manager::create_real_option(v2, &v218, &__p, (uint64_t)&v224, 0, 1.0e-10, 1.0e20);
  switch(v226)
  {
    case 2:
      v32 = (unint64_t *)v224;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = v224;
        if (v224)
        {
          if (*(char *)(v224 + 31) < 0)
            operator delete(*(void **)(v224 + 8));
          v36 = v35;
          v37 = 0x1012C404EF22A49;
          goto LABEL_88;
        }
      }
      break;
    case 3:
      v38 = (unint64_t *)v224;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = v224;
        if (v224)
        {
          v42 = *(void **)(v224 + 8);
          if (v42)
          {
            *(_QWORD *)(v224 + 16) = v42;
            operator delete(v42);
          }
          v36 = v41;
          v37 = 0x1080C409938AC02;
          goto LABEL_88;
        }
      }
      break;
    case 4:
      v43 = (unint64_t *)v224;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        v46 = v224;
        if (v224)
        {
          v210.__r_.__value_.__r.__words[0] = v224 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
          goto LABEL_72;
        }
      }
      break;
    case 5:
      v47 = (unint64_t *)v224;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        v46 = v224;
        if (v224)
        {
          v210.__r_.__value_.__r.__words[0] = v224 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
LABEL_72:
          v36 = v46;
          v37 = 0x1020C405E66F15BLL;
          goto LABEL_88;
        }
      }
      break;
    case 8:
      v50 = (unint64_t *)v224;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        v53 = v224;
        if (v224)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v224 + 16));
          v36 = v53;
          v54 = -235920773;
          goto LABEL_87;
        }
      }
      break;
    case 9:
      v55 = (unint64_t *)v224;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        v58 = v224;
        if (v224)
        {
          v59 = *(void **)(v224 + 48);
          if (v59)
          {
            *(_QWORD *)(v224 + 56) = v59;
            operator delete(v59);
          }
          v60 = *(void **)(v58 + 24);
          if (v60)
          {
            *(_QWORD *)(v58 + 32) = v60;
            operator delete(v60);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v58 + 8);
          v36 = v58;
          v54 = 2071181815;
LABEL_87:
          v37 = v54 | 0x1030C4000000000;
LABEL_88:
          MEMORY[0x219A19A08](v36, v37);
        }
      }
      break;
    default:
      break;
  }
  v224 = 0;
  v225 = 0;
  v226 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v218, "lbfgs_memory_level");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Number of previous iterations to cache for LBFGS");
  v223 = 0;
  v222 = 0;
  v221 = 11;
  turi::option_manager::create_integer_option(v2, &v218, &__p, (uint64_t)&v221, 1, 0x7FFFFFFFLL, 0);
  switch(v223)
  {
    case 2:
      v61 = (unint64_t *)v221;
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        v64 = v221;
        if (v221)
        {
          if (*(char *)(v221 + 31) < 0)
            operator delete(*(void **)(v221 + 8));
          v65 = v64;
          v66 = 0x1012C404EF22A49;
          goto LABEL_134;
        }
      }
      break;
    case 3:
      v67 = (unint64_t *)v221;
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        v70 = v221;
        if (v221)
        {
          v71 = *(void **)(v221 + 8);
          if (v71)
          {
            *(_QWORD *)(v221 + 16) = v71;
            operator delete(v71);
          }
          v65 = v70;
          v66 = 0x1080C409938AC02;
          goto LABEL_134;
        }
      }
      break;
    case 4:
      v72 = (unint64_t *)v221;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v75 = v221;
        if (v221)
        {
          v210.__r_.__value_.__r.__words[0] = v221 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
          goto LABEL_118;
        }
      }
      break;
    case 5:
      v76 = (unint64_t *)v221;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        v75 = v221;
        if (v221)
        {
          v210.__r_.__value_.__r.__words[0] = v221 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
LABEL_118:
          v65 = v75;
          v66 = 0x1020C405E66F15BLL;
          goto LABEL_134;
        }
      }
      break;
    case 8:
      v79 = (unint64_t *)v221;
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (!v81)
      {
        v82 = v221;
        if (v221)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v221 + 16));
          v65 = v82;
          v83 = -235920773;
          goto LABEL_133;
        }
      }
      break;
    case 9:
      v84 = (unint64_t *)v221;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = v221;
        if (v221)
        {
          v88 = *(void **)(v221 + 48);
          if (v88)
          {
            *(_QWORD *)(v221 + 56) = v88;
            operator delete(v88);
          }
          v89 = *(void **)(v87 + 24);
          if (v89)
          {
            *(_QWORD *)(v87 + 32) = v89;
            operator delete(v89);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v87 + 8);
          v65 = v87;
          v83 = 2071181815;
LABEL_133:
          v66 = v83 | 0x1030C4000000000;
LABEL_134:
          MEMORY[0x219A19A08](v65, v66);
        }
      }
      break;
    default:
      break;
  }
  v221 = 0;
  v222 = 0;
  v223 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "solver");
  std::string::basic_string[abi:ne180100]<0>(&v210, "Solver used for training the logistic regression model.");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v219, "auto");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v218, "auto");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v218.__r_.__value_.__r.__words[2], "lbfgs");
  v207 = 0;
  v208 = 0;
  v209 = 0;
  v212 = (void **)&v207;
  v213 = 0;
  v207 = (uint64_t *)operator new(0x20uLL);
  v208 = v207;
  v209 = v207 + 4;
  v90 = (std::string *)&v219;
  v208 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v209, (uint64_t *)&v218, &v219, (uint64_t)v207);
  turi::option_manager::create_categorical_option(v2, &__p, &v210, (uint64_t)&v219, &v207, 0);
  v212 = (void **)&v207;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v212);
  do
  {
    v91 = v90;
    v90 = (std::string *)((char *)v90 - 16);
    switch(v91[-1].__r_.__value_.__s.__data_[20])
    {
      case 2:
        v92 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          v95 = v90->__r_.__value_.__r.__words[0];
          if (!v90->__r_.__value_.__r.__words[0])
            goto LABEL_182;
          if (*(char *)(v95 + 31) < 0)
            operator delete(*(void **)(v95 + 8));
          v96 = (_QWORD *)v95;
          v97 = 0x1012C404EF22A49;
          goto LABEL_181;
        }
        break;
      case 3:
        v98 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v99 = __ldaxr(v98);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, v98));
        if (!v100)
        {
          v101 = v90->__r_.__value_.__r.__words[0];
          if (!v90->__r_.__value_.__r.__words[0])
            goto LABEL_182;
          v102 = *(void **)(v101 + 8);
          if (v102)
          {
            *(_QWORD *)(v101 + 16) = v102;
            operator delete(v102);
          }
          v96 = (_QWORD *)v101;
          v97 = 0x1080C409938AC02;
          goto LABEL_181;
        }
        break;
      case 4:
        v103 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v104 = __ldaxr(v103);
          v105 = v104 - 1;
        }
        while (__stlxr(v105, v103));
        if (!v105)
        {
          v106 = v90->__r_.__value_.__r.__words[0];
          if (!v90->__r_.__value_.__r.__words[0])
            goto LABEL_182;
          v212 = (void **)(v106 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v212);
          goto LABEL_174;
        }
        break;
      case 5:
        v114 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v115 = __ldaxr(v114);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, v114));
        if (!v116)
        {
          v106 = v90->__r_.__value_.__r.__words[0];
          if (!v90->__r_.__value_.__r.__words[0])
            goto LABEL_182;
          v212 = (void **)(v106 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v212);
LABEL_174:
          v96 = (_QWORD *)v106;
          v97 = 0x1020C405E66F15BLL;
          goto LABEL_181;
        }
        break;
      case 8:
        v117 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v118 = __ldaxr(v117);
          v119 = v118 - 1;
        }
        while (__stlxr(v119, v117));
        if (!v119)
        {
          v120 = v90->__r_.__value_.__r.__words[0];
          if (!v90->__r_.__value_.__r.__words[0])
            goto LABEL_182;
          boost::detail::shared_count::~shared_count((unsigned int **)(v120 + 16));
          v96 = (_QWORD *)v120;
          v113 = -235920773;
          goto LABEL_180;
        }
        break;
      case 9:
        v107 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v108 = __ldaxr(v107);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v107));
        if (!v109)
        {
          v110 = (_QWORD *)v90->__r_.__value_.__r.__words[0];
          if (v90->__r_.__value_.__r.__words[0])
          {
            v111 = (void *)v110[6];
            if (v111)
            {
              v110[7] = v111;
              operator delete(v111);
            }
            v112 = (void *)v110[3];
            if (v112)
            {
              v110[4] = v112;
              operator delete(v112);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v110 + 1));
            v96 = v110;
            v113 = 2071181815;
LABEL_180:
            v97 = v113 | 0x1030C4000000000;
LABEL_181:
            MEMORY[0x219A19A08](v96, v97);
          }
LABEL_182:
          v90->__r_.__value_.__r.__words[0] = 0;
        }
        break;
      default:
        break;
    }
    v91[-1].__r_.__value_.__l.__size_ = 0;
    LODWORD(v91[-1].__r_.__value_.__r.__words[2]) = 0;
    v91[-1].__r_.__value_.__s.__data_[20] = 0;
  }
  while (v90 != &v218);
  switch(v220)
  {
    case 2:
      v121 = (unint64_t *)v219;
      do
      {
        v122 = __ldaxr(v121);
        v123 = v122 - 1;
      }
      while (__stlxr(v123, v121));
      if (!v123)
      {
        v124 = v219;
        if (v219)
        {
          if (*(char *)(v219 + 31) < 0)
            operator delete(*(void **)(v219 + 8));
          v125 = v124;
          v126 = 0x1012C404EF22A49;
          goto LABEL_225;
        }
      }
      break;
    case 3:
      v127 = (unint64_t *)v219;
      do
      {
        v128 = __ldaxr(v127);
        v129 = v128 - 1;
      }
      while (__stlxr(v129, v127));
      if (!v129)
      {
        v130 = v219;
        if (v219)
        {
          v131 = *(void **)(v219 + 8);
          if (v131)
          {
            *(_QWORD *)(v219 + 16) = v131;
            operator delete(v131);
          }
          v125 = v130;
          v126 = 0x1080C409938AC02;
          goto LABEL_225;
        }
      }
      break;
    case 4:
      v132 = (unint64_t *)v219;
      do
      {
        v133 = __ldaxr(v132);
        v134 = v133 - 1;
      }
      while (__stlxr(v134, v132));
      if (!v134)
      {
        v135 = v219;
        if (v219)
        {
          v218.__r_.__value_.__r.__words[0] = v219 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
          goto LABEL_209;
        }
      }
      break;
    case 5:
      v136 = (unint64_t *)v219;
      do
      {
        v137 = __ldaxr(v136);
        v138 = v137 - 1;
      }
      while (__stlxr(v138, v136));
      if (!v138)
      {
        v135 = v219;
        if (v219)
        {
          v218.__r_.__value_.__r.__words[0] = v219 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
LABEL_209:
          v125 = v135;
          v126 = 0x1020C405E66F15BLL;
          goto LABEL_225;
        }
      }
      break;
    case 8:
      v139 = (unint64_t *)v219;
      do
      {
        v140 = __ldaxr(v139);
        v141 = v140 - 1;
      }
      while (__stlxr(v141, v139));
      if (!v141)
      {
        v142 = v219;
        if (v219)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v219 + 16));
          MEMORY[0x219A19A08](v142, 0x1030C40F1F0227BLL);
        }
        v219 = 0;
      }
      break;
    case 9:
      v143 = (unint64_t *)v219;
      do
      {
        v144 = __ldaxr(v143);
        v145 = v144 - 1;
      }
      while (__stlxr(v145, v143));
      if (!v145)
      {
        v146 = v219;
        if (v219)
        {
          v147 = *(void **)(v219 + 48);
          if (v147)
          {
            *(_QWORD *)(v219 + 56) = v147;
            operator delete(v147);
          }
          v148 = *(void **)(v146 + 24);
          if (v148)
          {
            *(_QWORD *)(v146 + 32) = v148;
            operator delete(v148);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v146 + 8);
          v125 = v146;
          v126 = 0x1030C407B73B9F7;
LABEL_225:
          MEMORY[0x219A19A08](v125, v126);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v218, "l1_penalty");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Penalty on the L1-penalty");
  memset(v217, 0, 13);
  turi::option_manager::create_real_option(v2, &v218, &__p, (uint64_t)v217, 0, 0.0, 1.0e20);
  switch(BYTE4(v217[1]))
  {
    case 2:
      v149 = (unint64_t *)v217[0];
      do
      {
        v150 = __ldaxr(v149);
        v151 = v150 - 1;
      }
      while (__stlxr(v151, v149));
      if (!v151)
      {
        v152 = v217[0];
        if (v217[0])
        {
          if (*(char *)(v217[0] + 31) < 0)
            operator delete(*(void **)(v217[0] + 8));
          v153 = v152;
          v154 = 0x1012C404EF22A49;
          goto LABEL_271;
        }
      }
      break;
    case 3:
      v155 = (unint64_t *)v217[0];
      do
      {
        v156 = __ldaxr(v155);
        v157 = v156 - 1;
      }
      while (__stlxr(v157, v155));
      if (!v157)
      {
        v158 = v217[0];
        if (v217[0])
        {
          v159 = *(void **)(v217[0] + 8);
          if (v159)
          {
            *(_QWORD *)(v217[0] + 16) = v159;
            operator delete(v159);
          }
          v153 = v158;
          v154 = 0x1080C409938AC02;
          goto LABEL_271;
        }
      }
      break;
    case 4:
      v160 = (unint64_t *)v217[0];
      do
      {
        v161 = __ldaxr(v160);
        v162 = v161 - 1;
      }
      while (__stlxr(v162, v160));
      if (!v162)
      {
        v163 = v217[0];
        if (v217[0])
        {
          v210.__r_.__value_.__r.__words[0] = v217[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
          goto LABEL_255;
        }
      }
      break;
    case 5:
      v164 = (unint64_t *)v217[0];
      do
      {
        v165 = __ldaxr(v164);
        v166 = v165 - 1;
      }
      while (__stlxr(v166, v164));
      if (!v166)
      {
        v163 = v217[0];
        if (v217[0])
        {
          v210.__r_.__value_.__r.__words[0] = v217[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
LABEL_255:
          v153 = v163;
          v154 = 0x1020C405E66F15BLL;
          goto LABEL_271;
        }
      }
      break;
    case 8:
      v167 = (unint64_t *)v217[0];
      do
      {
        v168 = __ldaxr(v167);
        v169 = v168 - 1;
      }
      while (__stlxr(v169, v167));
      if (!v169)
      {
        v170 = v217[0];
        if (v217[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v217[0] + 16));
          v153 = v170;
          v171 = -235920773;
          goto LABEL_270;
        }
      }
      break;
    case 9:
      v172 = (unint64_t *)v217[0];
      do
      {
        v173 = __ldaxr(v172);
        v174 = v173 - 1;
      }
      while (__stlxr(v174, v172));
      if (!v174)
      {
        v175 = v217[0];
        if (v217[0])
        {
          v176 = *(void **)(v217[0] + 48);
          if (v176)
          {
            *(_QWORD *)(v217[0] + 56) = v176;
            operator delete(v176);
          }
          v177 = *(void **)(v175 + 24);
          if (v177)
          {
            *(_QWORD *)(v175 + 32) = v177;
            operator delete(v177);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v175 + 8);
          v153 = v175;
          v171 = 2071181815;
LABEL_270:
          v154 = v171 | 0x1030C4000000000;
LABEL_271:
          MEMORY[0x219A19A08](v153, v154);
        }
      }
      break;
    default:
      break;
  }
  memset(v217, 0, 13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v218, "l2_penalty");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Penalty on the L2-penalty");
  v215 = 0;
  v216 = 1;
  v214 = 0x3F1A36E2EB1C432DLL;
  turi::option_manager::create_real_option(v2, &v218, &__p, (uint64_t)&v214, 0, 0.0, 1.0e20);
  switch(v216)
  {
    case 2:
      v178 = (unint64_t *)v214;
      do
      {
        v179 = __ldaxr(v178);
        v180 = v179 - 1;
      }
      while (__stlxr(v180, v178));
      if (!v180)
      {
        v181 = v214;
        if (v214)
        {
          if (*(char *)(v214 + 31) < 0)
            operator delete(*(void **)(v214 + 8));
          v182 = v181;
          v183 = 0x1012C404EF22A49;
          goto LABEL_317;
        }
      }
      break;
    case 3:
      v184 = (unint64_t *)v214;
      do
      {
        v185 = __ldaxr(v184);
        v186 = v185 - 1;
      }
      while (__stlxr(v186, v184));
      if (!v186)
      {
        v187 = v214;
        if (v214)
        {
          v188 = *(void **)(v214 + 8);
          if (v188)
          {
            *(_QWORD *)(v214 + 16) = v188;
            operator delete(v188);
          }
          v182 = v187;
          v183 = 0x1080C409938AC02;
          goto LABEL_317;
        }
      }
      break;
    case 4:
      v189 = (unint64_t *)v214;
      do
      {
        v190 = __ldaxr(v189);
        v191 = v190 - 1;
      }
      while (__stlxr(v191, v189));
      if (!v191)
      {
        v192 = v214;
        if (v214)
        {
          v210.__r_.__value_.__r.__words[0] = v214 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
          goto LABEL_301;
        }
      }
      break;
    case 5:
      v193 = (unint64_t *)v214;
      do
      {
        v194 = __ldaxr(v193);
        v195 = v194 - 1;
      }
      while (__stlxr(v195, v193));
      if (!v195)
      {
        v192 = v214;
        if (v214)
        {
          v210.__r_.__value_.__r.__words[0] = v214 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
LABEL_301:
          v182 = v192;
          v183 = 0x1020C405E66F15BLL;
          goto LABEL_317;
        }
      }
      break;
    case 8:
      v196 = (unint64_t *)v214;
      do
      {
        v197 = __ldaxr(v196);
        v198 = v197 - 1;
      }
      while (__stlxr(v198, v196));
      if (!v198)
      {
        v199 = v214;
        if (v214)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v214 + 16));
          v182 = v199;
          v200 = -235920773;
          goto LABEL_316;
        }
      }
      break;
    case 9:
      v201 = (unint64_t *)v214;
      do
      {
        v202 = __ldaxr(v201);
        v203 = v202 - 1;
      }
      while (__stlxr(v203, v201));
      if (!v203)
      {
        v204 = v214;
        if (v214)
        {
          v205 = *(void **)(v214 + 48);
          if (v205)
          {
            *(_QWORD *)(v214 + 56) = v205;
            operator delete(v205);
          }
          v206 = *(void **)(v204 + 24);
          if (v206)
          {
            *(_QWORD *)(v204 + 32) = v206;
            operator delete(v206);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v204 + 8);
          v182 = v204;
          v200 = 2071181815;
LABEL_316:
          v183 = v200 | 0x1030C4000000000;
LABEL_317:
          MEMORY[0x219A19A08](v182, v183);
        }
      }
      break;
    default:
      break;
  }
  v214 = 0;
  v215 = 0;
  v216 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
}

void sub_2182D4540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,int a30,char a31,void *a32,int a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,char a42)
{
  switch(a28)
  {
    case 2:
      turi::gl_sarray::clip((unint64_t **)&a26);
      break;
    case 3:
      turi::gl_sarray::clip((unint64_t **)&a26);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4((unint64_t **)&a26);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5((unint64_t **)&a26);
      break;
    case 8:
      turi::gl_sarray::clip((unint64_t **)&a26);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((unint64_t **)&a26);
      break;
    default:
      break;
  }
  a26 = 0;
  a27 = 0;
  a28 = 0;
  if (a23 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

void turi::supervised_2::linear_regression::internal_setup_iterative_training(turi::supervised_2::linear_regression *this, int a2)
{
  uint64_t **v4;
  unsigned int *v5;
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  _QWORD *exception;
  void *__p[2];
  char v19;
  void **v20;

  *((_QWORD *)this + 105) = *((_QWORD *)this + 41) + 1;
  v4 = (uint64_t **)((char *)this + 296);
  std::string::basic_string[abi:ne180100]<0>(__p, "num_coefficients");
  v20 = __p;
  v5 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v5 + 14, (_QWORD *)this + 105);
  if (v19 < 0)
    operator delete(__p[0]);
  v6 = (int *)global_logger();
  if (v6[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "internal_setup_iterative_training", 109, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Beginning model training on processed features. ", 48);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (a2)
  {
    if (*((_QWORD *)this + 104) != *((_QWORD *)this + 105))
      turi::supervised_2::linear_regression::internal_setup_iterative_training(BOOL)::$_0::operator()();
  }
  else
  {
    v12 = *((_QWORD *)this + 105);
    if (*((_QWORD *)this + 104) != v12)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 103, *((_QWORD *)this + 105), 1);
      v12 = *((_QWORD *)this + 104);
    }
    v13 = (char *)*((_QWORD *)this + 103);
    if (v12 >= 0)
      v14 = v12;
    else
      v14 = v12 + 1;
    v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (v12 >= 2)
    {
      v16 = 2;
      if (v15 > 2)
        v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
      bzero(v13, ((8 * v16 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v15 < v12)
      bzero(&v13[16 * (v14 >> 1)], 8 * v12 - 16 * (v14 >> 1));
  }
  turi::supervised_2::linear_regression::setup_solver(this);
}

void sub_2182D4EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::setup_solver(turi::supervised_2::linear_regression *this)
{
  turi::flexible_type_impl *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int *v6;
  double v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  float v25;
  std::string *v26;
  unint64_t v27;
  int64x2_t *v28;
  int64_t v29;
  int64_t v30;
  int64x2_t v31;
  int64x2_t *v32;
  unint64_t v33;
  double *v34;
  _QWORD *v35;
  std::string *v36;
  int data;
  int v38;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::bad_alloc *v55;
  std::bad_alloc *v56;
  std::runtime_error *exception;
  std::string *v58;
  __int128 v59;
  double v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  void *v63;
  std::__shared_weak_count *v64;
  char v65;
  std::string v66;
  size_t __idx;
  _BYTE __str[32];
  __int128 v69;
  __int128 v70;
  void *__p;
  char v72;
  uint64_t v73;
  std::string v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v74, "solver");
  v2 = (turi::flexible_type_impl *)turi::option_manager::value((uint64_t)this + 224, (const void **)&v74.__r_.__value_.__l.__data_);
  switch(*((_BYTE *)v2 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_10;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__str);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_10:
      *(_QWORD *)__str = *MEMORY[0x24BEDB7F0];
      v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      *(_QWORD *)&__str[16] = v5;
      *(_QWORD *)&__str[24] = MEMORY[0x24BEDB848] + 16;
      if (v72 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v73);
      goto LABEL_17;
    case 2:
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
      }
      else
      {
        v4 = *(_OWORD *)(v3 + 8);
        v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v4;
      }
      goto LABEL_17;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v2 + 8));
      goto LABEL_17;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (uint64_t *)(*(_QWORD *)v2 + 8));
      goto LABEL_17;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v2 + 8));
      goto LABEL_17;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v2, &v66);
      goto LABEL_17;
    case 7:
      memset(&v66, 0, sizeof(v66));
      goto LABEL_17;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_17;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__str, (_QWORD *)(*(_QWORD *)v2 + 8));
LABEL_17:
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      break;
    default:
      turi::flexible_type_fail(0);
LABEL_111:
      __break(1u);
      return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v63, "l2_penalty");
  v6 = (int *)turi::option_manager::value((uint64_t)this + 224, (const void **)&v63);
  v60 = 0.0;
  switch(*((_BYTE *)v6 + 12))
  {
    case 0:
      v7 = (double)*(uint64_t *)v6;
      goto LABEL_49;
    case 1:
      v7 = *(double *)v6;
      goto LABEL_49;
    case 2:
      v12 = *(_QWORD *)v6;
      v13 = (char **)(*(_QWORD *)v6 + 8);
      __idx = 0;
      v14 = (char *)v13;
      if (*(char *)(v12 + 31) < 0)
        v14 = *v13;
      std::string::basic_string[abi:ne180100]<0>(__str, v14);
      v15 = std::stod((const std::string *)__str, &__idx);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      if (*(char *)(v12 + 31) < 0)
        v16 = *(_QWORD *)(v12 + 16);
      else
        v16 = *(unsigned __int8 *)(v12 + 31);
      if (__idx != v16)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v58 = std::string::append(&v74, " cannot be interpreted as a float");
        v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        *(_QWORD *)&__str[16] = *((_QWORD *)&v58->__r_.__value_.__l + 2);
        *(_OWORD *)__str = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__str);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v25 = v15;
      v7 = v25;
      goto LABEL_49;
    case 3:
      v8 = *(_QWORD *)v6;
      memset(__str, 0, 24);
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v8 + 8), *(_QWORD *)(v8 + 16), (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (*(_QWORD *)__str)
      {
        *(_QWORD *)&__str[8] = *(_QWORD *)__str;
        operator delete(*(void **)__str);
      }
      goto LABEL_50;
    case 4:
      v17 = *(_QWORD *)v6;
      memset(__str, 0, 24);
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      goto LABEL_50;
    case 5:
      v18 = *(_QWORD *)v6;
      memset(__str, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      goto LABEL_50;
    case 6:
      v7 = (double)v6[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v6 << 8) >> 8);
LABEL_49:
      v60 = v7;
      goto LABEL_50;
    case 7:
      goto LABEL_50;
    case 8:
      v19 = *(_QWORD *)v6;
      v20 = *(_QWORD *)(*(_QWORD *)v6 + 16);
      *(_QWORD *)__str = *(_QWORD *)(*(_QWORD *)v6 + 8);
      *(_QWORD *)&__str[8] = v20;
      if (v20)
      {
        v21 = (unsigned int *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(_OWORD *)(v19 + 24);
      v24 = *(_OWORD *)(v19 + 56);
      v69 = *(_OWORD *)(v19 + 40);
      v70 = v24;
      *(_OWORD *)&__str[16] = v23;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
      goto LABEL_50;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)v6 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v69 + 1))
      {
        *(_QWORD *)&v70 = *((_QWORD *)&v69 + 1);
        operator delete(*((void **)&v69 + 1));
      }
      if (*(_QWORD *)&__str[16])
      {
        *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
        operator delete(*(void **)&__str[16]);
      }
      v9 = *(std::__shared_weak_count **)&__str[8];
      if (*(_QWORD *)&__str[8])
      {
        v10 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
LABEL_50:
      if (v65 < 0)
        operator delete(v63);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v66.__r_.__value_.__l.__size_ != 4)
          goto LABEL_59;
        v26 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) != 4)
          goto LABEL_59;
        v26 = &v66;
      }
      if (LODWORD(v26->__r_.__value_.__l.__data_) == 1869903201)
        MEMORY[0x219A19390](&v66, "lbfgs");
LABEL_59:
      std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(__str, "solver", &v66);
      std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v74, (const void **)__str, 1);
      turi::ml_model_base::add_or_update_state((uint64_t)this, &v74);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v74, (char *)v74.__r_.__value_.__l.__size_);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__str[24]);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v63 = 0;
      v64 = 0;
      if (v60 > 1.0e-10)
      {
        *(_OWORD *)__str = 0uLL;
        v27 = *((_QWORD *)this + 105);
        if (v27)
        {
          if (v27 >> 61 || (v28 = (int64x2_t *)malloc_type_malloc(8 * v27, 0x1E76AA36uLL)) == 0)
          {
            v55 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v56 = std::bad_alloc::bad_alloc(v55);
            __cxa_throw(v56, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)__str = v28;
          *(_QWORD *)&__str[8] = v27;
          v29 = v27 & 0xFFFFFFFFFFFFFFFELL;
          if (v27 >= 2)
          {
            v30 = 0;
            v31 = vdupq_lane_s64(*(uint64_t *)&v60, 0);
            v32 = v28;
            do
            {
              *v32++ = v31;
              v30 += 2;
            }
            while (v30 < v29);
          }
        }
        else
        {
          v29 = 0;
          v28 = 0;
          *(_QWORD *)&__str[8] = 0;
        }
        v33 = v27 - v29;
        if ((uint64_t)v27 > v29)
        {
          v34 = (double *)&v28->i64[v29];
          do
          {
            *v34++ = v60;
            --v33;
          }
          while (v33);
        }
        *(_QWORD *)(*(_QWORD *)__str + 8 * *((_QWORD *)this + 41)) = 0;
        v35 = (_QWORD *)operator new();
        turi::optimization::l2_norm::l2_norm(v35, (__int128 **)__str);
        std::shared_ptr<turi::optimization::smooth_regularizer_interface>::reset[abi:ne180100]<turi::optimization::l2_norm,void>(&v63, (uint64_t)v35);
        free(*(void **)__str);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v66.__r_.__value_.__l.__size_ != 5)
          goto LABEL_106;
        v36 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) != 5)
          goto LABEL_106;
        v36 = &v66;
      }
      data = (int)v36->__r_.__value_.__l.__data_;
      v38 = v36->__r_.__value_.__s.__data_[4];
      if (data != 1734763116 || v38 != 115)
LABEL_106:
        turi::supervised_2::linear_regression::setup_solver(void)::$_0::operator()();
      v40 = operator new();
      v41 = (std::__shared_weak_count *)operator new(0x28uLL);
      v41->__shared_owners_ = 0;
      v41->__shared_weak_owners_ = 0;
      v41[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24D936F60;
      v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D937908;
      v41[1].__shared_owners_ = (uint64_t)this;
      v61 = &v41[1].__vftable;
      v62 = v41;
      *(_OWORD *)__str = 0uLL;
      turi::optimization::lbfgs_solver::lbfgs_solver(v40, &v61);
      v42 = *((_QWORD *)this + 109);
      *((_QWORD *)this + 109) = v40;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v43 = v62;
      if (v62)
      {
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = *(std::__shared_weak_count **)&__str[8];
      if (*(_QWORD *)&__str[8])
      {
        v47 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      *((_BYTE *)this + 880) = *(_QWORD *)(*((_QWORD *)this + 96) + 64) < (unint64_t)(4
                                                                                             * *((_QWORD *)this + 53));
      turi::flexible_type_converter<BOOL>::set((unsigned __int8 *)this + 880, (uint64_t)&v74);
      *(_QWORD *)&__str[13] = *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 5);
      *(_QWORD *)&__str[8] = v74.__r_.__value_.__r.__words[0];
      __str[20] = v74.__r_.__value_.__s.__data_[12];
      *(_DWORD *)__str = 0;
      std::string::basic_string[abi:ne180100]<0>(&v74, "dense_coefficient_mode");
      __idx = (size_t)&v74;
      v49 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v74.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&__idx);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v49 + 14, (unsigned int *)__str);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__str);
      v50 = *((_QWORD *)this + 109);
      v51 = turi::option_manager::current_option_values((turi::supervised_2::linear_regression *)((char *)this + 224));
      (*(void (**)(uint64_t, char *, uint64_t, void **))(*(_QWORD *)v50 + 16))(v50, (char *)this + 824, v51, &v63);
      v52 = v64;
      if (v64)
      {
        v53 = (unint64_t *)&v64->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      return;
    default:
      turi::flexible_type_fail(0);
      goto LABEL_111;
  }
}

void sub_2182D5830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;
  uint64_t v36;

  if (a34 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 73) < 0)
  {
    operator delete(*(void **)(v36 - 96));
    if ((v35 & 1) == 0)
    {
LABEL_8:
      if (a19 < 0)
        operator delete(a14);
      if (a25 < 0)
        operator delete(a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

double turi::supervised_2::linear_regression::internal_next_training_iteration@<D0>(turi::supervised_2::linear_regression *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  double result;
  _QWORD *v10;
  uint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  _OWORD *v17;
  __int128 *v18;
  __int128 v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double *v24;
  double v25;
  void *__p[2];
  char v27;
  void **v28;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 109) + 24))(*((_QWORD *)this + 109));
  v4 = *((_QWORD *)this + 109);
  if ((*(_DWORD *)(v4 + 120) - 6) <= 2)
    turi::supervised_2::linear_regression::internal_next_training_iteration(void)::$_0::operator()();
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "residual");
  v28 = __p;
  v5 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v5 + 14, (_QWORD *)(v4 + 80));
  if (v27 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "training_loss");
  v28 = __p;
  v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v6 + 14, (_QWORD *)(v4 + 88));
  if (v27 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num_function_evaluations");
  v28 = __p;
  v7 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v7 + 14, (_QWORD *)(v4 + 96));
  if (v27 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "step_size");
  v28 = __p;
  v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v8 + 14, (_QWORD *)(v4 + 112));
  if (v27 < 0)
    operator delete(__p[0]);
  v10 = (_QWORD *)((char *)this + 824);
  v12 = *(__int128 **)(v4 + 24);
  v11 = *(_QWORD *)(v4 + 32);
  if (*((_QWORD *)this + 104) != v11)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 103, v11, 1);
    v11 = *((_QWORD *)this + 104);
  }
  v13 = (_OWORD *)*v10;
  if (v11 >= 0)
    v14 = v11;
  else
    v14 = v11 + 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    v16 = 0;
    v17 = (_OWORD *)*v10;
    v18 = v12;
    do
    {
      v19 = *v18++;
      result = *(double *)&v19;
      *v17++ = v19;
      v16 += 2;
    }
    while (v16 < v15);
  }
  v20 = __OFSUB__(v11, v15);
  v21 = v11 - v15;
  if (!((v21 < 0) ^ v20 | (v21 == 0)))
  {
    v22 = v14 >> 1;
    v23 = (double *)&v12[v14 >> 1];
    v24 = (double *)&v13[v22];
    do
    {
      v25 = *v23++;
      result = v25;
      *v24++ = v25;
      --v21;
    }
    while (v21);
  }
  return result;
}

void sub_2182D5C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::internal_predict(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *thread_compute_buffer;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double i;
  double v71;
  uint64_t v72;
  uint64_t v73;
  double j;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  double *v85;
  int *v86;
  double v87;
  double v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  _QWORD v95[6];

  thread_compute_buffer = turi::supervised_2::linear_regression::get_thread_compute_buffer((turi::supervised_2::linear_regression *)a1);
  if (*(_BYTE *)(a1 + 880))
  {
    v8 = *((_QWORD *)thread_compute_buffer + 7);
    v7 = *((_QWORD *)thread_compute_buffer + 8);
    v9 = (uint64_t *)(thread_compute_buffer + 56);
    if (v7 >= 0)
      v10 = *((_QWORD *)thread_compute_buffer + 8);
    else
      v10 = v7 + 1;
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v7 >= 2)
    {
      v12 = 2;
      if (v11 > 2)
        v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
      bzero(*((void **)thread_compute_buffer + 7), ((8 * v12 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v11 < v7)
      bzero((void *)(v8 + 16 * (v10 >> 1)), 8 * v7 - 16 * (v10 >> 1));
    if (*((_BYTE *)a2 + 32))
    {
      v13 = *a2;
      v14 = *(_QWORD *)(*a2 + 56);
      if (v14)
      {
        v15 = 0;
        v16 = *(_QWORD *)(v13 + 96) + 8 * a2[2] + 8 * (*(_BYTE *)(v13 + 18) == 0);
        v17 = *(_QWORD *)(v13 + 72);
        v18 = *v9;
        do
        {
          v19 = *(_QWORD *)(v17 + 16 * v15);
          v20 = *(_QWORD *)(v19 + 64);
          v21 = *(_QWORD *)(v19 + 104);
          switch(*(_DWORD *)(v19 + 24))
          {
            case 0:
              v22 = *(double *)v16;
              v16 += 8;
              v23 = v22;
              if (v20)
              {
                if (*(_BYTE *)(a1 + 360))
                  v23 = v23 * *(double *)(*(_QWORD *)(a1 + 368) + 8 * v21);
                goto LABEL_55;
              }
              break;
            case 1:
              v25 = *(double *)v16;
              v16 += 8;
              v24 = v25;
              if (*(_QWORD *)&v25 < v20)
              {
                v21 += *(_QWORD *)&v24;
                if (*(_BYTE *)(a1 + 360))
                  v23 = *(double *)(*(_QWORD *)(a1 + 368) + 8 * v21);
                else
                  v23 = 1.0;
LABEL_55:
                *(double *)(v18 + 8 * v21) = v23;
              }
              break;
            case 2:
              v26 = *(_QWORD *)(v19 + 72);
              if (v26)
              {
                v27 = 0;
                v28 = 0;
                v29 = 8 * v21;
                v30 = *v9 + 8 * v21;
                do
                {
                  if (v28 < v20)
                  {
                    v31 = *(double *)(v16 + 8 * v28);
                    if (*(_BYTE *)(a1 + 360))
                      v31 = v31 * *(double *)(*(_QWORD *)(a1 + 368) + v29 + 8 * v28);
                    *(double *)(v30 + 8 * v28) = v31;
                  }
                  ++v28;
                  v27 -= 8;
                }
                while (v26 != v28);
                goto LABEL_53;
              }
              break;
            case 3:
              v33 = *(double *)v16;
              v16 += 8;
              v32 = v33;
              if (v33 != 0.0)
              {
                v34 = *v9;
                do
                {
                  if (*(_QWORD *)v16 < v20)
                  {
                    v35 = *(_QWORD *)v16 + v21;
                    if (*(_BYTE *)(a1 + 360))
                      v36 = *(double *)(*(_QWORD *)(a1 + 368) + 8 * v35);
                    else
                      v36 = 1.0;
                    *(double *)(v34 + 8 * v35) = v36;
                  }
                  v16 += 8;
                  --*(_QWORD *)&v32;
                }
                while (v32 != 0.0);
              }
              break;
            case 4:
              v38 = *(double *)v16;
              v16 += 8;
              v37 = v38;
              if (v38 != 0.0)
              {
                v39 = *v9;
                do
                {
                  if (*(_QWORD *)v16 < v20)
                  {
                    v40 = *(double *)(v16 + 8);
                    v41 = *(_QWORD *)v16 + v21;
                    if (*(_BYTE *)(a1 + 360))
                      v40 = v40 * *(double *)(*(_QWORD *)(a1 + 368) + 8 * v41);
                    *(double *)(v39 + 8 * v41) = v40;
                  }
                  v16 += 16;
                  --*(_QWORD *)&v37;
                }
                while (v37 != 0.0);
              }
              break;
            case 7:
              v42 = *(_QWORD *)(v19 + 72);
              if (v42)
              {
                v27 = 0;
                v43 = 0;
                v44 = 8 * v21;
                v45 = *v9 + 8 * v21;
                do
                {
                  if (v43 < v20)
                  {
                    v46 = *(double *)(v16 + 8 * v43);
                    if (*(_BYTE *)(a1 + 360))
                      v46 = v46 * *(double *)(*(_QWORD *)(a1 + 368) + v44 + 8 * v43);
                    *(double *)(v45 + 8 * v43) = v46;
                  }
                  ++v43;
                  v27 -= 8;
                }
                while (v42 != v43);
LABEL_53:
                v16 -= v27;
              }
              break;
            default:
              break;
          }
          ++v15;
        }
        while (v15 != v14);
      }
    }
    v47 = *v9;
    *(_QWORD *)(*v9 + 8 * *(_QWORD *)(a1 + 328)) = 0x3FF0000000000000;
    v94[0] = v9;
    v94[1] = a1 + 824;
    if (*(_QWORD *)(a1 + 832))
    {
      v48 = *(_QWORD *)(a1 + 824);
      v95[1] = v47;
      v95[3] = v48;
      v95[5] = v94;
      v49 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v95);
    }
    else
    {
      v49 = 0.0;
    }
  }
  else
  {
    v90 = thread_compute_buffer;
    v91 = a3;
    v50 = (uint64_t)(thread_compute_buffer + 80);
    *((_QWORD *)thread_compute_buffer + 12) = 0;
    if (*((_BYTE *)a2 + 32))
    {
      v51 = *a2;
      v52 = *(_QWORD *)(*a2 + 56);
      if (v52)
      {
        v53 = 0;
        v54 = *(_QWORD *)(v51 + 96) + 8 * a2[2] + 8 * (*(_BYTE *)(v51 + 18) == 0);
        v92 = v52;
        v93 = v51;
        do
        {
          v55 = *(_QWORD *)(*(_QWORD *)(v51 + 72) + 16 * v53);
          v56 = *(_QWORD *)(v55 + 64);
          v57 = *(_QWORD *)(v55 + 104);
          switch(*(_DWORD *)(v55 + 24))
          {
            case 0:
              v58 = *(double *)v54;
              v54 += 8;
              v59 = v58;
              if (v56)
              {
                if (*(_BYTE *)(a1 + 360))
                  v59 = v59 * *(double *)(*(_QWORD *)(a1 + 368) + 8 * v57);
                v60 = (int)v57;
                goto LABEL_70;
              }
              break;
            case 1:
              v62 = *(double *)v54;
              v54 += 8;
              v61 = v62;
              if (*(_QWORD *)&v62 < v56)
              {
                v63 = *(_QWORD *)&v61 + v57;
                if (*(_BYTE *)(a1 + 360))
                {
                  v59 = *(double *)(*(_QWORD *)(a1 + 368) + 8 * v63);
                  v60 = (int)v63;
LABEL_70:
                  v95[0] = 0;
                  *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, v60, v95) = v59;
                }
                else
                {
                  v95[0] = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, (int)v63, v95) = 0x3FF0000000000000;
                }
              }
              break;
            case 2:
              v64 = *(_QWORD *)(v55 + 72);
              if (v64)
              {
                v65 = 0;
                v66 = 0;
                v67 = v57 << 32;
                v68 = 8 * v57;
                do
                {
                  if (v66 < v56)
                  {
                    v69 = *(double *)(v54 + 8 * v66);
                    if (*(_BYTE *)(a1 + 360))
                      v69 = v69 * *(double *)(*(_QWORD *)(a1 + 368) + v68 + 8 * v66);
                    v95[0] = 0;
                    *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, v67 >> 32, v95) = v69;
                  }
                  ++v66;
                  v67 += 0x100000000;
                  v65 -= 8;
                }
                while (v64 != v66);
                goto LABEL_100;
              }
              break;
            case 3:
              v71 = *(double *)v54;
              v54 += 8;
              for (i = v71; i != 0.0; --*(_QWORD *)&i)
              {
                if (*(_QWORD *)v54 < v56)
                {
                  v72 = *(_QWORD *)v54 + v57;
                  if (*(_BYTE *)(a1 + 360))
                  {
                    v73 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * v72);
                    v95[0] = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, (int)v72, v95) = v73;
                  }
                  else
                  {
                    v95[0] = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, (int)v72, v95) = 0x3FF0000000000000;
                  }
                }
                v54 += 8;
              }
              break;
            case 4:
              v75 = *(double *)v54;
              v54 += 8;
              for (j = v75; j != 0.0; --*(_QWORD *)&j)
              {
                if (*(_QWORD *)v54 < v56)
                {
                  v76 = *(double *)(v54 + 8);
                  v77 = *(_QWORD *)v54 + v57;
                  if (*(_BYTE *)(a1 + 360))
                    v76 = v76 * *(double *)(*(_QWORD *)(a1 + 368) + 8 * v77);
                  v95[0] = 0;
                  *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, (int)v77, v95) = v76;
                }
                v54 += 16;
              }
              break;
            case 7:
              v78 = *(_QWORD *)(v55 + 72);
              if (v78)
              {
                v65 = 0;
                v79 = 0;
                v80 = v57 << 32;
                v81 = 8 * v57;
                do
                {
                  if (v79 < v56)
                  {
                    v82 = *(double *)(v54 + 8 * v79);
                    if (*(_BYTE *)(a1 + 360))
                      v82 = v82 * *(double *)(*(_QWORD *)(a1 + 368) + v81 + 8 * v79);
                    v95[0] = 0;
                    *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, v80 >> 32, v95) = v82;
                  }
                  ++v79;
                  v80 += 0x100000000;
                  v65 -= 8;
                }
                while (v78 != v79);
LABEL_100:
                v54 -= v65;
                v52 = v92;
                v51 = v93;
              }
              break;
            default:
              break;
          }
          ++v53;
        }
        while (v53 != v52);
      }
    }
    v83 = *(int *)(a1 + 328);
    v95[0] = 0;
    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v50, v83, v95) = 0x3FF0000000000000;
    v84 = v90[12];
    if (v84 < 1)
    {
      v49 = 0.0;
      a3 = v91;
    }
    else
    {
      v85 = (double *)v90[10];
      v86 = (int *)v90[11];
      v49 = 0.0;
      a3 = v91;
      do
      {
        v87 = *v85++;
        v88 = v87;
        v89 = *v86++;
        v49 = v49 + v88 * *(double *)(*(_QWORD *)(a1 + 824) + 8 * v89);
        --v84;
      }
      while (v84);
    }
  }
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 1;
  *(double *)a3 = v49;
}

_BYTE *turi::supervised_2::linear_regression::get_thread_compute_buffer(turi::supervised_2::linear_regression *this)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v6;

  v2 = *(_QWORD *)turi::thread::get_tls_data(this);
  v3 = *((_QWORD *)this + 106);
  v4 = (_BYTE *)(v3 + 120 * v2);
  if (!*v4)
  {
    if (*((_BYTE *)this + 880))
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(v3 + 120 * v2 + 56), *((_QWORD *)this + 41) + 1);
    }
    else
    {
      v6 = v3 + 120 * v2;
      *(_QWORD *)(v6 + 112) = *((_QWORD *)this + 41) + 1;
      *(_QWORD *)(v6 + 96) = 0;
    }
    *v4 = 1;
  }
  return v4;
}

_QWORD *Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  std::bad_alloc *exception;
  std::bad_alloc *v5;

  v3 = result;
  if (result[1] != a2)
  {
    free((void *)*result);
    if (a2)
    {
      if (a2 >> 61 || (result = malloc_type_malloc(8 * a2, 0x1E76AA36uLL)) == 0)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v5 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v5, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
    }
    else
    {
      result = 0;
    }
    *v3 = result;
  }
  v3[1] = a2;
  return result;
}

void std::shared_ptr<turi::optimization::smooth_regularizer_interface>::reset[abi:ne180100]<turi::optimization::l2_norm,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::optimization::smooth_regularizer_interface>::shared_ptr[abi:ne180100]<turi::optimization::l2_norm,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void turi::supervised_2::linear_regression::setup_solver(void)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "operator()", 264, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised_2::linear_regression::setup_solver(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182D6574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::lr_optimization_interface::~lr_optimization_interface(turi::supervised_2::linear_regression::lr_optimization_interface *this)
{
  turi::neural_net::float_scalar::~float_scalar(this);
  JUMPOUT(0x219A19A08);
}

void turi::supervised_2::linear_regression::lr_optimization_interface::compute_first_order_statistics(uint64_t a1, uint64_t a2, float64x2_t **a3, double *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 880))
    turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(v4, a2, a4, a3, 0);
  else
    turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(v4, a2, a4, a3, 0);
}

void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t a1, uint64_t a2, double *a3, float64x2_t **a4, float64x2_t **a5)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  timeval *v16;
  timeval *v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  float64x2_t *v26;
  float64x2_t *v27;
  float64x2_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *f64;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  float64x2_t *v37;
  uint64_t v38;
  BOOL v40;
  float64x2_t *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  float64x2_t *v64;
  float64x2_t *v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  double *v70;
  double v71;
  uint64_t v72;
  float64x2_t *v73;
  float64x2_t *v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  float64x2_t *v79;
  float64x2_t *v80;
  float64x2_t v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  double *v85;
  double v86;
  int *v87;
  file_logger *v88;
  file_logger *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  const std::locale::facet *v94;
  _QWORD *exception;
  _QWORD *v96;
  std::bad_alloc *v97;
  std::bad_alloc *v98;
  timeval v99;
  BOOL v100;
  timeval v101;
  timeval *v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v100 = a5 != 0;
  gettimeofday(&v99, 0);
  gettimeofday(&v101, 0);
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "_compute_optimization_statistics", 326, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Starting second order stats computation", 39);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet((const std::locale *)&v101, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v101);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v16 = (timeval *)operator new(0x20uLL);
  v16->tv_sec = (__darwin_time_t)&unk_24D937958;
  *(_QWORD *)&v16->tv_usec = a1;
  v16[1].tv_sec = (__darwin_time_t)&v100;
  *(_QWORD *)&v16[1].tv_usec = a2;
  v102 = v16;
  turi::in_parallel((turi::thread_pool *)&v101);
  v17 = v102;
  if (v102 == &v101)
  {
    v18 = 4;
    v17 = &v101;
  }
  else
  {
    if (!v102)
      goto LABEL_14;
    v18 = 5;
  }
  (*(void (**)(void))(v17->tv_sec + 8 * v18))();
LABEL_14:
  v19 = *(double **)(a1 + 848);
  *a3 = v19[6];
  v21 = (float64x2_t *)*((_QWORD *)v19 + 1);
  v20 = *((_QWORD *)v19 + 2);
  if (a4[1] != (float64x2_t *)v20)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v20, 1);
    v20 = (uint64_t)a4[1];
  }
  v22 = *a4;
  if (v20 >= 0)
    v23 = v20;
  else
    v23 = v20 + 1;
  v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (v20 >= 2)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v21;
    do
    {
      v28 = *v27++;
      *v26++ = v28;
      v25 += 2;
    }
    while (v25 < v24);
  }
  v29 = __OFSUB__(v20, v24);
  v30 = v20 - v24;
  if (!((v30 < 0) ^ v29 | (v30 == 0)))
  {
    v31 = v23 >> 1;
    v32 = (uint64_t *)&v21[v23 >> 1];
    f64 = (_QWORD *)v22[v31].f64;
    do
    {
      v34 = *v32++;
      *f64++ = v34;
      --v30;
    }
    while (v30);
  }
  if (a5)
  {
    v35 = *(_QWORD **)(a1 + 848);
    v37 = (float64x2_t *)v35[3];
    v36 = v35[4];
    v38 = v35[5];
    if (a5[1] != (float64x2_t *)v36 || a5[2] != (float64x2_t *)v38)
    {
      if (v36)
        v40 = v38 == 0;
      else
        v40 = 1;
      if (!v40 && 0x7FFFFFFFFFFFFFFFLL / v38 < v36)
      {
        v97 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v98 = std::bad_alloc::bad_alloc(v97);
        __cxa_throw(v98, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a5, v38 * v36, v36, v38);
      v36 = (uint64_t)a5[1];
      v38 = (uint64_t)a5[2];
    }
    v41 = *a5;
    v42 = v36 * v38;
    if (v36 * v38 >= 0)
      v43 = v36 * v38;
    else
      v43 = v42 + 1;
    v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
    if (v42 >= 2)
    {
      v45 = 0;
      v46 = *a5;
      v47 = v37;
      do
      {
        v48 = *v47++;
        *v46++ = v48;
        v45 += 2;
      }
      while (v45 < v44);
    }
    v49 = v42 <= v44;
    v50 = v42 - v44;
    if (!v49)
    {
      v51 = v43 >> 1;
      v52 = (uint64_t *)&v37[v43 >> 1];
      v53 = (_QWORD *)v41[v51].f64;
      do
      {
        v54 = *v52++;
        *v53++ = v54;
        --v50;
      }
      while (v50);
    }
  }
  v55 = *(_QWORD *)(a1 + 848);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 856) - v55) >> 3) >= 2)
  {
    v56 = 1;
    do
    {
      v57 = v55 + 120 * v56;
      *a3 = *(double *)(v57 + 48) + *a3;
      v58 = *(float64x2_t **)(v57 + 8);
      v59 = *a4;
      v60 = (uint64_t)a4[1];
      if (v60 >= 0)
        v61 = (uint64_t)a4[1];
      else
        v61 = v60 + 1;
      v62 = v61 & 0xFFFFFFFFFFFFFFFELL;
      if (v60 >= 2)
      {
        v63 = 0;
        v64 = *a4;
        v65 = v58;
        do
        {
          v66 = *v65++;
          *v64 = vaddq_f64(v66, *v64);
          ++v64;
          v63 += 2;
        }
        while (v63 < v62);
      }
      v49 = v60 <= v62;
      v67 = v60 - v62;
      if (!v49)
      {
        v68 = v61 >> 1;
        v69 = v58[v68].f64;
        v70 = v59[v68].f64;
        do
        {
          v71 = *v69++;
          *v70 = v71 + *v70;
          ++v70;
          --v67;
        }
        while (v67);
      }
      if (a5)
      {
        v72 = *(_QWORD *)(*(_QWORD *)(a1 + 848) + 120 * v56 + 24);
        v73 = *a5;
        v74 = a5[1];
        v75 = (_QWORD)a5[2] * (_QWORD)v74;
        if (v75 >= 0)
          v76 = (_QWORD)a5[2] * (_QWORD)v74;
        else
          v76 = v75 + 1;
        v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
        if (v75 >= 2)
        {
          v78 = 0;
          v79 = *a5;
          v80 = *(float64x2_t **)(*(_QWORD *)(a1 + 848) + 120 * v56 + 24);
          do
          {
            v81 = *v80++;
            *v79 = vaddq_f64(v81, *v79);
            ++v79;
            v78 += 2;
          }
          while (v78 < v77);
        }
        v49 = v75 <= v77;
        v82 = v75 - v77;
        if (!v49)
        {
          v83 = v76 >> 1;
          v84 = (double *)(v72 + 16 * v83);
          v85 = v73[v83].f64;
          do
          {
            v86 = *v84++;
            *v85 = v86 + *v85;
            ++v85;
            --v82;
          }
          while (v82);
        }
      }
      ++v56;
      v55 = *(_QWORD *)(a1 + 848);
    }
    while (v56 < 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 856) - v55) >> 3));
  }
  v87 = (int *)global_logger();
  if (v87[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v87))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v88 = (file_logger *)global_logger();
    v89 = file_logger::start_stream(v88, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "_compute_optimization_statistics", 388, 1);
    v90 = pthread_getspecific(*((_QWORD *)v89 + 74));
    if (v90 && *((_BYTE *)v90 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90 + 2, (uint64_t)"Computation done at ", 20);
    gettimeofday(&v101, 0);
    v91 = file_logger::operator<<<double>((uint64_t)v89);
    v92 = pthread_getspecific(*(_QWORD *)(v91 + 592));
    if (v92 && *((_BYTE *)v92 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92 + 2, (uint64_t)"s", 1);
    v93 = pthread_getspecific(*(_QWORD *)(v91 + 592));
    if (v93 && *((_BYTE *)v93 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(_QWORD *)(v93[2] - 24) + 16));
      v94 = std::locale::use_facet((const std::locale *)&v101, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
      std::locale::~locale((std::locale *)&v101);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v91);
      if (*(_DWORD *)(v91 + 600) == 7)
      {
        __print_back_trace();
        v96 = __cxa_allocate_exception(8uLL);
        *v96 = "LOG_FATAL encountered";
        __cxa_throw(v96, MEMORY[0x24BEDB718], 0);
      }
    }
  }
}

void sub_2182D6CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::locale::~locale(&a16);
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(uint64_t a1, uint64_t a2, double *a3, float64x2_t **a4, float64x2_t **a5)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  timeval *v16;
  timeval *v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  float64x2_t *v26;
  float64x2_t *v27;
  float64x2_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *f64;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  float64x2_t *v37;
  uint64_t v38;
  BOOL v40;
  float64x2_t *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  float64x2_t *v64;
  float64x2_t *v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  double *v70;
  double v71;
  uint64_t v72;
  float64x2_t *v73;
  float64x2_t *v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  float64x2_t *v79;
  float64x2_t *v80;
  float64x2_t v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  double *v85;
  double v86;
  int *v87;
  file_logger *v88;
  file_logger *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  const std::locale::facet *v94;
  _QWORD *exception;
  _QWORD *v96;
  std::bad_alloc *v97;
  std::bad_alloc *v98;
  timeval v99;
  BOOL v100;
  timeval v101;
  timeval *v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v100 = a5 != 0;
  gettimeofday(&v99, 0);
  gettimeofday(&v101, 0);
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "_compute_optimization_statistics", 326, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Starting second order stats computation", 39);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet((const std::locale *)&v101, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v101);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v16 = (timeval *)operator new(0x20uLL);
  v16->tv_sec = (__darwin_time_t)&unk_24D9379D8;
  *(_QWORD *)&v16->tv_usec = a1;
  v16[1].tv_sec = (__darwin_time_t)&v100;
  *(_QWORD *)&v16[1].tv_usec = a2;
  v102 = v16;
  turi::in_parallel((turi::thread_pool *)&v101);
  v17 = v102;
  if (v102 == &v101)
  {
    v18 = 4;
    v17 = &v101;
  }
  else
  {
    if (!v102)
      goto LABEL_14;
    v18 = 5;
  }
  (*(void (**)(void))(v17->tv_sec + 8 * v18))();
LABEL_14:
  v19 = *(double **)(a1 + 848);
  *a3 = v19[6];
  v21 = (float64x2_t *)*((_QWORD *)v19 + 1);
  v20 = *((_QWORD *)v19 + 2);
  if (a4[1] != (float64x2_t *)v20)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v20, 1);
    v20 = (uint64_t)a4[1];
  }
  v22 = *a4;
  if (v20 >= 0)
    v23 = v20;
  else
    v23 = v20 + 1;
  v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (v20 >= 2)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v21;
    do
    {
      v28 = *v27++;
      *v26++ = v28;
      v25 += 2;
    }
    while (v25 < v24);
  }
  v29 = __OFSUB__(v20, v24);
  v30 = v20 - v24;
  if (!((v30 < 0) ^ v29 | (v30 == 0)))
  {
    v31 = v23 >> 1;
    v32 = (uint64_t *)&v21[v23 >> 1];
    f64 = (_QWORD *)v22[v31].f64;
    do
    {
      v34 = *v32++;
      *f64++ = v34;
      --v30;
    }
    while (v30);
  }
  if (a5)
  {
    v35 = *(_QWORD **)(a1 + 848);
    v37 = (float64x2_t *)v35[3];
    v36 = v35[4];
    v38 = v35[5];
    if (a5[1] != (float64x2_t *)v36 || a5[2] != (float64x2_t *)v38)
    {
      if (v36)
        v40 = v38 == 0;
      else
        v40 = 1;
      if (!v40 && 0x7FFFFFFFFFFFFFFFLL / v38 < v36)
      {
        v97 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v98 = std::bad_alloc::bad_alloc(v97);
        __cxa_throw(v98, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a5, v38 * v36, v36, v38);
      v36 = (uint64_t)a5[1];
      v38 = (uint64_t)a5[2];
    }
    v41 = *a5;
    v42 = v36 * v38;
    if (v36 * v38 >= 0)
      v43 = v36 * v38;
    else
      v43 = v42 + 1;
    v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
    if (v42 >= 2)
    {
      v45 = 0;
      v46 = *a5;
      v47 = v37;
      do
      {
        v48 = *v47++;
        *v46++ = v48;
        v45 += 2;
      }
      while (v45 < v44);
    }
    v49 = v42 <= v44;
    v50 = v42 - v44;
    if (!v49)
    {
      v51 = v43 >> 1;
      v52 = (uint64_t *)&v37[v43 >> 1];
      v53 = (_QWORD *)v41[v51].f64;
      do
      {
        v54 = *v52++;
        *v53++ = v54;
        --v50;
      }
      while (v50);
    }
  }
  v55 = *(_QWORD *)(a1 + 848);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 856) - v55) >> 3) >= 2)
  {
    v56 = 1;
    do
    {
      v57 = v55 + 120 * v56;
      *a3 = *(double *)(v57 + 48) + *a3;
      v58 = *(float64x2_t **)(v57 + 8);
      v59 = *a4;
      v60 = (uint64_t)a4[1];
      if (v60 >= 0)
        v61 = (uint64_t)a4[1];
      else
        v61 = v60 + 1;
      v62 = v61 & 0xFFFFFFFFFFFFFFFELL;
      if (v60 >= 2)
      {
        v63 = 0;
        v64 = *a4;
        v65 = v58;
        do
        {
          v66 = *v65++;
          *v64 = vaddq_f64(v66, *v64);
          ++v64;
          v63 += 2;
        }
        while (v63 < v62);
      }
      v49 = v60 <= v62;
      v67 = v60 - v62;
      if (!v49)
      {
        v68 = v61 >> 1;
        v69 = v58[v68].f64;
        v70 = v59[v68].f64;
        do
        {
          v71 = *v69++;
          *v70 = v71 + *v70;
          ++v70;
          --v67;
        }
        while (v67);
      }
      if (a5)
      {
        v72 = *(_QWORD *)(*(_QWORD *)(a1 + 848) + 120 * v56 + 24);
        v73 = *a5;
        v74 = a5[1];
        v75 = (_QWORD)a5[2] * (_QWORD)v74;
        if (v75 >= 0)
          v76 = (_QWORD)a5[2] * (_QWORD)v74;
        else
          v76 = v75 + 1;
        v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
        if (v75 >= 2)
        {
          v78 = 0;
          v79 = *a5;
          v80 = *(float64x2_t **)(*(_QWORD *)(a1 + 848) + 120 * v56 + 24);
          do
          {
            v81 = *v80++;
            *v79 = vaddq_f64(v81, *v79);
            ++v79;
            v78 += 2;
          }
          while (v78 < v77);
        }
        v49 = v75 <= v77;
        v82 = v75 - v77;
        if (!v49)
        {
          v83 = v76 >> 1;
          v84 = (double *)(v72 + 16 * v83);
          v85 = v73[v83].f64;
          do
          {
            v86 = *v84++;
            *v85 = v86 + *v85;
            ++v85;
            --v82;
          }
          while (v82);
        }
      }
      ++v56;
      v55 = *(_QWORD *)(a1 + 848);
    }
    while (v56 < 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 856) - v55) >> 3));
  }
  v87 = (int *)global_logger();
  if (v87[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v87))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v88 = (file_logger *)global_logger();
    v89 = file_logger::start_stream(v88, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "_compute_optimization_statistics", 388, 1);
    v90 = pthread_getspecific(*((_QWORD *)v89 + 74));
    if (v90 && *((_BYTE *)v90 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90 + 2, (uint64_t)"Computation done at ", 20);
    gettimeofday(&v101, 0);
    v91 = file_logger::operator<<<double>((uint64_t)v89);
    v92 = pthread_getspecific(*(_QWORD *)(v91 + 592));
    if (v92 && *((_BYTE *)v92 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92 + 2, (uint64_t)"s", 1);
    v93 = pthread_getspecific(*(_QWORD *)(v91 + 592));
    if (v93 && *((_BYTE *)v93 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(_QWORD *)(v93[2] - 24) + 16));
      v94 = std::locale::use_facet((const std::locale *)&v101, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
      std::locale::~locale((std::locale *)&v101);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v91);
      if (*(_DWORD *)(v91 + 600) == 7)
      {
        __print_back_trace();
        v96 = __cxa_allocate_exception(8uLL);
        *v96 = "LOG_FATAL encountered";
        __cxa_throw(v96, MEMORY[0x24BEDB718], 0);
      }
    }
  }
}

void sub_2182D73E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::locale::~locale(&a16);
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::lr_optimization_interface::compute_second_order_statistics(uint64_t a1, uint64_t a2, float64x2_t **a3, float64x2_t **a4, double *a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v5 + 880))
    turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(v5, a2, a5, a4, a3);
  else
    turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(v5, a2, a5, a4, a3);
}

void *turi::supervised_2::linear_regression::save_impl(turi::supervised_2::linear_regression *this, turi::oarchive *a2)
{
  turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((const void ***)this + 37, (uint64_t)a2);
  turi::option_manager::save((turi::supervised_2::linear_regression *)((char *)this + 224), a2);
  turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (turi::ml_metadata **)this + 96);
  return turi::archive_detail::eigen_serialize_impl<turi::oarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (uint64_t)this + 824);
}

void turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(const void ***a1, uint64_t a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  char *v6;
  size_t v7;
  char **v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;
  uint64_t v12;
  uint64_t *v13[10];

  v13[9] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,turi::oarchive &)::type_check_hash = 0xB2AED596F5A8ECDALL;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v5)
    {
      v7 = 2 * v5 + 16;
      *(_QWORD *)(a2 + 40) = v7;
      v8 = *(char ***)(a2 + 16);
      if (v8)
      {
        v6 = *v8;
        v9 = v8[1] - *v8;
        v10 = v7 >= v9;
        v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v11);
          v6 = **(char ***)(a2 + 16);
        }
        else if (!v10)
        {
          v8[1] = &v6[v7];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v7, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v6[*(_QWORD *)(a2 + 32)] = turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,turi::oarchive &)::type_check_hash;
    *(_QWORD *)(a2 + 32) += 8;
  }
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(v13, a1);
  LODWORD(v12) = 6;
  turi::variant_deep_save(&v12, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v12);
}

void sub_2182D7624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::load_version(turi::supervised_2::linear_regression *this, turi::iarchive *a2)
{
  char *v4;
  int *v5;
  int *v6;
  int *v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14[2];
  char v15;
  void *__p;
  void **v17;
  uint64_t v18;

  v4 = (char *)this + 296;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  turi::option_manager::load((char **)this + 28, a2);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec(a2, (turi::ml_metadata **)this + 96);
  turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (void **)this + 103);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  v5 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((_QWORD *)this + 105) = turi::variant_converter<unsigned long,void>::get((uint64_t)v14, v5);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dense_coefficient_mode");
  v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((_BYTE *)this + 880) = turi::variant_converter<int,void>::get((uint64_t)v14, v6) != 0;
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  *((_QWORD *)this + 41) = *(_QWORD *)(*((_QWORD *)this + 96) + 64);
  std::string::basic_string[abi:ne180100]<0>(&__p, "current_training_iteration");
  v7 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((_QWORD *)this + 99) = turi::variant_converter<unsigned long,void>::get((uint64_t)v14, v7);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(v14, "current_training_status");
  v8 = (uint64_t *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)v14);
  turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get(v8, (uint64_t *)&__p);
  v9 = (char *)this + 808;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 800, *((char **)this + 101));
  v10 = (char *)v17;
  *((_QWORD *)this + 100) = __p;
  *((_QWORD *)this + 101) = v10;
  v11 = v18;
  *((_QWORD *)this + 102) = v18;
  if (v11)
  {
    *((_QWORD *)v10 + 2) = v9;
    __p = &v17;
    v17 = 0;
    v18 = 0;
    v10 = 0;
  }
  else
  {
    *((_QWORD *)this + 100) = v9;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, v10);
  if (v15 < 0)
    operator delete(v14[0]);
  v12 = (void *)*((_QWORD *)this + 105);
  v13 = (void *)*((_QWORD *)this + 104);
  v14[0] = v12;
  if (v12 != v13)
  {
    __p = v14;
    v17 = &v13;
    turi::supervised_2::linear_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  }
}

void turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, turi::iarchive *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  uint64_t v14;
  std::string::size_type size;
  std::string::size_type v16;
  std::string v17;
  std::string v18;
  uint64_t v19;
  void *__p[2];
  int64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &,turi::iarchive &)::type_check_hash = 0xB2AED596F5A8ECDALL;
  }
  v19 = 0;
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 3);
    v7 = *(_QWORD *)(v5 + v6);
    v19 = v7;
    *((_QWORD *)a2 + 3) = v6 + 8;
  }
  else
  {
    std::istream::read();
    v7 = v19;
  }
  v8 = turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &,turi::iarchive &)::type_check_hash;
  std::string::basic_string[abi:ne180100]<0>(&v17, "Deserialization of type ");
  v9 = std::string::append(&v17, (const std::string::value_type *)(0x800000021870C970 & 0x7FFFFFFFFFFFFFFFLL));
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v18, " failed, likely due to corruption earlier in the stream. ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v21 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = __p;
  if (v21 < 0)
    v13 = (void **)__p[0];
  assert_msg(v8 == v7, "%s", (const char *)v13);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  __p[1] = 0;
  LODWORD(v21) = 0;
  BYTE4(v21) = 0;
  LODWORD(__p[0]) = 0;
  turi::variant_deep_load((unsigned int *)__p, a2);
  turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get((uint64_t *)__p, (uint64_t *)&v18);
  v14 = a1 + 8;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(char **)(a1 + 8));
  size = v18.__r_.__value_.__l.__size_;
  *(_QWORD *)a1 = v18.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 8) = size;
  v16 = v18.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
  if (v16)
  {
    *(_QWORD *)(size + 16) = v14;
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18.__r_.__value_.__l.__size_;
    *(_OWORD *)&v18.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    *(_QWORD *)a1 = v14;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v18, (char *)size);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
}

void sub_2182D7A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_num_coefficients", 18);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_coefs.size()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.cpp", "operator()", 425, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::supervised_2::linear_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182D7C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::export_to_coreml(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t i;
  std::string v8;
  char *v9;
  _BYTE v10[8];
  _QWORD *v11;
  std::string v12;
  _QWORD v13[5];
  _QWORD v14[6];

  v14[5] = *MEMORY[0x24BDAC8D0];
  v9 = (char *)(*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(&v12, "class", &v9);
  v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
  std::to_string(&v8, v6);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],std::string,0>(v13, "version", (__int128 *)&v8);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v14, "short_description", "Linear regression model.");
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v10, &v12, 3);
  for (i = 80; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v12 + i);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  turi::export_linear_regression_as_model_asset(a1 + 96, a1 + 103, (uint64_t)v10, a3);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_10;
    goto LABEL_9;
  }
  if (*(_QWORD *)(a2 + 8))
LABEL_9:
    turi::coreml::MLModelWrapper::save(*a3);
LABEL_10:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v10, v11);
}

void sub_2182D7E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v20);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

const char *turi::supervised_2::linear_regression::name(turi::supervised_2::linear_regression *this)
{
  return "regression_linear_regression_v2";
}

std::string *turi::supervised_2::linear_regression::uid(turi::supervised_2::linear_regression *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(&turi::supervised_2::linear_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::supervised_2::linear_regression::uid(void)::_uid, &dword_217E69000);
  }
  return &turi::supervised_2::linear_regression::uid(void)::_uid;
}

void sub_2182D7F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::supervised_2::linear_regression::perform_registration(turi::supervised_2::linear_regression *this)
{
  if (!*((_BYTE *)this + 24))
  {
    turi::supervised_2::supervised_learning_model_base::perform_registration(this);
    *((_BYTE *)this + 24) = 1;
  }
}

uint64_t turi::supervised_2::linear_regression::lr_optimization_interface::num_variables(turi::supervised_2::linear_regression::lr_optimization_interface *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 840);
}

void turi::ml_data::~ml_data(turi::ml_data *this)
{
  void *v2;
  void **v3;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  v3 = (void **)((char *)this + 152);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  v3 = (void **)((char *)this + 104);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void turi::ml_model_base::~ml_model_base(char **this)
{
  void **v2;

  *this = (char *)&unk_24D918858;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)(this + 37), this[38]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)(this + 34), this[35]);
  v2 = (void **)(this + 31);
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)(this + 28), this[29]);
  turi::model_base::~model_base((turi::model_base *)this);
}

void sub_2182D8134(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_2182D8158(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *turi::optimization::l2_norm::l2_norm(_QWORD *a1, __int128 **a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  _OWORD *v11;
  __int128 *v12;
  __int128 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;

  *a1 = &unk_24D937000;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (uint64_t)a2[1];
  if (v4)
  {
    v5 = *a2;
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1 + 1, v4, 1);
    v6 = a1[1];
    v7 = a1[2];
    if (v7 >= 0)
      v8 = a1[2];
    else
      v8 = v7 + 1;
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v7 >= 2)
    {
      v10 = 0;
      v11 = (_OWORD *)a1[1];
      v12 = v5;
      do
      {
        v13 = *v12++;
        *v11++ = v13;
        v10 += 2;
      }
      while (v10 < v9);
    }
    v14 = v7 <= v9;
    v15 = v7 - v9;
    if (!v14)
    {
      v16 = v8 >> 1;
      v17 = (uint64_t *)&v5[v8 >> 1];
      v18 = (_QWORD *)(v6 + 16 * v16);
      do
      {
        v19 = *v17++;
        *v18++ = v19;
        --v15;
      }
      while (v15);
    }
  }
  a1[3] = a2[1];
  return a1;
}

void sub_2182D8234(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

void turi::optimization::l2_norm::~l2_norm(void **this)
{
  *this = &unk_24D937000;
  free(this[1]);
}

{
  *this = &unk_24D937000;
  free(this[1]);
  JUMPOUT(0x219A19A08);
}

double turi::optimization::l2_norm::compute_function_value(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD v4[4];
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4[0] = a1 + 8;
  v4[1] = a2;
  if (!a2[1])
    return 0.0;
  v2 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v2;
  v8 = v4;
  return Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run((uint64_t)v5);
}

float64_t turi::optimization::l2_norm::compute_gradient(uint64_t a1, float64x2_t **a2, float64x2_t **a3)
{
  float64x2_t *v4;
  uint64_t v5;
  float64x2_t *v6;
  float64x2_t v7;
  float64x2_t *v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  float64x2_t *v12;
  float64x2_t *v13;
  float64x2_t *v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  double *f64;
  double *v23;
  _QWORD *v24;
  double v25;
  double v26;
  double v27;

  v4 = *(float64x2_t **)(a1 + 8);
  v6 = *a2;
  v5 = (uint64_t)a2[1];
  if (a3[1] != (float64x2_t *)v5)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a3, v5, 1);
    v5 = (uint64_t)a3[1];
  }
  v8 = *a3;
  if (v5 >= 0)
    v9 = v5;
  else
    v9 = v5 + 1;
  v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (v5 >= 2)
  {
    v11 = 0;
    v12 = *a3;
    v13 = v4;
    v14 = v6;
    do
    {
      v15 = *v13++;
      v16 = v15;
      v17 = *v14++;
      v18 = vmulq_f64(v16, v17);
      v7 = vaddq_f64(v18, v18);
      *v12++ = v7;
      v11 += 2;
    }
    while (v11 < v10);
  }
  v19 = __OFSUB__(v5, v10);
  v20 = v5 - v10;
  if (!((v20 < 0) ^ v19 | (v20 == 0)))
  {
    v21 = v9 >> 1;
    f64 = v6[v9 >> 1].f64;
    v23 = v4[v21].f64;
    v24 = (_QWORD *)v8[v21].f64;
    do
    {
      v25 = *v23++;
      v26 = v25;
      v27 = *f64++;
      v7.f64[0] = v26 * v27 + v26 * v27;
      *v24++ = *(_QWORD *)&v7.f64[0];
      --v20;
    }
    while (v20);
  }
  return v7.f64[0];
}

uint64_t turi::optimization::l2_norm::apply_proximal_operator(uint64_t result, double **a2, double *a3)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = *(_QWORD *)(result + 24);
  if (v3)
  {
    v4 = *a2;
    v5 = *(double **)(result + 8);
    do
    {
      v6 = *v5++;
      *v4 = *v4 / ((*a3 + *a3) * v6 + 1.0);
      ++v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

float64x2_t **turi::optimization::l2_norm::compute_hessian(uint64_t a1, uint64_t a2, float64x2_t **a3)
{
  _QWORD v4[8];

  v4[7] = *MEMORY[0x24BDAC8D0];
  v4[2] = *(_QWORD *)(a1 + 16);
  v4[4] = 0x4000000000000000;
  v4[5] = a1 + 8;
  return Eigen::DiagonalMatrix<double,-1,-1>::operator=<Eigen::DiagonalWrapper<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>(a3, (uint64_t)v4);
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  int64_t v6;
  float64x2_t *v7;
  float64x2_t v8;
  int64_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  double *f64;
  double *v21;
  double v22;
  double v23;
  double v24;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 8);
  if (v1 >= 0)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 8);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 8);
  else
    v3 = v1 + 1;
  v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3)
    return v4->f64[0] * (**(double **)(a1 + 32) * **(double **)(a1 + 32));
  v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = *(float64x2_t **)(a1 + 32);
  v8 = vmulq_f64(*v4, vmulq_f64(*v7, *v7));
  if (v1 >= 4)
  {
    v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = vmulq_f64(v4[1], vmulq_f64(v7[1], v7[1]));
    if ((unint64_t)v1 >= 8)
    {
      v11 = v7 + 3;
      v12 = v4 + 3;
      v13 = 4;
      do
      {
        v8 = vaddq_f64(v8, vmulq_f64(v12[-1], vmulq_f64(v11[-1], v11[-1])));
        v14 = *v12;
        v12 += 2;
        v15 = v14;
        v16 = *v11;
        v11 += 2;
        v10 = vaddq_f64(v10, vmulq_f64(v15, vmulq_f64(v16, v16)));
        v13 += 4;
      }
      while (v13 < v9);
    }
    v8 = vaddq_f64(v10, v8);
    if (v6 > v9)
      v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), vmulq_f64(*(float64x2_t *)((char *)v7 + 8 * v9), *(float64x2_t *)((char *)v7 + 8 * v9))));
  }
  result = vaddvq_f64(v8);
  v17 = v1 <= v6;
  v18 = v1 - v6;
  if (!v17)
  {
    v19 = v3 >> 1;
    f64 = v4[v19].f64;
    v21 = v7[v19].f64;
    do
    {
      v22 = *v21++;
      v23 = v22 * v22;
      v24 = *f64++;
      result = result + v24 * v23;
      --v18;
    }
    while (v18);
  }
  return result;
}

_QWORD *Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  std::bad_alloc *exception;
  std::bad_alloc *v7;

  v4 = result;
  if (a2 && a3 && 0x7FFFFFFFFFFFFFFFLL / a3 < a2)
  {
LABEL_8:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v7 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v7, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v5 = a3 * a2;
  if (result[1] != a3 * a2)
  {
    free((void *)*result);
    if (v5)
    {
      if (v5 >> 61)
        goto LABEL_8;
      result = malloc_type_malloc(8 * v5, 0x1E76AA36uLL);
      if (!result)
        goto LABEL_8;
    }
    else
    {
      result = 0;
    }
    *v4 = result;
  }
  v4[1] = a2;
  return result;
}

float64x2_t **Eigen::DiagonalMatrix<double,-1,-1>::operator=<Eigen::DiagonalWrapper<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>(float64x2_t **a1, uint64_t a2)
{
  double v3;
  float64x2_t **v4;
  uint64_t v5;
  float64x2_t *v6;
  float64x2_t *v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  float64x2_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  double *f64;
  double *v18;
  double v19;
  double v21;

  v3 = *(double *)(a2 + 32);
  v4 = *(float64x2_t ***)(a2 + 40);
  v6 = *v4;
  v5 = (uint64_t)v4[1];
  if (a1[1] != (float64x2_t *)v5)
  {
    v21 = v3;
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v5, 1);
    v3 = v21;
    v5 = (uint64_t)a1[1];
  }
  v7 = *a1;
  if (v5 >= 0)
    v8 = v5;
  else
    v8 = v5 + 1;
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v5 >= 2)
  {
    v10 = 0;
    v11 = *a1;
    v12 = v6;
    do
    {
      v13 = *v12++;
      *v11++ = vmulq_n_f64(v13, v3);
      v10 += 2;
    }
    while (v10 < v9);
  }
  v14 = __OFSUB__(v5, v9);
  v15 = v5 - v9;
  if (!((v15 < 0) ^ v14 | (v15 == 0)))
  {
    v16 = v8 >> 1;
    f64 = v6[v8 >> 1].f64;
    v18 = v7[v16].f64;
    do
    {
      v19 = *f64++;
      *v18++ = v3 * v19;
      --v15;
    }
    while (v15);
  }
  return a1;
}

uint64_t turi::optimization::lbfgs_solver::lbfgs_solver(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(int64x2_t *)(a1 + 80) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = &off_24D9404B0;
  gettimeofday((timeval *)(a1 + 128), 0);
  v4 = a2[1];
  *(_QWORD *)(a1 + 144) = *a2;
  *(_QWORD *)(a1 + 152) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = xmmword_2186F0E80;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  return a1;
}

void turi::supervised_2::supervised_learning_model_base::perform_registration(turi::supervised_2::supervised_learning_model_base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t j;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t k;
  _QWORD *v16;
  uint64_t v17;
  uint64_t m;
  _QWORD *v19;
  uint64_t v20;
  uint64_t n;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t ii;
  _QWORD *v30;
  uint64_t v31;
  uint64_t jj;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string __str;
  _QWORD v49[2];
  std::__shared_weak_count *v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  std::string __p;
  __int128 v56;
  std::__shared_weak_count *v57;
  _BYTE v58[24];
  _BYTE *v59;
  _BYTE v60[24];
  _BYTE *v61;
  _BYTE v62[24];
  _BYTE *v63;
  _BYTE v64[24];
  _BYTE *v65;
  _BYTE v66[24];
  _BYTE *v67;
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  __int128 v72;
  uint64_t v73;
  _QWORD v74[2];
  int v75;
  char v76;
  char v77;
  _QWORD v78[3];
  _QWORD v79[3];
  __int128 v80[7];
  _QWORD v81[3];
  int v82;
  uint64_t v83;
  int v84;
  char v85;
  _BYTE v86[24];
  _BYTE *v87;
  _BYTE v88[24];
  _BYTE *v89;
  _BYTE v90[24];
  _BYTE *v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94[3];
  _BYTE v95[24];
  _BYTE *v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  turi::ml_model_base::perform_registration(this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "train");
  std::string::basic_string[abi:ne180100]<0>(&v72, "data");
  std::string::basic_string[abi:ne180100]<0>(v74, "target");
  std::string::basic_string[abi:ne180100]<0>(v78, "validation_data");
  std::string::basic_string[abi:ne180100]<0>(v79, "options");
  v92 = 0uLL;
  v93 = 0;
  *(_QWORD *)&v56 = &v92;
  BYTE8(v56) = 0;
  *(_QWORD *)&v92 = operator new(0x60uLL);
  *((_QWORD *)&v92 + 1) = v92;
  v93 = v92 + 96;
  *((_QWORD *)&v92 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v93, &v72, v80, (std::string *)v92);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>("data", (std::string::size_type)turi::supervised_2::supervised_learning_model_base::train, 0, "target", "validation_data", "options", (uint64_t)v95);
  turi::model_base::register_function((uint64_t)this, &__p, (uint64_t)&v92, (uint64_t)v95);
  v2 = v96;
  if (v96 == v95)
  {
    v3 = 4;
    v2 = v95;
    goto LABEL_5;
  }
  if (v96)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  *(_QWORD *)&v56 = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v79[i + 2]) < 0)
      operator delete((void *)v79[i]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v53, "train");
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v49);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v56, (const turi::gl_sframe *)v49);
  v5.n128_f64[0] = turi::variant_converter<turi::gl_sframe,void>::set((uint64_t)&v56, (uint64_t)&v92);
  *(_QWORD *)&v56 = off_24D91E9C0;
  v6 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v72, "validation_data", (unsigned int *)&v92);
  *((_QWORD *)&v56 + 1) = 0;
  v57 = 0;
  *(_QWORD *)&v56 = (char *)&v56 + 8;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[8],std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,0>((uint64_t)v80 + 8, "options", &v56);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)v51, (const void **)&v72, 2);
  turi::model_base::register_defaults((uint64_t)this, (__int128 *)v53, (uint64_t)v51);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v51, (char *)v51[1]);
  for (j = 0; j != -208; j -= 104)
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)((char *)&v80[2] + j));
    if (*((char *)&v80[1] + j + 15) < 0)
      operator delete(*(void **)((char *)v80 + j + 8));
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v56, *((char **)&v56 + 1));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v92);
  v49[0] = off_24D91E9C0;
  v10 = v50;
  if (v50)
  {
    v11 = (unint64_t *)&v50->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v54 < 0)
    operator delete(v53[0]);
  std::string::basic_string[abi:ne180100]<0>(&__str, "predict");
  std::string::basic_string[abi:ne180100]<0>(&v72, "data");
  std::string::basic_string[abi:ne180100]<0>(v74, "output_type");
  v92 = 0uLL;
  v93 = 0;
  *(_QWORD *)&v56 = &v92;
  BYTE8(v56) = 0;
  *(_QWORD *)&v92 = operator new(0x30uLL);
  *((_QWORD *)&v92 + 1) = v92;
  v93 = v92 + 48;
  *((_QWORD *)&v92 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v93, &v72, (__int128 *)v78, (std::string *)v92);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>("data", (std::string::size_type)turi::supervised_2::supervised_learning_model_base::predict, 0, "output_type", (uint64_t)v90);
  turi::model_base::register_function((uint64_t)this, &__str, (uint64_t)&v92, (uint64_t)v90);
  v13 = v91;
  if (v91 == v90)
  {
    v14 = 4;
    v13 = v90;
    goto LABEL_32;
  }
  if (v91)
  {
    v14 = 5;
LABEL_32:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *(_QWORD *)&v56 = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  for (k = 0; k != -6; k -= 3)
  {
    if (*(&v77 + k * 8) < 0)
      operator delete((void *)v74[k]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v92, "predict");
  std::string::basic_string[abi:ne180100]<0>(v53, "auto");
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[12],std::string,0>((uint64_t)&v72, "output_type", (__int128 *)v53);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v56, (const void **)&v72, 1);
  turi::model_base::register_defaults((uint64_t)this, &v92, (uint64_t)&v56);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v56, *((char **)&v56 + 1));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v74);
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
  if (v54 < 0)
    operator delete(v53[0]);
  if (SHIBYTE(v93) < 0)
    operator delete((void *)v92);
  std::string::basic_string[abi:ne180100]<0>(&v47, "predict_topk");
  std::string::basic_string[abi:ne180100]<0>(&v72, "data");
  std::string::basic_string[abi:ne180100]<0>(v74, "missing_value_action");
  std::string::basic_string[abi:ne180100]<0>(v78, "topk");
  v92 = 0uLL;
  v93 = 0;
  *(_QWORD *)&v56 = &v92;
  BYTE8(v56) = 0;
  *(_QWORD *)&v92 = operator new(0x48uLL);
  *((_QWORD *)&v92 + 1) = v92;
  v93 = v92 + 72;
  *((_QWORD *)&v92 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v93, &v72, (__int128 *)v79, (std::string *)v92);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>("data", (std::string::size_type)turi::supervised_2::supervised_learning_model_base::predict_topk, 0, "missing_value_action", "topk", (uint64_t)v88);
  turi::model_base::register_function((uint64_t)this, &v47, (uint64_t)&v92, (uint64_t)v88);
  v16 = v89;
  if (v89 == v88)
  {
    v17 = 4;
    v16 = v88;
    goto LABEL_49;
  }
  if (v89)
  {
    v17 = 5;
LABEL_49:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  *(_QWORD *)&v56 = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  for (m = 0; m != -9; m -= 3)
  {
    if (SHIBYTE(v78[m + 2]) < 0)
      operator delete((void *)v78[m]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v92, "predict_topk");
  std::string::basic_string[abi:ne180100]<0>(&v72, "topk");
  v74[1] = 5;
  v75 = 0;
  v76 = 0;
  LODWORD(v74[0]) = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v56, (const void **)&v72, 1);
  turi::model_base::register_defaults((uint64_t)this, &v92, (uint64_t)&v56);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v56, *((char **)&v56 + 1));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v74);
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
  if (SHIBYTE(v93) < 0)
    operator delete((void *)v92);
  std::string::basic_string[abi:ne180100]<0>(&v46, "evaluate");
  std::string::basic_string[abi:ne180100]<0>(&v72, "data");
  std::string::basic_string[abi:ne180100]<0>(v74, "metric");
  std::string::basic_string[abi:ne180100]<0>(v78, "predictions");
  std::string::basic_string[abi:ne180100]<0>(v79, "with_predictions");
  v92 = 0uLL;
  v93 = 0;
  *(_QWORD *)&v56 = &v92;
  BYTE8(v56) = 0;
  *(_QWORD *)&v92 = operator new(0x60uLL);
  *((_QWORD *)&v92 + 1) = v92;
  v93 = v92 + 96;
  *((_QWORD *)&v92 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v93, &v72, v80, (std::string *)v92);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>("data", (std::string::size_type)turi::supervised_2::supervised_learning_model_base::evaluate, 0, "metric", "predictions", "with_predictions", (uint64_t)v86);
  turi::model_base::register_function((uint64_t)this, &v46, (uint64_t)&v92, (uint64_t)v86);
  v19 = v87;
  if (v87 == v86)
  {
    v20 = 4;
    v19 = v86;
    goto LABEL_64;
  }
  if (v87)
  {
    v20 = 5;
LABEL_64:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  *(_QWORD *)&v56 = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  for (n = 0; n != -12; n -= 3)
  {
    if (SHIBYTE(v79[n + 2]) < 0)
      operator delete((void *)v79[n]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v56, "evaluate");
  std::string::basic_string[abi:ne180100]<0>(v51, "auto");
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[12],std::string,0>((uint64_t)&v72, "missing_value_action", (__int128 *)v51);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)&v92);
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray,0>((uint64_t)v80 + 8, "predictions", (uint64_t)&v92);
  std::string::basic_string[abi:ne180100]<0>(v81, "with_predictions");
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v82 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)v53, (const void **)&v72, 3);
  turi::model_base::register_defaults((uint64_t)this, &v56, (uint64_t)v53);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v53, (char *)v53[1]);
  v22 = 312;
  do
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v66[v22 + 16]);
    if ((char)v66[v22 + 15] < 0)
      operator delete(*(void **)&v66[v22 - 8]);
    v22 -= 104;
  }
  while (v22);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v92);
  if (v52 < 0)
    operator delete(v51[0]);
  if (SHIBYTE(v57) < 0)
    operator delete((void *)v56);
  std::string::basic_string[abi:ne180100]<0>(&v45, "next_training_iteration");
  v72 = 0uLL;
  v73 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_12supervised_230supervised_learning_model_baseEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_((std::string::size_type)turi::supervised_2::supervised_learning_model_base::next_training_iteration, 0, (uint64_t)v70);
  turi::model_base::register_function((uint64_t)this, &v45, (uint64_t)&v72, (uint64_t)v70);
  v23 = v71;
  if (v71 == v70)
  {
    v24 = 4;
    v23 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_84;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_84:
  *(_QWORD *)&v92 = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v44, "finalize_training");
  v72 = 0uLL;
  v73 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_12supervised_230supervised_learning_model_baseEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_((std::string::size_type)turi::supervised_2::supervised_learning_model_base::finalize_training, 0, (uint64_t)v68);
  turi::model_base::register_function((uint64_t)this, &v44, (uint64_t)&v72, (uint64_t)v68);
  v25 = v69;
  if (v69 == v68)
  {
    v26 = 4;
    v25 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_91;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_91:
  *(_QWORD *)&v92 = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v43, "resume_training");
  std::string::basic_string[abi:ne180100]<0>(&v72, "data");
  std::string::basic_string[abi:ne180100]<0>(v74, "validation_data");
  v92 = 0uLL;
  v93 = 0;
  *(_QWORD *)&v56 = &v92;
  BYTE8(v56) = 0;
  *(_QWORD *)&v92 = operator new(0x30uLL);
  *((_QWORD *)&v92 + 1) = v92;
  v93 = v92 + 48;
  *((_QWORD *)&v92 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v93, &v72, (__int128 *)v78, (std::string *)v92);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>("data", (std::string::size_type)turi::supervised_2::supervised_learning_model_base::resume_training, 0, "validation_data", (uint64_t)v66);
  turi::model_base::register_function((uint64_t)this, &v43, (uint64_t)&v92, (uint64_t)v66);
  v27 = v67;
  if (v67 == v66)
  {
    v28 = 4;
    v27 = v66;
    goto LABEL_97;
  }
  if (v67)
  {
    v28 = 5;
LABEL_97:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  *(_QWORD *)&v56 = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  for (ii = 0; ii != -6; ii -= 3)
  {
    if (*(&v77 + ii * 8) < 0)
      operator delete((void *)v74[ii]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v42, "init_training");
  std::string::basic_string[abi:ne180100]<0>(&v72, "data");
  std::string::basic_string[abi:ne180100]<0>(v74, "target");
  std::string::basic_string[abi:ne180100]<0>(v78, "validation_data");
  std::string::basic_string[abi:ne180100]<0>(v79, "options");
  v92 = 0uLL;
  v93 = 0;
  *(_QWORD *)&v56 = &v92;
  BYTE8(v56) = 0;
  *(_QWORD *)&v92 = operator new(0x60uLL);
  *((_QWORD *)&v92 + 1) = v92;
  v93 = v92 + 96;
  *((_QWORD *)&v92 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v93, &v72, v80, (std::string *)v92);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>("data", (std::string::size_type)turi::supervised_2::supervised_learning_model_base::init_training, 0, "target", "validation_data", "options", (uint64_t)v64);
  turi::model_base::register_function((uint64_t)this, &v42, (uint64_t)&v92, (uint64_t)v64);
  v30 = v65;
  if (v65 == v64)
  {
    v31 = 4;
    v30 = v64;
    goto LABEL_108;
  }
  if (v65)
  {
    v31 = 5;
LABEL_108:
    (*(void (**)(void))(*v30 + 8 * v31))();
  }
  *(_QWORD *)&v56 = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  for (jj = 0; jj != -12; jj -= 3)
  {
    if (SHIBYTE(v79[jj + 2]) < 0)
      operator delete((void *)v79[jj]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v41, "iterate_training");
  v72 = 0uLL;
  v73 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_12supervised_230supervised_learning_model_baseEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_((std::string::size_type)turi::supervised_2::supervised_learning_model_base::iterate_training, 0, (uint64_t)v62);
  turi::model_base::register_function((uint64_t)this, &v41, (uint64_t)&v72, (uint64_t)v62);
  v33 = v63;
  if (v63 == v62)
  {
    v34 = 4;
    v33 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_120;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_120:
  *(_QWORD *)&v92 = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v40, "synchronize_training");
  v72 = 0uLL;
  v73 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_12supervised_230supervised_learning_model_baseEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_((std::string::size_type)turi::supervised_2::supervised_learning_model_base::synchronize_training, 0, (uint64_t)v60);
  turi::model_base::register_function((uint64_t)this, &v40, (uint64_t)&v72, (uint64_t)v60);
  v35 = v61;
  if (v61 == v60)
  {
    v36 = 4;
    v35 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_127;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_127:
  *(_QWORD *)&v92 = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v39, "export_to_coreml");
  std::string::basic_string[abi:ne180100]<0>(&v92, "filename");
  v72 = 0uLL;
  v73 = 0;
  *(_QWORD *)&v56 = &v72;
  BYTE8(v56) = 0;
  *(_QWORD *)&v72 = operator new(0x18uLL);
  *((_QWORD *)&v72 + 1) = v72;
  v73 = v72 + 24;
  *((_QWORD *)&v72 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v73, &v92, v94, (std::string *)v72);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>("filename", 0x48uLL, 1uLL, (uint64_t)v58);
  turi::model_base::register_function((uint64_t)this, &v39, (uint64_t)&v72, (uint64_t)v58);
  v37 = v59;
  if (v59 == v58)
  {
    v38 = 4;
    v37 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_134;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_134:
  *(_QWORD *)&v56 = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  if (SHIBYTE(v93) < 0)
    operator delete((void *)v92);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v92, "export_to_coreml");
  std::string::basic_string[abi:ne180100]<0>(v53, "");
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[12],std::string,0>((uint64_t)&v72, "filename", (__int128 *)v53);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v56, (const void **)&v72, 1);
  turi::model_base::register_defaults((uint64_t)this, &v92, (uint64_t)&v56);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v56, *((char **)&v56 + 1));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v74);
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
  if (v54 < 0)
    operator delete(v53[0]);
  if (SHIBYTE(v93) < 0)
    operator delete((void *)v92);
  *((_BYTE *)this + 24) = 1;
}

void sub_2182D97B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;

  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a54, (char *)a55);
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair((uint64_t)&STACK[0x250]);
  if (a50 < 0)
    operator delete(__p);
  if (*(char *)(v55 - 145) < 0)
    operator delete(*(void **)(v55 - 168));
  _Unwind_Resume(a1);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t i;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 *result;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string **v23;
  char v24;
  _BYTE v25[24];
  _BYTE *v26;
  __int128 v27;
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  __int128 v31;
  __int128 *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v27, __s);
  std::string::basic_string[abi:ne180100]<0>(v28, a4);
  std::string::basic_string[abi:ne180100]<0>(v29, a5);
  std::string::basic_string[abi:ne180100]<0>(v30, a6);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = &v20;
  v24 = 0;
  v20 = (std::string *)operator new(0x60uLL);
  v21 = v20;
  v22 = v20 + 4;
  v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, &v27, &v31, v20);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(a2, a3, (uint64_t)&v20, (uint64_t)&v31);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v30[i + 2]) < 0)
      operator delete((void *)v30[i]);
  }
  v14 = (uint64_t)v32;
  if (!v32)
    goto LABEL_8;
  if (v32 != &v31)
  {
    v14 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v32 + 16))(v32);
LABEL_8:
    v26 = (_BYTE *)v14;
    goto LABEL_10;
  }
  v26 = v25;
  (*(void (**)(__int128 *, _BYTE *))(v31 + 24))(&v31, v25);
LABEL_10:
  *(_QWORD *)(a7 + 24) = 0;
  v15 = operator new(0x28uLL);
  *v15 = &unk_24D937110;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v15 + 1), (uint64_t)v25);
  *(_QWORD *)(a7 + 24) = v15;
  v16 = v26;
  if (v26 == v25)
  {
    v17 = 4;
    v16 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_15;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_15:
  result = v32;
  if (v32 == &v31)
  {
    v19 = 4;
    result = &v31;
  }
  else
  {
    if (!v32)
      return result;
    v19 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v19))();
}

void sub_2182DA278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;

  v20 = *(_QWORD **)(v18 - 80);
  if (v20 == (_QWORD *)(v18 - 104))
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 104);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 *result;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string **v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  __int128 v23;
  _QWORD v24[3];
  __int128 v25;
  __int128 *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v23, __s);
  std::string::basic_string[abi:ne180100]<0>(v24, a4);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = &v16;
  v20 = 0;
  v16 = (std::string *)operator new(0x30uLL);
  v17 = v16;
  v18 = v16 + 2;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v23, &v25, v16);
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(a2, a3, (uint64_t)&v16, (uint64_t)&v25);
  v19 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v24[i + 2]) < 0)
      operator delete((void *)v24[i]);
  }
  v10 = (uint64_t)v26;
  if (!v26)
    goto LABEL_8;
  if (v26 != &v25)
  {
    v10 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v26 + 16))(v26);
LABEL_8:
    v22 = (_BYTE *)v10;
    goto LABEL_10;
  }
  v22 = v21;
  (*(void (**)(__int128 *, _BYTE *))(v25 + 24))(&v25, v21);
LABEL_10:
  *(_QWORD *)(a5 + 24) = 0;
  v11 = operator new(0x28uLL);
  *v11 = &unk_24D937210;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v21);
  *(_QWORD *)(a5 + 24) = v11;
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  result = v26;
  if (v26 == &v25)
  {
    v15 = 4;
    result = &v25;
  }
  else
  {
    if (!v26)
      return result;
    v15 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
}

void sub_2182DA554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 64);
  if (v25 == (_QWORD *)(v23 - 88))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 88);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 *result;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string **v21;
  char v22;
  _BYTE v23[24];
  _BYTE *v24;
  __int128 v25;
  _QWORD v26[3];
  _QWORD v27[3];
  __int128 v28;
  __int128 *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v25, __s);
  std::string::basic_string[abi:ne180100]<0>(v26, a4);
  std::string::basic_string[abi:ne180100]<0>(v27, a5);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = &v18;
  v22 = 0;
  v18 = (std::string *)operator new(0x48uLL);
  v19 = v18;
  v20 = v18 + 3;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, &v25, &v28, v18);
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(a2, a3, (uint64_t)&v18, (uint64_t)&v28);
  v21 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v27[i + 2]) < 0)
      operator delete((void *)v27[i]);
  }
  v12 = (uint64_t)v29;
  if (!v29)
    goto LABEL_8;
  if (v29 != &v28)
  {
    v12 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v29 + 16))(v29);
LABEL_8:
    v24 = (_BYTE *)v12;
    goto LABEL_10;
  }
  v24 = v23;
  (*(void (**)(__int128 *, _BYTE *))(v28 + 24))(&v28, v23);
LABEL_10:
  *(_QWORD *)(a6 + 24) = 0;
  v13 = operator new(0x28uLL);
  *v13 = &unk_24D937310;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v13 + 1), (uint64_t)v23);
  *(_QWORD *)(a6 + 24) = v13;
  v14 = v24;
  if (v24 == v23)
  {
    v15 = 4;
    v14 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_15;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
  result = v29;
  if (v29 == &v28)
  {
    v17 = 4;
    result = &v28;
  }
  else
  {
    if (!v29)
      return result;
    v17 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v17))();
}

void sub_2182DA844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;

  v21 = *(_QWORD **)(v19 - 80);
  if (v21 == (_QWORD *)(v19 - 104))
  {
    v22 = 4;
    v21 = (_QWORD *)(v19 - 104);
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t i;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 *result;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string **v23;
  char v24;
  _BYTE v25[24];
  _BYTE *v26;
  __int128 v27;
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  __int128 v31;
  __int128 *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v27, __s);
  std::string::basic_string[abi:ne180100]<0>(v28, a4);
  std::string::basic_string[abi:ne180100]<0>(v29, a5);
  std::string::basic_string[abi:ne180100]<0>(v30, a6);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = &v20;
  v24 = 0;
  v20 = (std::string *)operator new(0x60uLL);
  v21 = v20;
  v22 = v20 + 4;
  v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, &v27, &v31, v20);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(a2, a3, (uint64_t)&v20, (uint64_t)&v31);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v30[i + 2]) < 0)
      operator delete((void *)v30[i]);
  }
  v14 = (uint64_t)v32;
  if (!v32)
    goto LABEL_8;
  if (v32 != &v31)
  {
    v14 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v32 + 16))(v32);
LABEL_8:
    v26 = (_BYTE *)v14;
    goto LABEL_10;
  }
  v26 = v25;
  (*(void (**)(__int128 *, _BYTE *))(v31 + 24))(&v31, v25);
LABEL_10:
  *(_QWORD *)(a7 + 24) = 0;
  v15 = operator new(0x28uLL);
  *v15 = &unk_24D937410;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v15 + 1), (uint64_t)v25);
  *(_QWORD *)(a7 + 24) = v15;
  v16 = v26;
  if (v26 == v25)
  {
    v17 = 4;
    v16 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_15;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_15:
  result = v32;
  if (v32 == &v31)
  {
    v19 = 4;
    result = &v31;
  }
  else
  {
    if (!v32)
      return result;
    v19 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v19))();
}

void sub_2182DAB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;

  v20 = *(_QWORD **)(v18 - 80);
  if (v20 == (_QWORD *)(v18 - 104))
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 104);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_12supervised_230supervised_learning_model_baseEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(a1, a2, (uint64_t)v10, (uint64_t)v14);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v4 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v13 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v12);
LABEL_6:
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x28uLL);
  *v5 = &unk_24D937510;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v5;
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2182DAD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 *result;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string **v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  __int128 v23;
  _QWORD v24[3];
  __int128 v25;
  __int128 *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v23, __s);
  std::string::basic_string[abi:ne180100]<0>(v24, a4);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = &v16;
  v20 = 0;
  v16 = (std::string *)operator new(0x30uLL);
  v17 = v16;
  v18 = v16 + 2;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v23, &v25, v16);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(a2, a3, (uint64_t)&v16, (uint64_t)&v25);
  v19 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v24[i + 2]) < 0)
      operator delete((void *)v24[i]);
  }
  v10 = (uint64_t)v26;
  if (!v26)
    goto LABEL_8;
  if (v26 != &v25)
  {
    v10 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v26 + 16))(v26);
LABEL_8:
    v22 = (_BYTE *)v10;
    goto LABEL_10;
  }
  v22 = v21;
  (*(void (**)(__int128 *, _BYTE *))(v25 + 24))(&v25, v21);
LABEL_10:
  *(_QWORD *)(a5 + 24) = 0;
  v11 = operator new(0x28uLL);
  *v11 = &unk_24D937610;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v21);
  *(_QWORD *)(a5 + 24) = v11;
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  result = v26;
  if (v26 == &v25)
  {
    v15 = 4;
    result = &v25;
  }
  else
  {
    if (!v26)
      return result;
    v15 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
}

void sub_2182DB008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 64);
  if (v25 == (_QWORD *)(v23 - 88))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 88);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t i;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 *result;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string **v23;
  char v24;
  _BYTE v25[24];
  _BYTE *v26;
  __int128 v27;
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  __int128 v31;
  __int128 *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v27, __s);
  std::string::basic_string[abi:ne180100]<0>(v28, a4);
  std::string::basic_string[abi:ne180100]<0>(v29, a5);
  std::string::basic_string[abi:ne180100]<0>(v30, a6);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = &v20;
  v24 = 0;
  v20 = (std::string *)operator new(0x60uLL);
  v21 = v20;
  v22 = v20 + 4;
  v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, &v27, &v31, v20);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(a2, a3, (uint64_t)&v20, (uint64_t)&v31);
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v30[i + 2]) < 0)
      operator delete((void *)v30[i]);
  }
  v14 = (uint64_t)v32;
  if (!v32)
    goto LABEL_8;
  if (v32 != &v31)
  {
    v14 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v32 + 16))(v32);
LABEL_8:
    v26 = (_BYTE *)v14;
    goto LABEL_10;
  }
  v26 = v25;
  (*(void (**)(__int128 *, _BYTE *))(v31 + 24))(&v31, v25);
LABEL_10:
  *(_QWORD *)(a7 + 24) = 0;
  v15 = operator new(0x28uLL);
  *v15 = &unk_24D937710;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v15 + 1), (uint64_t)v25);
  *(_QWORD *)(a7 + 24) = v15;
  v16 = v26;
  if (v26 == v25)
  {
    v17 = 4;
    v16 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_15;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_15:
  result = v32;
  if (v32 == &v31)
  {
    v19 = 4;
    result = &v31;
  }
  else
  {
    if (!v32)
      return result;
    v19 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v19))();
}

void sub_2182DB30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;

  v20 = *(_QWORD **)(v18 - 80);
  if (v20 == (_QWORD *)(v18 - 104))
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 104);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 *result;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string **v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  void *__p[2];
  char v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = &v13;
  v17 = 0;
  v13 = (std::string *)operator new(0x18uLL);
  v14 = v13;
  v15 = v13 + 1;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (__int128 *)__p, &v22, v13);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(a2, a3, (uint64_t)&v13, (uint64_t)&v22);
  v16 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  if (v21 < 0)
    operator delete(__p[0]);
  v7 = (uint64_t)v23;
  if (!v23)
    goto LABEL_6;
  if (v23 != &v22)
  {
    v7 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v23 + 16))(v23);
LABEL_6:
    v19 = (_BYTE *)v7;
    goto LABEL_8;
  }
  v19 = v18;
  (*(void (**)(__int128 *, _BYTE *))(v22 + 24))(&v22, v18);
LABEL_8:
  *(_QWORD *)(a4 + 24) = 0;
  v8 = operator new(0x28uLL);
  *v8 = &unk_24D937810;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v8 + 1), (uint64_t)v18);
  *(_QWORD *)(a4 + 24) = v8;
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  result = v23;
  if (v23 == &v22)
  {
    v12 = 4;
    result = &v22;
  }
  else
  {
    if (!v23)
      return result;
    v12 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
}

void sub_2182DB5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 64);
  if (v26 == (_QWORD *)(v24 - 88))
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 88);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D937080;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_2182DB88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937080;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937080;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D937080;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_2182DB9E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D937080;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((__int128 *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(__int128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_2182DBB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  std::string v14;
  uint64_t v15;
  uint64_t *v16;
  std::vector<std::string> v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char **v23;
  char *v24[2];
  _BYTE v25[9];
  uint64_t v26;
  _QWORD v27[2];
  std::__shared_weak_count *v28;
  void *__p[2];
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  char v34;
  _QWORD **v35;
  _QWORD *v36[2];
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v19 = 1;
  v20 = 0;
  v21 = 0;
  v24[0] = 0;
  v24[1] = 0;
  v22 = 0;
  v23 = v24;
  v26 = 0;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v27);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v36[0] = 0;
  v36[1] = 0;
  __p[1] = 0;
  v30 = 0;
  v31 = 0;
  v35 = v36;
  __p[0] = 0;
  v26 = a2;
  memset(&v17, 0, sizeof(v17));
  v18 = a3;
  if (&v17 == (std::vector<std::string> *)(a1 + 1))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *((std::string **)a1 + 2), *((__int128 **)a1 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 3));
    begin = (__int128 *)v17.__begin_;
    end = (__int128 *)v17.__end_;
  }
  v16 = &v26;
  v13 = &v26;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v15 = v18;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>>((uint64_t)v25, &v13);
  *(_QWORD *)&v37 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37 = *a1;
  std::__mem_fn<void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&>((uint64_t)&v37, &v26, (turi::gl_sframe *)v27, (uint64_t)__p, (uint64_t)&v31, (uint64_t)&v35);
  *(_QWORD *)&v37 = 0;
  DWORD2(v37) = 0;
  BYTE12(v37) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v37, &turi::FLEX_UNDEFINED);
  *(_QWORD *)(a4 + 13) = *(_QWORD *)((char *)&v37 + 5);
  *(_QWORD *)(a4 + 8) = v37;
  *(_BYTE *)(a4 + 20) = BYTE12(v37);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)&v37 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v35, v36[0]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v31);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  v27[0] = off_24D91E9C0;
  v10 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v23, v24[0]);
  if (SHIBYTE(v22) < 0)
    operator delete(v20);
}

void sub_2182DBDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,char a29)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a28);
  boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>::~vector((uint64_t)&a29);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a20);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>::~vector(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 8) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 16);
  return a1;
}

void boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>>(uint64_t a1, _QWORD *a2)
{
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<2>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<3>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<4>(a2);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[2];
  std::__shared_weak_count *v8;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      v7[0] = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<turi::gl_sframe,void>::get((int *)(v3 + 56), (uint64_t)v7);
    turi::gl_sframe::operator=(*a1 + 8, (uint64_t)v7);
    v7[0] = off_24D91E9C0;
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<3>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  boost::detail::variant *v4;
  int *v5;
  std::string *v6;
  _QWORD *v7;
  _QWORD v8[10];

  v8[9] = *MEMORY[0x24BDAC8D0];
  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 4)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 72));
    if (a1[4] + 8 == v3)
    {
      v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(mpl_::integral_c<int,3>)const::{lambda(void)#1}::operator()();
    }
    v5 = (int *)(v3 + 56);
    v4 = (boost::detail::variant *)*(unsigned int *)(v3 + 56);
    v6 = (std::string *)v8;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v4 ^ ((int)v4 >> 31), &v6, (uint64_t)(v5 + 2));
    LODWORD(v7) = *v5 ^ (*v5 >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(*a1 + 56), (unsigned int *)&v7);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v7);
  }
}

void sub_2182DC0C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<4>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 5)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 96));
    if (a1[4] + 8 == v3)
    {
      v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<4>(mpl_::integral_c<int,4>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    v4 = *a1 + 144;
    v5 = (uint64_t *)(*a1 + 136);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(_QWORD **)v4);
    v6 = v9;
    *(_QWORD *)(v4 - 8) = v8;
    *(_QWORD *)v4 = v6;
    v7 = v10;
    *(_QWORD *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      v8 = &v9;
      v9 = 0;
      v10 = 0;
      v6 = 0;
    }
    else
    {
      *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void std::__mem_fn<void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&>(uint64_t a1, _QWORD *a2, turi::gl_sframe *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  void (*v10)(_QWORD *, _QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v10 = *(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t, uint64_t))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v11 = (_QWORD *)(*a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v10 = *(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t, uint64_t))(*v11 + v10);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v15, a3);
  v10(v11, v15, a4, a5, a6);
  v15[0] = off_24D91E9C0;
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2182DC270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D937110;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D937110;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D937110;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2182DC3AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D937110;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = (_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(char ***)a3;
  v8 = (char *)v6;
  if (*(_QWORD *)(a3 + 16))
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *(_QWORD *)a3 = v5;
    *v5 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(v4, a1, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_2182DC588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(void *lpsrc@<X1>, uint64_t a2@<X0>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v7;
  uint64_t v8;
  uint64_t v9[3];
  std::string *v10;
  uint64_t v11;
  _QWORD v12[10];

  v12[9] = *MEMORY[0x24BDAC8D0];
  if (lpsrc)
  else
    v7 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v9, a3);
  v10 = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string **, uint64_t *))(*(_QWORD *)v8 + 48))(&v11, v8, &v10, v9);
  v10 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v11, v11 ^ ((int)v11 >> 31), &v10, (uint64_t)v12);
  *(_DWORD *)a4 = v11 ^ ((int)v11 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v11);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v9, (char *)v9[1]);
}

void sub_2182DC6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[8],std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,0>(uint64_t a1, char *a2, _QWORD *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(v5 + 4, a3);
  *(_DWORD *)(a1 + 24) = 6;
  return a1;
}

void sub_2182DC71C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = (_QWORD *)operator new();
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = *a2;
  v4[1] = v6;
  v7 = v4 + 1;
  v8 = a2[2];
  v4[2] = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *v4 = v7;
  }
  *a1 = v4;
  return a1;
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D937190;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_2182DC9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937190;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937190;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D937190;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_2182DCB28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D937190;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_2182DCCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BYTE v13[40];
  uint64_t *v14;
  std::string v15;
  uint64_t v16;
  uint64_t *v17;
  std::vector<std::string> v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)(turi::gl_sframe *__hidden);
  std::__shared_weak_count *v22;
  void *__p;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char **v30;
  char *v31[2];
  void **v32[5];

  v26 = 1;
  v27 = 0;
  v28 = 0;
  v31[0] = 0;
  v31[1] = 0;
  v29 = 0;
  v30 = v31;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v21);
  v24 = 0;
  v25 = 0;
  __p = 0;
  v19 = a3;
  v20 = a2;
  memset(&v18, 0, sizeof(v18));
  if (&v18 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v18, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v18.__begin_;
    end = (__int128 *)v18.__end_;
  }
  v17 = &v20;
  v14 = &v20;
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v16 = v19;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v14);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<2>(&v14);
  v32[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v32);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v13);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sarray>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v13, (__int128 *)a1, &v20);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v32, (const turi::gl_sarray *)v13);
  turi::variant_converter<turi::gl_sarray,void>::set((const turi::gl_sarray *)v32, a4);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v32);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v13);
  v32[0] = (void **)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v32);
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  v21 = off_24D91E9C0;
  v10 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v30, v31[0]);
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
}

void sub_2182DCEA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string>::~vector((uint64_t)va1);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v2 - 152));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sarray>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  _BYTE v4[40];
  __int128 v5;

  v5 = *a2;
  std::__mem_fn<turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&>((uint64_t)&v5, a3, (turi::gl_sframe *)(a3 + 1), (uint64_t)(a3 + 4));
  turi::gl_sarray::operator=(a1, (uint64_t)v4);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v4);
}

void sub_2182DCF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string>::~vector(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 8) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 16);
  return a1;
}

void std::__mem_fn<turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&>(uint64_t a1, _QWORD *a2, turi::gl_sframe *a3, uint64_t a4)
{
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[2];
  std::__shared_weak_count *v12;

  v6 = *(void (**)(_QWORD *, _QWORD *, uint64_t))a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*v7 + v6);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v11, a3);
  v6(v7, v11, a4);
  v11[0] = off_24D91E9C0;
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2182DD074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D937210;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D937210;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D937210;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2182DD1B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D937210;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sarray,turi::gl_sframe,std::string const&,char const*,char const*>(turi::gl_sarray (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D937290;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_2182DD4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937290;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937290;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D937290;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_2182DD630(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D937290;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_2182DD7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t *v22;
  std::string v23;
  uint64_t v24;
  uint64_t *v25;
  std::vector<std::string> v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)(turi::gl_sframe *__hidden);
  std::__shared_weak_count *v30;
  uint64_t v31;
  char v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char **v36;
  char *v37[2];
  void **v38[2];
  std::__shared_weak_count *v39;

  v32 = 1;
  v33 = 0;
  v34 = 0;
  v37[0] = 0;
  v37[1] = 0;
  v35 = 0;
  v36 = v37;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v29);
  v31 = 0;
  v27 = a3;
  v28 = a2;
  memset(&v26, 0, sizeof(v26));
  if (&v26 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v26, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v26.__begin_;
    end = (__int128 *)v26.__end_;
  }
  v25 = &v28;
  v22 = &v28;
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v24 = v27;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v22);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>>::operator()<2>(&v22);
  v38[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v38);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v20);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v20, (__int128 *)a1, &v28);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v38, (const turi::gl_sframe *)v20);
  v10.n128_f64[0] = turi::variant_converter<turi::gl_sframe,void>::set((uint64_t)v38, a4);
  v38[0] = (void **)off_24D91E9C0;
  v11 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v20[0] = off_24D91E9C0;
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v10);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v38[0] = (void **)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v38);
  v29 = off_24D91E9C0;
  v17 = v30;
  if (v30)
  {
    v18 = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v36, v37[0]);
  if (SHIBYTE(v35) < 0)
    operator delete(v33);
}

void sub_2182DDA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)(turi::gl_sframe *__hidden);
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, uint64_t (**)(turi::gl_sframe *__hidden this));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v19 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v2 - 136));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (**v7)(turi::gl_sframe *__hidden);
  std::__shared_weak_count *v8;
  __int128 v9;

  v9 = *a2;
  std::__mem_fn<turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,unsigned long &>((uint64_t)&v9, a3, (turi::gl_sframe *)(a3 + 1), a3 + 4);
  turi::gl_sframe::operator=(a1, (uint64_t)&v7);
  v7 = off_24D91E9C0;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2182DDB48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

void std::__mem_fn<turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,unsigned long &>(uint64_t a1, _QWORD *a2, turi::gl_sframe *a3, _QWORD *a4)
{
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD *, _QWORD);
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[2];
  std::__shared_weak_count *v12;

  v6 = *(void (**)(_QWORD *, _QWORD *, _QWORD))a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(_QWORD *, _QWORD *, _QWORD))(*v7 + v6);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v11, a3);
  v6(v7, v11, *a4);
  v11[0] = off_24D91E9C0;
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2182DDC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D937310;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D937310;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D937310;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2182DDD58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D937310;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,turi::gl_sframe,turi::gl_sframe,unsigned long,char const*,char const*,char const*>(turi::gl_sframe (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,unsigned long)const,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D937390;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_2182DE07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937390;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937390;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D937390;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_2182DE1D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D937390;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_2182DE354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  char *v14[2];
  _QWORD *v15;
  std::string v16;
  uint64_t v17;
  _QWORD *v18;
  std::vector<std::string> v19;
  uint64_t v20;
  _QWORD v21[3];
  std::__shared_weak_count *v22;
  void *__p;
  char v24;
  _BYTE v25[56];
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  char *v30[2];
  char v31;

  v25[48] = 1;
  v26 = 0;
  v27 = 0;
  v30[0] = 0;
  v30[1] = 0;
  v28 = 0;
  v29 = v30;
  boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul,4ul>,turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>::vector_data((uint64_t)v21);
  v20 = a3;
  v21[0] = a2;
  memset(&v19, 0, sizeof(v19));
  if (&v19 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v19, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v19.__begin_;
    end = (__int128 *)v19.__end_;
  }
  v18 = v21;
  v15 = v21;
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v17 = v20;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>>((uint64_t)&v31, &v15);
  v13 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v14[0] = 0;
  v14[1] = 0;
  v13 = (std::string *)v14;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v13, (__int128 *)a1, (uint64_t)v21);
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((uint64_t **)(a4 + 8), (const void ***)&v13);
  *(_DWORD *)a4 = 6;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v13, v14[0]);
  v13 = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v25);
  if (v24 < 0)
    operator delete(__p);
  v21[1] = off_24D91E9C0;
  v10 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v29, v30[0]);
  if (SHIBYTE(v28) < 0)
    operator delete(v26);
}

void sub_2182DE544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>::~vector((uint64_t)&a22);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v22 - 112));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v10 = *a2;
  std::__invoke[abi:ne180100]<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::* const&)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,turi::gl_sarray&,BOOL &,void>((uint64_t)&v10, (_QWORD *)a3, (turi::gl_sframe *)(a3 + 8), a3 + 32, (const turi::gl_sarray *)(a3 + 56), (unsigned __int8 *)(a3 + 96));
  v4 = a1 + 8;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(char **)(a1 + 8));
  v5 = v8;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v9;
  *(_QWORD *)(a1 + 16) = v9;
  if (v6)
  {
    *(_QWORD *)(v5 + 16) = v4;
    v7 = &v8;
    v8 = 0;
    v9 = 0;
    v5 = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, (char *)v5);
}

uint64_t boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>::~vector(uint64_t a1)
{
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 8) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 16);
  return a1;
}

uint64_t boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul,4ul>,turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>::vector_data(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)(a1 + 8));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(a1 + 56));
  *(_BYTE *)(a1 + 96) = 0;
  return a1;
}

void sub_2182DE6E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  *(_QWORD *)(v1 + 8) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 16);
  _Unwind_Resume(a1);
}

BOOL boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>>(uint64_t a1, _QWORD *a2)
{
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<2>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>::operator()<3>(a2);
  return turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>::operator()<4>((_BOOL8)a2);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>::operator()<3>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[5];

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 4)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 72));
    if (a1[4] + 8 == v3)
    {
      v4[0] = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(mpl_::integral_c<int,3>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<turi::gl_sarray,void>::get((int *)(v3 + 56), (uint64_t)v4);
    turi::gl_sarray::operator=(*a1 + 56, (uint64_t)v4);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v4);
  }
}

BOOL turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,turi::gl_sarray,BOOL>>::operator()<4>(_BOOL8 result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(result + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(result + 16) - v1) >> 3) >= 5)
  {
    v2 = (_QWORD *)result;
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(*(_QWORD *)(result + 32), (const void **)(v1 + 96));
    if (v2[4] + 8 == v3)
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<4>(mpl_::integral_c<int,4>)const::{lambda(void)#1}::operator()();
    result = turi::variant_converter<BOOL,void>::get((uint64_t)&v4, (int *)(v3 + 56));
    *(_BYTE *)(*v2 + 96) = result;
  }
  return result;
}

BOOL turi::variant_converter<BOOL,void>::get(uint64_t a1, int *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  _BOOL4 v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v39;
  void **v40[3];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  memset(v41, 0, 13);
  v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((_QWORD *)v2 != v41)
  {
    v4 = *(_QWORD *)v2;
    *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(v2 + 5);
    v41[0] = v4;
    BYTE4(v41[1]) = *(_BYTE *)(v2 + 12);
    if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v41[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  v39 = 0;
  turi::flexible_type_internals::ft_converter<3>::get<BOOL>(&v39, (turi::flexible_type_internals *)v41, v3);
  v8 = v39;
  switch(BYTE4(v41[1]))
  {
    case 2:
      v9 = (unint64_t *)v41[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v41[0];
        if (v41[0])
        {
          if (*(char *)(v41[0] + 31) < 0)
            operator delete(*(void **)(v41[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v41[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v41[0];
        if (v41[0])
        {
          v30 = *(void **)(v41[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v41[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v41[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v40);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v41[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v40);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v41[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v41[0];
        if (v41[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v41[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v41[0];
        if (v41[0])
        {
          v23 = *(void **)(v41[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v41[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_2182DEB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

BOOL *turi::flexible_type_internals::ft_converter<3>::get<BOOL>(BOOL *result, turi::flexible_type_internals *this, const char *a3)
{
  BOOL v3;
  double v4;

  if (*((_BYTE *)this + 12))
  {
    if (*((_BYTE *)this + 12) != 1)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer", a3);
    v3 = *(double *)this != 0.0;
    v4 = 0.0;
    if (*(double *)this != 0.0)
      v4 = 1.0;
    if (*(double *)this != v4)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer / convertable float", a3);
  }
  else
  {
    v3 = *(_QWORD *)this != 0;
  }
  *result = v3;
  return result;
}

void sub_2182DEE58()
{
  turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unsigned long &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void std::__invoke[abi:ne180100]<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::* const&)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,turi::gl_sarray&,BOOL &,void>(uint64_t a1, _QWORD *a2, turi::gl_sframe *a3, uint64_t a4, const turi::gl_sarray *a5, unsigned __int8 *a6)
{
  uint64_t v9;
  void (*v10)(_QWORD *, _QWORD *, uint64_t, _BYTE *, _QWORD);
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _BYTE v15[40];
  _QWORD v16[2];
  std::__shared_weak_count *v17;

  v10 = *(void (**)(_QWORD *, _QWORD *, uint64_t, _BYTE *, _QWORD))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v11 = (_QWORD *)(*a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v10 = *(void (**)(_QWORD *, _QWORD *, uint64_t, _BYTE *, _QWORD))(*v11 + v10);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v16, a3);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v15, a5);
  v10(v11, v16, a4, v15, *a6);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v15);
  v16[0] = off_24D91E9C0;
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2182DEF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (**a14)(turi::gl_sframe *__hidden this), uint64_t a15)
{
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a9);
  a14 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D937410;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D937410;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D937410;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2182DF08C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D937410;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL,char const*,char const*,char const*,char const*>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

uint64_t std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray,0>(uint64_t a1, char *a2, uint64_t a3)
{
  __int128 v6;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  turi::gl_sarray::operator std::shared_ptr<turi::unity_sarray_base>(a3, &v6);
  *(_OWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 24) = 5;
  return a1;
}

void sub_2182DF1E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D937490;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_2182DF418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EED1Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937490;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EED0Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937490;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEv(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D937490;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_2182DF574(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEPNS0_6__baseIS1S_EE(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D937490;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7destroyEv(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE18destroy_deallocateEv(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EEclEOS1P_OS1F_(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_12supervised_230supervised_learning_model_baseEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_2182DF6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::supervised_2::supervised_learning_model_base,void>(void (turi::supervised_2::supervised_learning_model_base::*)(),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  void (*v8)(_QWORD *);
  uint64_t v9;
  _QWORD *v10;
  std::string v11;
  uint64_t v12;
  uint64_t *v13;
  std::vector<std::string> v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char *v22[2];
  void **v23[3];

  v23[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v17 = 1;
  __p = 0;
  v19 = 0;
  v22[0] = 0;
  v22[1] = 0;
  v20 = 0;
  v21 = v22;
  v15 = a3;
  v16 = a2;
  memset(&v14, 0, sizeof(v14));
  if (&v14 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v14.__begin_;
    end = (__int128 *)v14.__end_;
  }
  v13 = &v16;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v12 = v15;
  v23[0] = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
  v8 = *(void (**)(_QWORD *))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD *)(v16 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(void (**)(_QWORD *))(*v10 + v8);
  v8(v10);
  memset(v23, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v23, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v23 + 5);
  *(void ***)(a4 + 8) = v23[0];
  *(_BYTE *)(a4 + 20) = BYTE4(v23[1]);
  *(_DWORD *)a4 = 0;
  v23[0] = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v21, v22[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
}

void sub_2182DF8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  *(_QWORD *)(v14 - 72) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_ED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D937510;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_ED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D937510;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D937510;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2182DF9DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7__cloneEPNS0_6__baseIS1F_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D937510;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_EclEOS1B_OS1E_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_12supervised_230supervised_learning_model_baseEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS19_S1C_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_12supervised_230supervised_learning_model_baseEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_12supervised_230supervised_learning_model_baseEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS19_S1C_E_;
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D937590;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_2182DFD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937590;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937590;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D937590;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_2182DFE5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D937590;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((__int128 *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(__int128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_2182DFFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  std::string v14;
  uint64_t v15;
  uint64_t *v16;
  std::vector<std::string> v17;
  uint64_t v18;
  char v19;
  void *__p;
  uint64_t v21;
  uint64_t v22;
  char **v23;
  char *v24[3];
  uint64_t v25;
  _QWORD v26[2];
  std::__shared_weak_count *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  char v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v19 = 1;
  __p = 0;
  v21 = 0;
  v24[0] = 0;
  v24[1] = 0;
  v22 = 0;
  v23 = v24;
  v25 = 0;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v26);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  v25 = a2;
  memset(&v17, 0, sizeof(v17));
  v18 = a3;
  if (&v17 == (std::vector<std::string> *)(a1 + 1))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *((std::string **)a1 + 2), *((__int128 **)a1 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 3));
    begin = (__int128 *)v17.__begin_;
    end = (__int128 *)v17.__end_;
  }
  v16 = &v25;
  v13 = &v25;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v15 = v18;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v13);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::operator()<2>(&v13);
  *(_QWORD *)&v32 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32 = *a1;
  std::__mem_fn<void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&>((uint64_t)&v32, &v25, (turi::gl_sframe *)v26, (uint64_t)&v28);
  *(_QWORD *)&v32 = 0;
  DWORD2(v32) = 0;
  BYTE12(v32) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v32, &turi::FLEX_UNDEFINED);
  *(_QWORD *)(a4 + 13) = *(_QWORD *)((char *)&v32 + 5);
  *(_QWORD *)(a4 + 8) = v32;
  *(_BYTE *)(a4 + 20) = BYTE12(v32);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)&v32 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v28);
  v26[0] = off_24D91E9C0;
  v10 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v23, v24[0]);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
}

void sub_2182E0220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,uint64_t a27,uint64_t (**a28)(turi::gl_sframe *__hidden this),uint64_t a29)
{
  unsigned int *v29;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a26);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v29);
  a28 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a19);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::operator()<2>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  boost::detail::variant *v4;
  int *v5;
  std::string *v6;
  _QWORD *v7;
  _QWORD v8[10];

  v8[9] = *MEMORY[0x24BDAC8D0];
  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    v5 = (int *)(v3 + 56);
    v4 = (boost::detail::variant *)*(unsigned int *)(v3 + 56);
    v6 = (std::string *)v8;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v4 ^ ((int)v4 >> 31), &v6, (uint64_t)(v5 + 2));
    LODWORD(v7) = *v5 ^ (*v5 >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(*a1 + 32), (unsigned int *)&v7);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v7);
  }
}

void sub_2182E0374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void std::__mem_fn<void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&>(uint64_t a1, _QWORD *a2, turi::gl_sframe *a3, uint64_t a4)
{
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[2];
  std::__shared_weak_count *v12;

  v6 = *(void (**)(_QWORD *, _QWORD *, uint64_t))a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*v7 + v6);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v11, a3);
  v6(v7, v11, a4);
  v11[0] = off_24D91E9C0;
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2182E0438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()();
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D937610;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D937610;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D937610;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2182E0574(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D937610;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D937690;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_2182E0898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937690;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937690;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D937690;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_2182E09F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D937690;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((__int128 *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(__int128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_2182E0B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  std::string v14;
  uint64_t v15;
  uint64_t *v16;
  std::vector<std::string> v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char **v23;
  char *v24[2];
  _BYTE v25[9];
  uint64_t v26;
  _QWORD v27[2];
  std::__shared_weak_count *v28;
  void *__p[2];
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  char v34;
  _QWORD **v35;
  _QWORD *v36[2];
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v19 = 1;
  v20 = 0;
  v21 = 0;
  v24[0] = 0;
  v24[1] = 0;
  v22 = 0;
  v23 = v24;
  v26 = 0;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v27);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v36[0] = 0;
  v36[1] = 0;
  __p[1] = 0;
  v30 = 0;
  v31 = 0;
  v35 = v36;
  __p[0] = 0;
  v26 = a2;
  memset(&v17, 0, sizeof(v17));
  v18 = a3;
  if (&v17 == (std::vector<std::string> *)(a1 + 1))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *((std::string **)a1 + 2), *((__int128 **)a1 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 3));
    begin = (__int128 *)v17.__begin_;
    end = (__int128 *)v17.__end_;
  }
  v16 = &v26;
  v13 = &v26;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v15 = v18;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>>((uint64_t)v25, &v13);
  *(_QWORD *)&v37 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v37 = *a1;
  std::__invoke[abi:ne180100]<void (turi::supervised_2::supervised_learning_model_base::* const&)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&,void>((uint64_t)&v37, &v26, (turi::gl_sframe *)v27, (uint64_t)__p, &v31, (uint64_t)&v35);
  *(_QWORD *)&v37 = 0;
  DWORD2(v37) = 0;
  BYTE12(v37) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v37, &turi::FLEX_UNDEFINED);
  *(_QWORD *)(a4 + 13) = *(_QWORD *)((char *)&v37 + 5);
  *(_QWORD *)(a4 + 8) = v37;
  *(_BYTE *)(a4 + 20) = BYTE12(v37);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)&v37 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v35, v36[0]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v31);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  v27[0] = off_24D91E9C0;
  v10 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v23, v24[0]);
  if (SHIBYTE(v22) < 0)
    operator delete(v20);
}

void sub_2182E0E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,char a29)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a28);
  boost::fusion::vector<turi::supervised_2::supervised_learning_model_base *,turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>::~vector((uint64_t)&a29);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a20);
  _Unwind_Resume(a1);
}

void std::__invoke[abi:ne180100]<void (turi::supervised_2::supervised_learning_model_base::* const&)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),turi::supervised_2::supervised_learning_model_base*&,turi::gl_sframe&,std::string&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&,void>(uint64_t a1, _QWORD *a2, turi::gl_sframe *a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v9;
  void (*v10)(_QWORD *, _QWORD *, uint64_t, int *, uint64_t);
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  std::string *v17;
  int v18;
  _QWORD v19[10];

  v19[9] = *MEMORY[0x24BDAC8D0];
  v10 = *(void (**)(_QWORD *, _QWORD *, uint64_t, int *, uint64_t))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v11 = (_QWORD *)(*a2 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v10 = *(void (**)(_QWORD *, _QWORD *, uint64_t, int *, uint64_t))(*v11 + v10);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v15, a3);
  v17 = (std::string *)v19;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a5, *a5 ^ (*a5 >> 31), &v17, (uint64_t)(a5 + 2));
  v18 = *a5 ^ (*a5 >> 31);
  v10(v11, v15, a4, &v18, a6);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v18);
  v15[0] = off_24D91E9C0;
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2182E0F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D937710;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D937710;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D937710;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2182E10CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D937710;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D937790;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_2182E13F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937790;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D937790;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D937790;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_2182E154C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D937790;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_2182E16C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  void **p_data;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v15;
  std::__shared_weak_count *v16;
  uint64_t *v17;
  std::string v18;
  uint64_t v19;
  uint64_t *v20;
  std::vector<std::string> v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  char *v32[2];

  v27 = 1;
  v28 = 0;
  v29 = 0;
  v32[0] = 0;
  v32[1] = 0;
  v30 = 0;
  v31 = v32;
  v25 = 0;
  v26 = 0;
  v23 = a2;
  __p = 0;
  memset(&v21, 0, sizeof(v21));
  v22 = a3;
  if (&v21 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v21, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v21.__begin_;
    end = (__int128 *)v21.__end_;
  }
  v20 = &v23;
  v17 = &v23;
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v19 = v22;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>((uint64_t *)&v17);
  v15 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15 = 0;
  v16 = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::shared_ptr<turi::coreml::MLModelWrapper>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v15, (__int128 *)a1, &v23);
  p_data = (void **)&v15->__r_.__value_.__l.__data_;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = v16;
    *(_QWORD *)(a4 + 8) = p_data;
    *(_QWORD *)(a4 + 16) = v9;
    *(_DWORD *)a4 = 3;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(a4 + 8) = v15;
    *(_QWORD *)(a4 + 16) = 0;
    *(_DWORD *)a4 = 3;
  }
  v15 = (std::string *)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v31, v32[0]);
  if (SHIBYTE(v30) < 0)
    operator delete(v28);
}

void sub_2182E1898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (a28 < 0)
    operator delete(__p);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v28 - 104));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::shared_ptr<turi::coreml::MLModelWrapper>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::supervised_2::supervised_learning_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::supervised_2::supervised_learning_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;

  v8 = *a2;
  std::__mem_fn<std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,std::string&>((uint64_t)&v8, a3, (uint64_t)(a3 + 1));
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__mem_fn<std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string)>::operator()[abi:ne180100]<turi::supervised_2::supervised_learning_model_base*&,std::string&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  void (*v4)(_QWORD *, std::string *);
  _QWORD *v5;
  std::string __p;

  v4 = *(void (**)(_QWORD *, std::string *))a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = (_QWORD *)(*a2 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(void (**)(_QWORD *, std::string *))(*v5 + v4);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v4(v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2182E1A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D937810;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D937810;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D937810;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2182E1B34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D937810;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,void,turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,char const*,char const*,char const*,char const*>(void (turi::supervised_2::supervised_learning_model_base::*)(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::supervised_2::supervised_learning_model_base,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::supervised_2::supervised_learning_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void sub_2182E1DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 120 * ((120 * a2 - 120) / 0x78) + 120;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2182E1EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x222222222222223)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised_2::linear_regression::thread_compute_buffer_type>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised_2::linear_regression::thread_compute_buffer_type>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(120 * a2);
}

uint64_t *Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
    MEMORY[0x219A199F0](v2, 0x1000C8000313F17);
  v3 = a1[1];
  if (v3)
    MEMORY[0x219A199F0](v3, 0x1000C8052888210);
  return a1;
}

void std::vector<turi::supervised_2::linear_regression::thread_compute_buffer_type>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<turi::supervised_2::linear_regression::thread_compute_buffer_type>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::supervised_2::linear_regression::thread_compute_buffer_type>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)(a2 + 80));
  free(*(void **)(a2 + 56));
  free(*(void **)(a2 + 24));
  free(*(void **)(a2 + 8));
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(unsigned int *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD v5[2];
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5[0] = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<unsigned long>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    v5[1] = *a2;
    v6 = 0;
    v7 = 0;
    LODWORD(v5[0]) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v5);
  }
}

void sub_2182E2150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<unsigned long>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(unsigned int *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _BYTE v6[13];
  _BYTE v7[13];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<double>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    turi::flexible_type::flexible_type<double>((uint64_t)v7, a2);
    *(_QWORD *)&v6[5] = *(_QWORD *)&v7[5];
    *(_QWORD *)v6 = *(_QWORD *)v7;
    v6[12] = v7[12];
    LODWORD(v5) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v5);
  }
}

void sub_2182E2270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<double>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  int64_t v6;
  float64x2_t *v7;
  float64x2_t v8;
  int64_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  double *f64;
  double *v21;
  double v22;
  double v23;
  double v24;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 8);
  if (v1 >= 0)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 8);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 8);
  else
    v3 = v1 + 1;
  v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3)
    return v4->f64[0] * **(double **)(a1 + 24);
  v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = *(float64x2_t **)(a1 + 24);
  v8 = vmulq_f64(*v4, *v7);
  if (v1 >= 4)
  {
    v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = vmulq_f64(v4[1], v7[1]);
    if ((unint64_t)v1 >= 8)
    {
      v11 = v7 + 3;
      v12 = v4 + 3;
      v13 = 4;
      do
      {
        v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        v14 = *v12;
        v12 += 2;
        v15 = v14;
        v16 = *v11;
        v11 += 2;
        v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    v8 = vaddq_f64(v10, v8);
    if (v6 > v9)
      v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v7 + 8 * v9)));
  }
  result = vaddvq_f64(v8);
  v17 = v1 <= v6;
  v18 = v1 - v6;
  if (!v17)
  {
    v19 = v3 >> 1;
    f64 = v4[v19].f64;
    v21 = v7[v19].f64;
    do
    {
      v22 = *f64++;
      v23 = v22;
      v24 = *v21++;
      result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t Eigen::internal::CompressedStorage<double,int>::atWithInsertion(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 < 1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 16);
    do
    {
      v9 = (v8 + v7) >> 1;
      if (*(int *)(*(_QWORD *)(a1 + 8) + 4 * v9) < a2)
        v7 = v9 + 1;
      else
        v8 = (v8 + v7) >> 1;
    }
    while (v8 > v7);
  }
  if (v7 >= v6)
  {
    v10 = (_QWORD *)(a1 + 24);
    if (*(_QWORD *)(a1 + 24) > v6)
    {
LABEL_24:
      ++*(_QWORD *)(a1 + 16);
      v17 = *(_QWORD **)a1;
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v7) = v4;
      v17[v7] = *a3;
      return *(_QWORD *)a1 + 8 * v7;
    }
LABEL_15:
    *v10 = 2 * v6 + 2;
    v12 = (char *)operator new[]();
    v13 = (char *)operator new[]();
    v14 = *(_QWORD **)a1;
    if (v7)
    {
      memcpy(v12, *(const void **)a1, 8 * v7);
      v15 = *(char **)(a1 + 8);
      memcpy(v13, v15, 4 * v7);
    }
    else
    {
      v15 = *(char **)(a1 + 8);
    }
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 > v7)
    {
      memcpy(&v12[8 * v7 + 8], &v14[v7], 8 * v16 - 8 * v7);
      memcpy(&v13[4 * v7 + 4], &v15[4 * v7], 4 * v16 - 4 * v7);
    }
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v13;
    if (v15)
      MEMORY[0x219A199F0](v15, 0x1000C8052888210);
    if (v14)
      MEMORY[0x219A199F0](v14, 0x1000C8000313F17);
    goto LABEL_24;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v7) != a2)
  {
    v10 = (_QWORD *)(a1 + 24);
    if (*(_QWORD *)(a1 + 24) > v6)
    {
      memmove((void *)(*(_QWORD *)a1 + 8 * v7 + 8), (const void *)(*(_QWORD *)a1 + 8 * v7), *(_QWORD *)a1 + 8 * v6 - (*(_QWORD *)a1 + 8 * v7));
      v11 = *(_QWORD *)(a1 + 16);
      if (v11 != v7)
        memmove((void *)(*(_QWORD *)(a1 + 8) + 4 * v7 + 4), (const void *)(*(_QWORD *)(a1 + 8) + 4 * v7), 4 * v11 - 4 * v7);
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  return *(_QWORD *)a1 + 8 * v7;
}

void sub_2182E25FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(_QWORD *a1, char *a2, const std::string *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::string>((uint64_t)(v5 + 3), a3);
  return a1;
}

void sub_2182E2658(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::string>(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  std::string *result;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (void **)(v4 + 8);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = 1;
  v6 = (_QWORD *)v4;
  if (*(_QWORD *)v4 != 1)
  {
    v7 = (_QWORD *)operator new();
    *v7 = *(_QWORD *)v4;
    v8 = (std::string *)(v7 + 1);
    if (*(char *)(v4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v7[3] = *(_QWORD *)(v4 + 24);
    }
    *v7 = 1;
    do
    {
      v9 = __ldaxr((unint64_t *)v4);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unint64_t *)v4));
    v6 = v7;
    if (!v10)
    {
      if (*(char *)(v4 + 31) < 0)
        operator delete(*v5);
      MEMORY[0x219A19A08](v4, 0x1012C404EF22A49);
      v6 = v7;
    }
  }
  result = std::string::operator=((std::string *)(v6 + 1), a2);
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 2;
  *(_DWORD *)a1 = 0;
  return result;
}

void sub_2182E27A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;

  MEMORY[0x219A19A08](v2, 0x1012C404EF22A49);
  do
    v4 = __ldaxr((unint64_t *)v1);
  while (__stlxr(v4 - 1, (unint64_t *)v1));
  if (v1 && v4 == 1)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    MEMORY[0x219A19A08](v1, 0x1012C404EF22A49);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::optimization::smooth_regularizer_interface>::shared_ptr[abi:ne180100]<turi::optimization::l2_norm,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D937890;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2182E2870(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::optimization::l2_norm *,std::shared_ptr<turi::optimization::smooth_regularizer_interface>::__shared_ptr_default_delete<turi::optimization::smooth_regularizer_interface,turi::optimization::l2_norm>,std::allocator<turi::optimization::l2_norm>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::optimization::l2_norm *,std::shared_ptr<turi::optimization::smooth_regularizer_interface>::__shared_ptr_default_delete<turi::optimization::smooth_regularizer_interface,turi::optimization::l2_norm>,std::allocator<turi::optimization::l2_norm>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<turi::supervised_2::linear_regression::lr_optimization_interface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D937908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised_2::linear_regression::lr_optimization_interface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D937908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::supervised_2::linear_regression::lr_optimization_interface>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24D937958;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D937958;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  int v32;
  char *v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  double v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double *v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double *v68;
  double v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  double v74;
  BOOL v75;
  _QWORD *v76;
  uint64_t *v77;
  double v78;
  double v79;
  double v80;
  char *v81;
  float64x2_t *v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  float64x2_t *v87;
  float64x2_t *v88;
  float64x2_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  double *v93;
  double *f64;
  double v95;
  float64x2_t v96;
  float64x2_t *v97;
  float64x2_t *v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  int64_t v102;
  float64x2_t *v103;
  uint64_t v104;
  double *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::bad_alloc *v111;
  std::bad_alloc *v112;
  std::bad_alloc *exception;
  std::bad_alloc *v114;
  float64x2_t **v115;
  float64x2_t **v116;
  double *v117;
  uint64_t v118;
  _BYTE v119[128];
  uint64_t v120;
  unsigned __int8 v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  void *v132;
  uint64_t v133;
  _QWORD v134[9];
  float64x2_t v135;
  uint64_t v136;
  _QWORD *v137;
  void *v138;
  void *v139;
  _QWORD *v140;
  uint64_t v141;

  v5 = a1;
  v141 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 328);
  v132 = 0;
  v133 = 0;
  v8 = v7 + 1;
  if (v7 != -1)
  {
    if (v8 >> 61 || (v9 = malloc_type_malloc(8 * v8, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v114 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v114, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v132 = v9;
  }
  v133 = v8;
  v10 = *(_QWORD *)(v6 + 848) + 120 * a2;
  v12 = *(char **)(v10 + 8);
  v11 = *(_QWORD *)(v10 + 16);
  v13 = (_QWORD *)(v10 + 8);
  v14 = *(_QWORD *)(v6 + 840);
  if (v11 != v14)
  {
    free(v12);
    if (v14)
    {
      if ((unint64_t)v14 >> 61 || (v12 = (char *)malloc_type_malloc(8 * v14, 0x1E76AA36uLL)) == 0)
      {
LABEL_142:
        v111 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v112 = std::bad_alloc::bad_alloc(v111);
        __cxa_throw(v112, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
    }
    else
    {
      v12 = 0;
    }
    *v13 = v12;
  }
  v13[1] = v14;
  if (v14 >= 0)
    v15 = v14;
  else
    v15 = v14 + 1;
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v14 >= 2)
  {
    v17 = 2;
    if (v16 > 2)
      v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    bzero(v12, ((8 * v17 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  v117 = (double *)(v13 + 5);
  if (v16 < v14)
    bzero(&v12[16 * (v15 >> 1)], 8 * v14 - 16 * (v15 >> 1));
  v18 = (void **)(v13 + 2);
  *v117 = 0.0;
  if (*(_BYTE *)v5[1])
  {
    v19 = *(_QWORD *)(v6 + 840);
    if (v19 && 0x7FFFFFFFFFFFFFFFLL / v19 < v19)
      goto LABEL_142;
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v13 + 2, v19 * v19, v19, *(_QWORD *)(v6 + 840));
    v21 = v13[3];
    v20 = v13[4];
    v22 = (char *)*v18;
    v23 = v20 * v21;
    if (v20 * v21 >= 0)
      v24 = v20 * v21;
    else
      v24 = v23 + 1;
    v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
    if (v23 >= 2)
    {
      v26 = 2;
      if (v25 > 2)
        v26 = v24 & 0xFFFFFFFFFFFFFFFELL;
      bzero(*v18, ((8 * v26 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v25 < v23)
      bzero(&v22[16 * (v24 >> 1)], 8 * v23 - 16 * (v24 >> 1));
  }
  v115 = (float64x2_t **)(v13 + 2);
  turi::ml_data::get_iterator((turi::ml_data *)(v6 + 384), a2, a3, (uint64_t)v119);
  if (v125 != v124)
  {
    v116 = (float64x2_t **)v13;
    do
    {
      v27 = v5;
      v28 = v127;
      v29 = v128;
      if (v128)
      {
        p_shared_owners = (unint64_t *)&v128->__shared_owners_;
        do
          v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
      }
      v118 = v129;
      v32 = v131;
      v33 = (char *)v132;
      v34 = v133;
      if (v133 >= 0)
        v35 = v133;
      else
        v35 = v133 + 1;
      v36 = v35 & 0xFFFFFFFFFFFFFFFELL;
      if (v133 >= 2)
      {
        v37 = 2;
        if (v36 > 2)
          v37 = v35 & 0xFFFFFFFFFFFFFFFELL;
        bzero(v132, ((8 * v37 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      }
      if (v36 < v34)
        bzero(&v33[16 * (v35 >> 1)], 8 * v34 - 16 * (v35 >> 1));
      v5 = v27;
      if (v32)
      {
        v38 = *(_QWORD *)(v28 + 56);
        if (v38)
        {
          v39 = 0;
          v40 = *(_QWORD *)(v28 + 96) + 8 * v118 + 8 * (*(_BYTE *)(v28 + 18) == 0);
          v41 = *(_QWORD *)(v28 + 72);
          v42 = (double *)v132;
          do
          {
            v43 = *(_QWORD *)(v41 + 16 * v39);
            v44 = *(_QWORD *)(v43 + 64);
            v45 = *(_QWORD *)(v43 + 104);
            switch(*(_DWORD *)(v43 + 24))
            {
              case 0:
                v46 = *(double *)v40;
                v40 += 8;
                v47 = v46;
                if (v44)
                {
                  if (*(_BYTE *)(v6 + 360))
                    v47 = v47 * *(double *)(*(_QWORD *)(v6 + 368) + 8 * v45);
                  goto LABEL_91;
                }
                break;
              case 1:
                v60 = *(double *)v40;
                v40 += 8;
                v59 = v60;
                if (*(_QWORD *)&v60 < v44)
                {
                  v45 += *(_QWORD *)&v59;
                  if (*(_BYTE *)(v6 + 360))
                    v47 = *(double *)(*(_QWORD *)(v6 + 368) + 8 * v45);
                  else
                    v47 = 1.0;
LABEL_91:
                  v42[v45] = v47;
                }
                break;
              case 2:
                v48 = *(_QWORD *)(v43 + 72);
                if (v48)
                {
                  v49 = 0;
                  v50 = 0;
                  v51 = 8 * v45;
                  v52 = (char *)v132 + 8 * v45;
                  do
                  {
                    if (v50 < v44)
                    {
                      v53 = *(double *)(v40 + 8 * v50);
                      if (*(_BYTE *)(v6 + 360))
                        v53 = v53 * *(double *)(*(_QWORD *)(v6 + 368) + v51 + 8 * v50);
                      *(double *)&v52[8 * v50] = v53;
                    }
                    ++v50;
                    v49 -= 8;
                  }
                  while (v48 != v50);
                  goto LABEL_69;
                }
                break;
              case 3:
                v62 = *(double *)v40;
                v40 += 8;
                v61 = v62;
                if (v62 != 0.0)
                {
                  v63 = (double *)v132;
                  do
                  {
                    if (*(_QWORD *)v40 < v44)
                    {
                      v64 = *(_QWORD *)v40 + v45;
                      if (*(_BYTE *)(v6 + 360))
                        v65 = *(double *)(*(_QWORD *)(v6 + 368) + 8 * v64);
                      else
                        v65 = 1.0;
                      v63[v64] = v65;
                    }
                    v40 += 8;
                    --*(_QWORD *)&v61;
                  }
                  while (v61 != 0.0);
                }
                break;
              case 4:
                v67 = *(double *)v40;
                v40 += 8;
                v66 = v67;
                if (v67 != 0.0)
                {
                  v68 = (double *)v132;
                  do
                  {
                    if (*(_QWORD *)v40 < v44)
                    {
                      v69 = *(double *)(v40 + 8);
                      v70 = *(_QWORD *)v40 + v45;
                      if (*(_BYTE *)(v6 + 360))
                        v69 = v69 * *(double *)(*(_QWORD *)(v6 + 368) + 8 * v70);
                      v68[v70] = v69;
                    }
                    v40 += 16;
                    --*(_QWORD *)&v66;
                  }
                  while (v66 != 0.0);
                }
                break;
              case 7:
                v54 = *(_QWORD *)(v43 + 72);
                if (v54)
                {
                  v49 = 0;
                  v55 = 0;
                  v56 = 8 * v45;
                  v57 = (char *)v132 + 8 * v45;
                  do
                  {
                    if (v55 < v44)
                    {
                      v58 = *(double *)(v40 + 8 * v55);
                      if (*(_BYTE *)(v6 + 360))
                        v58 = v58 * *(double *)(*(_QWORD *)(v6 + 368) + v56 + 8 * v55);
                      *(double *)&v57[8 * v55] = v58;
                    }
                    ++v55;
                    v49 -= 8;
                  }
                  while (v54 != v55);
LABEL_69:
                  v40 -= v49;
                }
                break;
              default:
                break;
            }
            ++v39;
          }
          while (v39 != v38);
        }
      }
      if (v29)
      {
        v71 = (unint64_t *)&v29->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v73 = v132;
      *((_QWORD *)v132 + *(_QWORD *)(v6 + 328)) = 0x3FF0000000000000;
      v74 = 1.0;
      if (*(_BYTE *)(v127 + 16))
        v75 = *(_BYTE *)(v127 + 17) == 0;
      else
        v75 = 0;
      if (v75)
      {
        v76 = (_QWORD *)(v127 + 24);
        if (!*(_BYTE *)(v127 + 18))
          v76 = (_QWORD *)(*(_QWORD *)(v127 + 96) + 8 * v129);
        v74 = *(double *)(*(_QWORD *)(v127 + 96) + 8 * v129 + 8 * *v76 - 8);
      }
      v77 = (uint64_t *)v27[2];
      v134[0] = &v132;
      v134[1] = v77;
      if (v77[1])
      {
        *(_QWORD *)&v135.f64[1] = v73;
        v136 = *v77;
        v137 = v134;
        v78 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v135);
      }
      else
      {
        v78 = 0.0;
      }
      v79 = v78 - v74;
      v80 = v79 + v79;
      v81 = (char *)v132;
      v82 = *v116;
      v83 = (uint64_t)v116[1];
      if (v83 >= 0)
        v84 = (uint64_t)v116[1];
      else
        v84 = v83 + 1;
      v85 = v84 & 0xFFFFFFFFFFFFFFFELL;
      if (v83 >= 2)
      {
        v86 = 0;
        v87 = *v116;
        v88 = (float64x2_t *)v132;
        do
        {
          v89 = *v88++;
          *v87 = vaddq_f64(*v87, vmulq_n_f64(v89, v80));
          ++v87;
          v86 += 2;
        }
        while (v86 < v85);
      }
      v90 = v83 <= v85;
      v91 = v83 - v85;
      if (!v90)
      {
        v92 = v84 >> 1;
        v93 = (double *)&v81[16 * v92];
        f64 = v82[v92].f64;
        do
        {
          v95 = *v93++;
          *f64 = v80 * v95 + *f64;
          ++f64;
          --v91;
        }
        while (v91);
      }
      *v117 = *v117 + v79 * v79;
      if (*(_BYTE *)v27[1])
      {
        v134[3] = v133;
        v134[4] = 0x4000000000000000;
        v134[5] = &v132;
        v134[7] = &v132;
        if (v133)
        {
          v136 = 0x4000000000000000;
          v138 = v132;
          v139 = v132;
          v140 = v134;
          v96.f64[0] = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>> const> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v135);
        }
        else
        {
          v96.f64[0] = 0.0;
        }
        v135.f64[0] = v96.f64[0];
        v97 = *v115;
        v98 = v115[1];
        v99 = (_QWORD)v115[2] * (_QWORD)v98;
        if (v99 >= 0)
          v100 = (_QWORD)v115[2] * (_QWORD)v98;
        else
          v100 = v99 + 1;
        v101 = v100 & 0xFFFFFFFFFFFFFFFELL;
        if (v99 >= 2)
        {
          v102 = 0;
          v96 = v135;
          v103 = *v115;
          do
          {
            *v103 = vaddq_f64(v96, *v103);
            ++v103;
            v102 += 2;
          }
          while (v102 < v101);
        }
        v90 = v99 <= v101;
        v104 = v99 - v101;
        if (!v90)
        {
          v105 = v97[v100 >> 1].f64;
          do
          {
            *v105 = v96.f64[0] + *v105;
            ++v105;
            --v104;
          }
          while (v104);
        }
      }
      if (v131 | v121)
      {
        v106 = (uint64_t *)(*(_QWORD *)(v127 + 96) + 8 * v129);
        if (v122)
          v106 = &v123;
        v129 += *v106;
      }
      v107 = v125 + 1;
      v108 = v124;
      v109 = ++v125 - v120 * v126;
      v130 = v109;
      if (v109 == v120 && v107 != v124)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v119);
        v108 = v124;
        v107 = v125;
      }
    }
    while (v107 != v108);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v119);
  free(v132);
}

void sub_2182E31D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  free(a59);
  _Unwind_Resume(a1);
}

_QWORD *Eigen::DenseStorage<double,-1,-1,-1,0>::resize(_QWORD *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  std::bad_alloc *exception;
  std::bad_alloc *v9;

  v6 = result;
  if (result[2] * result[1] != a2)
  {
    free((void *)*result);
    if (a2)
    {
      if (a2 >> 61 || (result = malloc_type_malloc(8 * a2, 0x1E76AA36uLL)) == 0)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v9 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v9, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
    }
    else
    {
      result = 0;
    }
    *v6 = result;
  }
  v6[1] = a3;
  v6[2] = a4;
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>> const> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;
  int64_t v5;
  double v6;
  float64x2_t *v7;
  float64x2_t *v8;
  float64x2_t v9;
  int64_t v10;
  float64x2_t v11;
  float64x2_t *v12;
  float64x2_t *v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  double *f64;
  double *v22;
  double v23;
  double v24;
  double v25;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 56) + 8);
  if (v1 >= 0)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 56) + 8);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 56) + 8);
  else
    v3 = v1 + 1;
  if ((unint64_t)(v1 + 1) < 3)
    return *(double *)(a1 + 24) * **(double **)(a1 + 48) * **(double **)(a1 + 64);
  v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *(double *)(a1 + 24);
  v7 = *(float64x2_t **)(a1 + 48);
  v8 = *(float64x2_t **)(a1 + 64);
  v9 = vmulq_f64(vmulq_n_f64(*v7, v6), *v8);
  if (v1 >= 4)
  {
    v10 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = vmulq_f64(vmulq_n_f64(v7[1], v6), v8[1]);
    if ((unint64_t)v1 >= 8)
    {
      v12 = v8 + 3;
      v13 = v7 + 3;
      v14 = 4;
      do
      {
        v9 = vaddq_f64(v9, vmulq_f64(vmulq_n_f64(v13[-1], v6), v12[-1]));
        v15 = *v13;
        v13 += 2;
        v16 = vmulq_n_f64(v15, v6);
        v17 = *v12;
        v12 += 2;
        v11 = vaddq_f64(v11, vmulq_f64(v16, v17));
        v14 += 4;
      }
      while (v14 < v10);
    }
    v9 = vaddq_f64(v11, v9);
    if (v5 > v10)
      v9 = vaddq_f64(v9, vmulq_f64(vmulq_n_f64(*(float64x2_t *)((char *)v7 + 8 * v10), v6), *(float64x2_t *)((char *)v8 + 8 * v10)));
  }
  result = vaddvq_f64(v9);
  v18 = v1 <= v5;
  v19 = v1 - v5;
  if (!v18)
  {
    v20 = v3 >> 1;
    f64 = v7[v3 >> 1].f64;
    v22 = v8[v20].f64;
    do
    {
      v23 = *f64++;
      v24 = v6 * v23;
      v25 = *v22++;
      result = result + v24 * v25;
      --v19;
    }
    while (v19);
  }
  return result;
}

void turi::ml_data_iterator::~ml_data_iterator(turi::ml_data_iterator *this)
{
  void *v2;
  void *v3;
  void **v4;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 304);
  v4 = (void **)((char *)this + 248);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  v4 = (void **)((char *)this + 152);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  v4 = (void **)((char *)this + 104);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

__n128 std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24D9379D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D9379D8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t *turi::supervised_2::linear_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  __n128 iterator;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  double *v54;
  double v55;
  double v56;
  uint64_t v57;
  double *v58;
  double i;
  double v60;
  uint64_t v61;
  uint64_t v62;
  double j;
  double v64;
  double v65;
  uint64_t v66;
  double v67;
  double *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  double *v76;
  int *v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::bad_alloc *exception;
  std::bad_alloc *v91;
  _QWORD *v92;
  uint64_t *v93;
  double *v94;
  uint64_t v95;
  std::__shared_weak_count *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101[16];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  _BYTE v107[128];
  uint64_t v108;
  unsigned __int8 v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 328) + 1;
  LOBYTE(v120) = 0;
  v121 = 0u;
  v122 = 0u;
  v123 = v6;
  v7 = *(_QWORD *)(v5 + 848) + 120 * a2;
  v10 = *(char **)(v7 + 8);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = (_QWORD *)(v7 + 8);
  v11 = *(_QWORD *)(v5 + 840);
  v92 = v9;
  if (v8 != v11)
  {
    free(v10);
    if (v11)
    {
      if ((unint64_t)v11 >> 61 || (v10 = (char *)malloc_type_malloc(8 * v11, 0x1E76AA36uLL)) == 0)
      {
LABEL_112:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v91 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v91, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
    }
    else
    {
      v10 = 0;
    }
    v9 = v92;
    *v92 = v10;
  }
  v9[1] = v11;
  if (v11 >= 0)
    v12 = v11;
  else
    v12 = v11 + 1;
  v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    v14 = 2;
    if (v13 > 2)
      v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    bzero(v10, ((8 * v14 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    v9 = v92;
  }
  v94 = (double *)(v9 + 5);
  if (v13 < v11)
  {
    bzero(&v10[16 * (v12 >> 1)], 8 * v11 - 16 * (v12 >> 1));
    v9 = v92;
  }
  v15 = (void **)(v9 + 2);
  *v94 = 0.0;
  if (*(_BYTE *)a1[1])
  {
    v16 = *(_QWORD *)(v5 + 840);
    if (v16 && 0x7FFFFFFFFFFFFFFFLL / v16 < v16)
      goto LABEL_112;
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v9 + 2, v16 * v16, v16, *(_QWORD *)(v5 + 840));
    v18 = (char *)v15[1];
    v17 = (char *)v15[2];
    v19 = (char *)*v15;
    v20 = (_QWORD)v17 * (_QWORD)v18;
    if ((uint64_t)((_QWORD)v17 * (_QWORD)v18) >= 0)
      v21 = (_QWORD)v17 * (_QWORD)v18;
    else
      v21 = v20 + 1;
    v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
    if (v20 >= 2)
    {
      v23 = 2;
      if (v22 > 2)
        v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
      bzero(*v15, ((8 * v23 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v22 < v20)
      bzero(&v19[16 * (v21 >> 1)], 8 * v20 - 16 * (v21 >> 1));
  }
  iterator = turi::ml_data::get_iterator((turi::ml_data *)(v5 + 384), a2, a3, (uint64_t)v107);
  if (v113 != v112)
  {
    v93 = (uint64_t *)v15;
    do
    {
      v26 = v115;
      v25 = v116;
      if (v116)
      {
        p_shared_owners = (unint64_t *)&v116->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      v97 = v25;
      *(_QWORD *)&v122 = 0;
      if (v119)
      {
        v99 = *(_QWORD *)(v26 + 56);
        if (v99)
        {
          v29 = 0;
          v30 = *(_QWORD *)(v26 + 96) + 8 * v117 + 8 * (*(_BYTE *)(v26 + 18) == 0);
          v98 = v26;
          do
          {
            v31 = *(_QWORD *)(*(_QWORD *)(v26 + 72) + 16 * v29);
            v32 = *(_QWORD *)(v31 + 64);
            v33 = *(_QWORD *)(v31 + 104);
            switch(*(_DWORD *)(v31 + 24))
            {
              case 0:
                v34 = *(double *)v30;
                v30 += 8;
                v35 = v34;
                if (v32)
                {
                  if (!*(_BYTE *)(v5 + 360))
                  {
                    v100 = 0;
                    v58 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, (int)v33, &v100);
                    goto LABEL_76;
                  }
                  v36 = *(double *)(*(_QWORD *)(v5 + 368) + 8 * v33);
                  v100 = 0;
                  v37 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, (int)v33, &v100);
                  iterator.n128_f64[0] = v35 * v36;
                  *v37 = v35 * v36;
                }
                break;
              case 1:
                v56 = *(double *)v30;
                v30 += 8;
                v55 = v56;
                if (*(_QWORD *)&v56 < v32)
                {
                  v57 = *(_QWORD *)&v55 + v33;
                  if (*(_BYTE *)(v5 + 360))
                  {
                    v35 = *(double *)(*(_QWORD *)(v5 + 368) + 8 * v57);
                    v100 = 0;
                    v58 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, (int)v57, &v100);
LABEL_76:
                    *v58 = v35;
                  }
                  else
                  {
                    v100 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, (int)v57, &v100) = 0x3FF0000000000000;
                  }
                }
                break;
              case 2:
                v38 = *(_QWORD *)(v31 + 72);
                if (!v38)
                  goto LABEL_57;
                v39 = 0;
                v40 = 0;
                v41 = v33 << 32;
                v42 = 8 * v33;
                do
                {
                  if (v40 < v32)
                  {
                    v43 = *(double *)(v30 + 8 * v40);
                    v44 = v41 >> 32;
                    if (*(_BYTE *)(v5 + 360))
                    {
                      v45 = *(double *)(*(_QWORD *)(v5 + 368) + v42 + 8 * v40);
                      v100 = 0;
                      v46 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, v44, &v100);
                      iterator.n128_f64[0] = v43 * v45;
                      *v46 = v43 * v45;
                    }
                    else
                    {
                      v100 = 0;
                      *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, v44, &v100) = v43;
                    }
                  }
                  ++v40;
                  v41 += 0x100000000;
                  v39 -= 8;
                }
                while (v38 != v40);
                goto LABEL_56;
              case 3:
                v60 = *(double *)v30;
                v30 += 8;
                for (i = v60; i != 0.0; --*(_QWORD *)&i)
                {
                  if (*(_QWORD *)v30 < v32)
                  {
                    v61 = *(_QWORD *)v30 + v33;
                    if (*(_BYTE *)(v5 + 360))
                    {
                      v62 = *(_QWORD *)(*(_QWORD *)(v5 + 368) + 8 * v61);
                      v100 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, (int)v61, &v100) = v62;
                    }
                    else
                    {
                      v100 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, (int)v61, &v100) = 0x3FF0000000000000;
                    }
                  }
                  v30 += 8;
                }
                break;
              case 4:
                v64 = *(double *)v30;
                v30 += 8;
                for (j = v64; j != 0.0; --*(_QWORD *)&j)
                {
                  if (*(_QWORD *)v30 < v32)
                  {
                    v65 = *(double *)(v30 + 8);
                    v66 = *(_QWORD *)v30 + v33;
                    if (*(_BYTE *)(v5 + 360))
                    {
                      v67 = *(double *)(*(_QWORD *)(v5 + 368) + 8 * v66);
                      v100 = 0;
                      v68 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, (int)v66, &v100);
                      iterator.n128_f64[0] = v65 * v67;
                      *v68 = v65 * v67;
                    }
                    else
                    {
                      v100 = 0;
                      *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, (int)v66, &v100) = v65;
                    }
                  }
                  v30 += 16;
                }
                break;
              case 7:
                v47 = *(_QWORD *)(v31 + 72);
                if (v47)
                {
                  v39 = 0;
                  v48 = 0;
                  v49 = v33 << 32;
                  v50 = 8 * v33;
                  do
                  {
                    if (v48 < v32)
                    {
                      v51 = *(double *)(v30 + 8 * v48);
                      v52 = v49 >> 32;
                      if (*(_BYTE *)(v5 + 360))
                      {
                        v53 = *(double *)(*(_QWORD *)(v5 + 368) + v50 + 8 * v48);
                        v100 = 0;
                        v54 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, v52, &v100);
                        iterator.n128_f64[0] = v51 * v53;
                        *v54 = v51 * v53;
                      }
                      else
                      {
                        v100 = 0;
                        *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, v52, &v100) = v51;
                      }
                    }
                    ++v48;
                    v49 += 0x100000000;
                    v39 -= 8;
                  }
                  while (v47 != v48);
LABEL_56:
                  v30 -= v39;
                }
LABEL_57:
                v26 = v98;
                break;
              default:
                break;
            }
            ++v29;
          }
          while (v29 != v99);
        }
      }
      if (v97)
      {
        v69 = (unint64_t *)&v97->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v97->__on_zero_shared)(v97, iterator);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v71 = *(int *)(v5 + 328);
      v100 = 0;
      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v121, v71, &v100) = 0x3FF0000000000000;
      iterator.n128_u64[0] = 1.0;
      if (*(_BYTE *)(v115 + 16))
        v72 = *(_BYTE *)(v115 + 17) == 0;
      else
        v72 = 0;
      if (v72)
      {
        v73 = (_QWORD *)(v115 + 24);
        if (!*(_BYTE *)(v115 + 18))
          v73 = (_QWORD *)(*(_QWORD *)(v115 + 96) + 8 * v117);
        iterator.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v115 + 96) + 8 * v117 + 8 * *v73 - 8);
      }
      v74 = v122;
      if ((uint64_t)v122 <= 0)
      {
        v79 = 0.0 - iterator.n128_f64[0];
      }
      else
      {
        v75 = 0;
        v77 = (int *)*((_QWORD *)&v121 + 1);
        v76 = (double *)v121;
        v78 = 0.0;
        do
        {
          v78 = v78
              + *(double *)(v121 + 8 * v75)
              * *(double *)(*(_QWORD *)a1[2] + 8 * *(int *)(*((_QWORD *)&v121 + 1) + 4 * v75));
          ++v75;
        }
        while ((_QWORD)v122 != v75);
        v79 = v78 - iterator.n128_f64[0];
        v80 = *v92;
        do
        {
          v82 = *v77++;
          v81 = v82;
          v83 = *v76++;
          *(double *)(v80 + 8 * v81) = (v79 + v79) * v83 + *(double *)(v80 + 8 * v81);
          --v74;
        }
        while (v74);
      }
      iterator.n128_f64[0] = *v94 + v79 * v79;
      *v94 = iterator.n128_f64[0];
      if (*(_BYTE *)a1[1])
      {
        LOBYTE(v100) = 0;
        v101[0] = 0;
        v102 = v123;
        v103 = 0x4000000000000000;
        v95 &= 0xFFFFFFFFFFFFFF00;
        v104 = v95;
        v105 = &v120;
        v106 = &v120;
        Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>,Eigen::SparseVector<double,0,int>,Eigen::SparseShape,Eigen::SparseShape,6>::addTo<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>>(v93, (uint64_t)v101, &v120);
      }
      if (v119 | v109)
      {
        v84 = (uint64_t *)(*(_QWORD *)(v115 + 96) + 8 * v117);
        if (v110)
          v84 = &v111;
        v117 += *v84;
      }
      v85 = v113 + 1;
      v86 = v112;
      v87 = ++v113 - v108 * v114;
      v118 = v87;
      if (v87 == v108 && v85 != v112)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v107);
        v86 = v112;
        v85 = v113;
      }
    }
    while (v85 != v86);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v107);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v121);
}

void sub_2182E3CA4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t *Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>,Eigen::SparseVector<double,0,int>,Eigen::SparseShape,Eigen::SparseShape,6>::addTo<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  double v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  LOBYTE(v7) = 0;
  v8 = 0u;
  v9 = 0u;
  v10 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 40);
  LOBYTE(v11) = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = v5;
  Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,1,long>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>,1>::run(&v11, a2);
  v10 = v14;
  v14 = 0;
  v8 = v12;
  v12 = 0u;
  v9 = v13;
  v13 = 0u;
  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)&v12);
  Eigen::internal::sparse_sparse_to_dense_product_selector<Eigen::SparseVector<double,1,long>,Eigen::SparseVector<double,0,int>,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,0>::run(&v7, a3, a1);
  return Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)&v8);
}

void sub_2182E3DE4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t *Eigen::internal::sparse_sparse_to_dense_product_selector<Eigen::SparseVector<double,1,long>,Eigen::SparseVector<double,0,int>,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,0>::run(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  double v18;
  double *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  _BYTE v25[8];
  __int128 v26;
  void *v27[2];
  _OWORD v28[2];

  v25[0] = 0;
  v26 = 0u;
  *(_OWORD *)v27 = 0u;
  memset(v28, 0, sizeof(v28));
  Eigen::SparseMatrix<double,0,long>::operator=<Eigen::SparseVector<double,1,long>>((uint64_t)v25, a1);
  v5 = a2[3];
  v6 = v27[0];
  if (v5 >= 1)
  {
    v7 = 0;
    v8 = a2[1];
    v9 = a2[2];
    v10 = v28[0];
    v11 = v27[1];
    v12 = *a3;
    do
    {
      v13 = *(int *)(v9 + 4 * v7);
      v14 = v6[v13];
      if (v11)
        v15 = v11[v13] + v14;
      else
        v15 = v6[v13 + 1];
      v16 = v15 <= v14;
      v17 = v15 - v14;
      if (!v16)
      {
        v18 = *(double *)(v8 + 8 * v7);
        v19 = (double *)(v10 + 8 * v14);
        v20 = (uint64_t *)(*((_QWORD *)&v10 + 1) + 8 * v14);
        do
        {
          v22 = *v20++;
          v21 = v22;
          v23 = *v19++;
          *(double *)(v12 + 8 * v21) = *(double *)(v12 + 8 * v21) + v23 * v18;
          --v17;
        }
        while (v17);
      }
      ++v7;
    }
    while (v7 != v5);
  }
  free(v6);
  free(v27[1]);
  return Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)v28);
}

void sub_2182E3EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)va);
  _Unwind_Resume(a1);
}

double *Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,1,long>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,1,-1,1,1,-1> const> const,Eigen::Transpose<Eigen::SparseVector<double,0,int>> const>,1>::run(double *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  double *v4;
  double v5;
  double *v6;
  int *v7;
  double v8;
  double v9;
  uint64_t v10;

  v2 = *(_QWORD **)(a2 + 40);
  v3 = v2[3];
  if (v3 >= 1)
  {
    v4 = result;
    v5 = *(double *)(a2 + 24);
    v6 = (double *)v2[1];
    v7 = (int *)v2[2];
    do
    {
      v8 = *v6++;
      v9 = v5 * v8;
      v10 = *v7++;
      result = (double *)Eigen::SparseVector<double,1,long>::insert(v4, v10);
      *result = v9;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *Eigen::SparseVector<double,1,long>::insert(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;

  v4 = a1 + 1;
  v5 = a1[3];
  Eigen::internal::CompressedStorage<double,long>::resize((uint64_t)(a1 + 1), v5 + 1, 1.0);
  v6 = a1[2];
  if (v5 >= 1)
  {
    v7 = 8 * v5 - 8;
    while (1)
    {
      v8 = *(_QWORD *)(v6 + v7);
      if (v8 <= a2)
        break;
      --v5;
      *(_QWORD *)(v6 + v7 + 8) = v8;
      *(_QWORD *)(*v4 + v7 + 8) = *(_QWORD *)(*v4 + v7);
      v7 -= 8;
      if ((unint64_t)(v5 + 1) <= 1)
      {
        v5 = 0;
        break;
      }
    }
  }
  *(_QWORD *)(v6 + 8 * v5) = a2;
  result = (_QWORD *)(*v4 + 8 * v5);
  *result = 0;
  return result;
}

uint64_t Eigen::internal::CompressedStorage<double,long>::resize(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  const void *v12;
  std::bad_alloc *exception;
  std::bad_alloc *v14;

  v4 = result;
  if (*(_QWORD *)(result + 24) < a2)
  {
    v5 = (uint64_t)((double)a2 * a3);
    if (v5 < 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v14 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v14, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v6 = v5 + a2;
    v7 = (void *)operator new[]();
    result = operator new[]();
    v8 = (void *)result;
    v9 = *(_QWORD *)(v4 + 16);
    if (v9 >= v6)
      v9 = v6;
    v10 = *(const void **)v4;
    if (v9 <= 0)
    {
      v12 = *(const void **)(v4 + 8);
    }
    else
    {
      v11 = 8 * v9;
      memcpy(v7, *(const void **)v4, 8 * v9);
      v12 = *(const void **)(v4 + 8);
      result = (uint64_t)memcpy(v8, v12, v11);
    }
    *(_QWORD *)v4 = v7;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 24) = v6;
    if (v12)
      result = MEMORY[0x219A199F0](v12, 0x1000C8000313F17);
    if (v10)
      result = MEMORY[0x219A199F0](v10, 0x1000C8000313F17);
  }
  *(_QWORD *)(v4 + 16) = a2;
  return result;
}

void sub_2182E4158(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t *Eigen::internal::CompressedStorage<double,long>::~CompressedStorage(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
    MEMORY[0x219A199F0](v2, 0x1000C8000313F17);
  v3 = a1[1];
  if (v3)
    MEMORY[0x219A199F0](v3, 0x1000C8000313F17);
  return a1;
}

uint64_t Eigen::SparseMatrix<double,0,long>::~SparseMatrix(uint64_t a1)
{
  free(*(void **)(a1 + 24));
  free(*(void **)(a1 + 32));
  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)(a1 + 40));
  return a1;
}

uint64_t Eigen::SparseMatrix<double,0,long>::operator=<Eigen::SparseVector<double,1,long>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::bad_alloc *exception;
  std::bad_alloc *v30;
  char v31[8];
  __int128 v32;
  void *v33[2];
  __int128 v34;
  __int128 v35;

  v4 = a2[5];
  v31[0] = 0;
  v32 = 0u;
  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  Eigen::SparseMatrix<double,0,long>::resize((uint64_t)v31, 1, v4);
  v5 = v33[0];
  if ((uint64_t)v32 >= 1)
    bzero(v33[0], 8 * v32);
  v6 = a2[3];
  if (v6 >= 1)
  {
    v7 = (uint64_t *)a2[2];
    do
    {
      v8 = *v7++;
      ++v5[v8];
      --v6;
    }
    while (v6);
  }
  if ((_QWORD)v32)
  {
    if ((unint64_t)v32 >> 61 || (v9 = malloc_type_malloc(8 * v32, 0x1E76AA36uLL), (v10 = v9) == 0))
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v30 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v30, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v11 = v32;
    v12 = v33[0];
    if ((uint64_t)v32 < 1)
    {
      v14 = 0;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = v12[v13];
        v12[v13] = v14;
        v9[v13] = v14;
        v14 += v15;
        ++v13;
        v11 = v32;
      }
      while (v13 < (uint64_t)v32);
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
    v11 = 0;
    v12 = v33[0];
  }
  v12[v11] = v14;
  Eigen::internal::CompressedStorage<double,long>::resize((uint64_t)&v34, v14, 0.0);
  v16 = *((_QWORD *)&v34 + 1);
  v17 = v34;
  v18 = a2[3];
  if (v18 >= 1)
  {
    v19 = (uint64_t *)a2[1];
    v20 = (uint64_t *)a2[2];
    do
    {
      v21 = *v20++;
      v22 = v10[v21];
      v10[v21] = v22 + 1;
      *(_QWORD *)(v16 + 8 * v22) = 0;
      v23 = *v19++;
      *(_QWORD *)(v17 + 8 * v22) = v23;
      --v18;
    }
    while (v18);
    v17 = v34;
  }
  v24 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = v32;
  v25 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v33;
  v32 = v24;
  *(_OWORD *)v33 = v25;
  v26 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 48) = v16;
  v27 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = v35;
  v34 = v26;
  v35 = v27;
  free(v10);
  free(v33[0]);
  free(v33[1]);
  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)&v34);
  return a1;
}

void sub_2182E43F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  free(v10);
  Eigen::SparseMatrix<double,0,long>::~SparseMatrix((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void Eigen::SparseMatrix<double,0,long>::resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  void *v7;
  void *v8;
  std::bad_alloc *exception;
  std::bad_alloc *v10;

  v3 = a3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 != a3 || v5 == 0)
  {
    free(*(void **)(a1 + 24));
    v7 = malloc_type_malloc(8 * v3 + 8, 0x100004000313F17uLL);
    *(_QWORD *)(a1 + 24) = v7;
    if (!v7)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v10 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v10, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
    free(v8);
    *(_QWORD *)(a1 + 32) = 0;
    v3 = *(_QWORD *)(a1 + 8);
  }
  bzero(*(void **)(a1 + 24), 8 * v3 + 8);
}

void turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec(uint64_t a1, turi::ml_metadata **a2)
{
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  BOOL v11;
  std::vector<char>::size_type v12;
  size_t v13;
  _QWORD *v14;
  size_t v15;
  BOOL v16;
  std::vector<char>::size_type v17;

  if (*a2)
  {
    if (*(_QWORD *)a1)
    {
      std::ostream::write();
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 32) + 1 > v4)
      {
        v8 = 2 * v4 + 2;
        *(_QWORD *)(a1 + 40) = v8;
        v9 = *(_QWORD **)(a1 + 16);
        if (v9)
        {
          v5 = (_BYTE *)*v9;
          v10 = v9[1] - *v9;
          v11 = v8 >= v10;
          v12 = v8 - v10;
          if (v12 != 0 && v11)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v12);
            v5 = **(_BYTE ***)(a1 + 16);
          }
          else if (!v11)
          {
            v9[1] = &v5[v8];
          }
        }
        else
        {
          v5 = malloc_type_realloc(*(void **)(a1 + 24), v8, 0xF6EA6B1uLL);
        }
        *(_QWORD *)(a1 + 24) = v5;
      }
      else
      {
        v5 = *(_BYTE **)(a1 + 24);
      }
      v5[(*(_QWORD *)(a1 + 32))++] = 1;
    }
    turi::ml_metadata::save(*a2, (turi::oarchive *)a1);
  }
  else if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 1 > v6)
    {
      v13 = 2 * v6 + 2;
      *(_QWORD *)(a1 + 40) = v13;
      v14 = *(_QWORD **)(a1 + 16);
      if (v14)
      {
        v7 = (_BYTE *)*v14;
        v15 = v14[1] - *v14;
        v16 = v13 >= v15;
        v17 = v13 - v15;
        if (v17 != 0 && v16)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v17);
          v7 = **(_BYTE ***)(a1 + 16);
        }
        else if (!v16)
        {
          v14[1] = &v7[v13];
        }
      }
      else
      {
        v7 = malloc_type_realloc(*(void **)(a1 + 24), v13, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v7;
    }
    else
    {
      v7 = *(_BYTE **)(a1 + 24);
    }
    v7[(*(_QWORD *)(a1 + 32))++] = 0;
  }
}

void *turi::archive_detail::eigen_serialize_impl<turi::oarchive,Eigen::Matrix,double,-1,1,0,-1,1>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  const void *v9;
  size_t v10;
  void *result;
  size_t v12;
  char *v13;
  size_t v14;
  char **v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;
  size_t v19;
  char **v20;
  size_t v21;
  BOOL v22;
  std::vector<char>::size_type v23;
  size_t v24;
  char **v25;
  size_t v26;
  BOOL v27;
  std::vector<char>::size_type v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a2 + 8);
  v29 = v4;
  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v5)
    {
      v14 = 2 * v5 + 16;
      *(_QWORD *)(a1 + 40) = v14;
      v15 = *(char ***)(a1 + 16);
      if (v15)
      {
        v6 = *v15;
        v16 = v15[1] - *v15;
        v17 = v14 >= v16;
        v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          v6 = **(char ***)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = &v6[v14];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v6[*(_QWORD *)(a1 + 32)] = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v7)
    {
      v19 = 2 * v7 + 16;
      *(_QWORD *)(a1 + 40) = v19;
      v20 = *(char ***)(a1 + 16);
      if (v20)
      {
        v8 = *v20;
        v21 = v20[1] - *v20;
        v22 = v19 >= v21;
        v23 = v19 - v21;
        if (v23 != 0 && v22)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v23);
          v8 = **(char ***)(a1 + 16);
        }
        else if (!v22)
        {
          v20[1] = &v8[v19];
        }
      }
      else
      {
        v8 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v19, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v8;
    }
    else
    {
      v8 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v8[*(_QWORD *)(a1 + 32)] = 1;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v9 = *(const void **)a2;
  v10 = 8 * v29;
  if (*(_QWORD *)a1)
    return (void *)std::ostream::write();
  v12 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + v10 > v12)
  {
    v24 = 2 * (v12 + v10);
    *(_QWORD *)(a1 + 40) = v24;
    v25 = *(char ***)(a1 + 16);
    if (v25)
    {
      v13 = *v25;
      v26 = v25[1] - *v25;
      v27 = v24 >= v26;
      v28 = v24 - v26;
      if (v28 != 0 && v27)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v28);
        v13 = **(char ***)(a1 + 16);
      }
      else if (!v27)
      {
        v25[1] = &v13[v24];
      }
    }
    else
    {
      v13 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v24, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = v13;
  }
  else
  {
    v13 = *(char **)(a1 + 24);
  }
  result = memcpy(&v13[*(_QWORD *)(a1 + 32)], v9, v10);
  *(_QWORD *)(a1 + 32) += v10;
  return result;
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec(turi::iarchive *a1, turi::ml_metadata **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  char v12;

  v12 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v6 = *(unsigned __int8 *)(v4 + v5);
    v12 = v6;
    *((_QWORD *)a1 + 3) = v5 + 1;
    if (v6)
    {
      v7 = operator new();
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_QWORD *)(v7 + 64) = -1;
      *(_QWORD *)(v7 + 72) = -1;
      *(_QWORD *)(v7 + 96) = 0;
      *(_QWORD *)(v7 + 88) = 0;
      *(_QWORD *)(v7 + 80) = v7 + 88;
      *(_WORD *)(v7 + 104) = 0;
      *(_BYTE *)(v7 + 106) = 0;
      *(_OWORD *)(v7 + 192) = 0u;
      *(_OWORD *)(v7 + 208) = 0u;
      *(_OWORD *)(v7 + 224) = 0u;
      *(_OWORD *)(v7 + 240) = 0u;
      *(_QWORD *)(v7 + 256) = 0;
      *(_OWORD *)(v7 + 171) = 0u;
      *(_OWORD *)(v7 + 144) = 0u;
      *(_OWORD *)(v7 + 160) = 0u;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      std::shared_ptr<turi::ml_metadata>::reset[abi:ne180100]<turi::ml_metadata,void>(a2, v7);
      turi::ml_metadata::load(*a2, a1);
      return;
    }
  }
  else
  {
    std::istream::read();
  }
  v11 = 0uLL;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a2, &v11);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void std::shared_ptr<turi::ml_metadata>::reset[abi:ne180100]<turi::ml_metadata,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::ml_metadata>::shared_ptr[abi:ne180100]<turi::ml_metadata,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<turi::ml_metadata>::shared_ptr[abi:ne180100]<turi::ml_metadata,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D937A58;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2182E4AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<turi::ml_metadata>::reset[abi:ne180100]((turi::ml_metadata **)va, 0);
  _Unwind_Resume(a1);
}

turi::ml_metadata *std::__shared_ptr_pointer<turi::ml_metadata *,std::shared_ptr<turi::ml_metadata>::__shared_ptr_default_delete<turi::ml_metadata,turi::ml_metadata>,std::allocator<turi::ml_metadata>>::__on_zero_shared(uint64_t a1)
{
  turi::ml_metadata *result;

  result = *(turi::ml_metadata **)(a1 + 24);
  if (result)
  {
    turi::ml_metadata::~ml_metadata(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::ml_metadata *,std::shared_ptr<turi::ml_metadata>::__shared_ptr_default_delete<turi::ml_metadata,turi::ml_metadata>,std::allocator<turi::ml_metadata>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::ml_metadata::~ml_metadata(turi::ml_metadata *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 240);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 80, *((char **)this + 11));
  v4 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v4 = (void **)this;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

turi::ml_metadata *std::unique_ptr<turi::ml_metadata>::reset[abi:ne180100](turi::ml_metadata **a1, turi::ml_metadata *a2)
{
  turi::ml_metadata *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::ml_metadata::~ml_metadata(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void *turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
LABEL_4:
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)(v4 + v6);
    v10 = v7;
    *(_QWORD *)(a1 + 24) = v6 + 8;
    goto LABEL_5;
  }
  std::istream::read();
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    goto LABEL_4;
  std::istream::read();
  v7 = 0;
LABEL_5:
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a2, v11, v7);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return (void *)std::istream::read();
  result = memcpy(*a2, (const void *)(v8 + *(_QWORD *)(a1 + 24)), 8 * v11 * v10);
  *(_QWORD *)(a1 + 24) += 8 * v11 * v10;
  return result;
}

_QWORD *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  turi::flexible_type::flexible_type((turi::flexible_type *)(v5 + 3), a3);
  return a1;
}

void sub_2182E4D20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void __cxx_global_var_init_35_0()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_linear_regression_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_2182E50A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

BOOL turi::$_1::__invoke(turi::$_1 *this)
{
  return (uint64_t)this > 0;
}

{
  return (uint64_t)this > 0;
}

BOOL turi::$_2::__invoke(turi::$_2 *this)
{
  return (uint64_t)this > 0;
}

BOOL turi::$_3::__invoke(uint64_t this)
{
  return this >= 1 && (this & (this - 1)) == 0;
}

BOOL turi::$_4::__invoke(turi::$_4 *this)
{
  return (uint64_t)this > 0;
}

BOOL turi::$_5::__invoke(turi::$_5 *this)
{
  return (uint64_t)this > 0;
}

void _GLOBAL__sub_I_sgraph_constants_cpp()
{
  turi::thread *v0;
  void **v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void *__p[2];
  char v14;
  void *v15;
  void *v16;
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  v0 = (turi::thread *)__cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  turi::SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS = turi::thread::cpu_count(v0);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_TRIPLE_APPLY_LOCK_ARRAY_SIZE");
  v15 = &unk_24D921BF0;
  v16 = turi::$_0::__invoke;
  v17 = &v15;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_TRIPLE_APPLY_LOCK_ARRAY_SIZE__register__instance, __p, &turi::SGRAPH_TRIPLE_APPLY_LOCK_ARRAY_SIZE, 1, &v15);
  v1 = v17;
  if (v17 == &v15)
  {
    v2 = 4;
    v1 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v2 = 5;
  }
  (*((void (**)(void))*v1 + v2))();
LABEL_6:
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_BATCH_TRIPLE_APPLY_LOCK_ARRAY_SIZE");
  v15 = &unk_24D921BF0;
  v16 = turi::$_1::__invoke;
  v17 = &v15;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_BATCH_TRIPLE_APPLY_LOCK_ARRAY_SIZE__register__instance, __p, &turi::SGRAPH_BATCH_TRIPLE_APPLY_LOCK_ARRAY_SIZE, 1, &v15);
  v3 = v17;
  if (v17 == &v15)
  {
    v4 = 4;
    v3 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_13;
    v4 = 5;
  }
  (*((void (**)(void))*v3 + v4))();
LABEL_13:
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_TRIPLE_APPLY_EDGE_BATCH_SIZE");
  v15 = &unk_24D921BF0;
  v16 = turi::$_2::__invoke;
  v17 = &v15;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_TRIPLE_APPLY_EDGE_BATCH_SIZE__register__instance, __p, &turi::SGRAPH_TRIPLE_APPLY_EDGE_BATCH_SIZE, 1, &v15);
  v5 = v17;
  if (v17 == &v15)
  {
    v6 = 4;
    v5 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_20;
    v6 = 5;
  }
  (*((void (**)(void))*v5 + v6))();
LABEL_20:
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_DEFAULT_NUM_PARTITIONS");
  v15 = &unk_24D921BF0;
  v16 = turi::$_3::__invoke;
  v17 = &v15;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_DEFAULT_NUM_PARTITIONS__register__instance, __p, &turi::SGRAPH_DEFAULT_NUM_PARTITIONS, 1, &v15);
  v7 = v17;
  if (v17 == &v15)
  {
    v8 = 4;
    v7 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_27;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_27:
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_INGRESS_VID_BUFFER_SIZE");
  v15 = &unk_24D921BF0;
  v16 = turi::$_4::__invoke;
  v17 = &v15;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_INGRESS_VID_BUFFER_SIZE__register__instance, __p, &turi::SGRAPH_INGRESS_VID_BUFFER_SIZE, 1, &v15);
  v9 = v17;
  if (v17 == &v15)
  {
    v10 = 4;
    v9 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_34;
    v10 = 5;
  }
  (*((void (**)(void))*v9 + v10))();
LABEL_34:
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS");
  v15 = &unk_24D921BF0;
  v16 = turi::$_5::__invoke;
  v17 = &v15;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS__register__instance, __p, &turi::SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS, 1, &v15);
  v11 = v17;
  if (v17 == &v15)
  {
    v12 = 4;
    v11 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v12 = 5;
  }
  (*((void (**)(void))*v11 + v12))();
LABEL_41:
  if (v14 < 0)
    operator delete(__p[0]);
}

void sub_2182E555C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2182E5758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_11()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sgraph_fast_triple_apply_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::save_sgraph_to_json(turi::sgraph *a1, uint64_t a2)
{
  internalJSONNode *v3;
  const internalJSONNode *v4;
  internalJSONNode *v5;
  unint64_t v6;
  internalJSONNode *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t *i;
  std::string::size_type size;
  std::string::size_type v15;
  const internalJSONNode *v16;
  internalJSONNode *v17;
  unint64_t v18;
  internalJSONNode *v19;
  internalJSONNode *v20;
  uint64_t v21;
  internalJSONNode *v22;
  const internalJSONNode *v23;
  internalJSONNode *v24;
  unint64_t v25;
  internalJSONNode *v26;
  std::string::size_type v27;
  uint64_t *v28;
  uint64_t *v29;
  std::string::size_type v30;
  const internalJSONNode *v31;
  internalJSONNode *v32;
  unint64_t v33;
  internalJSONNode *v34;
  internalJSONNode *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const internalJSONNode *v39;
  unint64_t v40;
  uint64_t v41;
  const internalJSONNode *v42;
  unint64_t v43;
  uint64_t v44;
  const internalJSONNode *v45;
  unint64_t v46;
  uint64_t v47;
  jsonSingletonEMPTY_JSON_STRING *v48;
  std::string *v49;
  std::string::size_type v50;
  internalJSONNode *v51;
  uint64_t v52;
  internalJSONNode *v53;
  internalJSONNode *v54;
  uint64_t v55;
  internalJSONNode *v56;
  internalJSONNode *v57;
  uint64_t v58;
  __int128 *Value;
  __int128 v61;
  std::string *v62;
  _QWORD *v63[2];
  std::string v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  std::string v68;
  internalJSONNode *v69;
  std::string v70;
  internalJSONNode *v71;
  std::string v72;
  std::string __str;
  void *v74;
  _DWORD v75[18];
  uint64_t v76;
  int v77;
  void *__p;
  char v79;
  _QWORD v80[20];

  v80[19] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v72 = *(std::string *)a2;
  turi::general_ofstream::general_ofstream(&v74, (uint64_t)&v72);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (!turi::general_ofstream::good((turi::general_ofstream *)&v74))
    turi::save_sgraph_to_json(turi::sgraph const&,std::string)::$_0::operator()();
  internalJSONNode::newInternal((internalJSONNode *)4);
  v71 = v3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vertices");
  v5 = v71;
  v6 = *((_QWORD *)v71 + 10);
  if (v6 >= 2)
  {
    *((_QWORD *)v71 + 10) = v6 - 1;
    internalJSONNode::newInternal(v5, v4);
    v5 = v7;
  }
  v71 = v5;
  std::string::operator=((std::string *)((char *)v5 + 8), &__str);
  *((_BYTE *)v5 + 32) = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v70.__r_.__value_.__r.__words[0] = 0;
  v68.__r_.__value_.__r.__words[0] = *((_QWORD *)a1 + 4);
  if (!v68.__r_.__value_.__r.__words[0])
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v68;
    turi::sgraph::vertex_group(unsigned long)const::{lambda(void)#1}::operator()();
  }
  v8 = (uint64_t *)*((_QWORD *)a1 + 8);
  turi::sgraph::get_vertex_fields(a1, 0, &v70);
  v9 = *v8;
  v10 = v8[1];
  if (*v8 != v10)
  {
    do
    {
      memset(&__str, 0, sizeof(__str));
      turi::sframe::get_reader((turi::sframe *)v9, (turi::sframe_reader **)&v68);
      if (*(_BYTE *)(v9 + 288))
        v11 = *(_QWORD *)(v9 + 32);
      else
        v11 = 0;
      (*(void (**)(std::string::size_type, _QWORD, uint64_t, std::string *))(*(_QWORD *)v68.__r_.__value_.__l.__data_
                                                                                     + 48))(v68.__r_.__value_.__r.__words[0], 0, v11, &__str);
      v12 = v68.__r_.__value_.__r.__words[0];
      v68.__r_.__value_.__r.__words[0] = 0;
      if (v12)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v12 + 8))(v12);
      size = __str.__r_.__value_.__l.__size_;
      for (i = (uint64_t *)__str.__r_.__value_.__r.__words[0]; i != (uint64_t *)size; i += 3)
      {
        internalJSONNode::newInternal((internalJSONNode *)5);
        v68.__r_.__value_.__r.__words[0] = v15;
        turi::sframe_row_to_json((uint64_t *)&v70, i, (internalJSONNode **)&v68);
        v17 = v71;
        v18 = *((_QWORD *)v71 + 10);
        if (v18 >= 2)
        {
          *((_QWORD *)v71 + 10) = v18 - 1;
          internalJSONNode::newInternal(v17, v16);
        }
        v71 = v17;
        internalJSONNode::push_back(v17, (uint64_t *)&v68);
        v20 = (internalJSONNode *)v68.__r_.__value_.__r.__words[0];
        if (v68.__r_.__value_.__r.__words[0])
        {
          v21 = *(_QWORD *)(v68.__r_.__value_.__r.__words[0] + 80) - 1;
          *(_QWORD *)(v68.__r_.__value_.__r.__words[0] + 80) = v21;
          if (!v21)
            internalJSONNode::deleteInternal(v20, v19);
        }
      }
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
      v9 += 296;
    }
    while (v9 != v10);
  }
  internalJSONNode::newInternal((internalJSONNode *)4);
  v69 = v22;
  std::string::basic_string[abi:ne180100]<0>(&__str, "edges");
  v24 = v69;
  v25 = *((_QWORD *)v69 + 10);
  if (v25 >= 2)
  {
    *((_QWORD *)v69 + 10) = v25 - 1;
    internalJSONNode::newInternal(v24, v23);
    v24 = v26;
  }
  v69 = v24;
  std::string::operator=((std::string *)((char *)v24 + 8), &__str);
  *((_BYTE *)v24 + 32) = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  turi::sgraph::get_edge_fields(a1, 0, 0, &v68);
  v65 = 0;
  v66 = 0;
  v67 = 0;
  memset(&v64, 0, sizeof(v64));
  v63[0] = 0;
  v63[1] = 0;
  v62 = (std::string *)v63;
  turi::sgraph::get_edges((unint64_t *)a1, (uint64_t *)&v65, &v64, &v62, 0, 0, (turi::sframe *)&__str);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v62, v63[0]);
  v62 = &v64;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  v65 = 0;
  v66 = 0;
  v67 = 0;
  turi::sframe::get_reader((turi::sframe *)&__str, (turi::sframe_reader **)&v64);
  (*(void (**)(void))(*(_QWORD *)v64.__r_.__value_.__l.__data_ + 48))();
  v27 = v64.__r_.__value_.__r.__words[0];
  v64.__r_.__value_.__r.__words[0] = 0;
  if (v27)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v27 + 8))(v27);
  v28 = v65;
  v29 = v66;
  while (v28 != v29)
  {
    internalJSONNode::newInternal((internalJSONNode *)5);
    v64.__r_.__value_.__r.__words[0] = v30;
    turi::sframe_row_to_json((uint64_t *)&v68, v28, (internalJSONNode **)&v64);
    v32 = v69;
    v33 = *((_QWORD *)v69 + 10);
    if (v33 >= 2)
    {
      *((_QWORD *)v69 + 10) = v33 - 1;
      internalJSONNode::newInternal(v32, v31);
    }
    v69 = v32;
    internalJSONNode::push_back(v32, (uint64_t *)&v64);
    v35 = (internalJSONNode *)v64.__r_.__value_.__r.__words[0];
    if (v64.__r_.__value_.__r.__words[0])
    {
      v36 = *(_QWORD *)(v64.__r_.__value_.__r.__words[0] + 80) - 1;
      *(_QWORD *)(v64.__r_.__value_.__r.__words[0] + 80) = v36;
      if (!v36)
        internalJSONNode::deleteInternal(v35, v34);
    }
    v28 += 3;
  }
  internalJSONNode::newInternal((internalJSONNode *)5);
  v38 = v37;
  std::string::basic_string[abi:ne180100]<0>(&v64, "graph");
  v40 = *(_QWORD *)(v38 + 80);
  if (v40 >= 2)
  {
    *(_QWORD *)(v38 + 80) = v40 - 1;
    internalJSONNode::newInternal((internalJSONNode *)v38, v39);
    v38 = v41;
  }
  std::string::operator=((std::string *)(v38 + 8), &v64);
  *(_BYTE *)(v38 + 32) = 1;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  v43 = *(_QWORD *)(v38 + 80);
  if (v43 >= 2)
  {
    *(_QWORD *)(v38 + 80) = v43 - 1;
    internalJSONNode::newInternal((internalJSONNode *)v38, v42);
    v38 = v44;
  }
  internalJSONNode::push_back((_DWORD *)v38, (uint64_t *)&v71);
  v46 = *(_QWORD *)(v38 + 80);
  if (v46 >= 2)
  {
    *(_QWORD *)(v38 + 80) = v46 - 1;
    internalJSONNode::newInternal((internalJSONNode *)v38, v45);
    v38 = v47;
  }
  v48 = (jsonSingletonEMPTY_JSON_STRING *)internalJSONNode::push_back((_DWORD *)v38, (uint64_t *)&v69);
  if ((*(_BYTE *)v38 & 0xFE) == 4)
  {
    memset(&v64, 0, sizeof(v64));
    std::string::reserve(&v64, 0x800uLL);
    internalJSONNode::Write((std::string *)v38, 0, 1, &v64);
  }
  else
  {
    Value = jsonSingletonEMPTY_JSON_STRING::getValue(v48);
    if (*((char *)Value + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)Value, *((_QWORD *)Value + 1));
    }
    else
    {
      v61 = *Value;
      v64.__r_.__value_.__r.__words[2] = *((_QWORD *)Value + 2);
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v61;
    }
  }
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &v64;
  else
    v49 = (std::string *)v64.__r_.__value_.__r.__words[0];
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  else
    v50 = v64.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)v49, v50);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (!turi::general_ofstream::good((turi::general_ofstream *)&v74))
    turi::save_sgraph_to_json(turi::sgraph const&,std::string)::$_1::operator()();
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(v75, 8, v75, 16, (turi::fileio_impl::general_fstream_sink *)&v76, &v77);
  v52 = *(_QWORD *)(v38 + 80) - 1;
  *(_QWORD *)(v38 + 80) = v52;
  if (!v52)
    internalJSONNode::deleteInternal((internalJSONNode *)v38, v51);
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  turi::sframe::~sframe((turi::sframe *)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v54 = v69;
  if (v69)
  {
    v55 = *((_QWORD *)v69 + 10) - 1;
    *((_QWORD *)v69 + 10) = v55;
    if (!v55)
      internalJSONNode::deleteInternal(v54, v53);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v57 = v71;
  if (v71)
  {
    v58 = *((_QWORD *)v71 + 10) - 1;
    *((_QWORD *)v71 + 10) = v58;
    if (!v58)
      internalJSONNode::deleteInternal(v57, v56);
  }
  v74 = &unk_24D920F98;
  v80[0] = &unk_24D920FC0;
  if (v79 < 0)
    operator delete(__p);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)v75);
  return MEMORY[0x219A198F4](v80);
}

void sub_2182E5F48(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __cxa_call_unexpected(a1);
  _Unwind_Resume(a1);
}

void turi::save_sgraph_to_csv(turi::sgraph *a1, uint64_t a2)
{
  size_t v4;
  std::string *v5;
  const void *v6;
  std::string::size_type v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  unint64_t i;
  uint64_t *v17;
  uint64_t *v18;
  void **v19;
  size_t v20;
  std::string *v21;
  const void *v22;
  std::string::size_type v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t j;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  BOOL v35;
  void *v36;
  turi::sframe_reader *v37;
  void **v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t *v45;
  void *v46[2];
  unsigned __int8 v47;
  std::string v48[11];
  std::string v49;
  std::string v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  turi::sframe_reader *v54;
  std::string v55;
  std::string v56;
  std::string v57;
  int v58;
  void *v59;
  char v60;
  std::string *v61;
  _QWORD *v62;
  uint64_t v63;
  _BYTE v64[120];
  int v65;
  void *__p;
  char v67;
  void *v68;
  _BYTE v69[24];
  uint64_t v70;
  unint64_t v71;
  __int128 *v72;
  __int128 *v73;
  char v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77[8];
  _BYTE v78[120];
  int v79;
  void *v80;
  char v81;
  void *v82;
  _BYTE v83[24];
  uint64_t v84;
  unint64_t v85;
  __int128 *v86;
  __int128 *v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  turi::fileio::get_file_status(a2, (uint64_t)&v58);
  switch(v58)
  {
    case 0:
      if ((turi::fileio::create_directory(a2) & 1) == 0)
      {
        v75 = (unsigned __int8 *)&v58;
        turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_0::operator()();
      }
      return;
    case 1:
      turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_1::operator()();
    case 2:
      break;
    case 3:
      v75 = (unsigned __int8 *)&v58;
      turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_2::operator()();
    default:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v75);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Error: Unknown. ", 16);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph_io.cpp", 104);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" at ", 4);
      std::ostream::operator<<();
      v61 = (std::string *)&v75;
      turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_3::operator()();
  }
  v76 = 0;
  v75 = 0;
  v77[0] = 0;
  v63 = 0;
  v62 = 0;
  v61 = (std::string *)&v62;
  turi::sgraph::get_vertices(a1, &v75, &v61, 0, (turi::sframe *)v83);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v61, v62);
  v61 = (std::string *)&v75;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  if (*(char *)(a2 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = &v57;
  std::string::basic_string[abi:ne180100]((uint64_t)&v57, v4 + 13);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const void *)a2;
    else
      v6 = *(const void **)a2;
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "/vertices.csv");
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v56, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v56 = v57;
  turi::general_ofstream::general_ofstream(&v75, (uint64_t)&v56);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (!turi::general_ofstream::good((turi::general_ofstream *)&v75))
    turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_4::operator()();
  memset(&v55, 0, sizeof(v55));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v55, v86, v87, 0xAAAAAAAAAAAAAAABLL * (((char *)v87 - (char *)v86) >> 3));
  v7 = v55.__r_.__value_.__r.__words[0];
  if (v55.__r_.__value_.__l.__size_ != v55.__r_.__value_.__r.__words[0])
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v7 + v8;
      v11 = *(char *)(v10 + 23);
      if (v11 >= 0)
        v12 = v10;
      else
        v12 = *(_QWORD *)v10;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(v10 + 23);
      else
        v13 = *(_QWORD *)(v10 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, v12, v13);
      if (v9 == v84 - 1)
        v14 = "\n";
      else
        v14 = ",";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)v14, 1);
      ++v9;
      v7 = v55.__r_.__value_.__r.__words[0];
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v55.__r_.__value_.__l.__size_ - v55.__r_.__value_.__r.__words[0]) >> 3));
  }
  turi::sframe::get_reader((turi::sframe *)v83, &v54);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v15 = (char *)operator new[]();
  v45 = (unint64_t *)a1;
  if (v88 && v85)
  {
    for (i = 0; i < v85; i -= 0x5555555555555555 * (((char *)v19 - (char *)v17) >> 3))
    {
      (*(void (**)(turi::sframe_reader *, unint64_t, unint64_t, uint64_t **))(*(_QWORD *)v54 + 48))(v54, i, i + 1024, &v51);
      v17 = v51;
      v18 = v52;
      v19 = (void **)v51;
      if (v51 != v52)
      {
        do
        {
          if (turi::sframe_row_to_csv(v17, v15, 0x80000uLL) == 0x80000)
          {
            MEMORY[0x219A199F0](v15, 0x1000C8077774924);
            boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v76, 8, &v76, 16, (turi::fileio_impl::general_fstream_sink *)v78, &v79);
            turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_5::operator()();
          }
          std::ostream::write();
          v17 += 3;
        }
        while (v17 != v18);
        v17 = v51;
        v19 = (void **)v52;
      }
      if (!v88)
        break;
    }
  }
  else
  {
    v17 = v51;
    v19 = (void **)v52;
  }
  while (v19 != (void **)v17)
  {
    v19 -= 3;
    v61 = (std::string *)v19;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  }
  v52 = v17;
  if (!turi::general_ofstream::good((turi::general_ofstream *)&v75))
  {
    MEMORY[0x219A199F0](v15, 0x1000C8077774924);
    turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_6::operator()();
  }
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v76, 8, &v76, 16, (turi::fileio_impl::general_fstream_sink *)v78, &v79);
  v62 = 0;
  v61 = 0;
  v63 = 0;
  memset(v48, 0, 24);
  *(_OWORD *)&v50.__r_.__value_.__r.__words[1] = 0uLL;
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50.__r_.__value_.__l.__size_;
  turi::sgraph::get_edges(v45, (uint64_t *)&v61, v48, &v50, 0, 0, (turi::sframe *)v69);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v50, (_QWORD *)v50.__r_.__value_.__l.__size_);
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  v48[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
  if (*(char *)(a2 + 23) >= 0)
    v20 = *(unsigned __int8 *)(a2 + 23);
  else
    v20 = *(_QWORD *)(a2 + 8);
  v21 = &v50;
  std::string::basic_string[abi:ne180100]((uint64_t)&v50, v20 + 10);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if (v20)
  {
    if (*(char *)(a2 + 23) >= 0)
      v22 = (const void *)a2;
    else
      v22 = *(const void **)a2;
    memmove(v21, v22, v20);
  }
  strcpy((char *)v21 + v20, "/edges.csv");
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v49, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    v49 = v50;
  turi::general_ofstream::general_ofstream(&v61, (uint64_t)&v49);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (!turi::general_ofstream::good((turi::general_ofstream *)&v61))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v48);
    std::operator+<char>();
    if ((v47 & 0x80u) == 0)
      v38 = v46;
    else
      v38 = (void **)v46[0];
    if ((v47 & 0x80u) == 0)
      v39 = v47;
    else
      v39 = (uint64_t)v46[1];
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48[0].__r_.__value_.__r.__words[2], (uint64_t)v38, v39);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)". ", 2);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph_io.cpp", 104);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" at ", 4);
    std::ostream::operator<<();
    if ((char)v47 < 0)
      operator delete(v46[0]);
    v46[0] = v48;
    turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_7::operator()();
  }
  memset(v48, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v48, v72, v73, 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (char *)v72) >> 3));
  v23 = v48[0].__r_.__value_.__r.__words[0];
  if (v48[0].__r_.__value_.__l.__size_ != v48[0].__r_.__value_.__r.__words[0])
  {
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = v23 + v24;
      v27 = *(char *)(v26 + 23);
      if (v27 >= 0)
        v28 = v26;
      else
        v28 = *(_QWORD *)v26;
      if (v27 >= 0)
        v29 = *(unsigned __int8 *)(v26 + 23);
      else
        v29 = *(_QWORD *)(v26 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, v28, v29);
      if (v25 == v70 - 1)
        v30 = "\n";
      else
        v30 = ",";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)v30, 1);
      ++v25;
      v23 = v48[0].__r_.__value_.__r.__words[0];
      v24 += 24;
    }
    while (v25 < 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v48[0].__r_.__value_.__l.__size_ - v48[0].__r_.__value_.__r.__words[0]) >> 3));
  }
  turi::sframe::get_reader((turi::sframe *)v69, (turi::sframe_reader **)v46);
  if (v74 && v71)
  {
    for (j = 0; j < v71; j -= 0x5555555555555555 * (v34 - v32))
    {
      (*(void (**)(void *, unint64_t, unint64_t, uint64_t **))(*(_QWORD *)v46[0] + 48))(v46[0], j, j + 1024, &v51);
      v32 = v51;
      v33 = v52;
      v34 = v51;
      if (v51 != v52)
      {
        do
        {
          if (turi::sframe_row_to_csv(v32, v15, 0x80000uLL) == 0x80000)
          {
            MEMORY[0x219A199F0](v15, 0x1000C8077774924);
            boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v62, 8, &v62, 16, (turi::fileio_impl::general_fstream_sink *)v64, &v65);
            turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_8::operator()();
          }
          std::ostream::write();
          v32 += 3;
        }
        while (v32 != v33);
        v32 = v51;
        v34 = v52;
      }
      if (!v74)
        break;
    }
  }
  v35 = turi::general_ofstream::good((turi::general_ofstream *)&v61);
  MEMORY[0x219A199F0](v15, 0x1000C8077774924);
  if (!v35)
    turi::save_sgraph_to_csv(turi::sgraph const&,std::string)::$_9::operator()();
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v62, 8, &v62, 16, (turi::fileio_impl::general_fstream_sink *)v64, &v65);
  v36 = v46[0];
  v46[0] = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  v46[0] = v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
  v61 = (std::string *)&unk_24D920F98;
  v68 = &unk_24D920FC0;
  if (v67 < 0)
    operator delete(__p);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)&v62);
  MEMORY[0x219A198F4](&v68);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  turi::sframe::~sframe((turi::sframe *)v69);
  v61 = (std::string *)&v51;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  v37 = v54;
  v54 = 0;
  if (v37)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v37 + 8))(v37);
  v61 = &v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  v75 = (unsigned __int8 *)&unk_24D920F98;
  v82 = &unk_24D920FC0;
  if (v81 < 0)
    operator delete(v80);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)&v76);
  MEMORY[0x219A198F4](&v82);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  turi::sframe::~sframe((turi::sframe *)v83);
  if (v60 < 0)
    operator delete(v59);
}

