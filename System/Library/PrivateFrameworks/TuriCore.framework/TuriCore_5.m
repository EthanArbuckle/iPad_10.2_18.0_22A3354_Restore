void turi::sarray_group_format_writer_v2<std::string>::close(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  if (!*(_BYTE *)(a1 + 8))
    turi::sarray_group_format_writer_v2<turi::flexible_type>::close(void)::{lambda(void)#1}::operator()();
  *(_BYTE *)(a1 + 8) = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    v2 = 0;
    do
    {
      if (*(_QWORD *)(a1 + 392) != *(_QWORD *)(a1 + 384))
      {
        v3 = 0;
        do
          turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, v3++, v2);
        while (v3 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3));
      }
      turi::v2_block_impl::block_writer::close_segment((turi::v2_block_impl::block_writer *)(a1 + 24), v2++);
    }
    while (v2 < *(_QWORD *)(a1 + 16));
  }
}

uint64_t turi::sarray_group_format_writer_v2<std::string>::write_segment(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, v8++, a2, v3 + v7);
      v3 = *a3;
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, v8++, a2, v3 + v7);
      v3 = *a3;
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  }
  return result;
}

void turi::sarray_group_format_writer_v2<std::string>::write_segment(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3);
  v8 = v7 + 1;
  v9 = v7[1];
  if (v9 >= v7[2])
  {
    v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, a4);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v7, a4);
    v10 = v9 + 24;
  }
  *v8 = v10;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 3) >= *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 32))
    turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, a2, a3);
}

{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  __int128 v20;
  std::__split_buffer<std::string> __v;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3;
  v10 = (uint64_t *)(v8 + 8);
  v9 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v8 + 16);
  if (v9 >= v11)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(_QWORD *)v8) >> 3);
    v15 = v14 + 1;
    if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(_QWORD *)v8) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v15;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v8 + 16);
    if (v17)
      v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v8 + 16, v17);
    else
      v18 = 0;
    v19 = v18 + v14;
    __v.__first_ = v18;
    __v.__begin_ = v19;
    __v.__end_cap_.__value_ = &v18[v17];
    v20 = *a4;
    v19->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    __v.__end_ = v19 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v8, &__v);
    v13 = *v10;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v12 = *a4;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v9 = v12;
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    v13 = v9 + 24;
    *v10 = v9 + 24;
  }
  *v10 = v13;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 3) >= *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 32))
    turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, a2, a3);
}

void sub_218089154(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_group_format_writer_v2<std::string>::write_segment()
{
  return assert_msg(0, "Cannot write to general SArray with sframe_rows");
}

void turi::sarray_group_format_writer_v2<std::string>::write_column(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    v8 = *(_QWORD *)(a1 + 384) + 56 * a2;
    v9 = (_QWORD *)(v8 + 32);
    v10 = (uint64_t *)(*(_QWORD *)(v8 + 8) + 24 * a3);
    v11 = v10 + 1;
    do
    {
      v12 = *v11;
      if (*v11 >= (unint64_t)v10[2])
      {
        v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v10, v4);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v10, v4);
        v13 = v12 + 24;
      }
      *v11 = v13;
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - *v10) >> 3) >= *v9)
        turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, a2, a3);
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
}

{
  __int128 *v4;
  __int128 *v5;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    v8 = *(_QWORD *)(a1 + 384);
    v9 = (uint64_t *)(*(_QWORD *)(v8 + 56 * a2 + 8) + 24 * a3);
    v10 = *(_QWORD *)(v8 + 56 * a2 + 32);
    v11 = v9 + 1;
    do
    {
      v12 = *v11;
      if (*v11 >= (unint64_t)v9[2])
      {
        v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v9, v4);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v9, v4);
        v13 = v12 + 24;
      }
      *v11 = v13;
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - *v9) >> 3) >= v10)
      {
        turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, a2, a3);
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 32);
      }
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
}

void turi::sarray_group_format_writer_v2<std::string>::flush_segment(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 392) != *(_QWORD *)(a1 + 384))
  {
    v4 = 0;
    v5 = 8;
    do
    {
      turi::sarray_group_format_writer_v2<std::string>::flush_block(a1, v4, a2);
      std::vector<std::string>::shrink_to_fit((std::vector<std::string> *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + v5)
                                                                         + 24 * a2));
      ++v4;
      v5 += 56;
    }
    while (v4 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3));
  }
}

void std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (turi::simple_spinlock *)*v2);
    operator delete(**a1);
  }
}

void std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, turi::simple_spinlock *a2)
{
  turi::simple_spinlock *v4;
  turi::simple_spinlock *v5;
  void **v6;

  v4 = *(turi::simple_spinlock **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = (turi::simple_spinlock *)((char *)v4 - 56);
      v6 = (void **)((char *)v4 - 48);
      std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      turi::simple_spinlock::~simple_spinlock(v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (turi::simple_spinlock *)(*a1 + 56 * a2));
  }
}

void std::vector<std::vector<std::string>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::string>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void turi::sarray_group_format_writer_v2<std::string>::open_segment(uint64_t a1, std::string::size_type a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  turi::v2_block_impl::block_writer *v10;
  uint64_t index_info;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  std::locale::__imp *locale;
  char *v17;
  const std::locale::facet *v18;
  __int128 v19;
  int v20;
  int *v21;
  file_logger *v22;
  file_logger *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  uint64_t v30;
  _QWORD *exception;
  _QWORD *v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::locale v36;
  uint64_t v37;
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  _DWORD v41[2];
  std::string __str;
  char v43[17];

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 797, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v36);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned __int8 *)(a1 + 8), "sarray not open");
  v10 = (turi::v2_block_impl::block_writer *)(a1 + 24);
  index_info = turi::v2_block_impl::block_writer::get_index_info(v10);
  if (*(char *)(index_info + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)index_info, *(_QWORD *)(index_info + 8));
  else
    __str = *(std::string *)index_info;
  *(_DWORD *)((char *)v41 + 3) = 0;
  v41[0] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v36);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  std::string::basic_string(&v35, &__str, 0, size - 5, (std::allocator<char> *)v43);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v35;
  else
    v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    v14 = v35.__r_.__value_.__l.__size_;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)".", 1);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  locale = v36.__locale_;
  v17 = (char *)&v36 + *((_QWORD *)v36.__locale_ - 3);
  if (*((_DWORD *)v17 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v36 + *((_QWORD *)v36.__locale_ - 3)));
    v18 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
    std::locale::~locale((std::locale *)&v35);
    locale = v36.__locale_;
  }
  *((_DWORD *)v17 + 36) = 48;
  *(_QWORD *)((char *)v38 + *((_QWORD *)locale - 3)) = 4;
  std::ostream::operator<<();
  std::stringbuf::str();
  v19 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
  v41[0] = v35.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v41 + 3) = *(_DWORD *)((char *)&v35.__r_.__value_.__r.__words[2] + 3);
  v20 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  v21 = (int *)global_logger();
  if (v21[169] > 1)
    goto LABEL_39;
  if (cppipc::must_cancel((cppipc *)v21))
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v22 = (file_logger *)global_logger();
  v23 = file_logger::start_stream(v22, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 810, 1);
  v24 = pthread_getspecific(*((_QWORD *)v23 + 74));
  if (v24 && *((_BYTE *)v24 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"Open segment ", 13);
  v25 = file_logger::operator<<<unsigned long>((uint64_t)v23);
  v26 = pthread_getspecific(*(_QWORD *)(v25 + 592));
  if (v26 && *((_BYTE *)v26 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)" for write on ", 14);
  if (v20 < 0)
  {
    std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
  }
  else
  {
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
    LODWORD(v34.__r_.__value_.__r.__words[2]) = v41[0];
    *(_DWORD *)((char *)&v34.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v41 + 3);
    *((_BYTE *)&v34.__r_.__value_.__s + 23) = v20;
  }
  v27 = file_logger::operator<<<std::string>(v25, (uint64_t)&v34);
  v28 = pthread_getspecific(*(_QWORD *)(v27 + 592));
  if (v28)
  {
    if (*((_BYTE *)v28 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(v28[2] - 24) + 16));
      v29 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale((std::locale *)&v35);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v27);
      if (*(_DWORD *)(v27 + 600) == 7)
      {
        __print_back_trace();
        v32 = __cxa_allocate_exception(8uLL);
        *v32 = "LOG_FATAL encountered";
        __cxa_throw(v32, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_40;
  }
  else
  {
LABEL_39:
    if ((v20 & 0x80000000) == 0)
    {
LABEL_40:
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
      LODWORD(v33.__r_.__value_.__r.__words[2]) = v41[0];
      *(_DWORD *)((char *)&v33.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v41 + 3);
      *((_BYTE *)&v33.__r_.__value_.__s + 23) = v20;
      goto LABEL_43;
    }
  }
  std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
LABEL_43:
  turi::v2_block_impl::block_writer::open_segment(v10, a2, (std::string::size_type)&v33);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v36.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
  v30 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::locale *)((char *)&v36 + *((_QWORD *)v36.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
  v37 = v30;
  v38[0] = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete((void *)v38[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v40);
  if (v20 < 0)
    operator delete((void *)v19);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_218089AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  std::locale::~locale(&a22);
  if (a21 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  if (v29 < 0)
    operator delete(v28);
  if (*(char *)(v30 - 105) < 0)
    operator delete(*(void **)(v30 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 56 * a2;
      do
      {
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 32) = 16;
        v7 += 56;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[56 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[56 * v11];
    v15 = &v14[56 * a2];
    do
    {
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = 16;
      v14 += 56;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer> &>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_218089D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 56;
      std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<std::string>::column_buffer,turi::sarray_group_format_writer_v2<std::string>::column_buffer const&>(a1, v7 - 56, v9);
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_218089E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<std::string>::column_buffer,turi::sarray_group_format_writer_v2<std::string>::column_buffer const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>((std::string *)(a2 + 8), *(__int128 ***)(a3 + 8), *(__int128 ***)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3));
  result = *(__n128 *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void sub_218089EBC(_Unwind_Exception *a1)
{
  turi::simple_spinlock *v1;

  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(std::string *result, __int128 **a2, __int128 **a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_218089F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *a4)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_218089FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::string>::column_buffer*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **i;
  void **v6;

  for (i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = i + 1;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)i);
    i = (void **)(*(_QWORD *)(a2 + 32) + 56);
  }
}

uint64_t std::__split_buffer<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer> &>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<turi::sarray_group_format_writer_v2<std::string>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::string>::column_buffer> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  turi::simple_spinlock *v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (turi::simple_spinlock *)(i - 56);
    *(_QWORD *)(a1 + 16) = i - 56;
    v6 = (void **)(i - 48);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock(v5);
  }
}

void std::vector<std::vector<std::string>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::string>>::~__split_buffer(&v15);
  }
}

void sub_21808A390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sarray_group_format_writer_v2<std::string>::flush_block(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v3 = *(_QWORD *)(a1 + 384);
  v4 = v3 + 56 * a2;
  v5 = (uint64_t *)(*(_QWORD *)(v4 + 8) + 24 * a3);
  v6 = v5[1];
  if (*v5 != v6)
  {
    v10 = v6 - *v5;
    v18 = -1;
    v19 = 0u;
    v20 = 0u;
    v21 = 0;
    v11 = turi::v2_block_impl::block_writer::write_block<std::string>((pthread_mutex_t *)(a1 + 24), a3, a2, v5, (uint64_t)&v18);
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(*(_QWORD *)(v4 + 8) + 24 * a3));
    do
    {
      while (*(_BYTE *)v4 == 1)
        ;
      do
        v12 = __ldaxr((unsigned __int8 *)v4);
      while (__stlxr(1u, (unsigned __int8 *)v4));
    }
    while (v12);
    v13 = (_QWORD *)(v3 + 56 * a2);
    v14 = v13[5] + v11;
    v15 = v13[6] - 0x5555555555555555 * (v10 >> 3);
    v13[5] = v14;
    v13[6] = v15;
    v16 = (unint64_t)(float)((float)(unint64_t)turi::SFRAME_DEFAULT_BLOCK_SIZE
                                  / (float)((float)(unint64_t)(v14 + 1) / (float)(unint64_t)(v15 + 1)));
    if (*(_QWORD *)"\b" > v16)
      v16 = *(_QWORD *)"\b";
    v13[4] = v16;
    v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) * *(_QWORD *)(a1 + 16);
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v17 < v16)
      v16 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v17;
    v13[4] = v16;
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK < v16)
      v16 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK;
    v13[4] = v16;
    __dmb(0xBu);
    *(_BYTE *)v4 = 0;
  }
}

uint64_t turi::v2_block_impl::block_writer::write_block<std::string>(pthread_mutex_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17[3];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;

  turi::buffer_pool<std::vector<char>>::get_new_buffer(a1, (uint64_t)&v22);
  v18 = 0u;
  v20 = 0;
  v19 = v22.n128_u64[0];
  *((_QWORD *)&v19 + 1) = *(_QWORD *)v22.n128_u64[0];
  v21 = *(_QWORD *)(v22.n128_u64[0] + 8) - *((_QWORD *)&v19 + 1);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)&v18, a4);
  *(_QWORD *)(a5 + 16) = v20;
  *(_QWORD *)(a5 + 24) = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v10 = *(_QWORD *)v22.n128_u64[0];
  v11 = *(_OWORD *)(a5 + 32);
  v17[1] = *(_OWORD *)(a5 + 16);
  v17[2] = v11;
  v17[0] = *(_OWORD *)a5;
  v12 = turi::v2_block_impl::block_writer::write_block((uint64_t)a1, a2, a3, v10, v17);
  turi::buffer_pool<std::vector<char>>::release_buffer(a1, &v22);
  v13 = (std::__shared_weak_count *)v22.n128_u64[1];
  if (v22.n128_u64[1])
  {
    v14 = (unint64_t *)(v22.n128_u64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_21808A660(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

uint64_t turi::buffer_pool<std::vector<char>>::get_new_buffer@<X0>(pthread_mutex_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t result;
  _QWORD *v15;

  v4 = &a1[1].__opaque[24];
  if (!*(_QWORD *)a1[2].__opaque)
  {
    pthread_mutex_lock(a1);
    v6 = *(_QWORD *)a1[1].__opaque;
    v5 = *(_QWORD *)&a1[1].__opaque[8];
    if (v5 != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v6 + v7 + 8);
        if (v9 && !*(_QWORD *)(v9 + 8))
        {
          std::deque<std::shared_ptr<std::vector<char>>>::push_back(v4, (__int128 *)(v6 + v7));
          v6 = *(_QWORD *)a1[1].__opaque;
          v5 = *(_QWORD *)&a1[1].__opaque[8];
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < (v5 - v6) >> 4);
    }
    pthread_mutex_unlock(a1);
    if (!*(_QWORD *)a1[2].__opaque)
      goto LABEL_15;
  }
  pthread_mutex_lock(a1);
  v10 = *(_QWORD *)a1[2].__opaque;
  if (v10)
  {
    v11 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)&a1[1].__opaque[32]
                                + (((unint64_t)(v10 + a1[2].__sig - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v10 + LOBYTE(a1[2].__sig) - 1));
    *(_OWORD *)a2 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::pop_back(v4);
  }
  result = pthread_mutex_unlock(a1);
  if (!v10)
  {
LABEL_15:
    v15 = operator new(0x30uLL);
    v15[2] = 0;
    *v15 = &unk_24D92C8D8;
    v15[1] = 0;
    v15[4] = 0;
    v15[5] = 0;
    *(_QWORD *)(a2 + 8) = v15;
    v15[3] = 0;
    *(_QWORD *)a2 = v15 + 3;
    pthread_mutex_lock(a1);
    if (a1[1].__sig > (unint64_t)((uint64_t)(*(_QWORD *)&a1[1].__opaque[8] - *(_QWORD *)a1[1].__opaque) >> 4))
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)a1[1].__opaque, (__int128 *)a2);
    return pthread_mutex_unlock(a1);
  }
  return result;
}

void sub_21808A7D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;

  pthread_mutex_unlock(v2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::buffer_pool<std::vector<char>>::release_buffer(pthread_mutex_t *a1, __n128 *a2)
{
  std::vector<char> *v3;
  std::vector<char>::pointer begin;

  v3 = (std::vector<char> *)a2->n128_u64[0];
  if (a2->n128_u64[0])
  {
    begin = v3->__begin_;
    v3->__end_ = v3->__begin_;
    if ((char *)(v3->__end_cap_.__value_ - begin) >= (char *)0x100000)
      std::vector<char>::shrink_to_fit(v3);
    if ((unint64_t)(*(_QWORD *)a1[2].__opaque
                          + ((uint64_t)(*(_QWORD *)&a1[1].__opaque[8] - *(_QWORD *)a1[1].__opaque) >> 4)) < a1[1].__sig)
    {
      pthread_mutex_lock(a1);
      std::deque<std::shared_ptr<std::vector<char>>>::push_back(&a1[1].__opaque[24], a2);
      pthread_mutex_unlock(a1);
    }
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](a2);
  }
}

void sub_21808A8DC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<std::vector<char>>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<std::vector<char>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<std::vector<char>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21808AC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92C8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92C8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<std::vector<char>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::vector<char>::shrink_to_fit(std::vector<char> *this)
{
  std::vector<char>::pointer end;
  std::vector<char>::pointer begin;
  char *v3;
  char *v5;
  char *v6;
  char v7;

  end = this->__end_;
  begin = this->__begin_;
  v3 = (char *)(end - this->__begin_);
  if ((char *)(this->__end_cap_.__value_ - this->__begin_) > v3)
  {
    if (end == begin)
    {
      v5 = (char *)(end - this->__begin_);
    }
    else
    {
      v5 = (char *)operator new(end - this->__begin_);
      v3 = &v3[(_QWORD)v5];
      v6 = &end[~(unint64_t)begin];
      do
      {
        v7 = *--end;
        (v6--)[(_QWORD)v5] = v7;
      }
      while (end != begin);
      begin = this->__begin_;
    }
    this->__begin_ = v5;
    this->__end_ = v3;
    this->__end_cap_.__value_ = v3;
    if (begin)
      operator delete(begin);
  }
}

__n128 std::deque<std::shared_ptr<std::vector<char>>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::shared_ptr<std::vector<char>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void std::vector<std::string>::shrink_to_fit(std::vector<std::string> *this)
{
  std::vector<std::string>::pointer begin;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  uint64_t v9;
  std::__split_buffer<std::string> __v;

  begin = this->__begin_;
  v2 = *(int64x2_t *)&this->__end_;
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)this->__begin_)), 3uLL);
  v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    p_end_cap = &this->__end_cap_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if ((std::vector<std::string>::pointer)v2.i64[0] == begin)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v4);
    }
    __v.__first_ = v8;
    __v.__begin_ = &v8[v5];
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v8[v9];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_21808AEF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21808AEE4);
}

void turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"__null", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 759, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21808B0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 760, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21808B2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24D92C928;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D92C928;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 176) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 176), 0, *(_QWORD *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target_type()
{
}

__n128 std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string&&)#1},std::allocator<std::string&&>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24D92C9B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string&&)#1},std::allocator<std::string&&>,void ()(std::string&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D92C9B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string&&)#1},std::allocator<std::string&&>,void ()(std::string&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 176) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 176), 0, *(_QWORD *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string&&)#1},std::allocator<std::string&&>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(std::string&&)#1},std::allocator<std::string&&>,void ()(std::string&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24D92CA48;
  return result;
}

void std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D92CA48;
}

uint64_t std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target_type()
{
}

void turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}::operator() const(turi::sframe_rows const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 771, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}::operator() const(turi::sframe_rows const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21808B660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  v4 = (void **)(a2 + 32);
  std::vector<turi::simple_spinlock>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a2 + 8);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::vector<turi::simple_spinlock>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)(v4 - 1));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<turi::groupby_aggregate_impl::group_descriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<turi::groupby_aggregate_impl::group_descriptor>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::groupby_aggregate_impl::group_descriptor>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 24);
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_21808B960(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::vector<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,0>(std::string *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(std::string *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_21808BA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string*>(uint64_t a1, _QWORD *a2, _QWORD *a3, std::string *this)
{
  std::string *v4;
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v12[3];
  char v13;
  std::string *v14;
  std::string *v15;

  v4 = this;
  v14 = this;
  v15 = this;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        v7 = *((_OWORD *)v6 + 2);
        v4->__r_.__value_.__r.__words[2] = v6[6];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v4 = ++v15;
      v6 = v9;
    }
    while (v9 != a3);
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_21808BB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4turi6sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x140uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi6sframeENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_21808BBA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4turi6sframeENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24D92C760;
  a1[1] = 0;
  turi::sframe::sframe((turi::sframe *)(a1 + 3));
  return a1;
}

void sub_21808BBEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D92CAC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D92CAC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t a2, turi::sframe_rows **a3)
{
  turi::sframe_rows *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  turi::sframe_rows *v11;
  uint64_t v12;

  turi::groupby_aggregate_impl::group_aggregate_container::init_tls(*(turi::groupby_aggregate_impl::group_aggregate_container **)(a1 + 8));
  v5 = *a3;
  if (v5)
  {
    if (*((_BYTE *)v5 + 24))
    {
      v11 = v5;
      v12 = 0;
    }
    else
    {
      turi::sframe_rows::ensure_unique(v5);
      v6 = *((unsigned __int8 *)v5 + 24);
      v11 = v5;
      v12 = 0;
      if (!v6)
        turi::sframe_rows::ensure_unique(v5);
    }
    if (*(_QWORD *)v5 != *((_QWORD *)v5 + 1))
    {
      v7 = **(_QWORD ***)v5;
      if (v7)
      {
        v8 = v7[1] - *v7;
        if (v8)
        {
          v9 = v8 >> 4;
          do
          {
            turi::groupby_aggregate_impl::group_aggregate_container::add(*(uint64_t **)(a1 + 8), (uint64_t)&v11, **(_QWORD **)(a1 + 16));
            ++v12;
          }
          while (v12 != v9);
        }
      }
    }
    turi::groupby_aggregate_impl::group_aggregate_container::flush_tls(*(turi::groupby_aggregate_impl::group_aggregate_container **)(a1 + 8));
  }
  return v5 == 0;
}

uint64_t std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9,std::allocator<turi::query_eval::groupby_aggregate(std::shared_ptr<turi::query_eval::planner_node> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::string> const&,std::vector<std::pair<std::vector<std::string>,std::shared_ptr<turi::group_aggregate_value>>> const&)::$_9>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

__n128 OUTLINED_FUNCTION_12_2(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

std::string *OUTLINED_FUNCTION_34_2(uint64_t a1, std::string *a2, const std::string::value_type *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return std::string::insert((std::string *)&a10, 0, a3);
}

void __cxx_global_var_init_16()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_groupby_aggregate_cpp()
{
  uint64_t i;
  const void *v2[3];
  _QWORD v3[4];

  v3[3] = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0)
      operator delete((void *)v2[i + 3]);
  }
  return __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_217E69000);
}

void sub_21808BF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0)
      operator delete(*(void **)(v15 + v17 + 24));
    v17 -= 24;
    if (v17 == -48)
      _Unwind_Resume(exception_object);
  }
}

uint64_t turi::query_eval::get_partition_keys(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  int v7;
  turi::thread *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  file_logger *v22;
  file_logger *started;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  void ***v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 *v39;
  unint64_t v40;
  double v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  unsigned int v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *exception;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void **v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  float v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void *v128[3];
  void ***v129;
  void **v130[4];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _BYTE v135[24];
  _BYTE *v136;
  _BYTE v137[13];
  _BYTE v138[56];
  _BYTE v139[24];
  _BYTE v140[24];
  void *v141;
  void *__p;
  __int128 v143;
  uint64_t v144;
  _QWORD v145[4];
  uint64_t v146;
  uint64_t v147[3];
  void *v148;
  void *v149;
  pthread_mutex_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  std::vector<BOOL>::vector(v128, a2);
  v7 = pthread_mutex_init(&v150, 0);
  v8 = (turi::thread *)assert_msg(v7 == 0, "Mutex create error %d", v7);
  v9 = turi::thread::cpu_count(v8);
  v10 = (std::__shared_weak_count *)a1[1];
  v126 = *a1;
  v127 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = turi::query_eval::infer_planner_node_length((uint64_t)&v126);
  v14 = v127;
  if (v127)
  {
    v15 = (unint64_t *)&v127->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v13 == -1)
    turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_1::operator()();
  v17 = turi::SFRAME_SORT_PIVOT_ESTIMATION_SAMPLE_SIZE;
  if (v13 < turi::SFRAME_SORT_PIVOT_ESTIMATION_SAMPLE_SIZE)
    v17 = v13;
  v125 = v17;
  v124 = (float)v17 / (float)v13;
  v123 = 0;
  turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch((uint64_t)&v143, (uint64_t)v128, 0.005);
  v120 = 0;
  v121 = 0;
  v122 = 0;
  if (v9)
  {
    v18 = v9;
    do
    {
      turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch((uint64_t)v137, (uint64_t)v128, 0.005);
      v19 = v121;
      if (v121 >= v122)
      {
        v20 = std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__push_back_slow_path<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>((uint64_t *)&v120, (uint64_t)v137);
      }
      else
      {
        std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>((uint64_t)&v122, v121, (uint64_t)v137);
        v20 = v19 + 176;
      }
      v121 = v20;
      if (__p)
        operator delete(__p);
      if (v141)
        operator delete(v141);
      v130[0] = (void **)v140;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](v130);
      v130[0] = (void **)v139;
      std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](v130);
      v130[0] = (void **)v138;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](v130);
      --v18;
    }
    while (v18);
  }
  v21 = (int *)global_logger();
  if (v21[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v21))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v22 = (file_logger *)global_logger();
    started = file_logger::start_stream(v22, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "create_quantile_sketch", 75, 1);
    v24 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v24 && *((_BYTE *)v24 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"Sampling pivot proportion: ", 27);
    v25 = file_logger::operator<<<float>((uint64_t)started);
    v26 = pthread_getspecific(*(_QWORD *)(v25 + 592));
    if (v26)
    {
      if (*((_BYTE *)v26 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(v26[2] - 24) + 16));
        v27 = std::locale::use_facet((const std::locale *)v137, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale((std::locale *)v137);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v25);
        if (*(_DWORD *)(v25 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v28 = (std::__shared_weak_count *)a1[1];
  v118 = *a1;
  v119 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v136 = 0;
  v31 = operator new(0x28uLL);
  *v31 = &off_24D92CB58;
  v31[1] = &v120;
  v31[2] = &v123;
  v31[3] = &v125;
  v31[4] = &v124;
  v136 = v31;
  memset(v130, 0, sizeof(v130));
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = 0u;
  BYTE11(v131) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v132, "");
  *((_QWORD *)&v133 + 1) = 0;
  v134 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v129, &v118, (uint64_t)v135, v9, (uint64_t *)v130);
  *(_QWORD *)v137 = (char *)&v133 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v137);
  if (SBYTE7(v133) < 0)
    operator delete((void *)v132);
  v32 = (void ***)v131;
  if ((void ***)v131 == &v130[1])
  {
    v33 = 4;
    v32 = &v130[1];
  }
  else
  {
    if (!(_QWORD)v131)
      goto LABEL_40;
    v33 = 5;
  }
  ((void (*)(void))(*v32)[v33])();
LABEL_40:
  v34 = v136;
  if (v136 == v135)
  {
    v35 = 4;
    v34 = v135;
    goto LABEL_44;
  }
  if (v136)
  {
    v35 = 5;
LABEL_44:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
  v36 = v119;
  if (v119)
  {
    v37 = (unint64_t *)&v119->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (__int128 *)v120;
  v40 = v121;
  if (v120 != (void **)v121)
  {
    do
    {
      turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::substream_finalize((uint64_t)v39);
      turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch((uint64_t)v137, v39);
      turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::combine((uint64_t)&v143, (uint64_t)v137);
      if (__p)
        operator delete(__p);
      if (v141)
        operator delete(v141);
      v129 = (void ***)v140;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
      v129 = (void ***)v139;
      std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
      v129 = (void ***)v138;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
      v39 += 11;
    }
    while (v39 != (__int128 *)v40);
  }
  v41 = ceil(1.0 / (*(double *)&v143 / 3.0) + 1.0 / (*(double *)&v143 / 3.0)) + 1.0;
  if ((unint64_t)v41 <= 2)
    v42 = 2;
  else
    v42 = (unint64_t)v41;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size((uint64_t)v145, v147, v42);
  v145[2] = *((_QWORD *)&v143 + 1);
  v145[3] = v143;
  std::allocate_shared[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&,void>(&v143, &v116);
  v129 = &v120;
  std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  if (v149)
    operator delete(v149);
  if (v148)
    operator delete(v148);
  v120 = (void **)v147;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v120);
  v120 = (void **)&v146;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v120);
  v120 = (void **)&v144;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](&v120);
  turi::mutex::~mutex(&v150);
  if (v128[0])
    operator delete(v128[0]);
  *(_QWORD *)&v143 = 0;
  DWORD2(v143) = 0;
  BYTE12(v143) = 0;
  v43 = a3 - 1;
  if (a3 != 1)
  {
    v44 = 0;
    v45 = 1.0 / (double)a3;
    do
    {
      v46 = v45 * (double)(unint64_t)++v44;
      if (v46 < 0.0)
        v46 = 0.0;
      if (v46 > 1.0)
        v46 = 1.0;
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::query(v116 + 48, (unint64_t)(v46 * (double)*(unint64_t *)(v116 + 64)), (uint64_t)v137);
      switch(BYTE12(v143))
      {
        case 2:
          v47 = (unint64_t *)v143;
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            v50 = v143;
            if ((_QWORD)v143)
            {
              if (*(char *)(v143 + 31) < 0)
                operator delete(*(void **)(v143 + 8));
              v51 = v50;
              v52 = 0x1012C404EF22A49;
              goto LABEL_112;
            }
          }
          break;
        case 3:
          v64 = (unint64_t *)v143;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
          {
            v67 = v143;
            if ((_QWORD)v143)
            {
              v68 = *(void **)(v143 + 8);
              if (v68)
              {
                *(_QWORD *)(v143 + 16) = v68;
                operator delete(v68);
              }
              v51 = v67;
              v52 = 0x1080C409938AC02;
              goto LABEL_112;
            }
          }
          break;
        case 4:
          v53 = (unint64_t *)v143;
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            v56 = v143;
            if ((_QWORD)v143)
            {
              v130[0] = (void **)(v143 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v130);
              goto LABEL_105;
            }
          }
          break;
        case 5:
          v69 = (unint64_t *)v143;
          do
          {
            v70 = __ldaxr(v69);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v69));
          if (!v71)
          {
            v56 = v143;
            if ((_QWORD)v143)
            {
              v130[0] = (void **)(v143 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v130);
LABEL_105:
              v51 = v56;
              v52 = 0x1020C405E66F15BLL;
              goto LABEL_112;
            }
          }
          break;
        case 8:
          v72 = (unint64_t *)v143;
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (!v74)
          {
            v75 = v143;
            if ((_QWORD)v143)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v143 + 16));
              v51 = v75;
              v63 = -235920773;
              goto LABEL_111;
            }
          }
          break;
        case 9:
          v57 = (unint64_t *)v143;
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = v143;
            if ((_QWORD)v143)
            {
              v61 = *(void **)(v143 + 48);
              if (v61)
              {
                *(_QWORD *)(v143 + 56) = v61;
                operator delete(v61);
              }
              v62 = *(void **)(v60 + 24);
              if (v62)
              {
                *(_QWORD *)(v60 + 32) = v62;
                operator delete(v62);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v60 + 8);
              v51 = v60;
              v63 = 2071181815;
LABEL_111:
              v52 = v63 | 0x1030C4000000000;
LABEL_112:
              MEMORY[0x219A19A08](v51, v52);
            }
          }
          break;
        default:
          break;
      }
      *(_QWORD *)((char *)&v143 + 5) = *(_QWORD *)&v137[5];
      *(_QWORD *)&v143 = *(_QWORD *)v137;
      BYTE12(v143) = v137[12];
      v76 = a4[1];
      if (v76 >= a4[2])
      {
        v81 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(a4, (char *)&v143);
      }
      else
      {
        *(_QWORD *)v76 = 0;
        *(_DWORD *)(v76 + 8) = 0;
        *(_BYTE *)(v76 + 12) = 0;
        if ((__int128 *)v76 != &v143)
        {
          v77 = v143;
          *(_QWORD *)(v76 + 5) = *(_QWORD *)((char *)&v143 + 5);
          *(_QWORD *)v76 = v77;
          v78 = BYTE12(v143);
          *(_BYTE *)(v76 + 12) = BYTE12(v143);
          if (v78 <= 9 && ((1 << v78) & 0x33C) != 0)
          {
            v79 = *(unint64_t **)v76;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 + 1, v79));
          }
        }
        v81 = v76 + 16;
      }
      a4[1] = v81;
    }
    while (v44 != v43);
    switch(BYTE12(v143))
    {
      case 2:
        v82 = (unint64_t *)v143;
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          v85 = v143;
          if ((_QWORD)v143)
          {
            if (*(char *)(v143 + 31) < 0)
              operator delete(*(void **)(v143 + 8));
            v86 = v85;
            v87 = 0x1012C404EF22A49;
            goto LABEL_163;
          }
        }
        break;
      case 3:
        v99 = (unint64_t *)v143;
        do
        {
          v100 = __ldaxr(v99);
          v101 = v100 - 1;
        }
        while (__stlxr(v101, v99));
        if (!v101)
        {
          v102 = v143;
          if ((_QWORD)v143)
          {
            v103 = *(void **)(v143 + 8);
            if (v103)
            {
              *(_QWORD *)(v143 + 16) = v103;
              operator delete(v103);
            }
            v86 = v102;
            v87 = 0x1080C409938AC02;
            goto LABEL_163;
          }
        }
        break;
      case 4:
        v88 = (unint64_t *)v143;
        do
        {
          v89 = __ldaxr(v88);
          v90 = v89 - 1;
        }
        while (__stlxr(v90, v88));
        if (!v90)
        {
          v91 = v143;
          if ((_QWORD)v143)
          {
            *(_QWORD *)v137 = v143 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v137);
            goto LABEL_156;
          }
        }
        break;
      case 5:
        v104 = (unint64_t *)v143;
        do
        {
          v105 = __ldaxr(v104);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, v104));
        if (!v106)
        {
          v91 = v143;
          if ((_QWORD)v143)
          {
            *(_QWORD *)v137 = v143 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v137);
LABEL_156:
            v86 = v91;
            v87 = 0x1020C405E66F15BLL;
            goto LABEL_163;
          }
        }
        break;
      case 8:
        v107 = (unint64_t *)v143;
        do
        {
          v108 = __ldaxr(v107);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v107));
        if (!v109)
        {
          v110 = v143;
          if ((_QWORD)v143)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v143 + 16));
            v86 = v110;
            v98 = -235920773;
            goto LABEL_162;
          }
        }
        break;
      case 9:
        v92 = (unint64_t *)v143;
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          v95 = v143;
          if ((_QWORD)v143)
          {
            v96 = *(void **)(v143 + 48);
            if (v96)
            {
              *(_QWORD *)(v143 + 56) = v96;
              operator delete(v96);
            }
            v97 = *(void **)(v95 + 24);
            if (v97)
            {
              *(_QWORD *)(v95 + 32) = v97;
              operator delete(v97);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v95 + 8);
            v86 = v95;
            v98 = 2071181815;
LABEL_162:
            v87 = v98 | 0x1030C4000000000;
LABEL_163:
            MEMORY[0x219A19A08](v86, v87);
          }
        }
        break;
      default:
        break;
    }
  }
  v111 = v117;
  if (v117)
  {
    v112 = (unint64_t *)&v117->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  return 0;
}

void sub_21808CAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::locale a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t v66;

  std::locale::~locale(&a44);
  a26 = (uint64_t)&a14;
  std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~streaming_quantile_sketch((uint64_t)&a66);
  turi::mutex::~mutex((pthread_mutex_t *)(v66 - 200));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::query_eval::sort_sframe_in_memory(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __n128 *v25;
  __n128 *v26;
  __n128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::string v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  _BYTE *v51;
  void *v52;
  __n128 *v53;
  __n128 *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *v60[3];
  _QWORD v61[3];
  _QWORD *v62;
  _BYTE v63[24];
  _BYTE *v64;
  _BYTE v65[24];
  _BYTE *v66;
  _BYTE v67[24];
  _BYTE *v68;
  _BYTE v69[24];
  _BYTE *v70;
  _BYTE v71[24];
  _BYTE *v72;
  _BYTE v73[32];
  __int128 v74;
  __int128 __p;
  __int128 v76;
  __int128 v77;
  _BYTE v78[32];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v10 = a1[1];
  v58 = *a1;
  v59 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  turi::query_eval::infer_planner_node_type(&v58, (unint64_t *)v60);
  v13 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = a1[1];
  v56 = *a1;
  v57 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  __p = 0u;
  memset(v73, 0, sizeof(v73));
  BYTE11(v74) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  *((_QWORD *)&v76 + 1) = 0;
  v77 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v56, (uint64_t)v73, (const turi::sframe *)v78);
  v50 = (char *)&v76 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (SBYTE7(v76) < 0)
    operator delete((void *)__p);
  v19 = (_QWORD *)v74;
  if ((_BYTE *)v74 == &v73[8])
  {
    v20 = 4;
    v19 = &v73[8];
    goto LABEL_18;
  }
  if ((_QWORD)v74)
  {
    v20 = 5;
LABEL_18:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  v21 = v57;
  if (v57)
  {
    v22 = (unint64_t *)&v57->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v53 = 0;
  v54 = 0;
  v55 = 0;
  turi::sframe::get_reader((turi::sframe *)v78, (turi::sframe_reader **)&v50);
  (*(void (**)(void))(*(_QWORD *)v50 + 48))();
  v24 = v50;
  v50 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  turi::query_eval::less_than_partial_function::less_than_partial_function(&v50, a3, a4);
  v25 = v53;
  v26 = v54;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v46, v50, (uint64_t)v51, (v51 - (_BYTE *)v50) >> 3);
  std::vector<BOOL>::vector(&v49, (uint64_t)&v52);
  v28 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 3));
  if (v26 == v25)
    v29 = 0;
  else
    v29 = v28;
  std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *,false>(v25, v26, (uint64_t)&v46, v29, 1, v27);
  if (v49)
    operator delete(v49);
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a5);
  v30 = *a5;
  std::string::basic_string[abi:ne180100]<0>(&v45, "");
  turi::sframe::open_for_write(v30, a2, v60, &v45, 1, 1);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v31 = (uint64_t)v53;
  v32 = (uint64_t)v54;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*a5 + 32))(v61, *a5, 0);
  std::move[abi:ne180100]<std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>(v31, v32, (uint64_t)v61, (uint64_t)v67);
  v33 = v72;
  if (v72 == v71)
  {
    v34 = 4;
    v33 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_40;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_40:
  v35 = v70;
  if (v70 == v69)
  {
    v36 = 4;
    v35 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_45;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_45:
  v37 = v68;
  if (v68 == v67)
  {
    v38 = 4;
    v37 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_50;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_50:
  v39 = v66;
  if (v66 == v65)
  {
    v40 = 4;
    v39 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_55;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_55:
  v41 = v64;
  if (v64 == v63)
  {
    v42 = 4;
    v41 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_60;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_60:
  v43 = v62;
  if (v62 == v61)
  {
    v44 = 4;
    v43 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_65;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_65:
  (*(void (**)(uint64_t))(*(_QWORD *)*a5 + 40))(*a5);
  if (v52)
    operator delete(v52);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  v50 = &v53;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  turi::sframe::~sframe((turi::sframe *)v78);
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
}

void sub_21808D270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a35);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v71);
  turi::query_eval::less_than_partial_function::~less_than_partial_function((turi::query_eval::less_than_partial_function *)&a19);
  a19 = (uint64_t)&a25;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  turi::sframe::~sframe((turi::sframe *)&a71);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::less_than_partial_function::~less_than_partial_function(turi::query_eval::less_than_partial_function *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
    operator delete(v2);
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

_QWORD *std::move[abi:ne180100]<std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v26, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v28, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v30, a3 + 64);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v39, (uint64_t)v26);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v41, (uint64_t)v28);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v30);
  std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v39, &v32);
  v8 = v44;
  if (v44 == v43)
  {
    v9 = 4;
    v8 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v42;
  if (v42 == v41)
  {
    v11 = 4;
    v10 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = v40;
  if (v40 == v39)
  {
    v13 = 4;
    v12 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_16;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_16:
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a4, (uint64_t)v33);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a4 + 32, (uint64_t)v35);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a4 + 64, (uint64_t)v37);
  v14 = v38;
  if (v38 == v37)
  {
    v15 = 4;
    v14 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_21;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_21:
  v16 = v36;
  if (v36 == v35)
  {
    v17 = 4;
    v16 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_26;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_26:
  v18 = v34;
  if (v34 == v33)
  {
    v19 = 4;
    v18 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  v20 = v31;
  if (v31 == v30)
  {
    v21 = 4;
    v20 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_36;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_36:
  v22 = v29;
  if (v29 == v28)
  {
    v23 = 4;
    v22 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_41;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_41:
  result = v27;
  if (v27 == v26)
  {
    v25 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v25 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
}

void sub_21808D688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v9 - 168));
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::sort(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unint64_t **a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int *v7;
  file_logger *v8;
  file_logger *started;
  _QWORD *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *i;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  char *v55;
  turi::thread *v56;
  unint64_t *v57;
  unint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  unint64_t v62;
  turi::thread *v63;
  unint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  int *v71;
  file_logger *v72;
  file_logger *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  const std::locale::facet *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *locale;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  int *v111;
  file_logger *v112;
  file_logger *v113;
  _QWORD *v114;
  _QWORD *v115;
  const std::locale::facet *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 v126;
  unint64_t *v127;
  unint64_t v128;
  int *v129;
  file_logger *v130;
  file_logger *v131;
  _QWORD *v132;
  _QWORD *v133;
  const std::locale::facet *v134;
  int *v135;
  file_logger *v136;
  file_logger *v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  timeval v141;
  uint64_t v142;
  _QWORD *v143;
  const std::locale::facet *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  uint64_t v150;
  __int128 *v151;
  uint64_t v152;
  std::locale *v153;
  uint64_t v154;
  unint64_t v155;
  turi::thread *v156;
  uint64_t v157;
  turi::thread *v158;
  unint64_t v159;
  turi::thread *v160;
  std::vector<std::string>::size_type v161;
  std::vector<std::string> *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  std::string *v166;
  std::locale *v167;
  uint64_t v168;
  std::string *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  void **v174;
  void **v175;
  unint64_t v176;
  std::locale::id *v177;
  int *v178;
  file_logger *v179;
  file_logger *v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  const std::locale::facet *v186;
  unint64_t *v187;
  unint64_t v188;
  int *v189;
  file_logger *v190;
  file_logger *v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  const std::locale::facet *v195;
  unint64_t *v196;
  unint64_t *v197;
  uint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  std::locale::__imp *v202;
  uint64_t v203;
  _QWORD *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  std::locale::__imp *v208;
  unint64_t v209;
  _QWORD *v210;
  std::string::size_type v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int *v215;
  file_logger *v216;
  file_logger *v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  const std::locale::facet *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::string *v242;
  const std::string::value_type *v243;
  __int128 *v244;
  _QWORD *v245;
  _QWORD *exception;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  void *v253;
  void *v254;
  char *v257;
  unint64_t v258;
  std::__shared_weak_count *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  __int128 v267;
  void *v268;
  unint64_t v269;
  unint64_t v270;
  void *v271;
  void *v272;
  uint64_t v273;
  __int128 v274;
  timeval v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279[2];
  char v280[8];
  _QWORD *v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  __int128 v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  __int128 v289;
  void *__p;
  char *v291;
  char *v292;
  char v293[8];
  _QWORD *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  void *v299;
  _BYTE *v300;
  __int128 v301;
  char v302;
  void *v303;
  void **v304;
  std::vector<std::string> v305;
  _QWORD v306[3];
  void *v307[3];
  void *v308[3];
  void *__src;
  _BYTE *v310;
  void **v311[3];
  void **v312[3];
  std::locale v313;
  _QWORD v314[3];
  timeval v315;
  std::string::size_type v316;
  unint64_t __val;
  unint64_t v318;
  std::locale v319;
  _OWORD v320[2];
  __int128 v321;
  void *v322[2];
  __int128 v323;
  __int128 v324;
  _BYTE v325[296];
  std::string v326;
  std::string *v327;
  std::locale v328[2];
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  uint64_t v334;

  v334 = *MEMORY[0x24BDAC8D0];
  v7 = (int *)global_logger();
  if (v7[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v7))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "sort", 305, 1);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10 && *((_BYTE *)v10 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Function entry", 14);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11)
    {
      if (*((_BYTE *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
        v12 = std::locale::use_facet(v328, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(v328);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v13 = a1[1];
  v297 = *a1;
  v298 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  turi::query_eval::infer_planner_node_type(&v297, (unint64_t *)&v299);
  v16 = v298;
  if (v298)
  {
    p_shared_owners = (unint64_t *)&v298->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = a1[1];
  v295 = *a1;
  v296 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = turi::query_eval::infer_planner_node_length((uint64_t)&v295);
  v23 = v296;
  if (v296)
  {
    v24 = (unint64_t *)&v296->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v27 = v299;
  v26 = v300;
  std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<unsigned long const*>>((uint64_t)v293, *a3, a3[1]);
  v258 = v26 - v27;
  __p = 0;
  v291 = 0;
  v292 = 0;
  v253 = v27;
  v254 = v26;
  if (v26 != v27)
  {
    v28 = 0;
    v29 = 0;
    if (v258 <= 1)
      v30 = 1;
    else
      v30 = v258;
    do
    {
      for (i = v294; i; i = (_QWORD *)*i)
      {
        v32 = i[4];
        if (v29 >= v32)
        {
          if (v32 >= v29)
            goto LABEL_51;
          ++i;
        }
      }
      if (v28 >= v292)
      {
        v34 = (char *)__p;
        v35 = (v28 - (_BYTE *)__p) >> 3;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v37 = v292 - (_BYTE *)__p;
        if ((v292 - (_BYTE *)__p) >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v292, v38);
          v34 = (char *)__p;
          v28 = v291;
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[8 * v35];
        *(_QWORD *)v40 = v29;
        v33 = v40 + 8;
        while (v28 != v34)
        {
          v41 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *((_QWORD *)v40 - 1) = v41;
          v40 -= 8;
        }
        __p = v40;
        v291 = v33;
        v292 = &v39[8 * v38];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_QWORD *)v28 = v29;
        v33 = v28 + 8;
      }
      v291 = v33;
      v28 = v33;
LABEL_51:
      ++v29;
    }
    while (v29 != v30);
  }
  v42 = a1[1];
  v287 = *a1;
  v288 = (std::__shared_weak_count *)v42;
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v287, (uint64_t **)a3, &v289);
  v45 = v288;
  if (v288)
  {
    v46 = (unint64_t *)&v288->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v286 = 0uLL;
  if (__p != v291)
  {
    v48 = a1[1];
    v284 = *a1;
    v285 = (std::__shared_weak_count *)v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v284, (uint64_t **)&__p, v328);
    v51 = *(_OWORD *)&v328[0].__locale_;
    v328[0].__locale_ = 0;
    v328[1].__locale_ = 0;
    v286 = v51;
    v52 = v285;
    if (v285)
    {
      v53 = (unint64_t *)&v285->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  if (v22 != -1)
    goto LABEL_70;
  v283 = v289;
  if (*((_QWORD *)&v289 + 1))
  {
    v122 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  v323 = 0u;
  v324 = 0u;
  v321 = 0u;
  *(_OWORD *)v322 = 0u;
  memset(v320, 0, sizeof(v320));
  BYTE11(v321) = 1;
  std::string::basic_string[abi:ne180100]<0>(v322, "");
  v324 = 0uLL;
  *((_QWORD *)&v323 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v283, (uint64_t)v320, (const turi::sframe *)v325);
  turi::sframe::~sframe((turi::sframe *)v325);
  v328[0].__locale_ = (std::locale::__imp *)((char *)&v323 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v328);
  if (SBYTE7(v323) < 0)
    operator delete(v322[0]);
  v124 = (_QWORD *)v321;
  if ((_OWORD *)v321 == (_OWORD *)((char *)v320 + 8))
  {
    v125 = 4;
    v124 = (_QWORD *)v320 + 1;
  }
  else
  {
    if (!(_QWORD)v321)
      goto LABEL_339;
    v125 = 5;
  }
  (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_339:
  v234 = (std::__shared_weak_count *)*((_QWORD *)&v283 + 1);
  if (*((_QWORD *)&v283 + 1))
  {
    v235 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v282 = v289;
  if (*((_QWORD *)&v289 + 1))
  {
    v237 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
    do
      v238 = __ldxr(v237);
    while (__stxr(v238 + 1, v237));
  }
  v22 = turi::query_eval::infer_planner_node_length((uint64_t)&v282);
  v239 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
  if (*((_QWORD *)&v282 + 1))
  {
    v240 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
LABEL_70:
  v55 = (char *)operator new(4uLL);
  *(_DWORD *)v55 = 100728834;
  v257 = v55;
  v56 = (turi::thread *)std::set<turi::flex_type_enum>::set[abi:ne180100]<std::__wrap_iter<turi::flex_type_enum*>>((uint64_t)v280, v55, v55 + 4);
  v57 = *a3;
  v58 = a3[1];
  if (*a3 == v58)
    goto LABEL_79;
  do
  {
    v59 = *((char *)v299 + *v57);
    if (!v281)
    {
LABEL_352:
      v242 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v326, "Only column with type 'int', 'float', 'string', and 'datetime' can be sorted. Found column type: ");
      if (v59 > 9)
        v243 = "undefined";
      else
        v243 = off_24D92CFB0[v59];
      v244 = (__int128 *)std::string::append(v242, v243);
      turi::query_eval::sort((uint64_t)v328, v244, (uint64_t)&v326);
      v326.__r_.__value_.__r.__words[0] = (std::string::size_type)v328;
      turi::query_eval::sort(std::shared_ptr<turi::query_eval::planner_node>,std::vector<std::string>,std::vector<unsigned long> const&,std::vector<BOOL> const&)::$_0::operator()((const std::string **)&v326);
    }
    v60 = v281;
    while (1)
    {
      v61 = *((char *)v60 + 25);
      if ((int)v59 >= v61)
        break;
LABEL_76:
      v60 = (_QWORD *)*v60;
      if (!v60)
        goto LABEL_352;
    }
    if (v61 < (int)v59)
    {
      ++v60;
      goto LABEL_76;
    }
    ++v57;
  }
  while (v57 != v58);
LABEL_79:
  v62 = turi::sframe_config::SFRAME_SORT_BUFFER_SIZE;
  v63 = (turi::thread *)turi::thread::cpu_count(v56);
  v64 = (_QWORD)v63 * vcvtpd_u64_f64((double)(((v258 << 6) | 0x20) * v22) / (double)v62);
  if (turi::SFRAME_SORT_MAX_SEGMENTS >= v64)
    v65 = v64;
  else
    v65 = turi::SFRAME_SORT_MAX_SEGMENTS;
  if (v65 <= turi::thread::cpu_count(v63))
  {
    v111 = (int *)global_logger();
    if (v111[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v111))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v112 = (file_logger *)global_logger();
      v113 = file_logger::start_stream(v112, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "sort", 365, 1);
      v114 = pthread_getspecific(*((_QWORD *)v113 + 74));
      if (v114 && *((_BYTE *)v114 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114 + 2, (uint64_t)"Sorting SFrame in memory", 24);
      v115 = pthread_getspecific(*((_QWORD *)v113 + 74));
      if (v115)
      {
        if (*((_BYTE *)v115 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v115 + *(_QWORD *)(v115[2] - 24) + 16));
          v116 = std::locale::use_facet(v328, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v116->__vftable[2].~facet_0)(v116, 10);
          std::locale::~locale(v328);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v113);
          if (*((_DWORD *)v113 + 150) == 7)
          {
            __print_back_trace();
            v247 = __cxa_allocate_exception(8uLL);
            *v247 = "LOG_FATAL encountered";
            __cxa_throw(v247, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    v117 = (std::__shared_weak_count *)a1[1];
    v279[0] = *a1;
    v279[1] = (uint64_t)v117;
    if (v117)
    {
      v118 = (unint64_t *)&v117->__shared_owners_;
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
    turi::query_eval::sort_sframe_in_memory(v279, a2, (uint64_t)a3, a4, a5);
    if (v117)
    {
      v120 = (unint64_t *)&v117->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    goto LABEL_322;
  }
  v276 = 0;
  v277 = 0;
  v278 = 0;
  gettimeofday(&v275, 0);
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
  v274 = v289;
  if (*((_QWORD *)&v289 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  turi::query_eval::get_partition_keys((uint64_t *)&v274, a4, v65, &v276);
  if (v66)
  {
    v69 = (unint64_t *)&v66->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v71 = (int *)global_logger();
  if (v71[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v71))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v72 = (file_logger *)global_logger();
    v73 = file_logger::start_stream(v72, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "sort", 386, 1);
    v74 = pthread_getspecific(*((_QWORD *)v73 + 74));
    if (v74 && *((_BYTE *)v74 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74 + 2, (uint64_t)"Pivot estimation step: ", 23);
    gettimeofday((timeval *)v328, 0);
    v75 = file_logger::operator<<<double>((uint64_t)v73);
    v76 = pthread_getspecific(*(_QWORD *)(v75 + 592));
    if (v76)
    {
      if (*((_BYTE *)v76 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v76 + *(_QWORD *)(v76[2] - 24) + 16));
        v77 = std::locale::use_facet(v328, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10);
        std::locale::~locale(v328);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v75);
        if (*(_DWORD *)(v75 + 600) == 7)
        {
          __print_back_trace();
          v248 = __cxa_allocate_exception(8uLL);
          *v248 = "LOG_FATAL encountered";
          __cxa_throw(v248, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v271 = 0;
  v272 = 0;
  v273 = 0;
  turi::dense_bitset::dense_bitset((turi::dense_bitset *)&v268, v65);
  v78 = -1;
  if (v270)
  {
    v79 = 0;
    v80 = v268;
    do
      v80[v79++] = -1;
    while (v79 < v270);
    v78 = v270 - 1;
  }
  if ((v269 & 0x3F) != 0)
    *((_QWORD *)v268 + v78) &= ~(-1 << (v269 & 0x3F));
  v267 = 0uLL;
  if ((_QWORD)v286)
  {
    v81 = a1[1];
    v265 = *a1;
    v266 = (std::__shared_weak_count *)v81;
    if (v81)
    {
      v82 = (unint64_t *)(v81 + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node(&v265, (uint64_t **)a3, v328);
    v84 = *(_OWORD *)&v328[0].__locale_;
    v328[0].__locale_ = 0;
    v328[1].__locale_ = 0;
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
    v289 = v84;
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    locale = (std::__shared_weak_count *)v328[1].__locale_;
    if (v328[1].__locale_)
    {
      v89 = (unint64_t *)((char *)v328[1].__locale_ + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
        std::__shared_weak_count::__release_weak(locale);
      }
    }
    v91 = v266;
    if (v266)
    {
      v92 = (unint64_t *)&v266->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v264 = v289;
    if (*((_QWORD *)&v289 + 1))
    {
      v94 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    v263 = v286;
    if (*((_QWORD *)&v286 + 1))
    {
      v96 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(&v264, &v263, v328);
    v98 = *(_OWORD *)&v328[0].__locale_;
    v328[0].__locale_ = 0;
    v328[1].__locale_ = 0;
    v99 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
    v267 = v98;
    if (v99)
    {
      v100 = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v102 = (std::__shared_weak_count *)v328[1].__locale_;
    if (v328[1].__locale_)
    {
      v103 = (unint64_t *)((char *)v328[1].__locale_ + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v105 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
    if (*((_QWORD *)&v263 + 1))
    {
      v106 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v108 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
    if (*((_QWORD *)&v264 + 1))
    {
      v109 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
  }
  else
  {
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v267, (uint64_t *)&v289);
  }
  gettimeofday(&v275, 0);
  v126 = v267;
  v260 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
  if (*((_QWORD *)&v267 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v267 + 1) + 8);
    do
      v128 = __ldxr(v127);
    while (__stxr(v128 + 1, v127));
  }
  v318 = *(_QWORD *)(a4 + 8);
  v129 = (int *)global_logger();
  if (v129[169] <= 2)
  {
    if (!cppipc::must_cancel((cppipc *)v129))
    {
      v130 = (file_logger *)global_logger();
      v131 = file_logger::start_stream(v130, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "scatter_partition", 154, 1);
      v132 = pthread_getspecific(*((_QWORD *)v131 + 74));
      if (v132 && *((_BYTE *)v132 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132 + 2, (uint64_t)"Function entry", 14);
      v133 = pthread_getspecific(*((_QWORD *)v131 + 74));
      if (v133)
      {
        if (*((_BYTE *)v133 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v133 + *(_QWORD *)(v133[2] - 24) + 16));
          v134 = std::locale::use_facet(v328, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v134->__vftable[2].~facet_0)(v134, 10);
          std::locale::~locale(v328);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v131);
          if (*((_DWORD *)v131 + 150) == 7)
          {
            __print_back_trace();
            v249 = __cxa_allocate_exception(8uLL);
            *v249 = "LOG_FATAL encountered";
            __cxa_throw(v249, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      goto LABEL_186;
    }
LABEL_360:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_186:
  __val = ((v277 - v276) >> 4) + 1;
  v135 = (int *)global_logger();
  if (v135[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v135))
      goto LABEL_360;
    v136 = (file_logger *)global_logger();
    v137 = file_logger::start_stream(v136, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "scatter_partition", 157, 1);
    std::to_string(&v326, __val);
    v138 = std::string::insert(&v326, 0, "Scatter partition for sort, scatter to ");
    v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
    *(_QWORD *)&v329 = *((_QWORD *)&v138->__r_.__value_.__l + 2);
    *(_OWORD *)&v328[0].__locale_ = v139;
    v138->__r_.__value_.__l.__size_ = 0;
    v138->__r_.__value_.__r.__words[2] = 0;
    v138->__r_.__value_.__r.__words[0] = 0;
    v140 = std::string::append((std::string *)v328, " partitions");
    v141 = *(timeval *)&v140->__r_.__value_.__l.__data_;
    v316 = v140->__r_.__value_.__r.__words[2];
    v315 = v141;
    v140->__r_.__value_.__l.__size_ = 0;
    v140->__r_.__value_.__r.__words[2] = 0;
    v140->__r_.__value_.__r.__words[0] = 0;
    v142 = file_logger::operator<<<std::string>((uint64_t)v137, (uint64_t)&v315);
    v143 = pthread_getspecific(*(_QWORD *)(v142 + 592));
    if (v143)
    {
      if (*((_BYTE *)v143 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v143 + *(_QWORD *)(v143[2] - 24) + 16));
        v144 = std::locale::use_facet(&v313, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v144->__vftable[2].~facet_0)(v144, 10);
        std::locale::~locale(&v313);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v142);
        if (*(_DWORD *)(v142 + 600) == 7)
        {
          __print_back_trace();
          v250 = __cxa_allocate_exception(8uLL);
          *v250 = "LOG_FATAL encountered";
          __cxa_throw(v250, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v316) < 0)
      operator delete((void *)v315.tv_sec);
    if (SBYTE7(v329) < 0)
      operator delete(v328[0].__locale_);
    if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v326.__r_.__value_.__l.__data_);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS_4pairINS_6vectorINS1_13flexible_typeENS_9allocatorIS5_EEEENS_12basic_stringIcNS_11char_traitsIcEENS6_IcEEEEEEEENS6_ISF_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v261);
  turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::open_for_write(v261, __val, 0);
  std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::vector(v314, __val);
  if (__val)
  {
    v145 = 0;
    v146 = 64;
    while (1)
    {
      (*(void (**)(std::locale *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v261 + 32))(v328, v261, v145);
      v147 = v314[0];
      v148 = v314[0] + v146;
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v314[0] + v146 - 64), (uint64_t)v328);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v148 - 32), (uint64_t)&v330);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v147 + v146), (uint64_t)&v332);
      v149 = (__int128 *)*((_QWORD *)&v333 + 1);
      if (*((__int128 **)&v333 + 1) == &v332)
      {
        v149 = &v332;
        v150 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v333 + 1))
          goto LABEL_204;
        v150 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v149 + 8 * v150))();
LABEL_204:
      v151 = (__int128 *)*((_QWORD *)&v331 + 1);
      if (*((__int128 **)&v331 + 1) == &v330)
      {
        v151 = &v330;
        v152 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v331 + 1))
          goto LABEL_209;
        v152 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v151 + 8 * v152))();
LABEL_209:
      v153 = (std::locale *)*((_QWORD *)&v329 + 1);
      if (*((std::locale **)&v329 + 1) == v328)
      {
        v153 = v328;
        v154 = 4;
        goto LABEL_213;
      }
      if (*((_QWORD *)&v329 + 1))
      {
        v154 = 5;
LABEL_213:
        (*((void (**)(void))v153->__locale_ + v154))();
      }
      ++v145;
      v155 = __val;
      v146 += 96;
      if (v145 >= __val)
        goto LABEL_217;
    }
  }
  v155 = 0;
LABEL_217:
  std::vector<turi::mutex>::vector(&v313, v155);
  std::vector<turi::simple_spinlock>::vector(v312, __val);
  std::vector<std::vector<turi::flexible_type>>::vector(v311, __val);
  v328[0].__locale_ = 0;
  std::vector<unsigned long>::vector(&__src, __val, v328);
  v328[0].__locale_ = 0;
  v156 = (turi::thread *)std::vector<unsigned long>::vector(v308, __val, v328);
  v157 = turi::thread::cpu_count(v156);
  v158 = (turi::thread *)std::vector<BOOL>::vector(v307, a4);
  v159 = turi::thread::cpu_count(v158);
  std::vector<turi::flexible_type>::vector(v328, v318);
  std::vector<std::vector<turi::flexible_type>>::vector(v306, v159, (uint64_t **)v328);
  v326.__r_.__value_.__r.__words[0] = (std::string::size_type)v328;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v326);
  v161 = turi::thread::cpu_count(v160);
  v162 = std::vector<std::string>::vector(&v305, v161);
  v163 = turi::thread::cpu_count((turi::thread *)v162);
  std::vector<turi::oarchive>::vector(&v303, v163);
  v301 = v126;
  if (*((_QWORD *)&v126 + 1))
  {
    v164 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
    do
      v165 = __ldxr(v164);
    while (__stxr(v165 + 1, v164));
  }
  v327 = 0;
  v166 = (std::string *)operator new(0x78uLL);
  v166->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24D92CF40;
  v166->__r_.__value_.__l.__size_ = (std::string::size_type)&v303;
  v166->__r_.__value_.__r.__words[2] = (std::string::size_type)v306;
  v166[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v318;
  v166[1].__r_.__value_.__l.__size_ = (std::string::size_type)&__val;
  v166[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v276;
  v166[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v307;
  v166[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v268;
  v166[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v312;
  v166[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v311;
  v166[3].__r_.__value_.__l.__size_ = (std::string::size_type)&v305;
  v166[3].__r_.__value_.__r.__words[2] = (std::string::size_type)&v313;
  v166[4].__r_.__value_.__r.__words[0] = (std::string::size_type)&__src;
  v166[4].__r_.__value_.__l.__size_ = (std::string::size_type)v308;
  v166[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v314;
  v327 = v166;
  *(_OWORD *)&v328[0].__locale_ = 0u;
  v329 = 0u;
  v330 = 0u;
  v331 = 0u;
  v332 = 0u;
  v333 = 0u;
  BYTE11(v330) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v331, "");
  *((_QWORD *)&v332 + 1) = 0;
  v333 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v302, (uint64_t *)&v301, (uint64_t)&v326, v157, (uint64_t *)v328);
  v319.__locale_ = (std::locale::__imp *)((char *)&v332 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
  if (SBYTE7(v332) < 0)
    operator delete((void *)v331);
  v167 = (std::locale *)v330;
  if ((std::locale *)v330 == &v328[1])
  {
    v168 = 4;
    v167 = &v328[1];
  }
  else
  {
    if (!(_QWORD)v330)
      goto LABEL_227;
    v168 = 5;
  }
  (*((void (**)(void))v167->__locale_ + v168))();
LABEL_227:
  v169 = v327;
  if (v327 == &v326)
  {
    v170 = 4;
    v169 = &v326;
  }
  else
  {
    if (!v327)
      goto LABEL_232;
    v170 = 5;
  }
  (*(void (**)(void))(v169->__r_.__value_.__r.__words[0] + 8 * v170))();
LABEL_232:
  v171 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
  if (*((_QWORD *)&v301 + 1))
  {
    v172 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = (void **)v303;
  v175 = v304;
  while (v174 != v175)
  {
    free(v174[3]);
    v174 += 6;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v261 + 40))(v261);
  if (__val)
  {
    v176 = 0;
    v177 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v178 = (int *)global_logger();
      if (v178[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v178))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v179 = (file_logger *)global_logger();
        v180 = file_logger::start_stream(v179, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "scatter_partition", 262, 1);
        v181 = pthread_getspecific(*((_QWORD *)v180 + 74));
        if (v181 && *((_BYTE *)v181 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181 + 2, (uint64_t)"Size of partition ", 18);
        v182 = file_logger::operator<<<unsigned long>((uint64_t)v180);
        v183 = pthread_getspecific(*(_QWORD *)(v182 + 592));
        if (v183 && *((_BYTE *)v183 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183 + 2, (uint64_t)": ", 2);
        v184 = file_logger::operator<<<unsigned long>(v182);
        v185 = pthread_getspecific(*(_QWORD *)(v184 + 592));
        if (v185)
        {
          if (*((_BYTE *)v185 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v185 + *(_QWORD *)(v185[2] - 24) + 16));
            v186 = std::locale::use_facet(&v319, v177);
            ((void (*)(const std::locale::facet *, uint64_t))v186->__vftable[2].~facet_0)(v186, 10);
            std::locale::~locale(&v319);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v184);
            if (*(_DWORD *)(v184 + 600) == 7)
            {
              __print_back_trace();
              v245 = __cxa_allocate_exception(8uLL);
              *v245 = "LOG_FATAL encountered";
              __cxa_throw(v245, MEMORY[0x24BEDB718], 0);
            }
          }
        }
      }
      ++v176;
    }
    while (v176 < __val);
  }
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v271, (char *)__src, (uint64_t)v310, (v310 - (_BYTE *)__src) >> 3);
  if (v303)
  {
    v304 = (void **)v303;
    operator delete(v303);
  }
  v303 = &v305;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
  v305.__begin_ = (std::vector<std::string>::pointer)v306;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v305);
  if (v307[0])
    operator delete(v307[0]);
  if (v308[0])
  {
    v308[1] = v308[0];
    operator delete(v308[0]);
  }
  if (__src)
  {
    v310 = __src;
    operator delete(__src);
  }
  __src = v311;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
  v311[0] = (void **)v312;
  std::vector<turi::simple_spinlock>::__destroy_vector::operator()[abi:ne180100](v311);
  v312[0] = (void **)&v313;
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100](v312);
  v313.__locale_ = (std::locale::__imp *)v314;
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v313);
  if (v260)
  {
    v187 = (unint64_t *)&v260->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v189 = (int *)global_logger();
  if (v189[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v189))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v190 = (file_logger *)global_logger();
    v191 = file_logger::start_stream(v190, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "sort", 430, 1);
    v192 = pthread_getspecific(*((_QWORD *)v191 + 74));
    if (v192 && *((_BYTE *)v192 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192 + 2, (uint64_t)"Scatter step: ", 14);
    gettimeofday((timeval *)v328, 0);
    v193 = file_logger::operator<<<double>((uint64_t)v191);
    v194 = pthread_getspecific(*(_QWORD *)(v193 + 592));
    if (v194)
    {
      if (*((_BYTE *)v194 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v194 + *(_QWORD *)(v194[2] - 24) + 16));
        v195 = std::locale::use_facet(v328, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v195->__vftable[2].~facet_0)(v195, 10);
        std::locale::~locale(v328);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v193);
        if (*(_DWORD *)(v193 + 600) == 7)
        {
          __print_back_trace();
          v251 = __cxa_allocate_exception(8uLL);
          *v251 = "LOG_FATAL encountered";
          __cxa_throw(v251, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  gettimeofday(&v275, 0);
  std::vector<unsigned long>::vector(v328, v258);
  v196 = *a3;
  v197 = a3[1];
  if (v254 != v253)
  {
    v198 = 0;
    v199 = 0;
    v200 = v294;
    v201 = v197 - v196;
    v202 = v328[0].__locale_;
    v203 = v258;
    if (v258 <= 1)
      v203 = 1;
    do
    {
      if (v200)
      {
        v204 = v200;
        do
        {
          v205 = v204[4];
          if (v199 >= v205)
          {
            if (v205 >= v199)
              goto LABEL_285;
            ++v204;
          }
          v204 = (_QWORD *)*v204;
        }
        while (v204);
      }
      *((_QWORD *)v202 + v199) = v201 + v198++;
LABEL_285:
      ++v199;
    }
    while (v199 != v203);
    v196 = *a3;
    v197 = a3[1];
  }
  if (v197 != v196)
  {
    v206 = 0;
    v207 = v197 - v196;
    v208 = v328[0].__locale_;
    if (v207 <= 1)
      v207 = 1;
    do
    {
      *((_QWORD *)v208 + v196[v206]) = v206;
      ++v206;
    }
    while (v207 != v206);
  }
  std::vector<BOOL>::vector(&v326, v269);
  if (v269)
  {
    v209 = 0;
    v210 = v268;
    v211 = v326.__r_.__value_.__r.__words[0];
    do
    {
      v212 = v209 >> 6;
      v213 = 1 << v209;
      if ((v210[v209 >> 6] & (1 << v209)) != 0)
        v214 = *(_QWORD *)(v211 + 8 * v212) | v213;
      else
        v214 = *(_QWORD *)(v211 + 8 * v212) & ~v213;
      *(_QWORD *)(v211 + 8 * v212) = v214;
      ++v209;
    }
    while (v209 < v269);
  }
  turi::query_eval::sort_and_merge(&v261, (uint64_t)&v326, (uint64_t)&v271, a4, (uint64_t)v328, a2, &v299, a5);
  v215 = (int *)global_logger();
  if (v215[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v215))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v216 = (file_logger *)global_logger();
    v217 = file_logger::start_stream(v216, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "sort", 469, 1);
    v218 = pthread_getspecific(*((_QWORD *)v217 + 74));
    if (v218 && *((_BYTE *)v218 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218 + 2, (uint64_t)"Sort and merge step: ", 21);
    gettimeofday(&v315, 0);
    v219 = file_logger::operator<<<double>((uint64_t)v217);
    v220 = pthread_getspecific(*(_QWORD *)(v219 + 592));
    if (v220)
    {
      if (*((_BYTE *)v220 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v220 + *(_QWORD *)(v220[2] - 24) + 16));
        v221 = std::locale::use_facet((const std::locale *)&v315, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v221->__vftable[2].~facet_0)(v221, 10);
        std::locale::~locale((std::locale *)&v315);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v219);
        if (*(_DWORD *)(v219 + 600) == 7)
        {
          __print_back_trace();
          v252 = __cxa_allocate_exception(8uLL);
          *v252 = "LOG_FATAL encountered";
          __cxa_throw(v252, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (v326.__r_.__value_.__r.__words[0])
    operator delete(v326.__r_.__value_.__l.__data_);
  if (v328[0].__locale_)
  {
    v328[1] = v328[0];
    operator delete(v328[0].__locale_);
  }
  v222 = v262;
  if (v262)
  {
    v223 = (unint64_t *)&v262->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
  if (*((_QWORD *)&v267 + 1))
  {
    v226 = (unint64_t *)(*((_QWORD *)&v267 + 1) + 8);
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  free(v268);
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  v328[0].__locale_ = (std::locale::__imp *)&v276;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v328);
LABEL_322:
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v280, v281);
  operator delete(v257);
  v228 = (std::__shared_weak_count *)*((_QWORD *)&v286 + 1);
  if (*((_QWORD *)&v286 + 1))
  {
    v229 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
  if (*((_QWORD *)&v289 + 1))
  {
    v232 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  if (__p)
  {
    v291 = (char *)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v293, v294);
  if (v299)
  {
    v300 = v299;
    operator delete(v299);
  }
}

void sub_21808F268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  void *a69;
  uint64_t a70;
  uint64_t v70;
  void *v72;
  void *v73;

  std::locale::~locale((std::locale *)&STACK[0x300]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a13);
  v72 = *(void **)(v70 - 224);
  if (v72)
    operator delete(v72);
  v73 = *(void **)(v70 - 192);
  if (v73)
  {
    *(_QWORD *)(v70 - 184) = v73;
    operator delete(v73);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  free(a29);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  STACK[0x2E8] = (unint64_t)&a39;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E8]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a44, (_QWORD *)a45);
  operator delete(a14);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a62, (_QWORD *)a63);
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_rows != (size_t)(-1)", 24);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort.cpp", "operator()", 47, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21808F81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~streaming_quantile_sketch(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 152);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 128);
  if (v3)
    operator delete(v3);
  v5 = (void **)(a1 + 104);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 80);
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 24);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

uint64_t file_logger::operator<<<float>(uint64_t a1)
{
  _BYTE *v2;

  v2 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v2 && v2[280])
    std::ostream::operator<<();
  return a1;
}

void turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::substream_finalize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  uint64_t i;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void **v15;

  v2 = a1 + 48;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(a1 + 48, *(_QWORD *)(a1 + 8), a1 + 152, *(double *)a1 / 3.0);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::finalize(v2);
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) != v3)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::finalize(v3 + v4);
      ++v5;
      v3 = *(_QWORD *)(a1 + 24);
      v6 = *(_QWORD *)(a1 + 32);
      v4 += 104;
    }
    while (v5 < 0x4EC4EC4EC4EC4EC5 * ((v6 - v3) >> 3));
    if (v6 != v3)
    {
      v7 = 0;
      v8 = 56;
      do
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge(v2, (uint64_t **)(a1 + 104), (uint64_t **)(v3 + v8), &v13);
        std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)(a1 + 104));
        *(_OWORD *)(a1 + 104) = v13;
        *(_QWORD *)(a1 + 120) = v14;
        v14 = 0;
        v13 = 0uLL;
        v15 = (void **)&v13;
        std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v15);
        ++v7;
        v3 = *(_QWORD *)(a1 + 24);
        v8 += 104;
      }
      while (v7 < 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 32) - v3) >> 3));
    }
  }
  v9 = ceil(1.0 / (*(double *)a1 / 3.0) + 1.0 / (*(double *)a1 / 3.0)) + 1.0;
  if ((unint64_t)v9 <= 2)
    v10 = 2;
  else
    v10 = (unint64_t)v9;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size(v2, (uint64_t *)(a1 + 104), v10);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)(a1 + 32);
        i != v12;
        std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](a1 + 40, i))
  {
    i -= 104;
  }
  *(_QWORD *)(a1 + 32) = v12;
}

void turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::combine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void **v9;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (_OWORD *)(a1 + 48);
  if (v4)
  {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge((uint64_t)v5, (uint64_t **)(a1 + 104), (uint64_t **)(a2 + 104), &v7);
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)(a1 + 104));
    *(_OWORD *)(a1 + 104) = v7;
    *(_QWORD *)(a1 + 120) = v8;
    v8 = 0;
    v7 = 0uLL;
    v9 = (void **)&v7;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 64);
    *v5 = *(_OWORD *)(a2 + 48);
    v5[1] = v6;
    if (a1 != a2)
    {
      std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__assign_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(a1 + 80, *(uint64_t ***)(a2 + 80), *(uint64_t ***)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((char **)(a1 + 104), *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 5);
    }
    std::vector<BOOL>::operator=((void **)(a1 + 128), a2 + 128);
  }
  *(_QWORD *)(a1 + 8) += *(_QWORD *)(a2 + 8);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  v9 = *a1 + 8 * (v6 >> 6);
  v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void sub_21808FF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch(uint64_t a1, uint64_t a2, double a3)
{
  *(_QWORD *)a1 = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 8) = xmmword_2186D80E0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(a1, a2, a3);
  return a1;
}

void sub_21809000C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)(v2 + 152);
  if (v4)
    operator delete(v4);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~quantile_sketch(v2 + 48);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t i;
  double v8;
  double v9;
  unint64_t v10;

  std::vector<BOOL>::operator=((void **)(a1 + 152), a2);
  *(double *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)(a1 + 32);
        i != v6;
        std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](a1 + 40, i))
  {
    i -= 104;
  }
  *(_QWORD *)(a1 + 32) = v6;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::resize((uint64_t *)(a1 + 24), 1uLL);
  v8 = *(double *)a1;
  v9 = 1.0 / *(double *)a1;
  if ((unint64_t)v9 <= 1)
    v10 = 1;
  else
    v10 = (unint64_t)v9;
  *(_QWORD *)(a1 + 16) = v10;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(*(_QWORD *)(a1 + 24), v10, a2, v8 / 3.0);
  return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(a1 + 48, *(_QWORD *)(a1 + 16), a2, *(double *)a1);
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~quantile_sketch(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 80);
  if (v2)
    operator delete(v2);
  v4 = (void **)(a1 + 56);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 32);
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

void std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x4EC4EC4EC4EC4EC5 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 104 * a2;
    while (v3 != v7)
    {
      v3 -= 104;
      std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(uint64_t a1, unint64_t a2, uint64_t a3, double a4)
{
  void *v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t result;
  uint64_t v14;
  void **v15;
  __int128 v16;

  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than::element_less_than((uint64_t)&v15, a3);
  v7 = *(void **)(a1 + 80);
  if (v7)
    operator delete(v7);
  *(_QWORD *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 88) = v16;
  v8 = (unint64_t)((double)a2 * a4);
  *(_QWORD *)a1 = a2;
  if (!v8)
    v8 = 2;
  v9 = floor(log2((double)v8) / a4);
  v10 = (unint64_t)(v9 + v9);
  if (!v10)
    v10 = a2;
  *(double *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = 0;
  v11 = *(void ***)(a1 + 32);
  v12 = *(void ***)(a1 + 40);
  while (v12 != v11)
  {
    v12 -= 3;
    v15 = v12;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
  *(_QWORD *)(a1 + 40) = v11;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::resize((uint64_t *)(a1 + 32), 1uLL);
  v14 = *(_QWORD *)(a1 + 56);
  for (result = *(_QWORD *)(a1 + 64);
        result != v14;
  *(_QWORD *)(a1 + 64) = v14;
  return result;
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;

  if (a1 != (void **)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      if (v4 > (_QWORD)a1[2] << 6)
      {
        v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          v4 = *(_QWORD *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        v4 = *(_QWORD *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v6 = *(void **)(a2 + 8);
    }
    else
    {
      v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

void std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v3 = *(void **)(a2 + 80);
  if (v3)
    operator delete(v3);
  v4 = (void **)(a2 + 56);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a2 + 32);
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0x4EC4EC4EC4EC4EC5 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 104 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0x3F847AE147AE147BLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_QWORD *)(v7 + 96) = 0;
        v7 += 104;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x276276276276276)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>((uint64_t)result, v11);
    else
      v12 = 0;
    v14 = &v12[104 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[104 * v11];
    v15 = &v14[104 * a2];
    do
    {
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *((_QWORD *)v14 + 3) = 0x3F847AE147AE147BLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_QWORD *)v14 + 12) = 0;
      v14 += 104;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer(v16);
  }
  return result;
}

void sub_218090830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 104;
      std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(a1, v7 - 104, v9);
      v7 = *((_QWORD *)&v16 + 1) - 104;
      *((_QWORD *)&v16 + 1) -= 104;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;
  uint64_t v5;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  result = *(__n128 *)(a3 + 56);
  *(__n128 *)(a2 + 56) = result;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  v5 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 88) = v5;
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](v4, i - 104);
  }
}

void std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than::element_less_than(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<BOOL>::operator=((void **)a1, a2);
  return a1;
}

void sub_218090BD0(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::~__split_buffer(&v15);
  }
}

void sub_218090D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__push_back_slow_path<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
    v6 = 0x1745D1745D1745DLL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[176 * v3];
  v13 = &v7[176 * v6];
  std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 176;
  std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer(&v10);
  return v8;
}

void sub_2180910EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v4 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  result = *(__n128 *)(a3 + 104);
  *(__n128 *)(a2 + 104) = result;
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a3 + 120);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  v6 = *(_QWORD *)(a3 + 136);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a2 + 136) = v6;
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a3 + 144);
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  v7 = *(_QWORD *)(a3 + 160);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(a2 + 160) = v7;
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a3 + 168);
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  return result;
}

uint64_t std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(176 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 176;
      std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(a1, v7 - 176, v9);
      v7 = *((_QWORD *)&v16 + 1) - 176;
      *((_QWORD *)&v16 + 1) -= 176;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,std::reverse_iterator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](v3, v1);
      v1 += 176;
    }
    while (v1 != v2);
  }
}

void std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v5;

  v3 = *(void **)(a2 + 152);
  if (v3)
    operator delete(v3);
  v4 = *(void **)(a2 + 128);
  if (v4)
    operator delete(v4);
  v5 = (void **)(a2 + 104);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a2 + 80);
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a2 + 24);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void **std::__split_buffer<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 176;
    std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](v4, i - 176);
  }
}

void std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D92CB58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D92CB58;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t *a2, turi::sframe_rows **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  turi::sframe_rows *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  float v14;
  turi::random::generator *source;
  pthread_mutex_t *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  void *v38;
  void *v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::string *v62;
  __int128 v63;
  unint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  unint64_t *v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  void *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  void **v138;
  _QWORD v139[3];

  v3 = a1;
  v139[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *a3;
  if (!*((_BYTE *)*a3 + 24))
  {
    turi::sframe_rows::ensure_unique(*a3);
    if (!*((_BYTE *)v6 + 24))
      turi::sframe_rows::ensure_unique(v6);
  }
  if (*(_QWORD *)v6 == *((_QWORD *)v6 + 1))
    return 0;
  v7 = **(_QWORD ***)v6;
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(**(_QWORD **)v6 + 8) - *v7;
  if (!v8)
    return 0;
  v9 = 0;
  v10 = v8 >> 4;
  v135 = v5 + 176 * v4;
  v134 = v8 >> 4;
  do
  {
    v11 = **(_QWORD **)(v3 + 16);
    v12 = **(_QWORD **)(v3 + 24);
    v13 = v11 == v12;
    if (v11 == v12)
      break;
    v14 = **(float **)(v3 + 32);
    source = turi::random::get_source((turi::random *)a1);
    v16 = (pthread_mutex_t *)((char *)source + 6288);
    pthread_mutex_lock((pthread_mutex_t *)((char *)source + 6288));
    if (v14 == 0.0)
    {
      a1 = pthread_mutex_unlock(v16);
    }
    else
    {
      v17 = 0x5DEECE66DLL * *((_QWORD *)source + 785) + 11;
      *((_QWORD *)source + 785) = v17 & 0xFFFFFFFFFFFFLL;
      v18 = v14 * 2147483650.0 < (double)((v17 >> 17) & 0x7FFFFFFF);
      a1 = pthread_mutex_unlock(v16);
      if (!v18)
      {
        *(_QWORD *)((char *)v139 + 5) = 0x400000000000000;
        v139[0] = 0;
        v19 = (_QWORD *)operator new();
        *v19 = 0;
        v19[2] = 0;
        v19[3] = 0;
        v19[1] = 0;
        v139[0] = v19;
        *v19 = 1;
        std::vector<turi::flexible_type>::vector(&v136, (uint64_t)(*((_QWORD *)v6 + 1) - *(_QWORD *)v6) >> 4);
        v20 = v136;
        if (*((_QWORD *)&v136 + 1) != (_QWORD)v136)
        {
          v21 = 0;
          do
          {
            v22 = **(_QWORD **)(*(_QWORD *)v6 + 16 * v21) + 16 * v9;
            v23 = v20 + 16 * v21;
            if (v22 != v23)
            {
              switch(*(_BYTE *)(v23 + 12))
              {
                case 2:
                  v24 = *(unint64_t **)v23;
                  do
                  {
                    v25 = __ldaxr(v24);
                    v26 = v25 - 1;
                  }
                  while (__stlxr(v26, v24));
                  if (!v26)
                  {
                    v27 = *(unint64_t **)v23;
                    if (!*(_QWORD *)v23)
                      goto LABEL_57;
                    if (*((char *)v27 + 31) < 0)
                      operator delete((void *)v27[1]);
                    v28 = v27;
                    v29 = 0x1012C404EF22A49;
                    goto LABEL_56;
                  }
                  break;
                case 3:
                  v41 = *(unint64_t **)v23;
                  do
                  {
                    v42 = __ldaxr(v41);
                    v43 = v42 - 1;
                  }
                  while (__stlxr(v43, v41));
                  if (!v43)
                  {
                    v44 = *(unint64_t **)v23;
                    if (!*(_QWORD *)v23)
                      goto LABEL_57;
                    v45 = (void *)v44[1];
                    if (v45)
                    {
                      v44[2] = (unint64_t)v45;
                      operator delete(v45);
                    }
                    v28 = v44;
                    v29 = 0x1080C409938AC02;
                    goto LABEL_56;
                  }
                  break;
                case 4:
                  v30 = *(unint64_t **)v23;
                  do
                  {
                    v31 = __ldaxr(v30);
                    v32 = v31 - 1;
                  }
                  while (__stlxr(v32, v30));
                  if (!v32)
                  {
                    v33 = *(unint64_t **)v23;
                    if (!*(_QWORD *)v23)
                      goto LABEL_57;
                    v138 = (void **)(v33 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v138);
                    goto LABEL_49;
                  }
                  break;
                case 5:
                  v46 = *(unint64_t **)v23;
                  do
                  {
                    v47 = __ldaxr(v46);
                    v48 = v47 - 1;
                  }
                  while (__stlxr(v48, v46));
                  if (!v48)
                  {
                    v33 = *(unint64_t **)v23;
                    if (!*(_QWORD *)v23)
                      goto LABEL_57;
                    v138 = (void **)(v33 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v138);
LABEL_49:
                    v28 = v33;
                    v29 = 0x1020C405E66F15BLL;
                    goto LABEL_56;
                  }
                  break;
                case 8:
                  v49 = *(unint64_t **)v23;
                  do
                  {
                    v50 = __ldaxr(v49);
                    v51 = v50 - 1;
                  }
                  while (__stlxr(v51, v49));
                  if (!v51)
                  {
                    v52 = *(unint64_t **)v23;
                    if (!*(_QWORD *)v23)
                      goto LABEL_57;
                    boost::detail::shared_count::~shared_count((unsigned int **)v52 + 2);
                    v28 = v52;
                    v40 = -235920773;
                    goto LABEL_55;
                  }
                  break;
                case 9:
                  v34 = *(unint64_t **)v23;
                  do
                  {
                    v35 = __ldaxr(v34);
                    v36 = v35 - 1;
                  }
                  while (__stlxr(v36, v34));
                  if (!v36)
                  {
                    v37 = *(unint64_t **)v23;
                    if (*(_QWORD *)v23)
                    {
                      v38 = (void *)v37[6];
                      if (v38)
                      {
                        v37[7] = (unint64_t)v38;
                        operator delete(v38);
                      }
                      v39 = (void *)v37[3];
                      if (v39)
                      {
                        v37[4] = (unint64_t)v39;
                        operator delete(v39);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v37 + 1));
                      v28 = v37;
                      v40 = 2071181815;
LABEL_55:
                      v29 = v40 | 0x1030C4000000000;
LABEL_56:
                      MEMORY[0x219A19A08](v28, v29);
                    }
LABEL_57:
                    *(_QWORD *)v23 = 0;
                  }
                  break;
                default:
                  break;
              }
              v53 = *(_QWORD *)v22;
              *(_QWORD *)(v23 + 5) = *(_QWORD *)(v22 + 5);
              *(_QWORD *)v23 = v53;
              LODWORD(v53) = *(unsigned __int8 *)(v22 + 12);
              *(_BYTE *)(v23 + 12) = v53;
              v54 = v53 > 9;
              v55 = (1 << v53) & 0x33C;
              if (!v54 && v55 != 0)
              {
                v57 = *(unint64_t **)v23;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 + 1, v57));
              }
            }
            ++v21;
            v20 = v136;
          }
          while (v21 < (uint64_t)(*((_QWORD *)&v136 + 1) - v136) >> 4);
        }
        switch(BYTE4(v139[1]))
        {
          case 2:
            v59 = v139[0];
            if (*(_QWORD *)v139[0] != 1)
            {
              v60 = (_QWORD *)operator new();
              v61 = v139[0];
              *v60 = *(_QWORD *)v139[0];
              v62 = (std::string *)(v60 + 1);
              if (*(char *)(v61 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v62, *(const std::string::value_type **)(v61 + 8), *(_QWORD *)(v61 + 16));
              }
              else
              {
                v63 = *(_OWORD *)(v61 + 8);
                v60[3] = *(_QWORD *)(v61 + 24);
                *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
              }
              v139[0] = v60;
              *v60 = 1;
              do
              {
                v99 = __ldaxr((unint64_t *)v59);
                v100 = v99 - 1;
              }
              while (__stlxr(v100, (unint64_t *)v59));
              if (!v100)
              {
                if (*(char *)(v59 + 31) < 0)
                  operator delete(*(void **)(v59 + 8));
                v70 = (unint64_t *)v59;
                v71 = 0x1012C404EF22A49;
                goto LABEL_112;
              }
            }
            break;
          case 3:
            v64 = (unint64_t *)v139[0];
            if (*(_QWORD *)v139[0] != 1)
            {
              v65 = (_QWORD *)operator new();
              v66 = v139[0];
              *v65 = *(_QWORD *)v139[0];
              v65[2] = 0;
              v65[3] = 0;
              v65[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v65 + 1, *(const void **)(v66 + 8), *(_QWORD *)(v66 + 16), (uint64_t)(*(_QWORD *)(v66 + 16) - *(_QWORD *)(v66 + 8)) >> 3);
              v139[0] = v65;
              *v65 = 1;
              do
              {
                v67 = __ldaxr(v64);
                v68 = v67 - 1;
              }
              while (__stlxr(v68, v64));
              if (!v68)
              {
                v69 = (void *)v64[1];
                if (v69)
                {
                  v64[2] = (unint64_t)v69;
                  operator delete(v69);
                }
                v70 = v64;
                v71 = 0x1080C409938AC02;
                goto LABEL_112;
              }
            }
            break;
          case 4:
            v72 = v139[0];
            if (*(_QWORD *)v139[0] != 1)
            {
              v73 = (_QWORD *)operator new();
              v74 = v139[0];
              *v73 = *(_QWORD *)v139[0];
              v73[2] = 0;
              v73[3] = 0;
              v73[1] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v73 + 1, *(uint64_t **)(v74 + 8), *(uint64_t **)(v74 + 16), (uint64_t)(*(_QWORD *)(v74 + 16) - *(_QWORD *)(v74 + 8)) >> 4);
              v139[0] = v73;
              *v73 = 1;
              do
              {
                v75 = __ldaxr((unint64_t *)v72);
                v76 = v75 - 1;
              }
              while (__stlxr(v76, (unint64_t *)v72));
              if (!v76)
              {
                v138 = (void **)(v72 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v138);
                goto LABEL_86;
              }
            }
            break;
          case 5:
            v72 = v139[0];
            if (*(_QWORD *)v139[0] != 1)
            {
              v77 = (_QWORD *)operator new();
              v78 = v139[0];
              *v77 = *(_QWORD *)v139[0];
              v77[2] = 0;
              v77[3] = 0;
              v77[1] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v77 + 1, *(uint64_t **)(v78 + 8), *(uint64_t **)(v78 + 16), (uint64_t)(*(_QWORD *)(v78 + 16) - *(_QWORD *)(v78 + 8)) >> 5);
              v139[0] = v77;
              *v77 = 1;
              do
              {
                v79 = __ldaxr((unint64_t *)v72);
                v80 = v79 - 1;
              }
              while (__stlxr(v80, (unint64_t *)v72));
              if (!v80)
              {
                v138 = (void **)(v72 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v138);
LABEL_86:
                v70 = (unint64_t *)v72;
                v71 = 0x1020C405E66F15BLL;
                goto LABEL_112;
              }
            }
            break;
          case 8:
            v81 = v139[0];
            if (*(_QWORD *)v139[0] != 1)
            {
              v82 = operator new();
              v83 = v139[0];
              *(_QWORD *)v82 = *(_QWORD *)v139[0];
              *(_QWORD *)(v82 + 8) = *(_QWORD *)(v83 + 8);
              v84 = *(_QWORD *)(v83 + 16);
              *(_QWORD *)(v82 + 16) = v84;
              if (v84)
              {
                v85 = (unsigned int *)(v84 + 8);
                do
                  v86 = __ldxr(v85);
                while (__stxr(v86 + 1, v85));
              }
              v87 = *(_OWORD *)(v83 + 24);
              v88 = *(_OWORD *)(v83 + 40);
              *(_OWORD *)(v82 + 56) = *(_OWORD *)(v83 + 56);
              *(_OWORD *)(v82 + 40) = v88;
              *(_OWORD *)(v82 + 24) = v87;
              v139[0] = v82;
              *(_QWORD *)v82 = 1;
              do
              {
                v89 = __ldaxr((unint64_t *)v81);
                v90 = v89 - 1;
              }
              while (__stlxr(v90, (unint64_t *)v81));
              if (!v90)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v81 + 16));
                v70 = (unint64_t *)v81;
                v91 = -235920773;
                goto LABEL_104;
              }
            }
            break;
          case 9:
            v92 = (unint64_t *)v139[0];
            if (*(_QWORD *)v139[0] != 1)
            {
              v93 = (_QWORD *)operator new();
              v94 = v139[0] + 8;
              *v93 = *(_QWORD *)v139[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v93 + 1, v94);
              v139[0] = v93;
              *v93 = 1;
              do
              {
                v95 = __ldaxr(v92);
                v96 = v95 - 1;
              }
              while (__stlxr(v96, v92));
              if (!v96)
              {
                v97 = (void *)v92[6];
                if (v97)
                {
                  v92[7] = (unint64_t)v97;
                  operator delete(v97);
                }
                v98 = (void *)v92[3];
                if (v98)
                {
                  v92[4] = (unint64_t)v98;
                  operator delete(v98);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v92 + 1));
                v70 = v92;
                v91 = 2071181815;
LABEL_104:
                v71 = v91 | 0x1030C4000000000;
LABEL_112:
                MEMORY[0x219A19A08](v70, v71);
              }
            }
            break;
          default:
            break;
        }
        v101 = v139[0];
        std::vector<turi::flexible_type>::__vdeallocate((void **)(v139[0] + 8));
        *(_OWORD *)(v101 + 8) = v136;
        *(_QWORD *)(v101 + 24) = v137;
        v136 = 0uLL;
        v137 = 0;
        v138 = (void **)&v136;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v138);
        turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::add(v135, (uint64_t)v139);
        v10 = v134;
        switch(BYTE4(v139[1]))
        {
          case 2:
            v102 = (unint64_t *)v139[0];
            do
            {
              v103 = __ldaxr(v102);
              v104 = v103 - 1;
            }
            while (__stlxr(v104, v102));
            if (!v104)
            {
              v105 = v139[0];
              if (v139[0])
              {
                if (*(char *)(v139[0] + 31) < 0)
                  operator delete(*(void **)(v139[0] + 8));
                v106 = v105;
                v107 = 0x1012C404EF22A49;
                goto LABEL_154;
              }
            }
            break;
          case 3:
            v108 = (unint64_t *)v139[0];
            do
            {
              v109 = __ldaxr(v108);
              v110 = v109 - 1;
            }
            while (__stlxr(v110, v108));
            if (!v110)
            {
              v111 = v139[0];
              if (v139[0])
              {
                v112 = *(void **)(v139[0] + 8);
                if (v112)
                {
                  *(_QWORD *)(v139[0] + 16) = v112;
                  operator delete(v112);
                }
                v106 = v111;
                v107 = 0x1080C409938AC02;
                goto LABEL_154;
              }
            }
            break;
          case 4:
            v113 = (unint64_t *)v139[0];
            do
            {
              v114 = __ldaxr(v113);
              v115 = v114 - 1;
            }
            while (__stlxr(v115, v113));
            if (!v115)
            {
              v116 = v139[0];
              if (v139[0])
              {
                *(_QWORD *)&v136 = v139[0] + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
                goto LABEL_138;
              }
            }
            break;
          case 5:
            v117 = (unint64_t *)v139[0];
            do
            {
              v118 = __ldaxr(v117);
              v119 = v118 - 1;
            }
            while (__stlxr(v119, v117));
            if (!v119)
            {
              v116 = v139[0];
              if (v139[0])
              {
                *(_QWORD *)&v136 = v139[0] + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
LABEL_138:
                v106 = v116;
                v107 = 0x1020C405E66F15BLL;
                goto LABEL_154;
              }
            }
            break;
          case 8:
            v120 = (unint64_t *)v139[0];
            do
            {
              v121 = __ldaxr(v120);
              v122 = v121 - 1;
            }
            while (__stlxr(v122, v120));
            if (!v122)
            {
              v123 = v139[0];
              if (v139[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v139[0] + 16));
                v106 = v123;
                v124 = -235920773;
                goto LABEL_153;
              }
            }
            break;
          case 9:
            v125 = (unint64_t *)v139[0];
            do
            {
              v126 = __ldaxr(v125);
              v127 = v126 - 1;
            }
            while (__stlxr(v127, v125));
            if (!v127)
            {
              v128 = v139[0];
              if (v139[0])
              {
                v129 = *(void **)(v139[0] + 48);
                if (v129)
                {
                  *(_QWORD *)(v139[0] + 56) = v129;
                  operator delete(v129);
                }
                v130 = *(void **)(v128 + 24);
                if (v130)
                {
                  *(_QWORD *)(v128 + 32) = v130;
                  operator delete(v130);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v128 + 8);
                v106 = v128;
                v124 = 2071181815;
LABEL_153:
                v107 = v124 | 0x1030C4000000000;
LABEL_154:
                a1 = MEMORY[0x219A19A08](v106, v107);
              }
            }
            break;
          default:
            break;
        }
        memset(v139, 0, 13);
        v131 = *(unint64_t **)(v3 + 16);
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 + 1, v131));
      }
    }
    ++v9;
  }
  while (v9 != v10);
  return v13;
}

void sub_218091F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, int a19, char a20)
{
  uint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;

  MEMORY[0x219A19A08](v20, 0x1012C404EF22A49);
  a17 = (void **)&a13;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  switch(a20)
  {
    case 2:
      v22 = (unint64_t *)a18;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (v24)
        goto LABEL_43;
      v25 = a18;
      if (!a18)
        goto LABEL_43;
      if (*(char *)(a18 + 31) < 0)
        operator delete(*(void **)(a18 + 8));
      v26 = v25;
      v27 = 0x1012C404EF22A49;
      goto LABEL_42;
    case 3:
      v28 = (unint64_t *)a18;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (v30)
        goto LABEL_43;
      v31 = a18;
      if (!a18)
        goto LABEL_43;
      v32 = *(void **)(a18 + 8);
      if (v32)
      {
        *(_QWORD *)(a18 + 16) = v32;
        operator delete(v32);
      }
      v26 = v31;
      v27 = 0x1080C409938AC02;
      goto LABEL_42;
    case 4:
      v33 = (unint64_t *)a18;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35)
        goto LABEL_43;
      v36 = a18;
      if (!a18)
        goto LABEL_43;
      a17 = (void **)(a18 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
      goto LABEL_26;
    case 5:
      v37 = (unint64_t *)a18;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_43;
      v36 = a18;
      if (!a18)
        goto LABEL_43;
      a17 = (void **)(a18 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a17);
LABEL_26:
      v26 = v36;
      v27 = 0x1020C405E66F15BLL;
      goto LABEL_42;
    case 8:
      v40 = (unint64_t *)a18;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_43;
      v43 = a18;
      if (!a18)
        goto LABEL_43;
      boost::detail::shared_count::~shared_count((unsigned int **)(a18 + 16));
      v26 = v43;
      v44 = -235920773;
      goto LABEL_41;
    case 9:
      v45 = (unint64_t *)a18;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_43;
      v48 = a18;
      if (!a18)
        goto LABEL_43;
      v49 = *(void **)(a18 + 48);
      if (v49)
      {
        *(_QWORD *)(a18 + 56) = v49;
        operator delete(v49);
      }
      v50 = *(void **)(v48 + 24);
      if (v50)
      {
        *(_QWORD *)(v48 + 32) = v50;
        operator delete(v50);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v48 + 8);
      v26 = v48;
      v44 = 2071181815;
LABEL_41:
      v27 = v44 | 0x1030C4000000000;
LABEL_42:
      MEMORY[0x219A19A08](v26, v27);
LABEL_43:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_43;
  }
}

uint64_t std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0,std::allocator<turi::query_eval::create_quantile_sketch(std::shared_ptr<turi::query_eval::planner_node> &,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

void turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::add(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *__p[2];
  uint64_t v50;
  void **v51;
  uint64_t v52[3];

  v52[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)(a1 + 24);
  v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - v6) >> 3);
  v8 = v7 - 1;
  if (*(_QWORD *)(v6 + 104 * (v7 - 1) + 16) >= (unint64_t)(*(v4 - 1) << (v7 - 1)))
  {
    v44 = 0uLL;
    *(_QWORD *)&v45 = 0;
    *((_QWORD *)&v45 + 1) = 0x3F847AE147AE147BLL;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    *(_OWORD *)__p = 0u;
    v50 = 0;
    if (v5 >= *(_QWORD *)(a1 + 40))
    {
      v10 = std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__push_back_slow_path<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(v4, (uint64_t)&v44);
      v11 = __p[0];
      *(_QWORD *)(a1 + 32) = v10;
      if (v11)
        operator delete(v11);
    }
    else
    {
      v9 = v45;
      *(_OWORD *)v5 = v44;
      *(_OWORD *)(v5 + 16) = v9;
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(v5 + 56) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = 0;
      v46 = 0uLL;
      *(_QWORD *)&v47 = 0;
      *(_QWORD *)(v5 + 64) = 0;
      *(_QWORD *)(v5 + 72) = 0;
      *((_QWORD *)&v47 + 1) = 0;
      *(_QWORD *)&v48 = 0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *((_QWORD *)&v48 + 1) = 0;
      __p[0] = 0;
      __p[1] = 0;
      v50 = 0;
      *(_QWORD *)(a1 + 32) = v5 + 104;
    }
    v51 = (void **)&v47 + 1;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v51);
    v51 = (void **)&v46;
    std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&v51);
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::init(*(_QWORD *)(a1 + 24) + 104 * v7, *(_QWORD *)(a1 + 16) << v7, a1 + 152, *(double *)a1 / 3.0);
    v6 = *(_QWORD *)(a1 + 24);
    v8 = v7;
  }
  v12 = v6 + 104 * v8;
  memset(v52, 0, 13);
  if (v52 != (uint64_t *)a2)
  {
    *(uint64_t *)((char *)v52 + 5) = *(_QWORD *)(a2 + 5);
    v52[0] = *(_QWORD *)a2;
    BYTE4(v52[1]) = *(_BYTE *)(a2 + 12);
    if (BYTE4(v52[1]) <= 9u && ((1 << SBYTE4(v52[1])) & 0x33C) != 0)
    {
      v13 = (unint64_t *)v52[0];
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::add(v12, v52);
  switch(BYTE4(v52[1]))
  {
    case 2:
      v15 = (unint64_t *)v52[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v52[0];
        if (v52[0])
        {
          if (*(char *)(v52[0] + 31) < 0)
            operator delete(*(void **)(v52[0] + 8));
          v19 = v18;
          v20 = 0x1012C404EF22A49;
          goto LABEL_53;
        }
      }
      break;
    case 3:
      v21 = (unint64_t *)v52[0];
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = v52[0];
        if (v52[0])
        {
          v25 = *(void **)(v52[0] + 8);
          if (v25)
          {
            *(_QWORD *)(v52[0] + 16) = v25;
            operator delete(v25);
          }
          v19 = v24;
          v20 = 0x1080C409938AC02;
          goto LABEL_53;
        }
      }
      break;
    case 4:
      v26 = (unint64_t *)v52[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v52[0];
        if (v52[0])
        {
          *(_QWORD *)&v44 = v52[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
          goto LABEL_46;
        }
      }
      break;
    case 5:
      v37 = (unint64_t *)v52[0];
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v29 = v52[0];
        if (v52[0])
        {
          *(_QWORD *)&v44 = v52[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
LABEL_46:
          v19 = v29;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_53;
        }
      }
      break;
    case 8:
      v40 = (unint64_t *)v52[0];
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        v43 = v52[0];
        if (v52[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v52[0] + 16));
          v19 = v43;
          v36 = -235920773;
          goto LABEL_52;
        }
      }
      break;
    case 9:
      v30 = (unint64_t *)v52[0];
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = v52[0];
        if (v52[0])
        {
          v34 = *(void **)(v52[0] + 48);
          if (v34)
          {
            *(_QWORD *)(v52[0] + 56) = v34;
            operator delete(v34);
          }
          v35 = *(void **)(v33 + 24);
          if (v35)
          {
            *(_QWORD *)(v33 + 32) = v35;
            operator delete(v35);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v33 + 8);
          v19 = v33;
          v36 = 2071181815;
LABEL_52:
          v20 = v36 | 0x1030C4000000000;
LABEL_53:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  ++*(_QWORD *)(a1 + 8);
}

void sub_218092694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~quantile_sketch((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void **v16;

  v3 = *(uint64_t **)(a1 + 32);
  v4 = v3[1];
  if (v4 >= v3[2])
  {
    v5 = std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__emplace_back_slow_path<turi::flexible_type&>(v3, a2);
  }
  else
  {
    std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,turi::flexible_type&>((uint64_t)(v3 + 2), v3[1], a2);
    v5 = v4 + 32;
    v3[1] = v4 + 32;
  }
  v3[1] = v5;
  v6 = *(_QWORD *)(a1 + 8);
  ++*(_QWORD *)(a1 + 16);
  if (v6 == (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - **(_QWORD **)(a1 + 32)) >> 5)
  {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::sort_level_0(a1);
    v7 = 1.0 / (1.0 / (double)*(unint64_t *)(a1 + 8));
    v8 = ceil(v7 + v7) + 1.0;
    if ((unint64_t)v8 <= 2)
      v9 = 2;
    else
      v9 = (unint64_t)v8;
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size(a1, *(uint64_t **)(a1 + 32), v9);
    v10 = *(__int128 **)(a1 + 32);
    v14 = *v10;
    v15 = *((_QWORD *)v10 + 2);
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = 0;
    v11 = *(uint64_t **)(a1 + 32);
    v13 = *v11;
    for (i = v11[1];
          i != v13;
    v11[1] = v13;
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compact((unint64_t *)a1, (uint64_t)&v14, 1uLL);
    v16 = (void **)&v14;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

void sub_2180928E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__push_back_slow_path<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v6 = 0x276276276276276;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[104 * v3];
  v13 = &v7[104 * v6];
  std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 104;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer(&v10);
  return v8;
}

void sub_218092A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

int64x2_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::sort_level_0(uint64_t a1)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;
  int64x2_t result;
  int64x2_t **v9;
  int64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  void *__p[3];

  v2 = *(uint64_t ***)(a1 + 32);
  v3 = *v2;
  v4 = v2[1];
  v5 = 126 - 2 * __clz(((char *)v4 - (char *)*v2) >> 5);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = v5;
  std::vector<BOOL>::vector(__p, a1 + 80);
  std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,false>(v3, v4, __p, v6, 1, v7);
  if (__p[0])
    operator delete(__p[0]);
  v9 = *(int64x2_t ***)(a1 + 32);
  v10 = *v9;
  v11 = (char *)v9[1] - (char *)*v9;
  if (v11)
  {
    v12 = 0;
    v13 = v11 >> 5;
    if (v13 <= 1)
      v13 = 1;
    v14 = v10 + 1;
    do
    {
      result = vdupq_n_s64(++v12);
      *v14 = result;
      v14 += 2;
    }
    while (v13 != v12);
  }
  return result;
}

void sub_218092ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compact(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void **v21;

  v7 = a1[4];
  v6 = a1[5];
  v5 = (uint64_t *)(a1 + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) <= a3)
  {
LABEL_11:
    if (v6 >= a1[6])
    {
      v18 = std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__push_back_slow_path<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> const&>(v5, (uint64_t **)a2);
    }
    else
    {
      std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> const&>((uint64_t)v5, (uint64_t **)a2);
      v18 = v6 + 24;
    }
    a1[5] = v18;
  }
  else
  {
    v8 = a3;
    while (1)
    {
      v9 = (_QWORD *)(v7 + 24 * v8);
      if (v9[1] == *v9)
        break;
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge((uint64_t)a1, (uint64_t **)a2, (uint64_t **)(v7 + 24 * v8), &v19);
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)a2);
      *(_OWORD *)a2 = v19;
      *(_QWORD *)(a2 + 16) = v20;
      v20 = 0;
      v19 = 0uLL;
      v21 = (void **)&v19;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v21);
      v10 = 1.0 / (1.0 / (double)a1[1]);
      v11 = ceil(v10 + v10) + 1.0;
      if ((unint64_t)v11 <= 2)
        v12 = 2;
      else
        v12 = (unint64_t)v11;
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size((uint64_t)a1, (uint64_t *)a2, v12);
      v7 = a1[4];
      v13 = v7 + 24 * v8;
      v16 = *(_QWORD *)(v13 + 8);
      v15 = (_QWORD *)(v13 + 8);
      v14 = v16;
      v17 = *(_QWORD *)(v7 + 24 * v8);
      if (v16 != v17)
      {
        do
          v14 = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(v14 - 32);
        while (v14 != v17);
        v7 = *v5;
      }
      *v15 = v17;
      ++v8;
      v6 = a1[5];
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3))
        goto LABEL_11;
    }
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)(v7 + 24 * v8));
    *(_OWORD *)v9 = *(_OWORD *)a2;
    *(_QWORD *)(v7 + 24 * v8 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__emplace_back_slow_path<turi::flexible_type&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,turi::flexible_type&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element> &>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_218092D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,turi::flexible_type&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  void *v28;
  void *v29;
  void **v30;

  v3 = *a3;
  v4 = *((_DWORD *)a3 + 2);
  v5 = *((unsigned __int8 *)a3 + 12);
  if (v5 > 9 || ((1 << v5) & 0x33C) == 0)
  {
    *(_QWORD *)a2 = v3;
    *(_DWORD *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 12) = v5;
  }
  else
  {
    do
      v7 = __ldaxr((unint64_t *)v3);
    while (__stlxr(v7 + 1, (unint64_t *)v3));
    *(_QWORD *)a2 = v3;
    *(_DWORD *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 12) = v5;
    do
      v8 = __ldaxr((unint64_t *)v3);
    while (__stlxr(v8 + 1, (unint64_t *)v3));
  }
  *(_QWORD *)(a2 + 16) = -1;
  *(_QWORD *)(a2 + 24) = -1;
  switch(v5)
  {
    case 2u:
      do
      {
        v9 = __ldaxr((unint64_t *)v3);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unint64_t *)v3));
      if (v10)
        v11 = 1;
      else
        v11 = v3 == 0;
      if (v11)
        return;
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      break;
    case 3u:
      do
      {
        v12 = __ldaxr((unint64_t *)v3);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unint64_t *)v3));
      if (v13)
        v14 = 1;
      else
        v14 = v3 == 0;
      if (v14)
        return;
      v15 = *(void **)(v3 + 8);
      if (v15)
      {
        *(_QWORD *)(v3 + 16) = v15;
        operator delete(v15);
      }
      break;
    case 4u:
      do
      {
        v16 = __ldaxr((unint64_t *)v3);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unint64_t *)v3));
      if (v17)
        v18 = 1;
      else
        v18 = v3 == 0;
      if (v18)
        return;
      v30 = (void **)(v3 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v30);
      goto LABEL_37;
    case 5u:
      do
      {
        v19 = __ldaxr((unint64_t *)v3);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unint64_t *)v3));
      if (v20)
        v21 = 1;
      else
        v21 = v3 == 0;
      if (v21)
        return;
      v30 = (void **)(v3 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v30);
LABEL_37:
      MEMORY[0x219A19A08](v3, 0x1020C405E66F15BLL);
      return;
    case 8u:
      do
      {
        v22 = __ldaxr((unint64_t *)v3);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unint64_t *)v3));
      if (v23)
        v24 = 1;
      else
        v24 = v3 == 0;
      if (v24)
        return;
      boost::detail::shared_count::~shared_count((unsigned int **)(v3 + 16));
      break;
    case 9u:
      do
      {
        v25 = __ldaxr((unint64_t *)v3);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unint64_t *)v3));
      if (v26)
        v27 = 1;
      else
        v27 = v3 == 0;
      if (v27)
        return;
      v28 = *(void **)(v3 + 48);
      if (v28)
      {
        *(_QWORD *)(v3 + 56) = v28;
        operator delete(v28);
      }
      v29 = *(void **)(v3 + 24);
      if (v29)
      {
        *(_QWORD *)(v3 + 32) = v29;
        operator delete(v29);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v3 + 8);
      break;
    default:
      return;
  }
  JUMPOUT(0x219A19A08);
}

uint64_t *std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v6 - 32) = 0;
      *(_DWORD *)(v6 - 24) = 0;
      *(_BYTE *)(v6 - 20) = 0;
      v7 = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 27) = *(_QWORD *)(v2 + v5 - 27);
      *(_QWORD *)(v6 - 32) = v7;
      *(_BYTE *)(v6 - 20) = *(_BYTE *)(v2 + v5 - 20);
      *(_BYTE *)(v2 + v5 - 20) = 0;
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v2 + v5 - 16);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,false>(uint64_t *result, uint64_t *a2, _QWORD *a3, uint64_t a4, char a5, __n128 a6)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  char v22;
  uint64_t *v23;
  __n128 v24;
  char v25;
  int v26;
  __n128 v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;

  v8 = a2;
  v9 = result;
  v29 = a2;
  v30 = result;
  while (2)
  {
    v10 = 1 - a4;
LABEL_3:
    v11 = (char *)v8 - (char *)v9;
    v12 = ((char *)v8 - (char *)v9) >> 5;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v29 = v8 - 4;
        result = (uint64_t *)turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*(v8 - 4) + 8), (_QWORD *)(*v9 + 8), a6);
        if ((_DWORD)result)
          return (uint64_t *)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v30, &v29);
        return result;
      case 3uLL:
        v29 = v8 - 4;
        return (uint64_t *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v9, v9 + 4, v8 - 4, a3, a6);
      case 4uLL:
        v29 = v8 - 4;
        return (uint64_t *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v9, v9 + 4, v9 + 8, v8 - 4, a3, a6);
      case 5uLL:
        v29 = v8 - 4;
        return (uint64_t *)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v9, v9 + 4, v9 + 8, v9 + 12, v8 - 4, a3, a6);
      default:
        if (v11 <= 767)
        {
          if ((a5 & 1) != 0)
            return (uint64_t *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v9, v8, a3, a6);
          else
            return (uint64_t *)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v9, v8, a3, a6);
        }
        if (v10 == 1)
        {
          if (v9 != v8)
            return (uint64_t *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(v9, (uint64_t)v8, (uint64_t)v8, a3, a6);
          return result;
        }
        v13 = v12 >> 1;
        v14 = v8 - 4;
        if ((unint64_t)v11 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)&v9[4 * (v12 >> 1)], v9, v14, a3, a6);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v8 = v29;
            goto LABEL_12;
          }
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v9, &v9[4 * (v12 >> 1)], v14, a3, a6);
          v15 = v29;
          v16 = 32 * v13 - 32;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)(v30 + 4), (uint64_t *)((char *)v30 + v16), v29 - 8, a3, v17);
          v18 = 32 * v13 + 32;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)(v30 + 8), (uint64_t *)((char *)v30 + v18), v15 - 12, a3, v19);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v30 + v16, &v30[4 * v13], (uint64_t *)((char *)v30 + v18), a3, v20);
          v28 = &v30[4 * v13];
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v30, &v28);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v22 = turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*(v30 - 4) + 8), (_QWORD *)(*v30 + 8), v21);
        v8 = v29;
        if ((v22 & 1) == 0)
        {
          result = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &>((uint64_t)v30, v29, a3);
          v9 = result;
          goto LABEL_20;
        }
LABEL_12:
        v23 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &>((uint64_t)v30, v8, a3);
        if ((v25 & 1) == 0)
          goto LABEL_19;
        v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(v30, v23, a3, v24);
        v9 = v23 + 4;
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(v23 + 4, v8, a3, v27);
        if (!(_DWORD)result)
        {
          if (v26)
          {
            v30 = v23 + 4;
            goto LABEL_18;
          }
LABEL_19:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,false>(v30, v23, a3, -v10, a5 & 1);
          v9 = v23 + 4;
LABEL_20:
          a5 = 0;
          v30 = v9;
          a4 = -v10;
          continue;
        }
        if ((v26 & 1) == 0)
        {
          v29 = v23;
          v9 = v30;
          v8 = v23;
LABEL_18:
          ++v10;
          goto LABEL_3;
        }
        return result;
    }
  }
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[13];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)v2;
  *(_QWORD *)&v6[5] = *(_QWORD *)(v2 + 5);
  *(_QWORD *)v6 = v4;
  v6[12] = *(_BYTE *)(v2 + 12);
  *(_BYTE *)(v2 + 12) = 0;
  v7 = *(_OWORD *)(v2 + 16);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v2, v3);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v3, (uint64_t *)v6);
  return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v6);
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t result, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  char v13;
  uint64_t v14;
  _BYTE v15[13];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if ((_QWORD *)result != a2)
  {
    v5 = result;
    v6 = (_QWORD *)(result + 32);
    if ((_QWORD *)(result + 32) != a2)
    {
      v8 = 0;
      v9 = (_QWORD *)result;
      do
      {
        v10 = v6;
        result = turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(v9[4] + 8), (_QWORD *)(*v9 + 8), a4);
        if ((_DWORD)result)
        {
          *(_QWORD *)&v15[5] = *(_QWORD *)((char *)v10 + 5);
          *(_QWORD *)v15 = *v10;
          v15[12] = *((_BYTE *)v9 + 44);
          *((_BYTE *)v9 + 44) = 0;
          v16 = *((_OWORD *)v9 + 3);
          v11 = v8;
          while (1)
          {
            turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v5 + v11 + 32, (uint64_t *)(v5 + v11));
            if (!v11)
              break;
            v13 = turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*(_QWORD *)v15 + 8), (_QWORD *)(*(_QWORD *)(v5 + v11 - 32) + 8), v12);
            v11 -= 32;
            if ((v13 & 1) == 0)
            {
              v14 = v5 + v11 + 32;
              goto LABEL_10;
            }
          }
          v14 = v5;
LABEL_10:
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v14, (uint64_t *)v15);
          result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v15);
        }
        v6 = v10 + 4;
        v8 += 32;
        v9 = v10;
      }
      while (v10 + 4 != a2);
    }
  }
  return result;
}

void sub_21809355C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t result, uint64_t *a2, _QWORD *a3, __n128 a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  __n128 v10;
  _BYTE v11[13];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    v6 = (uint64_t *)(result + 32);
    if ((uint64_t *)(result + 32) != a2)
    {
      do
      {
        v8 = v6;
        result = turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(v5[4] + 8), (_QWORD *)(*v5 + 8), a4);
        if ((_DWORD)result)
        {
          *(_QWORD *)&v11[5] = *(uint64_t *)((char *)v8 + 5);
          *(_QWORD *)v11 = *v8;
          v11[12] = *((_BYTE *)v5 + 44);
          *((_BYTE *)v5 + 44) = 0;
          v12 = *((_OWORD *)v5 + 3);
          do
          {
            turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v5 + 4), v5);
            v9 = *(v5 - 4);
            v5 -= 4;
          }
          while ((turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*(_QWORD *)v11 + 8), (_QWORD *)(v9 + 8), v10) & 1) != 0);
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v5 + 4), (uint64_t *)v11);
          result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v11);
        }
        v6 = v8 + 4;
        v5 = v8;
      }
      while (v8 + 4 != a2);
    }
  }
  return result;
}

void sub_21809368C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, __n128 a5)
{
  char v8;
  __n128 v9;
  uint64_t result;
  __n128 v11;
  uint64_t *v12;
  uint64_t **v13;
  __n128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v16 = a2;
  v17 = a1;
  v15 = a3;
  v8 = turi::query_eval::less_than_full_function::compare(a4, (_QWORD *)(*a2 + 8), (_QWORD *)(*(_QWORD *)a1 + 8), a5);
  result = turi::query_eval::less_than_full_function::compare(a4, (_QWORD *)(*a3 + 8), (_QWORD *)(*a2 + 8), v9);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v16, &v15);
    if (!turi::query_eval::less_than_full_function::compare(a4, (_QWORD *)(*v16 + 8), (_QWORD *)(*(_QWORD *)v17 + 8), v11))return 1;
    v12 = &v17;
    v13 = &v16;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v17, &v16);
    if (!turi::query_eval::less_than_full_function::compare(a4, (_QWORD *)(*v15 + 8), (_QWORD *)(*v16 + 8), v14))return 1;
    v12 = (uint64_t *)&v16;
    v13 = &v15;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(v12, v13);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v17, &v15);
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  __n128 v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  char v13;
  __n128 v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v19;
  unint64_t v20;
  _BYTE v21[13];
  __n128 v22;
  uint64_t v23;

  v4 = a2;
  v23 = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  v20 = a1;
  *(_QWORD *)&v21[5] = *(_QWORD *)(a1 + 5);
  *(_QWORD *)v21 = *(_QWORD *)a1;
  v21[12] = *(_BYTE *)(a1 + 12);
  *(_BYTE *)(a1 + 12) = 0;
  v22 = *(__n128 *)(a1 + 16);
  if ((turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*(_QWORD *)v21 + 8), (_QWORD *)(*(a2 - 4) + 8), v22) & 1) != 0)
  {
    v7 = a1 + 32;
    do
    {
      v20 = v7;
      v8 = turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*(_QWORD *)v21 + 8), (_QWORD *)(*(_QWORD *)v7 + 8), v6);
      v7 += 32;
    }
    while ((v8 & 1) == 0);
    v9 = v7 - 32;
  }
  else
  {
    v10 = a1 + 32;
    do
    {
      v9 = v10;
      v20 = v10;
      if (v10 >= (unint64_t)v4)
        break;
      v11 = turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*(_QWORD *)v21 + 8), (_QWORD *)(*(_QWORD *)v10 + 8), v6);
      v10 = v9 + 32;
    }
    while ((v11 & 1) == 0);
  }
  if (v9 < (unint64_t)v4)
  {
    v12 = v4 - 4;
    do
    {
      v19 = v12;
      v13 = turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*(_QWORD *)v21 + 8), (_QWORD *)(*v12 + 8), v6);
      v12 -= 4;
    }
    while ((v13 & 1) != 0);
    v4 = v12 + 4;
  }
  if (v9 < (unint64_t)v4)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v20, &v19);
      do
      {
        v15 = *(_QWORD *)(v20 + 32);
        v20 += 32;
      }
      while (!turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*(_QWORD *)v21 + 8), (_QWORD *)(v15 + 8), v14));
      do
      {
        v16 = v19;
        v19 -= 4;
      }
      while ((turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*(_QWORD *)v21 + 8), (_QWORD *)(*(v16 - 4) + 8), v14) & 1) != 0);
      v9 = v20;
    }
    while (v20 < (unint64_t)v19);
  }
  if (v9 - 32 != a1)
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, (uint64_t *)(v9 - 32));
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v9 - 32, (uint64_t *)v21);
  v17 = v20;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v21);
  return v17;
}

void sub_21809398C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  unint64_t v21;
  _BYTE v22[13];
  __n128 v23;
  uint64_t v24;

  v6 = 0;
  v24 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v22[5] = *(_QWORD *)(a1 + 5);
  *(_QWORD *)v22 = *(_QWORD *)a1;
  v22[12] = *(_BYTE *)(a1 + 12);
  v20 = a2;
  *(_BYTE *)(a1 + 12) = 0;
  v7 = *(__n128 *)(a1 + 16);
  v23 = v7;
  do
  {
    v8 = *(_QWORD *)(a1 + v6 + 32);
    v21 = a1 + v6 + 32;
    v6 += 32;
  }
  while ((turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(v8 + 8), (_QWORD *)(*(_QWORD *)v22 + 8), v7) & 1) != 0);
  v9 = a1 + v6;
  if (v6 == 32)
  {
    v13 = a2 - 4;
    while (1)
    {
      v12 = v13 + 4;
      if (v9 >= (unint64_t)(v13 + 4))
        break;
      v20 = v13;
      v14 = turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*v13 + 8), (_QWORD *)(*(_QWORD *)v22 + 8), v7);
      v13 -= 4;
      if ((v14 & 1) != 0)
      {
        v12 = v13 + 4;
        break;
      }
    }
  }
  else
  {
    v10 = a2 - 4;
    do
    {
      v20 = v10;
      v11 = turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*v10 + 8), (_QWORD *)(*(_QWORD *)v22 + 8), v7);
      v10 -= 4;
    }
    while ((v11 & 1) == 0);
    v12 = v10 + 4;
  }
  v15 = v9;
  if (v9 < (unint64_t)v12)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v21, &v20);
      do
      {
        v17 = *(_QWORD *)(v21 + 32);
        v21 += 32;
      }
      while ((turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(v17 + 8), (_QWORD *)(*(_QWORD *)v22 + 8), v16) & 1) != 0);
      do
        v20 -= 4;
      while (!turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*v20 + 8), (_QWORD *)(*(_QWORD *)v22 + 8), v16));
      v15 = v21;
    }
    while (v21 < (unint64_t)v20);
  }
  v18 = v15 - 32;
  if (v15 - 32 != a1)
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, (uint64_t *)(v15 - 32));
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v18, (uint64_t *)v22);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v22);
  return v18;
}

void sub_218093B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t *a1, uint64_t *a2, _QWORD *a3, __n128 a4)
{
  uint64_t *v5;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t *v9;
  __n128 v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  __n128 v14;
  uint64_t *v16;
  uint64_t *v17;
  _BYTE v18[13];
  __int128 v19;
  uint64_t v20;

  v5 = a2;
  v20 = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  v17 = a1;
  v7 = 1;
  switch(((char *)a2 - (char *)a1) >> 5)
  {
    case 0:
    case 1:
      return v7;
    case 2:
      v8 = *(a2 - 4);
      v16 = a2 - 4;
      if (turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(v8 + 8), (_QWORD *)(*a1 + 8), a4))std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v17, &v16);
      return v7;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)a1, a1 + 4, a2 - 4, a3, a4);
      return v7;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)a1, a1 + 4, a1 + 8, a2 - 4, a3, a4);
      return v7;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3, a4);
      return v7;
    default:
      v9 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)a1, a1 + 4, a1 + 8, a3, a4);
      v11 = a1 + 12;
      if (v11 == v5)
        return 1;
      v12 = 0;
      break;
  }
  while (!turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*v11 + 8), (_QWORD *)(*v9 + 8), v10))
  {
LABEL_12:
    v9 = v11;
    v11 += 4;
    if (v11 == v5)
      return 1;
  }
  *(_QWORD *)&v18[5] = *(uint64_t *)((char *)v11 + 5);
  *(_QWORD *)v18 = *v11;
  v18[12] = *((_BYTE *)v11 + 12);
  *((_BYTE *)v11 + 12) = 0;
  v19 = *((_OWORD *)v11 + 1);
  do
  {
    v13 = (uint64_t)v9;
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v9 + 4), v9);
    if (v9 == v17)
      break;
    v9 -= 4;
  }
  while ((turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*(_QWORD *)v18 + 8), (_QWORD *)(*(_QWORD *)(v13 - 32) + 8), v14) & 1) != 0);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v13, (uint64_t *)v18);
  if (++v12 != 8)
  {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v18);
    v5 = v16;
    goto LABEL_12;
  }
  v7 = v11 + 4 == v16;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v18);
  return v7;
}

void sub_218093DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::less_than_full_function::compare(_QWORD *a1, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  double *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v68;
  int v69;
  uint64_t v70;
  size_t v71;
  unsigned int v72;
  unint64_t *v73;
  unint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  double *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  double v122;
  unsigned __int8 *v123;
  double v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  size_t v129;
  size_t v130;
  unsigned int v131;
  unint64_t *v132;
  unint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  double *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  uint64_t v182;
  unsigned __int8 *v183;
  unsigned __int8 *v184;
  double v185;
  double v186;
  uint64_t v187;
  unsigned __int8 *v188;
  unsigned __int8 *v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  unint64_t v194;
  const void *v195;
  size_t v196;
  unsigned int v197;
  double v198;
  unint64_t *v199;
  uint64_t v200;
  double *v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  double v212;
  unint64_t v213;
  unint64_t v214;
  const void *v215;
  const void *v216;
  int v217;
  uint64_t v218;
  const void *v219;
  const void *v220;
  int v221;
  size_t v222;
  const void *v223;
  size_t v224;
  const void *v225;
  size_t v226;
  int v227;
  BOOL v228;
  unsigned int v229;
  unsigned int v230;
  double v231;
  unint64_t *v232;
  uint64_t v233;
  double *v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  double v240;
  uint64_t v241;
  double v242;
  uint64_t v243;
  double v244;
  const void *v245;
  size_t v246;
  size_t v247;
  const void *v248;
  size_t v249;
  const void *v250;
  size_t v251;
  int v252;
  BOOL v253;
  uint64_t result;
  BOOL v255;
  char v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t *v264;

  if (!a1[1])
    return 0;
  v7 = 0;
LABEL_3:
  v8 = *(_QWORD *)(*a1 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8));
  v9 = (unsigned __int8 *)(*a2 + 16 * v7);
  switch(byte_254FEEC0C)
  {
    case 0:
      switch(v9[12])
      {
        case 0u:
          if (*(_QWORD *)v9 == turi::FLEX_UNDEFINED)
            goto LABEL_168;
          goto LABEL_76;
        case 1u:
          a4.n128_u64[0] = *(_QWORD *)v9;
          v62 = turi::FLEX_UNDEFINED;
          goto LABEL_158;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v9 << 8) >> 8 && !*((_DWORD *)v9 + 2))
            goto LABEL_168;
          goto LABEL_76;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(v9[12])
      {
        case 0u:
          a4.n128_u64[0] = turi::FLEX_UNDEFINED;
          v62 = *(_QWORD *)v9;
LABEL_158:
          v122 = (double)v62;
          goto LABEL_159;
        case 1u:
          a4.n128_u64[0] = *(_QWORD *)v9;
          v122 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_159:
          if (a4.n128_f64[0] != v122)
            goto LABEL_76;
          goto LABEL_168;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          a4.n128_f64[0] = vabdd_f64((double)*((int *)v9 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v9 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_167;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v10 = v9[12];
      if (v10 - 3 < 7 || v10 < 2)
        goto LABEL_76;
      if (v10 != 2)
        turi::apply_binary_op_ff();
      v12 = *(_QWORD *)v9;
      v13 = *(char *)(*(_QWORD *)v9 + 31);
      v14 = *(unsigned __int8 *)(*(_QWORD *)v9 + 31);
      v15 = v13 < 0 ? *(_QWORD *)(v12 + 16) : v14;
      v179 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
           ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
           : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v15 != v179)
        goto LABEL_76;
      v180 = (unsigned __int8 *)(v12 + 8);
      if ((v14 & 0x80) != 0)
        v180 = *(unsigned __int8 **)v180;
      v181 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v181 = *(unsigned __int8 **)v181;
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(v180, v181, v15))
          goto LABEL_76;
      }
      else if (v15)
      {
        while (*v180 == *v181)
        {
          ++v180;
          ++v181;
          if (!--v15)
            goto LABEL_168;
        }
LABEL_76:
        v65 = (unsigned __int8 *)(*a3 + 16 * v7);
        switch(byte_254FEEC0C)
        {
          case 0:
            switch(v65[12])
            {
              case 0u:
                if (*(_QWORD *)v65 == turi::FLEX_UNDEFINED)
                  return ((v8 >> v7) & 1) == 0;
                goto LABEL_313;
              case 1u:
                a4.n128_u64[0] = *(_QWORD *)v65;
                v118 = turi::FLEX_UNDEFINED;
                goto LABEL_176;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v65 << 8) >> 8 && !*((_DWORD *)v65 + 2))
                  return ((v8 >> v7) & 1) == 0;
                goto LABEL_313;
              default:
                turi::apply_binary_op_ff();
            }
          case 1:
            switch(v65[12])
            {
              case 0u:
                a4.n128_u64[0] = turi::FLEX_UNDEFINED;
                v118 = *(_QWORD *)v65;
LABEL_176:
                v124 = (double)v118;
                goto LABEL_181;
              case 1u:
                a4.n128_u64[0] = *(_QWORD *)v65;
                v124 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_181:
                if (a4.n128_f64[0] == v124)
                  return ((v8 >> v7) & 1) == 0;
                goto LABEL_313;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                a4.n128_f64[0] = vabdd_f64((double)*((int *)v65 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v65 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
                goto LABEL_185;
              default:
                turi::apply_binary_op_ff();
            }
          case 2:
            v66 = v65[12];
            if (v66 - 3 < 7 || v66 < 2)
              goto LABEL_313;
            if (v66 != 2)
              turi::apply_binary_op_ff();
            v68 = *(_QWORD *)v65;
            v69 = *(char *)(*(_QWORD *)v65 + 31);
            v70 = *(unsigned __int8 *)(*(_QWORD *)v65 + 31);
            v71 = v69 < 0 ? *(_QWORD *)(v68 + 16) : v70;
            v182 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
                 ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
                 : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
            if (v71 != v182)
              goto LABEL_313;
            v183 = (unsigned __int8 *)(v68 + 8);
            if ((v70 & 0x80) != 0)
              v183 = *(unsigned __int8 **)v183;
            v184 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
            if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
              v184 = *(unsigned __int8 **)v184;
            if ((v70 & 0x80) == 0)
            {
              if (!v71)
                return ((v8 >> v7) & 1) == 0;
              do
              {
                if (*v183 != *v184)
                  goto LABEL_313;
                ++v183;
                ++v184;
                --v71;
              }
              while (v71);
              return ((v8 >> v7) & 1) == 0;
            }
            if (!memcmp(v183, v184, v71))
              return ((v8 >> v7) & 1) == 0;
            goto LABEL_313;
          case 3:
            v72 = v65[12];
            if (v72 > 9)
              turi::apply_binary_op_ff();
            if (v72 != 3)
              goto LABEL_313;
            v75 = *(_QWORD *)v65 + 8;
            v73 = *(unint64_t **)v75;
            v74 = *(unint64_t **)(v75 + 8);
            v76 = ((uint64_t)v74 - *(_QWORD *)v75) >> 3;
            v77 = *(double **)(turi::FLEX_UNDEFINED + 8);
            if (v76 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v77) >> 3)
              goto LABEL_313;
            if (v74 == v73)
              return ((v8 >> v7) & 1) == 0;
            if (v76 <= 1)
              v76 = 1;
            while (1)
            {
              a4.n128_u64[0] = *v73;
              if (*(double *)v73 != *v77)
                break;
              ++v77;
              ++v73;
              if (!--v76)
                return ((v8 >> v7) & 1) == 0;
            }
            goto LABEL_313;
          case 4:
            v78 = v65[12];
            if (v78 > 9)
              turi::apply_binary_op_ff();
            if (v78 == 4
              && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t *)(*(_QWORD *)v65 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
            {
              return ((v8 >> v7) & 1) == 0;
            }
            goto LABEL_313;
          case 5:
            v119 = v65[12];
            if (v119 > 9)
              turi::apply_binary_op_ff();
            if (v119 == 5
              && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t **)(*(_QWORD *)v65 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
            {
              return ((v8 >> v7) & 1) == 0;
            }
            goto LABEL_313;
          case 6:
            switch(v65[12])
            {
              case 0u:
                if (*(_QWORD *)v65 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FEEC08)
                  return ((v8 >> v7) & 1) == 0;
                goto LABEL_313;
              case 1u:
                a4.n128_f64[0] = vabdd_f64(*(double *)v65, (double)dword_254FEEC08 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_185:
                if (a4.n128_f64[0] < 0.0000005)
                  return ((v8 >> v7) & 1) == 0;
                goto LABEL_313;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v65) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *((_DWORD *)v65 + 2) == dword_254FEEC08)
                {
                  return ((v8 >> v7) & 1) == 0;
                }
                goto LABEL_313;
              default:
                turi::apply_binary_op_ff();
            }
          case 7:
            v120 = v65[12];
            if (v120 < 7 || v120 - 8 < 2)
              goto LABEL_313;
            if (v120 != 7)
              turi::apply_binary_op_ff();
            return ((v8 >> v7) & 1) == 0;
          case 8:
            v121 = v65[12];
            if (v121 < 8)
              goto LABEL_313;
            if (v121 != 8)
            {
              if (v121 != 9)
                turi::apply_binary_op_ff();
              goto LABEL_313;
            }
            if (!turi::image_type::operator==(*(_QWORD *)v65 + 8, turi::FLEX_UNDEFINED + 8))
              goto LABEL_313;
            return ((v8 >> v7) & 1) == 0;
          case 9:
            v79 = v65[12];
            if (v79 < 9)
              goto LABEL_313;
            if (v79 != 9)
              turi::apply_binary_op_ff();
            v80 = turi::FLEX_UNDEFINED;
            v81 = *(_QWORD **)v65;
            if (turi::FLEX_UNDEFINED == *(_QWORD *)v65)
              return ((v8 >> v7) & 1) == 0;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v81 + 1), turi::FLEX_UNDEFINED + 8))
              goto LABEL_313;
            v83 = (char *)v81[3];
            v82 = (char *)v81[4];
            v84 = v82 - v83;
            if (v82 == v83)
              return ((v8 >> v7) & 1) == 0;
            if (!v81[1])
              return ((v8 >> v7) & 1) == 0;
            v85 = 1;
            do
            {
              v86 = *(_QWORD *)v83;
              v83 += 8;
              v85 *= v86;
            }
            while (v83 != v82);
            if (!v85)
              return ((v8 >> v7) & 1) == 0;
            v262 = 0;
            std::vector<unsigned long>::vector(&v263, v84 >> 3, &v262);
            v87 = v263;
            v88 = v264;
            v89 = **(_QWORD **)(v80 + 8);
            v90 = (char *)v264 - (char *)v263;
            v91 = v264 - v263;
            v92 = v91 - 1;
            if (v91 <= 1)
              v93 = 1;
            else
              v93 = v264 - v263;
            break;
          default:
            turi::apply_binary_op_ff();
        }
        do
        {
          if (v88 == v87)
          {
            v101 = 0;
            v102 = *(double *)(*(_QWORD *)v81[1] + 8 * v81[9]);
          }
          else
          {
            v94 = 0;
            v95 = (uint64_t *)v81[6];
            v96 = v87;
            v97 = v93;
            do
            {
              v99 = *v96++;
              v98 = v99;
              v100 = *v95++;
              v94 += v100 * v98;
              --v97;
            }
            while (v97);
            v101 = 0;
            v102 = *(double *)(*(_QWORD *)v81[1] + 8 * (v81[9] + v94));
            v103 = *(uint64_t **)(v80 + 48);
            v104 = v87;
            v105 = v93;
            do
            {
              v107 = *v104++;
              v106 = v107;
              v108 = *v103++;
              v101 += v108 * v106;
              --v105;
            }
            while (v105);
          }
          v109 = *(double *)(v89 + 8 * (*(_QWORD *)(v80 + 72) + v101));
          if (v102 != v109)
            break;
          v110 = v91;
          v111 = v91 - 1;
          if (v90 >= 1)
          {
            v112 = v81[3];
            v113 = v87[v92] + 1;
            v87[v92] = v113;
            v114 = (v90 & 0xFFFFFFFFFFFFFFF8) - 16;
            v115 = v91 - 1;
            if (v113 >= *(_QWORD *)(v112 + 8 * v92))
            {
              do
              {
                *(uint64_t *)((char *)v87 + v114 + 8) = 0;
                if (v115 <= 0)
                {
                  v264 = v87;
                  operator delete(v87);
                  return ((v8 >> v7) & 1) == 0;
                }
                --v115;
                v116 = *(uint64_t *)((char *)v87 + v114) + 1;
                *(uint64_t *)((char *)v87 + v114) = v116;
                v117 = *(_QWORD *)(v112 + v114);
                v114 -= 8;
              }
              while (v116 >= v117);
              v110 = 1;
              if ((v115 & 0x8000000000000000) == 0)
                continue;
              break;
            }
            v110 = 1;
            v111 = v91 - 1;
          }
          if ((v111 & 0x8000000000000000) != 0)
            break;
        }
        while (v110);
        if (v87)
        {
          v264 = v87;
          operator delete(v87);
        }
        if (v102 != v109)
        {
LABEL_313:
          v190 = *a3 + 16 * v7;
          v191 = *a2 + 16 * v7;
          switch(*(_BYTE *)(v190 + 12))
          {
            case 0:
              switch(*(_BYTE *)(v191 + 12))
              {
                case 0:
                  if (*(_QWORD *)v191 < *(_QWORD *)v190)
                    return (v8 >> v7) & 1;
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v191;
                  v240 = (double)*(uint64_t *)v190;
                  goto LABEL_423;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  if (*(_QWORD *)v190 > (uint64_t)(*(_QWORD *)v191 << 8) >> 8)
                    return (v8 >> v7) & 1;
                  goto LABEL_356;
                default:
                  turi::apply_binary_op_ff();
              }
            case 1:
              switch(*(_BYTE *)(v191 + 12))
              {
                case 0:
                  a4.n128_u64[0] = *(_QWORD *)v190;
                  if (*(double *)v190 > (double)*(uint64_t *)v191)
                    return (v8 >> v7) & 1;
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v191;
                  v240 = *(double *)v190;
                  goto LABEL_423;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  v240 = *(double *)v190;
                  a4.n128_f64[0] = (double)*(int *)(v191 + 8) / 1000000.0
                                 + (double)((uint64_t)(*(_QWORD *)v191 << 8) >> 8);
LABEL_423:
                  if (a4.n128_f64[0] < v240)
                    return (v8 >> v7) & 1;
                  goto LABEL_356;
                default:
                  turi::apply_binary_op_ff();
              }
            case 2:
              v192 = *(unsigned __int8 *)(v191 + 12);
              if (v192 - 3 < 7 || v192 < 2)
                goto LABEL_355;
              if (v192 != 2)
                turi::apply_binary_op_ff();
              v194 = *(_QWORD *)v191;
              if (*(char *)(v194 + 31) < 0)
              {
                v195 = *(const void **)(v194 + 8);
                v196 = *(_QWORD *)(v194 + 16);
              }
              else
              {
                v195 = (const void *)(v194 + 8);
                v196 = *(unsigned __int8 *)(v194 + 31);
              }
              v244 = *(double *)v190;
              v245 = (const void *)(*(_QWORD *)&v244 + 8);
              v246 = *(unsigned __int8 *)(*(_QWORD *)&v244 + 31);
              v248 = *(const void **)(*(_QWORD *)&v244 + 8);
              v247 = *(_QWORD *)(*(_QWORD *)&v244 + 16);
              if ((v246 & 0x80u) == 0)
                v249 = v246;
              else
                v249 = v247;
              if ((v246 & 0x80u) == 0)
                v250 = v245;
              else
                v250 = v248;
              if (v249 >= v196)
                v251 = v196;
              else
                v251 = v249;
              v252 = memcmp(v195, v250, v251);
              v253 = v196 < v249;
              if (v252)
                v253 = v252 < 0;
              if (v253)
                return (v8 >> v7) & 1;
              goto LABEL_356;
            case 3:
              v197 = *(unsigned __int8 *)(v191 + 12);
              if (v197 > 9)
                turi::apply_binary_op_ff();
              if (v197 != 3)
                goto LABEL_355;
              v198 = *(double *)v190;
              v199 = *(unint64_t **)(*(_QWORD *)v191 + 8);
              v200 = *(_QWORD *)(*(_QWORD *)v191 + 16);
              v201 = *(double **)(*(_QWORD *)&v198 + 8);
              v202 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v198 + 16) - (_QWORD)v201) >> 3;
              v203 = v200 - (_QWORD)v199;
              v255 = v203 == 0;
              v204 = v203 >> 3;
              if (v255)
                goto LABEL_339;
              if (v204 <= 1)
                v205 = 1;
              else
                v205 = v204;
              v206 = v202;
              break;
            case 4:
              v207 = *(unsigned __int8 *)(v191 + 12);
              if (v207 > 9)
                turi::apply_binary_op_ff();
              if (v207 != 4)
                goto LABEL_355;
              if (turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v263, (uint64_t *)(*(_QWORD *)v191 + 8), (_QWORD *)(*(_QWORD *)v190 + 8)))
              {
                return (v8 >> v7) & 1;
              }
              goto LABEL_356;
            case 5:
              if (*(unsigned __int8 *)(v191 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_355;
            case 6:
              switch(*(_BYTE *)(v191 + 12))
              {
                case 0:
                  if (*(_QWORD *)v191 < (uint64_t)(*(_QWORD *)v190 << 8) >> 8)
                    return (v8 >> v7) & 1;
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v191;
                  if ((double)*(int *)(v190 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v190 << 8) >> 8) > *(double *)v191)
                    return (v8 >> v7) & 1;
                  goto LABEL_356;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  v241 = (uint64_t)(*(_QWORD *)v191 << 8) >> 8;
                  if (v241 < (uint64_t)(*(_QWORD *)v190 << 8) >> 8
                    || v241 == (uint64_t)(*(_QWORD *)v190 << 8) >> 8 && *(_DWORD *)(v191 + 8) < *(_DWORD *)(v190 + 8))
                  {
                    return (v8 >> v7) & 1;
                  }
                  goto LABEL_356;
                default:
                  turi::apply_binary_op_ff();
              }
            case 7:
              if (*(unsigned __int8 *)(v191 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_355;
            case 8:
              if (*(unsigned __int8 *)(v191 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_355;
            case 9:
              if (*(unsigned __int8 *)(v191 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
LABEL_355:
              turi::flexible_type_fail(0);
              goto LABEL_356;
            default:
              turi::apply_binary_op_ff();
          }
          while (v206)
          {
            a4.n128_u64[0] = *v199;
            if (*(double *)v199 > *v201)
              break;
            if (*(double *)v199 < *v201)
              return (v8 >> v7) & 1;
            --v206;
            ++v199;
            ++v201;
            if (!--v205)
            {
LABEL_339:
              if (v204 < v202)
                return (v8 >> v7) & 1;
              break;
            }
          }
LABEL_356:
          v208 = *a3 + 16 * v7;
          v209 = *a2 + 16 * v7;
          switch(*(_BYTE *)(v208 + 12))
          {
            case 0:
              switch(*(_BYTE *)(v209 + 12))
              {
                case 0:
                  if (*(_QWORD *)v209 > *(_QWORD *)v208)
                    return ((v8 >> v7) & 1) == 0;
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v209;
                  v242 = (double)*(uint64_t *)v208;
                  goto LABEL_436;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  if (*(_QWORD *)v208 < (uint64_t)(*(_QWORD *)v209 << 8) >> 8)
                    return ((v8 >> v7) & 1) == 0;
                  goto LABEL_416;
                default:
                  turi::apply_binary_op_ff();
              }
            case 1:
              switch(*(_BYTE *)(v209 + 12))
              {
                case 0:
                  a4.n128_u64[0] = *(_QWORD *)v208;
                  if (*(double *)v208 < (double)*(uint64_t *)v209)
                    return ((v8 >> v7) & 1) == 0;
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v209;
                  v242 = *(double *)v208;
                  goto LABEL_436;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  v242 = *(double *)v208;
                  a4.n128_f64[0] = (double)*(int *)(v209 + 8) / 1000000.0
                                 + (double)((uint64_t)(*(_QWORD *)v209 << 8) >> 8);
LABEL_436:
                  if (a4.n128_f64[0] > v242)
                    return ((v8 >> v7) & 1) == 0;
                  goto LABEL_416;
                default:
                  turi::apply_binary_op_ff();
              }
            case 2:
              v210 = *(unsigned __int8 *)(v209 + 12);
              if (v210 - 3 < 7 || v210 < 2)
                goto LABEL_415;
              if (v210 != 2)
                turi::apply_binary_op_ff();
              v212 = *(double *)v208;
              v213 = *(_QWORD *)v209;
              v216 = *(const void **)(v213 + 8);
              v214 = v213 + 8;
              v215 = v216;
              v217 = *(char *)(v214 + 23);
              v220 = *(const void **)(*(_QWORD *)&v212 + 8);
              v218 = *(_QWORD *)&v212 + 8;
              v219 = v220;
              v221 = *(char *)(v218 + 23);
              if (v221 >= 0)
                v222 = *(unsigned __int8 *)(v218 + 23);
              else
                v222 = *(_QWORD *)(v218 + 8);
              if (v221 >= 0)
                v223 = (const void *)v218;
              else
                v223 = v219;
              if (v217 >= 0)
                v224 = *(unsigned __int8 *)(v214 + 23);
              else
                v224 = *(_QWORD *)(v214 + 8);
              if (v217 >= 0)
                v225 = (const void *)v214;
              else
                v225 = v215;
              if (v224 >= v222)
                v226 = v222;
              else
                v226 = v224;
              v227 = memcmp(v223, v225, v226);
              v228 = v222 < v224;
              if (v227)
                v228 = v227 < 0;
              if (v228)
                return ((v8 >> v7) & 1) == 0;
              goto LABEL_416;
            case 3:
              v230 = *(unsigned __int8 *)(v209 + 12);
              if (v230 > 9)
                turi::apply_binary_op_ff();
              if (v230 != 3)
                goto LABEL_415;
              v231 = *(double *)v208;
              v232 = *(unint64_t **)(*(_QWORD *)v209 + 8);
              v233 = *(_QWORD *)(*(_QWORD *)v209 + 16);
              v234 = *(double **)(*(_QWORD *)&v231 + 8);
              v235 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v231 + 16) - (_QWORD)v234) >> 3;
              v236 = v233 - (_QWORD)v232;
              v255 = v236 == 0;
              v237 = v236 >> 3;
              if (v255)
                goto LABEL_405;
              if (v237 <= 1)
                v238 = 1;
              else
                v238 = v237;
              v239 = v235;
              break;
            case 4:
              v229 = *(unsigned __int8 *)(v209 + 12);
              if (v229 > 9)
                turi::apply_binary_op_ff();
              if (v229 != 4)
                goto LABEL_415;
              if (turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v263, (uint64_t *)(*(_QWORD *)v209 + 8), (_QWORD *)(*(_QWORD *)v208 + 8)))
              {
                return ((v8 >> v7) & 1) == 0;
              }
              goto LABEL_416;
            case 5:
              if (*(unsigned __int8 *)(v209 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_415;
            case 6:
              switch(*(_BYTE *)(v209 + 12))
              {
                case 0:
                  if (*(_QWORD *)v209 > (uint64_t)(*(_QWORD *)v208 << 8) >> 8)
                    return ((v8 >> v7) & 1) == 0;
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v209;
                  if ((double)*(int *)(v208 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v208 << 8) >> 8) < *(double *)v209)
                    return ((v8 >> v7) & 1) == 0;
                  goto LABEL_416;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  v243 = (uint64_t)(*(_QWORD *)v209 << 8) >> 8;
                  if (v243 > (uint64_t)(*(_QWORD *)v208 << 8) >> 8
                    || v243 == (uint64_t)(*(_QWORD *)v208 << 8) >> 8 && *(_DWORD *)(v209 + 8) > *(_DWORD *)(v208 + 8))
                  {
                    return ((v8 >> v7) & 1) == 0;
                  }
                  goto LABEL_416;
                default:
                  turi::apply_binary_op_ff();
              }
            case 7:
              if (*(unsigned __int8 *)(v209 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_415;
            case 8:
              if (*(unsigned __int8 *)(v209 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_415;
            case 9:
              if (*(unsigned __int8 *)(v209 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
LABEL_415:
              turi::flexible_type_fail(0);
              goto LABEL_416;
            default:
              turi::apply_binary_op_ff();
          }
          while (v239)
          {
            a4.n128_u64[0] = *v232;
            if (*(double *)v232 > *v234)
              break;
            if (*(double *)v232 < *v234)
              goto LABEL_416;
            --v239;
            ++v232;
            ++v234;
            if (!--v238)
            {
LABEL_405:
              if (v237 <= v235)
                goto LABEL_416;
              return ((v8 >> v7) & 1) == 0;
            }
          }
        }
        return ((v8 >> v7) & 1) == 0;
      }
LABEL_168:
      v123 = (unsigned __int8 *)(*a3 + 16 * v7);
      switch(byte_254FEEC0C)
      {
        case 0:
          switch(v123[12])
          {
            case 0u:
              if (*(_QWORD *)v123 != turi::FLEX_UNDEFINED)
                return (v8 >> v7) & 1;
              goto LABEL_416;
            case 1u:
              a4.n128_u64[0] = *(_QWORD *)v123;
              v125 = turi::FLEX_UNDEFINED;
              goto LABEL_280;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v8 >> v7) & 1;
            case 6u:
              if (turi::FLEX_UNDEFINED != (uint64_t)(*(_QWORD *)v123 << 8) >> 8 || *((_DWORD *)v123 + 2))
                return (v8 >> v7) & 1;
              goto LABEL_416;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(v123[12])
          {
            case 0u:
              a4.n128_u64[0] = turi::FLEX_UNDEFINED;
              v125 = *(_QWORD *)v123;
LABEL_280:
              v185 = (double)v125;
              goto LABEL_281;
            case 1u:
              a4.n128_u64[0] = *(_QWORD *)v123;
              v185 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_281:
              if (a4.n128_f64[0] != v185)
                return (v8 >> v7) & 1;
              goto LABEL_416;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v8 >> v7) & 1;
            case 6u:
              v186 = (double)*((int *)v123 + 2) / 1000000.0
                   + (double)((uint64_t)(*(_QWORD *)v123 << 8) >> 8)
                   - *(double *)&turi::FLEX_UNDEFINED;
              goto LABEL_289;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v126 = v123[12];
          if (v126 == 2)
          {
            v127 = *(_QWORD *)v123;
            v128 = *(char *)(*(_QWORD *)v123 + 31);
            v129 = *(unsigned __int8 *)(*(_QWORD *)v123 + 31);
            if (v128 < 0)
              v130 = *(_QWORD *)(v127 + 16);
            else
              v130 = v129;
            if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
              v187 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
            else
              v187 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
            if (v130 == v187)
            {
              v188 = (unsigned __int8 *)(v127 + 8);
              if ((v129 & 0x80) != 0)
                v188 = *(unsigned __int8 **)v188;
              v189 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
              if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
                v189 = *(unsigned __int8 **)v189;
              if ((v129 & 0x80) != 0)
              {
                if (!memcmp(v188, v189, v130))
                  goto LABEL_416;
              }
              else
              {
                if (!v130)
                  goto LABEL_416;
                while (*v188 == *v189)
                {
                  ++v188;
                  ++v189;
                  if (!--v130)
                    goto LABEL_416;
                }
              }
            }
          }
          else
          {
            v255 = v126 > 9 || v126 == 2;
            if (v255)
              turi::apply_binary_op_ff();
          }
          return (v8 >> v7) & 1;
        case 3:
          v131 = v123[12];
          if (v131 == 3)
          {
            v134 = *(_QWORD *)v123 + 8;
            v132 = *(unint64_t **)v134;
            v133 = *(unint64_t **)(v134 + 8);
            v135 = ((uint64_t)v133 - *(_QWORD *)v134) >> 3;
            v136 = *(double **)(turi::FLEX_UNDEFINED + 8);
            if (v135 == (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v136) >> 3)
            {
              if (v133 == v132)
                goto LABEL_416;
              if (v135 <= 1)
                v135 = 1;
              while (1)
              {
                a4.n128_u64[0] = *v132;
                if (*(double *)v132 != *v136)
                  break;
                ++v136;
                ++v132;
                if (!--v135)
                  goto LABEL_416;
              }
            }
          }
          else if (v131 > 9 || v131 == 3)
          {
            turi::apply_binary_op_ff();
          }
          return (v8 >> v7) & 1;
        case 4:
          v137 = v123[12];
          if (v137 == 4)
          {
            if ((turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t *)(*(_QWORD *)v123 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)goto LABEL_416;
          }
          else if (v137 > 9 || v137 == 4)
          {
            turi::apply_binary_op_ff();
          }
          return (v8 >> v7) & 1;
        case 5:
          v138 = v123[12];
          if (v138 == 5)
          {
            if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t **)(*(_QWORD *)v123 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
            {
              goto LABEL_416;
            }
          }
          else if (v138 > 9 || v138 == 5)
          {
            turi::apply_binary_op_ff();
          }
          return (v8 >> v7) & 1;
        case 6:
          switch(v123[12])
          {
            case 0u:
              if (*(_QWORD *)v123 != turi::FLEX_UNDEFINED << 8 >> 8 || dword_254FEEC08)
                return (v8 >> v7) & 1;
              goto LABEL_416;
            case 1u:
              v186 = *(double *)v123 - ((double)dword_254FEEC08 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_289:
              a4.n128_f64[0] = fabs(v186);
              if (a4.n128_f64[0] >= 0.0000005)
                return (v8 >> v7) & 1;
              goto LABEL_416;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v8 >> v7) & 1;
            case 6u:
              if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v123) & 0xFFFFFFFFFFFFFFLL) != 0
                || *((_DWORD *)v123 + 2) != dword_254FEEC08)
              {
                return (v8 >> v7) & 1;
              }
              goto LABEL_416;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          v139 = v123[12];
          if (v139 == 7)
            goto LABEL_416;
          if (v139 > 9 || v139 == 7)
            turi::apply_binary_op_ff();
          return (v8 >> v7) & 1;
        case 8:
          v140 = v123[12];
          if (v140 == 8)
          {
            if (turi::image_type::operator==(*(_QWORD *)v123 + 8, turi::FLEX_UNDEFINED + 8))
              goto LABEL_416;
          }
          else if (v140 > 9 || v140 == 8)
          {
            turi::apply_binary_op_ff();
          }
          return (v8 >> v7) & 1;
        case 9:
          v141 = v123[12];
          if (v141 != 9)
          {
            if (v141 >= 9)
              turi::apply_binary_op_ff();
            return (v8 >> v7) & 1;
          }
          v142 = turi::FLEX_UNDEFINED;
          v143 = *(_QWORD **)v123;
          if (turi::FLEX_UNDEFINED == *(_QWORD *)v123)
            goto LABEL_416;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v143 + 1), turi::FLEX_UNDEFINED + 8))
            return (v8 >> v7) & 1;
          v145 = (char *)v143[3];
          v144 = (char *)v143[4];
          v146 = v144 - v145;
          if (v144 == v145)
            goto LABEL_416;
          if (!v143[1])
            goto LABEL_416;
          v147 = 1;
          do
          {
            v148 = *(_QWORD *)v145;
            v145 += 8;
            v147 *= v148;
          }
          while (v145 != v144);
          if (!v147)
            goto LABEL_416;
          v262 = 0;
          std::vector<unsigned long>::vector(&v263, v146 >> 3, &v262);
          v149 = v263;
          v150 = v264;
          v151 = **(_QWORD **)(v142 + 8);
          v152 = (char *)v264 - (char *)v263;
          v153 = v264 - v263;
          v154 = v153 - 1;
          if (v153 <= 1)
            v155 = 1;
          else
            v155 = v264 - v263;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 3:
      v16 = v9[12];
      if (v16 > 9)
        turi::apply_binary_op_ff();
      if (v16 != 3)
        goto LABEL_76;
      v19 = *(_QWORD *)v9 + 8;
      v17 = *(unint64_t **)v19;
      v18 = *(unint64_t **)(v19 + 8);
      v20 = ((uint64_t)v18 - *(_QWORD *)v19) >> 3;
      v21 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v20 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v21) >> 3)
        goto LABEL_76;
      if (v18 == v17)
        goto LABEL_168;
      if (v20 <= 1)
        v20 = 1;
      while (1)
      {
        a4.n128_u64[0] = *v17;
        if (*(double *)v17 != *v21)
          goto LABEL_76;
        ++v21;
        ++v17;
        if (!--v20)
          goto LABEL_168;
      }
    case 4:
      v22 = v9[12];
      if (v22 > 9)
        turi::apply_binary_op_ff();
      if (v22 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t *)(*(_QWORD *)v9 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        goto LABEL_168;
      }
      goto LABEL_76;
    case 5:
      v63 = v9[12];
      if (v63 > 9)
        turi::apply_binary_op_ff();
      if (v63 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v261, (uint64_t **)(*(_QWORD *)v9 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        goto LABEL_168;
      }
      goto LABEL_76;
    case 6:
      switch(v9[12])
      {
        case 0u:
          if (*(_QWORD *)v9 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FEEC08)
            goto LABEL_168;
          goto LABEL_76;
        case 1u:
          a4.n128_f64[0] = vabdd_f64(*(double *)v9, (double)dword_254FEEC08 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_167:
          if (a4.n128_f64[0] < 0.0000005)
            goto LABEL_168;
          goto LABEL_76;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v9) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)v9 + 2) == dword_254FEEC08)
          {
            goto LABEL_168;
          }
          goto LABEL_76;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v23 = v9[12];
      if (v23 < 7 || v23 - 8 < 2)
        goto LABEL_76;
      if (v23 != 7)
        turi::apply_binary_op_ff();
      goto LABEL_168;
    case 8:
      v64 = v9[12];
      if (v64 < 8)
        goto LABEL_76;
      if (v64 != 8)
      {
        if (v64 != 9)
          turi::apply_binary_op_ff();
        goto LABEL_76;
      }
      if (!turi::image_type::operator==(*(_QWORD *)v9 + 8, turi::FLEX_UNDEFINED + 8))
        goto LABEL_76;
      goto LABEL_168;
    case 9:
      v24 = v9[12];
      if (v24 < 9)
        goto LABEL_76;
      if (v24 != 9)
        turi::apply_binary_op_ff();
      v25 = turi::FLEX_UNDEFINED;
      v26 = *(_QWORD **)v9;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)v9)
        goto LABEL_168;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v26 + 1), turi::FLEX_UNDEFINED + 8))
        goto LABEL_76;
      v28 = (char *)v26[3];
      v27 = (char *)v26[4];
      v29 = v27 - v28;
      if (v27 == v28)
        goto LABEL_168;
      if (!v26[1])
        goto LABEL_168;
      v30 = 1;
      do
      {
        v31 = *(_QWORD *)v28;
        v28 += 8;
        v30 *= v31;
      }
      while (v28 != v27);
      if (!v30)
        goto LABEL_168;
      v262 = 0;
      std::vector<unsigned long>::vector(&v263, v29 >> 3, &v262);
      v32 = v263;
      v33 = v264;
      v34 = **(_QWORD **)(v25 + 8);
      v35 = (char *)v264 - (char *)v263;
      v36 = v264 - v263;
      v37 = v36 - 1;
      if (v36 <= 1)
        v38 = 1;
      else
        v38 = v264 - v263;
      while (2)
      {
        if (v33 == v32)
        {
          v46 = 0;
          v47 = *(double *)(*(_QWORD *)v26[1] + 8 * v26[9]);
        }
        else
        {
          v39 = 0;
          v40 = (uint64_t *)v26[6];
          v41 = v32;
          v42 = v38;
          do
          {
            v44 = *v41++;
            v43 = v44;
            v45 = *v40++;
            v39 += v45 * v43;
            --v42;
          }
          while (v42);
          v46 = 0;
          v47 = *(double *)(*(_QWORD *)v26[1] + 8 * (v26[9] + v39));
          v48 = *(uint64_t **)(v25 + 48);
          v49 = v32;
          v50 = v38;
          do
          {
            v52 = *v49++;
            v51 = v52;
            v53 = *v48++;
            v46 += v53 * v51;
            --v50;
          }
          while (v50);
        }
        v54 = *(double *)(v34 + 8 * (*(_QWORD *)(v25 + 72) + v46));
        if (v47 == v54)
        {
          v55 = v36;
          v56 = v36 - 1;
          if (v35 < 1)
            goto LABEL_59;
          v57 = v26[3];
          v58 = v32[v37] + 1;
          v32[v37] = v58;
          v59 = (v35 & 0xFFFFFFFFFFFFFFF8) - 16;
          v56 = v36 - 1;
          if (v58 < *(_QWORD *)(v57 + 8 * v37))
          {
            v55 = 1;
            v56 = v36 - 1;
LABEL_59:
            if (v56 < 0 || !v55)
              goto LABEL_61;
            continue;
          }
          while (1)
          {
            *(uint64_t *)((char *)v32 + v59 + 8) = 0;
            if (v56 <= 0)
              break;
            --v56;
            v60 = *(uint64_t *)((char *)v32 + v59) + 1;
            *(uint64_t *)((char *)v32 + v59) = v60;
            v61 = *(_QWORD *)(v57 + v59);
            v59 -= 8;
            if (v60 < v61)
            {
              v55 = 1;
              goto LABEL_59;
            }
          }
          v264 = v32;
          operator delete(v32);
        }
        else
        {
LABEL_61:
          if (v32)
          {
            v264 = v32;
            operator delete(v32);
          }
          if (v47 != v54)
            goto LABEL_76;
        }
        goto LABEL_168;
      }
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (v150 == v149)
    {
      v163 = 0;
      v164 = *(double *)(*(_QWORD *)v143[1] + 8 * v143[9]);
    }
    else
    {
      v156 = 0;
      v157 = (uint64_t *)v143[6];
      v158 = v149;
      v159 = v155;
      do
      {
        v161 = *v158++;
        v160 = v161;
        v162 = *v157++;
        v156 += v162 * v160;
        --v159;
      }
      while (v159);
      v163 = 0;
      v164 = *(double *)(*(_QWORD *)v143[1] + 8 * (v143[9] + v156));
      v165 = *(uint64_t **)(v142 + 48);
      v166 = v149;
      v167 = v155;
      do
      {
        v169 = *v166++;
        v168 = v169;
        v170 = *v165++;
        v163 += v170 * v168;
        --v167;
      }
      while (v167);
    }
    v171 = *(double *)(v151 + 8 * (*(_QWORD *)(v142 + 72) + v163));
    if (v164 != v171)
      break;
    v172 = v153;
    v173 = v153 - 1;
    if (v152 >= 1)
    {
      v174 = v143[3];
      v175 = v149[v154] + 1;
      v149[v154] = v175;
      v176 = (v152 & 0xFFFFFFFFFFFFFFF8) - 16;
      v173 = v153 - 1;
      if (v175 >= *(_QWORD *)(v174 + 8 * v154))
      {
        while (1)
        {
          *(uint64_t *)((char *)v149 + v176 + 8) = 0;
          if (v173 <= 0)
            break;
          --v173;
          v177 = *(uint64_t *)((char *)v149 + v176) + 1;
          *(uint64_t *)((char *)v149 + v176) = v177;
          v178 = *(_QWORD *)(v174 + v176);
          v176 -= 8;
          if (v177 < v178)
          {
            v172 = 1;
            goto LABEL_245;
          }
        }
        v264 = v149;
        operator delete(v149);
LABEL_416:
        if (++v7 >= a1[1])
          return 0;
        goto LABEL_3;
      }
      v172 = 1;
      v173 = v153 - 1;
    }
LABEL_245:
    ;
  }
  while ((v173 & 0x8000000000000000) == 0 && v172);
  if (v149)
  {
    v264 = v149;
    operator delete(v149);
  }
  if (v164 == v171)
    goto LABEL_416;
  return (v8 >> v7) & 1;
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(uint64_t a1, uint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void **v35;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(_BYTE *)(a1 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a1;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a1;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a1;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v35);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a1;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v35);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a1;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a1;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)a1 = v33;
    *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
    *((_BYTE *)a2 + 12) = 0;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  return a1;
}

{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  unint64_t *v37;
  unint64_t v38;
  void **v40;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(_BYTE *)(a1 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a1;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a1;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a1;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v40 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v40);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a1;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v40 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v40);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a1;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a1;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)a1 = v33;
    LODWORD(v33) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(a1 + 12) = v33;
    v34 = v33 > 9;
    v35 = (1 << v33) & 0x33C;
    if (!v34 && v35 != 0)
    {
      v37 = *(unint64_t **)a1;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
    }
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  return a1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, __n128 a6)
{
  __n128 v11;
  uint64_t result;
  __n128 v13;
  __n128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v17 = a2;
  v18 = a1;
  v15 = a4;
  v16 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(a1, a2, a3, a5, a6);
  result = turi::query_eval::less_than_full_function::compare(a5, (_QWORD *)(*a4 + 8), (_QWORD *)(*a3 + 8), v11);
  if ((_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v16, &v15);
    result = turi::query_eval::less_than_full_function::compare(a5, (_QWORD *)(*v16 + 8), (_QWORD *)(*a2 + 8), v13);
    if ((_DWORD)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v17, &v16);
      result = turi::query_eval::less_than_full_function::compare(a5, (_QWORD *)(*v17 + 8), (_QWORD *)(*(_QWORD *)a1 + 8), v14);
      if ((_DWORD)result)
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v18, &v17);
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, __n128 a7)
{
  __n128 v13;
  uint64_t result;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;

  v21 = a2;
  v22 = a1;
  v19 = a4;
  v20 = a3;
  v18 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(a1, a2, a3, a4, a6, a7);
  result = turi::query_eval::less_than_full_function::compare(a6, (_QWORD *)(*a5 + 8), (_QWORD *)(*a4 + 8), v13);
  if ((_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v19, &v18);
    result = turi::query_eval::less_than_full_function::compare(a6, (_QWORD *)(*v19 + 8), (_QWORD *)(*a3 + 8), v15);
    if ((_DWORD)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v20, &v19);
      result = turi::query_eval::less_than_full_function::compare(a6, (_QWORD *)(*v20 + 8), (_QWORD *)(*a2 + 8), v16);
      if ((_DWORD)result)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v21, &v20);
        result = turi::query_eval::less_than_full_function::compare(a6, (_QWORD *)(*v21 + 8), (_QWORD *)(*(_QWORD *)a1 + 8), v17);
        if ((_DWORD)result)
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v22, &v21);
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, __n128 a5)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v16;
  uint64_t *v17;

  v17 = a1;
  if (a1 != (uint64_t *)a2)
  {
    v8 = a1;
    v9 = (a2 - (uint64_t)a1) >> 5;
    if (a2 - (uint64_t)a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v8, a4, v9, v12, a5);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    v16 = a2;
    if (a2 != a3)
    {
      v13 = a2;
      do
      {
        if (turi::query_eval::less_than_full_function::compare(a4, (_QWORD *)(*(_QWORD *)v13 + 8), (_QWORD *)(*v17 + 8), a5))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v16, &v17);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v17, a4, v9, (uint64_t)v17, v14);
        }
        v13 = v16 + 32;
        v16 = v13;
      }
      while (v13 != a3);
      v8 = v17;
    }
    std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>((uint64_t)v8, a2, a4);
    return v16;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _BYTE v18[13];
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = a4;
    v7 = result;
    v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (a4 - result) >> 5)
    {
      v11 = (a4 - result) >> 4;
      v12 = v11 + 1;
      v13 = (uint64_t *)(result + 32 * (v11 + 1));
      v14 = v11 + 2;
      if (v11 + 2 < a3
        && turi::query_eval::less_than_full_function::compare(a2, (_QWORD *)(*v13 + 8), (_QWORD *)(v13[4] + 8), a5))
      {
        v13 += 4;
        v12 = v14;
      }
      result = turi::query_eval::less_than_full_function::compare(a2, (_QWORD *)(*v13 + 8), (_QWORD *)(*(_QWORD *)v6 + 8), a5);
      if ((result & 1) == 0)
      {
        *(_QWORD *)&v18[5] = *(_QWORD *)(v6 + 5);
        *(_QWORD *)v18 = *(_QWORD *)v6;
        v18[12] = *(_BYTE *)(v6 + 12);
        *(_BYTE *)(v6 + 12) = 0;
        v19 = *(_OWORD *)(v6 + 16);
        do
        {
          v15 = (uint64_t)v13;
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v6, v13);
          if (v8 < v12)
            break;
          v17 = (2 * v12) | 1;
          v13 = (uint64_t *)(v7 + 32 * v17);
          v12 = 2 * v12 + 2;
          if (v12 >= a3)
          {
            v12 = v17;
          }
          else if (turi::query_eval::less_than_full_function::compare(a2, (_QWORD *)(*v13 + 8), (_QWORD *)(v13[4] + 8), v16))
          {
            v13 += 4;
          }
          else
          {
            v12 = v17;
          }
          v6 = v15;
        }
        while (!turi::query_eval::less_than_full_function::compare(a2, (_QWORD *)(*v13 + 8), (_QWORD *)(*(_QWORD *)v18 + 8), v16));
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v15, (uint64_t *)v18);
        return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v18);
      }
    }
  }
  return result;
}

void sub_218095D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  __n128 v10;
  _BYTE v12[13];
  __n128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a2 - result >= 33)
  {
    v4 = result;
    v5 = (unint64_t)(a2 - result) >> 5;
    v6 = (__n128 *)(result + 16);
    v7 = (uint64_t *)(a2 - 32);
    do
    {
      *(_QWORD *)&v12[5] = *(_QWORD *)(v4 + 5);
      *(_QWORD *)v12 = *(_QWORD *)v4;
      v12[12] = *(_BYTE *)(v4 + 12);
      *(_BYTE *)(v4 + 12) = 0;
      v13 = *v6;
      v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(v4, a3, v5, v13);
      v9 = v8;
      if (v7 == v8)
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v8, (uint64_t *)v12);
      }
      else
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v8, v7);
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v7, (uint64_t *)v12);
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(v4, (uint64_t)(v9 + 4), a3, ((uint64_t)v9 - v4 + 32) >> 5, v10);
      }
      result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v12);
      v7 -= 4;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_218095E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v7 = 0;
  v8 = a3 - 2;
  if (a3 < 2)
    v8 = a3 - 1;
  v9 = v8 >> 1;
  do
  {
    v10 = (uint64_t *)(a1 + 32 * v7 + 32);
    v11 = (2 * v7) | 1;
    v12 = 2 * v7 + 2;
    if (v12 < a3
      && turi::query_eval::less_than_full_function::compare(a2, (_QWORD *)(*v10 + 8), (_QWORD *)(*(_QWORD *)(a1 + 32 * v7 + 64) + 8), a4))
    {
      v10 += 4;
      v11 = v12;
    }
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, v10);
    a1 = (uint64_t)v10;
    v7 = v11;
  }
  while (v11 <= v9);
  return v10;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element_less_than &,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *>(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, __n128 a5)
{
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  _BYTE v14[13];
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = result;
    v9 = v5 >> 1;
    v10 = (uint64_t *)(result + 32 * (v5 >> 1));
    v11 = (_QWORD *)(a2 - 32);
    result = turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*v10 + 8), (_QWORD *)(*(_QWORD *)(a2 - 32) + 8), a5);
    if ((_DWORD)result)
    {
      *(_QWORD *)&v14[5] = *(_QWORD *)((char *)v11 + 5);
      *(_QWORD *)v14 = *v11;
      v14[12] = *(_BYTE *)(a2 - 20);
      *(_BYTE *)(a2 - 20) = 0;
      v15 = *(_OWORD *)(a2 - 16);
      do
      {
        v12 = (uint64_t)v10;
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v11, v10);
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (uint64_t *)(v8 + 32 * v9);
        v11 = (_QWORD *)v12;
      }
      while ((turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(*v10 + 8), (_QWORD *)(*(_QWORD *)v14 + 8), v13) & 1) != 0);
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v12, (uint64_t *)v14);
      return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v14);
    }
  }
  return result;
}

void sub_218096068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v3 = *a2;
  v4 = (a2[1] - *a2) >> 5;
  if (v4 > a3)
  {
    v7 = a3 - 1;
    if (a3 != 1)
    {
      v8 = 0;
      v9 = 0;
      v10 = (double)v4 / (double)a3;
      do
      {
        v11 = (unint64_t)(v10 * (double)v9);
        v12 = (a2[1] - *a2) >> 5;
        if (v12 <= v11)
          v11 = v12 - 1;
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(*a2 + v8, (uint64_t *)(*a2 + 32 * v11));
        ++v9;
        v8 += 32;
      }
      while (v7 != v9);
      v3 = *a2;
      v4 = (a2[1] - *a2) >> 5;
    }
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v3 + 32 * v7, (uint64_t *)(v3 + 32 * v4 - 32));
    return std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::resize(a2, a3);
  }
  return result;
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  result = a1[1];
  v4 = (result - *a1) >> 5;
  if (a2 > v4)
    return std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__append(a1, a2 - v4);
  if (a2 < v4)
  {
    v5 = *a1 + 32 * a2;
    while (result != v5)
      result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(result - 32);
    a1[1] = v5;
  }
  return result;
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(_BYTE *)(v7 + 12) = 0;
        *(_QWORD *)(v7 + 16) = -1;
        *(_QWORD *)(v7 + 24) = -1;
        v7 += 32;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v17[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(result, v12);
    else
      v13 = 0;
    v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    v16 = &v15[32 * a2];
    do
    {
      *(_QWORD *)v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      v15[12] = 0;
      *((_QWORD *)v15 + 2) = -1;
      *((_QWORD *)v15 + 3) = -1;
      v15 += 32;
    }
    while (v15 != v16);
    v17[2] = v16;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element> &>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void sub_218096540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  _QWORD *result;
  __n128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  unsigned int v43;
  unint64_t v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  double v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  BOOL v89;
  double v90;
  int v91;
  size_t v92;
  size_t v93;
  unsigned int v94;
  double v95;
  double *v96;
  double *v97;
  unint64_t v98;
  double *v99;
  unsigned int v100;
  double v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  void *v123;
  void *v124;
  unsigned int v125;
  unint64_t v126;
  void *v127;
  unint64_t v128;
  unint64_t v129;
  double v130;
  double v131;
  double v132;
  uint64_t v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  int64x2_t v147;
  int64x2_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  BOOL v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  BOOL v156;
  unint64_t v157;
  unint64_t v158;
  BOOL v159;
  void *v160;
  void *v161;
  unsigned int v162;
  unint64_t v163;
  unint64_t v164;
  BOOL v165;
  void *v166;
  unint64_t v167;
  unint64_t v168;
  BOOL v169;
  unint64_t v170;
  unint64_t v171;
  BOOL v172;
  uint64_t *v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  int64x2_t v186;
  int64x2_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  BOOL v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  BOOL v195;
  unint64_t v196;
  unint64_t v197;
  BOOL v198;
  void *v199;
  void *v200;
  unsigned int v201;
  unint64_t v202;
  unint64_t v203;
  BOOL v204;
  void *v205;
  unint64_t v206;
  unint64_t v207;
  BOOL v208;
  unint64_t v209;
  unint64_t v210;
  BOOL v211;
  double v212;
  _QWORD *v213;
  char v214;
  uint64_t v215;
  void **v216;
  uint64_t *v217;
  uint64_t *v218;
  int64x2_t v219;
  uint64_t v220;

  v220 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  v9 = a2[1];
  if (v9 == v8)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v8 = *a3;
    v9 = a3[1];
    v11 = ((char *)v9 - (char *)*a3) >> 5;
    return std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(a4, v8, v9, v11);
  }
  v11 = ((char *)v9 - (char *)v8) >> 5;
  v12 = (char *)a3[1] - (char *)*a3;
  if (!v12)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(a4, v8, v9, v11);
  }
  v213 = a4;
  result = std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::vector(a4, v11 + (v12 >> 5));
  v15 = *a2;
  v16 = a2[1];
  if (v16 == *a2)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v15 = a2[1];
  }
  else
  {
    v17 = *a3;
    if (a3[1] != *a3)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = (_QWORD *)(a1 + 80);
      while (1)
      {
        if ((turi::query_eval::less_than_full_function::compare(v21, (_QWORD *)(v15[4 * v18] + 8), (_QWORD *)(v17[4 * v19] + 8), v14) & 1) != 0)
        {
LABEL_7:
          v22 = (uint64_t)&(*a2)[4 * v18];
          v23 = *(_QWORD *)v22;
          v24 = *(_DWORD *)(v22 + 8);
          v25 = *(unsigned __int8 *)(v22 + 12);
          *(_BYTE *)(v22 + 12) = 0;
          v26 = (uint64_t)&(*a2)[4 * v18];
          v27 = *(_QWORD *)(v26 + 16);
          v28 = *a3;
          if (v19)
            v29 = v28[4 * v19 - 2];
          else
            v29 = 0;
          v32 = *(_QWORD *)(v26 + 24);
          v33 = v28[4 * v19 + 3];
          v89 = v33 != 0;
          v34 = v33 - 1;
          if (!v89)
            v34 = 0;
          v217 = (uint64_t *)v23;
          LODWORD(v218) = v24;
          BYTE4(v218) = v25;
          if (v25 <= 9 && ((1 << v25) & 0x33C) != 0)
          {
            do
              v36 = __ldaxr((unint64_t *)v23);
            while (__stlxr(v36 + 1, (unint64_t *)v23));
          }
          v219.i64[0] = v29 + v27;
          v219.i64[1] = v34 + v32;
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(*v213 + 32 * v20, (uint64_t *)&v217);
          result = (_QWORD *)turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)&v217);
          switch(v25)
          {
            case 2u:
              do
                v37 = __ldaxr((unint64_t *)v23);
              while (__stlxr(v37 - 1, (unint64_t *)v23));
              if (v23 && v37 == 1)
              {
                v38 = 0x1012C404EF22A49;
                if (*(char *)(v23 + 31) < 0)
                {
                  operator delete(*(void **)(v23 + 8));
                  v38 = 0x1012C404EF22A49;
                }
                goto LABEL_54;
              }
              break;
            case 3u:
              do
                v44 = __ldaxr((unint64_t *)v23);
              while (__stlxr(v44 - 1, (unint64_t *)v23));
              if (v23 && v44 == 1)
              {
                v45 = *(void **)(v23 + 8);
                v38 = 0x1080C409938AC02;
                if (v45)
                {
                  *(_QWORD *)(v23 + 16) = v45;
                  operator delete(v45);
                  v38 = 0x1080C409938AC02;
                }
                goto LABEL_54;
              }
              break;
            case 4u:
              do
                v39 = __ldaxr((unint64_t *)v23);
              while (__stlxr(v39 - 1, (unint64_t *)v23));
              if (v23 && v39 == 1)
              {
                v216 = (void **)(v23 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v216);
                goto LABEL_48;
              }
              break;
            case 5u:
              do
                v46 = __ldaxr((unint64_t *)v23);
              while (__stlxr(v46 - 1, (unint64_t *)v23));
              if (v23 && v46 == 1)
              {
                v216 = (void **)(v23 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v216);
LABEL_48:
                v38 = 0x1020C405E66F15BLL;
                goto LABEL_54;
              }
              break;
            case 8u:
              do
                v47 = __ldaxr((unint64_t *)v23);
              while (__stlxr(v47 - 1, (unint64_t *)v23));
              if (v23 && v47 == 1)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
                v43 = -235920773;
                goto LABEL_53;
              }
              break;
            case 9u:
              do
                v40 = __ldaxr((unint64_t *)v23);
              while (__stlxr(v40 - 1, (unint64_t *)v23));
              if (v23 && v40 == 1)
              {
                v41 = *(void **)(v23 + 48);
                if (v41)
                {
                  *(_QWORD *)(v23 + 56) = v41;
                  operator delete(v41);
                }
                v42 = *(void **)(v23 + 24);
                if (v42)
                {
                  *(_QWORD *)(v23 + 32) = v42;
                  operator delete(v42);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 + 8);
                v43 = 2071181815;
LABEL_53:
                v38 = v43 | 0x1030C4000000000;
LABEL_54:
                result = (_QWORD *)MEMORY[0x219A19A08](v23, v38);
              }
              break;
            default:
              break;
          }
          ++v18;
        }
        else
        {
          v30 = (uint64_t)&(*a3)[4 * v19];
          v31 = (unsigned __int8 *)&(*a2)[4 * v18];
          switch(*(_BYTE *)(v30 + 12))
          {
            case 0:
              switch(v31[12])
              {
                case 0u:
                  if (*(_QWORD *)v31 != *(_QWORD *)v30)
                    goto LABEL_126;
                  goto LABEL_7;
                case 1u:
                  v101 = *(double *)v31;
                  v102 = *(_QWORD *)v30;
                  goto LABEL_186;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_126;
                case 6u:
                  if (*(_QWORD *)v30 == (uint64_t)(*(_QWORD *)v31 << 8) >> 8 && !*((_DWORD *)v31 + 2))
                    goto LABEL_7;
                  goto LABEL_126;
                default:
                  goto LABEL_343;
              }
            case 1:
              switch(v31[12])
              {
                case 0u:
                  v101 = *(double *)v30;
                  v102 = *(_QWORD *)v31;
LABEL_186:
                  v131 = (double)v102;
                  goto LABEL_187;
                case 1u:
                  v101 = *(double *)v31;
                  v131 = *(double *)v30;
LABEL_187:
                  if (v101 != v131)
                    goto LABEL_126;
                  goto LABEL_7;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_126;
                case 6u:
                  v130 = vabdd_f64((double)*((int *)v31 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v31 << 8) >> 8), *(double *)v30);
                  goto LABEL_191;
                default:
                  goto LABEL_343;
              }
            case 2:
              v88 = v31[12];
              v89 = v88 - 3 >= 7 && v88 >= 2;
              if (!v89)
                goto LABEL_126;
              if (v88 != 2)
                goto LABEL_343;
              v90 = *(double *)v31;
              v91 = *(char *)(*(_QWORD *)v31 + 31);
              v92 = *(unsigned __int8 *)(*(_QWORD *)v31 + 31);
              if (v91 < 0)
                v93 = *(_QWORD *)(*(_QWORD *)&v90 + 16);
              else
                v93 = v92;
              v132 = *(double *)v30;
              if (*(char *)(*(_QWORD *)&v132 + 31) < 0)
                v133 = *(_QWORD *)(*(_QWORD *)&v132 + 16);
              else
                v133 = *(unsigned __int8 *)(*(_QWORD *)&v132 + 31);
              if (v93 != v133)
                goto LABEL_126;
              v134 = (unsigned __int8 *)(*(_QWORD *)&v90 + 8);
              if ((v92 & 0x80) != 0)
                v134 = *(unsigned __int8 **)v134;
              v135 = (unsigned __int8 *)(*(_QWORD *)&v132 + 8);
              if ((*(_BYTE *)(*(_QWORD *)&v132 + 31) & 0x80) != 0)
                v135 = *(unsigned __int8 **)v135;
              if ((v92 & 0x80) != 0)
              {
                if (memcmp(v134, v135, v93))
                  goto LABEL_126;
              }
              else
              {
                if (!v93)
                  goto LABEL_7;
                do
                {
                  if (*v134 != *v135)
                    goto LABEL_126;
                  ++v134;
                  ++v135;
                  --v93;
                }
                while (v93);
              }
              goto LABEL_7;
            case 3:
              v94 = v31[12];
              if (v94 > 9)
                goto LABEL_343;
              if (v94 != 3)
                goto LABEL_126;
              v95 = *(double *)v30;
              v96 = *(double **)(*(_QWORD *)v31 + 8);
              v97 = *(double **)(*(_QWORD *)v31 + 16);
              v98 = v97 - v96;
              v99 = *(double **)(*(_QWORD *)&v95 + 8);
              if (v98 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v95 + 16) - (_QWORD)v99) >> 3)
                goto LABEL_126;
              if (v97 == v96)
                goto LABEL_7;
              if (v98 <= 1)
                v98 = 1;
              while (*v96 == *v99)
              {
                ++v99;
                ++v96;
                if (!--v98)
                  goto LABEL_7;
              }
              goto LABEL_126;
            case 4:
              v48 = v31[12];
              if (v48 > 9)
                goto LABEL_343;
              if (v48 != 4)
                goto LABEL_126;
              v49 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v214, (uint64_t *)(*(_QWORD *)v31 + 8), (_QWORD *)(*(_QWORD *)v30 + 8));
              goto LABEL_176;
            case 5:
              v103 = v31[12];
              if (v103 > 9)
                goto LABEL_343;
              if (v103 != 5)
                goto LABEL_126;
              v49 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v214, (uint64_t **)(*(_QWORD *)v31 + 8), (uint64_t **)(*(_QWORD *)v30 + 8));
              goto LABEL_176;
            case 6:
              switch(v31[12])
              {
                case 0u:
                  if (*(_QWORD *)v31 == (uint64_t)(*(_QWORD *)v30 << 8) >> 8 && !*(_DWORD *)(v30 + 8))
                    goto LABEL_7;
                  goto LABEL_126;
                case 1u:
                  v130 = vabdd_f64(*(double *)v31, (double)*(int *)(v30 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v30 << 8) >> 8));
LABEL_191:
                  if (v130 >= 0.0000005)
                    goto LABEL_126;
                  goto LABEL_7;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_126;
                case 6u:
                  if (((*(_QWORD *)v30 ^ *(_QWORD *)v31) & 0xFFFFFFFFFFFFFFLL) != 0
                    || *((_DWORD *)v31 + 2) != *(_DWORD *)(v30 + 8))
                  {
                    goto LABEL_126;
                  }
                  goto LABEL_7;
                default:
                  goto LABEL_343;
              }
            case 7:
              v100 = v31[12];
              if (v100 < 7 || v100 - 8 < 2)
                goto LABEL_126;
              if (v100 != 7)
                goto LABEL_343;
              goto LABEL_7;
            case 8:
              v104 = v31[12];
              if (v104 < 8 || v104 == 9)
                goto LABEL_126;
              if (v104 != 8)
                goto LABEL_343;
              v49 = turi::image_type::operator==(*(_QWORD *)v31 + 8, *(_QWORD *)v30 + 8);
LABEL_176:
              if (!v49)
                goto LABEL_126;
              goto LABEL_7;
            case 9:
              v50 = v31[12];
              if (v50 < 9)
                goto LABEL_126;
              if (v50 != 9)
              {
LABEL_343:
                result = (_QWORD *)turi::flexible_type_fail(0);
                __break(1u);
                return result;
              }
              v51 = *(double *)v30;
              v52 = *(_QWORD **)v31;
              if (*(_QWORD *)&v51 == *(_QWORD *)v31)
                goto LABEL_7;
              v212 = v51;
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v52 + 1), *(_QWORD *)&v51 + 8))
                goto LABEL_126;
              v54 = (char *)v52[3];
              v53 = (char *)v52[4];
              v55 = v53 - v54;
              if (v53 == v54)
                goto LABEL_7;
              if (!v52[1])
                goto LABEL_7;
              v56 = 1;
              do
              {
                v57 = *(_QWORD *)v54;
                v54 += 8;
                v56 *= v57;
              }
              while (v54 != v53);
              if (!v56)
                goto LABEL_7;
              v215 = 0;
              std::vector<unsigned long>::vector(&v217, v55 >> 3, &v215);
              v58 = v217;
              v59 = v218;
              v60 = **(_QWORD **)(*(_QWORD *)&v212 + 8);
              v61 = (char *)v218 - (char *)v217;
              v62 = v218 - v217;
              v63 = v62 - 1;
              if (v62 <= 1)
                v64 = 1;
              else
                v64 = v218 - v217;
              do
              {
                if (v59 == v58)
                {
                  v72 = 0;
                  v73 = *(double *)(*(_QWORD *)v52[1] + 8 * v52[9]);
                }
                else
                {
                  v65 = 0;
                  v66 = (uint64_t *)v52[6];
                  v67 = v58;
                  v68 = v64;
                  do
                  {
                    v70 = *v67++;
                    v69 = v70;
                    v71 = *v66++;
                    v65 += v71 * v69;
                    --v68;
                  }
                  while (v68);
                  v72 = 0;
                  v73 = *(double *)(*(_QWORD *)v52[1] + 8 * (v52[9] + v65));
                  v74 = *(uint64_t **)(*(_QWORD *)&v212 + 48);
                  v75 = v58;
                  v76 = v64;
                  do
                  {
                    v78 = *v75++;
                    v77 = v78;
                    v79 = *v74++;
                    v72 += v79 * v77;
                    --v76;
                  }
                  while (v76);
                }
                v80 = *(double *)(v60 + 8 * (*(_QWORD *)(*(_QWORD *)&v212 + 72) + v72));
                if (v73 != v80)
                  break;
                v81 = v62;
                v82 = v62 - 1;
                if (v61 >= 1)
                {
                  v83 = v52[3];
                  v84 = v58[v63] + 1;
                  v58[v63] = v84;
                  v85 = (v61 & 0xFFFFFFFFFFFFFFF8) - 16;
                  v82 = v62 - 1;
                  if (v84 >= *(_QWORD *)(v83 + 8 * v63))
                  {
                    while (1)
                    {
                      *(uint64_t *)((char *)v58 + v85 + 8) = 0;
                      if (v82 <= 0)
                        break;
                      --v82;
                      v86 = *(uint64_t *)((char *)v58 + v85) + 1;
                      *(uint64_t *)((char *)v58 + v85) = v86;
                      v87 = *(_QWORD *)(v83 + v85);
                      v85 -= 8;
                      if (v86 < v87)
                      {
                        v81 = 1;
                        goto LABEL_85;
                      }
                    }
                    v218 = v58;
                    operator delete(v58);
                    goto LABEL_7;
                  }
                  v81 = 1;
                  v82 = v62 - 1;
                }
LABEL_85:
                ;
              }
              while ((v82 & 0x8000000000000000) == 0 && v81);
              if (v58)
              {
                v218 = v58;
                operator delete(v58);
              }
              if (v73 == v80)
                goto LABEL_7;
LABEL_126:
              v106 = (uint64_t)&(*a3)[4 * v19];
              v107 = *(_QWORD *)v106;
              v108 = *(_DWORD *)(v106 + 8);
              v109 = *(unsigned __int8 *)(v106 + 12);
              *(_BYTE *)(v106 + 12) = 0;
              v110 = *a2;
              if (v18)
                v111 = v110[4 * v18 - 2];
              else
                v111 = 0;
              v112 = (uint64_t)&(*a3)[4 * v19];
              v113 = *(_QWORD *)(v112 + 16);
              v114 = *(_QWORD *)(v112 + 24);
              v115 = v110[4 * v18 + 3];
              v89 = v115 != 0;
              v116 = v115 - 1;
              if (!v89)
                v116 = 0;
              v217 = (uint64_t *)v107;
              LODWORD(v218) = v108;
              BYTE4(v218) = v109;
              if (v109 <= 9 && ((1 << v109) & 0x33C) != 0)
              {
                do
                  v118 = __ldaxr((unint64_t *)v107);
                while (__stlxr(v118 + 1, (unint64_t *)v107));
              }
              v219.i64[0] = v111 + v113;
              v219.i64[1] = v116 + v114;
              turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(*v213 + 32 * v20, (uint64_t *)&v217);
              result = (_QWORD *)turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)&v217);
              switch(v109)
              {
                case 2u:
                  do
                    v119 = __ldaxr((unint64_t *)v107);
                  while (__stlxr(v119 - 1, (unint64_t *)v107));
                  if (v107 && v119 == 1)
                  {
                    v120 = 0x1012C404EF22A49;
                    if (*(char *)(v107 + 31) < 0)
                    {
                      operator delete(*(void **)(v107 + 8));
                      v120 = 0x1012C404EF22A49;
                    }
                    goto LABEL_169;
                  }
                  break;
                case 3u:
                  do
                    v126 = __ldaxr((unint64_t *)v107);
                  while (__stlxr(v126 - 1, (unint64_t *)v107));
                  if (v107 && v126 == 1)
                  {
                    v127 = *(void **)(v107 + 8);
                    v120 = 0x1080C409938AC02;
                    if (v127)
                    {
                      *(_QWORD *)(v107 + 16) = v127;
                      operator delete(v127);
                      v120 = 0x1080C409938AC02;
                    }
                    goto LABEL_169;
                  }
                  break;
                case 4u:
                  do
                    v121 = __ldaxr((unint64_t *)v107);
                  while (__stlxr(v121 - 1, (unint64_t *)v107));
                  if (v107 && v121 == 1)
                  {
                    v216 = (void **)(v107 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v216);
                    goto LABEL_163;
                  }
                  break;
                case 5u:
                  do
                    v128 = __ldaxr((unint64_t *)v107);
                  while (__stlxr(v128 - 1, (unint64_t *)v107));
                  if (v107 && v128 == 1)
                  {
                    v216 = (void **)(v107 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v216);
LABEL_163:
                    v120 = 0x1020C405E66F15BLL;
                    goto LABEL_169;
                  }
                  break;
                case 8u:
                  do
                    v129 = __ldaxr((unint64_t *)v107);
                  while (__stlxr(v129 - 1, (unint64_t *)v107));
                  if (v107 && v129 == 1)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(v107 + 16));
                    v125 = -235920773;
                    goto LABEL_168;
                  }
                  break;
                case 9u:
                  do
                    v122 = __ldaxr((unint64_t *)v107);
                  while (__stlxr(v122 - 1, (unint64_t *)v107));
                  if (v107 && v122 == 1)
                  {
                    v123 = *(void **)(v107 + 48);
                    if (v123)
                    {
                      *(_QWORD *)(v107 + 56) = v123;
                      operator delete(v123);
                    }
                    v124 = *(void **)(v107 + 24);
                    if (v124)
                    {
                      *(_QWORD *)(v107 + 32) = v124;
                      operator delete(v124);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v107 + 8);
                    v125 = 2071181815;
LABEL_168:
                    v120 = v125 | 0x1030C4000000000;
LABEL_169:
                    result = (_QWORD *)MEMORY[0x219A19A08](v107, v120);
                  }
                  break;
                default:
                  break;
              }
              ++v19;
              break;
            default:
              goto LABEL_343;
          }
        }
        ++v20;
        v15 = *a2;
        v16 = a2[1];
        if (v18 < ((char *)v16 - (char *)*a2) >> 5)
        {
          v17 = *a3;
          if (v19 < ((char *)a3[1] - (char *)*a3) >> 5)
            continue;
        }
        goto LABEL_215;
      }
    }
    v18 = 0;
    v19 = 0;
    v20 = 0;
  }
LABEL_215:
  if (v18 < ((char *)v16 - (char *)v15) >> 5)
  {
    do
    {
      v136 = &v15[4 * v18];
      v137 = *v136;
      v138 = *((_DWORD *)v136 + 2);
      v139 = *((unsigned __int8 *)v136 + 12);
      v140 = v139 - 2;
      switch(v139)
      {
        case 2u:
          do
            v141 = __ldaxr((unint64_t *)v137);
          while (__stlxr(v141 + 1, (unint64_t *)v137));
          break;
        case 3u:
          do
            v144 = __ldaxr((unint64_t *)v137);
          while (__stlxr(v144 + 1, (unint64_t *)v137));
          break;
        case 4u:
          do
            v142 = __ldaxr((unint64_t *)v137);
          while (__stlxr(v142 + 1, (unint64_t *)v137));
          break;
        case 5u:
          do
            v145 = __ldaxr((unint64_t *)v137);
          while (__stlxr(v145 + 1, (unint64_t *)v137));
          break;
        case 8u:
          do
            v146 = __ldaxr((unint64_t *)v137);
          while (__stlxr(v146 + 1, (unint64_t *)v137));
          break;
        case 9u:
          do
            v143 = __ldaxr((unint64_t *)v137);
          while (__stlxr(v143 + 1, (unint64_t *)v137));
          break;
        default:
          break;
      }
      v147 = *(int64x2_t *)&(*a2)[4 * v18 + 2];
      v148 = *(int64x2_t *)&(*a3)[4 * v19 - 2];
      v217 = (uint64_t *)v137;
      LODWORD(v218) = v138;
      BYTE4(v218) = v139;
      if (v139 <= 9 && ((1 << v139) & 0x33C) != 0)
      {
        do
          v149 = __ldaxr((unint64_t *)v137);
        while (__stlxr(v149 + 1, (unint64_t *)v137));
      }
      v219 = vaddq_s64(v148, v147);
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(*v213 + 32 * v20, (uint64_t *)&v217);
      result = (_QWORD *)turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)&v217);
      switch(v140)
      {
        case 0u:
          do
          {
            v150 = __ldaxr((unint64_t *)v137);
            v151 = v150 - 1;
          }
          while (__stlxr(v151, (unint64_t *)v137));
          if (v151)
            v152 = 1;
          else
            v152 = v137 == 0;
          if (!v152)
          {
            v153 = 0x1012C404EF22A49;
            if (*(char *)(v137 + 31) < 0)
            {
              operator delete(*(void **)(v137 + 8));
              v153 = 0x1012C404EF22A49;
            }
            goto LABEL_276;
          }
          break;
        case 1u:
          do
          {
            v163 = __ldaxr((unint64_t *)v137);
            v164 = v163 - 1;
          }
          while (__stlxr(v164, (unint64_t *)v137));
          if (v164)
            v165 = 1;
          else
            v165 = v137 == 0;
          if (!v165)
          {
            v166 = *(void **)(v137 + 8);
            v153 = 0x1080C409938AC02;
            if (v166)
            {
              *(_QWORD *)(v137 + 16) = v166;
              operator delete(v166);
              v153 = 0x1080C409938AC02;
            }
            goto LABEL_276;
          }
          break;
        case 2u:
          do
          {
            v154 = __ldaxr((unint64_t *)v137);
            v155 = v154 - 1;
          }
          while (__stlxr(v155, (unint64_t *)v137));
          if (v155)
            v156 = 1;
          else
            v156 = v137 == 0;
          if (!v156)
          {
            v216 = (void **)(v137 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v216);
            goto LABEL_268;
          }
          break;
        case 3u:
          do
          {
            v167 = __ldaxr((unint64_t *)v137);
            v168 = v167 - 1;
          }
          while (__stlxr(v168, (unint64_t *)v137));
          if (v168)
            v169 = 1;
          else
            v169 = v137 == 0;
          if (!v169)
          {
            v216 = (void **)(v137 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v216);
LABEL_268:
            v153 = 0x1020C405E66F15BLL;
            goto LABEL_276;
          }
          break;
        case 6u:
          do
          {
            v170 = __ldaxr((unint64_t *)v137);
            v171 = v170 - 1;
          }
          while (__stlxr(v171, (unint64_t *)v137));
          if (v171)
            v172 = 1;
          else
            v172 = v137 == 0;
          if (!v172)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v137 + 16));
            v162 = -235920773;
            goto LABEL_275;
          }
          break;
        case 7u:
          do
          {
            v157 = __ldaxr((unint64_t *)v137);
            v158 = v157 - 1;
          }
          while (__stlxr(v158, (unint64_t *)v137));
          if (v158)
            v159 = 1;
          else
            v159 = v137 == 0;
          if (!v159)
          {
            v160 = *(void **)(v137 + 48);
            if (v160)
            {
              *(_QWORD *)(v137 + 56) = v160;
              operator delete(v160);
            }
            v161 = *(void **)(v137 + 24);
            if (v161)
            {
              *(_QWORD *)(v137 + 32) = v161;
              operator delete(v161);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v137 + 8);
            v162 = 2071181815;
LABEL_275:
            v153 = v162 | 0x1030C4000000000;
LABEL_276:
            result = (_QWORD *)MEMORY[0x219A19A08](v137, v153);
          }
          break;
        default:
          break;
      }
      ++v18;
      ++v20;
      v15 = *a2;
    }
    while (v18 < ((char *)a2[1] - (char *)*a2) >> 5);
  }
  v173 = *a3;
  if (v19 < ((char *)a3[1] - (char *)*a3) >> 5)
  {
    v174 = v18 - 1;
    do
    {
      v175 = &v173[4 * v19];
      v176 = *v175;
      v177 = *((_DWORD *)v175 + 2);
      v178 = *((unsigned __int8 *)v175 + 12);
      v179 = v178 - 2;
      switch(v178)
      {
        case 2u:
          do
            v180 = __ldaxr((unint64_t *)v176);
          while (__stlxr(v180 + 1, (unint64_t *)v176));
          break;
        case 3u:
          do
            v183 = __ldaxr((unint64_t *)v176);
          while (__stlxr(v183 + 1, (unint64_t *)v176));
          break;
        case 4u:
          do
            v181 = __ldaxr((unint64_t *)v176);
          while (__stlxr(v181 + 1, (unint64_t *)v176));
          break;
        case 5u:
          do
            v184 = __ldaxr((unint64_t *)v176);
          while (__stlxr(v184 + 1, (unint64_t *)v176));
          break;
        case 8u:
          do
            v185 = __ldaxr((unint64_t *)v176);
          while (__stlxr(v185 + 1, (unint64_t *)v176));
          break;
        case 9u:
          do
            v182 = __ldaxr((unint64_t *)v176);
          while (__stlxr(v182 + 1, (unint64_t *)v176));
          break;
        default:
          break;
      }
      v186 = *(int64x2_t *)&(*a3)[4 * v19 + 2];
      v187 = *(int64x2_t *)&(*a2)[4 * v174 + 2];
      v217 = (uint64_t *)v176;
      LODWORD(v218) = v177;
      BYTE4(v218) = v178;
      if (v178 <= 9 && ((1 << v178) & 0x33C) != 0)
      {
        do
          v188 = __ldaxr((unint64_t *)v176);
        while (__stlxr(v188 + 1, (unint64_t *)v176));
      }
      v219 = vaddq_s64(v187, v186);
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(*v213 + 32 * v20, (uint64_t *)&v217);
      result = (_QWORD *)turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)&v217);
      switch(v179)
      {
        case 0u:
          do
          {
            v189 = __ldaxr((unint64_t *)v176);
            v190 = v189 - 1;
          }
          while (__stlxr(v190, (unint64_t *)v176));
          if (v190)
            v191 = 1;
          else
            v191 = v176 == 0;
          if (!v191)
          {
            v192 = 0x1012C404EF22A49;
            if (*(char *)(v176 + 31) < 0)
            {
              operator delete(*(void **)(v176 + 8));
              v192 = 0x1012C404EF22A49;
            }
            goto LABEL_340;
          }
          break;
        case 1u:
          do
          {
            v202 = __ldaxr((unint64_t *)v176);
            v203 = v202 - 1;
          }
          while (__stlxr(v203, (unint64_t *)v176));
          if (v203)
            v204 = 1;
          else
            v204 = v176 == 0;
          if (!v204)
          {
            v205 = *(void **)(v176 + 8);
            v192 = 0x1080C409938AC02;
            if (v205)
            {
              *(_QWORD *)(v176 + 16) = v205;
              operator delete(v205);
              v192 = 0x1080C409938AC02;
            }
            goto LABEL_340;
          }
          break;
        case 2u:
          do
          {
            v193 = __ldaxr((unint64_t *)v176);
            v194 = v193 - 1;
          }
          while (__stlxr(v194, (unint64_t *)v176));
          if (v194)
            v195 = 1;
          else
            v195 = v176 == 0;
          if (!v195)
          {
            v216 = (void **)(v176 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v216);
            goto LABEL_332;
          }
          break;
        case 3u:
          do
          {
            v206 = __ldaxr((unint64_t *)v176);
            v207 = v206 - 1;
          }
          while (__stlxr(v207, (unint64_t *)v176));
          if (v207)
            v208 = 1;
          else
            v208 = v176 == 0;
          if (!v208)
          {
            v216 = (void **)(v176 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v216);
LABEL_332:
            v192 = 0x1020C405E66F15BLL;
            goto LABEL_340;
          }
          break;
        case 6u:
          do
          {
            v209 = __ldaxr((unint64_t *)v176);
            v210 = v209 - 1;
          }
          while (__stlxr(v210, (unint64_t *)v176));
          if (v210)
            v211 = 1;
          else
            v211 = v176 == 0;
          if (!v211)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v176 + 16));
            v201 = -235920773;
            goto LABEL_339;
          }
          break;
        case 7u:
          do
          {
            v196 = __ldaxr((unint64_t *)v176);
            v197 = v196 - 1;
          }
          while (__stlxr(v197, (unint64_t *)v176));
          if (v197)
            v198 = 1;
          else
            v198 = v176 == 0;
          if (!v198)
          {
            v199 = *(void **)(v176 + 48);
            if (v199)
            {
              *(_QWORD *)(v176 + 56) = v199;
              operator delete(v199);
            }
            v200 = *(void **)(v176 + 24);
            if (v200)
            {
              *(_QWORD *)(v176 + 32) = v200;
              operator delete(v200);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v176 + 8);
            v201 = 2071181815;
LABEL_339:
            v192 = v201 | 0x1030C4000000000;
LABEL_340:
            result = (_QWORD *)MEMORY[0x219A19A08](v176, v192);
          }
          break;
        default:
          break;
      }
      ++v19;
      ++v20;
      v173 = *a3;
    }
    while (v19 < ((char *)a3[1] - (char *)*a3) >> 5);
  }
  return result;
}

void sub_218097734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = a10;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(v3 - 32);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_218097814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  int v7;
  unint64_t *v9;
  unint64_t v10;

  for (result = a4; a2 != a3; result += 32)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 12) = 0;
    if (a2 != (uint64_t *)result)
    {
      v5 = *a2;
      *(_QWORD *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
      *(_QWORD *)result = v5;
      LODWORD(v5) = *((unsigned __int8 *)a2 + 12);
      *(_BYTE *)(result + 12) = v5;
      v6 = v5 > 9;
      v7 = (1 << v5) & 0x33C;
      if (!v6 && v7 != 0)
      {
        v9 = *(unint64_t **)result;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
    }
    *(_OWORD *)(result + 16) = *((_OWORD *)a2 + 1);
    a2 += 4;
  }
  return result;
}

_QWORD *std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 32 * a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 12) = 0;
      *(_QWORD *)(v4 + 16) = -1;
      *(_QWORD *)(v4 + 24) = -1;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_21809792C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> const&>(uint64_t a1, uint64_t **a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 5);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_218097988(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__push_back_slow_path<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> const&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 5);
  v15 += 24;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::~__split_buffer(v14);
  return v12;
}

void sub_218097A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::finalize(uint64_t a1)
{
  double v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void **v12;

  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::sort_level_0(a1);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::recursive_merge_of_all_levels(a1, 0, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3), &v10);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)(a1 + 56));
  *(_OWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  v11 = 0;
  v10 = 0uLL;
  v12 = (void **)&v10;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v2 = ceil(1.0 / (*(double *)(a1 + 24) * 0.5) + 1.0 / (*(double *)(a1 + 24) * 0.5)) + 1.0;
  if ((unint64_t)v2 <= 2)
    v3 = 2;
  else
    v3 = (unint64_t)v2;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::compress_to_size(a1, (uint64_t *)(a1 + 56), v3);
  v4 = *(uint64_t **)(a1 + 56);
  v5 = *(uint64_t **)(a1 + 64);
  v6 = 126 - 2 * __clz(((char *)v5 - (char *)v4) >> 5);
  *(_QWORD *)&v10 = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::rank_center_comparator;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,false>(v4, v5, (uint64_t (**)(uint64_t *, uint64_t))&v10, v7, 1);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  while (v9 != v8)
  {
    v9 -= 24;
    *(_QWORD *)&v10 = v9;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  }
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
}

void turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::recursive_merge_of_all_levels(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t *v7[3];
  uint64_t *v8[3];
  void **v9;

  if (a3 - a2 == 2)
  {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge(a1, (uint64_t **)(*(_QWORD *)(a1 + 32) + 24 * a2), (uint64_t **)(*(_QWORD *)(a1 + 32) + 24 * a2 + 24), a4);
  }
  else if (a3 - a2 == 1)
  {
    v6 = *(_QWORD *)(a1 + 32) + 24 * a2;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    *(_OWORD *)a4 = *(_OWORD *)v6;
    a4[2] = *(_QWORD *)(v6 + 16);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
  }
  else
  {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::recursive_merge_of_all_levels(v8, a1);
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::recursive_merge_of_all_levels(v7, a1);
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::merge(a1, v8, v7, a4);
    v9 = (void **)v7;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v9);
    v7[0] = (uint64_t *)v8;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v7);
  }
}

void sub_218097CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = v13;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  a10 = (void **)&a13;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::rank_center_comparator(uint64_t a1, uint64_t a2)
{
  return (float)((float)((float)*(unint64_t *)(a1 + 16) + (float)*(unint64_t *)(a1 + 24)) * 0.5) < (float)((float)((float)*(unint64_t *)(a2 + 16) + (float)*(unint64_t *)(a2 + 24)) * 0.5);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,false>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t), uint64_t a4, char a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  char v19;
  int v20;
  uint64_t (*v21)(uint64_t *, uint64_t);
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v7 = a2;
  v8 = result;
  v23 = a2;
  v24 = result;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = (char *)v7 - (char *)v8;
    v11 = ((char *)v7 - (char *)v8) >> 5;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *a3;
        v23 = v7 - 4;
        result = (uint64_t *)((uint64_t (*)(void))v21)();
        if ((_DWORD)result)
          return (uint64_t *)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v24, &v23);
        return result;
      case 3uLL:
        v23 = v7 - 4;
        return (uint64_t *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v8, v8 + 4, v7 - 4, a3);
      case 4uLL:
        v23 = v7 - 4;
        return (uint64_t *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v8, v8 + 4, v8 + 8, v7 - 4, a3);
      case 5uLL:
        v23 = v7 - 4;
        return (uint64_t *)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v8, v8 + 4, v8 + 8, v8 + 12, v7 - 4, a3);
      default:
        if (v10 <= 767)
        {
          if ((a5 & 1) != 0)
            return (uint64_t *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v8, v7, (uint64_t (**)(_BYTE *, uint64_t))a3);
          else
            return (uint64_t *)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v8, v7, (uint64_t (**)(_BYTE *, _QWORD))a3);
        }
        if (v9 == 1)
        {
          if (v8 != v7)
            return (uint64_t *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v8, (uint64_t)v7, (uint64_t)v7, a3);
          return result;
        }
        v12 = v11 >> 1;
        v13 = v7 - 4;
        if ((unint64_t)v10 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)&v8[4 * (v11 >> 1)], v8, v13, a3);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v7 = v23;
            goto LABEL_12;
          }
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v8, &v8[4 * (v11 >> 1)], v13, a3);
          v14 = v23;
          v15 = 32 * v12 - 32;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)(v24 + 4), (uint64_t *)((char *)v24 + v15), v23 - 8, a3);
          v16 = 32 * v12 + 32;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)(v24 + 8), (uint64_t *)((char *)v24 + v16), v14 - 12, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v24 + v15, &v24[4 * v12], (uint64_t *)((char *)v24 + v16), a3);
          v22 = &v24[4 * v12];
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v24, &v22);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v17 = ((uint64_t (*)(uint64_t *))*a3)(v24 - 4);
        v7 = v23;
        if ((v17 & 1) == 0)
        {
          result = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&)>((uint64_t)v24, v23, (unsigned int (**)(_BYTE *))a3);
          v8 = result;
          goto LABEL_20;
        }
LABEL_12:
        v18 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&)>((uint64_t)v24, v7, (uint64_t (**)(void))a3);
        if ((v19 & 1) == 0)
          goto LABEL_19;
        v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v24, v18, a3);
        v8 = v18 + 4;
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v18 + 4, v7, a3);
        if (!(_DWORD)result)
        {
          if (v20)
          {
            v24 = v18 + 4;
            goto LABEL_18;
          }
LABEL_19:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,false>(v24, v18, a3, -v9, a5 & 1);
          v8 = v18 + 4;
LABEL_20:
          a5 = 0;
          v24 = v8;
          a4 = -v9;
          continue;
        }
        if ((v20 & 1) == 0)
        {
          v23 = v18;
          v8 = v24;
          v7 = v18;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(_BYTE *, uint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE v13[13];
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((_QWORD *)result != a2)
  {
    v4 = result;
    v5 = (_QWORD *)(result + 32);
    if ((_QWORD *)(result + 32) != a2)
    {
      v7 = 0;
      v8 = (_QWORD *)result;
      do
      {
        v9 = v5;
        result = (*a3)(v5, (uint64_t)v8);
        if ((_DWORD)result)
        {
          *(_QWORD *)&v13[5] = *(_QWORD *)((char *)v9 + 5);
          *(_QWORD *)v13 = *v9;
          v13[12] = *((_BYTE *)v8 + 44);
          *((_BYTE *)v8 + 44) = 0;
          v14 = *((_OWORD *)v8 + 3);
          v10 = v7;
          while (1)
          {
            turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v4 + v10 + 32, (uint64_t *)(v4 + v10));
            if (!v10)
              break;
            v11 = (*a3)(v13, v4 + v10 - 32);
            v10 -= 32;
            if ((v11 & 1) == 0)
            {
              v12 = v4 + v10 + 32;
              goto LABEL_10;
            }
          }
          v12 = v4;
LABEL_10:
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v12, (uint64_t *)v13);
          result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v13);
        }
        v5 = v9 + 4;
        v7 += 32;
        v8 = v9;
      }
      while (v9 + 4 != a2);
    }
  }
  return result;
}

void sub_21809812C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(_BYTE *, _QWORD))
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _BYTE v8[13];
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (_QWORD *)(result + 32);
    if ((_QWORD *)(result + 32) != a2)
    {
      do
      {
        v7 = v5;
        result = (*a3)(v5, v4);
        if ((_DWORD)result)
        {
          *(_QWORD *)&v8[5] = *(_QWORD *)((char *)v7 + 5);
          *(_QWORD *)v8 = *v7;
          v8[12] = *((_BYTE *)v4 + 44);
          *((_BYTE *)v4 + 44) = 0;
          v9 = *((_OWORD *)v4 + 3);
          do
          {
            turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v4 + 4), v4);
            v4 -= 4;
          }
          while (((*a3)(v8, v4) & 1) != 0);
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v4 + 4), (uint64_t *)v8);
          result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v8);
        }
        v5 = v7 + 4;
        v4 = v7;
      }
      while (v7 + 4 != a2);
    }
  }
  return result;
}

void sub_218098250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t))
{
  char v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v12 = a2;
  v13 = a1;
  v11 = a3;
  v7 = (*a4)(a2, a1);
  result = (*a4)(a3, (uint64_t)a2);
  if ((v7 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v12, &v11);
    if (!(*a4)(v12, v13))
      return 1;
    v9 = &v13;
    v10 = &v12;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v13, &v12);
    if (!(*a4)(v11, (uint64_t)v12))
      return 1;
    v9 = (uint64_t *)&v12;
    v10 = &v11;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(v9, v10);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v13, &v11);
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&)>(uint64_t a1, uint64_t *a2, unsigned int (**a3)(_BYTE *))
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v11;
  unint64_t v12;
  _BYTE v13[13];
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  v12 = a1;
  *(_QWORD *)&v13[5] = *(_QWORD *)(a1 + 5);
  *(_QWORD *)v13 = *(_QWORD *)a1;
  v13[12] = *(_BYTE *)(a1 + 12);
  *(_BYTE *)(a1 + 12) = 0;
  v14 = *(_OWORD *)(a1 + 16);
  if ((((uint64_t (*)(_BYTE *, uint64_t *))*a3)(v13, a2 - 4) & 1) != 0)
  {
    v5 = a1;
    do
    {
      v5 += 32;
      v12 = v5;
    }
    while ((((uint64_t (*)(_BYTE *, unint64_t))*a3)(v13, v5) & 1) == 0);
  }
  else
  {
    v6 = a1 + 32;
    do
    {
      v5 = v6;
      v12 = v6;
      if (v6 >= (unint64_t)v11)
        break;
      v7 = ((uint64_t (*)(_BYTE *, unint64_t))*a3)(v13, v6);
      v6 = v5 + 32;
    }
    while (!v7);
  }
  v8 = v11;
  if (v5 < (unint64_t)v11)
  {
    do
    {
      v8 -= 4;
      v11 = v8;
    }
    while ((((uint64_t (*)(_BYTE *, uint64_t *))*a3)(v13, v8) & 1) != 0);
    v5 = v12;
  }
  if (v5 < (unint64_t)v8)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v12, &v11);
      do
        v12 += 32;
      while (!(*a3)(v13));
      do
        v11 -= 4;
      while ((((uint64_t (*)(_BYTE *))*a3)(v13) & 1) != 0);
      v5 = v12;
    }
    while (v12 < (unint64_t)v11);
  }
  if (v5 - 32 != a1)
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, (uint64_t *)(v5 - 32));
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v5 - 32, (uint64_t *)v13);
  v9 = v12;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v13);
  return v9;
}

void sub_2180984E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&)>(uint64_t a1, uint64_t *a2, uint64_t (**a3)(void))
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  uint64_t (*v10)(void);
  unint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  unint64_t v15;
  _BYTE v16[13];
  __int128 v17;
  uint64_t v18;

  v5 = 0;
  v18 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  *(_QWORD *)&v16[5] = *(_QWORD *)(a1 + 5);
  *(_QWORD *)v16 = *(_QWORD *)a1;
  v16[12] = *(_BYTE *)(a1 + 12);
  *(_BYTE *)(a1 + 12) = 0;
  v17 = *(_OWORD *)(a1 + 16);
  do
  {
    v15 = a1 + v5 + 32;
    v5 += 32;
  }
  while (((*a3)() & 1) != 0);
  v6 = v14;
  if (v5 == 32)
  {
    v9 = a1 + 32;
    do
    {
      if (v9 >= (unint64_t)v6)
        break;
      v10 = *a3;
      v6 -= 4;
      v14 = v6;
    }
    while ((((uint64_t (*)(uint64_t *, _BYTE *))v10)(v6, v16) & 1) == 0);
  }
  else
  {
    v7 = v14 - 4;
    do
    {
      v14 = v7;
      v8 = ((uint64_t (*)(uint64_t *, _BYTE *))*a3)(v7, v16);
      v7 -= 4;
    }
    while (!v8);
    v9 = v15;
  }
  v11 = v9;
  if (v9 < (unint64_t)v14)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v15, &v14);
      do
        v15 += 32;
      while (((*a3)() & 1) != 0);
      do
        v14 -= 4;
      while (!(*a3)());
      v11 = v15;
    }
    while (v15 < (unint64_t)v14);
  }
  v12 = v11 - 32;
  if (v11 - 32 != a1)
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, (uint64_t *)(v11 - 32));
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v12, (uint64_t *)v16);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v16);
  return v12;
}

void sub_2180986B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t))
{
  _BOOL8 v6;
  uint64_t (*v7)(uint64_t *, uint64_t);
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t *v14;
  _BYTE v15[13];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a1;
  v6 = 1;
  switch(((char *)a2 - (char *)a1) >> 5)
  {
    case 0:
    case 1:
      return v6;
    case 2:
      v7 = *a3;
      v13 = a2 - 4;
      if (((unsigned int (*)(void))v7)())
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v14, &v13);
      return v6;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)a1, a1 + 4, a2 - 4, a3);
      return v6;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)a1, a1 + 4, a1 + 8, a2 - 4, a3);
      return v6;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3);
      return v6;
    default:
      v8 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)a1, a1 + 4, a1 + 8, a3);
      v9 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v10 = 0;
      break;
  }
  while (!(*a3)(v9, (uint64_t)v8))
  {
LABEL_12:
    v8 = v9;
    v9 += 4;
    if (v9 == v13)
      return 1;
  }
  *(_QWORD *)&v15[5] = *(uint64_t *)((char *)v9 + 5);
  *(_QWORD *)v15 = *v9;
  v15[12] = *((_BYTE *)v9 + 12);
  *((_BYTE *)v9 + 12) = 0;
  v16 = *((_OWORD *)v9 + 1);
  do
  {
    v11 = (uint64_t)v8;
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)(v8 + 4), v8);
    if (v8 == v14)
      break;
    v8 -= 4;
  }
  while (((*a3)((uint64_t *)v15, v11 - 32) & 1) != 0);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v11, (uint64_t *)v15);
  if (++v10 != 8)
  {
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v15);
    goto LABEL_12;
  }
  v6 = v9 + 4 == v13;
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v15);
  return v6;
}

void sub_2180988E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t))
{
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v13 = a2;
  v14 = a1;
  v11 = a4;
  v12 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(a1, a2, a3, a5);
  result = (*a5)(a4, (uint64_t)a3);
  if ((_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v12, &v11);
    result = (*a5)(v12, (uint64_t)a2);
    if ((_DWORD)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v13, &v12);
      result = (*a5)(v13, a1);
      if ((_DWORD)result)
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v14, &v13);
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t))
{
  uint64_t result;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v16 = a2;
  v17 = a1;
  v14 = a4;
  v15 = a3;
  v13 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, (uint64_t)a4);
  if ((_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v14, &v13);
    result = (*a6)(v14, (uint64_t)a3);
    if ((_DWORD)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v15, &v14);
      result = (*a6)(v15, (uint64_t)a2);
      if ((_DWORD)result)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>((uint64_t *)&v16, &v15);
        result = (*a6)(v16, a1);
        if ((_DWORD)result)
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v17, &v16);
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t *, uint64_t))
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;

  v15 = a1;
  if (a1 != (uint64_t *)a2)
  {
    v7 = a1;
    v8 = (a2 - (uint64_t)a1) >> 5;
    if (a2 - (uint64_t)a1 >= 33)
    {
      v9 = (unint64_t)(v8 - 2) >> 1;
      v10 = v9 + 1;
      v11 = (uint64_t)&a1[4 * v9];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v7, a4, v8, v11);
        v11 -= 32;
        --v10;
      }
      while (v10);
    }
    v14 = a2;
    if (a2 != a3)
    {
      v12 = a2;
      do
      {
        if ((*a4)((uint64_t *)v12, (uint64_t)v15))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element *&>(&v14, &v15);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v15, a4, v8, (uint64_t)v15);
        }
        v12 = v14 + 32;
        v14 = v12;
      }
      while (v12 != a3);
      v7 = v15;
    }
    std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((uint64_t)v7, a2, (unsigned int (**)(uint64_t, uint64_t))a4);
    return v14;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t result, uint64_t (**a2)(uint64_t *, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[13];
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - result) >> 5)
    {
      v10 = (a4 - result) >> 4;
      v11 = v10 + 1;
      v12 = (uint64_t *)(result + 32 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, (uint64_t)(v12 + 4)))
      {
        v12 += 4;
        v11 = v13;
      }
      result = (*a2)(v12, v5);
      if ((result & 1) == 0)
      {
        *(_QWORD *)&v16[5] = *(_QWORD *)(v5 + 5);
        *(_QWORD *)v16 = *(_QWORD *)v5;
        v16[12] = *(_BYTE *)(v5 + 12);
        *(_BYTE *)(v5 + 12) = 0;
        v17 = *(_OWORD *)(v5 + 16);
        do
        {
          v14 = (uint64_t)v12;
          turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v5, v12);
          if (v7 < v11)
            break;
          v15 = (2 * v11) | 1;
          v12 = (uint64_t *)(v6 + 32 * v15);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v15;
          }
          else if ((*a2)((uint64_t *)(v6 + 32 * v15), (uint64_t)(v12 + 4)))
          {
            v12 += 4;
          }
          else
          {
            v11 = v15;
          }
          v5 = v14;
        }
        while (!(*a2)(v12, (uint64_t)v16));
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v14, (uint64_t *)v16);
        return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v16);
      }
    }
  }
  return result;
}

void sub_218098D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t result, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _BYTE v11[13];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a2 - result >= 33)
  {
    v4 = result;
    v5 = (unint64_t)(a2 - result) >> 5;
    v6 = (__int128 *)(result + 16);
    v7 = (uint64_t *)(a2 - 32);
    do
    {
      *(_QWORD *)&v11[5] = *(_QWORD *)(v4 + 5);
      *(_QWORD *)v11 = *(_QWORD *)v4;
      v11[12] = *(_BYTE *)(v4 + 12);
      *(_BYTE *)(v4 + 12) = 0;
      v12 = *v6;
      v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v4, a3, v5);
      v9 = v8;
      if (v7 == v8)
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v8, (uint64_t *)v11);
      }
      else
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v8, v7);
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v7, (uint64_t *)v11);
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v4, (uint64_t)(v9 + 4), (uint64_t (**)(uint64_t *, uint64_t))a3, ((uint64_t)v9 - v4 + 32) >> 5);
      }
      result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v11);
      v7 -= 4;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_218098E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (uint64_t *)(a1 + 32 * v6 + 32);
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 32 * v6 + 32, a1 + 32 * v6 + 64))
    {
      v9 += 4;
      v10 = v11;
    }
    turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(a1, v9);
    a1 = (uint64_t)v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element const&),turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v12[13];
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = result;
    v8 = v4 >> 1;
    v9 = (uint64_t *)(result + 32 * (v4 >> 1));
    v10 = (_QWORD *)(a2 - 32);
    result = (*a3)(v9, a2 - 32);
    if ((_DWORD)result)
    {
      *(_QWORD *)&v12[5] = *(_QWORD *)((char *)v10 + 5);
      *(_QWORD *)v12 = *v10;
      v12[12] = *(_BYTE *)(a2 - 20);
      *(_BYTE *)(a2 - 20) = 0;
      v13 = *(_OWORD *)(a2 - 16);
      do
      {
        v11 = (uint64_t)v9;
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v10, v9);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (uint64_t *)(v7 + 32 * v8);
        v10 = (_QWORD *)v11;
      }
      while (((*a3)(v9, (uint64_t)v12) & 1) != 0);
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=(v11, (uint64_t *)v12);
      return turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v12);
    }
  }
  return result;
}

void sub_218099020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__assign_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t **v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *>((uint64_t)&v17, a2, v13, (char **)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *>((uint64_t)&v18, a2, a3, (char **)v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_2180991A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2180991AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t **v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v4, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 5);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2180992C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>> *>(uint64_t a1, uint64_t **a2, uint64_t **a3, char **a4)
{
  uint64_t **v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t **)a4)
        std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(a4, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 5);
      v5 += 3;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(char **a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;

  v6 = a2;
  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__vdeallocate((void **)a1);
    if (a4 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = a1[2] - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, v12);
    result = std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v8, v6, a3, (uint64_t)a1[1]);
LABEL_15:
    a1[1] = (char *)result;
    return result;
  }
  result = (uint64_t)a1[1];
  v14 = (result - (uint64_t)v9) >> 5;
  if (v14 < a4)
  {
    v15 = &a2[4 * v14];
    if ((char *)result != v9)
    {
      v16 = 32 * v14;
      do
      {
        turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v9, v6);
        v6 += 4;
        v9 += 32;
        v16 -= 32;
      }
      while (v16);
      v9 = a1[1];
    }
    result = std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>(v8, v15, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    v17 = v9;
  }
  else
  {
    v17 = v9;
    do
    {
      turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::operator=((uint64_t)v9, v6);
      v6 += 4;
      v9 += 32;
      v17 += 32;
    }
    while (v6 != a3);
    result = (uint64_t)a1[1];
  }
  while ((char *)result != v17)
    result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element(result - 32);
  a1[1] = v17;
  return result;
}

void sub_218099528(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>((_QWORD *)(a1 + 24), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  v5 = a2[3];
  v6 = a2[4];
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>((_QWORD *)(a1 + 80), *((uint64_t ***)a2 + 10), *((uint64_t ***)a2 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((_QWORD *)(a1 + 104), *((uint64_t **)a2 + 13), *((uint64_t **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 5);
  std::vector<BOOL>::vector((_QWORD *)(a1 + 128), (uint64_t)(a2 + 8));
  std::vector<BOOL>::vector((_QWORD *)(a1 + 152), (uint64_t)a2 + 152);
  return a1;
}

void sub_218099628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::~quantile_sketch(v2);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2180996DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x276276276276277)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&>(a1, v4, v6);
      v6 += 104;
      v4 = v12 + 104;
      v12 += 104;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2180997E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;

  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>((_QWORD *)(a2 + 32), *(uint64_t ***)(a3 + 32), *(uint64_t ***)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element*>((_QWORD *)(a2 + 56), *(uint64_t **)(a3 + 56), *(uint64_t **)(a3 + 64), (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 5);
  return std::vector<BOOL>::vector((_QWORD *)(a2 + 80), a3 + 80);
}

void sub_218099888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 104;
      std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

_QWORD *std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>(_QWORD *result, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*,std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_21809999C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element,std::allocator<turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>,std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xC8uLL);
  result = std::__shared_ptr_emplace<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__shared_ptr_emplace[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&,std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_218099A00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__shared_ptr_emplace[abi:ne180100]<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>&,std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_24D92CBD8;
  a1[1] = 0;
  turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::streaming_quantile_sketch((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_218099A4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92CBD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92CBD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::vector<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176;
        std::allocator<turi::sketches::streaming_quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *turi::query_eval::less_than_partial_function::less_than_partial_function(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  std::vector<BOOL>::vector(a1 + 3, a3);
  return a1;
}

void sub_218099BA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

turi::dense_bitset *turi::dense_bitset::dense_bitset(turi::dense_bitset *this, unint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  v3 = a2 >> 6;
  if ((a2 & 0x3F) != 0)
    ++v3;
  *((_QWORD *)this + 2) = v3;
  v4 = malloc_type_realloc(0, 8 * v3, 0x100004000313F17uLL);
  *(_QWORD *)this = v4;
  v5 = *((_QWORD *)this + 1) & 0x3FLL;
  if (v5)
    v4[*((_QWORD *)this + 2) - 1] &= ~(-1 << v5);
  v6 = *((_QWORD *)this + 2);
  if (v6 >= 1)
    bzero(v4, 8 * v6);
  return this;
}

void turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::open_for_write(uint64_t a1, uint64_t a2, char a3)
{
  turi::fileio::fixed_size_cache_manager *v6;
  uint64_t instance;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *v13[2];
  char v14;
  std::string v15;
  void *__p[2];
  char v17;
  std::string __str;

  v6 = (turi::fileio::fixed_size_cache_manager *)assert_msg(*(_BYTE *)(a1 + 248) == 0, "Attempting to init an SArray which has already been inited");
  instance = turi::fileio::fixed_size_cache_manager::get_instance(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, ".sidx");
  turi::fileio::fixed_size_cache_manager::get_temp_cache_id(instance, (uint64_t)__p, &__str);
  if (v17 < 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)(a1 + 152), &__str);
  v8 = operator new();
  *(_QWORD *)v8 = &unk_24D92CCE0;
  *(_BYTE *)(v8 + 8) = 0;
  v9 = pthread_mutex_init((pthread_mutex_t *)(v8 + 24), 0);
  assert_msg(v9 == 0, "Mutex create error %d", v9);
  *(_QWORD *)(v8 + 160) = 0;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_QWORD *)(v8 + 88) = 128;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_BYTE *)(v8 + 376) = 0;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_QWORD *)(v8 + 384) = 0;
  *(_QWORD *)(v8 + 392) = 0;
  *(_QWORD *)(v8 + 400) = 0;
  *(_QWORD *)(a1 + 176) = v8;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v15 = __str;
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, &v15, a2, 1);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((a3 & 1) == 0)
      goto LABEL_12;
  }
  else if ((a3 & 1) == 0)
  {
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(a1 + 176);
  std::string::basic_string[abi:ne180100]<0>(v13, "disable_padding");
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v10 + 24))(v10, v13, 1);
  if (v14 < 0)
    operator delete(v13[0]);
LABEL_12:
  *(_WORD *)(a1 + 248) = 257;
  v11 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v11);
  v12 = *(_OWORD *)(v11 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v11 + 40);
  *(_OWORD *)(a1 + 32) = v12;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v11 + 48));
  if (a1 + 8 != v11)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v11 + 72), *(_QWORD *)(v11 + 80), (uint64_t)(*(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v11 + 96), *(__int128 **)(v11 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v11 + 104) - *(_QWORD *)(v11 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(__int128 **)(v11 + 120), (__int128 *)(v11 + 128));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_218099EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS_4pairINS_6vectorINS1_13flexible_typeENS_9allocatorIS5_EEEENS_12basic_stringIcNS_11char_traitsIcEENS6_IcEEEEEEEENS6_ISF_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x130uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi6sarrayINS_4pairINS_6vectorINS1_13flexible_typeENS_9allocatorIS5_EEEENS_12basic_stringIcNS_11char_traitsIcEENS6_IcEEEEEEEENS6_ISF_EEEC2B8ne180100IJESG_Li0EEESG_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_218099F7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN4turi6sarrayINS_4pairINS_6vectorINS1_13flexible_typeENS_9allocatorIS5_EEEENS_12basic_stringIcNS_11char_traitsIcEENS6_IcEEEEEEEENS6_ISF_EEEC2B8ne180100IJESG_Li0EEESG_DpOT_(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24D92CC28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v2 = a1 + 24;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray(v2);
  return a1;
}

void sub_21809A010(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92CC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92CC28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = &unk_24D92CC78;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(_WORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  return a1;
}

void sub_21809A138(_Unwind_Exception *a1)
{
  uint64_t v1;
  turi::index_file_information *v2;
  void **v3;

  if (*(char *)(v1 + 175) < 0)
    operator delete(*v3);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray(uint64_t a1)
{
  turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::set_num_segments(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string v11;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(unsigned __int8 *)(a1 + 249), "SArray not opened for writing");
  if (!a2 || (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 120))(*(_QWORD *)(a1 + 176)) == a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new();
  *(_QWORD *)v6 = &unk_24D92CCE0;
  *(_BYTE *)(v6 + 8) = 0;
  v7 = pthread_mutex_init((pthread_mutex_t *)(v6 + 24), 0);
  assert_msg(v7 == 0, "Mutex create error %d", v7);
  *(_QWORD *)(v6 + 160) = 0;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_QWORD *)(v6 + 88) = 128;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_BYTE *)(v6 + 376) = 0;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_QWORD *)(v6 + 384) = 0;
  *(_QWORD *)(v6 + 392) = 0;
  *(_QWORD *)(v6 + 400) = 0;
  *(_QWORD *)(a1 + 176) = v6;
  if (*(char *)(a1 + 175) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 152), *(_QWORD *)(a1 + 160));
  else
    v11 = *(std::string *)(a1 + 152);
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, &v11, a2, 1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  if (v8 != a1 + 8)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(v8 + 120), *(__int128 **)(a1 + 128), (__int128 *)(a1 + 136));
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v9);
  v10 = *(_QWORD *)(v9 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v9 + 24);
  *(_QWORD *)(a1 + 48) = v10;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v9 + 48));
  if (a1 + 8 != v9)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v9 + 72), *(_QWORD *)(v9 + 80), (uint64_t)(*(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v9 + 96), *(__int128 **)(v9 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 104) - *(_QWORD *)(v9 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(__int128 **)(v9 + 120), (__int128 *)(v9 + 128));
  }
  return 1;
}

void sub_21809A3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::num_segments(uint64_t a1)
{
  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  return *(_QWORD *)(a1 + 40);
}

_QWORD *turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  assert_msg(*((unsigned __int8 *)a1 + 248), "Invalid SArray");
  assert_msg(*((unsigned __int8 *)a1 + 249), "SArray not opened for writing");
  v16 = (_QWORD *)a1[22];
  if (!v16)
  {
    v14[0] = &v16;
    turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator()();
  }
  v14[0] = a2;
  v12[0] = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  if (v12[0] <= a2)
  {
    v16 = v14;
    v17 = v12;
    turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator()();
  }
  v16 = &unk_24D92CDA0;
  v17 = a1;
  v18 = a2;
  v19 = &v16;
  v14[0] = &unk_24D92CE30;
  v14[1] = a1;
  v14[2] = a2;
  v15 = v14;
  v12[0] = &unk_24D92CEC0;
  v13 = v12;
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(a3, (uint64_t)&v16, (uint64_t)v14, (uint64_t)v12);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_8;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_8:
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
  result = v19;
  if (v19 == &v16)
  {
    v11 = 4;
    result = &v16;
  }
  else
  {
    if (!v19)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_21809A5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v22 = a13;
  if (a13 == v21)
  {
    v23 = 4;
    v22 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  v26 = a21;
  if (a21 == &a18)
  {
    v27 = 4;
    v26 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_16:
  _Unwind_Resume(a1);
}

uint64_t turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24D92CC78;
  v4 = (void **)(a1 + 256);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 184));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 128, *(_QWORD **)(a1 + 136));
  v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_group_format_writer_v2(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24D92CCE0;
  v2 = (void **)(a1 + 24);
  v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return a1;
}

{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24D92CCE0;
  v2 = (void **)(a1 + 24);
  v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return MEMORY[0x219A19A08](a1, 0x10B3C40E6DD008DLL);
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::open(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string __p;

  v4 = a4;
  if (a4)
    v6 = a3;
  else
    v6 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v7 = a1 + 24;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::v2_block_impl::block_writer::init(v7, &__p, v6, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 16) = v6;
  std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::resize((uint64_t *)(a1 + 384), v4);
  if (v4)
  {
    v8 = 8;
    do
    {
      std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::resize((uint64_t *)(*(_QWORD *)(a1 + 384) + v8), v6);
      v8 += 56;
      --v4;
    }
    while (v4);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = 0;
    do
      turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::open_segment(a1, v9++);
    while (v9 < *(_QWORD *)(a1 + 16));
  }
}

void sub_21809A8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::close(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  if (!*(_BYTE *)(a1 + 8))
    turi::sarray_group_format_writer_v2<turi::flexible_type>::close(void)::{lambda(void)#1}::operator()();
  *(_BYTE *)(a1 + 8) = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    v2 = 0;
    do
    {
      if (*(_QWORD *)(a1 + 392) != *(_QWORD *)(a1 + 384))
      {
        v3 = 0;
        do
          turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(a1, v3++, v2);
        while (v3 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3));
      }
      turi::v2_block_impl::block_writer::close_segment((turi::v2_block_impl::block_writer *)(a1 + 24), v2++);
    }
    while (v2 < *(_QWORD *)(a1 + 16));
  }
}

uint64_t turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::write_segment(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, v8++, a2, v3 + v7);
      v3 = *a3;
      v7 += 48;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, v8++, a2, v3 + v7);
      v3 = *a3;
      v7 += 48;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  }
  return result;
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::write_segment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::string *v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8);
  v8 = v7 + 24 * a3;
  v10 = *(std::string **)(v8 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  v11 = (uint64_t *)(v8 + 8);
  if ((unint64_t)v10 >= v9)
  {
    v12 = std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string> const&>((uint64_t *)(v7 + 24 * a3), a4);
  }
  else
  {
    std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](v10, a4);
    v12 = (uint64_t)&v10[2];
    *v11 = (uint64_t)&v10[2];
  }
  *v11 = v12;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 4) >= *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 32))
    turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(a1, a2, a3);
}

{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8);
  v8 = v7 + 24 * a3;
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = (uint64_t *)(v8 + 8);
  if (v9 >= v10)
  {
    v13 = std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string>>((uint64_t *)(v7 + 24 * a3), a4);
  }
  else
  {
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_OWORD *)v9 = *(_OWORD *)a4;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v12 = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(v9 + 40) = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(v9 + 24) = v12;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    v13 = v9 + 48;
  }
  *v11 = v13;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 4) >= *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 32))
    turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(a1, a2, a3);
}

void sub_21809ABDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::write_segment()
{
  return assert_msg(0, "Cannot write to general SArray with sframe_rows");
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::write_column(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  std::string **v11;
  std::string *v12;
  uint64_t v13;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    v8 = *(_QWORD *)(a1 + 384) + 56 * a2;
    v9 = (_QWORD *)(v8 + 32);
    v10 = (uint64_t *)(*(_QWORD *)(v8 + 8) + 24 * a3);
    v11 = (std::string **)(v10 + 1);
    do
    {
      v12 = *v11;
      if ((unint64_t)*v11 >= v10[2])
      {
        v13 = std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string> const&>(v10, v4);
      }
      else
      {
        std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](*v11, v4);
        v13 = (uint64_t)&v12[2];
        *v11 = v12 + 2;
      }
      *v11 = (std::string *)v13;
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - *v10) >> 4) >= *v9)
        turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(a1, a2, a3);
      v4 += 48;
    }
    while (v4 != v5);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  std::string **v11;
  std::string *v12;
  uint64_t v13;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    v8 = *(_QWORD *)(a1 + 384);
    v9 = (uint64_t *)(*(_QWORD *)(v8 + 56 * a2 + 8) + 24 * a3);
    v10 = *(_QWORD *)(v8 + 56 * a2 + 32);
    v11 = (std::string **)(v9 + 1);
    do
    {
      v12 = *v11;
      if ((unint64_t)*v11 >= v9[2])
      {
        v13 = std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string> const&>(v9, v4);
      }
      else
      {
        std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](*v11, v4);
        v13 = (uint64_t)&v12[2];
        *v11 = v12 + 2;
      }
      *v11 = (std::string *)v13;
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - *v9) >> 4) >= v10)
      {
        turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(a1, a2, a3);
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 32);
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
}

void sub_21809ADF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

void sub_21809AF0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

void **turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_segment(void **result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (result[49] != result[48])
  {
    v3 = (uint64_t)result;
    v4 = 0;
    v5 = 8;
    do
    {
      turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(v3, v4, a2);
      result = std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::shrink_to_fit((void **)(*(_QWORD *)(*(_QWORD *)(v3 + 384) + v5) + 24 * a2));
      ++v4;
      v5 += 56;
    }
    while (v4 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 + 392) - *(_QWORD *)(v3 + 384)) >> 3));
  }
  return result;
}

void std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (turi::simple_spinlock *)*v2);
    operator delete(**a1);
  }
}

void std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, turi::simple_spinlock *a2)
{
  turi::simple_spinlock *v4;
  turi::simple_spinlock *v5;
  void **v6;

  v4 = *(turi::simple_spinlock **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = (turi::simple_spinlock *)((char *)v4 - 56);
      v6 = (void **)((char *)v4 - 48);
      std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      turi::simple_spinlock::~simple_spinlock(v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  v3 = (void **)a2;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (turi::simple_spinlock *)(*a1 + 56 * a2));
  }
}

void std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::open_segment(uint64_t a1, std::string::size_type a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  turi::v2_block_impl::block_writer *v10;
  uint64_t index_info;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  std::locale::__imp *locale;
  char *v17;
  const std::locale::facet *v18;
  __int128 v19;
  int v20;
  int *v21;
  file_logger *v22;
  file_logger *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  uint64_t v30;
  _QWORD *exception;
  _QWORD *v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::locale v36;
  uint64_t v37;
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  _DWORD v41[2];
  std::string __str;
  char v43[17];

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 797, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v36);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned __int8 *)(a1 + 8), "sarray not open");
  v10 = (turi::v2_block_impl::block_writer *)(a1 + 24);
  index_info = turi::v2_block_impl::block_writer::get_index_info(v10);
  if (*(char *)(index_info + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)index_info, *(_QWORD *)(index_info + 8));
  else
    __str = *(std::string *)index_info;
  *(_DWORD *)((char *)v41 + 3) = 0;
  v41[0] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v36);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  std::string::basic_string(&v35, &__str, 0, size - 5, (std::allocator<char> *)v43);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v35;
  else
    v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    v14 = v35.__r_.__value_.__l.__size_;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)".", 1);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  locale = v36.__locale_;
  v17 = (char *)&v36 + *((_QWORD *)v36.__locale_ - 3);
  if (*((_DWORD *)v17 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v36 + *((_QWORD *)v36.__locale_ - 3)));
    v18 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
    std::locale::~locale((std::locale *)&v35);
    locale = v36.__locale_;
  }
  *((_DWORD *)v17 + 36) = 48;
  *(_QWORD *)((char *)v38 + *((_QWORD *)locale - 3)) = 4;
  std::ostream::operator<<();
  std::stringbuf::str();
  v19 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
  v41[0] = v35.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v41 + 3) = *(_DWORD *)((char *)&v35.__r_.__value_.__r.__words[2] + 3);
  v20 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  v21 = (int *)global_logger();
  if (v21[169] > 1)
    goto LABEL_39;
  if (cppipc::must_cancel((cppipc *)v21))
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v22 = (file_logger *)global_logger();
  v23 = file_logger::start_stream(v22, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 810, 1);
  v24 = pthread_getspecific(*((_QWORD *)v23 + 74));
  if (v24 && *((_BYTE *)v24 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"Open segment ", 13);
  v25 = file_logger::operator<<<unsigned long>((uint64_t)v23);
  v26 = pthread_getspecific(*(_QWORD *)(v25 + 592));
  if (v26 && *((_BYTE *)v26 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)" for write on ", 14);
  if (v20 < 0)
  {
    std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
  }
  else
  {
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
    LODWORD(v34.__r_.__value_.__r.__words[2]) = v41[0];
    *(_DWORD *)((char *)&v34.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v41 + 3);
    *((_BYTE *)&v34.__r_.__value_.__s + 23) = v20;
  }
  v27 = file_logger::operator<<<std::string>(v25, (uint64_t)&v34);
  v28 = pthread_getspecific(*(_QWORD *)(v27 + 592));
  if (v28)
  {
    if (*((_BYTE *)v28 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(v28[2] - 24) + 16));
      v29 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale((std::locale *)&v35);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v27);
      if (*(_DWORD *)(v27 + 600) == 7)
      {
        __print_back_trace();
        v32 = __cxa_allocate_exception(8uLL);
        *v32 = "LOG_FATAL encountered";
        __cxa_throw(v32, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_40;
  }
  else
  {
LABEL_39:
    if ((v20 & 0x80000000) == 0)
    {
LABEL_40:
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
      LODWORD(v33.__r_.__value_.__r.__words[2]) = v41[0];
      *(_DWORD *)((char *)&v33.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v41 + 3);
      *((_BYTE *)&v33.__r_.__value_.__s + 23) = v20;
      goto LABEL_43;
    }
  }
  std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
LABEL_43:
  turi::v2_block_impl::block_writer::open_segment(v10, a2, (std::string::size_type)&v33);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v36.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
  v30 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::locale *)((char *)&v36 + *((_QWORD *)v36.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
  v37 = v30;
  v38[0] = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete((void *)v38[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v40);
  if (v20 < 0)
    operator delete((void *)v19);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_21809B7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  std::locale::~locale(&a22);
  if (a21 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  if (v29 < 0)
    operator delete(v28);
  if (*(char *)(v30 - 105) < 0)
    operator delete(*(void **)(v30 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 56 * a2;
      do
      {
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 32) = 16;
        v7 += 56;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[56 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[56 * v11];
    v15 = &v14[56 * a2];
    do
    {
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = 16;
      v14 += 56;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer> &>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_21809B9E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 56;
      std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer const&>(a1, v7 - 56, v9);
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_21809BB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>((std::string *)(a2 + 8), *(uint64_t **)(a3 + 8), *(uint64_t **)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3));
  result = *(__n128 *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void sub_21809BB90(_Unwind_Exception *a1)
{
  turi::simple_spinlock *v1;

  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>(std::string *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_21809BC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *a4)
{
  std::string *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 4));
      v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_21809BCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*>(std::string *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_21809BD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*,std::pair<std::vector<turi::flexible_type>,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  std::string *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 48;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_21809BE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](std::string *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v4 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_21809BECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::pair<std::vector<turi::flexible_type>,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **i;
  void **v6;

  for (i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = i + 1;
    std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)i);
    i = (void **)(*(_QWORD *)(a2 + 32) + 56);
  }
}

uint64_t std::__split_buffer<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer> &>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::column_buffer> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  turi::simple_spinlock *v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (turi::simple_spinlock *)(i - 56);
    *(_QWORD *)(a1 + 16) = i - 56;
    v6 = (void **)(i - 48);
    std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock(v5);
  }
}

void std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer(&v15);
  }
}

void sub_21809C2E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void turi::sarray_group_format_writer_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::flush_block(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 384);
  v4 = v3 + 56 * a2;
  v5 = (uint64_t *)(v4 + 8);
  v6 = (uint64_t *)(*(_QWORD *)(v4 + 8) + 24 * a3);
  v7 = v6[1];
  if (*v6 != v7)
  {
    v11 = (v7 - *v6) >> 4;
    v26 = -1;
    v27 = 0u;
    v28 = 0u;
    v29 = 0;
    v12 = turi::v2_block_impl::block_writer::write_block<std::pair<std::vector<turi::flexible_type>,std::string>>((pthread_mutex_t *)(a1 + 24), a3, a2, v6, (uint64_t)&v26);
    v13 = *v5;
    v14 = *v5 + 24 * a3;
    v17 = *(_QWORD *)(v14 + 8);
    v16 = (_QWORD *)(v14 + 8);
    v15 = v17;
    v18 = *(_QWORD *)(v13 + 24 * a3);
    if (v17 != v18)
    {
      v19 = v13 + 24 * a3 + 16;
      do
      {
        v15 -= 48;
        std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100](v19, v15);
      }
      while (v15 != v18);
    }
    *v16 = v18;
    do
    {
      while (*(_BYTE *)v4 == 1)
        ;
      do
        v20 = __ldaxr((unsigned __int8 *)v4);
      while (__stlxr(1u, (unsigned __int8 *)v4));
    }
    while (v20);
    v21 = (_QWORD *)(v3 + 56 * a2);
    v22 = v21[5] + v12;
    v23 = v21[6] - 0x5555555555555555 * v11;
    v21[5] = v22;
    v21[6] = v23;
    v24 = (unint64_t)(float)((float)(unint64_t)turi::SFRAME_DEFAULT_BLOCK_SIZE
                                  / (float)((float)(unint64_t)(v22 + 1) / (float)(unint64_t)(v23 + 1)));
    if (*(_QWORD *)"\b" > v24)
      v24 = *(_QWORD *)"\b";
    v21[4] = v24;
    v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) * *(_QWORD *)(a1 + 16);
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v25 < v24)
      v24 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v25;
    v21[4] = v24;
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK < v24)
      v24 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK;
    v21[4] = v24;
    __dmb(0xBu);
    *(_BYTE *)v4 = 0;
  }
}

uint64_t turi::v2_block_impl::block_writer::write_block<std::pair<std::vector<turi::flexible_type>,std::string>>(pthread_mutex_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17[3];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;

  turi::buffer_pool<std::vector<char>>::get_new_buffer(a1, (uint64_t)&v22);
  v18 = 0u;
  v20 = 0;
  v19 = v22.n128_u64[0];
  *((_QWORD *)&v19 + 1) = *(_QWORD *)v22.n128_u64[0];
  v21 = *(_QWORD *)(v22.n128_u64[0] + 8) - *((_QWORD *)&v19 + 1);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::pair<std::vector<turi::flexible_type>,std::string>,false>::exec((uint64_t)&v18, a4);
  *(_QWORD *)(a5 + 16) = v20;
  *(_QWORD *)(a5 + 24) = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4);
  v10 = *(_QWORD *)v22.n128_u64[0];
  v11 = *(_OWORD *)(a5 + 32);
  v17[1] = *(_OWORD *)(a5 + 16);
  v17[2] = v11;
  v17[0] = *(_OWORD *)a5;
  v12 = turi::v2_block_impl::block_writer::write_block((uint64_t)a1, a2, a3, v10, v17);
  turi::buffer_pool<std::vector<char>>::release_buffer(a1, &v22);
  v13 = (std::__shared_weak_count *)v22.n128_u64[1];
  if (v22.n128_u64[1])
  {
    v14 = (unint64_t *)(v22.n128_u64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_21809C80C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,std::pair<std::vector<turi::flexible_type>,std::string>,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t *v12;
  size_t v13;
  BOOL v14;
  std::vector<char>::size_type v15;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v6)
    {
      v11 = 2 * v6 + 16;
      *(_QWORD *)(a1 + 40) = v11;
      v12 = *(uint64_t **)(a1 + 16);
      if (v12)
      {
        result = *v12;
        v13 = v12[1] - *v12;
        v14 = v11 >= v13;
        v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v15);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v14)
        {
          v12[1] = result + v11;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v11, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v7 + v8;
      turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(a1, (uint64_t *)(v7 + v8));
      result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, (const void **)(v10 + 24));
      ++v9;
      v7 = *a2;
      v8 += 48;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  }
  return result;
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t *v11;
  size_t v12;
  BOOL v13;
  std::vector<char>::size_type v14;

  v4 = (a2[1] - *a2) >> 4;
  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v6)
    {
      v10 = 2 * v6 + 16;
      *(_QWORD *)(a1 + 40) = v10;
      v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        result = *v11;
        v12 = v11[1] - *v11;
        v13 = v10 >= v12;
        v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      result = turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, v7 + v8);
      ++v9;
      v7 = *a2;
      v8 += 16;
    }
    while (v9 < (a2[1] - *a2) >> 4);
  }
  return result;
}

void turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(uint64_t a1, uint64_t *a2)
{
  char v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  BOOL v12;
  std::vector<char>::size_type v13;
  size_t v14;
  char **v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;

  v4 = *((_BYTE *)a2 + 12) ^ 0x80;
  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 1 > v5)
    {
      v9 = 2 * v5 + 2;
      *(_QWORD *)(a1 + 40) = v9;
      v10 = *(_QWORD **)(a1 + 16);
      if (v10)
      {
        v6 = (_BYTE *)*v10;
        v11 = v10[1] - *v10;
        v12 = v9 >= v11;
        v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v13);
          v6 = **(_BYTE ***)(a1 + 16);
        }
        else if (!v12)
        {
          v10[1] = &v6[v9];
        }
      }
      else
      {
        v6 = malloc_type_realloc(*(void **)(a1 + 24), v9, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v6;
    }
    else
    {
      v6 = *(_BYTE **)(a1 + 24);
    }
    v6[(*(_QWORD *)(a1 + 32))++] = v4;
  }
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
    case 1:
      if (*(_QWORD *)a1)
      {
        std::ostream::write();
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 40);
        if (*(_QWORD *)(a1 + 32) + 8 > v7)
        {
          v14 = 2 * v7 + 16;
          *(_QWORD *)(a1 + 40) = v14;
          v15 = *(char ***)(a1 + 16);
          if (v15)
          {
            v8 = *v15;
            v16 = v15[1] - *v15;
            v17 = v14 >= v16;
            v18 = v14 - v16;
            if (v18 != 0 && v17)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
              v8 = **(char ***)(a1 + 16);
            }
            else if (!v17)
            {
              v15[1] = &v8[v14];
            }
          }
          else
          {
            v8 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
          }
          *(_QWORD *)(a1 + 24) = v8;
        }
        else
        {
          v8 = *(char **)(a1 + 24);
        }
        *(_QWORD *)&v8[*(_QWORD *)(a1 + 32)] = *a2;
        *(_QWORD *)(a1 + 32) += 8;
      }
      break;
    case 2:
      turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, (const void **)(*a2 + 8));
      break;
    case 3:
      turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a1, (const void **)(*a2 + 8));
      break;
    case 4:
      turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(a1, (uint64_t *)(*a2 + 8));
      break;
    case 5:
      turi::archive_detail::vector_serialize_impl<turi::oarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(a1, (uint64_t *)(*a2 + 8));
      break;
    case 6:
      turi::archive_detail::serialize_impl<turi::oarchive,turi::flex_date_time,false,void>::exec(a1, a2);
      break;
    case 7:
      return;
    case 8:
      turi::image_type::save(*a2 + 8, a1);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::save(*a2 + 8, a1);
      break;
    default:
      turi::apply_binary_op_ff();
  }
}

void *turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(uint64_t a1, const void **a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  const void *v7;
  size_t v8;
  void *result;
  size_t v10;
  char *v11;
  size_t v12;
  char **v13;
  size_t v14;
  BOOL v15;
  std::vector<char>::size_type v16;
  size_t v17;
  char **v18;
  size_t v19;
  BOOL v20;
  std::vector<char>::size_type v21;

  v4 = ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3;
  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v5)
    {
      v12 = 2 * v5 + 16;
      *(_QWORD *)(a1 + 40) = v12;
      v13 = *(char ***)(a1 + 16);
      if (v13)
      {
        v6 = *v13;
        v14 = v13[1] - *v13;
        v15 = v12 >= v14;
        v16 = v12 - v14;
        if (v16 != 0 && v15)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v16);
          v6 = **(char ***)(a1 + 16);
        }
        else if (!v15)
        {
          v13[1] = &v6[v12];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v12, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v6[*(_QWORD *)(a1 + 32)] = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  v8 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  if (*(_QWORD *)a1)
    return (void *)std::ostream::write();
  v10 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + v8 > v10)
  {
    v17 = 2 * (v10 + v8);
    *(_QWORD *)(a1 + 40) = v17;
    v18 = *(char ***)(a1 + 16);
    if (v18)
    {
      v11 = *v18;
      v19 = v18[1] - *v18;
      v20 = v17 >= v19;
      v21 = v17 - v19;
      if (v21 != 0 && v20)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v21);
        v11 = **(char ***)(a1 + 16);
      }
      else if (!v20)
      {
        v18[1] = &v11[v17];
      }
    }
    else
    {
      v11 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v17, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    v11 = *(char **)(a1 + 24);
  }
  result = memcpy(&v11[*(_QWORD *)(a1 + 32)], v7, v8);
  *(_QWORD *)(a1 + 32) += v8;
  return result;
}

void turi::flexible_type_impl::ndarray<double>::save(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  BOOL v12;
  std::vector<char>::size_type v13;
  const void **v14;
  std::__shared_weak_count *v15;
  void *v16[3];
  void *__p[4];

  if (!turi::flexible_type_impl::ndarray<double>::is_valid((_QWORD *)a1))
    turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
  LOBYTE(v14) = 0;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 1 > v4)
    {
      v9 = 2 * v4 + 2;
      *(_QWORD *)(a2 + 40) = v9;
      v10 = *(_QWORD **)(a2 + 16);
      if (v10)
      {
        v5 = (_BYTE *)*v10;
        v11 = v10[1] - *v10;
        v12 = v9 >= v11;
        v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v13);
          v5 = **(_BYTE ***)(a2 + 16);
        }
        else if (!v12)
        {
          v10[1] = &v5[v9];
        }
      }
      else
      {
        v5 = malloc_type_realloc(*(void **)(a2 + 24), v9, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v5;
    }
    else
    {
      v5 = *(_BYTE **)(a2 + 24);
    }
    v5[(*(_QWORD *)(a2 + 32))++] = 0;
  }
  if (turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)a1))
  {
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, (const void **)(a1 + 16));
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, (const void **)(a1 + 40));
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, *(const void ***)a1);
  }
  else
  {
    turi::flexible_type_impl::ndarray<double>::compact(a1, (uint64_t **)&v14);
    if (!turi::flexible_type_impl::ndarray<double>::is_full(&v14))
      turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)const::{lambda(void)#2}::operator()();
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, (const void **)v16);
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, (const void **)__p);
    turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a2, v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v16[0])
    {
      v16[1] = v16[0];
      operator delete(v16[0]);
    }
    v6 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21809D02C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::flexible_type_impl::ndarray<double>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 526, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21809D13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::compact(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *__p;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  unint64_t *v68;
  uint64_t v69;

  if (!turi::flexible_type_impl::ndarray<double>::is_valid((_QWORD *)a1))
    turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
  if (turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)a1))
  {
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, a1);
  }
  else
  {
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    __p = 0;
    v62 = 0;
    v63 = 0;
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)&v67, (uint64_t)&v64, (uint64_t)&__p, 0);
    if (__p)
    {
      v62 = __p;
      operator delete(__p);
    }
    if (v64)
    {
      v65 = (uint64_t *)v64;
      operator delete(v64);
    }
    if (v67)
    {
      v68 = (unint64_t *)v67;
      operator delete(v67);
    }
    a2[8] = 0;
    if (a2 != (uint64_t **)a1)
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2 + 16, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
    v5 = *(uint64_t **)(a1 + 16);
    v4 = *(uint64_t **)(a1 + 24);
    if (v4 == v5 || !*(_QWORD *)a1)
    {
      v6 = 0;
    }
    else
    {
      v6 = 1;
      do
      {
        v7 = *v5++;
        v6 *= v7;
      }
      while (v5 != v4);
    }
    std::vector<double>::resize((uint64_t)*a2, v6);
    v8 = (uint64_t *)(a2 + 5);
    std::vector<unsigned long>::resize((uint64_t)(a2 + 5), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
    if (a2[3] != a2[2] && (*a2)[1] != **a2)
    {
      std::vector<std::pair<unsigned long,unsigned long>>::vector(&v67, (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 48);
      v11 = (unint64_t *)v67;
      v12 = v10 - v9;
      if (v10 != v9)
      {
        v13 = 0;
        v14 = v12 >> 3;
        if (v14 <= 1)
          v14 = 1;
        v15 = (char *)v67 + 8;
        do
        {
          *(v15 - 1) = *(_QWORD *)(v9 + 8 * v13);
          *v15 = v13++;
          v15 += 2;
        }
        while (v14 != v13);
      }
      v16 = 126 - 2 * __clz(((char *)v68 - (char *)v11) >> 4);
      if (v68 == v11)
        v17 = 0;
      else
        v17 = v16;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>((uint64_t)v68, v68, (uint64_t)v11, v11, (uint64_t)&v64, v17, 1);
      v18 = (char *)v67;
      v19 = *v8;
      *(_QWORD *)(*v8 + 8 * *((_QWORD *)v67 + 1)) = 1;
      v20 = *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40);
      if ((unint64_t)v20 >= 9)
      {
        v21 = v20 >> 3;
        v22 = a2[2];
        if (v21 <= 2)
          v21 = 2;
        v23 = v21 - 1;
        v24 = (uint64_t *)(v18 + 24);
        do
        {
          v25 = v22[*(v24 - 2)] * *(_QWORD *)(v19 + 8 * *(v24 - 2));
          v26 = *v24;
          v24 += 2;
          *(_QWORD *)(v19 + 8 * v26) = v25;
          --v23;
        }
        while (v23);
      }
      v27 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
      __p = 0;
      std::vector<unsigned long>::vector(&v64, v27, &__p);
      v28 = (uint64_t *)v64;
      v29 = v65;
      v30 = (char *)v65 - (_BYTE *)v64;
      v31 = ((char *)v65 - (_BYTE *)v64) >> 3;
      v32 = v31 - 1;
      if (v31 <= 1)
        v33 = 1;
      else
        v33 = ((char *)v65 - (_BYTE *)v64) >> 3;
      v34 = a2[5];
      v35 = **a2;
      do
      {
        if (v29 == v28)
        {
          v43 = 0;
          v44 = *(_QWORD *)(**(_QWORD **)a1 + 8 * *(_QWORD *)(a1 + 64));
        }
        else
        {
          v36 = 0;
          v37 = *(uint64_t **)(a1 + 40);
          v38 = v28;
          v39 = v33;
          do
          {
            v41 = *v38++;
            v40 = v41;
            v42 = *v37++;
            v36 += v42 * v40;
            --v39;
          }
          while (v39);
          v43 = 0;
          v44 = *(_QWORD *)(**(_QWORD **)a1 + 8 * (*(_QWORD *)(a1 + 64) + v36));
          v45 = v28;
          v46 = v34;
          v47 = v33;
          do
          {
            v49 = *v45++;
            v48 = v49;
            v50 = *v46++;
            v43 += v50 * v48;
            --v47;
          }
          while (v47);
        }
        *(_QWORD *)(v35 + 8 * v43) = v44;
        v51 = v31;
        v52 = v31 - 1;
        if (v30 >= 1)
        {
          v53 = *(_QWORD *)(a1 + 16);
          v54 = v28[v32] + 1;
          v28[v32] = v54;
          if (v54 >= *(_QWORD *)(v53 + 8 * v32))
          {
            v55 = v53 - 16;
            v56 = v31;
            v57 = (unint64_t *)((char *)v28 + (v30 & 0xFFFFFFFFFFFFFFF8) - 16);
            while (1)
            {
              v58 = v56 - 1;
              v57[1] = 0;
              if ((uint64_t)(v56 - 1) <= 0)
                goto LABEL_55;
              v59 = *v57 + 1;
              *v57-- = v59;
              v60 = *(_QWORD *)(v55 + 8 * v56--);
              if (v59 < v60)
              {
                v51 = 1;
                if (((v58 - 1) & 0x8000000000000000) == 0)
                  goto LABEL_48;
                goto LABEL_54;
              }
            }
          }
          v51 = 1;
          v52 = v31 - 1;
        }
        if ((v52 & 0x8000000000000000) != 0)
          break;
LABEL_48:
        ;
      }
      while (v51);
LABEL_54:
      if (!v28)
        goto LABEL_56;
LABEL_55:
      v65 = v28;
      operator delete(v28);
LABEL_56:
      if (v67)
      {
        v68 = (unint64_t *)v67;
        operator delete(v67);
      }
    }
  }
}

void sub_21809D56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _QWORD *v17;

  if (__p)
    operator delete(__p);
  turi::flexible_type_impl::ndarray<double>::~ndarray(v17);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)const::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"c.is_full()", 11);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 534, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::save(turi::oarchive &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21809D6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t *v12;
  size_t v13;
  BOOL v14;
  std::vector<char>::size_type v15;

  v4 = (a2[1] - *a2) >> 5;
  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v6)
    {
      v11 = 2 * v6 + 16;
      *(_QWORD *)(a1 + 40) = v11;
      v12 = *(uint64_t **)(a1 + 16);
      if (v12)
      {
        result = *v12;
        v13 = v12[1] - *v12;
        v14 = v11 >= v13;
        v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v15);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v14)
        {
          v12[1] = result + v11;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v11, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v7 + v8;
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, v7 + v8);
      result = turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, v10 + 16);
      ++v9;
      v7 = *a2;
      v8 += 32;
    }
    while (v9 < (a2[1] - *a2) >> 5);
  }
  return result;
}

char *turi::archive_detail::serialize_impl<turi::oarchive,turi::flex_date_time,false,void>::exec(uint64_t a1, uint64_t *a2)
{
  char *result;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  size_t v8;
  char **v9;
  size_t v10;
  BOOL v11;
  std::vector<char>::size_type v12;

  if (*(_QWORD *)a1)
    return (char *)std::ostream::write();
  v5 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + 12 > v5)
  {
    v8 = 2 * v5 + 24;
    *(_QWORD *)(a1 + 40) = v8;
    v9 = *(char ***)(a1 + 16);
    if (v9)
    {
      result = *v9;
      v10 = v9[1] - *v9;
      v11 = v8 >= v10;
      v12 = v8 - v10;
      if (v12 != 0 && v11)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v12);
        result = **(char ***)(a1 + 16);
      }
      else if (!v11)
      {
        v9[1] = &result[v8];
      }
    }
    else
    {
      result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v8, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = result;
  }
  else
  {
    result = *(char **)(a1 + 24);
  }
  v6 = &result[*(_QWORD *)(a1 + 32)];
  v7 = *a2;
  *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v6 = v7;
  *(_QWORD *)(a1 + 32) += 12;
  return result;
}

uint64_t std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[48 * v4];
  v16 = &v10[48 * v9];
  std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100](v14, a2);
  v15 = v14 + 2;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer(&v13);
  return v11;
}

void sub_21809DA44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v9 = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(v7 - 24) = v9;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 48;
      *((_QWORD *)&v15 + 1) -= 48;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>,std::reverse_iterator<std::pair<std::vector<turi::flexible_type>,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__push_back_slow_path<std::pair<std::vector<turi::flexible_type>,std::string>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[48 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v12 = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = v12;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v15[2] = v11 + 48;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer(v15);
  return v13;
}

void sub_21809DD94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::shrink_to_fit(void **result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = (unint64_t)*result;
  v2 = *(int64x2_t *)(result + 1);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)*result)), 4uLL);
  v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = (uint64_t)(result + 2);
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v4);
    }
    v10 = v8;
    v11 = &v8[48 * v5];
    v12 = v11;
    v13 = &v8[48 * v9];
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer(&v10);
  }
  return result;
}

void sub_21809DE5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21809DE4CLL);
}

__n128 std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1}>,void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24D92CDA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1}>,void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D92CDA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1}>,void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 176) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 176), 0, *(_QWORD *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1}>,void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string> const&)#1}>,void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>::target_type()
{
}

__n128 std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string>&&)#1},std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>&&>,void ()(std::pair<std::vector<turi::flexible_type>,std::string>&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24D92CE30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string>&&)#1},std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>&&>,void ()(std::pair<std::vector<turi::flexible_type>,std::string>&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D92CE30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string>&&)#1},std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>&&>,void ()(std::pair<std::vector<turi::flexible_type>,std::string>&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 176) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 176), 0, *(_QWORD *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string>&&)#1},std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>&&>,void ()(std::pair<std::vector<turi::flexible_type>,std::string>&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(std::pair<std::vector<turi::flexible_type>,std::string>&&)#1},std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>&&>,void ()(std::pair<std::vector<turi::flexible_type>,std::string>&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24D92CEC0;
  return result;
}

void std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D92CEC0;
}

uint64_t std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target_type()
{
}

_QWORD *std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 96 * a2;
    v6 = 96 * a2;
    v7 = (_QWORD *)(v4 + 88);
    do
    {
      *(v7 - 8) = 0;
      *(v7 - 4) = 0;
      *v7 = 0;
      v7 += 12;
      v6 -= 96;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_21809E10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

_QWORD *std::vector<turi::mutex>::vector(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::mutex>::__vallocate[abi:ne180100](a1, a2);
    std::vector<turi::mutex>::__construct_at_end((uint64_t)a1, a2);
  }
  return a1;
}

void sub_21809E1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::mutex>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

uint64_t std::vector<turi::mutex>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  pthread_mutex_t *v3;
  uint64_t v4;
  pthread_mutex_t *v5;
  int v6;

  v2 = result;
  v3 = *(pthread_mutex_t **)(result + 8);
  if (a2)
  {
    v4 = a2 << 6;
    v5 = &v3[a2];
    do
    {
      v6 = pthread_mutex_init(v3, 0);
      result = assert_msg(v6 == 0, "Mutex create error %d", v6);
      ++v3;
      v4 -= 64;
    }
    while (v4);
    v3 = v5;
  }
  *(_QWORD *)(v2 + 8) = v3;
  return result;
}

void sub_21809E29C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

_QWORD *std::vector<turi::simple_spinlock>::vector(_QWORD *a1, size_t a2)
{
  size_t v3;
  _BYTE *v4;
  _BYTE *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v3 = a2;
    std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, a2);
    v4 = (_BYTE *)a1[1];
    v5 = &v4[v3];
    do
    {
      *v4++ = 0;
      --v3;
    }
    while (v3);
    a1[1] = v5;
  }
  return a1;
}

void sub_21809E338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::simple_spinlock>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::oarchive>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_21809E3C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x78uLL);
  *(_QWORD *)v2 = &off_24D92CF40;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a2 = &off_24D92CF40;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(turi::thread *a1, uint64_t a2, turi::sframe_rows **a3)
{
  turi::thread *v4;
  uint64_t *v5;
  turi::thread *tls_data;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __n128 v11;
  unsigned __int8 *v12;
  uint64_t v13;
  turi::sframe_rows *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  unint64_t *v56;
  unint64_t v57;
  char **v58;
  char *v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _BYTE *v85;
  uint64_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t **v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  turi::thread *v96;
  std::string v97;
  void *__p;
  char v99;
  std::string *v100;

  v4 = a1;
  v5 = (uint64_t *)*((_QWORD *)a1 + 1);
  tls_data = (turi::thread *)turi::thread::get_tls_data(a1);
  v7 = *(_QWORD *)tls_data;
  v8 = *v5;
  v9 = (uint64_t *)*((_QWORD *)v4 + 2);
  v10 = (uint64_t)turi::thread::get_tls_data(tls_data);
  v12 = *(unsigned __int8 **)v10;
  v13 = *v9;
  v14 = *a3;
  if (!*((_BYTE *)v14 + 24))
  {
    turi::sframe_rows::ensure_unique(v14);
    if (!*((_BYTE *)v14 + 24))
      turi::sframe_rows::ensure_unique(v14);
  }
  if (*(_QWORD *)v14 != *((_QWORD *)v14 + 1))
  {
    v15 = **(_QWORD ***)v14;
    if (v15)
    {
      v16 = *(_QWORD *)(**(_QWORD **)v14 + 8) - *v15;
      if (v16)
      {
        v17 = 0;
        v18 = (_QWORD *)(v13 + 24 * (_QWORD)v12);
        v90 = (uint64_t **)(v18 + 1);
        v91 = v16 >> 4;
        v19 = v8 + 48 * v7;
        v95 = (_QWORD *)(v19 + 32);
        v96 = v4;
        v92 = (_QWORD *)(v19 + 24);
        v93 = v19;
        do
        {
          if (**((_QWORD **)v4 + 3))
          {
            v20 = 0;
            do
            {
              v21 = **(_QWORD **)(*(_QWORD *)v14 + 16 * v20) + 16 * v17;
              v22 = *v18 + 16 * v20;
              if (v21 != v22)
              {
                switch(*(_BYTE *)(v22 + 12))
                {
                  case 2:
                    v23 = *(unint64_t **)v22;
                    do
                    {
                      v24 = __ldaxr(v23);
                      v25 = v24 - 1;
                    }
                    while (__stlxr(v25, v23));
                    if (!v25)
                    {
                      v26 = *(unint64_t **)v22;
                      if (!*(_QWORD *)v22)
                        goto LABEL_53;
                      if (*((char *)v26 + 31) < 0)
                        operator delete((void *)v26[1]);
                      v27 = v26;
                      v28 = 0x1012C404EF22A49;
                      goto LABEL_52;
                    }
                    break;
                  case 3:
                    v40 = *(unint64_t **)v22;
                    do
                    {
                      v41 = __ldaxr(v40);
                      v42 = v41 - 1;
                    }
                    while (__stlxr(v42, v40));
                    if (!v42)
                    {
                      v43 = *(unint64_t **)v22;
                      if (!*(_QWORD *)v22)
                        goto LABEL_53;
                      v44 = (void *)v43[1];
                      if (v44)
                      {
                        v43[2] = (unint64_t)v44;
                        operator delete(v44);
                      }
                      v27 = v43;
                      v28 = 0x1080C409938AC02;
                      goto LABEL_52;
                    }
                    break;
                  case 4:
                    v29 = *(unint64_t **)v22;
                    do
                    {
                      v30 = __ldaxr(v29);
                      v31 = v30 - 1;
                    }
                    while (__stlxr(v31, v29));
                    if (!v31)
                    {
                      v32 = *(unint64_t **)v22;
                      if (!*(_QWORD *)v22)
                        goto LABEL_53;
                      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)(v32 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
                      goto LABEL_45;
                    }
                    break;
                  case 5:
                    v45 = *(unint64_t **)v22;
                    do
                    {
                      v46 = __ldaxr(v45);
                      v47 = v46 - 1;
                    }
                    while (__stlxr(v47, v45));
                    if (!v47)
                    {
                      v32 = *(unint64_t **)v22;
                      if (!*(_QWORD *)v22)
                        goto LABEL_53;
                      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)(v32 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
LABEL_45:
                      v27 = v32;
                      v28 = 0x1020C405E66F15BLL;
                      goto LABEL_52;
                    }
                    break;
                  case 8:
                    v48 = *(unint64_t **)v22;
                    do
                    {
                      v49 = __ldaxr(v48);
                      v50 = v49 - 1;
                    }
                    while (__stlxr(v50, v48));
                    if (!v50)
                    {
                      v51 = *(unint64_t **)v22;
                      if (!*(_QWORD *)v22)
                        goto LABEL_53;
                      boost::detail::shared_count::~shared_count((unsigned int **)v51 + 2);
                      v27 = v51;
                      v39 = -235920773;
                      goto LABEL_51;
                    }
                    break;
                  case 9:
                    v33 = *(unint64_t **)v22;
                    do
                    {
                      v34 = __ldaxr(v33);
                      v35 = v34 - 1;
                    }
                    while (__stlxr(v35, v33));
                    if (!v35)
                    {
                      v36 = *(unint64_t **)v22;
                      if (*(_QWORD *)v22)
                      {
                        v37 = (void *)v36[6];
                        if (v37)
                        {
                          v36[7] = (unint64_t)v37;
                          operator delete(v37);
                        }
                        v38 = (void *)v36[3];
                        if (v38)
                        {
                          v36[4] = (unint64_t)v38;
                          operator delete(v38);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v36 + 1));
                        v27 = v36;
                        v39 = 2071181815;
LABEL_51:
                        v28 = v39 | 0x1030C4000000000;
LABEL_52:
                        v10 = MEMORY[0x219A19A08](v27, v28);
                      }
LABEL_53:
                      *(_QWORD *)v22 = 0;
                    }
                    break;
                  default:
                    break;
                }
                v52 = *(_QWORD *)v21;
                *(_QWORD *)(v22 + 5) = *(_QWORD *)(v21 + 5);
                *(_QWORD *)v22 = v52;
                LODWORD(v52) = *(unsigned __int8 *)(v21 + 12);
                *(_BYTE *)(v22 + 12) = v52;
                v53 = v52 > 9;
                v54 = (1 << v52) & 0x33C;
                if (!v53 && v54 != 0)
                {
                  v56 = *(unint64_t **)v22;
                  do
                    v57 = __ldaxr(v56);
                  while (__stlxr(v57 + 1, v56));
                }
              }
              ++v20;
            }
            while (v20 < **((_QWORD **)v4 + 3));
          }
          v58 = (char **)*((_QWORD *)v4 + 5);
          v59 = *v58;
          v60 = v58[1];
          v61 = v60 - *v58;
          if (v61)
          {
            v62 = (_QWORD *)*((_QWORD *)v4 + 6);
            v63 = v61 >> 4;
            v94 = v59;
            v60 = v59;
            do
            {
              v64 = (uint64_t *)&v60[16 * (v63 >> 1)];
              v66 = *v64;
              v65 = (char *)(v64 + 2);
              v10 = turi::query_eval::less_than_full_function::compare(v62, (_QWORD *)(v66 + 8), v18, v11);
              if ((_DWORD)v10)
                v63 += ~(v63 >> 1);
              else
                v63 >>= 1;
              if ((_DWORD)v10)
                v60 = v65;
            }
            while (v63);
            v4 = v96;
            v67 = (char *)**((_QWORD **)v96 + 5);
            v68 = *(char **)(*((_QWORD *)v96 + 5) + 8);
            v59 = v94;
          }
          else
          {
            v67 = v59;
            v68 = v59;
          }
          v69 = (v60 - v59) >> 4;
          if (v69 != (v68 - v67) >> 4)
          {
            if (v60 == v59)
            {
              v69 = 0;
              goto LABEL_76;
            }
            v10 = turi::query_eval::less_than_full_function::compare(*((_QWORD **)v4 + 6), v18, (_QWORD *)(*(_QWORD *)&v67[16 * v69] + 8), v11);
            if (!(_DWORD)v10)
              goto LABEL_76;
          }
          --v69;
LABEL_76:
          v70 = v69 >> 6;
          v71 = 1 << v69;
          if ((*(_QWORD *)(**((_QWORD **)v4 + 7) + 8 * (v69 >> 6)) & (1 << v69)) != 0)
          {
            v72 = (unsigned __int8 *)(**((_QWORD **)v4 + 8) + v69);
            do
            {
              while (*v72 == 1)
                ;
              do
                v73 = __ldaxr(v72);
              while (__stlxr(1u, v72));
            }
            while (v73);
            v74 = **((_QWORD **)v4 + 7);
            if ((*(_QWORD *)(v74 + 8 * v70) & v71) != 0)
            {
              v10 = **((_QWORD **)v4 + 9) + 24 * v69;
              v75 = *(unsigned __int8 **)v10;
              v76 = *(unsigned __int8 **)(v10 + 8);
              if (v76 == *(unsigned __int8 **)v10)
              {
                if ((_QWORD *)v10 != v18)
                  std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v10, (uint64_t *)*v18, *v90, ((uint64_t)*v90 - *v18) >> 4);
              }
              else
              {
                v77 = *v18;
                if (&v76[-*(_QWORD *)v10] == (unsigned __int8 *)((char *)*v90 - *v18))
                {
                  while (1)
                  {
                    v10 = std::__equal_to::operator()[abi:ne180100]<turi::flexible_type,turi::flexible_type>((uint64_t)&v97, v75, v77);
                    if (!(_DWORD)v10)
                      break;
                    v75 += 16;
                    v77 += 16;
                    if (v75 == v76)
                      goto LABEL_92;
                  }
                  v74 = **((_QWORD **)v4 + 7);
                  v70 = v69 >> 6;
                }
                v78 = (unint64_t *)(v74 + 8 * v70);
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 & ~v71, v78));
              }
            }
LABEL_92:
            v80 = **((_QWORD **)v4 + 8);
            __dmb(0xBu);
            *(_BYTE *)(v80 + v69) = 0;
          }
          *v95 = 0;
          v81 = **((_QWORD **)v4 + 3);
          v82 = *(_QWORD *)v14;
          if (v81 < (uint64_t)(*((_QWORD *)v14 + 1) - *(_QWORD *)v14) >> 4)
          {
            v83 = 16 * v81;
            do
            {
              turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(v93, (uint64_t *)(**(_QWORD **)(v82 + v83) + 16 * v17));
              ++v81;
              v82 = *(_QWORD *)v14;
              v83 += 16;
            }
            while (v81 < (uint64_t)(*((_QWORD *)v14 + 1) - *(_QWORD *)v14) >> 4);
          }
          v84 = (uint64_t *)*((_QWORD *)v96 + 10);
          v85 = turi::thread::get_tls_data((turi::thread *)v10);
          v86 = *v84;
          v4 = v96;
          v87 = (__int128 *)(v86 + 24 * *(_QWORD *)v85);
          MEMORY[0x219A1939C](v87, *v92, *v95);
          pthread_mutex_lock((pthread_mutex_t *)(**((_QWORD **)v96 + 11) + (v69 << 6)));
          *(_QWORD *)(**((_QWORD **)v96 + 12) + 8 * v69) += *v95 + (**((_QWORD **)v96 + 3) << 6) + 32;
          ++*(_QWORD *)(**((_QWORD **)v96 + 13) + 8 * v69);
          std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100]<std::vector<turi::flexible_type>&,std::string&,0>(&v97, (uint64_t **)v18, v87);
          v88 = *(_QWORD *)(**((_QWORD **)v96 + 14) + 96 * v69 + 56);
          if (!v88)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v88 + 48))(v88, &v97);
          if (v99 < 0)
            operator delete(__p);
          v100 = &v97;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
          v10 = pthread_mutex_unlock((pthread_mutex_t *)(**((_QWORD **)v96 + 11) + (v69 << 6)));
          ++v17;
        }
        while (v17 != v91);
      }
    }
  }
  return 0;
}

void sub_21809EB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  *(_QWORD *)(v24 - 88) = &a16;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 88));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0,std::allocator<turi::query_eval::scatter_partition(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,std::vector<BOOL> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> &,turi::dense_bitset &)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

uint64_t std::__equal_to::operator()[abi:ne180100]<turi::flexible_type,turi::flexible_type>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _BOOL8 v3;
  double v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  double v10;
  char v11;
  size_t v12;
  unsigned int v13;
  double *v14;
  double *v15;
  unint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  unsigned int v23;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  size_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;

  switch(*(_BYTE *)(a3 + 12))
  {
    case 0:
      v3 = 0;
      switch(a2[12])
      {
        case 0u:
          return *(_QWORD *)a2 == *(_QWORD *)a3;
        case 1u:
          v5 = *(double *)a2;
          v6 = *(_QWORD *)a3;
          return v5 == (double)v6;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          return *(_QWORD *)a3 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && *((_DWORD *)a2 + 2) == 0;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      v3 = 0;
      switch(a2[12])
      {
        case 0u:
          v5 = *(double *)a3;
          v6 = *(_QWORD *)a2;
          return v5 == (double)v6;
        case 1u:
          return *(double *)a2 == *(double *)a3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          v71 = *(double *)a3;
          v72 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
          return vabdd_f64(v72, v71) < 0.0000005;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v7 = a2[12];
      v8 = v7 - 3 >= 7 && v7 >= 2;
      if (!v8)
        return 0;
      if (v7 != 2)
        turi::apply_binary_op_ff();
      v9 = *(_QWORD *)a3;
      v10 = *(double *)a2;
      v11 = *(_BYTE *)(*(_QWORD *)a2 + 31);
      v12 = v11 < 0 ? *(_QWORD *)(*(_QWORD *)&v10 + 16) : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
      v73 = *(char *)(v9 + 31) < 0 ? *(_QWORD *)(v9 + 16) : *(unsigned __int8 *)(v9 + 31);
      if (v12 != v73)
        return 0;
      v74 = (_QWORD *)(*(_QWORD *)&v10 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
        v74 = (_QWORD *)*v74;
      v75 = (_QWORD *)(v9 + 8);
      if ((*(_BYTE *)(v9 + 31) & 0x80) != 0)
        v75 = (_QWORD *)*v75;
      if (v11 < 0)
      {
        return memcmp(v74, v75, v12) == 0;
      }
      else
      {
        if (!v12)
          return 1;
        v76 = v12 - 1;
        do
        {
          v78 = *(unsigned __int8 *)v74;
          v74 = (_QWORD *)((char *)v74 + 1);
          v77 = v78;
          v80 = *(unsigned __int8 *)v75;
          v75 = (_QWORD *)((char *)v75 + 1);
          v79 = v80;
          v8 = v76-- != 0;
          v81 = v8;
          v3 = v77 == v79;
        }
        while (v77 == v79 && (v81 & 1) != 0);
      }
      return v3;
    case 3:
      v13 = a2[12];
      if (v13 > 9)
        turi::apply_binary_op_ff();
      if (v13 != 3)
        return 0;
      v14 = *(double **)(*(_QWORD *)a2 + 8);
      v15 = *(double **)(*(_QWORD *)a2 + 16);
      v16 = v15 - v14;
      v17 = *(double **)(*(_QWORD *)a3 + 8);
      if (v16 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v17) >> 3)
        return 0;
      if (v15 == v14)
        return 1;
      if (v16 <= 1)
        v18 = 1;
      else
        v18 = v15 - v14;
      if (*v14 != *v17)
        return 0;
      v19 = 1;
      do
      {
        v20 = v19;
        if (v18 == v19)
          break;
        v21 = v14[v19];
        v22 = v17[v19++];
      }
      while (v21 == v22);
      return v20 >= v16;
    case 4:
      v23 = a2[12];
      if (v23 > 9)
        turi::apply_binary_op_ff();
      if (v23 != 4)
        return 0;
      return turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v83, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(*(_QWORD *)a3 + 8));
    case 5:
      v25 = a2[12];
      if (v25 > 9)
        turi::apply_binary_op_ff();
      if (v25 != 5)
        return 0;
      return turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v83, (uint64_t **)(*(_QWORD *)a2 + 8), (uint64_t **)(*(_QWORD *)a3 + 8));
    case 6:
      v3 = 0;
      switch(a2[12])
      {
        case 0u:
          return *(_QWORD *)a2 == (uint64_t)(*(_QWORD *)a3 << 8) >> 8 && *(_DWORD *)(a3 + 8) == 0;
        case 1u:
          v72 = *(double *)a2;
          v71 = (double)*(int *)(a3 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
          return vabdd_f64(v72, v71) < 0.0000005;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          return ((*(_QWORD *)a3 ^ *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)a2 + 2) == *(_DWORD *)(a3 + 8);
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v26 = a2[12];
      if (v26 >= 0xA)
        turi::apply_binary_op_ff();
      return v26 == 7;
    case 8:
      v27 = a2[12];
      if (v27 < 8 || v27 == 9)
        return 0;
      if (v27 != 8)
        turi::apply_binary_op_ff();
      return turi::image_type::operator==(*(_QWORD *)a2 + 8, *(_QWORD *)a3 + 8);
    case 9:
      v30 = a2[12];
      if (v30 < 9)
        return 0;
      if (v30 != 9)
        turi::apply_binary_op_ff();
      v31 = *(_QWORD *)a3;
      v32 = *(_QWORD **)a2;
      if (*(_QWORD *)a3 == *(_QWORD *)a2)
        return 1;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v32 + 1), v31 + 8))
        return 0;
      v34 = (char *)v32[3];
      v33 = (char *)v32[4];
      v35 = v33 - v34;
      if (v33 == v34)
        return 1;
      if (!v32[1])
        return 1;
      v36 = 1;
      do
      {
        v37 = *(_QWORD *)v34;
        v34 += 8;
        v36 *= v37;
      }
      while (v34 != v33);
      if (!v36)
        return 1;
      v82 = 0;
      std::vector<unsigned long>::vector(&v83, v35 >> 3, &v82);
      v38 = v83;
      v39 = v84;
      v40 = **(_QWORD **)(v31 + 8);
      v41 = (char *)v84 - (char *)v83;
      v42 = v84 - v83;
      v43 = v42 - 1;
      if (v42 <= 1)
        v44 = 1;
      else
        v44 = v84 - v83;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (v39 == v38)
    {
      v52 = 0;
      v53 = *(double *)(*(_QWORD *)v32[1] + 8 * v32[9]);
    }
    else
    {
      v45 = 0;
      v46 = (uint64_t *)v32[6];
      v47 = v38;
      v48 = v44;
      do
      {
        v50 = *v47++;
        v49 = v50;
        v51 = *v46++;
        v45 += v51 * v49;
        --v48;
      }
      while (v48);
      v52 = 0;
      v53 = *(double *)(*(_QWORD *)v32[1] + 8 * (v32[9] + v45));
      v54 = *(uint64_t **)(v31 + 48);
      v55 = v38;
      v56 = v44;
      do
      {
        v58 = *v55++;
        v57 = v58;
        v59 = *v54++;
        v52 += v59 * v57;
        --v56;
      }
      while (v56);
    }
    v60 = *(double *)(v40 + 8 * (*(_QWORD *)(v31 + 72) + v52));
    v3 = v53 == v60;
    if (v53 != v60)
    {
LABEL_80:
      if (!v38)
        return v3;
      goto LABEL_115;
    }
    v61 = v42;
    v62 = v42 - 1;
    if (v41 >= 1)
      break;
LABEL_78:
    if ((v62 & 0x8000000000000000) != 0 || !v61)
      goto LABEL_80;
  }
  v63 = v32[3];
  v64 = v38[v43] + 1;
  v38[v43] = v64;
  if (v64 < *(_QWORD *)(v63 + 8 * v43))
  {
    v61 = 1;
    v62 = v42 - 1;
    goto LABEL_78;
  }
  v65 = v63 - 16;
  v66 = v42;
  v67 = (unint64_t *)((char *)v38 + (v41 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    v68 = v66 - 1;
    v67[1] = 0;
    if ((uint64_t)(v66 - 1) <= 0)
      break;
    v69 = *v67 + 1;
    *v67-- = v69;
    v70 = *(_QWORD *)(v65 + 8 * v66--);
    if (v69 < v70)
    {
      v62 = v68 - 1;
      v61 = 1;
      goto LABEL_78;
    }
  }
  v3 = 1;
LABEL_115:
  v84 = v38;
  operator delete(v38);
  return v3;
}

std::string *std::pair<std::vector<turi::flexible_type>,std::string>::pair[abi:ne180100]<std::vector<turi::flexible_type>&,std::string&,0>(std::string *a1, uint64_t **a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v5 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    a1[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_21809F1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::query@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;

  v4 = *(uint64_t **)(result + 56);
  v5 = *(_QWORD *)(result + 64) - (_QWORD)v4;
  if (!v5)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    return result;
  }
  v6 = a2 + 1;
  if ((unint64_t)(a2 + 1) <= 1)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    if (v4 != (uint64_t *)a3)
    {
      v7 = *v4;
      *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)v4 + 5);
      *(_QWORD *)a3 = v7;
      v8 = *((unsigned __int8 *)v4 + 12);
      *(_BYTE *)(a3 + 12) = v8;
      switch(v8)
      {
        case 2:
          v9 = *(unint64_t **)a3;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
          break;
        case 3:
          v45 = *(unint64_t **)a3;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 + 1, v45));
          break;
        case 4:
          v47 = *(unint64_t **)a3;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 + 1, v47));
          break;
        case 5:
          v49 = *(unint64_t **)a3;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 + 1, v49));
          break;
        case 8:
          v51 = *(unint64_t **)a3;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 + 1, v51));
          break;
        case 9:
          v53 = *(unint64_t **)a3;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 + 1, v53));
          break;
        default:
          return result;
      }
    }
    return result;
  }
  v11 = result;
  v12 = *(_QWORD *)(result + 16);
  if (v6 >= v12)
  {
    *(_QWORD *)a3 = 0;
    v34 = (uint64_t)&v4[4 * (v5 >> 5) - 4];
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    if (v34 != a3)
    {
      v35 = *(_QWORD *)v34;
      *(_QWORD *)(a3 + 5) = *(_QWORD *)(v34 + 5);
      *(_QWORD *)a3 = v35;
      v36 = *(unsigned __int8 *)(v34 + 12);
      *(_BYTE *)(a3 + 12) = v36;
      switch(v36)
      {
        case 2:
          v37 = *(unint64_t **)a3;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 + 1, v37));
          break;
        case 3:
          v55 = *(unint64_t **)a3;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 + 1, v55));
          break;
        case 4:
          v57 = *(unint64_t **)a3;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 + 1, v57));
          break;
        case 5:
          v59 = *(unint64_t **)a3;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 + 1, v59));
          break;
        case 8:
          v61 = *(unint64_t **)a3;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 + 1, v61));
          break;
        case 9:
          v63 = *(unint64_t **)a3;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 + 1, v63));
          break;
        default:
          return result;
      }
    }
    return result;
  }
  v13 = *(double *)(result + 24);
  result = turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::fast_query_iterator((_QWORD *)result, a2);
  v14 = *(_QWORD *)(result + 16);
  if ((v14 & 0x8000000000000000) != 0)
    goto LABEL_122;
  v15 = (int)((double)(int)v6 + (double)v12 * v13);
  v16 = (int)((double)(int)v6 - (double)v12 * v13) & ~((int)((double)(int)v6 - (double)v12 * v13) >> 31);
  if (v14 >= v16)
  {
    v17 = *(_QWORD *)(result + 24);
    if ((v17 & 0x8000000000000000) == 0)
    {
      if (v17 <= v15)
      {
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
        *(_BYTE *)(a3 + 12) = 0;
        if (result != a3)
        {
          v42 = *(_QWORD *)result;
          *(_QWORD *)(a3 + 5) = *(_QWORD *)(result + 5);
          *(_QWORD *)a3 = v42;
          LODWORD(v42) = *(unsigned __int8 *)(result + 12);
          *(_BYTE *)(a3 + 12) = v42;
          switch((int)v42)
          {
            case 2:
              v43 = *(unint64_t **)a3;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 + 1, v43));
              break;
            case 3:
              v85 = *(unint64_t **)a3;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 + 1, v85));
              break;
            case 4:
              v87 = *(unint64_t **)a3;
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 + 1, v87));
              break;
            case 5:
              v89 = *(unint64_t **)a3;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 + 1, v89));
              break;
            case 8:
              v91 = *(unint64_t **)a3;
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 + 1, v91));
              break;
            case 9:
              v93 = *(unint64_t **)a3;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 + 1, v93));
              break;
            default:
              return result;
          }
        }
        return result;
      }
      goto LABEL_15;
    }
LABEL_122:
    truncate_check_impl<long long,unsigned long,0>::operator()(unsigned long)::{lambda(void)#1}::operator()();
  }
LABEL_15:
  v18 = *(_QWORD *)(v11 + 56);
  v19 = *(_QWORD *)(v11 + 64);
  v20 = v19 - v18;
  if (v19 == v18)
    goto LABEL_37;
  v21 = 0;
  v22 = v20 >> 5;
  if (v22 <= 1)
    v22 = 1;
  v23 = (uint64_t *)(v18 + 24);
  v24 = -1;
  v25 = -1;
  do
  {
    v26 = *(v23 - 1);
    if (v26 < 0)
      goto LABEL_122;
    if (v26 >= (uint64_t)v16)
    {
      v27 = *v23;
      if (*v23 < 0)
        goto LABEL_122;
      if (v27 <= v15)
      {
        v28 = (double)(((unint64_t)(v26 + v27) >> 1) - v6);
        if (v28 < (double)v24)
        {
          v24 = (unint64_t)v28;
          v25 = v21;
        }
      }
    }
    v23 += 4;
    ++v21;
  }
  while (v22 != v21);
  if (v25 == -1)
  {
LABEL_37:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    if (result != a3)
    {
      v39 = *(_QWORD *)result;
      *(_QWORD *)(a3 + 5) = *(_QWORD *)(result + 5);
      *(_QWORD *)a3 = v39;
      LODWORD(v39) = *(unsigned __int8 *)(result + 12);
      *(_BYTE *)(a3 + 12) = v39;
      switch((int)v39)
      {
        case 2:
          v40 = *(unint64_t **)a3;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
          break;
        case 3:
          v65 = *(unint64_t **)a3;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 + 1, v65));
          break;
        case 4:
          v67 = *(unint64_t **)a3;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 + 1, v67));
          break;
        case 5:
          v69 = *(unint64_t **)a3;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 + 1, v69));
          break;
        case 8:
          v71 = *(unint64_t **)a3;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 + 1, v71));
          break;
        case 9:
          v73 = *(unint64_t **)a3;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 + 1, v73));
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    v29 = (uint64_t *)(v18 + 32 * v25);
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    if (v29 != (uint64_t *)a3)
    {
      v30 = *v29;
      *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)v29 + 5);
      *(_QWORD *)a3 = v30;
      v31 = *((unsigned __int8 *)v29 + 12);
      *(_BYTE *)(a3 + 12) = v31;
      switch(v31)
      {
        case 2:
          v32 = *(unint64_t **)a3;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 + 1, v32));
          break;
        case 3:
          v75 = *(unint64_t **)a3;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 + 1, v75));
          break;
        case 4:
          v77 = *(unint64_t **)a3;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 + 1, v77));
          break;
        case 5:
          v81 = *(unint64_t **)a3;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 + 1, v81));
          break;
        case 8:
          v83 = *(unint64_t **)a3;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 + 1, v83));
          break;
        case 9:
          v79 = *(unint64_t **)a3;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 + 1, v79));
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

uint64_t turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::fast_query_iterator(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = a2 + 1;
  if ((unint64_t)(a2 + 1) <= 1)
    return a1[7];
  if (v2 >= a1[2])
    return a1[8] - 32;
  *(_QWORD *)((char *)v13 + 5) = 0;
  v13[0] = 0;
  v13[2] = a2 + 1;
  v13[3] = a2 + 1;
  v3 = a1[7];
  v4 = a1[8];
  v5 = v3;
  if (v4 != v3)
  {
    v6 = (v4 - v3) >> 5;
    v5 = a1[7];
    do
    {
      v7 = v6 >> 1;
      v8 = v5 + 32 * (v6 >> 1);
      v9 = (float)((float)*(unint64_t *)(v8 + 16) + (float)*(unint64_t *)(v8 + 24)) * 0.5;
      v10 = v8 + 32;
      v6 += ~(v6 >> 1);
      if (v9 < (float)((float)((float)v2 + (float)v2) * 0.5))
        v5 = v10;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v5 == v4)
  {
    v3 = v4 - 32;
  }
  else if (v5 != v3)
  {
    if (vabds_f32((float)((float)*(unint64_t *)(v5 - 16) + (float)*(unint64_t *)(v5 - 8)) * 0.5, (float)v2) >= vabds_f32((float)((float)*(unint64_t *)(v5 + 16) + (float)*(unint64_t *)(v5 + 24)) * 0.5, (float)v2))v11 = 0;
    else
      v11 = -1;
    v3 = v5 + 32 * v11;
  }
  turi::sketches::quantile_sketch<turi::flexible_type,turi::query_eval::less_than_full_function>::element::~element((uint64_t)v13);
  return v3;
}

void truncate_check_impl<long long,unsigned long,0>::operator()(unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/util/basic_types.hpp", 91);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"x", 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(1ULL << 63)", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/util/basic_types.hpp", "operator()", 31, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  truncate_check_impl<long long,unsigned long,0>::operator()(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21809FAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *,false>(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  uint64_t *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  unint64_t v23;
  uint64_t *v24;
  __n128 v25;
  char v26;
  char v27;
  __n128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

uint64_t turi::query_eval::less_than_partial_function::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  size_t v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned __int8 *v68;
  unsigned int v69;
  uint64_t v71;
  int v72;
  uint64_t v73;
  size_t v74;
  unsigned int v75;
  unint64_t *v76;
  unint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  double *v80;
  unsigned int v81;
  unsigned int v82;
  _QWORD *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  double v124;
  unsigned __int8 *v125;
  double v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  size_t v131;
  size_t v132;
  unsigned int v133;
  unint64_t *v134;
  unint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  double *v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  _QWORD *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  uint64_t v183;
  unsigned __int8 *v184;
  unsigned __int8 *v185;
  double v186;
  double v187;
  uint64_t v188;
  unsigned __int8 *v189;
  unsigned __int8 *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  unint64_t v195;
  const void *v196;
  size_t v197;
  unsigned int v198;
  double v199;
  unint64_t *v200;
  uint64_t v201;
  double *v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  double v213;
  unint64_t v214;
  unint64_t v215;
  const void *v216;
  const void *v217;
  int v218;
  uint64_t v219;
  const void *v220;
  const void *v221;
  int v222;
  size_t v223;
  const void *v224;
  size_t v225;
  const void *v226;
  size_t v227;
  int v228;
  BOOL v229;
  unsigned int v230;
  unsigned int v231;
  double v232;
  unint64_t *v233;
  uint64_t v234;
  double *v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  double v241;
  uint64_t v242;
  double v243;
  uint64_t v244;
  double v245;
  const void *v246;
  size_t v247;
  size_t v248;
  const void *v249;
  size_t v250;
  const void *v251;
  size_t v252;
  int v253;
  BOOL v254;
  uint64_t result;
  BOOL v256;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t *v268;

  v4 = *(uint64_t **)a1;
  v5 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 == v5)
    return 0;
  v9 = 0;
  v10 = &unk_254FEE000;
LABEL_3:
  v11 = *v4;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8));
  v13 = (unsigned __int8 *)(*a2 + 16 * *v4);
  switch(v10[3084])
  {
    case 0:
      switch(v13[12])
      {
        case 0u:
          if (*(_QWORD *)v13 == turi::FLEX_UNDEFINED)
            goto LABEL_168;
          goto LABEL_76;
        case 1u:
          a4.n128_u64[0] = *(_QWORD *)v13;
          v65 = turi::FLEX_UNDEFINED;
          goto LABEL_158;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v13 << 8) >> 8 && !*((_DWORD *)v13 + 2))
            goto LABEL_168;
          goto LABEL_76;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(v13[12])
      {
        case 0u:
          a4.n128_u64[0] = turi::FLEX_UNDEFINED;
          v65 = *(_QWORD *)v13;
LABEL_158:
          v124 = (double)v65;
          goto LABEL_159;
        case 1u:
          a4.n128_u64[0] = *(_QWORD *)v13;
          v124 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_159:
          if (a4.n128_f64[0] != v124)
            goto LABEL_76;
          goto LABEL_168;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          a4.n128_f64[0] = vabdd_f64((double)*((int *)v13 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v13 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_167;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v14 = v13[12];
      if (v14 - 3 < 7 || v14 < 2)
        goto LABEL_76;
      if (v14 != 2)
        turi::apply_binary_op_ff();
      v16 = *(_QWORD *)v13;
      v17 = *(char *)(*(_QWORD *)v13 + 31);
      v18 = *(unsigned __int8 *)(*(_QWORD *)v13 + 31);
      v19 = v17 < 0 ? *(_QWORD *)(v16 + 16) : v18;
      v180 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
           ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
           : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v19 != v180)
        goto LABEL_76;
      v181 = (unsigned __int8 *)(v16 + 8);
      if ((v18 & 0x80) != 0)
        v181 = *(unsigned __int8 **)v181;
      v182 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v182 = *(unsigned __int8 **)v182;
      if ((v18 & 0x80) != 0)
      {
        if (memcmp(v181, v182, v19))
          goto LABEL_76;
      }
      else if (v19)
      {
        while (*v181 == *v182)
        {
          ++v181;
          ++v182;
          if (!--v19)
            goto LABEL_168;
        }
LABEL_76:
        v68 = (unsigned __int8 *)(*a3 + 16 * v11);
        switch(v10[3084])
        {
          case 0:
            switch(v68[12])
            {
              case 0u:
                if (*(_QWORD *)v68 == turi::FLEX_UNDEFINED)
                  return ((v12 >> v9) & 1) == 0;
                goto LABEL_313;
              case 1u:
                a4.n128_u64[0] = *(_QWORD *)v68;
                v120 = turi::FLEX_UNDEFINED;
                goto LABEL_176;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v68 << 8) >> 8 && !*((_DWORD *)v68 + 2))
                  return ((v12 >> v9) & 1) == 0;
                goto LABEL_313;
              default:
                turi::apply_binary_op_ff();
            }
          case 1:
            switch(v68[12])
            {
              case 0u:
                a4.n128_u64[0] = turi::FLEX_UNDEFINED;
                v120 = *(_QWORD *)v68;
LABEL_176:
                v126 = (double)v120;
                goto LABEL_181;
              case 1u:
                a4.n128_u64[0] = *(_QWORD *)v68;
                v126 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_181:
                if (a4.n128_f64[0] == v126)
                  return ((v12 >> v9) & 1) == 0;
                goto LABEL_313;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                a4.n128_f64[0] = vabdd_f64((double)*((int *)v68 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v68 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
                goto LABEL_185;
              default:
                turi::apply_binary_op_ff();
            }
          case 2:
            v69 = v68[12];
            if (v69 - 3 < 7 || v69 < 2)
              goto LABEL_313;
            if (v69 != 2)
              turi::apply_binary_op_ff();
            v71 = *(_QWORD *)v68;
            v72 = *(char *)(*(_QWORD *)v68 + 31);
            v73 = *(unsigned __int8 *)(*(_QWORD *)v68 + 31);
            v74 = v72 < 0 ? *(_QWORD *)(v71 + 16) : v73;
            v183 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
                 ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
                 : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
            if (v74 != v183)
              goto LABEL_313;
            v184 = (unsigned __int8 *)(v71 + 8);
            if ((v73 & 0x80) != 0)
              v184 = *(unsigned __int8 **)v184;
            v185 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
            if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
              v185 = *(unsigned __int8 **)v185;
            if ((v73 & 0x80) == 0)
            {
              if (!v74)
                return ((v12 >> v9) & 1) == 0;
              do
              {
                if (*v184 != *v185)
                  goto LABEL_313;
                ++v184;
                ++v185;
                --v74;
              }
              while (v74);
              return ((v12 >> v9) & 1) == 0;
            }
            if (!memcmp(v184, v185, v74))
              return ((v12 >> v9) & 1) == 0;
            goto LABEL_313;
          case 3:
            v75 = v68[12];
            if (v75 > 9)
              turi::apply_binary_op_ff();
            if (v75 != 3)
              goto LABEL_313;
            v78 = *(_QWORD *)v68 + 8;
            v76 = *(unint64_t **)v78;
            v77 = *(unint64_t **)(v78 + 8);
            v79 = ((uint64_t)v77 - *(_QWORD *)v78) >> 3;
            v80 = *(double **)(turi::FLEX_UNDEFINED + 8);
            if (v79 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v80) >> 3)
              goto LABEL_313;
            if (v77 == v76)
              return ((v12 >> v9) & 1) == 0;
            if (v79 <= 1)
              v79 = 1;
            while (1)
            {
              a4.n128_u64[0] = *v76;
              if (*(double *)v76 != *v80)
                break;
              ++v80;
              ++v76;
              if (!--v79)
                return ((v12 >> v9) & 1) == 0;
            }
            goto LABEL_313;
          case 4:
            v81 = v68[12];
            if (v81 > 9)
              turi::apply_binary_op_ff();
            if (v81 == 4
              && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t *)(*(_QWORD *)v68 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
            {
              return ((v12 >> v9) & 1) == 0;
            }
            goto LABEL_313;
          case 5:
            v121 = v68[12];
            if (v121 > 9)
              turi::apply_binary_op_ff();
            if (v121 == 5
              && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t **)(*(_QWORD *)v68 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
            {
              return ((v12 >> v9) & 1) == 0;
            }
            goto LABEL_313;
          case 6:
            switch(v68[12])
            {
              case 0u:
                if (*(_QWORD *)v68 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FEEC08)
                  return ((v12 >> v9) & 1) == 0;
                goto LABEL_313;
              case 1u:
                a4.n128_f64[0] = vabdd_f64(*(double *)v68, (double)dword_254FEEC08 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_185:
                if (a4.n128_f64[0] < 0.0000005)
                  return ((v12 >> v9) & 1) == 0;
                goto LABEL_313;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_313;
              case 6u:
                if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v68) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *((_DWORD *)v68 + 2) == dword_254FEEC08)
                {
                  return ((v12 >> v9) & 1) == 0;
                }
                goto LABEL_313;
              default:
                turi::apply_binary_op_ff();
            }
          case 7:
            v122 = v68[12];
            if (v122 < 7 || v122 - 8 < 2)
              goto LABEL_313;
            if (v122 != 7)
              turi::apply_binary_op_ff();
            return ((v12 >> v9) & 1) == 0;
          case 8:
            v123 = v68[12];
            if (v123 < 8)
              goto LABEL_313;
            if (v123 != 8)
            {
              if (v123 != 9)
                turi::apply_binary_op_ff();
              goto LABEL_313;
            }
            if (!turi::image_type::operator==(*(_QWORD *)v68 + 8, turi::FLEX_UNDEFINED + 8))
              goto LABEL_313;
            return ((v12 >> v9) & 1) == 0;
          case 9:
            v82 = v68[12];
            if (v82 < 9)
              goto LABEL_313;
            if (v82 != 9)
              turi::apply_binary_op_ff();
            v83 = *(_QWORD **)v68;
            if (turi::FLEX_UNDEFINED == *(_QWORD *)v68)
              return ((v12 >> v9) & 1) == 0;
            v263 = turi::FLEX_UNDEFINED;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v83 + 1), turi::FLEX_UNDEFINED + 8))
              goto LABEL_313;
            v85 = (char *)v83[3];
            v84 = (char *)v83[4];
            v86 = v84 - v85;
            if (v84 == v85)
              return ((v12 >> v9) & 1) == 0;
            if (!v83[1])
              return ((v12 >> v9) & 1) == 0;
            v87 = 1;
            do
            {
              v88 = *(_QWORD *)v85;
              v85 += 8;
              v87 *= v88;
            }
            while (v85 != v84);
            if (!v87)
              return ((v12 >> v9) & 1) == 0;
            v266 = 0;
            std::vector<unsigned long>::vector(&v267, v86 >> 3, &v266);
            v89 = v267;
            v90 = v268;
            v91 = **(_QWORD **)(v263 + 8);
            v92 = (char *)v268 - (char *)v267;
            v93 = v268 - v267;
            v94 = v93 - 1;
            if (v93 <= 1)
              v95 = 1;
            else
              v95 = v268 - v267;
            break;
          default:
            turi::apply_binary_op_ff();
        }
        do
        {
          if (v90 == v89)
          {
            v103 = 0;
            v104 = *(double *)(*(_QWORD *)v83[1] + 8 * v83[9]);
          }
          else
          {
            v96 = 0;
            v97 = (uint64_t *)v83[6];
            v98 = v89;
            v99 = v95;
            do
            {
              v101 = *v98++;
              v100 = v101;
              v102 = *v97++;
              v96 += v102 * v100;
              --v99;
            }
            while (v99);
            v103 = 0;
            v104 = *(double *)(*(_QWORD *)v83[1] + 8 * (v83[9] + v96));
            v105 = *(uint64_t **)(v263 + 48);
            v106 = v89;
            v107 = v95;
            do
            {
              v109 = *v106++;
              v108 = v109;
              v110 = *v105++;
              v103 += v110 * v108;
              --v107;
            }
            while (v107);
          }
          v111 = *(double *)(v91 + 8 * (*(_QWORD *)(v263 + 72) + v103));
          if (v104 != v111)
            break;
          v112 = v93;
          v113 = v93 - 1;
          if (v92 >= 1)
          {
            v114 = v83[3];
            v115 = v89[v94] + 1;
            v89[v94] = v115;
            v116 = (v92 & 0xFFFFFFFFFFFFFFF8) - 16;
            v117 = v93 - 1;
            if (v115 >= *(_QWORD *)(v114 + 8 * v94))
            {
              do
              {
                *(uint64_t *)((char *)v89 + v116 + 8) = 0;
                if (v117 <= 0)
                {
                  v268 = v89;
                  operator delete(v89);
                  return ((v12 >> v9) & 1) == 0;
                }
                --v117;
                v118 = *(uint64_t *)((char *)v89 + v116) + 1;
                *(uint64_t *)((char *)v89 + v116) = v118;
                v119 = *(_QWORD *)(v114 + v116);
                v116 -= 8;
              }
              while (v118 >= v119);
              v112 = 1;
              if ((v117 & 0x8000000000000000) == 0)
                continue;
              break;
            }
            v112 = 1;
            v113 = v93 - 1;
          }
          if ((v113 & 0x8000000000000000) != 0)
            break;
        }
        while (v112);
        if (v89)
        {
          v268 = v89;
          operator delete(v89);
        }
        if (v104 != v111)
        {
LABEL_313:
          v191 = *a3 + 16 * v11;
          v192 = *a2 + 16 * v11;
          v10 = (_BYTE *)&unk_254FEE000;
          switch(*(_BYTE *)(v191 + 12))
          {
            case 0:
              switch(*(_BYTE *)(v192 + 12))
              {
                case 0:
                  if (*(_QWORD *)v192 < *(_QWORD *)v191)
                    return (v12 >> v9) & 1;
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v192;
                  v241 = (double)*(uint64_t *)v191;
                  goto LABEL_423;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  if (*(_QWORD *)v191 > (uint64_t)(*(_QWORD *)v192 << 8) >> 8)
                    return (v12 >> v9) & 1;
                  goto LABEL_356;
                default:
                  turi::apply_binary_op_ff();
              }
            case 1:
              switch(*(_BYTE *)(v192 + 12))
              {
                case 0:
                  a4.n128_u64[0] = *(_QWORD *)v191;
                  if (*(double *)v191 > (double)*(uint64_t *)v192)
                    return (v12 >> v9) & 1;
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v192;
                  v241 = *(double *)v191;
                  goto LABEL_423;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  v241 = *(double *)v191;
                  a4.n128_f64[0] = (double)*(int *)(v192 + 8) / 1000000.0
                                 + (double)((uint64_t)(*(_QWORD *)v192 << 8) >> 8);
LABEL_423:
                  if (a4.n128_f64[0] < v241)
                    return (v12 >> v9) & 1;
                  goto LABEL_356;
                default:
                  turi::apply_binary_op_ff();
              }
            case 2:
              v193 = *(unsigned __int8 *)(v192 + 12);
              if (v193 - 3 < 7 || v193 < 2)
                goto LABEL_355;
              if (v193 != 2)
                turi::apply_binary_op_ff();
              v195 = *(_QWORD *)v192;
              if (*(char *)(v195 + 31) < 0)
              {
                v196 = *(const void **)(v195 + 8);
                v197 = *(_QWORD *)(v195 + 16);
              }
              else
              {
                v196 = (const void *)(v195 + 8);
                v197 = *(unsigned __int8 *)(v195 + 31);
              }
              v245 = *(double *)v191;
              v246 = (const void *)(*(_QWORD *)&v245 + 8);
              v247 = *(unsigned __int8 *)(*(_QWORD *)&v245 + 31);
              v249 = *(const void **)(*(_QWORD *)&v245 + 8);
              v248 = *(_QWORD *)(*(_QWORD *)&v245 + 16);
              if ((v247 & 0x80u) == 0)
                v250 = v247;
              else
                v250 = v248;
              if ((v247 & 0x80u) == 0)
                v251 = v246;
              else
                v251 = v249;
              if (v250 >= v197)
                v252 = v197;
              else
                v252 = v250;
              v253 = memcmp(v196, v251, v252);
              v254 = v197 < v250;
              if (v253)
                v254 = v253 < 0;
              v10 = (_BYTE *)&unk_254FEE000;
              if (v254)
                return (v12 >> v9) & 1;
              goto LABEL_356;
            case 3:
              v198 = *(unsigned __int8 *)(v192 + 12);
              if (v198 > 9)
                turi::apply_binary_op_ff();
              if (v198 != 3)
                goto LABEL_355;
              v199 = *(double *)v191;
              v200 = *(unint64_t **)(*(_QWORD *)v192 + 8);
              v201 = *(_QWORD *)(*(_QWORD *)v192 + 16);
              v202 = *(double **)(*(_QWORD *)&v199 + 8);
              v203 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v199 + 16) - (_QWORD)v202) >> 3;
              v204 = v201 - (_QWORD)v200;
              v256 = v204 == 0;
              v205 = v204 >> 3;
              if (v256)
                goto LABEL_339;
              if (v205 <= 1)
                v206 = 1;
              else
                v206 = v205;
              v207 = v203;
              break;
            case 4:
              v208 = *(unsigned __int8 *)(v192 + 12);
              if (v208 > 9)
                turi::apply_binary_op_ff();
              if (v208 != 4)
                goto LABEL_355;
              if (turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v267, (uint64_t *)(*(_QWORD *)v192 + 8), (_QWORD *)(*(_QWORD *)v191 + 8)))
              {
                return (v12 >> v9) & 1;
              }
              goto LABEL_356;
            case 5:
              if (*(unsigned __int8 *)(v192 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_355;
            case 6:
              switch(*(_BYTE *)(v192 + 12))
              {
                case 0:
                  if (*(_QWORD *)v192 < (uint64_t)(*(_QWORD *)v191 << 8) >> 8)
                    return (v12 >> v9) & 1;
                  goto LABEL_356;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v192;
                  if ((double)*(int *)(v191 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v191 << 8) >> 8) > *(double *)v192)
                    return (v12 >> v9) & 1;
                  goto LABEL_356;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_355;
                case 6:
                  v242 = (uint64_t)(*(_QWORD *)v192 << 8) >> 8;
                  if (v242 < (uint64_t)(*(_QWORD *)v191 << 8) >> 8
                    || v242 == (uint64_t)(*(_QWORD *)v191 << 8) >> 8 && *(_DWORD *)(v192 + 8) < *(_DWORD *)(v191 + 8))
                  {
                    return (v12 >> v9) & 1;
                  }
                  goto LABEL_356;
                default:
                  turi::apply_binary_op_ff();
              }
            case 7:
              if (*(unsigned __int8 *)(v192 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_355;
            case 8:
              if (*(unsigned __int8 *)(v192 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_355;
            case 9:
              if (*(unsigned __int8 *)(v192 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
LABEL_355:
              turi::flexible_type_fail(0);
              goto LABEL_356;
            default:
              turi::apply_binary_op_ff();
          }
          while (v207)
          {
            a4.n128_u64[0] = *v200;
            if (*(double *)v200 > *v202)
              break;
            if (*(double *)v200 < *v202)
              return (v12 >> v9) & 1;
            --v207;
            ++v200;
            ++v202;
            if (!--v206)
            {
LABEL_339:
              if (v205 < v203)
                return (v12 >> v9) & 1;
              break;
            }
          }
LABEL_356:
          v209 = *a3 + 16 * v11;
          v210 = *a2 + 16 * v11;
          switch(*(_BYTE *)(v209 + 12))
          {
            case 0:
              switch(*(_BYTE *)(v210 + 12))
              {
                case 0:
                  if (*(_QWORD *)v210 > *(_QWORD *)v209)
                    return ((v12 >> v9) & 1) == 0;
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v210;
                  v243 = (double)*(uint64_t *)v209;
                  goto LABEL_436;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  if (*(_QWORD *)v209 < (uint64_t)(*(_QWORD *)v210 << 8) >> 8)
                    return ((v12 >> v9) & 1) == 0;
                  goto LABEL_416;
                default:
                  turi::apply_binary_op_ff();
              }
            case 1:
              switch(*(_BYTE *)(v210 + 12))
              {
                case 0:
                  a4.n128_u64[0] = *(_QWORD *)v209;
                  if (*(double *)v209 < (double)*(uint64_t *)v210)
                    return ((v12 >> v9) & 1) == 0;
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v210;
                  v243 = *(double *)v209;
                  goto LABEL_436;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  v243 = *(double *)v209;
                  a4.n128_f64[0] = (double)*(int *)(v210 + 8) / 1000000.0
                                 + (double)((uint64_t)(*(_QWORD *)v210 << 8) >> 8);
LABEL_436:
                  if (a4.n128_f64[0] > v243)
                    return ((v12 >> v9) & 1) == 0;
                  goto LABEL_416;
                default:
                  turi::apply_binary_op_ff();
              }
            case 2:
              v211 = *(unsigned __int8 *)(v210 + 12);
              if (v211 - 3 < 7 || v211 < 2)
                goto LABEL_415;
              if (v211 != 2)
                turi::apply_binary_op_ff();
              v213 = *(double *)v209;
              v214 = *(_QWORD *)v210;
              v217 = *(const void **)(v214 + 8);
              v215 = v214 + 8;
              v216 = v217;
              v218 = *(char *)(v215 + 23);
              v221 = *(const void **)(*(_QWORD *)&v213 + 8);
              v219 = *(_QWORD *)&v213 + 8;
              v220 = v221;
              v222 = *(char *)(v219 + 23);
              if (v222 >= 0)
                v223 = *(unsigned __int8 *)(v219 + 23);
              else
                v223 = *(_QWORD *)(v219 + 8);
              if (v222 >= 0)
                v224 = (const void *)v219;
              else
                v224 = v220;
              if (v218 >= 0)
                v225 = *(unsigned __int8 *)(v215 + 23);
              else
                v225 = *(_QWORD *)(v215 + 8);
              if (v218 >= 0)
                v226 = (const void *)v215;
              else
                v226 = v216;
              if (v225 >= v223)
                v227 = v223;
              else
                v227 = v225;
              v228 = memcmp(v224, v226, v227);
              v229 = v223 < v225;
              if (v228)
                v229 = v228 < 0;
              v10 = (_BYTE *)&unk_254FEE000;
              if (v229)
                return ((v12 >> v9) & 1) == 0;
              goto LABEL_416;
            case 3:
              v231 = *(unsigned __int8 *)(v210 + 12);
              if (v231 > 9)
                turi::apply_binary_op_ff();
              if (v231 != 3)
                goto LABEL_415;
              v232 = *(double *)v209;
              v233 = *(unint64_t **)(*(_QWORD *)v210 + 8);
              v234 = *(_QWORD *)(*(_QWORD *)v210 + 16);
              v235 = *(double **)(*(_QWORD *)&v232 + 8);
              v236 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v232 + 16) - (_QWORD)v235) >> 3;
              v237 = v234 - (_QWORD)v233;
              v256 = v237 == 0;
              v238 = v237 >> 3;
              if (v256)
                goto LABEL_405;
              if (v238 <= 1)
                v239 = 1;
              else
                v239 = v238;
              v240 = v236;
              break;
            case 4:
              v230 = *(unsigned __int8 *)(v210 + 12);
              if (v230 > 9)
                turi::apply_binary_op_ff();
              if (v230 != 4)
                goto LABEL_415;
              if (turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v267, (uint64_t *)(*(_QWORD *)v210 + 8), (_QWORD *)(*(_QWORD *)v209 + 8)))
              {
                return ((v12 >> v9) & 1) == 0;
              }
              goto LABEL_416;
            case 5:
              if (*(unsigned __int8 *)(v210 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_415;
            case 6:
              switch(*(_BYTE *)(v210 + 12))
              {
                case 0:
                  if (*(_QWORD *)v210 > (uint64_t)(*(_QWORD *)v209 << 8) >> 8)
                    return ((v12 >> v9) & 1) == 0;
                  goto LABEL_416;
                case 1:
                  a4.n128_u64[0] = *(_QWORD *)v210;
                  if ((double)*(int *)(v209 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v209 << 8) >> 8) < *(double *)v210)
                    return ((v12 >> v9) & 1) == 0;
                  goto LABEL_416;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_415;
                case 6:
                  v244 = (uint64_t)(*(_QWORD *)v210 << 8) >> 8;
                  if (v244 > (uint64_t)(*(_QWORD *)v209 << 8) >> 8
                    || v244 == (uint64_t)(*(_QWORD *)v209 << 8) >> 8 && *(_DWORD *)(v210 + 8) > *(_DWORD *)(v209 + 8))
                  {
                    return ((v12 >> v9) & 1) == 0;
                  }
                  goto LABEL_416;
                default:
                  turi::apply_binary_op_ff();
              }
            case 7:
              if (*(unsigned __int8 *)(v210 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_415;
            case 8:
              if (*(unsigned __int8 *)(v210 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
              goto LABEL_415;
            case 9:
              if (*(unsigned __int8 *)(v210 + 12) >= 0xAu)
                turi::apply_binary_op_ff();
LABEL_415:
              turi::flexible_type_fail(0);
              goto LABEL_416;
            default:
              turi::apply_binary_op_ff();
          }
          while (v240)
          {
            a4.n128_u64[0] = *v233;
            if (*(double *)v233 > *v235)
              break;
            if (*(double *)v233 < *v235)
              goto LABEL_416;
            --v240;
            ++v233;
            ++v235;
            if (!--v239)
            {
LABEL_405:
              if (v238 <= v236)
                goto LABEL_416;
              return ((v12 >> v9) & 1) == 0;
            }
          }
        }
        return ((v12 >> v9) & 1) == 0;
      }
LABEL_168:
      v125 = (unsigned __int8 *)(*a3 + 16 * v11);
      switch(v10[3084])
      {
        case 0:
          switch(v125[12])
          {
            case 0u:
              if (*(_QWORD *)v125 != turi::FLEX_UNDEFINED)
                return (v12 >> v9) & 1;
              goto LABEL_416;
            case 1u:
              a4.n128_u64[0] = *(_QWORD *)v125;
              v127 = turi::FLEX_UNDEFINED;
              goto LABEL_280;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v12 >> v9) & 1;
            case 6u:
              if (turi::FLEX_UNDEFINED != (uint64_t)(*(_QWORD *)v125 << 8) >> 8 || *((_DWORD *)v125 + 2))
                return (v12 >> v9) & 1;
              goto LABEL_416;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(v125[12])
          {
            case 0u:
              a4.n128_u64[0] = turi::FLEX_UNDEFINED;
              v127 = *(_QWORD *)v125;
LABEL_280:
              v186 = (double)v127;
              goto LABEL_281;
            case 1u:
              a4.n128_u64[0] = *(_QWORD *)v125;
              v186 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_281:
              if (a4.n128_f64[0] != v186)
                return (v12 >> v9) & 1;
              goto LABEL_416;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v12 >> v9) & 1;
            case 6u:
              v187 = (double)*((int *)v125 + 2) / 1000000.0
                   + (double)((uint64_t)(*(_QWORD *)v125 << 8) >> 8)
                   - *(double *)&turi::FLEX_UNDEFINED;
              goto LABEL_289;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          v128 = v125[12];
          if (v128 == 2)
          {
            v129 = *(_QWORD *)v125;
            v130 = *(char *)(*(_QWORD *)v125 + 31);
            v131 = *(unsigned __int8 *)(*(_QWORD *)v125 + 31);
            if (v130 < 0)
              v132 = *(_QWORD *)(v129 + 16);
            else
              v132 = v131;
            if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
              v188 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
            else
              v188 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
            if (v132 == v188)
            {
              v189 = (unsigned __int8 *)(v129 + 8);
              if ((v131 & 0x80) != 0)
                v189 = *(unsigned __int8 **)v189;
              v190 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
              if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
                v190 = *(unsigned __int8 **)v190;
              if ((v131 & 0x80) != 0)
              {
                if (!memcmp(v189, v190, v132))
                  goto LABEL_416;
              }
              else
              {
                if (!v132)
                  goto LABEL_416;
                while (*v189 == *v190)
                {
                  ++v189;
                  ++v190;
                  if (!--v132)
                    goto LABEL_416;
                }
              }
            }
          }
          else
          {
            v256 = v128 > 9 || v128 == 2;
            if (v256)
              turi::apply_binary_op_ff();
          }
          return (v12 >> v9) & 1;
        case 3:
          v133 = v125[12];
          if (v133 == 3)
          {
            v136 = *(_QWORD *)v125 + 8;
            v134 = *(unint64_t **)v136;
            v135 = *(unint64_t **)(v136 + 8);
            v137 = ((uint64_t)v135 - *(_QWORD *)v136) >> 3;
            v138 = *(double **)(turi::FLEX_UNDEFINED + 8);
            if (v137 == (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v138) >> 3)
            {
              if (v135 == v134)
                goto LABEL_416;
              if (v137 <= 1)
                v137 = 1;
              while (1)
              {
                a4.n128_u64[0] = *v134;
                if (*(double *)v134 != *v138)
                  break;
                ++v138;
                ++v134;
                if (!--v137)
                  goto LABEL_416;
              }
            }
          }
          else if (v133 > 9 || v133 == 3)
          {
            turi::apply_binary_op_ff();
          }
          return (v12 >> v9) & 1;
        case 4:
          v139 = v125[12];
          if (v139 == 4)
          {
            if ((turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t *)(*(_QWORD *)v125 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)goto LABEL_416;
          }
          else if (v139 > 9 || v139 == 4)
          {
            turi::apply_binary_op_ff();
          }
          return (v12 >> v9) & 1;
        case 5:
          v140 = v125[12];
          if (v140 == 5)
          {
            if (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t **)(*(_QWORD *)v125 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
            {
              goto LABEL_416;
            }
          }
          else if (v140 > 9 || v140 == 5)
          {
            turi::apply_binary_op_ff();
          }
          return (v12 >> v9) & 1;
        case 6:
          switch(v125[12])
          {
            case 0u:
              if (*(_QWORD *)v125 != turi::FLEX_UNDEFINED << 8 >> 8 || dword_254FEEC08)
                return (v12 >> v9) & 1;
              goto LABEL_416;
            case 1u:
              v187 = *(double *)v125 - ((double)dword_254FEEC08 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_289:
              a4.n128_f64[0] = fabs(v187);
              if (a4.n128_f64[0] >= 0.0000005)
                return (v12 >> v9) & 1;
              goto LABEL_416;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              return (v12 >> v9) & 1;
            case 6u:
              if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v125) & 0xFFFFFFFFFFFFFFLL) != 0
                || *((_DWORD *)v125 + 2) != dword_254FEEC08)
              {
                return (v12 >> v9) & 1;
              }
              goto LABEL_416;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          v141 = v125[12];
          if (v141 == 7)
            goto LABEL_416;
          if (v141 > 9 || v141 == 7)
            turi::apply_binary_op_ff();
          return (v12 >> v9) & 1;
        case 8:
          v142 = v125[12];
          if (v142 == 8)
          {
            if (turi::image_type::operator==(*(_QWORD *)v125 + 8, turi::FLEX_UNDEFINED + 8))
              goto LABEL_416;
          }
          else if (v142 > 9 || v142 == 8)
          {
            turi::apply_binary_op_ff();
          }
          return (v12 >> v9) & 1;
        case 9:
          v143 = v125[12];
          if (v143 != 9)
          {
            if (v143 >= 9)
              turi::apply_binary_op_ff();
            return (v12 >> v9) & 1;
          }
          v144 = *(_QWORD **)v125;
          if (turi::FLEX_UNDEFINED == *(_QWORD *)v125)
            goto LABEL_416;
          v264 = turi::FLEX_UNDEFINED;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v144 + 1), turi::FLEX_UNDEFINED + 8))
            return (v12 >> v9) & 1;
          v146 = (char *)v144[3];
          v145 = (char *)v144[4];
          v147 = v145 - v146;
          if (v145 == v146)
            goto LABEL_416;
          if (!v144[1])
            goto LABEL_416;
          v148 = 1;
          do
          {
            v149 = *(_QWORD *)v146;
            v146 += 8;
            v148 *= v149;
          }
          while (v146 != v145);
          if (!v148)
            goto LABEL_416;
          v266 = 0;
          std::vector<unsigned long>::vector(&v267, v147 >> 3, &v266);
          v150 = v267;
          v151 = v268;
          v152 = **(_QWORD **)(v264 + 8);
          v153 = (char *)v268 - (char *)v267;
          v154 = v268 - v267;
          v155 = v154 - 1;
          if (v154 <= 1)
            v156 = 1;
          else
            v156 = v268 - v267;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 3:
      v20 = v13[12];
      if (v20 > 9)
        turi::apply_binary_op_ff();
      if (v20 != 3)
        goto LABEL_76;
      v23 = *(_QWORD *)v13 + 8;
      v21 = *(unint64_t **)v23;
      v22 = *(unint64_t **)(v23 + 8);
      v24 = ((uint64_t)v22 - *(_QWORD *)v23) >> 3;
      v25 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v24 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v25) >> 3)
        goto LABEL_76;
      if (v22 == v21)
        goto LABEL_168;
      if (v24 <= 1)
        v24 = 1;
      while (1)
      {
        a4.n128_u64[0] = *v21;
        if (*(double *)v21 != *v25)
          goto LABEL_76;
        ++v25;
        ++v21;
        if (!--v24)
          goto LABEL_168;
      }
    case 4:
      v26 = v13[12];
      if (v26 > 9)
        turi::apply_binary_op_ff();
      if (v26 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t *)(*(_QWORD *)v13 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        goto LABEL_168;
      }
      goto LABEL_76;
    case 5:
      v66 = v13[12];
      if (v66 > 9)
        turi::apply_binary_op_ff();
      if (v66 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v265, (uint64_t **)(*(_QWORD *)v13 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        goto LABEL_168;
      }
      goto LABEL_76;
    case 6:
      switch(v13[12])
      {
        case 0u:
          if (*(_QWORD *)v13 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FEEC08)
            goto LABEL_168;
          goto LABEL_76;
        case 1u:
          a4.n128_f64[0] = vabdd_f64(*(double *)v13, (double)dword_254FEEC08 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_167:
          if (a4.n128_f64[0] < 0.0000005)
            goto LABEL_168;
          goto LABEL_76;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_76;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v13) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)v13 + 2) == dword_254FEEC08)
          {
            goto LABEL_168;
          }
          goto LABEL_76;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v27 = v13[12];
      if (v27 < 7 || v27 - 8 < 2)
        goto LABEL_76;
      if (v27 != 7)
        turi::apply_binary_op_ff();
      goto LABEL_168;
    case 8:
      v67 = v13[12];
      if (v67 < 8)
        goto LABEL_76;
      if (v67 != 8)
      {
        if (v67 != 9)
          turi::apply_binary_op_ff();
        goto LABEL_76;
      }
      if (!turi::image_type::operator==(*(_QWORD *)v13 + 8, turi::FLEX_UNDEFINED + 8))
        goto LABEL_76;
      goto LABEL_168;
    case 9:
      v28 = v13[12];
      if (v28 < 9)
        goto LABEL_76;
      if (v28 != 9)
        turi::apply_binary_op_ff();
      v29 = *(_QWORD **)v13;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)v13)
        goto LABEL_168;
      v262 = turi::FLEX_UNDEFINED;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v29 + 1), turi::FLEX_UNDEFINED + 8))
        goto LABEL_76;
      v31 = (char *)v29[3];
      v30 = (char *)v29[4];
      v32 = v30 - v31;
      if (v30 == v31)
        goto LABEL_168;
      if (!v29[1])
        goto LABEL_168;
      v33 = 1;
      do
      {
        v34 = *(_QWORD *)v31;
        v31 += 8;
        v33 *= v34;
      }
      while (v31 != v30);
      if (!v33)
        goto LABEL_168;
      v266 = 0;
      std::vector<unsigned long>::vector(&v267, v32 >> 3, &v266);
      v35 = v267;
      v36 = v268;
      v37 = **(_QWORD **)(v262 + 8);
      v38 = (char *)v268 - (char *)v267;
      v39 = v268 - v267;
      v40 = v39 - 1;
      if (v39 <= 1)
        v41 = 1;
      else
        v41 = v268 - v267;
      while (2)
      {
        if (v36 == v35)
        {
          v49 = 0;
          v50 = *(double *)(*(_QWORD *)v29[1] + 8 * v29[9]);
        }
        else
        {
          v42 = 0;
          v43 = (uint64_t *)v29[6];
          v44 = v35;
          v45 = v41;
          do
          {
            v47 = *v44++;
            v46 = v47;
            v48 = *v43++;
            v42 += v48 * v46;
            --v45;
          }
          while (v45);
          v49 = 0;
          v50 = *(double *)(*(_QWORD *)v29[1] + 8 * (v29[9] + v42));
          v51 = *(uint64_t **)(v262 + 48);
          v52 = v35;
          v53 = v41;
          do
          {
            v55 = *v52++;
            v54 = v55;
            v56 = *v51++;
            v49 += v56 * v54;
            --v53;
          }
          while (v53);
        }
        v57 = *(double *)(v37 + 8 * (*(_QWORD *)(v262 + 72) + v49));
        if (v50 == v57)
        {
          v58 = v39;
          v59 = v39 - 1;
          if (v38 < 1)
            goto LABEL_59;
          v60 = v29[3];
          v61 = v35[v40] + 1;
          v35[v40] = v61;
          v62 = (v38 & 0xFFFFFFFFFFFFFFF8) - 16;
          v59 = v39 - 1;
          if (v61 < *(_QWORD *)(v60 + 8 * v40))
          {
            v58 = 1;
            v59 = v39 - 1;
LABEL_59:
            if (v59 < 0 || !v58)
              goto LABEL_61;
            continue;
          }
          while (1)
          {
            *(uint64_t *)((char *)v35 + v62 + 8) = 0;
            if (v59 <= 0)
              break;
            --v59;
            v63 = *(uint64_t *)((char *)v35 + v62) + 1;
            *(uint64_t *)((char *)v35 + v62) = v63;
            v64 = *(_QWORD *)(v60 + v62);
            v62 -= 8;
            if (v63 < v64)
            {
              v58 = 1;
              goto LABEL_59;
            }
          }
          v268 = v35;
          operator delete(v35);
        }
        else
        {
LABEL_61:
          if (v35)
          {
            v268 = v35;
            operator delete(v35);
          }
          if (v50 != v57)
            goto LABEL_76;
        }
        goto LABEL_168;
      }
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (v151 == v150)
    {
      v164 = 0;
      v165 = *(double *)(*(_QWORD *)v144[1] + 8 * v144[9]);
    }
    else
    {
      v157 = 0;
      v158 = (uint64_t *)v144[6];
      v159 = v150;
      v160 = v156;
      do
      {
        v162 = *v159++;
        v161 = v162;
        v163 = *v158++;
        v157 += v163 * v161;
        --v160;
      }
      while (v160);
      v164 = 0;
      v165 = *(double *)(*(_QWORD *)v144[1] + 8 * (v144[9] + v157));
      v166 = *(uint64_t **)(v264 + 48);
      v167 = v150;
      v168 = v156;
      do
      {
        v170 = *v167++;
        v169 = v170;
        v171 = *v166++;
        v164 += v171 * v169;
        --v168;
      }
      while (v168);
    }
    v172 = *(double *)(v152 + 8 * (*(_QWORD *)(v264 + 72) + v164));
    if (v165 != v172)
      break;
    v173 = v154;
    v174 = v154 - 1;
    if (v153 >= 1)
    {
      v175 = v144[3];
      v176 = v150[v155] + 1;
      v150[v155] = v176;
      v177 = (v153 & 0xFFFFFFFFFFFFFFF8) - 16;
      v174 = v154 - 1;
      if (v176 >= *(_QWORD *)(v175 + 8 * v155))
      {
        while (1)
        {
          *(uint64_t *)((char *)v150 + v177 + 8) = 0;
          if (v174 <= 0)
            break;
          --v174;
          v178 = *(uint64_t *)((char *)v150 + v177) + 1;
          *(uint64_t *)((char *)v150 + v177) = v178;
          v179 = *(_QWORD *)(v175 + v177);
          v177 -= 8;
          if (v178 < v179)
          {
            v173 = 1;
            goto LABEL_245;
          }
        }
        v268 = v150;
        operator delete(v150);
LABEL_416:
        ++v9;
        if (++v4 == v5)
          return 0;
        goto LABEL_3;
      }
      v173 = 1;
      v174 = v154 - 1;
    }
LABEL_245:
    ;
  }
  while ((v174 & 0x8000000000000000) == 0 && v173);
  if (v150)
  {
    v268 = v150;
    operator delete(v150);
  }
  if (v165 == v172)
    goto LABEL_416;
  return (v12 >> v9) & 1;
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(_QWORD *a1, _QWORD *a2, uint64_t a3, __n128 a4)
{
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void **v17;

  if (a1 != a2)
  {
    v6 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v8 = 0;
      v9 = a1;
      do
      {
        v10 = v6;
        if (turi::query_eval::less_than_partial_function::operator()(a3, v6, v9, a4))
        {
          v15 = *(_OWORD *)v10;
          v16 = v9[5];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          v11 = v8;
          while (1)
          {
            v12 = (char *)a1 + v11;
            std::vector<turi::flexible_type>::__vdeallocate((void **)((char *)a1 + v11 + 24));
            v13 = *(__n128 *)((char *)a1 + v11);
            *(_OWORD *)(v12 + 24) = *(_OWORD *)v12;
            *((_QWORD *)v12 + 5) = *((_QWORD *)v12 + 2);
            *((_QWORD *)v12 + 1) = 0;
            *((_QWORD *)v12 + 2) = 0;
            *(_QWORD *)v12 = 0;
            if (!v11)
              break;
            v11 -= 24;
            if ((turi::query_eval::less_than_partial_function::operator()(a3, &v15, (_QWORD *)v12 - 3, v13) & 1) == 0)
            {
              v14 = (uint64_t)a1 + v11 + 24;
              goto LABEL_10;
            }
          }
          v14 = (uint64_t)a1;
LABEL_10:
          std::vector<turi::flexible_type>::__vdeallocate((void **)v14);
          *(_OWORD *)v14 = v15;
          *(_QWORD *)(v14 + 16) = v16;
          v16 = 0;
          v15 = 0uLL;
          v17 = (void **)&v15;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
        }
        v6 = v10 + 3;
        v8 += 24;
        v9 = v10;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_2180A18CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(_QWORD *a1, _QWORD *a2, uint64_t a3, __n128 a4)
{
  _QWORD *v5;
  _QWORD *v6;
  void **v8;
  _QWORD *v9;
  void **v10;
  __n128 v11;
  char v12;
  __int128 v13;
  void *v14;
  void **v15;

  if (a1 != a2)
  {
    v5 = a1;
    v6 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v8 = (void **)(a1 + 5);
      do
      {
        v9 = v6;
        if (turi::query_eval::less_than_partial_function::operator()(a3, v6, v5, a4))
        {
          v13 = *(_OWORD *)v9;
          v14 = (void *)v5[5];
          v9[1] = 0;
          v9[2] = 0;
          *v9 = 0;
          v10 = v8;
          do
          {
            std::vector<turi::flexible_type>::__vdeallocate(v10 - 2);
            v11 = *(__n128 *)(v10 - 5);
            *((__n128 *)v10 - 1) = v11;
            *v10 = *(v10 - 3);
            *(v10 - 4) = 0;
            *(v10 - 3) = 0;
            *(v10 - 5) = 0;
            v12 = turi::query_eval::less_than_partial_function::operator()(a3, &v13, v10 - 8, v11);
            v10 -= 3;
          }
          while ((v12 & 1) != 0);
          std::vector<turi::flexible_type>::__vdeallocate(v10 - 2);
          *((_OWORD *)v10 - 1) = v13;
          *v10 = v14;
          v14 = 0;
          v13 = 0uLL;
          v15 = (void **)&v13;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
        }
        v6 = v9 + 3;
        v8 += 3;
        v5 = v9;
      }
      while (v9 + 3 != a2);
    }
  }
}

void sub_2180A19EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, __n128 a5)
{
  char v9;
  __n128 v10;
  uint64_t result;
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = turi::query_eval::less_than_partial_function::operator()(a4, a2, a1, a5);
  result = turi::query_eval::less_than_partial_function::operator()(a4, a3, a2, v10);
  if ((v9 & 1) != 0)
  {
    v14 = a1 + 2;
    v13 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v13;
      v15 = a1[1];
      a1[1] = a3[1];
      a3[1] = v15;
      v16 = a3 + 2;
      result = 1;
LABEL_10:
      v26 = *v14;
      *v14 = *v16;
      *v16 = v26;
      return result;
    }
    *a1 = *a2;
    *a2 = v13;
    v22 = a1[1];
    a1[1] = a2[1];
    a2[1] = v22;
    v14 = a2 + 2;
    v23 = a1[2];
    a1[2] = a2[2];
    a2[2] = v23;
    if (turi::query_eval::less_than_partial_function::operator()(a4, a3, a2, v12))
    {
      v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      v16 = a3 + 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v17 = *a2;
    *a2 = *a3;
    *a3 = v17;
    v18 = a2[1];
    a2[1] = a3[1];
    a3[1] = v18;
    v16 = a2 + 2;
    v19 = a2[2];
    a2[2] = a3[2];
    a3[2] = v19;
    if (turi::query_eval::less_than_partial_function::operator()(a4, a2, a1, v12))
    {
      v20 = *a1;
      *a1 = *a2;
      *a2 = v20;
      v21 = a1[1];
      a1[1] = a2[1];
      a2[1] = v21;
      v14 = a1 + 2;
LABEL_9:
      result = 2;
      goto LABEL_10;
    }
  }
  return 1;
}

_QWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<turi::flexible_type> *,turi::query_eval::less_than_partial_function &>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  __n128 v6;
  __n128 v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v15;
  uint64_t v16;
  __n128 *v17;

  v4 = a2;
  v15 = *(__n128 *)a1;
  v6 = v15;
  v16 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if ((turi::query_eval::less_than_partial_function::operator()(a3, &v15, a2 - 3, v6) & 1) != 0)
  {
    v8 = a1;
    do
      v8 += 3;
    while ((turi::query_eval::less_than_partial_function::operator()(a3, &v15, v8, v7) & 1) == 0);
  }
  else
  {
    v9 = a1 + 3;
    do
    {
      v8 = v9;
      if (v9 >= v4)
        break;
      v10 = turi::query_eval::less_than_partial_function::operator()(a3, &v15, v9, v7);
      v9 = v8 + 3;
    }
    while (!v10);
  }
  if (v8 < v4)
  {
    do
      v4 -= 3;
    while ((turi::query_eval::less_than_partial_function::operator()(a3, &v15, v4, v7) & 1) != 0);
  }
  while (v8 < v4)
  {
    v11 = (void *)*v8;
    *v8 = *v4;
    *v4 = v11;
    v12 = v8[1];
    v8[1] = v4[1];
    v4[1] = v12;
    v13 = v8[2];
    v8[2] = v4[2];
    v4[2] = v13;
    do
      v8 += 3;
    while (!turi::query_eval::less_than_partial_function::operator()(a3, &v15, v8, v7));
    do
      v4 -= 3;
    while ((turi::query_eval::less_than_partial_function::operator()(a3, &v15, v4, v7) & 1) != 0);
  }
  if (v8 - 3 != a1)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)(v8 - 3);
    a1[2] = *(v8 - 1);
    *(v8 - 3) = 0;
    *(v8 - 2) = 0;
    *(v8 - 1) = 0;
  }
  std::vector<turi::flexible_type>::__vdeallocate((void **)v8 - 3);
  *(__n128 *)(v8 - 3) = v15;
  *(v8 - 1) = v16;
  v15 = 0uLL;
  v16 = 0;
  v17 = &v15;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  return v8;
}

void sub_2180A1D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<turi::flexible_type> *,turi::query_eval::less_than_partial_function &>(__n128 *a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  char v8;
  unint64_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *v13;
  void *v14;
  __n128 v16;
  void *v17;
  __n128 *v18;

  v6 = 0;
  v7 = *a1;
  v16 = *a1;
  v17 = (void *)a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  do
  {
    v8 = turi::query_eval::less_than_partial_function::operator()(a3, &a1[1].n128_u64[v6 + 1], &v16, v7);
    v6 += 3;
  }
  while ((v8 & 1) != 0);
  v9 = (unint64_t)&a1->n128_u64[v6];
  if (v6 == 3)
  {
    do
    {
      if (v9 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while ((turi::query_eval::less_than_partial_function::operator()(a3, a2, &v16, v7) & 1) == 0);
  }
  else
  {
    do
      a2 -= 3;
    while (!turi::query_eval::less_than_partial_function::operator()(a3, a2, &v16, v7));
  }
  v10 = (void **)((char *)a1 + v6 * 8);
  if (v9 < (unint64_t)a2)
  {
    v11 = a2;
    do
    {
      v12 = *v10;
      *v10 = *v11;
      *v11 = v12;
      v13 = v10[1];
      v10[1] = v11[1];
      v11[1] = v13;
      v14 = v10[2];
      v10[2] = v11[2];
      v11[2] = v14;
      do
        v10 += 3;
      while ((turi::query_eval::less_than_partial_function::operator()(a3, v10, &v16, v7) & 1) != 0);
      do
        v11 -= 3;
      while (!turi::query_eval::less_than_partial_function::operator()(a3, v11, &v16, v7));
    }
    while (v10 < v11);
  }
  if (v10 - 3 != (void **)a1)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    *a1 = *(__n128 *)(v10 - 3);
    a1[1].n128_u64[0] = (unint64_t)*(v10 - 1);
    *(v10 - 3) = 0;
    *(v10 - 2) = 0;
    *(v10 - 1) = 0;
  }
  std::vector<turi::flexible_type>::__vdeallocate(v10 - 3);
  *(__n128 *)(v10 - 3) = v16;
  *(v10 - 1) = v17;
  v16 = 0uLL;
  v17 = 0;
  v18 = &v16;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return v10 - 3;
}

void sub_2180A1EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t *a1, uint64_t *a2, uint64_t a3, __n128 a4)
{
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __n128 v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  void **v23;

  v7 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v7;
    case 2uLL:
      if (turi::query_eval::less_than_partial_function::operator()(a3, a2 - 3, a1, a4))
      {
        v8 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v9;
        v10 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return v7;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a1 + 3, a2 - 3, a3, a4);
      return v7;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a1 + 3, a1 + 6, a2 - 3, a3, a4);
      return v7;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3, a3, a4);
      return v7;
    default:
      v11 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a1 + 3, a1 + 6, a3, a4);
      v13 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (!turi::query_eval::less_than_partial_function::operator()(a3, v13, v11, v12))
  {
LABEL_14:
    v11 = v13;
    v14 += 24;
    v13 += 3;
    if (v13 == a2)
      return 1;
  }
  v21 = *(_OWORD *)v13;
  v22 = v13[2];
  v13[1] = 0;
  v13[2] = 0;
  *v13 = 0;
  v16 = v14;
  while (1)
  {
    v17 = (char *)a1 + v16;
    std::vector<turi::flexible_type>::__vdeallocate((void **)((char *)a1 + v16 + 72));
    v18 = *(__n128 *)((char *)a1 + v16 + 48);
    *(__n128 *)(v17 + 72) = v18;
    *((_QWORD *)v17 + 11) = *((_QWORD *)v17 + 8);
    *((_QWORD *)v17 + 7) = 0;
    *((_QWORD *)v17 + 8) = 0;
    *((_QWORD *)v17 + 6) = 0;
    if (v16 == -48)
      break;
    v16 -= 24;
    if ((turi::query_eval::less_than_partial_function::operator()(a3, &v21, (_QWORD *)v17 + 3, v18) & 1) == 0)
    {
      v19 = (uint64_t)a1 + v16 + 72;
      goto LABEL_12;
    }
  }
  v19 = (uint64_t)a1;
LABEL_12:
  std::vector<turi::flexible_type>::__vdeallocate((void **)v19);
  *(_OWORD *)v19 = v21;
  *(_QWORD *)(v19 + 16) = v22;
  v22 = 0;
  v21 = 0uLL;
  if (++v15 != 8)
  {
    v23 = (void **)&v21;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
    goto LABEL_14;
  }
  v7 = v13 + 3 == a2;
  v23 = (void **)&v21;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
  return v7;
}

void sub_2180A2164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, __n128 a6)
{
  __n128 v11;
  uint64_t result;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a2, a3, a5, a6);
  result = turi::query_eval::less_than_partial_function::operator()(a5, a4, a3, v11);
  if ((_DWORD)result)
  {
    v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    v15 = a3[1];
    a3[1] = a4[1];
    a4[1] = v15;
    v16 = a3[2];
    a3[2] = a4[2];
    a4[2] = v16;
    result = turi::query_eval::less_than_partial_function::operator()(a5, a3, a2, v13);
    if ((_DWORD)result)
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = a2[1];
      a2[1] = a3[1];
      a3[1] = v19;
      v20 = a2[2];
      a2[2] = a3[2];
      a3[2] = v20;
      result = turi::query_eval::less_than_partial_function::operator()(a5, a2, a1, v17);
      if ((_DWORD)result)
      {
        v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
        v22 = a1[1];
        a1[1] = a2[1];
        a2[1] = v22;
        v23 = a1[2];
        a1[2] = a2[2];
        a2[2] = v23;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, __n128 a7)
{
  __n128 v13;
  uint64_t result;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a2, a3, a4, a6, a7);
  result = turi::query_eval::less_than_partial_function::operator()(a6, a5, a4, v13);
  if ((_DWORD)result)
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    v17 = a4[1];
    a4[1] = a5[1];
    a5[1] = v17;
    v18 = a4[2];
    a4[2] = a5[2];
    a5[2] = v18;
    result = turi::query_eval::less_than_partial_function::operator()(a6, a4, a3, v15);
    if ((_DWORD)result)
    {
      v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      v21 = a3[1];
      a3[1] = a4[1];
      a4[1] = v21;
      v22 = a3[2];
      a3[2] = a4[2];
      a4[2] = v22;
      result = turi::query_eval::less_than_partial_function::operator()(a6, a3, a2, v19);
      if ((_DWORD)result)
      {
        v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        v25 = a2[1];
        a2[1] = a3[1];
        a3[1] = v25;
        v26 = a2[2];
        a2[2] = a3[2];
        a3[2] = v26;
        result = turi::query_eval::less_than_partial_function::operator()(a6, a2, a1, v23);
        if ((_DWORD)result)
        {
          v27 = *a1;
          *a1 = *a2;
          *a2 = v27;
          v28 = a1[1];
          a1[1] = a2[1];
          a2[1] = v28;
          v29 = a1[2];
          a1[2] = a2[2];
          a2[2] = v29;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *>(__n128 *a1, __n128 *a2, unint64_t *a3, uint64_t a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  if (a1 != a2)
  {
    v7 = (uint64_t)a2;
    v9 = (char *)a2 - (char *)a1;
    v10 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__n128 *)((char *)a1 + 24 * v11);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t)a1, a4, v10, v13, a5);
        v13 = (__n128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if ((unint64_t *)v7 != a3)
    {
      v15 = (unint64_t *)v7;
      do
      {
        if (turi::query_eval::less_than_partial_function::operator()(a4, v15, a1, a5))
        {
          v16 = *v15;
          *v15 = a1->n128_u64[0];
          a1->n128_u64[0] = v16;
          v17 = v15[1];
          v15[1] = a1->n128_u64[1];
          a1->n128_u64[1] = v17;
          v18 = v15[2];
          v15[2] = a1[1].n128_u64[0];
          a1[1].n128_u64[0] = v18;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t)a1, a4, v10, a1, a5);
        }
        v15 += 3;
      }
      while (v15 != a3);
      v14 = (uint64_t)a3;
    }
    if (v9 >= 25)
    {
      v19 = v9 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function,std::vector<turi::flexible_type> *>(a1, v7, a4, v19);
        v7 -= 24;
      }
      while (v19-- > 2);
    }
    return (unint64_t *)v14;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4, __n128 a5)
{
  unint64_t v5;
  __n128 *v6;
  uint64_t v8;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  __n128 *v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  __n128 *v19;

  v5 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = a4;
    v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v12 = (__n128 *)(a1 + 24 * v11);
      v13 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v13 < a3
        && turi::query_eval::less_than_partial_function::operator()(a2, (_QWORD *)(a1 + 24 * v11), &v12[1].n128_u64[1], a5))
      {
        v12 = (__n128 *)((char *)v12 + 24);
        v11 = v13;
      }
      if ((turi::query_eval::less_than_partial_function::operator()(a2, v12, v6, a5) & 1) == 0)
      {
        v17 = *v6;
        v18 = v6[1].n128_i64[0];
        v6->n128_u64[1] = 0;
        v6[1].n128_u64[0] = 0;
        v6->n128_u64[0] = 0;
        do
        {
          v14 = v12;
          std::vector<turi::flexible_type>::__vdeallocate((void **)v6);
          v15 = *v12;
          *v6 = *v12;
          v6[1].n128_u64[0] = v12[1].n128_u64[0];
          v12->n128_u64[0] = 0;
          v12->n128_u64[1] = 0;
          v12[1].n128_u64[0] = 0;
          if (v8 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (__n128 *)(a1 + 24 * v16);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v16;
          }
          else if (turi::query_eval::less_than_partial_function::operator()(a2, (_QWORD *)(a1 + 24 * v16), &v12[1].n128_u64[1], v15))
          {
            v12 = (__n128 *)((char *)v12 + 24);
          }
          else
          {
            v11 = v16;
          }
          v6 = v14;
        }
        while (!turi::query_eval::less_than_partial_function::operator()(a2, v12, &v17, v15));
        std::vector<turi::flexible_type>::__vdeallocate((void **)v14);
        *v14 = v17;
        v14[1].n128_u64[0] = v18;
        v17 = 0uLL;
        v18 = 0;
        v19 = &v17;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
      }
    }
  }
}

void sub_2180A26E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function,std::vector<turi::flexible_type> *>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v7;
  __n128 *v8;
  __n128 v9;
  __n128 v10;
  unint64_t v11;
  __n128 *v12;

  if (a4 >= 2)
  {
    v10 = *a1;
    v7 = v10;
    v11 = a1[1].n128_u64[0];
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    a1->n128_u64[0] = 0;
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(a1, a3, a4, v7);
    std::vector<turi::flexible_type>::__vdeallocate((void **)v8);
    if (v8 == (__n128 *)(a2 - 24))
    {
      *v8 = v10;
      v8[1].n128_u64[0] = v11;
      v10 = 0uLL;
      v11 = 0;
    }
    else
    {
      *v8 = *(__n128 *)(a2 - 24);
      v8[1].n128_u64[0] = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      std::vector<turi::flexible_type>::__vdeallocate((void **)(a2 - 24));
      v9 = v10;
      *(__n128 *)(a2 - 24) = v10;
      *(_QWORD *)(a2 - 8) = v11;
      v11 = 0;
      v10 = 0uLL;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>((uint64_t)a1, (uint64_t)&v8[1].n128_i64[1], a3, 0xAAAAAAAAAAAAAAABLL * ((&v8[1].n128_i8[8] - (__int8 *)a1) >> 3), v9);
    }
    v12 = &v10;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  }
}

void sub_2180A2808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

__n128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(__n128 *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;

  v7 = 0;
  v8 = a3 - 2;
  if (a3 < 2)
    v8 = a3 - 1;
  v9 = v8 >> 1;
  do
  {
    v10 = (__n128 *)((char *)a1 + 24 * v7 + 24);
    v11 = (2 * v7) | 1;
    v12 = 2 * v7 + 2;
    if (v12 < a3
      && turi::query_eval::less_than_partial_function::operator()(a2, &a1[1].n128_u64[3 * v7 + 1], &a1[3].n128_u64[3 * v7], a4))
    {
      v10 = (__n128 *)((char *)v10 + 24);
      v11 = v12;
    }
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    a4 = *v10;
    *a1 = *v10;
    a1[1].n128_u64[0] = v10[1].n128_u64[0];
    v10->n128_u64[0] = 0;
    v10->n128_u64[1] = 0;
    v10[1].n128_u64[0] = 0;
    a1 = v10;
    v7 = v11;
  }
  while (v11 <= v9);
  return v10;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_partial_function &,std::vector<turi::flexible_type> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  unint64_t v8;
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  __n128 *v15;

  if (a4 >= 2)
  {
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__n128 *)(a1 + 24 * v8);
    v10 = (__n128 *)(a2 - 24);
    if (turi::query_eval::less_than_partial_function::operator()(a3, v9, (_QWORD *)(a2 - 24), a5))
    {
      v13 = *(__n128 *)(a2 - 24);
      v14 = *(_QWORD *)(a2 - 8);
      v10->n128_u64[1] = 0;
      v10[1].n128_u64[0] = 0;
      v10->n128_u64[0] = 0;
      do
      {
        v11 = v9;
        std::vector<turi::flexible_type>::__vdeallocate((void **)v10);
        v12 = *v9;
        *v10 = *v9;
        v10[1].n128_u64[0] = v9[1].n128_u64[0];
        v9->n128_u64[0] = 0;
        v9->n128_u64[1] = 0;
        v9[1].n128_u64[0] = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__n128 *)(a1 + 24 * v8);
        v10 = v11;
      }
      while ((turi::query_eval::less_than_partial_function::operator()(a3, v9, &v13, v12) & 1) != 0);
      std::vector<turi::flexible_type>::__vdeallocate((void **)v11);
      *v11 = v13;
      v11[1].n128_u64[0] = v14;
      v14 = 0;
      v13 = 0uLL;
      v15 = &v13;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    }
  }
}

void sub_2180A29FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

_QWORD *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v16, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v18, a3 + 64);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>(a1, a2, (uint64_t)v14, a4);
  v8 = v19;
  if (v19 == v18)
  {
    v9 = 4;
    v8 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v13 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_2180A2B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *result;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  _BYTE v55[24];
  _BYTE *v56;
  _BYTE v57[24];
  _BYTE *v58;
  _BYTE v59[24];
  _BYTE *v60;
  _BYTE v61[24];
  _BYTE *v62;
  _BYTE v63[24];
  _BYTE *v64;
  _BYTE v65[24];
  _BYTE *v66;
  _BYTE v67[24];
  _BYTE *v68;
  _BYTE v69[24];
  _BYTE *v70;
  _BYTE v71[24];
  _BYTE *v72;
  _BYTE v73[24];
  _BYTE *v74;
  uint64_t v75;
  _BYTE v76[24];
  _BYTE *v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v63, a3);
  v8 = v65;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v65, a3 + 32);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v67, a3 + 64);
  std::__unwrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>,0>((uint64_t)v63, (uint64_t)v69);
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v69, &v75);
  v9 = v74;
  if (v74 == v73)
  {
    v10 = 4;
    v9 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v72;
  if (v72 == v71)
  {
    v12 = 4;
    v11 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v70;
  if (v70 == v69)
  {
    v14 = 4;
    v13 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_16;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
  v15 = v68;
  if (v68 == v67)
  {
    v16 = 4;
    v15 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_21;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_21:
  if (v66 == v65)
  {
    v17 = 4;
  }
  else
  {
    if (!v66)
      goto LABEL_26;
    v17 = 5;
    v8 = v66;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v17))(v8);
LABEL_26:
  v18 = v64;
  if (v64 == v63)
  {
    v19 = 4;
    v18 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  v44 = v75;
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v51, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v53, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v55, a3 + 64);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v45, (uint64_t)v76);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v47, (uint64_t)v78);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v49, (uint64_t)v80);
  std::__rewrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<void ()(turi::sframe_rows const&)>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>>((uint64_t)v51, (uint64_t)v45, (uint64_t)v57);
  std::pair<std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<std::vector<turi::flexible_type> *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v44, (uint64_t)v57);
  v20 = v62;
  if (v62 == v61)
  {
    v21 = 4;
    v20 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_36;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_36:
  v22 = v60;
  if (v60 == v59)
  {
    v23 = 4;
    v22 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_41;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_41:
  v24 = v58;
  if (v58 == v57)
  {
    v25 = 4;
    v24 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_46;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_46:
  v26 = v50;
  if (v50 == v49)
  {
    v27 = 4;
    v26 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_51;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_51:
  v28 = v48;
  if (v48 == v47)
  {
    v29 = 4;
    v28 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_56;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_56:
  v30 = v46;
  if (v46 == v45)
  {
    v31 = 4;
    v30 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_61;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_61:
  v32 = v56;
  if (v56 == v55)
  {
    v33 = 4;
    v32 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_66;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_66:
  v34 = v54;
  if (v54 == v53)
  {
    v35 = 4;
    v34 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_71;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_71:
  v36 = v52;
  if (v52 == v51)
  {
    v37 = 4;
    v36 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_76;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_76:
  v38 = v81;
  if (v81 == v80)
  {
    v39 = 4;
    v38 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_81;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_81:
  v40 = v79;
  if (v79 == v78)
  {
    v41 = 4;
    v40 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_86;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_86:
  result = v77;
  if (v77 == v76)
  {
    v43 = 4;
    result = v76;
  }
  else
  {
    if (!v77)
      return result;
    v43 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v43))();
}

void sub_2180A3028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a59);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a47);
  _Unwind_Resume(a1);
}

_QWORD *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v10;

  v5 = a1;
  if (a1 != a2)
  {
    do
    {
      v8 = *(_QWORD *)(a3 + 56);
      if (!v8)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, v5);
      v5 += 24;
    }
    while (v5 != a2);
    v5 = a2;
  }
  v10 = v5;
  return std::pair<std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<std::vector<turi::flexible_type> *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v10, a3);
}

_QWORD *std::__unwrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>,0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE v12[24];
  _BYTE *v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v10, a1);
  v4 = v12;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v12, a1 + 32);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v14, a1 + 64);
  std::__unwrap_iter_impl<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__unwrap[abi:ne180100]((uint64_t)v10, a2);
  v5 = v15;
  if (v15 == v14)
  {
    v6 = 4;
    v5 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (v13 == v12)
  {
    v7 = 4;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
    v4 = v13;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_11:
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2180A3264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_7;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_7:
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_13;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_13:
  __clang_call_terminate(exception_object);
}

_QWORD *std::__rewrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<void ()(turi::sframe_rows const&)>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v24, a1);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v26, a1 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v28, a1 + 64);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v18, a2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v20, a2 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v22, a2 + 64);
  std::__unwrap_iter_impl<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__rewrap[abi:ne180100]((uint64_t)v18, a3);
  v6 = v23;
  if (v23 == v22)
  {
    v7 = 4;
    v6 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v21;
  if (v21 == v20)
  {
    v9 = 4;
    v8 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v19;
  if (v19 == v18)
  {
    v11 = 4;
    v10 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  v12 = v29;
  if (v29 == v28)
  {
    v13 = 4;
    v12 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_21;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_21:
  v14 = v27;
  if (v27 == v26)
  {
    v15 = 4;
    v14 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_26:
  result = v25;
  if (v25 == v24)
  {
    v17 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      return result;
    v17 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
}

_QWORD *std::pair<std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<std::vector<turi::flexible_type> *,std::function<void ()(turi::sframe_rows const&)>,0>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;

  *a1 = *a2;
  v5 = (uint64_t)(a1 + 5);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](v5, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 9), a3 + 64);
  return a1;
}

uint64_t std::__unwrap_iter_impl<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__unwrap[abi:ne180100]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a2, a1);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a2 + 32, a1 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a2 + 64, a1 + 64);
}

uint64_t std::__unwrap_iter_impl<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__rewrap[abi:ne180100]@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a2, a1);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a2 + 32, a1 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a2 + 64, a1 + 64);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        v10 = *a1 + 8 * (v4 >> 6);
        v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      v6 = v5 - 1;
    }
    v7 = v6 >> 6;
    if (v5 >= 0x41)
      v8 = v7;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void OUTLINED_FUNCTION_6_3()
{
  JUMPOUT(0x219A19A08);
}

void OUTLINED_FUNCTION_7_3()
{
  JUMPOUT(0x219A19A08);
}

void __cxx_global_var_init_11()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sort_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::query_eval::sort_and_merge@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, _QWORD *a7@<X6>, _QWORD *a8@<X8>)
{
  int v16;
  pthread_cond_t *v17;
  unint64_t v18;
  turi::thread_pool *v19;
  turi::thread_pool *instance;
  turi::thread *v21;
  turi::thread_pool *tls_data;
  turi::thread_pool *v23;
  uint64_t v24;
  double v25;
  turi::thread *v26;
  unint64_t v27;
  uint64_t result;
  _QWORD v29[12];
  void *v30[3];
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[4];
  _BYTE v37[296];
  pthread_cond_t v38;
  pthread_mutex_t v39;
  std::string __p[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1);
  turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_reader(*a1, &v34);
  v33 = 0;
  v16 = pthread_mutex_init(&v39, 0);
  assert_msg(v16 == 0, "Mutex create error %d", v16);
  v17 = turi::conditional::conditional(&v38);
  v32 = 0;
  v18 = turi::thread::cpu_count((turi::thread *)v17);
  turi::sframe::sframe((turi::sframe *)v37);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::sframe::open_for_write((uint64_t)v37, a6, a7, __p, v35, 1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[1] - *a6) >> 3);
  v19 = (turi::thread_pool *)std::vector<BOOL>::vector(v30, a4);
  v29[0] = &v33;
  v29[1] = &v35;
  v29[2] = v37;
  v29[3] = a2;
  v29[4] = &v34;
  v29[5] = a5;
  v29[6] = &v31;
  v29[7] = &v39;
  v29[8] = &v32;
  v29[9] = a3;
  v29[10] = &v38;
  v29[11] = v30;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v19);
  v21 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v21);
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v21 <= 1)
  {
    for (; v18; --v18)
      turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0::operator()((uint64_t)v29);
  }
  else
  {
    v23 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)__p, v23);
    v24 = 0;
    v25 = (double)v18 / (double)(unint64_t)v21;
    do
    {
      v26 = (turi::thread *)(v24 + 1);
      v27 = (unint64_t)(v25 * (double)(unint64_t)(v24 + 1) + 0.0);
      if ((turi::thread *)v24 == (turi::thread *)((char *)v21 - 1))
        v27 = v18;
      v36[2] = (unint64_t)(v25 * (double)(unint64_t)v24 + 0.0);
      v36[3] = v27;
      v36[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0>(unsigned long,unsigned long,turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0 const&)::{lambda(void)#1}>(turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0)::stored_vtable
             + 1;
      v36[1] = (uint64_t)v29;
      turi::parallel_task_queue::launch((uint64_t)__p, (uint64_t)v36, v24);
      boost::function0<void>::~function0(v36);
      v24 = (uint64_t)v26;
    }
    while (v26 != v21);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)__p);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)__p);
  }
  turi::sframe::close((turi::sframe *)v37);
  std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe&,void>((const turi::sframe *)v37, a8);
  if (v30[0])
    operator delete(v30[0]);
  turi::sframe::~sframe((turi::sframe *)v37);
  turi::conditional::~conditional(&v38);
  turi::mutex::~mutex(&v39);
  result = v34;
  v34 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2180A3A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  pthread_cond_t a72;

  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&STACK[0x268]);
  if (__p)
    operator delete(__p);
  turi::sframe::~sframe((turi::sframe *)&a35);
  turi::conditional::~conditional(&a72);
  turi::mutex::~mutex((pthread_mutex_t *)&STACK[0x228]);
  if (a29)
    (*(void (**)(uint64_t))(*(_QWORD *)a29 + 8))(a29);
  _Unwind_Resume(a1);
}

void turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>::get_reader(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(_BYTE *)(a1 + 249) == 0, "Cannot open an SArraying which is still writing.");
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_QWORD *)(v4 + 176) = 0;
  turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray_reader(v4);
  *a2 = v4;
  turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::init(v4, a1, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_2180A3B88(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_2180A3D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::init(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  std::string::size_type *v17;
  std::string::size_type *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  std::string v33;
  unint64_t v34;
  void *v35;
  char v36;
  void *__p;
  void *v38;
  uint64_t v39;
  _QWORD *v40[3];
  char *v41;
  char *v42;
  char *v43;
  std::string *v44;

  assert_msg(*(_QWORD *)(a1 + 8) == 0, "Reader already inited");
  turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::open_format_reader(a1, a2);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v31 = (_QWORD *)a1;
  v32 = a2;
  if (a3 == -1)
  {
    turi::index_file_information::index_file_information(&v33, (const turi::index_file_information *)(a2 + 8));
    if (v34)
    {
      v19 = 0;
      v20 = 0;
      v21 = v42;
      do
      {
        v22 = v20;
        v20 += *((_QWORD *)__p + v19);
        if (v21 >= v43)
        {
          v23 = v41;
          v24 = (v21 - v41) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v26 = v43 - v41;
          if ((v43 - v41) >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v43, v27);
            v23 = v41;
            v21 = v42;
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[16 * v24];
          *(_QWORD *)v29 = v22;
          *((_QWORD *)v29 + 1) = v20;
          v30 = v29;
          if (v21 != v23)
          {
            do
            {
              *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
              v30 -= 16;
              v21 -= 16;
            }
            while (v21 != v23);
            v23 = v41;
          }
          v21 = v29 + 16;
          v41 = v30;
          v42 = v29 + 16;
          v43 = &v28[16 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_QWORD *)v21 = v22;
          *((_QWORD *)v21 + 1) = v20;
          v21 += 16;
        }
        v42 = v21;
        ++v19;
      }
      while (v19 < v34);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v40, v40[1]);
    v44 = (std::string *)&v39;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
    if (__p)
    {
      v38 = __p;
      operator delete(__p);
    }
    if (v36 < 0)
      operator delete(v35);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  else
  {
    v33.__r_.__value_.__r.__words[0] = a3;
    if (!a3)
    {
      v44 = &v33;
      turi::sarray_reader<turi::flexible_type>::init(turi::sarray<turi::flexible_type> const&,unsigned long)::{lambda(void)#1}::operator()();
    }
    v6 = turi::sarray_reader<turi::flexible_type>::size(a1);
    v7 = 0;
    v8 = v42;
    do
    {
      v9 = v7 * v6 / a3;
      v10 = ++v7 * v6 / a3;
      if (v8 >= v43)
      {
        v11 = v41;
        v12 = (v8 - v41) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v14 = v43 - v41;
        if ((v43 - v41) >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v43, v15);
          v11 = v41;
          v8 = v42;
        }
        else
        {
          v16 = 0;
        }
        v17 = (std::string::size_type *)&v16[16 * v12];
        *v17 = v9;
        v17[1] = v10;
        v18 = v17;
        if (v8 != v11)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v8 - 1);
            v18 -= 2;
            v8 -= 16;
          }
          while (v8 != v11);
          v11 = v41;
        }
        v8 = (char *)(v17 + 2);
        v41 = (char *)v18;
        v42 = (char *)(v17 + 2);
        v43 = &v16[16 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v8 = v9;
        *((_QWORD *)v8 + 1) = v10;
        v8 += 16;
      }
      v42 = v8;
    }
    while (v7 != a3);
  }
  turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::create_segment_read_buffers(v31, &v41);
  if (v31 + 17 != (_QWORD *)(v32 + 256))
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)(v31 + 17), *(uint64_t **)(v32 + 256), *(uint64_t **)(v32 + 264), (uint64_t)(*(_QWORD *)(v32 + 264) - *(_QWORD *)(v32 + 256)) >> 4);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
}

void sub_2180A4130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)(v12 - 120);
  if (v14)
  {
    *(_QWORD *)(v12 - 112) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray_reader(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = &unk_24D92D010;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 16), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  return a1;
}

void turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_reader(uint64_t a1)
{
  turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_reader(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::begin@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pthread_mutex_t *v6;
  _QWORD *i;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v11 = a2;
  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  for (i = *(_QWORD **)(a1 + 96); i; i = (_QWORD *)*i)
  {
    v8 = i[4];
    if (v8 <= a2)
    {
      if (v8 >= a2)
        turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#1}::operator()();
      ++i;
    }
  }
  std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)(a1 + 88), &v11, (uint64_t *)&v11);
  if (!*(_QWORD *)(a1 + 8))
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#2}::operator()();
  v9 = v11;
  if (v9 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#3}::operator()();
  turi::sarray_iterator<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray_iterator(a3, (uint64_t *)(*(_QWORD *)(a1 + 160) + 96 * v11), v11, 1);
  return pthread_mutex_unlock(v6);
}

void sub_2180A4300(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

double turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::end@<D0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double result;
  uint64_t v8;
  _QWORD v9[2];
  unint64_t v10;
  _QWORD *v11;

  v9[0] = a1[1];
  if (!v9[0])
  {
    v11 = v9;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#1}::operator()();
  }
  v11 = (_QWORD *)a2;
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (v10 <= a2)
  {
    v9[0] = &v11;
    v9[1] = &v10;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#2}::operator()();
  }
  v6 = a1[20] + 96 * a2;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  v8 = *(_QWORD *)(v6 + 72) - *(_QWORD *)(v6 + 56);
  *(_QWORD *)(a3 + 64) = v8;
  *(_QWORD *)(a3 + 72) = v8;
  return result;
}

uint64_t turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::reset_iterators(uint64_t a1)
{
  _QWORD *v1;
  pthread_mutex_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;

  v1 = (_QWORD *)a1;
  v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v3 = (_QWORD *)v1[12];
  v1 += 12;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)(v1 - 1), v3);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  v4 = (uint64_t *)v1[8];
  v5 = (uint64_t *)v1[9];
  while (v4 != v5)
  {
    turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::clear(v4);
    v4 += 12;
  }
  return pthread_mutex_unlock(v2);
}

uint64_t turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_reader(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_24D92D010;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = (void **)(a1 + 160);
  std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 136);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(_QWORD *)(a1 + 120) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 88, *(_QWORD **)(a1 + 96));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 16));
  return a1;
}

void std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

void std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 12;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 9));
      v6 = v5;
      std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::pair<std::vector<turi::flexible_type>,std::string>::~pair(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v3 = (void **)a1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t turi::sarray_iterator<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray_iterator(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = a2[9] - a2[7];
  *(_QWORD *)(a1 + 72) = v6;
  if (a4 && v6)
  {
    v7 = turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::next(a2);
    std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v5, v7);
    v6 = 0;
  }
  *(_QWORD *)(a1 + 64) = v6;
  return a1;
}

void sub_2180A4628(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<std::vector<turi::flexible_type>,std::string>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::next(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[6];
  v3 = *a1;
  if (v2 == 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4))
  {
    v4 = a1[8];
    if (a1[10] >= (unint64_t)(a1[9] - v4))
      v5 = a1[9] - v4;
    else
      v5 = a1[10];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1[5] + 48))(a1[5], v4, v5 + v4, a1);
    v2 = 0;
    a1[8] += v5;
    v3 = *a1;
  }
  ++a1[11];
  a1[6] = v2 + 1;
  return v3 + 48 * v2;
}

uint64_t std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;

  std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 47) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  return a1;
}

void turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      v2 -= 48;
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v2);
    }
    while (v2 != v3);
  }
  a1[1] = v3;
  v4 = a1[7];
  a1[8] = v4;
  a1[11] = v4;
  a1[6] = 0;
}

void turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::open_format_reader(uint64_t a1, uint64_t a2)
{
  const turi::index_file_information *v3;
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12[3];
  std::string v13;
  int v14;
  void *v15;
  char v16;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD *v20[3];
  void **v21;

  v3 = (const turi::index_file_information *)(a2 + 8);
  turi::index_file_information::index_file_information(&v13, (const turi::index_file_information *)(a2 + 8));
  v4 = v14;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v20, v20[1]);
  v21 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v16 < 0)
    operator delete(v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
        turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#1}::operator()();
      *(_QWORD *)(a1 + 8) = 0;
      turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#3}::operator()();
    }
    turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#2}::operator()();
  }
  v5 = operator new();
  turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray_format_reader_v2(v5);
  *(_QWORD *)(a1 + 8) = v5;
  turi::index_file_information::index_file_information(&v6, v3);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 16))(v5, &v6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, v12[1]);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v8 < 0)
    operator delete(v7);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_2180A4908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::index_file_information::~index_file_information((turi::index_file_information *)va);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<std::pair<std::vector<turi::flexible_type>,std::string>>::create_segment_read_buffers(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = (uint64_t)(a2[1] - *a2) >> 4;
  a1[10] = v4;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 14), v4);
  std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::resize(a1 + 20, a1[10]);
  v5 = a1[14];
  if (a1[15] != v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *a2 + v7;
      *(_QWORD *)(v5 + 8 * v8) = *(_QWORD *)(v9 + 8) - *(_QWORD *)v9;
      turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::init((uint64_t *)(a1[20] + v6), (uint64_t)a1, *(_QWORD *)v9, *(_QWORD *)(v9 + 8), 1024);
      ++v8;
      v5 = a1[14];
      v7 += 16;
      v6 += 96;
    }
    while (v8 < (a1[15] - v5) >> 3);
  }
}

uint64_t turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray_format_reader_v2(uint64_t a1)
{
  uint64_t instance;
  int v3;

  *(_QWORD *)a1 = &unk_24D92D088;
  instance = turi::v2_block_impl::block_manager::get_instance((turi::v2_block_impl::block_manager *)a1);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 8) = instance;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  v3 = pthread_mutex_init((pthread_mutex_t *)(a1 + 240), 0);
  assert_msg(v3 == 0, "Mutex create error %d", v3);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  return a1;
}

void sub_2180A4ADC(_Unwind_Exception *a1)
{
  uint64_t v1;
  turi::index_file_information *v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *(void **)(v1 + 216);
  if (v6)
  {
    *(_QWORD *)(v1 + 224) = v6;
    operator delete(v6);
  }
  turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::sarray_format_reader_v2(v4, v3, v1);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_format_reader_v2(uint64_t a1)
{
  turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_format_reader_v2(a1);
  JUMPOUT(0x219A19A08);
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::open(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  char *v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t all_block_info;
  _QWORD *v29;
  unint64_t i;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t *v51;
  char *v52;
  char *v53;
  unint64_t *v54;
  __int128 v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  turi::v2_block_impl::typed_decode_stream **v60;
  turi::v2_block_impl::typed_decode_stream **j;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char **v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  char **v87;
  std::string v88;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = v4;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 48));
  if (a1 + 16 != a2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 88), *(char **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 112), *(std::string **)(a2 + 96), *(__int128 **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 136), *(__int128 **)(a2 + 120), (__int128 *)(a2 + 128));
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
  v86 = (void **)(a1 + 192);
  v87 = (char **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 216);
  v83 = (char **)(a1 + 216);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 224) = v5;
  *(_QWORD *)(a1 + 160) = 0;
  v6 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a2 + 104) == v6)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v84 = a2;
    do
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = (__int128 *)(v6 + 24 * v7);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v11;
      }
      v12 = turi::v2_block_impl::block_manager::open_column(v9, (uint64_t)&v88);
      v14 = v13;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      v16 = *(unint64_t **)(a1 + 224);
      v15 = *(_QWORD *)(a1 + 232);
      v85 = v7;
      if ((unint64_t)v16 >= v15)
      {
        v18 = ((char *)v16 - *v83) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v20 = v15 - (_QWORD)*v83;
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(a1 + 232, v21);
        else
          v22 = 0;
        v23 = (unint64_t *)&v22[16 * v18];
        *v23 = v12;
        v23[1] = v14;
        v25 = *(char **)(a1 + 216);
        v24 = *(char **)(a1 + 224);
        v26 = v23;
        if (v24 != v25)
        {
          do
          {
            *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
            v26 -= 2;
            v24 -= 16;
          }
          while (v24 != v25);
          v24 = *v83;
        }
        v17 = v23 + 2;
        *(_QWORD *)(a1 + 216) = v26;
        *(_QWORD *)(a1 + 224) = v23 + 2;
        *(_QWORD *)(a1 + 232) = &v22[16 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v16 = v12;
        v16[1] = v14;
        v17 = v16 + 2;
      }
      *(_QWORD *)(a1 + 224) = v17;
      v27 = turi::v2_block_impl::block_manager::num_blocks_in_column(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12, v14);
      all_block_info = turi::v2_block_impl::block_manager::get_all_block_info(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12);
      if (v27)
      {
        v29 = (_QWORD *)all_block_info;
        for (i = 0; i != v27; ++i)
        {
          v32 = *(char **)(a1 + 200);
          v31 = *(_QWORD *)(a1 + 208);
          if ((unint64_t)v32 >= v31)
          {
            v34 = (char *)*v86;
            v35 = (v32 - (_BYTE *)*v86) >> 3;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v37 = v31 - (_QWORD)v34;
            if (v37 >> 2 > v36)
              v36 = v37 >> 2;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v38);
              v34 = *(char **)(a1 + 192);
              v32 = *(char **)(a1 + 200);
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[8 * v35];
            *(_QWORD *)v40 = v8;
            v33 = v40 + 8;
            while (v32 != v34)
            {
              v41 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              *((_QWORD *)v40 - 1) = v41;
              v40 -= 8;
            }
            *(_QWORD *)(a1 + 192) = v40;
            *(_QWORD *)(a1 + 200) = v33;
            *(_QWORD *)(a1 + 208) = &v39[8 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_QWORD *)v32 = v8;
            v33 = v32 + 8;
          }
          *(_QWORD *)(a1 + 200) = v33;
          v42 = *(_QWORD *)(*(_QWORD *)(*v29 + 24 * v14) + 48 * i + 24);
          v44 = *(unint64_t **)(a1 + 176);
          v43 = *(_QWORD *)(a1 + 184);
          if ((unint64_t)v44 >= v43)
          {
            v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - *v87) >> 3);
            v47 = v46 + 1;
            if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)*v87) >> 3);
            if (2 * v48 > v47)
              v47 = 2 * v48;
            if (v48 >= 0x555555555555555)
              v49 = 0xAAAAAAAAAAAAAAALL;
            else
              v49 = v47;
            if (v49)
              v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 184, v49);
            else
              v50 = 0;
            v51 = (unint64_t *)&v50[24 * v46];
            *v51 = v12;
            v51[1] = v14;
            v51[2] = i;
            v53 = *(char **)(a1 + 168);
            v52 = *(char **)(a1 + 176);
            v54 = v51;
            if (v52 != v53)
            {
              do
              {
                v55 = *(_OWORD *)(v52 - 24);
                *(v54 - 1) = *((_QWORD *)v52 - 1);
                *(_OWORD *)(v54 - 3) = v55;
                v54 -= 3;
                v52 -= 24;
              }
              while (v52 != v53);
              v52 = *v87;
            }
            v45 = v51 + 3;
            *(_QWORD *)(a1 + 168) = v54;
            *(_QWORD *)(a1 + 176) = v51 + 3;
            *(_QWORD *)(a1 + 184) = &v50[24 * v49];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *v44 = v12;
            v44[1] = v14;
            v45 = v44 + 3;
            v44[2] = i;
          }
          v8 += v42;
          *(_QWORD *)(a1 + 176) = v45;
        }
      }
      v7 = v85 + 1;
      v6 = *(_QWORD *)(v84 + 96);
    }
    while (v85 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v84 + 104) - v6) >> 3));
  }
  v56 = *(uint64_t **)(a1 + 88);
  v57 = *(uint64_t **)(a1 + 96);
  if (v56 != v57)
  {
    v58 = *(_QWORD *)(a1 + 160);
    do
    {
      v59 = *v56++;
      v58 += v59;
      *(_QWORD *)(a1 + 160) = v58;
    }
    while (v56 != v57);
  }
  v60 = *(turi::v2_block_impl::typed_decode_stream ***)(a1 + 336);
  for (j = *(turi::v2_block_impl::typed_decode_stream ***)(a1 + 344);
        j != v60;
        std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100](a1 + 352, j))
  {
    j -= 23;
  }
  *(_QWORD *)(a1 + 344) = v60;
  std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::resize((uint64_t *)(a1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3));
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3);
  v63 = *(_QWORD *)(a1 + 320);
  v64 = v62 >> 6;
  if ((v62 & 0x3F) != 0)
    ++v64;
  *(_QWORD *)(a1 + 312) = v62;
  *(_QWORD *)(a1 + 320) = v64;
  v65 = (char *)malloc_type_realloc(*(void **)(a1 + 304), 8 * v64, 0x100004000313F17uLL);
  v66 = v65;
  *(_QWORD *)(a1 + 304) = v65;
  v67 = *(_QWORD *)(a1 + 312) & 0x3FLL;
  if (v67)
    *(_QWORD *)&v65[8 * *(_QWORD *)(a1 + 320) - 8] &= ~(-1 << v67);
  v68 = *(_QWORD *)(a1 + 320);
  if (v68 > v63)
  {
    v69 = &v65[8 * v63];
    v70 = 8 * v68 - 8 * v63;
    if (v70 >= 1)
    {
      bzero(v69, 8 * (((unint64_t)v70 >> 3) - ((unint64_t)v70 > 7)) + 8);
      v68 = *(_QWORD *)(a1 + 320);
    }
  }
  if (v68 >= 1)
    bzero(v66, 8 * (v68 - ((v68 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
  v71 = *(_QWORD *)(a1 + 208);
  v72 = *(char **)(a1 + 200);
  if ((unint64_t)v72 >= v71)
  {
    v74 = (char *)*v86;
    v75 = (v72 - (_BYTE *)*v86) >> 3;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v77 = v71 - (_QWORD)v74;
    if (v77 >> 2 > v76)
      v76 = v77 >> 2;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    if (v78)
    {
      v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v78);
      v74 = *(char **)(a1 + 192);
      v72 = *(char **)(a1 + 200);
    }
    else
    {
      v79 = 0;
    }
    v80 = &v79[8 * v75];
    v81 = &v79[8 * v78];
    *(_QWORD *)v80 = *(_QWORD *)(a1 + 160);
    v73 = v80 + 8;
    while (v72 != v74)
    {
      v82 = *((_QWORD *)v72 - 1);
      v72 -= 8;
      *((_QWORD *)v80 - 1) = v82;
      v80 -= 8;
    }
    *(_QWORD *)(a1 + 192) = v80;
    *(_QWORD *)(a1 + 200) = v73;
    *(_QWORD *)(a1 + 208) = v81;
    if (v74)
      operator delete(v74);
  }
  else
  {
    *(_QWORD *)v72 = *(_QWORD *)(a1 + 160);
    v73 = v72 + 8;
  }
  *(_QWORD *)(a1 + 200) = v73;
  if (*(_QWORD *)(a1 + 160) != v8)
    turi::sarray_format_reader_v2<turi::flexible_type>::open(turi::index_file_information)::{lambda(void)#1}::operator()();
}

void sub_2180A51E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::read_rows(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  cppipc *v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  void *exception;

  if (a1[20] >= a3)
    v6 = a3;
  else
    v6 = a1[20];
  v7 = v6 >= a2;
  v8 = v6 - a2;
  if (v8 != 0 && v7)
  {
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::resize(a4, v8);
    turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_rows_from_cache(a1, a2, v6, a4);
    if (cppipc::must_cancel(v10))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Cancelled by user.");
    }
    return 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4);
  }
  else
  {
    v13 = *a4;
    v12 = a4[1];
    if (v12 != *a4)
    {
      do
      {
        v12 -= 48;
        std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(a4 + 2), v12);
      }
      while (v12 != v13);
    }
    result = 0;
    a4[1] = v13;
  }
  return result;
}

void sub_2180A52E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_format_reader_v2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = &unk_24D92D088;
  turi::sarray_format_reader_v2<turi::flexible_type>::close((uint64_t *)a1);
  v7 = (void **)(a1 + 336);
  std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__destroy_vector::operator()[abi:ne180100](&v7);
  free(*(void **)(a1 + 304));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 240));
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(_QWORD *)(a1 + 176) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
  v7 = (void **)(a1 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(_QWORD *)(a1 + 96) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::resize(uint64_t *a1, unint64_t a2)
{
  turi::v2_block_impl::typed_decode_stream **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (turi::v2_block_impl::typed_decode_stream **)a1[1];
  v4 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 184 * a2;
    while (v3 != (turi::v2_block_impl::typed_decode_stream **)v7)
    {
      v3 -= 23;
      std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void **std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17[2];
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3) >= a2)
    return (void **)std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__construct_at_end((uint64_t)a1, a2);
  v8 = 0xD37A6F4DE9BD37A7 * ((v7 - *a1) >> 3);
  v9 = v8 + a2;
  if (v8 + a2 > 0x1642C8590B21642)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v10 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0xB21642C8590B21)
    v11 = 0x1642C8590B21642;
  else
    v11 = v9;
  v20 = v4;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>(v4, v11);
  else
    v12 = 0;
  v14 = &v12[184 * v8];
  v17[0] = v12;
  v17[1] = v14;
  v18 = v14;
  v19 = &v12[184 * v11];
  v15 = 184 * a2;
  v16 = &v14[184 * a2];
  do
  {
    *((_QWORD *)v14 + 22) = 0;
    *((_OWORD *)v14 + 9) = 0u;
    *((_OWORD *)v14 + 10) = 0u;
    *((_OWORD *)v14 + 7) = 0u;
    *((_OWORD *)v14 + 8) = 0u;
    *((_OWORD *)v14 + 5) = 0u;
    *((_OWORD *)v14 + 6) = 0u;
    *((_OWORD *)v14 + 3) = 0u;
    *((_OWORD *)v14 + 4) = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    *((_OWORD *)v14 + 2) = 0u;
    *(_OWORD *)v14 = 0u;
    turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry((uint64_t)v14);
    v14 += 184;
    v15 -= 184;
  }
  while (v15);
  v18 = v16;
  std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__swap_out_circular_buffer(a1, v17);
  return std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer(v17);
}

void sub_2180A55C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v4 = v3 + 184 * a2;
    v5 = 184 * a2;
    do
    {
      *(_QWORD *)(v3 + 176) = 0;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)v3 = 0u;
      result = turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v3);
      v3 += 184;
      v5 -= 184;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(v2 + 8) = v3;
  return result;
}

void sub_2180A5658(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 184;
      turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v7 - 184, v9);
      v7 = *((_QWORD *)&v15 + 1) - 184;
      *((_QWORD *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2180A5778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      v3 -= 48;
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_rows_from_cache(unint64_t *a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v6 = a1;
  v7 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(a1, a2);
  v34 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(v6, a3 - 1);
  if (v7 < v34 + 1)
  {
    v8 = 0;
    v36 = v6;
    v33 = a3;
    do
    {
      v9 = v7;
      v10 = v6[24];
      v11 = *(_QWORD *)(v10 + 8 * v7);
      v12 = *(_QWORD *)(v10 + 8 * (v7 + 1));
      v13 = v6[42];
      v14 = (unsigned __int8 *)(v13 + 184 * v7);
      do
      {
        while (*v14 == 1)
          ;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(1u, v14));
      }
      while (v15);
      v37 = v7 + 1;
      if (v11 <= a2)
        v16 = a2;
      else
        v16 = v11;
      v17 = v13 + 184 * v9;
      v20 = *(_QWORD *)(v17 + 24);
      v19 = (_QWORD **)(v17 + 24);
      v18 = v20;
      if (v12 >= a3)
        v12 = a3;
      v39 = v12;
      v22 = (unint64_t *)(v19 - 2);
      v21 = (unint64_t)*(v19 - 2);
      if (v18)
        v23 = v21 > v16;
      else
        v23 = 1;
      if (v23)
      {
        turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_cache_from_file(v6, v9, (uint64_t)v14);
        v21 = *v22;
      }
      v24 = v6[24];
      v25 = *(_QWORD *)(v24 + 8 * v9);
      v38 = v9;
      if (v21 == v16)
      {
        v26 = v39;
        v27 = v39 - v16;
        if (v39 <= v16)
        {
          v7 = v37;
        }
        else
        {
          v28 = -48 * v25 + 48 * v16;
          v29 = 48 * v8;
          v8 = v8 + v39 - v16;
          do
          {
            std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](*a4 + v29, **v19 + v28);
            v28 += 48;
            v29 += 48;
            --v27;
          }
          while (v27);
          v6 = v36;
          v7 = v37;
          v24 = v36[24];
          a3 = v33;
          v26 = v39;
        }
        *v22 = v26;
        if (v26 == *(_QWORD *)(v24 + 8 * v7))
          turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::release_cache(v6, v38);
      }
      else
      {
        v30 = v39 - v16;
        if (v39 <= v16)
        {
          v7 = v37;
        }
        else
        {
          v31 = -48 * v25 + 48 * v16;
          v32 = 48 * v8;
          v7 = v37;
          do
          {
            std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100]((std::string *)(*a4 + v32), **v19 + v31);
            ++v8;
            v31 += 48;
            v32 += 48;
            --v30;
          }
          while (v30);
        }
      }
      __dmb(0xBu);
      *v14 = 0;
      v6 = v36;
    }
    while (v38 != v34);
  }
}

void sub_2180A5A7C(_Unwind_Exception *a1)
{
  _BYTE *v1;

  __dmb(0xBu);
  *v1 = 0;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[48 * v8];
    v18 = &v12[48 * v11];
    v14 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer(&v15);
  }
}

void sub_2180A5BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_cache_from_file(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v22;
  uint64_t v23;
  __int128 v24;

  v7 = (uint64_t **)(a3 + 24);
  v6 = *(uint64_t **)(a3 + 24);
  if (!v6)
  {
    turi::buffer_pool<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::get_new_buffer(&turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::m_buffer_pool, (uint64_t)&v24);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v7, &v24);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = *v7;
  }
  v11 = a1[21] + 24 * a2;
  v12 = a1[1];
  v13 = *(_QWORD *)(v11 + 16);
  v22 = *(_OWORD *)v11;
  v23 = v13;
  if (!turi::v2_block_impl::block_manager::read_block<std::pair<std::vector<turi::flexible_type>,std::string>>(v12, &v22, v6, 0))
    turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_cache_from_file(unsigned long,turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry &)::{lambda(void)#1}::operator()();
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1[24] + 8 * a2);
  *(_WORD *)(a3 + 16) = 256;
  v14 = a1[38];
  if ((*(_QWORD *)(v14 + 8 * (a2 >> 6)) & (1 << a2)) == 0)
  {
    v15 = a1 + 41;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v14 = a1[38];
  }
  v17 = (unint64_t *)(v14 + 8 * (a2 >> 6));
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 | (1 << a2), v17));
  v19 = a1[41];
  if (v19 != turi::SFRAME_MAX_BLOCKS_IN_CACHE)
  {
    v20 = turi::SFRAME_MAX_BLOCKS_IN_CACHE - v19;
    do
    {
      if (a1[41] <= turi::SFRAME_MAX_BLOCKS_IN_CACHE)
        break;
      turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::try_evict_something_from_cache((turi::random *)a1);
    }
    while (!__CFADD__(v20++, 1));
  }
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::release_cache(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = a1[42];
  if (*(_BYTE *)(v2 + 184 * a2 + 17))
  {
    v5 = 184 * a2;
    turi::buffer_pool<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::release_buffer((uint64_t)&turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::m_buffer_pool, (uint64_t **)(v2 + 184 * a2 + 24));
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)(a1[42] + v5 + 24));
    turi::v2_block_impl::encoded_block::release((turi::v2_block_impl::encoded_block *)(a1[42] + v5 + 40));
    turi::v2_block_impl::encoded_block_range::release((turi::v2_block_impl::typed_decode_stream **)(a1[42] + v5 + 112));
    *(_BYTE *)(a1[42] + v5 + 17) = 0;
    v6 = (unint64_t *)(a1[38] + 8 * (a2 >> 6));
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 & ~(1 << a2), v6));
    v8 = a1 + 41;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
  }
}

std::string *std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](std::string *a1, uint64_t a2)
{
  if (a1 != (std::string *)a2)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  std::string::operator=(a1 + 1, (const std::string *)(a2 + 24));
  return a1;
}

uint64_t turi::buffer_pool<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::get_new_buffer@<X0>(pthread_mutex_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t result;
  _QWORD *v15;

  v4 = &a1[1].__opaque[24];
  if (!*(_QWORD *)a1[2].__opaque)
  {
    pthread_mutex_lock(a1);
    v6 = *(_QWORD *)a1[1].__opaque;
    v5 = *(_QWORD *)&a1[1].__opaque[8];
    if (v5 != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v6 + v7 + 8);
        if (v9 && !*(_QWORD *)(v9 + 8))
        {
          std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::push_back(v4, (__int128 *)(v6 + v7));
          v6 = *(_QWORD *)a1[1].__opaque;
          v5 = *(_QWORD *)&a1[1].__opaque[8];
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < (v5 - v6) >> 4);
    }
    pthread_mutex_unlock(a1);
    if (!*(_QWORD *)a1[2].__opaque)
      goto LABEL_15;
  }
  pthread_mutex_lock(a1);
  v10 = *(_QWORD *)a1[2].__opaque;
  if (v10)
  {
    v11 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)&a1[1].__opaque[32]
                                + (((unint64_t)(v10 + a1[2].__sig - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v10 + LOBYTE(a1[2].__sig) - 1));
    *(_OWORD *)a2 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::pop_back(v4);
  }
  result = pthread_mutex_unlock(a1);
  if (!v10)
  {
LABEL_15:
    v15 = operator new(0x30uLL);
    v15[2] = 0;
    *v15 = &unk_24D92D128;
    v15[1] = 0;
    v15[4] = 0;
    v15[5] = 0;
    *(_QWORD *)(a2 + 8) = v15;
    v15[3] = 0;
    *(_QWORD *)a2 = v15 + 3;
    pthread_mutex_lock(a1);
    if (a1[1].__sig > (unint64_t)((uint64_t)(*(_QWORD *)&a1[1].__opaque[8] - *(_QWORD *)a1[1].__opaque) >> 4))
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)a1[1].__opaque, (__int128 *)a2);
    return pthread_mutex_unlock(a1);
  }
  return result;
}

void sub_2180A5FE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;

  pthread_mutex_unlock(v2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL turi::v2_block_impl::block_manager::read_block<std::pair<std::vector<turi::flexible_type>,std::string>>(uint64_t a1, __int128 *a2, uint64_t *a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[5];
  __int128 v14;
  uint64_t v15;
  __n128 v16;

  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  turi::v2_block_impl::block_manager::read_block(a1, (unint64_t *)&v14, a4, &v16);
  v6 = v16.n128_u64[0];
  if (v16.n128_u64[0])
  {
    v7 = *(_QWORD *)v16.n128_u64[0];
    v8 = *(_QWORD *)(v16.n128_u64[0] + 8) - *(_QWORD *)v16.n128_u64[0];
    v13[0] = 0;
    v13[1] = 0;
    v13[2] = v7;
    v13[3] = 0;
    v13[4] = v8;
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<std::vector<turi::flexible_type>,std::string>,false>::exec((turi::iarchive *)v13, a3);
  }
  turi::buffer_pool<std::vector<char>>::release_buffer((pthread_mutex_t *)(a1 + 232), &v16);
  v9 = (std::__shared_weak_count *)v16.n128_u64[1];
  if (v16.n128_u64[1])
  {
    v10 = (unint64_t *)(v16.n128_u64[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v6 != 0;
}

void sub_2180A6108(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::try_evict_something_from_cache(turi::random *a1)
{
  uint64_t v2;
  unint64_t v3;
  turi::random::generator *source;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;

  v2 = (uint64_t)(*((_QWORD *)a1 + 43) - *((_QWORD *)a1 + 42)) >> 3;
  v3 = 0xD37A6F4DE9BD37A7 * v2 - 1;
  if (0xD37A6F4DE9BD37A7 * v2 != 1)
  {
    source = turi::random::get_source(a1);
    pthread_mutex_lock((pthread_mutex_t *)((char *)source + 6288));
    v3 = boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>((uint64_t *)source + 785, 0, v3);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)source + 6288));
  }
  v5 = v3 >> 6;
  v6 = (_QWORD *)*((_QWORD *)a1 + 38);
  v7 = v6[v3 >> 6];
  if (((v7 >> v3) & 1) != 0)
    goto LABEL_4;
  v9 = v7 & ~(0xFFFFFFFFFFFFFFFFLL >> (v3 & 0x3F ^ 0x3F));
  if (v9)
  {
    v3 = __clz(__rbit64(v9)) | v3 & 0xFFFFFFFFFFFFFFC0;
LABEL_15:
    if (v3 < *((_QWORD *)a1 + 39))
      goto LABEL_4;
  }
  else
  {
    v10 = v5 << 6;
    v11 = v5 + 1;
    while (v11 < *((_QWORD *)a1 + 40))
    {
      v12 = v6[v11];
      v10 += 64;
      ++v11;
      if (v12)
      {
        v3 = __clz(__rbit64(v12)) + v10;
        goto LABEL_15;
      }
    }
  }
  if ((*v6 & 1) == 0)
  {
    v13 = *v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v13)
    {
      v3 = __clz(__rbit64(v13));
      goto LABEL_4;
    }
    v14 = *((_QWORD *)a1 + 40);
    if (v14 <= 1)
      v14 = 1;
    v15 = v14 - 1;
    v16 = v6 + 1;
    while (v15)
    {
      v18 = *v16++;
      v17 = v18;
      --v15;
      v13 -= 64;
      if (v18)
      {
        v3 = __clz(__rbit64(v17)) - v13;
        goto LABEL_4;
      }
    }
  }
  v3 = 0;
LABEL_4:
  v19 = *((_QWORD *)a1 + 42) + 184 * v3;
  v20 = 0;
  if (std::unique_lock<turi::simple_spinlock>::try_lock((uint64_t)&v19))
    turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::release_cache(a1, v3);
  if (v20)
  {
    v8 = (_BYTE *)v19;
    __dmb(0xBu);
    *v8 = 0;
  }
}

void sub_2180A62C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9, char a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2180A6648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<std::vector<turi::flexible_type>,std::string>,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  std::string *v10;
  unint64_t v11;

  v11 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v11 = *(_QWORD *)(v4 + v5);
    *((_QWORD *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 48;
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v6);
    }
    while (v6 != v7);
  }
  a2[1] = v7;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::resize(a2, v11);
  if (v11)
  {
    v8 = 0;
    for (i = 0; i < v11; ++i)
    {
      v10 = (std::string *)(*a2 + v8);
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a1, (uint64_t *)v10);
      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a1, v10 + 1);
      v8 += 48;
    }
  }
}

void *turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec(uint64_t a1, std::string *this)
{
  uint64_t v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  void *result;
  size_t __n;

  __n = 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(v4 + v5);
    __n = v6;
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = 0;
  }
  std::string::resize(this, v6, 0);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = this;
  else
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return (void *)std::istream::read();
  result = memcpy(v7, (const void *)(v8 + *(_QWORD *)(a1 + 24)), __n);
  *(_QWORD *)(a1 + 24) += __n;
  return result;
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  unint64_t v10;

  v10 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v10 = *(_QWORD *)(v4 + v5);
    *((_QWORD *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 16;
      std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v6);
    }
    while (v6 != v7);
  }
  a2[1] = v7;
  std::vector<turi::flexible_type>::resize(a2, v10);
  if (v10)
  {
    v8 = 0;
    for (i = 0; i < v10; ++i)
    {
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1);
      v8 += 16;
    }
  }
}

void turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(turi::iarchive *a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unsigned int v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t *v67;
  std::string *v68;
  __int128 v69;
  _QWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  _QWORD *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  char v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned __int8 v105;
  void **v106;

  v105 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (!v4)
  {
    std::istream::read();
    v6 = 0;
    goto LABEL_3;
  }
  v5 = *((_QWORD *)a1 + 3);
  v105 = *(_BYTE *)(v4 + v5);
  v6 = v105;
  *((_QWORD *)a1 + 3) = v5 + 1;
  if ((v105 & 0x80) == 0)
  {
LABEL_3:
    if (*((_QWORD *)a1 + 2))
    {
      *((_QWORD *)a1 + 3) += 4;
    }
    else
    {
      std::istream::read();
      v6 = v105;
    }
    switch(*((_BYTE *)a2 + 12))
    {
      case 2:
        v13 = *a2;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = *a2;
          if (!*a2)
            goto LABEL_57;
          if (*((char *)v16 + 31) < 0)
            operator delete((void *)v16[1]);
          v17 = v16;
          v18 = 0x1012C404EF22A49;
          goto LABEL_56;
        }
        break;
      case 3:
        v19 = *a2;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = *a2;
          if (!*a2)
            goto LABEL_57;
          v23 = (void *)v22[1];
          if (v23)
          {
            v22[2] = (unint64_t)v23;
            operator delete(v23);
          }
          v17 = v22;
          v18 = 0x1080C409938AC02;
          goto LABEL_56;
        }
        break;
      case 4:
        v24 = *a2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *a2;
          if (!*a2)
            goto LABEL_57;
          v106 = (void **)(v27 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v106);
          goto LABEL_40;
        }
        break;
      case 5:
        v28 = *a2;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v27 = *a2;
          if (!*a2)
            goto LABEL_57;
          v106 = (void **)(v27 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v106);
LABEL_40:
          v17 = v27;
          v18 = 0x1020C405E66F15BLL;
          goto LABEL_56;
        }
        break;
      case 8:
        v31 = *a2;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v34 = *a2;
          if (!*a2)
            goto LABEL_57;
          boost::detail::shared_count::~shared_count((unsigned int **)v34 + 2);
          v17 = v34;
          v35 = -235920773;
          goto LABEL_55;
        }
        break;
      case 9:
        v36 = *a2;
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          v39 = *a2;
          if (*a2)
          {
            v40 = (void *)v39[6];
            if (v40)
            {
              v39[7] = (unint64_t)v40;
              operator delete(v40);
            }
            v41 = (void *)v39[3];
            if (v41)
            {
              v39[4] = (unint64_t)v41;
              operator delete(v41);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v39 + 1));
            v17 = v39;
            v35 = 2071181815;
LABEL_55:
            v18 = v35 | 0x1030C4000000000;
LABEL_56:
            MEMORY[0x219A19A08](v17, v18);
          }
LABEL_57:
          *a2 = 0;
        }
        break;
      default:
        break;
    }
    v42 = 0;
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    *((_BYTE *)a2 + 12) = v6;
    switch(v6)
    {
      case 2:
      case 3:
      case 4:
      case 5:
        goto LABEL_91;
      case 6:
        goto LABEL_96;
      case 8:
        goto LABEL_97;
      case 9:
        goto LABEL_143;
      default:
        goto LABEL_93;
    }
    goto LABEL_93;
  }
  switch(*((_BYTE *)a2 + 12))
  {
    case 2:
      v7 = *a2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = *a2;
        if (!*a2)
          goto LABEL_89;
        if (*((char *)v10 + 31) < 0)
          operator delete((void *)v10[1]);
        v11 = v10;
        v12 = 0x1012C404EF22A49;
        goto LABEL_88;
      }
      break;
    case 3:
      v43 = *a2;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        v46 = *a2;
        if (!*a2)
          goto LABEL_89;
        v47 = (void *)v46[1];
        if (v47)
        {
          v46[2] = (unint64_t)v47;
          operator delete(v47);
        }
        v11 = v46;
        v12 = 0x1080C409938AC02;
        goto LABEL_88;
      }
      break;
    case 4:
      v48 = *a2;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        v51 = *a2;
        if (!*a2)
          goto LABEL_89;
        v106 = (void **)(v51 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v106);
        goto LABEL_76;
      }
      break;
    case 5:
      v52 = *a2;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        v51 = *a2;
        if (!*a2)
          goto LABEL_89;
        v106 = (void **)(v51 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v106);
LABEL_76:
        v11 = v51;
        v12 = 0x1020C405E66F15BLL;
        goto LABEL_88;
      }
      break;
    case 8:
      v55 = *a2;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        v58 = *a2;
        if (!*a2)
          goto LABEL_89;
        boost::detail::shared_count::~shared_count((unsigned int **)v58 + 2);
        v11 = v58;
        v59 = -235920773;
        goto LABEL_87;
      }
      break;
    case 9:
      v60 = *a2;
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        if (*a2)
        {
          v11 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a2);
          v59 = 2071181815;
LABEL_87:
          v12 = v59 | 0x1030C4000000000;
LABEL_88:
          MEMORY[0x219A19A08](v11, v12);
        }
LABEL_89:
        *a2 = 0;
      }
      break;
    default:
      break;
  }
  v42 = 0;
  *a2 = 0;
  *((_DWORD *)a2 + 2) = 0;
  *((_BYTE *)a2 + 12) = v105 ^ 0x80;
  switch(v105 ^ 0x80)
  {
    case 2:
    case 3:
    case 4:
    case 5:
LABEL_91:
      v63 = operator new();
      v42 = v63;
      *(_QWORD *)v63 = 0;
      *(_QWORD *)(v63 + 16) = 0;
      *(_QWORD *)(v63 + 24) = 0;
      *(_QWORD *)(v63 + 8) = 0;
      goto LABEL_92;
    case 6:
LABEL_96:
      v42 = 0x1900000000000000;
      *a2 = (_QWORD *)0x1900000000000000;
      *((_DWORD *)a2 + 2) = 0;
      break;
    case 8:
LABEL_97:
      v63 = operator new();
      v42 = v63;
      *(_QWORD *)v63 = 0;
      *(_OWORD *)(v63 + 8) = 0u;
      *(_OWORD *)(v63 + 24) = 0u;
      *(_OWORD *)(v63 + 40) = 0u;
      *(_QWORD *)(v63 + 56) = 0;
      *(_QWORD *)(v63 + 64) = 3;
LABEL_92:
      *a2 = (_QWORD *)v63;
      *(_QWORD *)v63 = 1;
      break;
    case 9:
LABEL_143:
      v42 = operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v42);
      *a2 = (_QWORD *)v42;
      *(_QWORD *)v42 = 1;
      break;
    default:
      break;
  }
LABEL_93:
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
    case 1:
      v64 = *((_QWORD *)a1 + 2);
      if (!v64)
        goto LABEL_142;
      *a2 = *(_QWORD **)(v64 + *((_QWORD *)a1 + 3));
      v65 = *((_QWORD *)a1 + 3) + 8;
      goto LABEL_153;
    case 2:
      if (*(_QWORD *)v42 != 1)
      {
        v66 = (_QWORD *)operator new();
        v67 = *a2;
        *v66 = **a2;
        v68 = (std::string *)(v66 + 1);
        if (*((char *)v67 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v68, (const std::string::value_type *)v67[1], v67[2]);
        }
        else
        {
          v69 = *(_OWORD *)(v67 + 1);
          v66[3] = v67[3];
          *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
        }
        *a2 = v66;
        *v66 = 1;
        do
        {
          v103 = __ldaxr((unint64_t *)v42);
          v104 = v103 - 1;
        }
        while (__stlxr(v104, (unint64_t *)v42));
        if (!v104)
        {
          if (*(char *)(v42 + 31) < 0)
            operator delete(*(void **)(v42 + 8));
          MEMORY[0x219A19A08](v42, 0x1012C404EF22A49);
        }
      }
      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a1, (std::string *)(*a2 + 1));
      return;
    case 3:
      if (*(_QWORD *)v42 != 1)
      {
        v70 = (_QWORD *)operator new();
        v71 = *a2;
        *v70 = **a2;
        v70[2] = 0;
        v70[3] = 0;
        v70[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v70 + 1, (const void *)v71[1], v71[2], (uint64_t)(v71[2] - v71[1]) >> 3);
        *a2 = v70;
        *v70 = 1;
        do
        {
          v72 = __ldaxr((unint64_t *)v42);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, (unint64_t *)v42));
        if (!v73)
        {
          v74 = *(void **)(v42 + 8);
          if (v74)
          {
            *(_QWORD *)(v42 + 16) = v74;
            operator delete(v74);
          }
          MEMORY[0x219A19A08](v42, 0x1080C409938AC02);
        }
      }
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec((uint64_t)a1, *a2 + 1);
      return;
    case 4:
      if (*(_QWORD *)v42 != 1)
      {
        v75 = (_QWORD *)operator new();
        v76 = *a2;
        *v75 = **a2;
        v75[2] = 0;
        v75[3] = 0;
        v75[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v75 + 1, (uint64_t *)v76[1], (uint64_t *)v76[2], (uint64_t)(v76[2] - v76[1]) >> 4);
        *a2 = v75;
        *v75 = 1;
        do
        {
          v77 = __ldaxr((unint64_t *)v42);
          v78 = v77 - 1;
        }
        while (__stlxr(v78, (unint64_t *)v42));
        if (!v78)
        {
          v106 = (void **)(v42 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v106);
          MEMORY[0x219A19A08](v42, 0x1020C405E66F15BLL);
        }
      }
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a1, *a2 + 1);
      return;
    case 5:
      if (*(_QWORD *)v42 != 1)
      {
        v79 = (_QWORD *)operator new();
        v80 = *a2;
        *v79 = **a2;
        v79[2] = 0;
        v79[3] = 0;
        v79[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v79 + 1, (uint64_t *)v80[1], (uint64_t *)v80[2], (uint64_t)(v80[2] - v80[1]) >> 5);
        *a2 = v79;
        *v79 = 1;
        do
        {
          v81 = __ldaxr((unint64_t *)v42);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, (unint64_t *)v42));
        if (!v82)
        {
          v106 = (void **)(v42 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v106);
          MEMORY[0x219A19A08](v42, 0x1020C405E66F15BLL);
        }
      }
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(a1, *a2 + 1);
      return;
    case 6:
      v83 = *((_QWORD *)a1 + 2);
      if (v83)
      {
        *a2 = *(_QWORD **)(v83 + *((_QWORD *)a1 + 3));
        *((_QWORD *)a1 + 3) += 8;
      }
      else
      {
        std::istream::read();
      }
      v99 = (uint64_t)*a2 >> 56;
      if ((v99 + 24) > 0x30)
      {
        v102 = *((_QWORD *)a1 + 2);
        if (v102)
        {
          *((_DWORD *)a2 + 2) = *(_DWORD *)(v102 + *((_QWORD *)a1 + 3));
          v65 = *((_QWORD *)a1 + 3) + 4;
LABEL_153:
          *((_QWORD *)a1 + 3) = v65;
        }
        else
        {
LABEL_142:
          std::istream::read();
        }
      }
      else
      {
        v100 = 2 * v99;
        if ((2 * v99 - 49) <= 0xFFFFFF9E)
          turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
        if ((int)v99 >= 0)
          v101 = 25;
        else
          v101 = -25;
        *a2 = (_QWORD *)((unint64_t)*a2 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(v101 + v100) << 56));
        *((_DWORD *)a2 + 2) = 0;
      }
      return;
    case 7:
      return;
    case 8:
      if (*(_QWORD *)v42 != 1)
      {
        v84 = operator new();
        v85 = *a2;
        *(_QWORD *)v84 = **a2;
        *(_QWORD *)(v84 + 8) = v85[1];
        v86 = v85[2];
        *(_QWORD *)(v84 + 16) = v86;
        if (v86)
        {
          v87 = (unsigned int *)(v86 + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        v89 = *(_OWORD *)(v85 + 3);
        v90 = *(_OWORD *)(v85 + 5);
        *(_OWORD *)(v84 + 56) = *(_OWORD *)(v85 + 7);
        *(_OWORD *)(v84 + 40) = v90;
        *(_OWORD *)(v84 + 24) = v89;
        *a2 = (_QWORD *)v84;
        *(_QWORD *)v84 = 1;
        do
        {
          v91 = __ldaxr((unint64_t *)v42);
          v92 = v91 - 1;
        }
        while (__stlxr(v92, (unint64_t *)v42));
        if (!v92)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v42 + 16));
          MEMORY[0x219A19A08](v42, 0x1030C40F1F0227BLL);
        }
      }
      turi::image_type::load((turi::image_type *)(*a2 + 1), a1);
      return;
    case 9:
      if (*(_QWORD *)v42 != 1)
      {
        v93 = (_QWORD *)operator new();
        v94 = (uint64_t)(*a2 + 1);
        *v93 = **a2;
        turi::flexible_type_impl::ndarray<double>::ndarray(v93 + 1, v94);
        *a2 = v93;
        *v93 = 1;
        do
        {
          v95 = __ldaxr((unint64_t *)v42);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, (unint64_t *)v42));
        if (!v96)
        {
          v97 = *(void **)(v42 + 48);
          if (v97)
          {
            *(_QWORD *)(v42 + 56) = v97;
            operator delete(v97);
          }
          v98 = *(void **)(v42 + 24);
          if (v98)
          {
            *(_QWORD *)(v42 + 32) = v98;
            operator delete(v98);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v42 + 8);
          MEMORY[0x219A19A08](v42, 0x1030C407B73B9F7);
        }
      }
      turi::flexible_type_impl::ndarray<double>::load((uint64_t)(*a2 + 1), (uint64_t)a1);
      return;
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_2180A7440(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  uint64_t v9;
  void *result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = 0;
  }
  a2[1] = *a2;
  std::vector<double>::resize((uint64_t)a2, v6);
  v7 = (void *)*a2;
  v8 = a2[1] - *a2;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return (void *)std::istream::read();
  result = memcpy(v7, (const void *)(v9 + *(_QWORD *)(a1 + 24)), v8);
  *(_QWORD *)(a1 + 24) += v8;
  return result;
}

void *turi::flexible_type_impl::ndarray<double>::load(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  char v13;

  v13 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(unsigned __int8 *)(v4 + v5);
    v13 = v6;
    *(_QWORD *)(a2 + 24) = v5 + 1;
    if (v6)
      turi::flexible_type_impl::ndarray<double>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
  }
  else
  {
    std::istream::read();
  }
  *(_QWORD *)(a1 + 64) = 0;
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,unsigned long,true>::exec(a2, (_QWORD *)(a1 + 16));
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,unsigned long,true>::exec(a2, (_QWORD *)(a1 + 40));
  v7 = operator new(0x30uLL);
  v7[2] = 0;
  *v7 = &unk_24D9195E8;
  v7[1] = 0;
  v7[4] = 0;
  v7[5] = 0;
  *((_QWORD *)&v12 + 1) = v7;
  v7[3] = 0;
  *(_QWORD *)&v12 = v7 + 3;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1, &v12);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec(a2, *(_QWORD **)a1);
}

void turi::flexible_type_impl::ndarray<double>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"c == 0", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 545, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180A7788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive,unsigned long,true>::exec(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  uint64_t v9;
  void *result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = 0;
  }
  a2[1] = *a2;
  std::vector<unsigned long>::resize((uint64_t)a2, v6);
  v7 = (void *)*a2;
  v8 = a2[1] - *a2;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return (void *)std::istream::read();
  result = memcpy(v7, (const void *)(v9 + *(_QWORD *)(a1 + 24)), v8);
  *(_QWORD *)(a1 + 24) += v8;
  return result;
}

uint64_t turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t j;
  unint64_t v11;

  v11 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v11 = *(_QWORD *)(v4 + v5);
    *((_QWORD *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = *a2;
  for (i = a2[1]; i != v7; i = std::pair<turi::flexible_type,turi::flexible_type>::~pair(i - 32))
    ;
  a2[1] = v7;
  result = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::resize(a2, v11);
  if (v11)
  {
    v9 = 0;
    for (j = 0; j < v11; ++j)
    {
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1);
      result = turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1);
      v9 += 32;
    }
  }
  return result;
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  result = a1[1];
  v4 = (result - *a1) >> 5;
  if (a2 > v4)
    return std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__append(a1, a2 - v4);
  if (a2 < v4)
  {
    v5 = *a1 + 32 * a2;
    while (result != v5)
      result = std::pair<turi::flexible_type,turi::flexible_type>::~pair(result - 32);
    a1[1] = v5;
  }
  return result;
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(_BYTE *)(v7 + 12) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_BYTE *)(v7 + 28) = 0;
        v7 += 32;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v17[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(result, v12);
    else
      v13 = 0;
    v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    v16 = &v15[32 * a2];
    do
    {
      *(_QWORD *)v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      v15[12] = 0;
      *((_QWORD *)v15 + 2) = 0;
      *((_DWORD *)v15 + 6) = 0;
      v15[28] = 0;
      v15 += 32;
    }
    while (v15 != v16);
    v17[2] = v16;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void sub_2180A7B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::buffer_pool<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>::release_buffer(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v2 = *a2;
  if (*a2)
  {
    v6 = *v2;
    v5 = v2[1];
    if (v5 == *v2)
    {
      v7 = *a2;
    }
    else
    {
      do
      {
        v5 -= 48;
        std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v5);
      }
      while (v5 != v6);
      v7 = *a2;
      v5 = **a2;
    }
    v2[1] = v6;
    if (0xAAAAAAAAAAAAAAABLL * ((v7[2] - v5) >> 4) >= 0x100000)
      std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::shrink_to_fit((void **)v7);
    if ((unint64_t)(*(_QWORD *)(a1 + 136) + ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4)) < *(_QWORD *)(a1 + 64))
    {
      pthread_mutex_lock((pthread_mutex_t *)a1);
      std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::push_back((_QWORD *)(a1 + 96), (__n128 *)a2);
      pthread_mutex_unlock((pthread_mutex_t *)a1);
    }
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](a2);
  }
}

void sub_2180A7C2C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::shared_ptr<std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (void **)(*a1 + 96 * a2));
  }
}

void turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::init(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  a1[5] = a2;
  a1[6] = 0;
  a1[11] = a3;
  a1[7] = a3;
  a1[8] = a3;
  v8 = turi::sarray_reader<turi::flexible_type>::size(a2);
  if (v8 >= a4)
    v9 = a4;
  else
    v9 = v8;
  a1[9] = v9;
  a1[10] = a5;
  v11 = *a1;
  v10 = a1[1];
  if (v10 != *a1)
  {
    do
    {
      v10 -= 48;
      std::allocator<std::pair<std::vector<turi::flexible_type>,std::string>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v10);
    }
    while (v10 != v11);
  }
  a1[1] = v11;
}

void std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      v13 = 96 * ((96 * a2 - 96) / 0x60) + 96;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[96 * v8];
    v18 = &v12[96 * v11];
    v14 = 96 * ((96 * a2 - 96) / 0x60) + 96;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2180A7ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 96) = 0;
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      v8 = *(_OWORD *)(a3 - 96);
      a3 -= 96;
      *(_OWORD *)(v7 - 96) = v8;
      *(_QWORD *)(v7 - 80) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v9 = *(_OWORD *)(a3 + 56);
      v10 = *(_OWORD *)(a3 + 72);
      v11 = *(_QWORD *)(a3 + 88);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 8) = v11;
      *(_OWORD *)(v7 - 24) = v10;
      *(_OWORD *)(v7 - 40) = v9;
      v7 = *((_QWORD *)&v17 + 1) - 96;
      *((_QWORD *)&v17 + 1) -= 96;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **i;
  void **v6;

  for (i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(i + 3));
    v6 = i;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
    i = (void **)(*(_QWORD *)(a2 + 32) + 96);
  }
}

uint64_t std::__split_buffer<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 96);
    *(_QWORD *)(a1 + 16) = i - 96;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 72);
    v6 = v5;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

void turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0::operator()(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  file_logger *v36;
  file_logger *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  int v42;
  unint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void ***v48;
  uint64_t v49;
  _QWORD *exception;
  void *v51[3];
  char *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  void *__p;
  char v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  uint64_t v67[3];
  void **v68[3];
  void **v69;
  void **v70[3];
  void ***v71;
  _BYTE v72[24];
  _BYTE *v73;
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v2 = *(unint64_t **)a1;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  if (v3 < **(_QWORD **)(a1 + 8))
  {
    while (1)
    {
      turi::sframe::get_output_iterator(*(size_t **)(a1 + 16), v3, (uint64_t)v70);
      if (((*(_QWORD *)(**(_QWORD **)(a1 + 24) + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
      {
        v4 = (int *)global_logger();
        if (v4[169] <= 2)
        {
          if (cppipc::must_cancel((cppipc *)v4))
            goto LABEL_84;
          v5 = (file_logger *)global_logger();
          started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort_and_merge.cpp", "operator()", 157, 1);
          v7 = pthread_getspecific(*((_QWORD *)started + 74));
          if (v7 && *((_BYTE *)v7 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"segment ", 8);
          v8 = file_logger::operator<<<unsigned long>((uint64_t)started);
          v9 = pthread_getspecific(*(_QWORD *)(v8 + 592));
          if (v9 && *((_BYTE *)v9 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)" is already sorted, skip sorting ", 33);
          v10 = pthread_getspecific(*(_QWORD *)(v8 + 592));
          if (v10)
          {
            if (*((_BYTE *)v10 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
              v11 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
              std::locale::~locale((std::locale *)&v61);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v8);
              if (*(_DWORD *)(v8 + 600) == 7)
                goto LABEL_85;
            }
          }
        }
        v13 = *(_QWORD **)(a1 + 32);
        v12 = *(_QWORD **)(a1 + 40);
        v14 = **(_QWORD **)(a1 + 48);
        std::vector<turi::flexible_type>::vector(v68, v14);
        std::vector<turi::flexible_type>::vector(v67, v14);
        (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*v13 + 32))(&v61, *v13, v3);
        while (1)
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*v13 + 40))(&v55, *v13, v3);
          v15 = v61 != v55 || v66 != v60;
          if (v59 < 0)
            operator delete(__p);
          v69 = (void **)&v56;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v69);
          if (!v15)
            break;
          v55 = v62;
          v56 = v63;
          v63 = 0;
          v62 = 0uLL;
          v57 = v64;
          __p = v65;
          v64 = 0uLL;
          v65 = 0;
          turi::query_eval::sort_row_to_output_row((uint64_t)&v55, (uint64_t *)v68, v14);
          turi::query_eval::permute_row(v68, v67, v12);
          if (!v71)
            std::__throw_bad_function_call[abi:ne180100]();
          ((void (*)(void ***, uint64_t *))(*v71)[6])(v71, v67);
          if (SHIBYTE(__p) < 0)
            operator delete((void *)v57);
          v69 = (void **)&v55;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v69);
          turi::sarray_iterator<std::pair<std::vector<turi::flexible_type>,std::string>>::operator++((uint64_t)&v61);
        }
        if (SHIBYTE(v65) < 0)
          operator delete((void *)v64);
        *(_QWORD *)&v55 = &v62;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
        *(_QWORD *)&v61 = v67;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
        *(_QWORD *)&v61 = v68;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
        goto LABEL_63;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 56));
      while (1)
      {
        v16 = *(unint64_t **)(a1 + 64);
        v17 = *(_QWORD *)(**(_QWORD **)(a1 + 72) + 8 * v3);
        v18 = v17 + *v16;
        if (v18 <= turi::sframe_config::SFRAME_SORT_BUFFER_SIZE)
          break;
        if (v17 <= turi::sframe_config::SFRAME_SORT_BUFFER_SIZE)
        {
          if (!v17)
            break;
        }
        else if (!*v16)
        {
          break;
        }
        v19 = pthread_cond_wait(*(pthread_cond_t **)(a1 + 80), *(pthread_mutex_t **)(a1 + 56));
        assert_msg(v19 == 0, "Condition variable wait error %d", v19);
      }
      *v16 = v18;
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 56));
      v20 = *(_QWORD **)(a1 + 32);
      v21 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*v20 + 24))(*v20, v3);
      std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::resize((uint64_t *)&v52, v21);
      std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::shrink_to_fit((void **)&v52);
      if (!v3)
        break;
      v22 = 0;
      v23 = 0;
      do
        v23 += (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v20 + 24))(*v20, v22++);
      while (v3 != v22);
      if (v3 != -1)
        goto LABEL_43;
      v24 = 0;
LABEL_45:
      (*(void (**)(_QWORD, uint64_t, uint64_t, char **))(*(_QWORD *)*v20 + 48))(*v20, v23, v24, &v52);
      v26 = v52;
      v27 = v53;
      std::vector<BOOL>::vector(v51, *(_QWORD *)(a1 + 88));
      v29 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 4));
      if (v27 == v26)
        v30 = 0;
      else
        v30 = v29;
      std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *,false>(v26, v27, v51, v30, 1, v28);
      if (v51[0])
        operator delete(v51[0]);
      v31 = *(_QWORD **)(a1 + 40);
      v32 = **(_QWORD **)(a1 + 48);
      std::vector<turi::flexible_type>::vector(&v61, v32);
      std::vector<turi::flexible_type>::vector(&v55, v32);
      v34 = v52;
      v33 = v53;
      while (v34 != v33)
      {
        turi::query_eval::sort_row_to_output_row((uint64_t)v34, (uint64_t *)&v61, v32);
        turi::query_eval::permute_row(&v61, (uint64_t *)&v55, v31);
        if (!v71)
          std::__throw_bad_function_call[abi:ne180100]();
        ((void (*)(void ***, __int128 *))(*v71)[6])(v71, &v55);
        v34 += 48;
      }
      v68[0] = (void **)&v55;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v68);
      *(_QWORD *)&v55 = &v61;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
      turi::sframe::flush_write_to_segment(*(turi::sframe **)(a1 + 16));
      v35 = (int *)global_logger();
      if (v35[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v35))
LABEL_84:
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v36 = (file_logger *)global_logger();
        v37 = file_logger::start_stream(v36, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/algorithm/sort_and_merge.cpp", "operator()", 178, 1);
        v38 = pthread_getspecific(*((_QWORD *)v37 + 74));
        if (v38 && *((_BYTE *)v38 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38 + 2, (uint64_t)"Finished sorting segment ", 25);
        v39 = file_logger::operator<<<unsigned long>((uint64_t)v37);
        v40 = pthread_getspecific(*(_QWORD *)(v39 + 592));
        if (v40)
        {
          if (*((_BYTE *)v40 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(v40[2] - 24) + 16));
            v41 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
            std::locale::~locale((std::locale *)&v61);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v39);
            if (*(_DWORD *)(v39 + 600) == 7)
            {
LABEL_85:
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
            }
          }
        }
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 56));
      **(_QWORD **)(a1 + 64) -= *(_QWORD *)(**(_QWORD **)(a1 + 72) + 8 * v3);
      v42 = pthread_cond_signal(*(pthread_cond_t **)(a1 + 80));
      assert_msg(v42 == 0, "Condition variable signal error %d", v42);
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 56));
LABEL_63:
      v43 = *(unint64_t **)a1;
      do
        v3 = __ldaxr(v43);
      while (__stlxr(v3 + 1, v43));
      v44 = v75;
      if (v75 == v74)
      {
        v44 = v74;
        v45 = 4;
      }
      else
      {
        if (!v75)
          goto LABEL_70;
        v45 = 5;
      }
      (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_70:
      v46 = v73;
      if (v73 == v72)
      {
        v46 = v72;
        v47 = 4;
      }
      else
      {
        if (!v73)
          goto LABEL_75;
        v47 = 5;
      }
      (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_75:
      v48 = v71;
      if (v71 == v70)
      {
        v48 = v70;
        v49 = 4;
        goto LABEL_79;
      }
      if (v71)
      {
        v49 = 5;
LABEL_79:
        ((void (*)(void))(*v48)[v49])();
      }
      if (v3 >= **(_QWORD **)(a1 + 8))
        goto LABEL_81;
    }
    v23 = 0;
LABEL_43:
    v25 = 0;
    v24 = 0;
    do
      v24 += (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v20 + 24))(*v20, v25++);
    while (v3 + 1 != v25);
    goto LABEL_45;
  }
LABEL_81:
  v70[0] = (void **)&v52;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100](v70);
}

void sub_2180A89E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  std::locale::~locale(&a30);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v40 - 192));
  *(_QWORD *)(v40 - 192) = &a16;
  std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 192));
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_iterator<std::pair<std::vector<turi::flexible_type>,std::string>>::~sarray_iterator(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  v3 = (void **)(a1 + 16);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void turi::query_eval::sort_row_to_output_row(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  std::vector<turi::flexible_type>::resize(a2, a3);
  v6 = *(uint64_t **)(a1 + 8);
  v7 = (uint64_t)v6 - *(_QWORD *)a1;
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>((uint64_t)v14, *(uint64_t **)a1, v6, *a2);
  v10 = *(_QWORD *)(a1 + 24);
  v9 = a1 + 24;
  v8 = v10;
  v11 = *(unsigned __int8 *)(v9 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(v9 + 8);
  else
    v8 = v9;
  v14[0] = 0;
  v14[1] = 0;
  v14[2] = v8;
  v14[3] = 0;
  v14[4] = v11;
  if (a3 > v7 >> 4)
  {
    v12 = a3 - (v7 >> 4);
    v13 = 16 * (v7 >> 4);
    do
    {
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec((turi::iarchive *)v14, (_QWORD **)(*a2 + v13));
      v13 += 16;
      --v12;
    }
    while (v12);
  }
}

void turi::query_eval::permute_row(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void **v41;

  std::vector<turi::flexible_type>::resize(a2, (uint64_t)(a1[1] - *a1) >> 4);
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v8 = 0;
    do
    {
      v9 = *a1 + 16 * *(_QWORD *)(*a3 + 8 * v8);
      v10 = v7 + 16 * v8;
      if (v9 != v10)
      {
        switch(*(_BYTE *)(v10 + 12))
        {
          case 2:
            v11 = *(unint64_t **)v10;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v14 = *(unint64_t **)v10;
              if (!*(_QWORD *)v10)
                goto LABEL_46;
              if (*((char *)v14 + 31) < 0)
                operator delete((void *)v14[1]);
              v15 = v14;
              v16 = 0x1012C404EF22A49;
              goto LABEL_45;
            }
            break;
          case 3:
            v17 = *(unint64_t **)v10;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              v20 = *(unint64_t **)v10;
              if (!*(_QWORD *)v10)
                goto LABEL_46;
              v21 = (void *)v20[1];
              if (v21)
              {
                v20[2] = (unint64_t)v21;
                operator delete(v21);
              }
              v15 = v20;
              v16 = 0x1080C409938AC02;
              goto LABEL_45;
            }
            break;
          case 4:
            v22 = *(unint64_t **)v10;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              v25 = *(unint64_t **)v10;
              if (!*(_QWORD *)v10)
                goto LABEL_46;
              v41 = (void **)(v25 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
              goto LABEL_29;
            }
            break;
          case 5:
            v26 = *(unint64_t **)v10;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v25 = *(unint64_t **)v10;
              if (!*(_QWORD *)v10)
                goto LABEL_46;
              v41 = (void **)(v25 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_29:
              v15 = v25;
              v16 = 0x1020C405E66F15BLL;
              goto LABEL_45;
            }
            break;
          case 8:
            v29 = *(unint64_t **)v10;
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              v32 = *(unint64_t **)v10;
              if (!*(_QWORD *)v10)
                goto LABEL_46;
              boost::detail::shared_count::~shared_count((unsigned int **)v32 + 2);
              v15 = v32;
              v33 = -235920773;
              goto LABEL_44;
            }
            break;
          case 9:
            v34 = *(unint64_t **)v10;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v37 = *(unint64_t **)v10;
              if (*(_QWORD *)v10)
              {
                v38 = (void *)v37[6];
                if (v38)
                {
                  v37[7] = (unint64_t)v38;
                  operator delete(v38);
                }
                v39 = (void *)v37[3];
                if (v39)
                {
                  v37[4] = (unint64_t)v39;
                  operator delete(v39);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v37 + 1));
                v15 = v37;
                v33 = 2071181815;
LABEL_44:
                v16 = v33 | 0x1030C4000000000;
LABEL_45:
                MEMORY[0x219A19A08](v15, v16);
              }
LABEL_46:
              *(_QWORD *)v10 = 0;
            }
            break;
          default:
            break;
        }
        v40 = *(_QWORD *)v9;
        *(_QWORD *)(v10 + 5) = *(_QWORD *)(v9 + 5);
        *(_QWORD *)v10 = v40;
        *(_BYTE *)(v10 + 12) = *(_BYTE *)(v9 + 12);
        *(_BYTE *)(v9 + 12) = 0;
        v7 = *a2;
        v6 = a2[1];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 4);
  }
}

uint64_t turi::sarray_iterator<std::pair<std::vector<turi::flexible_type>,std::string>>::operator++(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *(uint64_t **)a1;
  if (v2[11] >= (unint64_t)v2[9])
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 72);
    turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::clear(v2);
  }
  else
  {
    v3 = turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::next(v2);
    std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1 + 16, v3);
    ++*(_QWORD *)(a1 + 64);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *,false>(char *a1, char *a2, _QWORD *a3, uint64_t a4, char a5, __n128 a6)
{
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __int128 v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  char v29;
  BOOL v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 __p;
  uint64_t v18;
  void **v19;

  if ((_QWORD *)a1 != a2)
  {
    v6 = (_QWORD *)(a1 + 48);
    if ((_QWORD *)(a1 + 48) != a2)
    {
      v8 = 0;
      v9 = (_QWORD *)a1;
      do
      {
        v10 = v6;
        if (turi::query_eval::less_than_full_function::compare(a3, v6, v9, a4))
        {
          v15 = *(_OWORD *)v10;
          v16 = v9[8];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          __p = *(_OWORD *)(v9 + 9);
          v18 = v9[11];
          v9[10] = 0;
          v9[11] = 0;
          v11 = v8;
          v9[9] = 0;
          while (1)
          {
            std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1 + v11 + 48, a1 + v11);
            if (!v11)
              break;
            v13 = turi::query_eval::less_than_full_function::compare(a3, &v15, (_QWORD *)(a1 + v11 - 48), v12);
            v11 -= 48;
            if ((v13 & 1) == 0)
            {
              v14 = a1 + v11 + 48;
              goto LABEL_10;
            }
          }
          v14 = a1;
LABEL_10:
          std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v14, (uint64_t)&v15);
          if (SHIBYTE(v18) < 0)
            operator delete((void *)__p);
          v19 = (void **)&v15;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
        }
        v6 = v10 + 6;
        v8 += 48;
        v9 = v10;
      }
      while (v10 + 6 != a2);
    }
  }
}

void sub_2180A93DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::vector<turi::flexible_type>,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;
  __n128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 __p;
  uint64_t v13;
  void **v14;

  if ((_QWORD *)a1 != a2)
  {
    v5 = a1;
    v6 = (_QWORD *)(a1 + 48);
    if ((_QWORD *)(a1 + 48) != a2)
    {
      do
      {
        v8 = v6;
        if (turi::query_eval::less_than_full_function::compare(a3, v6, (_QWORD *)v5, a4))
        {
          v10 = *(_OWORD *)v8;
          v11 = *(_QWORD *)(v5 + 64);
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          __p = *(_OWORD *)(v5 + 72);
          v13 = *(_QWORD *)(v5 + 88);
          *(_QWORD *)(v5 + 80) = 0;
          *(_QWORD *)(v5 + 88) = 0;
          *(_QWORD *)(v5 + 72) = 0;
          do
          {
            std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v5 + 48, v5);
            v5 -= 48;
          }
          while ((turi::query_eval::less_than_full_function::compare(a3, &v10, (_QWORD *)v5, v9) & 1) != 0);
          std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v5 + 48, (uint64_t)&v10);
          if (SHIBYTE(v13) < 0)
            operator delete((void *)__p);
          v14 = (void **)&v10;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
        }
        v6 = v8 + 6;
        v5 = (uint64_t)v8;
      }
      while (v8 + 6 != a2);
    }
  }
}

void sub_2180A94EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::vector<turi::flexible_type>,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, __n128 a5)
{
  char v9;
  __n128 v10;
  uint64_t result;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v9 = turi::query_eval::less_than_full_function::compare(a4, a2, a1, a5);
  result = turi::query_eval::less_than_full_function::compare(a4, a3, a2, v10);
  if ((v9 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v19 = *a2;
    *a2 = *a3;
    *a3 = v19;
    v20 = a2[1];
    a2[1] = a3[1];
    a3[1] = v20;
    v21 = a2[2];
    a2[2] = a3[2];
    a3[2] = v21;
    v22 = a2[5];
    v23 = *(__n128 *)(a2 + 3);
    v24 = a3[5];
    *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 3);
    a2[5] = v24;
    *(__n128 *)(a3 + 3) = v23;
    a3[5] = v22;
    if (!turi::query_eval::less_than_full_function::compare(a4, a2, a1, v23))
      return 1;
    v25 = *a1;
    *a1 = *a2;
    *a2 = v25;
    v26 = a1[1];
    a1[1] = a2[1];
    a2[1] = v26;
    v27 = a1[2];
    a1[2] = a2[2];
    a2[2] = v27;
    v28 = a1[5];
    v29 = *(_OWORD *)(a1 + 3);
    v30 = a2[5];
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    a1[5] = v30;
    *(_OWORD *)(a2 + 3) = v29;
    a2[5] = v28;
    return 2;
  }
  v12 = (__n128 *)(a1 + 3);
  v13 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v13;
    v31 = a1[1];
    a1[1] = a2[1];
    a2[1] = v31;
    v32 = a1[2];
    a1[2] = a2[2];
    a2[2] = v32;
    v33 = a1[5];
    v34 = *v12;
    v35 = a2[5];
    *v12 = *(__n128 *)(a2 + 3);
    a1[5] = v35;
    *(__n128 *)(a2 + 3) = v34;
    a2[5] = v33;
    if (!turi::query_eval::less_than_full_function::compare(a4, a3, a2, v34))
      return 1;
    v36 = *a2;
    *a2 = *a3;
    *a3 = v36;
    v37 = a2[1];
    a2[1] = a3[1];
    a3[1] = v37;
    v38 = a2[2];
    a2[2] = a3[2];
    a3[2] = v38;
    v39 = a2[5];
    v40 = *(_OWORD *)(a2 + 3);
    v41 = a3[5];
    *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 3);
    a2[5] = v41;
    *(_OWORD *)(a3 + 3) = v40;
    a3[5] = v39;
    return 2;
  }
  *a1 = *a3;
  *a3 = v13;
  v14 = a1[1];
  a1[1] = a3[1];
  a3[1] = v14;
  v15 = a1[2];
  a1[2] = a3[2];
  a3[2] = v15;
  v16 = a1[5];
  v17 = *v12;
  v18 = a3[5];
  *v12 = *(__n128 *)(a3 + 3);
  a1[5] = v18;
  *(__n128 *)(a3 + 3) = v17;
  a3[5] = v16;
  return 1;
}

_QWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::vector<turi::flexible_type>,std::string> *,turi::query_eval::less_than_full_function &>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  __n128 v6;
  __n128 v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  void *__p[2];
  uint64_t v21;
  void **v22;

  v4 = a2;
  v18 = *(_OWORD *)a1;
  v19 = *(_QWORD *)(a1 + 16);
  v6 = *(__n128 *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(__n128 *)__p = v6;
  v21 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if ((turi::query_eval::less_than_full_function::compare(a3, &v18, (_QWORD *)(a2 - 48), v6) & 1) != 0)
  {
    v8 = (_QWORD *)a1;
    do
      v8 += 6;
    while ((turi::query_eval::less_than_full_function::compare(a3, &v18, v8, v7) & 1) == 0);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 48);
    do
    {
      v8 = v9;
      if ((unint64_t)v9 >= v4)
        break;
      v10 = turi::query_eval::less_than_full_function::compare(a3, &v18, v9, v7);
      v9 = v8 + 6;
    }
    while (!v10);
  }
  if ((unint64_t)v8 < v4)
  {
    do
      v4 -= 48;
    while ((turi::query_eval::less_than_full_function::compare(a3, &v18, (_QWORD *)v4, v7) & 1) != 0);
  }
  while ((unint64_t)v8 < v4)
  {
    v11 = *v8;
    *v8 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v11;
    v12 = v8[1];
    v8[1] = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v12;
    v13 = v8[2];
    v8[2] = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v13;
    v14 = v8[5];
    v15 = *(__n128 *)(v8 + 3);
    v16 = *(_QWORD *)(v4 + 40);
    *(_OWORD *)(v8 + 3) = *(_OWORD *)(v4 + 24);
    v8[5] = v16;
    *(__n128 *)(v4 + 24) = v15;
    *(_QWORD *)(v4 + 40) = v14;
    do
      v8 += 6;
    while (!turi::query_eval::less_than_full_function::compare(a3, &v18, v8, v15));
    do
      v4 -= 48;
    while ((turi::query_eval::less_than_full_function::compare(a3, &v18, (_QWORD *)v4, v15) & 1) != 0);
  }
  if (v8 - 6 != (_QWORD *)a1)
    std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1, (uint64_t)(v8 - 6));
  std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100]((uint64_t)(v8 - 6), (uint64_t)&v18);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v22 = (void **)&v18;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v22);
  return v8;
}

void sub_2180A98F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::vector<turi::flexible_type>,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::vector<turi::flexible_type>,std::string> *,turi::query_eval::less_than_full_function &>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  __n128 v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  void **v24;

  v6 = 0;
  v21 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 40);
  v20 = *(_OWORD *)a1;
  v7 = *(__n128 *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(__n128 *)__p = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  do
  {
    v8 = turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(a1 + v6 + 48), &v20, v7);
    v6 += 48;
  }
  while ((v8 & 1) != 0);
  v9 = a1 + v6;
  if (v6 == 48)
  {
    do
    {
      if (v9 >= (unint64_t)a2)
        break;
      a2 -= 6;
    }
    while ((turi::query_eval::less_than_full_function::compare(a3, a2, &v20, v7) & 1) == 0);
  }
  else
  {
    do
      a2 -= 6;
    while (!turi::query_eval::less_than_full_function::compare(a3, a2, &v20, v7));
  }
  if (v9 >= (unint64_t)a2)
  {
    v18 = v9 - 48;
  }
  else
  {
    v10 = a1 + v6;
    v11 = a2;
    do
    {
      v12 = *(_QWORD *)v10;
      *(_QWORD *)v10 = *v11;
      *v11 = v12;
      v13 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v11[1];
      v11[1] = v13;
      v14 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 16) = v11[2];
      v11[2] = v14;
      v15 = *(_QWORD *)(v10 + 40);
      v16 = *(__n128 *)(v10 + 24);
      v17 = v11[5];
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 3);
      *(_QWORD *)(v10 + 40) = v17;
      *(__n128 *)(v11 + 3) = v16;
      v11[5] = v15;
      do
        v10 += 48;
      while ((turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)v10, &v20, v16) & 1) != 0);
      do
        v11 -= 6;
      while (!turi::query_eval::less_than_full_function::compare(a3, v11, &v20, v16));
    }
    while (v10 < (unint64_t)v11);
    v18 = v10 - 48;
  }
  if (v18 != a1)
    std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1, v18);
  std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v18, (uint64_t)&v20);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  v24 = (void **)&v20;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
  return v18;
}

void sub_2180A9ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::vector<turi::flexible_type>,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, uint64_t a2, _QWORD *a3, __n128 a4)
{
  unint64_t v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __n128 v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 __p;
  uint64_t v28;
  void **v29;

  v7 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v7)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)(a2 - 48), (_QWORD *)a1, a4))
      {
        v9 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 48);
        *(_QWORD *)(a2 - 48) = v9;
        v10 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 40);
        *(_QWORD *)(a2 - 40) = v10;
        v11 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 32);
        *(_QWORD *)(a2 - 32) = v11;
        v12 = *(_QWORD *)(a1 + 40);
        v13 = *(_OWORD *)(a1 + 24);
        v14 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 40) = v14;
        *(_OWORD *)(a2 - 24) = v13;
        *(_QWORD *)(a2 - 8) = v12;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a2 - 48), a3, a4);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(a1, a1 + 48, a1 + 96, a2 - 48, a3, a4);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3, a4);
      return 1;
    default:
      v15 = (_QWORD *)(a1 + 96);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96), a3, a4);
      v17 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    if (turi::query_eval::less_than_full_function::compare(a3, (_QWORD *)v17, v15, v16))
    {
      v25 = *(_OWORD *)v17;
      v26 = *(_QWORD *)(v17 + 16);
      v20 = *(_OWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      __p = v20;
      v28 = *(_QWORD *)(v17 + 40);
      v21 = v18;
      *(_QWORD *)(v17 + 32) = 0;
      *(_QWORD *)(v17 + 40) = 0;
      while (1)
      {
        std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1 + v21 + 144, a1 + v21 + 96);
        if (v21 == -96)
          break;
        v23 = turi::query_eval::less_than_full_function::compare(a3, &v25, (_QWORD *)(a1 + v21 + 48), v22);
        v21 -= 48;
        if ((v23 & 1) == 0)
        {
          v24 = a1 + v21 + 144;
          goto LABEL_12;
        }
      }
      v24 = a1;
LABEL_12:
      std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v24, (uint64_t)&v25);
      if (SHIBYTE(v28) < 0)
        operator delete((void *)__p);
      ++v19;
      v29 = (void **)&v25;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v29);
      if (v19 == 8)
        return v17 + 48 == a2;
    }
    v15 = (_QWORD *)v17;
    v18 += 48;
    v17 += 48;
    if (v17 == a2)
      return 1;
  }
}

void sub_2180A9D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::vector<turi::flexible_type>,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, __n128 a6)
{
  __n128 v11;
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3, a5, a6);
  if (turi::query_eval::less_than_full_function::compare(a5, (_QWORD *)a4, (_QWORD *)a3, v11))
  {
    v13 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v13;
    v14 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v14;
    v15 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v15;
    v16 = *(_QWORD *)(a3 + 40);
    v17 = *(__n128 *)(a3 + 24);
    v18 = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 40) = v18;
    *(__n128 *)(a4 + 24) = v17;
    *(_QWORD *)(a4 + 40) = v16;
    if (turi::query_eval::less_than_full_function::compare(a5, (_QWORD *)a3, (_QWORD *)a2, v17))
    {
      v19 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v19;
      v20 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v20;
      v21 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v21;
      v22 = *(_QWORD *)(a2 + 40);
      v23 = *(__n128 *)(a2 + 24);
      v24 = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a2 + 40) = v24;
      *(__n128 *)(a3 + 24) = v23;
      *(_QWORD *)(a3 + 40) = v22;
      if (turi::query_eval::less_than_full_function::compare(a5, (_QWORD *)a2, (_QWORD *)a1, v23))
      {
        v25 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v25;
        v26 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v26;
        v27 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v27;
        v28 = *(_QWORD *)(a1 + 40);
        result = *(__n128 *)(a1 + 24);
        v29 = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = v29;
        *(__n128 *)(a2 + 24) = result;
        *(_QWORD *)(a2 + 40) = v28;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, __n128 a7)
{
  __n128 v13;
  __n128 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v13 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(a1, a2, a3, a4, a6, a7);
  if (turi::query_eval::less_than_full_function::compare(a6, (_QWORD *)a5, (_QWORD *)a4, v13))
  {
    v15 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v15;
    v16 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v16;
    v17 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 16) = v17;
    v18 = *(_QWORD *)(a4 + 40);
    v19 = *(__n128 *)(a4 + 24);
    v20 = *(_QWORD *)(a5 + 40);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(_QWORD *)(a4 + 40) = v20;
    *(__n128 *)(a5 + 24) = v19;
    *(_QWORD *)(a5 + 40) = v18;
    if (turi::query_eval::less_than_full_function::compare(a6, (_QWORD *)a4, (_QWORD *)a3, v19))
    {
      v21 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v21;
      v22 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v22;
      v23 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = v23;
      v24 = *(_QWORD *)(a3 + 40);
      v25 = *(__n128 *)(a3 + 24);
      v26 = *(_QWORD *)(a4 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(_QWORD *)(a3 + 40) = v26;
      *(__n128 *)(a4 + 24) = v25;
      *(_QWORD *)(a4 + 40) = v24;
      if (turi::query_eval::less_than_full_function::compare(a6, (_QWORD *)a3, (_QWORD *)a2, v25))
      {
        v27 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v27;
        v28 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v28;
        v29 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v29;
        v30 = *(_QWORD *)(a2 + 40);
        v31 = *(__n128 *)(a2 + 24);
        v32 = *(_QWORD *)(a3 + 40);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(_QWORD *)(a2 + 40) = v32;
        *(__n128 *)(a3 + 24) = v31;
        *(_QWORD *)(a3 + 40) = v30;
        if (turi::query_eval::less_than_full_function::compare(a6, (_QWORD *)a2, (_QWORD *)a1, v31))
        {
          v33 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v33;
          v34 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v34;
          v35 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = v35;
          v36 = *(_QWORD *)(a1 + 40);
          result = *(__n128 *)(a1 + 24);
          v37 = *(_QWORD *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 40) = v37;
          *(__n128 *)(a2 + 24) = result;
          *(_QWORD *)(a2 + 40) = v36;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *,std::pair<std::vector<turi::flexible_type>,std::string> *>(char *a1, char *a2, uint64_t a3, _QWORD *a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;

  if (a1 != a2)
  {
    v7 = (uint64_t)a2;
    v9 = a2 - a1;
    v10 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (uint64_t)&a1[48 * v11];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)a1, a4, v10, v13, a5);
        v13 -= 48;
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = (__n128 *)(a1 + 24);
      v16 = v7;
      do
      {
        if (turi::query_eval::less_than_full_function::compare(a4, (_QWORD *)v16, a1, a5))
        {
          v17 = *(_QWORD *)v16;
          *(_QWORD *)v16 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v17;
          v18 = *(_QWORD *)(v16 + 8);
          *(_QWORD *)(v16 + 8) = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v18;
          v19 = *(_QWORD *)(v16 + 16);
          *(_QWORD *)(v16 + 16) = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 2) = v19;
          v20 = *(_QWORD *)(v16 + 40);
          v21 = *(__n128 *)(v16 + 24);
          v22 = *((_QWORD *)a1 + 5);
          *(__n128 *)(v16 + 24) = *v15;
          *(_QWORD *)(v16 + 40) = v22;
          *v15 = v21;
          *((_QWORD *)a1 + 5) = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)a1, a4, v10, (uint64_t)a1, v21);
        }
        v16 += 48;
      }
      while (v16 != a3);
      v14 = a3;
    }
    if (v9 >= 49)
    {
      v23 = v9 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function,std::pair<std::vector<turi::flexible_type>,std::string> *>((uint64_t)a1, v7, a4, v23);
        v7 -= 48;
      }
      while (v23-- > 2);
    }
    return v14;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void *__p[2];
  uint64_t v21;
  void **v22;

  v5 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = a4;
    v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 4)))
    {
      v11 = (0x5555555555555556 * ((a4 - a1) >> 4)) | 1;
      v12 = (_QWORD *)(a1 + 48 * v11);
      v13 = 0x5555555555555556 * ((a4 - a1) >> 4) + 2;
      if (v13 < a3
        && turi::query_eval::less_than_full_function::compare(a2, (_QWORD *)(a1 + 48 * v11), v12 + 6, a5))
      {
        v12 += 6;
        v11 = v13;
      }
      if ((turi::query_eval::less_than_full_function::compare(a2, v12, (_QWORD *)v6, a5) & 1) == 0)
      {
        v18 = *(_OWORD *)v6;
        v19 = *(_QWORD *)(v6 + 16);
        v14 = *(_OWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 16) = 0;
        *(_QWORD *)(v6 + 24) = 0;
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        *(_OWORD *)__p = v14;
        v21 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 32) = 0;
        *(_QWORD *)(v6 + 40) = 0;
        do
        {
          v15 = (uint64_t)v12;
          std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v6, (uint64_t)v12);
          if (v8 < v11)
            break;
          v17 = (2 * v11) | 1;
          v12 = (_QWORD *)(a1 + 48 * v17);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v17;
          }
          else if (turi::query_eval::less_than_full_function::compare(a2, (_QWORD *)(a1 + 48 * v17), v12 + 6, v16))
          {
            v12 += 6;
          }
          else
          {
            v11 = v17;
          }
          v6 = v15;
        }
        while (!turi::query_eval::less_than_full_function::compare(a2, v12, &v18, v16));
        std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v15, (uint64_t)&v18);
        if (SHIBYTE(v21) < 0)
          operator delete(__p[0]);
        v22 = (void **)&v18;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v22);
      }
    }
  }
}

void sub_2180AA3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::vector<turi::flexible_type>,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  __int128 v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  void **v16;

  if (a4 >= 2)
  {
    v12 = *(_OWORD *)a1;
    v13 = *(_QWORD *)(a1 + 16);
    v7 = *(__n128 *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(__n128 *)__p = v7;
    v15 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(a1, a3, a4, v7);
    v9 = v8;
    v10 = a2 - 48;
    if (v8 == v10)
    {
      std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v8, (uint64_t)&v12);
    }
    else
    {
      std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v8, v10);
      std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v10, (uint64_t)&v12);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(a1, v9 + 48, a3, 0xAAAAAAAAAAAAAAABLL * ((v9 + 48 - a1) >> 4), v11);
    }
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    v16 = (void **)&v12;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

void sub_2180AA504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::vector<turi::flexible_type>,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = 0;
  v8 = a3 - 2;
  if (a3 < 2)
    v8 = a3 - 1;
  v9 = v8 >> 1;
  do
  {
    v10 = a1 + 48 * v7 + 48;
    v11 = (2 * v7) | 1;
    v12 = 2 * v7 + 2;
    if (v12 < a3
      && turi::query_eval::less_than_full_function::compare(a2, (_QWORD *)(a1 + 48 * v7 + 48), (_QWORD *)(a1 + 48 * v7 + 96), a4))
    {
      v10 += 48;
      v11 = v12;
    }
    std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](a1, v10);
    a1 = v10;
    v7 = v11;
  }
  while (v11 <= v9);
  return v10;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::query_eval::less_than_full_function &,std::pair<std::vector<turi::flexible_type>,std::string> *>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, __n128 a5)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  __int128 v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  void **v17;

  if (a4 >= 2)
  {
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (_QWORD *)(a1 + 48 * v8);
    v10 = (_QWORD *)(a2 - 48);
    if (turi::query_eval::less_than_full_function::compare(a3, v9, (_QWORD *)(a2 - 48), a5))
    {
      v13 = *(_OWORD *)(a2 - 48);
      v14 = *(_QWORD *)(a2 - 32);
      v10[1] = 0;
      v10[2] = 0;
      *v10 = 0;
      *(_OWORD *)__p = *(_OWORD *)(a2 - 24);
      v16 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      do
      {
        v11 = (uint64_t)v9;
        std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (_QWORD *)(a1 + 48 * v8);
        v10 = (_QWORD *)v11;
      }
      while ((turi::query_eval::less_than_full_function::compare(a3, v9, &v13, v12) & 1) != 0);
      std::pair<std::vector<turi::flexible_type>,std::string>::operator=[abi:ne180100](v11, (uint64_t)&v13);
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      v17 = (void **)&v13;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
    }
  }
}

void sub_2180AA6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::vector<turi::flexible_type>,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0>(unsigned long,unsigned long,turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval14sort_and_mergeERKNSt3__110shared_ptrINS_"
                                        "6sarrayINS2_4pairINS2_6vectorINS_13flexible_typeENS2_9allocatorIS7_EEEENS2_12bas"
                                        "ic_stringIcNS2_11char_traitsIcEENS8_IcEEEEEEEEEERKNS6_IbNS8_IbEEEERKNS6_ImNS8_Im"
                                        "EEEESO_SS_RKNS6_ISF_NS8_ISF_EEEERKNS6_INS_14flex_type_enumENS8_ISX_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval14sort_and_mergeERKNSt3__110shared_ptrINS_6sarrayINS2_4pairINS2_6vectorINS_13flexible_typeENS2_9allocatorIS7_EEEENS2_12basic_stringIcNS2_11char_traitsIcEENS8_IcEEEEEEEEEERKNS6_IbNS8_IbEEEERKNS6_ImNS8_ImEEEESO_SS_RKNS6_ISF_NS8_ISF_EEEERKNS6_INS_14flex_type_enumENS8_ISX_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0>(unsigned long,unsigned long,turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  unint64_t i;

  for (i = a1[1]; i < a1[2]; ++i)
    turi::query_eval::sort_and_merge(std::shared_ptr<turi::sarray<std::pair<std::vector<turi::flexible_type>,std::string>>> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<BOOL> const&,std::vector<unsigned long> const&,std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&)::$_0::operator()(*a1);
}

void __cxx_global_var_init_4_2()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_5()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD3CD0 = 0;
    unk_254FD3CC0 = 0u;
    unk_254FD3CB0 = 0u;
    unk_254FD3CA0 = 0u;
    unk_254FD3C90 = 0u;
    qword_254FD3C88 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sort_and_merge_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::query_eval::execution_node::execution_node(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 74) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  turi::query_eval::execution_node::init((_QWORD *)a1, a2, a3);
  return a1;
}

void sub_2180AA9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::exception_ptr *v13;
  uint64_t *v14;
  void **v15;
  std::exception_ptr *v16;
  void *v18;
  std::__shared_weak_count *v19;

  v16 = v13;
  std::exception_ptr::~exception_ptr(v16);
  v18 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v10 + 104) = v18;
    operator delete(v18);
  }
  std::unique_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>>::reset[abi:ne180100](v14, 0);
  std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v11);
  v19 = *(std::__shared_weak_count **)(v10 + 8);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::execution_node::init(_QWORD *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t *v37;
  _QWORD *v38;

  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a1 + 2, a2);
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[2] + 16))(a1[2]);
  turi::query_eval::planner_node_type_to_attributes(v5);
  v7 = *a3;
  if ((v6 & 0x80000000) != 0)
  {
    v8 = a3[1];
  }
  else
  {
    v8 = a3[1];
    v30 = ((char *)v8 - (char *)v7) >> 4;
    v33 = v6;
    if (v30 != v6)
    {
      v34 = &v30;
      v35 = &v33;
      turi::query_eval::execution_node::init(std::shared_ptr<turi::query_eval::query_operator> const&,std::vector<std::shared_ptr<turi::query_eval::execution_node>> const&)::$_0::operator()();
    }
  }
  if (v7 != v8)
  {
    v9 = a1 + 6;
    do
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v30, v7);
      v10 = turi::query_eval::execution_node::register_consumer((turi::query_eval::execution_node *)*v7);
      v32 = v10;
      v11 = (uint64_t *)a1[7];
      v12 = a1[8];
      if ((unint64_t)v11 >= v12)
      {
        v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *v9) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *v9) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v18;
        v38 = a1 + 8;
        if (v20)
          v21 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(a1 + 8), v20);
        else
          v21 = 0;
        v22 = &v21[3 * v17];
        v34 = v21;
        v35 = v22;
        v37 = &v21[3 * v20];
        *v22 = v30;
        v23 = v31;
        v22[1] = (uint64_t)v31;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        v21[3 * v17 + 2] = v32;
        v36 = v22 + 3;
        std::vector<turi::query_eval::execution_node::input_node>::__swap_out_circular_buffer(a1 + 6, &v34);
        v16 = (_QWORD *)a1[7];
        std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((uint64_t)&v34);
      }
      else
      {
        *v11 = v30;
        v13 = v31;
        v11[1] = (uint64_t)v31;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v10 = v32;
        }
        v11[2] = v10;
        v16 = v11 + 3;
      }
      a1[7] = v16;
      v26 = v31;
      if (v31)
      {
        v27 = (unint64_t *)&v31->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v7 += 2;
    }
    while (v7 != v8);
  }
  return turi::query_eval::execution_node::reset((turi::query_eval::execution_node *)a1);
}

void sub_2180AAC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((uint64_t)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::query_eval::execution_node::init(std::shared_ptr<turi::query_eval::query_operator> const&,std::vector<std::shared_ptr<turi::query_eval::execution_node>> const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inputs.size()", 13);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(size_t)num_inputs", 18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", "operator()", 27, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::execution_node::init(std::shared_ptr<turi::query_eval::query_operator> const&,std::vector<std::shared_ptr<turi::query_eval::execution_node>> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180AAE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::execution_node::register_consumer(turi::query_eval::execution_node *this)
{
  char *v2;
  unint64_t v3;
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v2 = (char *)this + 112;
  v3 = *((_QWORD *)this + 14);
  v4 = (char *)*((_QWORD *)this + 13);
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)*((_QWORD *)this + 12);
    v7 = (v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = v3 - (_QWORD)v6;
    v9 = (uint64_t)(v3 - (_QWORD)v6) >> 2;
    if (v9 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v2, v10);
      v6 = (char *)*((_QWORD *)this + 12);
      v4 = (char *)*((_QWORD *)this + 13);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = 0;
    v5 = v12 + 8;
    while (v4 != v6)
    {
      v14 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *((_QWORD *)v12 - 1) = v14;
      v12 -= 8;
    }
    *((_QWORD *)this + 12) = v12;
    *((_QWORD *)this + 13) = v5;
    *((_QWORD *)this + 14) = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v4 = 0;
    v5 = v4 + 8;
  }
  *((_QWORD *)this + 13) = v5;
  return (((uint64_t)v5 - *((_QWORD *)this + 12)) >> 3) - 1;
}

uint64_t turi::query_eval::execution_node::reset(turi::query_eval::execution_node *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  std::exception_ptr v7;

  if (*((_BYTE *)this + 88))
  {
    v2 = (uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    v7.__ptr_ = 0;
    std::vector<unsigned long>::assign((char **)this + 12, v2, &v7);
    *((_BYTE *)this + 88) = 0;
    v3 = *((_QWORD *)this + 6);
    if (*((_QWORD *)this + 7) != v3)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        turi::query_eval::execution_node::reset(*(turi::query_eval::execution_node **)(v3 + v4));
        ++v5;
        v3 = *((_QWORD *)this + 6);
        v4 += 24;
      }
      while (v5 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 7) - v3) >> 3));
    }
    *((_BYTE *)this + 120) = 0;
    v7.__ptr_ = 0;
    std::exception_ptr::operator=((std::exception_ptr *)this + 16, &v7);
    std::exception_ptr::~exception_ptr(&v7);
  }
  return std::unique_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>>::reset[abi:ne180100]((uint64_t *)this + 9, 0);
}

char *std::vector<unsigned long>::assign(char **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 3;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 3;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_QWORD *)v16 = *a3;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[8 * a2];
    }
    else
    {
      v17 = &v13[8 * (a2 - v14)];
      v18 = 8 * a2 - 8 * v14;
      do
      {
        *(_QWORD *)v13 = *a3;
        v13 += 8;
        v18 -= 8;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[8 * a2];
    v12 = 8 * a2;
    do
    {
      *(_QWORD *)v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

uint64_t std::unique_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::~broadcast_queue(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void turi::query_eval::execution_node::start_coroutines(turi::query_eval::execution_node *this)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  turi::query_eval::execution_node *v8;
  __int128 v9;

  v2 = operator new();
  turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::broadcast_queue(v2, (uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3, 2);
  std::unique_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>>::reset[abi:ne180100]((uint64_t *)this + 9, v2);
  *((_BYTE *)this + 88) = 1;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  v4 = turi::query_eval::planner_node_type_to_attributes(v3);
  *((_BYTE *)this + 136) = HIBYTE(v4) & 1;
  *((_BYTE *)this + 137) = v4 & 1;
  v8 = this;
  std::allocate_shared[abi:ne180100]<turi::query_eval::query_context,std::allocator<turi::query_eval::query_context>,turi::query_eval::execution_node *,unsigned long &,void>(&v8, (unint64_t *)&turi::sframe_config::SFRAME_READ_BATCH_SIZE, &v9);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)this + 32, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180AB2B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B2C408A395E1ALL);
  _Unwind_Resume(a1);
}

void turi::query_eval::execution_node::get_next(int64x2_t **this@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  int64x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *exception;
  __int128 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if (cppipc::must_cancel((cppipc *)this))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Canceled by user";
    __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
  }
  *((_BYTE *)this + 89) = a3;
  while (!*((_BYTE *)this + 88))
  {
LABEL_7:
    turi::query_eval::execution_node::start_coroutines((turi::query_eval::execution_node *)this);
LABEL_8:
    if (*((_BYTE *)this + 89) && !*((_BYTE *)this + 136) && *((_BYTE *)this + 137))
    {
      if (this[7] != this[6])
      {
        v11 = 0;
        do
        {
          turi::query_eval::execution_node::get_next_from_input(&v23, (turi::query_eval::execution_node *)this, v11, 1);
          v12 = v24;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          ++v11;
        }
        while (v11 < 0xAAAAAAAAAAAAAAABLL * (((char *)this[7] - (char *)this[6]) >> 3));
      }
      v22 = 0uLL;
      turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::push(this[9], &v22);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      if (*((_QWORD *)&v22 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
      (*(void (**)(int64x2_t *, int64x2_t *))(this[2]->i64[0] + 48))(this[2], this[4]);
    }
  }
  v8 = this[9];
  v9 = *(_QWORD *)(v8[10].i64[1] + 40 * a2 + 32);
  v10 = v8[12].i64[0];
  if (v9 != v10)
    goto LABEL_26;
  if (((*(uint64_t (**)(int64x2_t *))(this[2]->i64[0] + 24))(this[2]) & 1) != 0)
  {
    if (*((_BYTE *)this + 88))
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = this[9];
  v9 = *(_QWORD *)(v8[10].i64[1] + 40 * a2 + 32);
  v10 = v8[12].i64[0];
LABEL_26:
  if (v9 == v10)
  {
    if ((*(unsigned int (**)(int64x2_t *))(this[2]->i64[0] + 24))(this[2]))
    {
      v8 = this[9];
      v9 = *(_QWORD *)(v8[10].i64[1] + 40 * a2 + 32);
      v10 = v8[12].i64[0];
      goto LABEL_29;
    }
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
LABEL_29:
    if (v9 == v10)
      turi::query_eval::execution_node::get_next(unsigned long,BOOL)::$_0::operator()();
    v22 = 0uLL;
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop(v8, a2, (uint64_t ****)&v22);
    ++this[12]->i64[a2];
    if ((a3 & 1) != 0)
    {
      *a4 = 0;
      a4[1] = 0;
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      if (*((_QWORD *)&v22 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    else
    {
      *(_OWORD *)a4 = v22;
    }
  }
}

void sub_2180AB5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::execution_node::get_next_from_input(turi::query_eval::execution_node *this, unint64_t a2, BOOL a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 6);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 7) - v3) >> 3) <= a2)
    turi::query_eval::execution_node::get_next_from_input(unsigned long,BOOL)::$_0::operator()();
  return turi::query_eval::execution_node::get_next(*(turi::query_eval::execution_node **)(v3 + 24 * a2), *(_QWORD *)(v3 + 24 * a2 + 16), a3);
}

void turi::query_eval::execution_node::add_operator_output(uint64_t a1, __int128 *a2)
{
  turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::push(*(int64x2_t **)(a1 + 72), a2);
}

void turi::query_eval::execution_node::get_next(unsigned long,BOOL)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!m_output_queue->empty(consumer_id)", 35);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", "operator()", 133, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::execution_node::get_next(unsigned long,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180AB730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop(_QWORD *a1, uint64_t a2, uint64_t ****a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = a1[21];
  v7 = (_QWORD *)(v6 + 40 * a2);
  v8 = *v7;
  if (*v7)
  {
    while (1)
    {
      v9 = v6 + 40 * a2;
      v11 = *(_QWORD *)(v9 + 24);
      v10 = (_QWORD *)(v9 + 24);
      if (v11 < *(_QWORD *)(v8 + 24))
        break;
      if (!*(_QWORD *)(v8 + 56) && a1[12])
      {
        turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flip_queues((uint64_t)a1);
        v8 = *v7;
      }
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v7, (uint64_t *)(v8 + 56));
      *v10 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)(a1[4] + ((a1[7] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a1[7] + 8);
      if (v12)
      {
        if (!*(_QWORD *)(v12 + 8))
          turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::release_pop_queue_front((uint64_t)a1);
      }
      v6 = a1[21];
      v7 = (_QWORD *)(v6 + 40 * a2);
      v8 = *v7;
      if (!*v7)
        goto LABEL_10;
    }
    std::istream::seekg();
    v18 = *(_QWORD *)(*v7 + 32);
    v19 = 0u;
    v20 = 0u;
    turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>::load((uint64_t)(a1 + 2), (turi::iarchive *)&v18, a3);
    std::istream::tellg();
    *v10 = v21;
  }
  else
  {
LABEL_10:
    v13 = v6 + 40 * a2;
    v16 = *(_QWORD *)(v13 + 16);
    v15 = (_QWORD *)(v13 + 16);
    v14 = v16;
    if (a1[19] <= v16)
      return 0;
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a3, (uint64_t *)(*(_QWORD *)(a1[15] + (((a1[18] + v14) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*((_BYTE *)a1 + 144) + v14)));
    ++*v15;
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::trim_push_queue(a1);
  }
  ++*(_QWORD *)(v6 + 40 * a2 + 32);
  return 1;
}

void turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::push(int64x2_t *a1, __int128 *a2)
{
  int64x2_t *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v3 = a1 + 7;
  std::deque<std::shared_ptr<turi::sframe_rows>>::push_back((int64x2_t *)a1[7].i64, a2);
  v4 = a1[10].i64[0] + 1;
  a1[10].i64[0] = v4;
  ++a1[12].i64[0];
  v5 = a1[6].i64[0];
  if (v5)
  {
    v6 = (_QWORD *)a1[10].i64[1];
    v7 = (_QWORD *)a1[11].i64[0];
    if (v6 == v7)
      goto LABEL_8;
    while (*v6 || v6[2] != 0)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_8;
    }
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flip_queues((uint64_t)a1);
    v5 = a1[6].i64[0];
    if (v5)
    {
LABEL_8:
      v12 = v5;
      v13 = 0u;
      v14 = 0u;
      v15 = 0;
      turi::sframe_rows::save(*(turi::sframe_rows **)(*(_QWORD *)(a1[7].i64[1] + (((unint64_t)a1[9].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * a1[9].i64[0]), (turi::oarchive *)&v12);
      std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::pop_front(v3);
      v9 = (_QWORD *)a1[10].i64[1];
      v10 = (_QWORD *)a1[11].i64[0];
      while (v9 != v10)
      {
        if (!*v9)
          --v9[2];
        v9 += 5;
      }
      return;
    }
    v4 = a1[10].u64[0];
  }
  v11 = a1->i64[0];
  if (v4 >= 2 * a1->i64[0])
  {
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::trim_push_queue(a1);
    v4 = a1[10].u64[0];
    v11 = a1->i64[0];
  }
  if (v4 >= 2 * v11)
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flush_push_queue((uint64_t)a1);
}

void turi::query_eval::execution_node::get_next_from_input(unsigned long,BOOL)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input_id", 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_inputs.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/execution_node.cpp", "operator()", 148, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::execution_node::get_next_from_input(unsigned long,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180ABC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<turi::query_eval::execution_node::input_node>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *v2 = 0;
    v2[1] = 0;
    *(_QWORD *)(v4 + 16) = v2[2];
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::~broadcast_queue(uint64_t a1)
{
  void **v3;

  turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::reset(a1);
  std::deque<std::string>::~deque[abi:ne180100]((_QWORD *)(a1 + 200));
  v3 = (void **)(a1 + 168);
  std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100]((_QWORD *)(a1 + 112));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 96);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100]((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::reset(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *(_QWORD *)(a1 + 176);
  v3 = *(_QWORD *)(a1 + 168);
  while (v2 != v3)
    v2 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2 - 40);
  *(_QWORD *)(a1 + 176) = v3;
  while (*(_QWORD *)(a1 + 64))
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::release_pop_queue_front(a1);
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)(a1 + 96));
  v4 = *(char *)(a1 + 95);
  if ((v4 & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 95))
      goto LABEL_10;
    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 80))
  {
LABEL_9:
    turi::fileio::delete_path(a1 + 72, 3);
    LOBYTE(v4) = *(_BYTE *)(a1 + 95);
  }
LABEL_10:
  if ((v4 & 0x80) != 0)
  {
    **(_BYTE **)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 95) = 0;
  }
  return turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::delete_all_cache_files(a1);
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::push_queue::~push_queue(uint64_t a1)
{
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100]((_QWORD *)(a1 + 40));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::release_pop_queue_front(uint64_t a1)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((*(_QWORD *)(a1 + 56) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * *(_QWORD *)(a1 + 56));
  v3 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                + ((*(_QWORD *)(a1 + 56) >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * *(_QWORD *)(a1 + 56)
                                    + 8);
  if (*((_QWORD *)&v2 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v2 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = v2;
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)(v2 + 32));
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_BYTE *)(v6 + 23))
  {
LABEL_8:
    std::deque<std::string>::push_back((_QWORD *)(a1 + 200), (__int128 *)v6);
    LOBYTE(v7) = *(_BYTE *)(v6 + 23);
  }
LABEL_9:
  if ((v7 & 0x80) != 0)
  {
    **(_BYTE **)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 23) = 0;
  }
  std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::pop_front((int64x2_t *)(a1 + 24));
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2180AC04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::delete_all_cache_files(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_QWORD *)(result + 240))
  {
    v1 = (_QWORD *)result;
    v2 = (_QWORD *)(result + 200);
    do
    {
      turi::fileio::delete_path(*(_QWORD *)(v1[26] + 8 * (v1[29] / 0xAAuLL)) + 24 * (v1[29] % 0xAAuLL), 3);
      result = std::deque<std::string>::pop_front(v2);
    }
    while (v1[30]);
  }
  return result;
}

uint64_t std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::pop_front(int64x2_t *a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * a1[2].i64[0]);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2186CA040);
  return std::deque<std::pair<_opaque_pthread_t *,char const*>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

void std::deque<std::string>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  __int128 v9;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::string>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (std::string *)(*(_QWORD *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  ++a1[5];
}

void std::deque<std::string>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2180AC4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::broadcast_queue(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::vector((_QWORD *)(a1 + 168), a2);
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  if (!*(_QWORD *)a1)
    *(_QWORD *)a1 = 1;
  return a1;
}

void sub_2180AC5FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::push_queue::~push_queue(v1 + 72);
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2180AC6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::consumer>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::query_context,std::allocator<turi::query_eval::query_context>,turi::query_eval::execution_node *,unsigned long &,void>@<X0>(turi::query_eval::execution_node **a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x38uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::query_context>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::execution_node *,unsigned long &,std::allocator<turi::query_eval::query_context>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2180AC754(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::query_context>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::execution_node *,unsigned long &,std::allocator<turi::query_eval::query_context>,0>(_QWORD *a1, turi::query_eval::execution_node **a2, unint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24D92D198;
  a1[1] = 0;
  turi::query_eval::query_context::query_context((turi::query_eval::query_context *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_2180AC7A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::query_context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::query_context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::query_eval::query_context>::__on_zero_shared(uint64_t a1)
{
  turi::query_eval::query_context::~query_context((turi::query_eval::query_context *)(a1 + 24));
}

void turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flip_queues(uint64_t a1)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;

  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)(a1 + 96));
  v2 = (char *)operator new(0x60uLL);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &unk_24D92D1E8;
  *((_QWORD *)v2 + 1) = 0;
  *(_QWORD *)&v19 = v2 + 24;
  *((_QWORD *)&v19 + 1) = v2;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 88);
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 95) = 0;
  std::allocate_shared[abi:ne180100]<turi::general_ifstream,std::allocator<turi::general_ifstream>,std::string &,void>((uint64_t)(v2 + 24), &v18);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v19 + 32, &v18);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = turi::general_ifstream::file_size(*(turi::neural_net::shared_float_array ***)(v19 + 32));
  v7 = v19;
  *(_QWORD *)(v19 + 24) = v6;
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
  {
    v9 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                               + (((unint64_t)(v8 + *(_QWORD *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v8 + *(_BYTE *)(a1 + 56) - 1));
    v10 = *v9;
    v11 = (std::__shared_weak_count *)v9[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v10 + 56), (uint64_t *)&v19);
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v10 + 56), (uint64_t *)&v19);
    }
  }
  std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::push_back((_QWORD *)(a1 + 24), &v19);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 152);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2180AC9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>::load(uint64_t a1, turi::iarchive *a2, uint64_t ****a3)
{
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v5 = (char *)operator new(0x38uLL);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &unk_24D92D238;
  *((_QWORD *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  v5[48] = 1;
  *((_QWORD *)&v9 + 1) = v5;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_QWORD *)&v9 = v5 + 24;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  turi::sframe_rows::load(*a3, a2);
}

_QWORD *turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::trim_push_queue(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[2];

  v1 = result;
  v2 = (_QWORD *)result[21];
  v3 = (_QWORD *)result[22];
  v4 = -1;
  if (v2 == v3)
  {
LABEL_11:
    v6 = result[18];
    v7 = result[15];
    v8 = (_QWORD *)(v7 + 8 * (v6 >> 8));
    if (result[16] == v7)
      v9 = 0;
    else
      v9 = *v8 + 16 * v6;
    v17[0] = v8;
    v17[1] = v9;
    v10 = (char *)std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)v17, v4);
    v12 = v11;
    v1[20] -= v4;
    v13 = v1[18];
    v14 = v1[15];
    v15 = (char *)(v14 + 8 * (v13 >> 8));
    if (v1[16] == v14)
      v16 = 0;
    else
      v16 = *(_QWORD *)v15 + 16 * v13;
    return std::deque<std::shared_ptr<turi::sframe_rows>>::erase(v1 + 14, v15, v16, v10, v12);
  }
  else
  {
    v5 = (_QWORD *)result[21];
    while (!*v5)
    {
      if (v5[2] < v4)
        v4 = v5[2];
      v5 += 5;
      if (v5 == v3)
      {
        if (!v4)
          return result;
        while (v2 != v3)
        {
          v2[2] -= v4;
          v2 += 5;
        }
        goto LABEL_11;
      }
    }
  }
  return result;
}

void std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::__shared_ptr_emplace<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D1E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D1E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue,std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 56);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 32);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::deque<std::shared_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::pop_queue>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2180ACFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sframe_rows>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sframe_rows>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::sframe_rows>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_QWORD *std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 4);
    if (v4 < 1)
      result -= (unint64_t)(255 - v4) >> 8;
    else
      result += (unint64_t)v4 >> 8;
  }
  return result;
}

_QWORD *std::deque<std::shared_ptr<turi::sframe_rows>>::erase(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 **v14;
  __int128 *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 **v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  __n128 v40;
  uint64_t *v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((a5 - *(_QWORD *)a4) >> 4) + 32 * (a4 - a2) - ((a3 - *(_QWORD *)a2) >> 4);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (uint64_t *)(v8 + 8 * (v7 >> 8));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = *v9 + 16 * v7;
  v41 = v9;
  v42 = v10;
  if (v10 == a3)
    v11 = 0;
  else
    v11 = ((a3 - *(_QWORD *)a2) >> 4) + 32 * (a2 - (char *)v9) - ((v10 - *v9) >> 4);
  v12 = std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)&v41, v11);
  v40.n128_u64[0] = (unint64_t)v12;
  v40.n128_u64[1] = v13;
  if (v6 >= 1)
  {
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      v20 = v12;
      v21 = v13;
      v22 = v41;
      v23 = v42;
      v24 = std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)&v40, v6);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,0>(v22, v23, v20, v21, v24, v25, &v43);
      v26 = v44;
      v27 = v42;
      while (v27 != v26)
      {
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v27);
        v27 = v42 + 16;
        v42 = v27;
        if (v27 - *v41 == 4096)
        {
          v27 = v41[1];
          ++v41;
          v42 = v27;
        }
      }
      v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((std::deque<std::pair<_opaque_pthread_t *,char const*>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1) & 1) != 0);
    }
    else
    {
      v14 = (__int128 **)std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)&v40, v6);
      v16 = a1[4] + a1[5];
      v17 = a1[1];
      v18 = (__int128 **)(v17 + 8 * (v16 >> 8));
      if (a1[2] == v17)
        v19 = 0;
      else
        v19 = &(*v18)[v16];
      v43 = v40;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>>>(v14, v15, v18, v19, (uint64_t)&v43);
      v29 = v43.n128_i64[1];
      v30 = a1[1];
      if (a1[2] == v30)
      {
        v32 = 0;
      }
      else
      {
        v31 = a1[5] + a1[4];
        v32 = *(_QWORD *)(v30 + ((v31 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v31;
      }
      if (v32 != v43.n128_u64[1])
      {
        v33 = (_QWORD *)v43.n128_u64[0];
        do
        {
          v29 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29) + 16;
          if (v29 - *v33 == 4096)
          {
            v34 = v33[1];
            ++v33;
            v29 = v34;
          }
        }
        while (v29 != v32);
      }
      a1[5] -= v6;
      while ((std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0);
    }
  }
  v35 = a1[4];
  v36 = a1[1];
  v37 = (_QWORD *)(v36 + 8 * (v35 >> 8));
  if (a1[2] == v36)
    v38 = 0;
  else
    v38 = *v37 + 16 * v35;
  v43.n128_u64[0] = (unint64_t)v37;
  v43.n128_u64[1] = v38;
  return std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)&v43, v11);
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,0>@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>(v12, v14, v15, v16, &v21);
      v16 = v22.n128_i64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = a4 - v10;
      if ((v11 - a1) >> 4 >= v12 >> 4)
        v13 = v12 >> 4;
      else
        v13 = (v11 - a1) >> 4;
      if (v13)
      {
        v14 = -16 * v13;
        v15 = (__int128 *)(v11 - 16);
        do
        {
          a4 -= 16;
          result = std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a4, v15--);
          v14 += 16;
        }
        while (v14);
      }
      v11 -= 16 * v13;
      if (v11 == a1)
        break;
      v17 = *--v6;
      v10 = v17;
      a4 = v17 + 4096;
    }
    if (*v6 + 4096 == a4)
    {
      v18 = v6[1];
      ++v6;
      a4 = v18;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>>>(__int128 **a1, __int128 *a2, __int128 **a3, __int128 *a4, uint64_t a5)
{
  __int128 *v7;
  uint64_t v8;
  __int128 **v10;
  __int128 *i;
  __int128 *v12;
  double result;
  __int128 *v14;
  __int128 v15;

  v7 = *(__int128 **)a5;
  v8 = *(_QWORD *)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 256; ; i = v12 + 256)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>(a2, i, v7, v8, &v14);
      v8 = *((_QWORD *)&v15 + 1);
      v7 = (__int128 *)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows> **,long,256l>,0>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, __int128 *a3@<X3>, uint64_t a4@<X4>, __int128 **a5@<X8>)
{
  __int128 *v6;
  __int128 *v7;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v6 = a3;
  v7 = a1;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *(_QWORD *)a3;
    while (1)
    {
      v11 = v10 - a4 + 4096;
      if (v9 - v7 >= v11 >> 4)
        v12 = v11 >> 4;
      else
        v12 = v9 - v7;
      if (v12)
      {
        v13 = 16 * v12;
        v14 = &v7[v12];
        do
        {
          result = std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a4, v7++);
          a4 += 16;
          v13 -= 16;
        }
        while (v13);
        v7 = v14;
      }
      if (v7 == v9)
        break;
      v16 = *((_QWORD *)v6 + 1);
      v6 = (__int128 *)((char *)v6 + 8);
      v10 = v16;
      a4 = v16;
    }
    if (*(_QWORD *)v6 + 4096 == a4)
    {
      v17 = *((_QWORD *)v6 + 1);
      v6 = (__int128 *)((char *)v6 + 8);
      a4 = v17;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = (__int128 *)a4;
  return result;
}

void std::deque<std::shared_ptr<turi::sframe_rows>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<turi::sframe_rows>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

_QWORD *turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flush_push_queue(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  turi::sframe_rows **v5;
  void **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  turi::sframe_rows *v14;
  turi::sframe_rows **v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  std::string::size_type v30;
  turi::sframe_rows **v31;
  std::string::pointer data;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v45;
  std::string v46[2];
  void *__p;
  char *v48;
  char *v49;

  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(v3 + 8 * (v2 >> 8));
  if (*(_QWORD *)(a1 + 128) == v3)
    v5 = 0;
  else
    v5 = (turi::sframe_rows **)(*v4 + 16 * v2);
  v6 = (void **)(a1 + 72);
  v46[0].__r_.__value_.__r.__words[0] = v3 + 8 * (v2 >> 8);
  v46[0].__r_.__value_.__l.__size_ = (std::string::size_type)v5;
  v7 = (char *)std::__deque_iterator<std::shared_ptr<turi::sframe_rows>,std::shared_ptr<turi::sframe_rows>*,std::shared_ptr<turi::sframe_rows>&,std::shared_ptr<turi::sframe_rows>**,long,256l>::operator+[abi:ne180100]((uint64_t)v46, *(_QWORD *)a1);
  v9 = v8;
  for (i = *(_QWORD **)(a1 + 168); ; i += 5)
  {
    if (i == *(_QWORD **)(a1 + 176))
    {
      turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::get_cache_file((_QWORD *)a1, v46);
      if (*(char *)(a1 + 95) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = *(_OWORD *)&v46[0].__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 88) = *((_QWORD *)&v46[0].__r_.__value_.__l + 2);
      std::allocate_shared[abi:ne180100]<turi::general_ofstream,std::allocator<turi::general_ofstream>,std::string &,void>(a1 + 72, v46);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 96, (__int128 *)v46);
      size = (std::__shared_weak_count *)v46[0].__r_.__value_.__l.__size_;
      if (v46[0].__r_.__value_.__l.__size_)
      {
        v12 = (unint64_t *)(v46[0].__r_.__value_.__l.__size_ + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v46[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 96);
      memset(&v46[0].__r_.__value_.__r.__words[1], 0, 40);
      while (v5 != (turi::sframe_rows **)v9)
      {
        v14 = *v5;
        v5 += 2;
        turi::sframe_rows::save(v14, (turi::oarchive *)v46);
        if ((turi::sframe_rows **)((char *)v5 - *v4) == (turi::sframe_rows **)4096)
        {
          v15 = (turi::sframe_rows **)v4[1];
          ++v4;
          v5 = v15;
        }
      }
      goto LABEL_64;
    }
    if (!*i)
      break;
  }
  turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::get_cache_file((_QWORD *)a1, v46);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v46[0].__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)&v46[0].__r_.__value_.__l + 2);
  std::allocate_shared[abi:ne180100]<turi::general_ofstream,std::allocator<turi::general_ofstream>,std::string &,void>(a1 + 72, v46);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 96, (__int128 *)v46);
  v16 = (std::__shared_weak_count *)v46[0].__r_.__value_.__l.__size_;
  if (v46[0].__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(v46[0].__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  __p = 0;
  v48 = 0;
  v49 = 0;
  std::vector<unsigned long>::reserve(&__p, *(_QWORD *)a1);
  memset(v46, 0, sizeof(v46));
  if (v5 == (turi::sframe_rows **)v9)
  {
    data = 0;
  }
  else
  {
    v45 = v7;
    v19 = 0;
    do
    {
      v20 = v48;
      if (v48 >= v49)
      {
        v22 = (char *)__p;
        v23 = (v48 - (_BYTE *)__p) >> 3;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v25 = v49 - (_BYTE *)__p;
        if ((v49 - (_BYTE *)__p) >> 2 > v24)
          v24 = v25 >> 2;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v49, v26);
          v22 = (char *)__p;
          v20 = v48;
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[8 * v23];
        *(_QWORD *)v28 = v19;
        v21 = v28 + 8;
        while (v20 != v22)
        {
          v29 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v28 - 1) = v29;
          v28 -= 8;
        }
        __p = v28;
        v48 = v21;
        v49 = &v27[8 * v26];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_QWORD *)v48 = v19;
        v21 = v20 + 8;
      }
      v48 = v21;
      turi::sframe_rows::save(*v5, (turi::oarchive *)v46);
      std::ostream::write();
      v30 = v46[1].__r_.__value_.__l.__size_;
      v46[1].__r_.__value_.__l.__size_ = 0;
      v5 += 2;
      if ((turi::sframe_rows **)((char *)v5 - *v4) == (turi::sframe_rows **)4096)
      {
        v31 = (turi::sframe_rows **)v4[1];
        ++v4;
        v5 = v31;
      }
      v19 += v30;
    }
    while (v5 != (turi::sframe_rows **)v9);
    data = v46[1].__r_.__value_.__l.__data_;
    v7 = v45;
  }
  free(data);
  v33 = *(_QWORD **)(a1 + 168);
  v34 = *(_QWORD **)(a1 + 176);
  if (v33 != v34)
  {
    v35 = *(_QWORD **)(a1 + 168);
    while (*v35 || v35[2] >= *(_QWORD *)a1)
    {
      v35 += 5;
      if (v35 == v34)
        goto LABEL_61;
    }
    turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::flip_queues(a1);
    v33 = *(_QWORD **)(a1 + 168);
    v34 = *(_QWORD **)(a1 + 176);
LABEL_61:
    while (v33 != v34)
    {
      if (!*v33)
      {
        v36 = v33[2];
        v37 = v36 >= *(_QWORD *)a1;
        v38 = v36 - *(_QWORD *)a1;
        if (!v37)
        {
          v39 = *(_QWORD *)(a1 + 64) + *(_QWORD *)(a1 + 56) - 1;
          std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v33, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((v39 >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * v39));
          v38 = 0;
          v33[3] = *((_QWORD *)__p + v33[2]);
        }
        v33[2] = v38;
      }
      v33 += 5;
    }
  }
  if (__p)
  {
    v48 = (char *)__p;
    operator delete(__p);
  }
LABEL_64:
  v40 = *(_QWORD *)(a1 + 144);
  v41 = *(_QWORD *)(a1 + 120);
  v42 = (char *)(v41 + 8 * (v40 >> 8));
  if (*(_QWORD *)(a1 + 128) == v41)
    v43 = 0;
  else
    v43 = *(_QWORD *)v42 + 16 * v40;
  return std::deque<std::shared_ptr<turi::sframe_rows>>::erase((_QWORD *)(a1 + 112), v42, v43, v7, v9);
}

void sub_2180ADB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::deque<std::shared_ptr<turi::sframe_rows>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2180ADE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>::get_cache_file(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 v5;
  uint64_t instance;
  void *__p[2];
  char v8;

  if (a1[30])
  {
    v3 = a1 + 25;
    v4 = *(_QWORD *)(a1[26] + 8 * (a1[29] / 0xAAuLL)) + 24 * (a1[29] % 0xAAuLL);
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v4;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
    }
    std::deque<std::string>::pop_front(v3);
  }
  else
  {
    instance = turi::fileio::fixed_size_cache_manager::get_instance((turi::fileio::fixed_size_cache_manager *)a1);
    std::string::basic_string[abi:ne180100]<0>(__p, "dqueue");
    turi::fileio::fixed_size_cache_manager::get_temp_cache_id(instance, (uint64_t)__p, a2);
    if (v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_2180ADF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::general_ofstream,std::allocator<turi::general_ofstream>,std::string &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x198uLL);
  result = std::__shared_ptr_emplace<turi::general_ofstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::general_ofstream>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2180ADFB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::general_ofstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::general_ofstream>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D92D288;
  a1[1] = 0;
  std::allocator<turi::general_ofstream>::construct[abi:ne180100]<turi::general_ofstream,std::string &>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_2180AE014(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::general_ofstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::general_ofstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::general_ofstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<turi::general_ofstream>::construct[abi:ne180100]<turi::general_ofstream,std::string &>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::general_ofstream::general_ofstream(a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2180AE0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_execution_node_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::query_eval::query_context::query_context(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  *a1 = a3;
  a1[1] = 0;
  v4 = (uint64_t)(a1 + 1);
  a1[2] = 0;
  a1[3] = a2;
  v5 = (char *)operator new(0x38uLL);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &unk_24D92D238;
  *((_QWORD *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  v5[48] = 1;
  *(_QWORD *)&v10 = v5 + 24;
  *((_QWORD *)&v10 + 1) = v5;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v4, &v10);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_2180AE1F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::query_context::get_output_buffer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void turi::query_eval::query_context::emit(uint64_t a1, __int128 *a2)
{
  turi::query_eval::execution_node::add_operator_output(*(_QWORD *)(a1 + 24), a2);
}

double turi::query_eval::query_context::get_next@<D0>(turi::query_eval::execution_node **this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  turi::query_eval::execution_node::get_next_from_input((uint64_t *)&v5, this[3], a2, 0);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void turi::query_eval::query_context::skip_next(turi::query_eval::execution_node **this, unint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  turi::query_eval::execution_node::get_next_from_input(&v5, this[3], a2, 1);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t turi::query_eval::query_context::should_skip(turi::query_eval::query_context *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 3) + 89);
}

void turi::query_eval::query_context::~query_context(turi::query_eval::query_context *this)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

uint64_t _GLOBAL__sub_I_query_context_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::query_eval::subplan_executor::generate_to_callback_function(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  char v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD **v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::exception_ptr v23;
  std::exception_ptr v24;
  unint64_t v25[2];
  _QWORD *v26;
  _QWORD v27[2];
  turi::query_eval::execution_node *v28;
  unint64_t v29;
  _QWORD **v30;
  _QWORD *v31[2];
  std::exception_ptr v32;

  v31[0] = 0;
  v31[1] = 0;
  v30 = v31;
  turi::query_eval::get_executor(a2, (uint64_t)&v30, &v28);
  v6 = turi::query_eval::execution_node::register_consumer(v28);
  do
  {
    while (1)
    {
      turi::query_eval::execution_node::get_next((int64x2_t **)v28, v6, 0, &v26);
      if (v26)
      {
        v32.__ptr_ = a3;
        v7 = *(_QWORD *)(a4 + 24);
        if (!v7)
          std::__throw_bad_function_call[abi:ne180100]();
        v8 = (*(unsigned int (**)(uint64_t, std::exception_ptr *, _QWORD **))(*(_QWORD *)v7 + 48))(v7, &v32, &v26)? 3: 0;
      }
      else
      {
        v8 = 3;
      }
      v9 = (std::__shared_weak_count *)v27[0];
      if (v27[0])
      {
        v10 = (unint64_t *)(v27[0] + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
          break;
      }
      if (v8)
        goto LABEL_15;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  while (!v8);
LABEL_15:
  v12 = v30;
  if (v30 == v31)
    goto LABEL_24;
  v13 = 0;
  do
  {
    v14 = *(_BYTE *)(v12[6] + 120) != 0;
    v15 = (_QWORD *)v12[1];
    if (v15)
    {
      do
      {
        v16 = (_QWORD **)v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (_QWORD **)v12[2];
        v17 = *v16 == v12;
        v12 = v16;
      }
      while (!v17);
    }
    v13 |= v14;
    v12 = v16;
  }
  while (v16 != v31);
  if ((v13 & 1) != 0)
  {
    v27[0] = 0;
    v27[1] = 0;
    v25[0] = (unint64_t)v28;
    v25[1] = v29;
    v26 = v27;
    if (v29)
    {
      v21 = (unint64_t *)(v29 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    turi::query_eval::find_earliest_exception(v25, (uint64_t)&v26, &v32);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v25);
    std::exception_ptr::exception_ptr(&v24, &v32);
    v23.__ptr_ = &v24;
    std::rethrow_exception(v23);
    __break(1u);
  }
  else
  {
LABEL_24:
    v18 = (std::__shared_weak_count *)v29;
    if (v29)
    {
      v19 = (unint64_t *)(v29 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&v30, v31[0]);
  }
}

void sub_2180AE558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, char a15, uint64_t a16, char a17, _QWORD *a18)
{
  uint64_t v18;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v18 - 72));
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&a12, a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void turi::query_eval::get_executor(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  uint64_t *v40[3];
  uint64_t *v41;

  v6 = *(_QWORD **)(a2 + 8);
  v7 = *a1;
  if (!v6)
  {
LABEL_6:
    std::vector<std::shared_ptr<turi::query_eval::execution_node>>::vector(v40, (uint64_t)(*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56)) >> 4);
    v9 = *a1;
    v10 = *(_QWORD *)(*a1 + 56);
    if (*(_QWORD *)(*a1 + 64) != v10)
    {
      v11 = 0;
      do
      {
        turi::query_eval::get_executor(&v39, v10 + 16 * v11, a2);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&v40[0][2 * v11], &v39);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
        if (*((_QWORD *)&v39 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        ++v11;
        v9 = *a1;
        v10 = *(_QWORD *)(*a1 + 56);
      }
      while (v11 < (*(_QWORD *)(*a1 + 64) - v10) >> 4);
    }
    v15 = a1[1];
    v37 = v9;
    v38 = (std::__shared_weak_count *)v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    turi::query_eval::planner_node_to_operator((uint64_t)&v37, (uint64_t)&v39);
    v18 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    std::allocate_shared[abi:ne180100]<turi::query_eval::execution_node,std::allocator<turi::query_eval::execution_node>,std::shared_ptr<turi::query_eval::query_operator> &,std::vector<std::shared_ptr<turi::query_eval::execution_node>> &,void>(&v36);
    v41 = a1;
    v21 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, &v41);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v21 + 6), &v36);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    *(_QWORD *)&v36 = a1;
    v25 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v36);
    v26 = v25[7];
    *a3 = v25[6];
    a3[1] = v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 1);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    *(_QWORD *)&v39 = v40;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
    return;
  }
  while (1)
  {
    v8 = v6[4];
    if (v7 >= v8)
      break;
LABEL_5:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_6;
  }
  if (v8 < v7)
  {
    ++v6;
    goto LABEL_5;
  }
  v40[0] = a1;
  v32 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v40);
  v33 = v32[7];
  *a3 = v32[6];
  a3[1] = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 1);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
}

void sub_2180AE874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  a14 = (void **)&a16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void turi::query_eval::find_earliest_exception(unint64_t *a1@<X0>, uint64_t a2@<X1>, std::exception_ptr *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *ptr;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::exception_ptr *v28;
  int v29;
  std::exception_ptr v30;
  void *v31;
  std::__shared_weak_count *v32;
  std::exception_ptr v33;
  std::exception_ptr v34;
  std::__shared_weak_count *v35;
  std::exception_ptr v36;

  v6 = *(_QWORD **)(a2 + 8);
  v7 = *a1;
  if (!v6)
  {
LABEL_6:
    v36.__ptr_ = 0;
    v10 = v7 + 48;
    v9 = *(_QWORD *)(v7 + 48);
    if (*(_QWORD *)(v10 + 8) != v9)
    {
      v11 = 0;
      while (1)
      {
        v12 = v9 + 24 * v11;
        v13 = *(void **)v12;
        v34.__ptr_ = *(void **)v12;
        v14 = *(std::__shared_weak_count **)(v12 + 8);
        v35 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
          v31 = v13;
          v32 = v14;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        else
        {
          v31 = v13;
          v32 = 0;
        }
        turi::query_eval::find_earliest_exception(&v33, &v31, a2);
        v18 = v32;
        if (v32)
        {
          v19 = (unint64_t *)&v32->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v30.__ptr_ = 0;
        ptr = v33.__ptr_;
        std::exception_ptr::~exception_ptr(&v30);
        if (ptr)
          break;
        std::exception_ptr::~exception_ptr(&v33);
        v22 = v35;
        if (v35)
        {
          v23 = (unint64_t *)&v35->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        ++v11;
        v9 = *(_QWORD *)(*a1 + 48);
        if (v11 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*a1 + 56) - v9) >> 3))
          goto LABEL_33;
      }
      std::exception_ptr::operator=(&v36, &v33);
      std::exception_ptr::~exception_ptr(&v33);
      v25 = v35;
      if (v35)
      {
        v26 = (unint64_t *)&v35->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
LABEL_33:
    std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::execution_node>,std::shared_ptr<turi::query_eval::execution_node> const&>((uint64_t **)a2, a1, (uint64_t *)a1);
    v34.__ptr_ = 0;
    if (v36.__ptr_)
    {
      std::exception_ptr::~exception_ptr(&v34);
    }
    else
    {
      v29 = *(unsigned __int8 *)(*a1 + 120);
      std::exception_ptr::~exception_ptr(&v34);
      if (v29)
      {
        v28 = (std::exception_ptr *)(*a1 + 128);
        goto LABEL_38;
      }
    }
    v28 = &v36;
LABEL_38:
    std::exception_ptr::exception_ptr(a3, v28);
    std::exception_ptr::~exception_ptr(&v36);
    return;
  }
  while (1)
  {
    v8 = v6[4];
    if (v7 >= v8)
      break;
LABEL_5:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_6;
  }
  if (v8 < v7)
  {
    ++v6;
    goto LABEL_5;
  }
  a3->__ptr_ = 0;
}

void sub_2180AEB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, std::exception_ptr a16)
{
  std::exception_ptr::~exception_ptr(&a16);
  _Unwind_Resume(a1);
}

_QWORD *turi::query_eval::subplan_executor::generate_to_sframe_segment(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _BYTE v19[24];
  _BYTE *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, void *))(*(_QWORD *)a3 + 32))(v17, a3, a4);
  v15[0] = &off_24D92D328;
  v15[1] = v17;
  v16 = v15;
  turi::query_eval::subplan_executor::generate_to_callback_function((uint64_t)v6, a2, a4, (uint64_t)v15);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v22;
  if (v22 == v21)
  {
    v10 = 4;
    v9 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v11 = v20;
  if (v20 == v19)
  {
    v12 = 4;
    v11 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_16:
  result = v18;
  if (v18 == v17)
  {
    v14 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_2180AEC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, va_list);
  v4 = v10;
  if (v10 == v2)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void turi::query_eval::subplan_executor::run(uint64_t *a1@<X1>, uint64_t a2@<X2>, turi::sframe *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[3];
  std::string v10;
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 32))
  {
    v5 = std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v12, a2 + 8);
    turi::query_eval::subplan_executor::generate_to_callback_function(v5, a1, 0, (uint64_t)v12);
    v6 = v13;
    if (v13 == v12)
    {
      v7 = 4;
      v6 = v12;
    }
    else
    {
      if (!v13)
      {
LABEL_9:
        turi::sframe::sframe(a3);
        return;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_9;
  }
  if (*(char *)(a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  else
    v10 = *(std::string *)(a2 + 48);
  memset(v9, 0, sizeof(v9));
  turi::query_eval::get_output_sframe_schema(a1, 1, &v10, v9, a3);
  v11 = (void **)v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  turi::query_eval::subplan_executor::generate_to_sframe_segment(v8, a1, (uint64_t)a3, 0);
  turi::sframe::close(a3);
}

void sub_2180AEE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::query_eval::get_output_sframe_schema(uint64_t *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X3>, turi::sframe *a5@<X8>)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  unint64_t v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  uint64_t v37;
  std::string v38;
  std::string v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *__p;
  _BYTE *v43;
  std::__split_buffer<std::string> __v;
  _QWORD v45[4];

  v45[2] = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe(a5);
  v10 = a1[1];
  v40 = *a1;
  v41 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  turi::query_eval::infer_planner_node_type(&v40, (unint64_t *)&__p);
  v13 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v17 = *a4;
  v16 = a4[1];
  v19 = __p;
  v18 = v43;
  if (v16 == *a4)
  {
    v17 = a4[1];
    v19 = v43;
    if (v43 != __p)
    {
      v37 = a2;
      v20 = 0;
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v39, "X");
        std::to_string(&v38, ++v20);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v38;
        else
          v21 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        else
          size = v38.__r_.__value_.__l.__size_;
        v23 = std::string::append(&v39, (const std::string::value_type *)v21, size);
        v24 = v23->__r_.__value_.__r.__words[0];
        v45[0] = v23->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v45 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
        v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v26 = a4[1];
        v27 = a4[2];
        if (v26 >= v27)
        {
          v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a4) >> 3);
          v31 = v30 + 1;
          if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *a4) >> 3);
          if (2 * v32 > v31)
            v31 = 2 * v32;
          if (v32 >= 0x555555555555555)
            v33 = 0xAAAAAAAAAAAAAAALL;
          else
            v33 = v31;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 2);
          if (v33)
            v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(a4 + 2), v33);
          else
            v34 = 0;
          v35 = v34 + v30;
          __v.__first_ = v34;
          __v.__begin_ = v35;
          __v.__end_cap_.__value_ = &v34[v33];
          v36 = v45[0];
          v35->__r_.__value_.__r.__words[0] = v24;
          v35->__r_.__value_.__l.__size_ = v36;
          *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v45 + 7);
          *((_BYTE *)&v35->__r_.__value_.__s + 23) = v25;
          __v.__end_ = v35 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
          v29 = a4[1];
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          v28 = v45[0];
          *(_QWORD *)v26 = v24;
          *(_QWORD *)(v26 + 8) = v28;
          *(_QWORD *)(v26 + 15) = *(_QWORD *)((char *)v45 + 7);
          *(_BYTE *)(v26 + 23) = v25;
          v29 = v26 + 24;
          a4[1] = v26 + 24;
        }
        a4[1] = v29;
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        v19 = __p;
        v18 = v43;
      }
      while (v20 < v43 - (_BYTE *)__p);
      v17 = *a4;
      v16 = a4[1];
      a2 = v37;
    }
  }
  v39.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 3);
  v38.__r_.__value_.__r.__words[0] = v18 - v19;
  if (v39.__r_.__value_.__r.__words[0] != v18 - v19)
  {
    __v.__first_ = &v39;
    __v.__begin_ = &v38;
    turi::query_eval::get_output_sframe_schema(std::shared_ptr<turi::query_eval::planner_node> const&,unsigned long,std::string,std::vector<std::string>)::$_0::operator()();
  }
  turi::sframe::open_for_write((uint64_t)a5, a4, &__p, a3, a2, 1);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
}

void sub_2180AF1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, int a7, __int16 a8, char a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, void *a20,uint64_t a21,std::__split_buffer<std::string> *a22,uint64_t a23,uint64_t a24,void *__pa)
{
  turi::sframe *v25;

  if (__pa)
    operator delete(__pa);
  turi::sframe::~sframe(v25);
  _Unwind_Resume(a1);
}

void turi::query_eval::subplan_executor::run_concat(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, turi::sframe *a4@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  turi::thread_pool *v10;
  uint64_t *v11;
  uint64_t *v12;
  turi::thread_pool *v13;
  turi::thread *v14;
  turi::thread_pool *v15;
  uint64_t v16;
  turi::thread_pool *v17;
  uint64_t v18;
  double v19;
  turi::thread *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  void ***v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  turi::thread_pool *v30;
  uint64_t *v31;
  uint64_t *v32;
  turi::thread_pool *instance;
  turi::thread *v34;
  turi::thread_pool *tls_data;
  uint64_t v36;
  turi::thread_pool *v37;
  uint64_t v38;
  double v39;
  turi::thread *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  std::string v44;
  std::string v45;
  _QWORD v46[3];
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD v51[3];
  _QWORD *v52;
  void **v53[3];
  void ***v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    turi::sframe::sframe(a4);
    return;
  }
  if (!*(_QWORD *)(a3 + 32))
  {
    if (*(char *)(a3 + 71) < 0)
      std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)(a3 + 48), *(_QWORD *)(a3 + 56));
    else
      v45 = *(std::string *)(a3 + 48);
    memset(&v44, 0, sizeof(v44));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, *(__int128 **)(a3 + 72), *(__int128 **)(a3 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 3));
    turi::query_eval::get_output_sframe_schema(v5, ((char *)v6 - (char *)v5) >> 4, &v45, (uint64_t *)&v44, a4);
    v53[0] = (void **)&v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v53);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    v32 = *a2;
    v31 = a2[1];
    v51[0] = a1;
    v51[1] = a2;
    v51[2] = a4;
    instance = (turi::thread_pool *)turi::thread_pool::get_instance(v30);
    v34 = (turi::thread *)turi::thread_pool::size(instance);
    tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v34);
    v36 = ((char *)v31 - (char *)v32) >> 4;
    if (*((_BYTE *)tls_data + 8) || (unint64_t)v34 <= 1)
    {
      if (v31 != v32)
      {
        v42 = 0;
        v43 = 0;
        do
        {
          tls_data = (turi::thread_pool *)turi::query_eval::subplan_executor::generate_to_sframe_segment((uint64_t)tls_data, &(*a2)[v42], (uint64_t)a4, v43++);
          v42 += 2;
        }
        while ((char *)v36 != v43);
      }
    }
    else
    {
      v37 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v53, v37);
      v38 = 0;
      v39 = (double)(unint64_t)v36 / (double)(unint64_t)v34;
      do
      {
        v40 = (turi::thread *)(v38 + 1);
        v41 = (unint64_t)(v39 * (double)(unint64_t)(v38 + 1) + 0.0);
        if ((turi::thread *)v38 == (turi::thread *)((char *)v34 - 1))
          v41 = v36;
        v49 = (unint64_t)(v39 * (double)(unint64_t)v38 + 0.0);
        v50 = v41;
        v47 = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_1>(unsigned long,unsigned long,turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_1 const&)::{lambda(void)#1}>(turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_1)::stored_vtable
            + 1;
        v48 = v51;
        turi::parallel_task_queue::launch((uint64_t)v53, (uint64_t)&v47, v38);
        boost::function0<void>::~function0(&v47);
        v38 = (uint64_t)v40;
      }
      while (v40 != v34);
      turi::parallel_task_queue::join((turi::parallel_task_queue *)v53);
      turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v53);
    }
    turi::sframe::close(a4);
    return;
  }
  v10 = (turi::thread_pool *)std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v51, a3 + 8);
  v12 = *a2;
  v11 = a2[1];
  v46[0] = a1;
  v46[1] = a2;
  v46[2] = v51;
  v13 = (turi::thread_pool *)turi::thread_pool::get_instance(v10);
  v14 = (turi::thread *)turi::thread_pool::size(v13);
  v15 = (turi::thread_pool *)turi::thread::get_tls_data(v14);
  v16 = ((char *)v11 - (char *)v12) >> 4;
  if (!*((_BYTE *)v15 + 8) && (unint64_t)v14 > 1)
  {
    v17 = (turi::thread_pool *)turi::thread_pool::get_instance(v15);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v53, v17);
    v18 = 0;
    v19 = (double)(unint64_t)v16 / (double)(unint64_t)v14;
    do
    {
      v20 = (turi::thread *)(v18 + 1);
      v21 = (unint64_t)(v19 * (double)(unint64_t)(v18 + 1) + 0.0);
      if ((turi::thread *)v18 == (turi::thread *)((char *)v14 - 1))
        v21 = v16;
      v49 = (unint64_t)(v19 * (double)(unint64_t)v18 + 0.0);
      v50 = v21;
      v47 = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0>(unsigned long,unsigned long,turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0 const&)::{lambda(void)#1}>(turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0)::stored_vtable
          + 1;
      v48 = v46;
      turi::parallel_task_queue::launch((uint64_t)v53, (uint64_t)&v47, v18);
      boost::function0<void>::~function0(&v47);
      v18 = (uint64_t)v20;
    }
    while (v20 != v14);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v53);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v53);
    goto LABEL_21;
  }
  if (v11 != v12)
  {
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *a2;
      v25 = std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)v51);
      turi::query_eval::subplan_executor::generate_to_callback_function(v25, &v24[v22], v23, (uint64_t)v53);
      v26 = v54;
      if (v54 == v53)
        break;
      if (v54)
      {
        v27 = 5;
LABEL_19:
        ((void (*)(void))(*v26)[v27])();
      }
      ++v23;
      v22 += 2;
      if ((char *)v16 == v23)
        goto LABEL_21;
    }
    v26 = v53;
    v27 = 4;
    goto LABEL_19;
  }
LABEL_21:
  turi::sframe::sframe(a4);
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
  }
  else
  {
    if (!v52)
      return;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
}

void sub_2180AF62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  turi::sframe *v34;

  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a31);
  turi::sframe::~sframe(v34);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        return v9;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = v11;
    v13 = (*a4)[1];
    v11[4] = **a4;
    v11[5] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v11[6] = 0;
    v11[7] = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
  }
  return (uint64_t **)v12;
}

_QWORD *std::vector<std::shared_ptr<turi::query_eval::execution_node>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2180AF874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::query_eval::execution_node,std::allocator<turi::query_eval::execution_node>,std::shared_ptr<turi::query_eval::query_operator> &,std::vector<std::shared_ptr<turi::query_eval::execution_node>> &,void>(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0xA8uLL);
  std::__shared_ptr_emplace<turi::query_eval::execution_node>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::query_eval::query_operator> &,std::vector<std::shared_ptr<turi::query_eval::execution_node>> &,std::allocator<turi::query_eval::execution_node>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a1, v2 + 3, (uint64_t)(v2 + 3));
}

void sub_2180AF8DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::execution_node>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::query_eval::query_operator> &,std::vector<std::shared_ptr<turi::query_eval::execution_node>> &,std::allocator<turi::query_eval::execution_node>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24D92D2D8;
  a1[1] = 0;
  turi::query_eval::execution_node::execution_node(a1 + 3);
  return a1;
}

void sub_2180AF928(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::execution_node>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D2D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::execution_node>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D2D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::query_eval::execution_node>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<turi::query_eval::execution_node>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<turi::query_eval::execution_node>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  void **v5;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a2 + 128));
  v3 = *(void **)(a2 + 96);
  if (v3)
  {
    *(_QWORD *)(a2 + 104) = v3;
    operator delete(v3);
  }
  std::unique_ptr<turi::broadcast_queue<std::shared_ptr<turi::sframe_rows>,turi::broadcast_queue_serializer<std::shared_ptr<turi::sframe_rows>>>>::reset[abi:ne180100]((uint64_t *)(a2 + 72), 0);
  v5 = (void **)(a2 + 48);
  std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 32);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 16);
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t *std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::execution_node>,std::shared_ptr<turi::query_eval::execution_node> const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        return (uint64_t *)v8;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v16[1] = v6;
    v12 = a3[1];
    v11[4] = *a3;
    v11[5] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v17 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
  }
  return v11;
}

void std::unique_ptr<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_2180AFCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::query_eval::get_output_sframe_schema(std::shared_ptr<turi::query_eval::planner_node> const&,unsigned long,std::string,std::vector<std::string>)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/subplan_executor.cpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"column_names.size()", 19);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"column_types.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/execution/subplan_executor.cpp", "operator()", 50, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::get_output_sframe_schema(std::shared_ptr<turi::query_eval::planner_node> const&,unsigned long,std::string,std::vector<std::string>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180AFF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy(a1, a2[1]);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 6));
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy(a1, a2[1]);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D92D328;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D92D328;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 48))(v3, *a3);
  return 0;
}

uint64_t std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0,std::allocator<turi::query_eval::subplan_executor::generate_to_sframe_segment(std::shared_ptr<turi::query_eval::planner_node> const&,turi::sframe &,unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

_QWORD *std::vector<turi::sframe>::vector(_QWORD *a1, unint64_t a2)
{
  turi::sframe *v4;
  uint64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::sframe>::__vallocate[abi:ne180100](a1, a2);
    v4 = (turi::sframe *)a1[1];
    v5 = 296 * a2;
    v6 = (char *)v4 + 296 * a2;
    do
    {
      turi::sframe::sframe(v4);
      v4 = (turi::sframe *)((char *)v4 + 296);
      v5 -= 296;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_2180B018C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::sframe>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xDD67C8A60DD67DLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sframe>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[296 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sframe>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xDD67C8A60DD67DLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(296 * a2);
}

void std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = *a1;
  v2 = (void (***)(_QWORD))**a1;
  if (v2)
  {
    v4 = (void (***)(_QWORD))v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 37;
      do
      {
        (**v6)(v6);
        v7 = v6 == v2;
        v6 -= 37;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0>(unsigned long,unsigned long,turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval16subplan_executor10run_concatERKNSt3__16v"
                                        "ectorINS3_10shared_ptrINS1_12planner_nodeEEENS3_9allocatorIS7_EEEERKNS1_19materi"
                                        "alize_optionsEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval16subplan_executor10run_concatERKNSt3__16vectorINS3_10shared_ptrINS1_12planner_nodeEEENS3_9allocatorIS7_EEEERKNS1_19materialize_optionsEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0>(unsigned long,unsigned long,turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_0 const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    for (i = 16 * v1; ; i += 16)
    {
      v4 = **(_QWORD **)(*v2 + 8);
      v5 = std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v7, *(_QWORD *)(*v2 + 16));
      turi::query_eval::subplan_executor::generate_to_callback_function(v5, (uint64_t *)(v4 + i), (void *)v1, (uint64_t)v7);
      result = v8;
      if (v8 == v7)
        break;
      if (v8)
      {
        v6 = 5;
LABEL_7:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
      }
      if (++v1 >= v2[2])
        return result;
    }
    result = v7;
    v6 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_2180B0434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_1>(unsigned long,unsigned long,turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval16subplan_executor10run_concatERKNSt3__16v"
                                        "ectorINS3_10shared_ptrINS1_12planner_nodeEEENS3_9allocatorIS7_EEEERKNS1_19materi"
                                        "alize_optionsEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10query_eval16subplan_executor10run_concatERKNSt3__16vectorINS3_10shared_ptrINS1_12planner_nodeEEENS3_9allocatorIS7_EEEERKNS1_19materialize_optionsEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_1>(unsigned long,unsigned long,turi::query_eval::subplan_executor::run_concat(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,turi::query_eval::materialize_options const&)::$_1 const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    v3 = 16 * v1;
    do
    {
      result = turi::query_eval::subplan_executor::generate_to_sframe_segment((uint64_t)result, (uint64_t *)(**(_QWORD **)(*v2 + 8) + v3), *(_QWORD *)(*v2 + 16), (void *)v1++);
      v3 += 16;
    }
    while (v1 < v2[2]);
  }
  return result;
}

void __cxx_global_var_init_4_3()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_subplan_executor_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::query_eval::infer_planner_node_type@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  void **v22;

  pthread_mutex_lock(&turi::query_eval::global_query_lock);
  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "__type_memo__");
  v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v4 + 32, (const void **)__p);
  if (v21 < 0)
    operator delete(__p[0]);
  v6 = *a1;
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "__type_memo__");
    v22 = __p;
    v7 = *((_QWORD *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v6 + 32), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22)+ 7);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(a2, *(const void **)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8));
    goto LABEL_15;
  }
  v8 = *(_DWORD *)v6;
  v9 = (std::__shared_weak_count *)a1[1];
  v18 = *a1;
  v19 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>(v8, &v18, a2);
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (*a2 != a2[1])
  {
    v15 = *a1;
    std::string::basic_string[abi:ne180100]<0>(__p, "__type_memo__");
    v22 = __p;
    v16 = std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v15 + 32), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22);
    turi::any::operator=<std::vector<turi::flex_type_enum>>((_QWORD *)v16 + 7, (char **)a2);
LABEL_15:
    if (v21 < 0)
      operator delete(__p[0]);
  }
  return pthread_mutex_unlock(&turi::query_eval::global_query_lock);
}

void sub_2180B07FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void *v19;

  v19 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v19;
    operator delete(v19);
  }
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  _Unwind_Resume(a1);
}

void turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>(int a1@<W0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  char v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;

  switch(a1)
  {
    case 0:
      v4 = (std::__shared_weak_count *)a2[1];
      v95 = *a2;
      v96 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)0>::get((uint64_t)&v95, a3);
      v7 = v96;
      if (!v96)
        return;
      v8 = (unint64_t *)&v96->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_108;
    case 1:
      v10 = (std::__shared_weak_count *)a2[1];
      v93 = *a2;
      v94 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)1>::get((uint64_t)&v93, a3);
      v7 = v94;
      if (!v94)
        return;
      v13 = (unint64_t *)&v94->__shared_owners_;
      do
        v9 = __ldaxr(v13);
      while (__stlxr(v9 - 1, v13));
      goto LABEL_108;
    case 2:
      v14 = (std::__shared_weak_count *)a2[1];
      v91 = *a2;
      v92 = v14;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)2>::get((uint64_t)&v91, a3);
      v7 = v92;
      if (!v92)
        return;
      v17 = (unint64_t *)&v92->__shared_owners_;
      do
        v9 = __ldaxr(v17);
      while (__stlxr(v9 - 1, v17));
      goto LABEL_108;
    case 3:
      v18 = (std::__shared_weak_count *)a2[1];
      v89 = *a2;
      v90 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)3>::get((uint64_t)&v89, a3);
      v7 = v90;
      if (!v90)
        return;
      v21 = (unint64_t *)&v90->__shared_owners_;
      do
        v9 = __ldaxr(v21);
      while (__stlxr(v9 - 1, v21));
      goto LABEL_108;
    case 4:
      v22 = (std::__shared_weak_count *)a2[1];
      v87 = *a2;
      v88 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)4>::get((uint64_t)&v87, a3);
      v7 = v88;
      if (!v88)
        return;
      v25 = (unint64_t *)&v88->__shared_owners_;
      do
        v9 = __ldaxr(v25);
      while (__stlxr(v9 - 1, v25));
      goto LABEL_108;
    case 5:
      v26 = (std::__shared_weak_count *)a2[1];
      v85 = *a2;
      v86 = v26;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)5>::get((uint64_t)&v85, a3);
      v7 = v86;
      if (!v86)
        return;
      v29 = (unint64_t *)&v86->__shared_owners_;
      do
        v9 = __ldaxr(v29);
      while (__stlxr(v9 - 1, v29));
      goto LABEL_108;
    case 6:
      v30 = (std::__shared_weak_count *)a2[1];
      v83 = *a2;
      v84 = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)6>::get((uint64_t)&v83, a3);
      v7 = v84;
      if (!v84)
        return;
      v33 = (unint64_t *)&v84->__shared_owners_;
      do
        v9 = __ldaxr(v33);
      while (__stlxr(v9 - 1, v33));
      goto LABEL_108;
    case 7:
      v34 = (std::__shared_weak_count *)a2[1];
      v81 = *a2;
      v82 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)7>::get((uint64_t)&v81, a3);
      v7 = v82;
      if (!v82)
        return;
      v37 = (unint64_t *)&v82->__shared_owners_;
      do
        v9 = __ldaxr(v37);
      while (__stlxr(v9 - 1, v37));
      goto LABEL_108;
    case 8:
      v38 = (std::__shared_weak_count *)a2[1];
      v79 = *a2;
      v80 = v38;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)8>::get((uint64_t)&v79, a3);
      v7 = v80;
      if (!v80)
        return;
      v41 = (unint64_t *)&v80->__shared_owners_;
      do
        v9 = __ldaxr(v41);
      while (__stlxr(v9 - 1, v41));
      goto LABEL_108;
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)&v76);
    case 10:
      v42 = (std::__shared_weak_count *)a2[1];
      v77 = *a2;
      v78 = v42;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)10>::get((uint64_t)&v77, a3);
      v7 = v78;
      if (!v78)
        return;
      v45 = (unint64_t *)&v78->__shared_owners_;
      do
        v9 = __ldaxr(v45);
      while (__stlxr(v9 - 1, v45));
      goto LABEL_108;
    case 11:
      v46 = (std::__shared_weak_count *)a2[1];
      v74 = *a2;
      v75 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)11>::get((uint64_t)&v74, (uint64_t)a3);
      v7 = v75;
      if (!v75)
        return;
      v49 = (unint64_t *)&v75->__shared_owners_;
      do
        v9 = __ldaxr(v49);
      while (__stlxr(v9 - 1, v49));
      goto LABEL_108;
    case 12:
      v50 = (std::__shared_weak_count *)a2[1];
      v70 = *a2;
      v71 = v50;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)12>::get((uint64_t)&v70, a3);
      v7 = v71;
      if (!v71)
        return;
      v53 = (unint64_t *)&v71->__shared_owners_;
      do
        v9 = __ldaxr(v53);
      while (__stlxr(v9 - 1, v53));
      goto LABEL_108;
    case 13:
      v54 = (std::__shared_weak_count *)a2[1];
      v72 = *a2;
      v73 = v54;
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)13>::get((uint64_t)&v72, a3);
      v7 = v73;
      if (!v73)
        return;
      v57 = (unint64_t *)&v73->__shared_owners_;
      do
        v9 = __ldaxr(v57);
      while (__stlxr(v9 - 1, v57));
      goto LABEL_108;
    case 14:
      v58 = (std::__shared_weak_count *)a2[1];
      v68 = *a2;
      v69 = v58;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)14>::get((uint64_t)&v68, a3);
      v7 = v69;
      if (!v69)
        return;
      v61 = (unint64_t *)&v69->__shared_owners_;
      do
        v9 = __ldaxr(v61);
      while (__stlxr(v9 - 1, v61));
      goto LABEL_108;
    case 15:
      v62 = (std::__shared_weak_count *)a2[1];
      v66 = *a2;
      v67 = v62;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)15>::get(&v66, a3);
      v7 = v67;
      if (!v67)
        return;
      v65 = (unint64_t *)&v67->__shared_owners_;
      do
        v9 = __ldaxr(v65);
      while (__stlxr(v9 - 1, v65));
LABEL_108:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      break;
    case 16:
      assert_msg(0, "Infering type of an invalid node");
      goto LABEL_101;
    default:
LABEL_101:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      break;
  }
}

void sub_2180B0D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::operator=<std::vector<turi::flex_type_enum>>(_QWORD *a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *a1;
  if (v4
    && (v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4),
  {
    v6 = (char **)(*a1 + 8);
    if (v6 != a2)
      std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(v6, *a2, a2[1], a2[1] - *a2);
  }
  else
  {
    turi::any::any<std::vector<turi::flex_type_enum>>(&v10, (uint64_t)a2);
    v7 = v10;
    v10 = *a1;
    v8 = v10;
    *a1 = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t turi::query_eval::infer_planner_node_length(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int *v15;
  uint64_t *v16;
  int *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  void **v23;

  pthread_mutex_lock(&turi::query_eval::global_query_lock);
  v2 = *(int **)a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "__length_memo__");
  v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v2 + 8), (const void **)__p);
  v4 = v3;
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if (v4)
    {
LABEL_3:
      v5 = *(int **)a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "__length_memo__");
      v23 = __p;
      v6 = *(_QWORD *)(*((_QWORD *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v5 + 4, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 7)+ 8);
      if (v22 < 0)
        operator delete(__p[0]);
      goto LABEL_19;
    }
  }
  else if (v3)
  {
    goto LABEL_3;
  }
  v20 = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = **(_DWORD **)a1;
  v18 = *(int **)a1;
  v19 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = turi::query_eval::extract_field<turi::query_eval::visitor_infer_length,long long,std::shared_ptr<turi::query_eval::planner_node>>(v8, (uint64_t *)&v18);
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v20 = v11;
  if (v11 == -1)
  {
    v6 = -1;
  }
  else
  {
    v15 = *(int **)a1;
    std::string::basic_string[abi:ne180100]<0>(__p, "__length_memo__");
    v23 = __p;
    v16 = (uint64_t *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v15 + 4, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23);
    turi::any::operator=<long long>(v16 + 7, &v20);
    if (v22 < 0)
      operator delete(__p[0]);
    v6 = v20;
  }
LABEL_19:
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  return v6;
}

void sub_2180B1078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::extract_field<turi::query_eval::visitor_infer_length,long long,std::shared_ptr<turi::query_eval::planner_node>>(int a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  char v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;

  switch(a1)
  {
    case 0:
      v2 = (std::__shared_weak_count *)a2[1];
      v95 = *a2;
      v96 = v2;
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v4 = __ldxr(p_shared_owners);
        while (__stxr(v4 + 1, p_shared_owners));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)0>::get((uint64_t)&v95);
      v6 = v96;
      if (!v96)
        return v5;
      v7 = (unint64_t *)&v96->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      goto LABEL_108;
    case 1:
      v9 = (std::__shared_weak_count *)a2[1];
      v93 = *a2;
      v94 = v9;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)1>::get((uint64_t)&v93);
      v6 = v94;
      if (!v94)
        return v5;
      v12 = (unint64_t *)&v94->__shared_owners_;
      do
        v8 = __ldaxr(v12);
      while (__stlxr(v8 - 1, v12));
      goto LABEL_108;
    case 2:
      v13 = (std::__shared_weak_count *)a2[1];
      v91 = *a2;
      v92 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)2>::get((uint64_t)&v91);
      v6 = v92;
      if (!v92)
        return v5;
      v16 = (unint64_t *)&v92->__shared_owners_;
      do
        v8 = __ldaxr(v16);
      while (__stlxr(v8 - 1, v16));
      goto LABEL_108;
    case 3:
      v17 = (std::__shared_weak_count *)a2[1];
      v89 = *a2;
      v90 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)3>::get((uint64_t)&v89);
      v6 = v90;
      if (!v90)
        return v5;
      v20 = (unint64_t *)&v90->__shared_owners_;
      do
        v8 = __ldaxr(v20);
      while (__stlxr(v8 - 1, v20));
      goto LABEL_108;
    case 4:
      v21 = (std::__shared_weak_count *)a2[1];
      v87 = *a2;
      v88 = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)4>::get((uint64_t)&v87);
      v6 = v88;
      if (!v88)
        return v5;
      v24 = (unint64_t *)&v88->__shared_owners_;
      do
        v8 = __ldaxr(v24);
      while (__stlxr(v8 - 1, v24));
      goto LABEL_108;
    case 5:
      v25 = (std::__shared_weak_count *)a2[1];
      v85 = *a2;
      v86 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)5>::get((uint64_t)&v85);
      v6 = v86;
      if (!v86)
        return v5;
      v28 = (unint64_t *)&v86->__shared_owners_;
      do
        v8 = __ldaxr(v28);
      while (__stlxr(v8 - 1, v28));
      goto LABEL_108;
    case 6:
      v29 = (std::__shared_weak_count *)a2[1];
      v83 = *a2;
      v84 = v29;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)6>::get((uint64_t)&v83);
      v6 = v84;
      if (!v84)
        return v5;
      v32 = (unint64_t *)&v84->__shared_owners_;
      do
        v8 = __ldaxr(v32);
      while (__stlxr(v8 - 1, v32));
      goto LABEL_108;
    case 7:
      v33 = (std::__shared_weak_count *)a2[1];
      v81 = *a2;
      v82 = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)7>::get((uint64_t)&v81);
      v6 = v82;
      if (!v82)
        return v5;
      v36 = (unint64_t *)&v82->__shared_owners_;
      do
        v8 = __ldaxr(v36);
      while (__stlxr(v8 - 1, v36));
      goto LABEL_108;
    case 8:
      v37 = (std::__shared_weak_count *)a2[1];
      v79 = *a2;
      v80 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)8>::get((uint64_t)&v79);
      v6 = v80;
      if (!v80)
        return v5;
      v40 = (unint64_t *)&v80->__shared_owners_;
      do
        v8 = __ldaxr(v40);
      while (__stlxr(v8 - 1, v40));
      goto LABEL_108;
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)&v76);
    case 10:
      v41 = (std::__shared_weak_count *)a2[1];
      v77 = *a2;
      v78 = v41;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)10>::get(&v77);
      v6 = v78;
      if (!v78)
        return v5;
      v44 = (unint64_t *)&v78->__shared_owners_;
      do
        v8 = __ldaxr(v44);
      while (__stlxr(v8 - 1, v44));
      goto LABEL_108;
    case 11:
      v45 = (std::__shared_weak_count *)a2[1];
      v74 = *a2;
      v75 = v45;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)11>::get((uint64_t)&v74);
      v6 = v75;
      if (!v75)
        return v5;
      v48 = (unint64_t *)&v75->__shared_owners_;
      do
        v8 = __ldaxr(v48);
      while (__stlxr(v8 - 1, v48));
      goto LABEL_108;
    case 12:
      v49 = (std::__shared_weak_count *)a2[1];
      v70 = *a2;
      v71 = v49;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)12>::get((uint64_t)&v70);
      v6 = v71;
      if (!v71)
        return v5;
      v52 = (unint64_t *)&v71->__shared_owners_;
      do
        v8 = __ldaxr(v52);
      while (__stlxr(v8 - 1, v52));
      goto LABEL_108;
    case 13:
      v53 = (std::__shared_weak_count *)a2[1];
      v72 = *a2;
      v73 = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)3>::get((uint64_t)&v72);
      v6 = v73;
      if (!v73)
        return v5;
      v56 = (unint64_t *)&v73->__shared_owners_;
      do
        v8 = __ldaxr(v56);
      while (__stlxr(v8 - 1, v56));
      goto LABEL_108;
    case 14:
      v57 = (std::__shared_weak_count *)a2[1];
      v68 = *a2;
      v69 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)14>::get((uint64_t)&v68);
      v6 = v69;
      if (!v69)
        return v5;
      v60 = (unint64_t *)&v69->__shared_owners_;
      do
        v8 = __ldaxr(v60);
      while (__stlxr(v8 - 1, v60));
      goto LABEL_108;
    case 15:
      v61 = (std::__shared_weak_count *)a2[1];
      v66 = *a2;
      v67 = v61;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      v5 = turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)15>::get(&v66);
      v6 = v67;
      if (!v67)
        return v5;
      v64 = (unint64_t *)&v67->__shared_owners_;
      do
        v8 = __ldaxr(v64);
      while (__stlxr(v8 - 1, v64));
LABEL_108:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    case 16:
      assert_msg(0, "Infering type of an invalid node");
      goto LABEL_101;
    default:
LABEL_101:
      v5 = 0;
      break;
  }
  return v5;
}

void sub_2180B15CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *turi::any::operator=<long long>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  if (v4
    && (v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4),
        std::type_info::operator==[abi:ne180100](v5, MEMORY[0x24BEDB7D0])))
  {
    *(_QWORD *)(*a1 + 8) = *a2;
  }
  else
  {
    v6 = (_QWORD *)operator new();
    v7 = *a2;
    *v6 = &unk_24D92D7F0;
    v6[1] = v7;
    v8 = *a1;
    *a1 = (uint64_t)v6;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return a1;
}

int64_t turi::query_eval::infer_planner_node_num_output_columns(uint64_t *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9[2];
  _BYTE *v10;
  _BYTE *v11;

  v1 = (std::__shared_weak_count *)a1[1];
  v9[0] = *a1;
  v9[1] = (uint64_t)v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  turi::query_eval::infer_planner_node_type(v9, (unint64_t *)&v10);
  v4 = v10;
  v5 = v11;
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v1)
  {
    v6 = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  return v5 - v4;
}

void sub_2180B17C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::infer_planner_node_num_dependency_nodes(unint64_t *a1)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;

  pthread_mutex_lock(&turi::query_eval::global_query_lock);
  v13 = 0;
  v14 = 0;
  v2 = a1[1];
  v10 = *a1;
  v11 = (std::__shared_weak_count *)v2;
  v12 = &v13;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  turi::query_eval::_fill_dependency_set(&v10, (uint64_t)&v12);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&v12, v13);
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  return v8;
}

void sub_2180B18A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&a12, a13);
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  _Unwind_Resume(a1);
}

void turi::query_eval::_fill_dependency_set(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = *(_QWORD **)(a2 + 8);
  if (v4)
  {
    v5 = *a1;
    do
    {
      v6 = v4[4];
      if (v5 >= v6)
      {
        if (v6 >= v5)
          return;
        ++v4;
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::execution_node>,std::shared_ptr<turi::query_eval::execution_node> const&>((uint64_t **)a2, a1, (uint64_t *)a1);
  v7 = *(uint64_t **)(*a1 + 56);
  v8 = *(uint64_t **)(*a1 + 64);
  while (v7 != v8)
  {
    v9 = *v7;
    v10 = (std::__shared_weak_count *)v7[1];
    v22 = *v7;
    v23 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v20 = v9;
      v21 = v10;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    else
    {
      v20 = v9;
      v21 = 0;
    }
    turi::query_eval::_fill_dependency_set(&v20, a2);
    v14 = v21;
    if (v21)
    {
      v15 = (unint64_t *)&v21->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v23;
    if (v23)
    {
      v18 = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v7 += 2;
  }
}

void sub_2180B1A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void turi::query_eval::planner_node_to_operator(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v2;
  int *v3;
  int v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int *v10;
  std::__shared_weak_count *v11;

  v3 = *(int **)a1;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v4 = **(_DWORD **)a1;
  v10 = v3;
  v11 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  turi::query_eval::extract_field<turi::query_eval::visitor_planner_to_operator,std::shared_ptr<turi::query_eval::query_operator>,std::shared_ptr<turi::query_eval::planner_node>>(v4, (uint64_t *)&v10, a2);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_2180B1AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::extract_field<turi::query_eval::visitor_planner_to_operator,std::shared_ptr<turi::query_eval::query_operator>,std::shared_ptr<turi::query_eval::planner_node>>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD v65[2];
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  char v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;

  switch(a1)
  {
    case 0:
      v4 = (std::__shared_weak_count *)a2[1];
      v93 = *a2;
      v94 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)0>::get((uint64_t)&v93, (_OWORD *)a3);
      v7 = v94;
      if (!v94)
        return;
      v8 = (unint64_t *)&v94->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_106;
    case 1:
      v10 = (std::__shared_weak_count *)a2[1];
      v91 = *a2;
      v92 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)1>::get(&v91, (_QWORD *)a3);
      v7 = v92;
      if (!v92)
        return;
      v13 = (unint64_t *)&v92->__shared_owners_;
      do
        v9 = __ldaxr(v13);
      while (__stlxr(v9 - 1, v13));
      goto LABEL_106;
    case 2:
      v14 = (std::__shared_weak_count *)a2[1];
      v89 = *a2;
      v90 = v14;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)2>::get(&v89, (_OWORD *)a3);
      v7 = v90;
      if (!v90)
        return;
      v17 = (unint64_t *)&v90->__shared_owners_;
      do
        v9 = __ldaxr(v17);
      while (__stlxr(v9 - 1, v17));
      goto LABEL_106;
    case 3:
      v18 = (std::__shared_weak_count *)a2[1];
      v87 = *a2;
      v88 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)3>::get((uint64_t)&v87, (_QWORD *)a3);
      v7 = v88;
      if (!v88)
        return;
      v21 = (unint64_t *)&v88->__shared_owners_;
      do
        v9 = __ldaxr(v21);
      while (__stlxr(v9 - 1, v21));
      goto LABEL_106;
    case 4:
      v22 = (std::__shared_weak_count *)a2[1];
      v85 = *a2;
      v86 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)4>::get((uint64_t)&v85, (_OWORD *)a3);
      v7 = v86;
      if (!v86)
        return;
      v25 = (unint64_t *)&v86->__shared_owners_;
      do
        v9 = __ldaxr(v25);
      while (__stlxr(v9 - 1, v25));
      goto LABEL_106;
    case 5:
      v26 = (std::__shared_weak_count *)a2[1];
      v83 = *a2;
      v84 = v26;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)5>::get((uint64_t)&v83, (_OWORD *)a3);
      v7 = v84;
      if (!v84)
        return;
      v29 = (unint64_t *)&v84->__shared_owners_;
      do
        v9 = __ldaxr(v29);
      while (__stlxr(v9 - 1, v29));
      goto LABEL_106;
    case 6:
      v30 = (std::__shared_weak_count *)a2[1];
      v81 = *a2;
      v82 = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)6>::get((uint64_t)&v81, (_OWORD *)a3);
      v7 = v82;
      if (!v82)
        return;
      v33 = (unint64_t *)&v82->__shared_owners_;
      do
        v9 = __ldaxr(v33);
      while (__stlxr(v9 - 1, v33));
      goto LABEL_106;
    case 7:
      v34 = (std::__shared_weak_count *)a2[1];
      v79 = *a2;
      v80 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)7>::get((uint64_t)&v79, (_OWORD *)a3);
      v7 = v80;
      if (!v80)
        return;
      v37 = (unint64_t *)&v80->__shared_owners_;
      do
        v9 = __ldaxr(v37);
      while (__stlxr(v9 - 1, v37));
      goto LABEL_106;
    case 8:
      v38 = (std::__shared_weak_count *)a2[1];
      v77 = *a2;
      v78 = v38;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)8>::get(&v77, (_OWORD *)a3);
      v7 = v78;
      if (!v78)
        return;
      v41 = (unint64_t *)&v78->__shared_owners_;
      do
        v9 = __ldaxr(v41);
      while (__stlxr(v9 - 1, v41));
      goto LABEL_106;
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)&v74);
    case 10:
      v42 = (std::__shared_weak_count *)a2[1];
      v75 = *a2;
      v76 = v42;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)10>::get((uint64_t)&v75, (_OWORD *)a3);
      v7 = v76;
      if (!v76)
        return;
      v45 = (unint64_t *)&v76->__shared_owners_;
      do
        v9 = __ldaxr(v45);
      while (__stlxr(v9 - 1, v45));
      goto LABEL_106;
    case 11:
      v46 = (std::__shared_weak_count *)a2[1];
      v72 = *a2;
      v73 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)11>::get((uint64_t)&v72, (_QWORD *)a3);
      v7 = v73;
      if (!v73)
        return;
      v49 = (unint64_t *)&v73->__shared_owners_;
      do
        v9 = __ldaxr(v49);
      while (__stlxr(v9 - 1, v49));
      goto LABEL_106;
    case 12:
      v50 = (std::__shared_weak_count *)a2[1];
      v68 = *a2;
      v69 = v50;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)12>::get((uint64_t)&v68, (_QWORD *)a3);
      v7 = v69;
      if (!v69)
        return;
      v53 = (unint64_t *)&v69->__shared_owners_;
      do
        v9 = __ldaxr(v53);
      while (__stlxr(v9 - 1, v53));
      goto LABEL_106;
    case 13:
      v54 = (std::__shared_weak_count *)a2[1];
      v70 = *a2;
      v71 = v54;
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)13>::get(&v70, (_OWORD *)a3);
      v7 = v71;
      if (!v71)
        return;
      v57 = (unint64_t *)&v71->__shared_owners_;
      do
        v9 = __ldaxr(v57);
      while (__stlxr(v9 - 1, v57));
      goto LABEL_106;
    case 14:
      v58 = (std::__shared_weak_count *)a2[1];
      v66 = *a2;
      v67 = v58;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)14>::get((uint64_t)&v66, (_QWORD *)a3);
      v7 = v67;
      if (!v67)
        return;
      v61 = (unint64_t *)&v67->__shared_owners_;
      do
        v9 = __ldaxr(v61);
      while (__stlxr(v9 - 1, v61));
LABEL_106:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      break;
    case 15:
      v62 = a2[1];
      v65[0] = *a2;
      v65[1] = v62;
      if (v62)
      {
        v63 = (unint64_t *)(v62 + 8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)15>::get((uint64_t)v65);
    case 16:
      assert_msg(0, "Infering type of an invalid node");
      goto LABEL_101;
    default:
LABEL_101:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      break;
  }
}

void sub_2180B1FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::query_eval::extract_field<turi::query_eval::visitor_get_name,std::string>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char v4;

  switch((int)result)
  {
    case 0:
      v3 = "constant";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 1:
      v3 = "append";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 2:
      v3 = "binary_transform";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 3:
      v3 = "logical_filter";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 4:
      v3 = "project";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 5:
      v3 = "range";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 6:
      v3 = "sarray_source";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 7:
      v3 = "sframe_source";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 8:
      v3 = "transform";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)&v4);
    case 10:
      v3 = "generalized_transform";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 11:
      v3 = "union";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 12:
      v3 = "union-project";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 13:
      v3 = "reduce";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 14:
      v3 = "ternary";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 15:
      v3 = "identity_node";
      return std::string::basic_string[abi:ne180100]<0>(a2, v3);
    case 16:
      result = (_QWORD *)assert_msg(0, "Infering type of an invalid node");
      goto LABEL_19;
    default:
LABEL_19:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return result;
  }
}

uint64_t turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(int a1)
{
  char v2;

  switch(a1)
  {
    case 0:
    case 5:
      return 4;
    case 1:
      return 0;
    case 2:
      return 1;
    case 3:
      return 2;
    case 4:
    case 8:
    case 10:
      return 1;
    case 6:
    case 7:
      return 260;
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)&v2);
    case 11:
    case 12:
      return 1;
    case 13:
      return 2;
    case 14:
      return 1;
    case 15:
      return 8;
    case 16:
      assert_msg(0, "Infering type of an invalid node");
      return 0;
    default:
      return 0;
  }
}

uint64_t turi::query_eval::consumes_inputs_at_same_rates(int **a1)
{
  unint64_t operator;
  int v2;

  operator = turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(**a1);
  if (v2 != 1 && (operator & 1) == 0)
    return (operator >> 1) & 1;
  else
    return 1;
}

uint64_t turi::query_eval::is_linear_transform(uint64_t a1)
{
  if (((*(_QWORD *)a1 & 3) != 0 || *(_DWORD *)(a1 + 8) == 1) && (*(_QWORD *)a1 & 4) == 0)
    return *(_QWORD *)a1 & 1;
  else
    return 0;
}

uint64_t turi::query_eval::is_source_node(unsigned __int8 *a1)
{
  return (*a1 >> 2) & 1;
}

uint64_t turi::query_eval::is_linear_transform(int **a1)
{
  char operator;
  int v2;

  operator = turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(**a1);
  if (((operator & 3) != 0 || v2 == 1) && (operator & 4) == 0)
    return operator & 1;
  else
    return 0;
}

uint64_t turi::query_eval::is_sublinear_transform(int **a1)
{
  unint64_t operator;
  int v2;

  operator = turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(**a1);
  if (((operator & 3) != 0 || v2 == 1) && (operator & 4) == 0)
    return (operator >> 1) & 1;
  else
    return 0;
}

unint64_t turi::query_eval::is_source_node(int **a1)
{
  return ((unint64_t)turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(**a1) >> 2) & 1;
}

BOOL turi::query_eval::is_parallel_slicable(int **a1)
{
  _BOOL8 v1;
  uint64_t v3;
  _QWORD **v4;
  _QWORD *v5[2];

  v5[0] = 0;
  v5[1] = 0;
  v3 = 1;
  v4 = v5;
  v1 = turi::query_eval::_propagate_parallel_slicing(a1, (uint64_t)&v4, (uint64_t)&v3) != -1;
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&v4, v5[0]);
  return v1;
}

void sub_2180B2404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::_propagate_parallel_slicing(int **a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  int *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  char is_linear_transform;
  int is_sublinear_transform;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v22;
  int **v24;

  v6 = *(_QWORD **)(a2 + 8);
  v7 = *a1;
  if (v6)
  {
    v8 = (_QWORD *)(a2 + 8);
    do
    {
      v9 = v6[4];
      v10 = v9 >= (unint64_t)v7;
      if (v9 >= (unint64_t)v7)
        v11 = v6;
      else
        v11 = v6 + 1;
      if (v10)
        v8 = v6;
      v6 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != (_QWORD *)(a2 + 8) && (unint64_t)v7 >= v8[4])
      return v8[6];
  }
  if ((turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(*v7) & 4) != 0)
    return 1;
  is_linear_transform = turi::query_eval::is_linear_transform(a1);
  is_sublinear_transform = turi::query_eval::is_sublinear_transform(a1);
  v14 = is_sublinear_transform;
  if ((is_linear_transform & 1) == 0 && !is_sublinear_transform)
    return -1;
  v16 = *((_QWORD *)*a1 + 7);
  if (v16 == *((_QWORD *)*a1 + 8))
    turi::query_eval::_propagate_parallel_slicing(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,unsigned long> &,unsigned long &)::$_0::operator()();
  v15 = turi::query_eval::_propagate_parallel_slicing(v16, a2, a3);
  if (v15 != -1)
  {
    v17 = *((_QWORD *)*a1 + 7);
    if ((unint64_t)(*((_QWORD *)*a1 + 8) - v17) >= 0x11)
    {
      v18 = 1;
      v19 = 16;
      do
      {
        v20 = turi::query_eval::_propagate_parallel_slicing(v17 + v19, a2, a3);
        if (v20 == -1 || v20 != v15)
          return -1;
        ++v18;
        v17 = *((_QWORD *)*a1 + 7);
        v19 += 16;
      }
      while (v18 < (*((_QWORD *)*a1 + 8) - v17) >> 4);
    }
    if (v14)
    {
      v22 = (uint64_t *)(*(_QWORD *)a3 + 1);
      *(_QWORD *)a3 = v22;
      v24 = a1;
      std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v24)[6] = v22;
      return *(_QWORD *)a3;
    }
  }
  return v15;
}

BOOL turi::query_eval::_is_linear_graph(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t is_linear_graph;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v11;

  v4 = *(_QWORD **)(a2 + 8);
  if (v4)
  {
    v5 = *a1;
    do
    {
      v6 = v4[4];
      if (v5 >= v6)
      {
        if (v6 >= v5)
        {
          v11 = a1;
          return *((_BYTE *)std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, a1, (uint64_t)&std::piecewise_construct, &v11)+ 48) != 0;
        }
        ++v4;
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  if ((turi::query_eval::is_linear_transform((int **)a1) & 1) != 0
    || (turi::query_eval::extract_field<turi::query_eval::visitor_get_attributes,turi::query_eval::query_operator_attributes>(*(_DWORD *)*a1) & 4) != 0)
  {
    v8 = *(_QWORD *)(*a1 + 56);
    v9 = *(_QWORD *)(*a1 + 64);
    if (v8 == v9)
    {
      is_linear_graph = 1;
    }
    else
    {
      do
      {
        is_linear_graph = turi::query_eval::is_linear_graph(v8);
        if (!(_DWORD)is_linear_graph)
          break;
        v8 += 16;
      }
      while (v8 != v9);
    }
  }
  else
  {
    is_linear_graph = 0;
  }
  v11 = a1;
  *((_BYTE *)std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, a1, (uint64_t)&std::piecewise_construct, &v11)+ 48) = is_linear_graph;
  return is_linear_graph;
}

BOOL turi::query_eval::is_linear_graph(unint64_t *a1)
{
  _BOOL8 is_linear_graph;
  _QWORD **v3;
  _QWORD *v4[2];

  v4[0] = 0;
  v4[1] = 0;
  v3 = v4;
  is_linear_graph = turi::query_eval::_is_linear_graph(a1, (uint64_t)&v3);
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&v3, v4[0]);
  return is_linear_graph;
}

void sub_2180B2704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::prove_equal_length(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  _BOOL4 v10;
  BOOL v11;
  _QWORD **v13;
  _QWORD *v14[2];

  v14[0] = 0;
  v14[1] = 0;
  v13 = v14;
  v3 = turi::query_eval::propagate_length(a1, (uint64_t)&v13);
  v5 = v4;
  v6 = turi::query_eval::propagate_length(a2, (uint64_t)&v13);
  if (v3 == -1 || v6 == -1)
  {
    v10 = v5 == v7;
    if (v6 != -1)
      v10 = 0;
    v11 = v3 == -1;
    v9 = v3 == -1 && v10;
    v8 = v11 && v10;
  }
  else
  {
    v8 = v3 == v6;
    v9 = 1;
  }
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&v13, v14[0]);
  return v9 | (v8 << 8);
}

void sub_2180B27C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::propagate_length(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t **v17;
  int is_linear_transform;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  _QWORD v25[2];
  uint64_t *v26;

  v4 = *(_QWORD **)(a2 + 8);
  v5 = *a1;
  if (v4)
  {
    v6 = (_QWORD *)(a2 + 8);
    do
    {
      v7 = v4[4];
      v8 = v7 >= v5;
      if (v7 >= v5)
        v9 = v4;
      else
        v9 = v4 + 1;
      if (v8)
        v6 = v4;
      v4 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != (_QWORD *)(a2 + 8) && v5 >= v6[4])
      return v6[6];
  }
  v10 = (std::__shared_weak_count *)a1[1];
  v25[0] = *a1;
  v25[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = turi::query_eval::infer_planner_node_length((uint64_t)v25);
  v14 = v13;
  if (!v10)
    goto LABEL_19;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_20;
  }
  else
  {
LABEL_19:
    if ((v13 & 0x8000000000000000) == 0)
    {
LABEL_20:
      v26 = a1;
      v17 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, &v26);
      v17[6] = (uint64_t *)v14;
      v17[7] = 0;
      return v14;
    }
  }
  is_linear_transform = turi::query_eval::is_linear_transform((int **)a1);
  v19 = *a1;
  if (!is_linear_transform)
    return -1;
  v20 = *(_QWORD *)(v19 + 56);
  if (v20 == *(_QWORD *)(v19 + 64))
    turi::query_eval::propagate_length(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info> &)::$_0::operator()();
  v14 = turi::query_eval::propagate_length(v20, a2);
  v22 = v21;
  v26 = a1;
  v23 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, &v26);
  v23[6] = (uint64_t *)v14;
  v23[7] = v22;
  return v14;
}

void turi::query_eval::extract_field<turi::query_eval::visitor_repr,std::string,std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>>(int a1@<W0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unsigned int *v67;
  std::__shared_weak_count *v68;
  unsigned int *v69;
  std::__shared_weak_count *v70;
  unsigned int *v71;
  std::__shared_weak_count *v72;
  unsigned int *v73;
  std::__shared_weak_count *v74;
  unsigned int *v75;
  std::__shared_weak_count *v76;
  char v77;
  unsigned int *v78;
  std::__shared_weak_count *v79;
  unsigned int *v80;
  std::__shared_weak_count *v81;
  unsigned int *v82;
  std::__shared_weak_count *v83;
  unsigned int *v84;
  std::__shared_weak_count *v85;
  unsigned int *v86;
  std::__shared_weak_count *v87;
  unsigned int *v88;
  std::__shared_weak_count *v89;
  unsigned int *v90;
  std::__shared_weak_count *v91;
  unsigned int *v92;
  std::__shared_weak_count *v93;
  unsigned int *v94;
  std::__shared_weak_count *v95;
  unsigned int *v96;
  std::__shared_weak_count *v97;

  switch(a1)
  {
    case 0:
      v5 = (std::__shared_weak_count *)a2[1];
      v96 = *a2;
      v97 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)0>::get((uint64_t)&v96);
      v8 = v97;
      if (!v97)
        return;
      v9 = (unint64_t *)&v97->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_108;
    case 1:
      v11 = (std::__shared_weak_count *)a2[1];
      v94 = *a2;
      v95 = v11;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)1>::get((uint64_t *)&v94, a3, a4);
      v8 = v95;
      if (!v95)
        return;
      v14 = (unint64_t *)&v95->__shared_owners_;
      do
        v10 = __ldaxr(v14);
      while (__stlxr(v10 - 1, v14));
      goto LABEL_108;
    case 2:
      v15 = (std::__shared_weak_count *)a2[1];
      v92 = *a2;
      v93 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(&v92, a4);
      v8 = v93;
      if (!v93)
        return;
      v18 = (unint64_t *)&v93->__shared_owners_;
      do
        v10 = __ldaxr(v18);
      while (__stlxr(v10 - 1, v18));
      goto LABEL_108;
    case 3:
      v19 = (std::__shared_weak_count *)a2[1];
      v90 = *a2;
      v91 = v19;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)3>::get((uint64_t *)&v90, a3, a4);
      v8 = v91;
      if (!v91)
        return;
      v22 = (unint64_t *)&v91->__shared_owners_;
      do
        v10 = __ldaxr(v22);
      while (__stlxr(v10 - 1, v22));
      goto LABEL_108;
    case 4:
      v23 = (std::__shared_weak_count *)a2[1];
      v88 = *a2;
      v89 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)4>::get((uint64_t)&v88);
      v8 = v89;
      if (!v89)
        return;
      v26 = (unint64_t *)&v89->__shared_owners_;
      do
        v10 = __ldaxr(v26);
      while (__stlxr(v10 - 1, v26));
      goto LABEL_108;
    case 5:
      v27 = (std::__shared_weak_count *)a2[1];
      v86 = *a2;
      v87 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)5>::get((uint64_t)&v86);
      v8 = v87;
      if (!v87)
        return;
      v30 = (unint64_t *)&v87->__shared_owners_;
      do
        v10 = __ldaxr(v30);
      while (__stlxr(v10 - 1, v30));
      goto LABEL_108;
    case 6:
      v31 = (std::__shared_weak_count *)a2[1];
      v84 = *a2;
      v85 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)6>::get((uint64_t *)&v84);
      v8 = v85;
      if (!v85)
        return;
      v34 = (unint64_t *)&v85->__shared_owners_;
      do
        v10 = __ldaxr(v34);
      while (__stlxr(v10 - 1, v34));
      goto LABEL_108;
    case 7:
      v35 = (std::__shared_weak_count *)a2[1];
      v82 = *a2;
      v83 = v35;
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)7>::get((uint64_t *)&v82);
      v8 = v83;
      if (!v83)
        return;
      v38 = (unint64_t *)&v83->__shared_owners_;
      do
        v10 = __ldaxr(v38);
      while (__stlxr(v10 - 1, v38));
      goto LABEL_108;
    case 8:
      v39 = (std::__shared_weak_count *)a2[1];
      v80 = *a2;
      v81 = v39;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(&v80, a4);
      v8 = v81;
      if (!v81)
        return;
      v42 = (unint64_t *)&v81->__shared_owners_;
      do
        v10 = __ldaxr(v42);
      while (__stlxr(v10 - 1, v42));
      goto LABEL_108;
    case 9:
      turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)&v77);
    case 10:
      v43 = (std::__shared_weak_count *)a2[1];
      v78 = *a2;
      v79 = v43;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)10>::get((uint64_t *)&v78, a4);
      v8 = v79;
      if (!v79)
        return;
      v46 = (unint64_t *)&v79->__shared_owners_;
      do
        v10 = __ldaxr(v46);
      while (__stlxr(v10 - 1, v46));
      goto LABEL_108;
    case 11:
      v47 = (std::__shared_weak_count *)a2[1];
      v75 = *a2;
      v76 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)11>::get((uint64_t *)&v75, a3);
      v8 = v76;
      if (!v76)
        return;
      v50 = (unint64_t *)&v76->__shared_owners_;
      do
        v10 = __ldaxr(v50);
      while (__stlxr(v10 - 1, v50));
      goto LABEL_108;
    case 12:
      v51 = (std::__shared_weak_count *)a2[1];
      v71 = *a2;
      v72 = v51;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)12>::get((uint64_t *)&v71, a3);
      v8 = v72;
      if (!v72)
        return;
      v54 = (unint64_t *)&v72->__shared_owners_;
      do
        v10 = __ldaxr(v54);
      while (__stlxr(v10 - 1, v54));
      goto LABEL_108;
    case 13:
      v55 = (std::__shared_weak_count *)a2[1];
      v73 = *a2;
      v74 = v55;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(&v73, a4);
      v8 = v74;
      if (!v74)
        return;
      v58 = (unint64_t *)&v74->__shared_owners_;
      do
        v10 = __ldaxr(v58);
      while (__stlxr(v10 - 1, v58));
      goto LABEL_108;
    case 14:
      v59 = (std::__shared_weak_count *)a2[1];
      v69 = *a2;
      v70 = v59;
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(&v69, a4);
      v8 = v70;
      if (!v70)
        return;
      v62 = (unint64_t *)&v70->__shared_owners_;
      do
        v10 = __ldaxr(v62);
      while (__stlxr(v10 - 1, v62));
      goto LABEL_108;
    case 15:
      v63 = (std::__shared_weak_count *)a2[1];
      v67 = *a2;
      v68 = v63;
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }
      turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(&v67, a4);
      v8 = v68;
      if (!v68)
        return;
      v66 = (unint64_t *)&v68->__shared_owners_;
      do
        v10 = __ldaxr(v66);
      while (__stlxr(v10 - 1, v66));
LABEL_108:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      break;
    case 16:
      assert_msg(0, "Infering type of an invalid node");
      goto LABEL_101;
    default:
LABEL_101:
      a4->__r_.__value_.__r.__words[0] = 0;
      a4->__r_.__value_.__l.__size_ = 0;
      a4->__r_.__value_.__r.__words[2] = 0;
      break;
  }
}

void sub_2180B2E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::query_eval::operator<<(_QWORD *a1, uint64_t *a2)
{
  void **v4;
  _QWORD *v5[2];
  std::vector<std::pair<std::string, std::string>> v6;
  _QWORD v7[3];
  _QWORD **v8;
  _QWORD *v9[2];

  v6.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)&v6.__end_;
  v6.__end_ = 0;
  v6.__end_cap_.__value_ = 0;
  memset(v7, 0, sizeof(v7));
  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  v5[0] = 0;
  v5[1] = 0;
  v4 = (void **)v5;
  turi::query_eval::recursive_print_impl(a2, (uint64_t)&v4, &v6);
  turi::dot_graph::print(&v6, a1);
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::destroy((uint64_t)&v4, v5[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v8, v9[0]);
  v4 = (void **)v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v6, (char *)v6.__end_);
  return a1;
}

void sub_2180B300C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12)
{
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::destroy((uint64_t)&a9, a10);
  turi::dot_graph::~dot_graph((turi::dot_graph *)&a12);
  _Unwind_Resume(a1);
}

std::vector<std::pair<std::string, std::string>> *turi::query_eval::recursive_print_impl(uint64_t *a1, uint64_t a2, std::vector<std::pair<std::string, std::string>> *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *i;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int *v40;
  std::__shared_weak_count *v41;
  std::string __p;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string v45;
  std::string __str;
  std::string v47;
  std::string v48;
  void *v49;
  char v50;
  _BYTE v51[24];
  _BYTE *v52;
  _QWORD v53[3];
  _QWORD *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v53[0] = &off_24D92D3E8;
  v53[1] = a2;
  v54 = v53;
  std::to_string(&v47, *a1);
  v6 = a1[1];
  v43 = *a1;
  v44 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (!v54)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t *))(*v54 + 48))(&v45, v54, &v43);
  v9 = std::string::append(&v45, ": ");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = a1[1];
  v12 = *(_DWORD *)*a1;
  v40 = (unsigned int *)*a1;
  v41 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (uint64_t)v54;
  if (!v54)
    goto LABEL_11;
  if (v54 != v53)
  {
    v15 = (*(uint64_t (**)(_QWORD *))(*v54 + 16))(v54);
LABEL_11:
    v52 = (_BYTE *)v15;
    goto LABEL_13;
  }
  v52 = v51;
  (*(void (**)(_QWORD *, _BYTE *))(v53[0] + 24))(v53, v51);
LABEL_13:
  turi::query_eval::extract_field<turi::query_eval::visitor_repr,std::string,std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>>(v12, &v40, (uint64_t)v51, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v48, (const std::string::value_type *)p_p, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20 = v52;
  if (v52 == v51)
  {
    v21 = 4;
    v20 = v51;
    goto LABEL_25;
  }
  if (v52)
  {
    v21 = 5;
LABEL_25:
    (*(void (**)(_QWORD *))(*v20 + 8 * v21))(v20);
  }
  v22 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v25 = v44;
  if (v44)
  {
    v26 = (unint64_t *)&v44->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a3, (const void **)&v47.__r_.__value_.__l.__data_))
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, (const void **)&v47.__r_.__value_.__l.__data_, (uint64_t)&v47);
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
    v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&a3[2], (const void **)&v47.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v48);
    std::string::operator=((std::string *)(v28 + 7), &__str);
    v29 = *(uint64_t **)(*a1 + 56);
    for (i = *(uint64_t **)(*a1 + 64); v29 != i; v29 += 2)
    {
      v31 = *v29;
      v32 = (std::__shared_weak_count *)v29[1];
      __p.__r_.__value_.__r.__words[0] = *v29;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      std::to_string(&v45, v31);
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v48, (__int128 *)&v45, (__int128 *)&v47);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a3 + 1, (__int128 *)&v48);
      if (v50 < 0)
        operator delete(v49);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      turi::query_eval::recursive_print_impl(&__p, a2, a3);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v45.__r_.__value_.__l.__data_);
        if (v32)
        {
LABEL_53:
          v35 = (unint64_t *)&v32->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      else if (v32)
      {
        goto LABEL_53;
      }
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  v37 = v54;
  if (v54 == v53)
  {
    v38 = 4;
    v37 = v53;
    goto LABEL_66;
  }
  if (v54)
  {
    v38 = 5;
LABEL_66:
    (*(void (**)(_QWORD *))(*v37 + 8 * v38))(v37);
  }
  return a3;
}

void sub_2180B3434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  _QWORD *v44;
  uint64_t v45;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a42 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a36 < 0)
    operator delete(a31);
  v44 = *(_QWORD **)(v42 - 80);
  if (v44 == (_QWORD *)(v42 - 104))
  {
    v45 = 4;
    v44 = (_QWORD *)(v42 - 104);
  }
  else
  {
    if (!v44)
      goto LABEL_12;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_12:
  _Unwind_Resume(a1);
}

_QWORD *turi::dot_graph::print(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  std::string *v8;
  std::string::size_type size;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  __int128 *v23;
  __int128 *i;
  _QWORD *v25;
  std::string *v26;
  std::string::size_type v27;
  _QWORD *v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t **v34;
  std::string v35;
  void *__p[2];
  unsigned __int8 v37;
  std::string *v38;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"digraph G {\n", 12);
  v34 = (uint64_t **)a1;
  v6 = (uint64_t *)*a1;
  v5 = a1 + 1;
  v4 = v6;
  if (v6 != v5)
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
        std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v4[4], v4[5]);
      else
        v35 = *(std::string *)(v4 + 4);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t\"", 2);
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v35;
      else
        v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
      else
        size = v35.__r_.__value_.__l.__size_;
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\" ", 2);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[label=\"", 8);
      v38 = &v35;
      v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34 + 6, (const void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v38);
      v15 = v12[7];
      v13 = v12 + 7;
      v14 = v15;
      v16 = *((char *)v13 + 23);
      if (v16 >= 0)
        v17 = (uint64_t)v13;
      else
        v17 = v14;
      if (v16 >= 0)
        v18 = *((unsigned __int8 *)v13 + 23);
      else
        v18 = v13[1];
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"]\n", 3);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      v20 = (uint64_t *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (uint64_t *)v4[2];
          v22 = *v21 == (_QWORD)v4;
          v4 = v21;
        }
        while (!v22);
      }
      v4 = v21;
    }
    while (v21 != v5);
  }
  v23 = (__int128 *)v34[3];
  for (i = (__int128 *)v34[4]; v23 != i; v23 += 3)
  {
    std::pair<std::string,std::string>::pair[abi:ne180100](&v35, v23);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t\"", 2);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v35;
    else
      v26 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      v27 = v35.__r_.__value_.__l.__size_;
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\" -> \"", 6);
    if ((v37 & 0x80u) == 0)
      v30 = __p;
    else
      v30 = (void **)__p[0];
    if ((v37 & 0x80u) == 0)
      v31 = v37;
    else
      v31 = (uint64_t)__p[1];
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"\n", 2);
    if ((char)v37 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"}", 1);
}

void sub_2180B37EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void turi::dot_graph::~dot_graph(turi::dot_graph *this)
{
  void **v2;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  v2 = (void **)((char *)this + 24);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this, *((char **)this + 1));
}

void sub_2180B39C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::query_eval::_propagate_parallel_slicing(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,unsigned long> &,unsigned long &)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", 125);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!(n->inputs.empty())", 20);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", "operator()", 288, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::_propagate_parallel_slicing(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,unsigned long> &,unsigned long &)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B3B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[2];
  char v20;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        return v9;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x38uLL);
    v13 = v12;
    v19[1] = v7;
    v14 = *a4;
    v12[4] = **a4;
    v15 = v14[1];
    v12[5] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v12[6] = 0;
    v20 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v19[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>>>>::reset[abi:ne180100]((uint64_t)v19, 0);
  }
  return (uint64_t **)v13;
}

void turi::query_eval::propagate_length(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info> &)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", 125);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!(n->inputs.empty())", 20);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", "operator()", 399, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::propagate_length(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info> &)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B3DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::length_info>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[2];
  char v20;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        return v9;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x40uLL);
    v13 = v12;
    v19[1] = v7;
    v14 = *a4;
    v12[4] = **a4;
    v15 = v14[1];
    v12[5] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v12[6] = 0;
    v12[7] = 0;
    v20 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v19[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>>>>::reset[abi:ne180100]((uint64_t)v19, 0);
  }
  return (uint64_t **)v13;
}

void std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D92D3E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D92D3E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::operator()(uint64_t a1@<X0>, unint64_t *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t **v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v20 = *a2;
  v21 = v6;
  *a2 = 0;
  a2[1] = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD **)(v7 + 8);
  v8 = (_QWORD *)(v7 + 8);
  v9 = v10;
  if (!v10)
    goto LABEL_12;
  v11 = v8;
  do
  {
    v12 = v9[4];
    v13 = v12 >= v5;
    if (v12 >= v5)
      v14 = v9;
    else
      v14 = v9 + 1;
    if (v13)
      v11 = v9;
    v9 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != v8 && v5 >= v11[4])
  {
    if (*((char *)v11 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v11[6], v11[7]);
    }
    else
    {
      v19 = *((_OWORD *)v11 + 3);
      a3->__r_.__value_.__r.__words[2] = v11[8];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v19;
    }
  }
  else
  {
LABEL_12:
    turi::query_eval::to_name(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), a3);
    v15 = *(uint64_t ***)(a1 + 8);
    v22 = &v20;
    v16 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(v15, &v20, (uint64_t)&std::piecewise_construct, (uint64_t **)&v22);
    std::string::operator=((std::string *)v16 + 2, a3);
    v6 = v21;
  }
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2180B40E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0,std::allocator<turi::query_eval::recursive_print_impl(std::shared_ptr<turi::query_eval::planner_node> const&,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::string> &,turi::dot_graph &)::$_0>,std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::target_type()
{
}

_QWORD *turi::query_eval::to_name@<X0>(unint64_t this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  size_t v5;
  _BYTE __src[16];
  uint64_t v9;

  v4 = 0;
  v9 = *MEMORY[0x24BDAC8D0];
  do
  {
    __src[v4] = this % 0x1A + 65;
    v5 = v4 + 1;
    if (this < 0x1A)
      break;
    this /= 0x1AuLL;
  }
  while (v4++ < 0xF);
  return std::string::basic_string[abi:ne180100](a2, __src, v5);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[2];
  char v20;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        return v9;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x48uLL);
    v13 = v12;
    v19[1] = v7;
    v14 = *a4;
    v12[4] = **a4;
    v15 = v14[1];
    v12[5] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v12[6] = 0;
    v12[7] = 0;
    v12[8] = 0;
    v20 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v19[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v19, 0);
  }
  return (uint64_t **)v13;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2180B4420(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(uint64_t *a1)
{
  int v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *global_registry;
  uint64_t *v10[2];
  unsigned __int8 v11;

  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002186DA78ALL & 0x7FFFFFFFFFFFFFFFLL));
  v2 = (char)v11;
  v3 = v10[0];
  v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (uint64_t **)v10[0];
  if ((v11 & 0x80u) == 0)
    v4 = v11;
  if (v4)
  {
    v6 = 0;
    do
    {
      v7 = *(char *)v5;
      v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0)
    operator delete(v3);
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::deserialize;
  return a1;
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::deserialize()
{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::holder(v0);
  return v0;
}

void sub_2180B4550(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::holder(_QWORD *a1)
{
  *a1 = &unk_24D92D4E8;
  a1[4] = 0;
  assert_msg(0, "Trying to deserializable type %s without valid load method.", (const char *)(0x80000002186DA78ALL & 0x7FFFFFFFFFFFFFFFLL));
  return a1;
}

void sub_2180B45D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = v1;
  v4 = (_QWORD *)(v2 + 8);
  v5 = *(_QWORD **)(v2 + 32);
  if (v5 == (_QWORD *)(v2 + 8))
  {
    v6 = 4;
    v5 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::~holder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D92D4E8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::~holder(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D92D4E8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::type()
{
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_24D92D4E8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), a1 + 8);
  return v2;
}

void sub_2180B4748(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::deserializer_id()
{
  return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry;
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::deep_op_equal(uint64_t a1, uint64_t a2)
{
  return std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator=((_QWORD *)(a1 + 8), a2 + 8);
}

uint64_t turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::save(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  char *v4;
  size_t v6;
  char **v7;
  size_t v8;
  BOOL v9;
  std::vector<char>::size_type v10;

  v2 = (_QWORD *)*a2;
  if (*(_QWORD *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    v3 = v2[5];
    if (v2[4] + 8 > v3)
    {
      v6 = 2 * v3 + 16;
      v2[5] = v6;
      v7 = (char **)v2[2];
      if (v7)
      {
        v4 = *v7;
        v8 = v7[1] - *v7;
        v9 = v6 >= v8;
        v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append((std::vector<char> *)v2[2], v10);
          v4 = *(char **)v2[2];
        }
        else if (!v9)
        {
          v7[1] = &v4[v6];
        }
      }
      else
      {
        v4 = (char *)malloc_type_realloc((void *)v2[3], v6, 0xF6EA6B1uLL);
      }
      v2[3] = v4;
    }
    else
    {
      v4 = (char *)v2[3];
    }
    *(_QWORD *)&v4[v2[4]] = turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry;
    v2[4] += 8;
  }
  return assert_msg(0, "Trying to serializable type %s without valid save method.", (const char *)(0x80000002186DA78ALL & 0x7FFFFFFFFFFFFFFFLL));
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::print(uint64_t a1, _QWORD *a2)
{
  turi::any::print_type_or_contents<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>(a2);
  return a2;
}

_QWORD *std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2180B4AB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *turi::any::print_type_or_contents<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>(_QWORD *a1)
{
  _QWORD *v1;
  size_t v2;
  _QWORD *v3;
  char v5;

  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Not_Printable[", 14);
  v2 = strlen((const char *)(0x80000002186DA78ALL & 0x7FFFFFFFFFFFFFFFLL));
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, 0x80000002186DA78ALL & 0x7FFFFFFFFFFFFFFFLL, v2);
  v5 = 93;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
}

_OWORD *std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::any>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(uint64_t *a1)
{
  int v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *global_registry;
  uint64_t *v10[2];
  unsigned __int8 v11;

  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002186DA34CLL & 0x7FFFFFFFFFFFFFFFLL));
  v2 = (char)v11;
  v3 = v10[0];
  v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (uint64_t **)v10[0];
  if ((v11 & 0x80u) == 0)
    v4 = v11;
  if (v4)
  {
    v6 = 0;
    do
    {
      v7 = *(char *)v5;
      v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0)
    operator delete(v3);
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::deserialize;
  return a1;
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::deserialize()
{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::holder(v0);
  return v0;
}

void sub_2180B4D08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::holder(_QWORD *a1)
{
  *a1 = &unk_24D92D5C0;
  a1[4] = 0;
  assert_msg(0, "Trying to deserializable type %s without valid load method.", (const char *)(0x80000002186DA34CLL & 0x7FFFFFFFFFFFFFFFLL));
  return a1;
}

void sub_2180B4D90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = v1;
  v4 = (_QWORD *)(v2 + 8);
  v5 = *(_QWORD **)(v2 + 32);
  if (v5 == (_QWORD *)(v2 + 8))
  {
    v6 = 4;
    v5 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::~holder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D92D5C0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::~holder(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D92D5C0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

void *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::type()
{
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_24D92D5C0;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), a1 + 8);
  return v2;
}

void sub_2180B4F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::deserializer_id()
{
  return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry;
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::deep_op_equal(uint64_t a1, uint64_t a2)
{
  return std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>::operator=((_QWORD *)(a1 + 8), a2 + 8);
}

uint64_t turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::save(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  char *v4;
  size_t v6;
  char **v7;
  size_t v8;
  BOOL v9;
  std::vector<char>::size_type v10;

  v2 = (_QWORD *)*a2;
  if (*(_QWORD *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    v3 = v2[5];
    if (v2[4] + 8 > v3)
    {
      v6 = 2 * v3 + 16;
      v2[5] = v6;
      v7 = (char **)v2[2];
      if (v7)
      {
        v4 = *v7;
        v8 = v7[1] - *v7;
        v9 = v6 >= v8;
        v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append((std::vector<char> *)v2[2], v10);
          v4 = *(char **)v2[2];
        }
        else if (!v9)
        {
          v7[1] = &v4[v6];
        }
      }
      else
      {
        v4 = (char *)malloc_type_realloc((void *)v2[3], v6, 0xF6EA6B1uLL);
      }
      v2[3] = v4;
    }
    else
    {
      v4 = (char *)v2[3];
    }
    *(_QWORD *)&v4[v2[4]] = turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry;
    v2[4] += 8;
  }
  return assert_msg(0, "Trying to serializable type %s without valid save method.", (const char *)(0x80000002186DA34CLL & 0x7FFFFFFFFFFFFFFFLL));
}

_QWORD *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::print(uint64_t a1, _QWORD *a2)
{
  turi::any::print_type_or_contents<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>(a2);
  return a2;
}

_QWORD *std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2180B526C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *turi::any::print_type_or_contents<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>(_QWORD *a1)
{
  _QWORD *v1;
  size_t v2;
  _QWORD *v3;
  char v5;

  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Not_Printable[", 14);
  v2 = strlen((const char *)(0x80000002186DA34CLL & 0x7FFFFFFFFFFFFFFFLL));
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, 0x80000002186DA34CLL & 0x7FFFFFFFFFFFFFFFLL, v2);
  v5 = 93;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
}

uint64_t *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(uint64_t *a1)
{
  int v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *global_registry;
  uint64_t *v10[2];
  unsigned __int8 v11;

  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002186DA4BCLL & 0x7FFFFFFFFFFFFFFFLL));
  v2 = (char)v11;
  v3 = v10[0];
  v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (uint64_t **)v10[0];
  if ((v11 & 0x80u) == 0)
    v4 = v11;
  if (v4)
  {
    v6 = 0;
    do
    {
      v7 = *(char *)v5;
      v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0)
    operator delete(v3);
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::deserialize;
  return a1;
}

_QWORD *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::deserialize()
{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::holder(v0);
  return v0;
}

void sub_2180B5400(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::holder(_QWORD *a1)
{
  *a1 = &unk_24D92D698;
  a1[4] = 0;
  assert_msg(0, "Trying to deserializable type %s without valid load method.", (const char *)(0x80000002186DA4BCLL & 0x7FFFFFFFFFFFFFFFLL));
  return a1;
}

void sub_2180B5488(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = v1;
  v4 = (_QWORD *)(v2 + 8);
  v5 = *(_QWORD **)(v2 + 32);
  if (v5 == (_QWORD *)(v2 + 8))
  {
    v6 = 4;
    v5 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::~holder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D92D698;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::~holder(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D92D698;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

void *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::type()
{
}

_QWORD *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_24D92D698;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), a1 + 8);
  return v2;
}

void sub_2180B55F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::deserializer_id()
{
  return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry;
}

_QWORD *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::deep_op_equal(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::operator=((_QWORD *)(a1 + 8), a2 + 8);
}

uint64_t turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::save(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  char *v4;
  size_t v6;
  char **v7;
  size_t v8;
  BOOL v9;
  std::vector<char>::size_type v10;

  v2 = (_QWORD *)*a2;
  if (*(_QWORD *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    v3 = v2[5];
    if (v2[4] + 8 > v3)
    {
      v6 = 2 * v3 + 16;
      v2[5] = v6;
      v7 = (char **)v2[2];
      if (v7)
      {
        v4 = *v7;
        v8 = v7[1] - *v7;
        v9 = v6 >= v8;
        v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append((std::vector<char> *)v2[2], v10);
          v4 = *(char **)v2[2];
        }
        else if (!v9)
        {
          v7[1] = &v4[v6];
        }
      }
      else
      {
        v4 = (char *)malloc_type_realloc((void *)v2[3], v6, 0xF6EA6B1uLL);
      }
      v2[3] = v4;
    }
    else
    {
      v4 = (char *)v2[3];
    }
    *(_QWORD *)&v4[v2[4]] = turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry;
    v2[4] += 8;
  }
  return assert_msg(0, "Trying to serializable type %s without valid save method.", (const char *)(0x80000002186DA4BCLL & 0x7FFFFFFFFFFFFFFFLL));
}

_QWORD *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::print(uint64_t a1, _QWORD *a2)
{
  turi::any::print_type_or_contents<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>(a2);
  return a2;
}

_QWORD *std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2180B5964(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *turi::any::print_type_or_contents<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>(_QWORD *a1)
{
  _QWORD *v1;
  size_t v2;
  _QWORD *v3;
  char v5;

  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Not_Printable[", 14);
  v2 = strlen((const char *)(0x80000002186DA4BCLL & 0x7FFFFFFFFFFFFFFFLL));
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, 0x80000002186DA4BCLL & 0x7FFFFFFFFFFFFFFFLL, v2);
  v5 = 93;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
}

uint64_t *turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(uint64_t *a1)
{
  int v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *global_registry;
  uint64_t *v10[2];
  unsigned __int8 v11;

  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002186D97D8 & 0x7FFFFFFFFFFFFFFFLL));
  v2 = (char)v11;
  v3 = v10[0];
  v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (uint64_t **)v10[0];
  if ((v11 & 0x80u) == 0)
    v4 = v11;
  if (v4)
  {
    v6 = 0;
    do
    {
      v7 = *(char *)v5;
      v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0)
    operator delete(v3);
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::deserialize;
  return a1;
}

_QWORD *turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::deserialize()
{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::holder(v0);
  return v0;
}

void sub_2180B5AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::holder(_QWORD *a1)
{
  *a1 = &unk_24D92D710;
  a1[1] = 0;
  a1[2] = 0;
  assert_msg(0, "Trying to deserializable type %s without valid load method.", (const char *)(0x80000002186D97D8 & 0x7FFFFFFFFFFFFFFFLL));
  return a1;
}

void sub_2180B5B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::~holder(_QWORD *a1)
{
  *a1 = &unk_24D92D710;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::~holder(_QWORD *a1)
{
  *a1 = &unk_24D92D710;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

void *turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::type()
{
}

_QWORD *turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = (_QWORD *)operator new();
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &unk_24D92D710;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::deserializer_id()
{
  return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry;
}

uint64_t turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::save(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  char *v4;
  size_t v6;
  char **v7;
  size_t v8;
  BOOL v9;
  std::vector<char>::size_type v10;

  v2 = (_QWORD *)*a2;
  if (*(_QWORD *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    v3 = v2[5];
    if (v2[4] + 8 > v3)
    {
      v6 = 2 * v3 + 16;
      v2[5] = v6;
      v7 = (char **)v2[2];
      if (v7)
      {
        v4 = *v7;
        v8 = v7[1] - *v7;
        v9 = v6 >= v8;
        v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append((std::vector<char> *)v2[2], v10);
          v4 = *(char **)v2[2];
        }
        else if (!v9)
        {
          v7[1] = &v4[v6];
        }
      }
      else
      {
        v4 = (char *)malloc_type_realloc((void *)v2[3], v6, 0xF6EA6B1uLL);
      }
      v2[3] = v4;
    }
    else
    {
      v4 = (char *)v2[3];
    }
    *(_QWORD *)&v4[v2[4]] = turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry;
    v2[4] += 8;
  }
  return assert_msg(0, "Trying to serializable type %s without valid save method.", (const char *)(0x80000002186D97D8 & 0x7FFFFFFFFFFFFFFFLL));
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)0>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B5E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)1>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B5EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)2>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B5F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)3>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B5FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)4>::get(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B6064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)5>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B60F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)6>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B618C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)7>::get(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B6220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)8>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B62B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)10>::get(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(uint64_t ***)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B6348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>(turi::query_eval::planner_node_type,std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", 125);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_properties.cpp", "operator()", 48, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  std::vector<turi::flex_type_enum> turi::query_eval::extract_field<turi::query_eval::visitor_infer_type,std::vector<turi::flex_type_enum>,std::shared_ptr<turi::query_eval::planner_node>>(turi::query_eval::planner_node_type,std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B6454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)11>::get(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B655C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)13>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B65F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)12>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B6684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)14>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(int **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_type(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B6718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_infer_type<(turi::query_eval::planner_node_type)15>::get(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[1];
  v8 = *a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_type((uint64_t)&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180B67AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  _BYTE *v23;
  std::runtime_error *exception;
  std::string *v25;
  __int128 v26;
  void *v27[2];
  char v28;
  void *__p[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::string v33;
  size_t __idx;

  v3 = *a1;
  LODWORD(v33.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v33.__r_.__value_.__l.__data_))
  {
LABEL_40:
    __p[0] = &v33;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v5 = (uint64_t)(v3 + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "type");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  if (!v6)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  v8 = (uint64_t)(*a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(v27, "type");
  __p[0] = v27;
  v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v8, (const void **)v27, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  LOBYTE(v8) = 0;
  switch(*((_BYTE *)v7 + 68))
  {
    case 0:
      v8 = *((_QWORD *)v7 + 7);
      goto LABEL_33;
    case 1:
      v8 = (uint64_t)*((double *)v7 + 7);
      goto LABEL_33;
    case 2:
      v12 = *((_QWORD *)v7 + 7);
      __idx = 0;
      v13 = (char *)(v12 + 8);
      if (*(char *)(v12 + 31) < 0)
        v13 = *(char **)(v12 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v13);
      LOBYTE(v8) = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v30) < 0)
        operator delete(__p[0]);
      if (*(char *)(v12 + 31) < 0)
        v14 = *(_QWORD *)(v12 + 16);
      else
        v14 = *(unsigned __int8 *)(v12 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v25 = std::string::append(&v33, " cannot be interpreted as an integer");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        *(_QWORD *)&v30 = *((_QWORD *)&v25->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_33;
    case 3:
      v9 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_32;
    case 4:
      v15 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      goto LABEL_32;
    case 5:
      v16 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      goto LABEL_32;
    case 6:
      v8 = (uint64_t)(*((_QWORD *)v7 + 7) << 8) >> 8;
      goto LABEL_33;
    case 7:
      goto LABEL_33;
    case 8:
      v17 = *((_QWORD *)v7 + 7);
      v18 = *(unsigned int **)(v17 + 16);
      __p[0] = *(void **)(v17 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v31 = *(_OWORD *)(v17 + 40);
      v32 = v22;
      v30 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_32;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v7 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v31 + 1))
      {
        *(_QWORD *)&v32 = *((_QWORD *)&v31 + 1);
        operator delete(*((void **)&v31 + 1));
      }
      if ((_QWORD)v30)
      {
        *((_QWORD *)&v30 + 1) = v30;
        operator delete((void *)v30);
      }
      v8 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_33;
      v10 = (unint64_t *)((char *)__p[1] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
      }
LABEL_32:
      LOBYTE(v8) = 0;
LABEL_33:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v23 = operator new(1uLL);
      *a2 = v23;
      *v23++ = v8;
      a2[1] = v23;
      a2[2] = v23;
      if (v28 < 0)
        operator delete(v27[0]);
      return;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      goto LABEL_40;
  }
}

void sub_2180B6B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 41) < 0)
  {
    operator delete(*(void **)(v23 - 64));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0)
        operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::CONSTANT_NODE", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 105, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B6E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"type\")", 40);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 106, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B6F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  int64_t *v4;
  int64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void **v16;
  void **v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t i;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p;
  _QWORD *v32;
  int64_t v33;
  std::__shared_weak_count *v34;
  void **p_p;
  void **v36;
  uint64_t v37;

  v3 = *a1;
  LODWORD(__p) = **a1;
  if ((_DWORD)__p != 1)
  {
    p_p = &__p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  p_p = 0;
  v36 = 0;
  v37 = 0;
  v4 = (int64_t *)*((_QWORD *)v3 + 7);
  v5 = (int64_t *)*((_QWORD *)v3 + 8);
  if (v4 == v5)
  {
    v17 = 0;
    v16 = 0;
  }
  else
  {
    do
    {
      v6 = *v4;
      v7 = (std::__shared_weak_count *)v4[1];
      v33 = *v4;
      v34 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v29 = v6;
        v30 = v7;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      else
      {
        v29 = v6;
        v30 = 0;
      }
      turi::query_eval::infer_planner_node_type(&__p, &v29);
      std::vector<std::vector<turi::flex_type_enum>>::push_back[abi:ne180100]((uint64_t *)&p_p, (uint64_t)&__p);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v7)
      {
        v11 = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v13 = v34;
      if (v34)
      {
        v14 = (unint64_t *)&v34->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v4 += 2;
    }
    while (v4 != v5);
    v17 = p_p;
    v16 = v36;
  }
  assert_msg(v16 != v17, "Append with no input");
  v18 = 0xAAAAAAAAAAAAAAABLL * (v36 - p_p);
  v19 = (unsigned __int8 *)*p_p;
  v20 = (uint64_t)p_p[1];
  if (v18 >= 2)
  {
    for (i = 1; i != v18; ++i)
    {
      v22 = p_p[3 * i];
      v23 = p_p[3 * i + 1];
      v24 = v23 - v22;
      v33 = v23 - v22;
      v28 = v20 - (_QWORD)v19;
      if (v23 - v22 != v20 - (_QWORD)v19)
      {
        __p = &v33;
        v32 = &v28;
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
      }
      if (v23 != v22)
      {
        v25 = 0;
        do
        {
          v26 = v22[v25];
          LODWORD(v33) = (char)v26;
          v27 = v19[v25];
          LODWORD(v28) = (char)v27;
          if (v26 != v27)
          {
            __p = &v33;
            v32 = &v28;
            turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
          }
          ++v25;
        }
        while (v25 < v24);
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(a2, v19, v20, v20 - (_QWORD)v19);
  __p = &p_p;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2180B7258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  __p = (void *)(v16 - 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::APPEND_NODE", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 124, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B7434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::flex_type_enum>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<turi::flex_type_enum>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2180B75E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"types[i].size()", 15);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"types[0].size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 133, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B7784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)types[i][j]", 16);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)types[0][j]", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B7998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::flex_type_enum>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::flex_type_enum>>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::flex_type_enum>>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flex_type_enum>>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flex_type_enum>>,std::reverse_iterator<std::vector<turi::flex_type_enum>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  _BYTE *v23;
  std::runtime_error *exception;
  std::string *v25;
  __int128 v26;
  void *v27[2];
  char v28;
  void *__p[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::string v33;
  size_t __idx;

  v3 = *a1;
  LODWORD(v33.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v33.__r_.__value_.__l.__data_) != 2)
  {
LABEL_40:
    __p[0] = &v33;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v5 = (uint64_t)(v3 + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  if (!v6)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  v8 = (uint64_t)(*a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(v27, "output_type");
  __p[0] = v27;
  v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v8, (const void **)v27, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  LOBYTE(v8) = 0;
  switch(*((_BYTE *)v7 + 68))
  {
    case 0:
      v8 = *((_QWORD *)v7 + 7);
      goto LABEL_33;
    case 1:
      v8 = (uint64_t)*((double *)v7 + 7);
      goto LABEL_33;
    case 2:
      v12 = *((_QWORD *)v7 + 7);
      __idx = 0;
      v13 = (char *)(v12 + 8);
      if (*(char *)(v12 + 31) < 0)
        v13 = *(char **)(v12 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v13);
      LOBYTE(v8) = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v30) < 0)
        operator delete(__p[0]);
      if (*(char *)(v12 + 31) < 0)
        v14 = *(_QWORD *)(v12 + 16);
      else
        v14 = *(unsigned __int8 *)(v12 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v25 = std::string::append(&v33, " cannot be interpreted as an integer");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        *(_QWORD *)&v30 = *((_QWORD *)&v25->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_33;
    case 3:
      v9 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_32;
    case 4:
      v15 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      goto LABEL_32;
    case 5:
      v16 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      goto LABEL_32;
    case 6:
      v8 = (uint64_t)(*((_QWORD *)v7 + 7) << 8) >> 8;
      goto LABEL_33;
    case 7:
      goto LABEL_33;
    case 8:
      v17 = *((_QWORD *)v7 + 7);
      v18 = *(unsigned int **)(v17 + 16);
      __p[0] = *(void **)(v17 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v31 = *(_OWORD *)(v17 + 40);
      v32 = v22;
      v30 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_32;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v7 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v31 + 1))
      {
        *(_QWORD *)&v32 = *((_QWORD *)&v31 + 1);
        operator delete(*((void **)&v31 + 1));
      }
      if ((_QWORD)v30)
      {
        *((_QWORD *)&v30 + 1) = v30;
        operator delete((void *)v30);
      }
      v8 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_33;
      v10 = (unint64_t *)((char *)__p[1] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
      }
LABEL_32:
      LOBYTE(v8) = 0;
LABEL_33:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v23 = operator new(1uLL);
      *a2 = v23;
      *v23++ = v8;
      a2[1] = v23;
      a2[2] = v23;
      if (v28 < 0)
        operator delete(v27[0]);
      return;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      goto LABEL_40;
  }
}

void sub_2180B7F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 41) < 0)
  {
    operator delete(*(void **)(v23 - 64));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0)
        operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::BINARY_TRANSFORM_NODE", 45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 123, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B81B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 124, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B8330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  _QWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;

  v2 = *a1;
  LODWORD(v12) = **a1;
  if ((_DWORD)v12 != 3)
  {
    v13 = (uint64_t)&v12;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v4 = v2 + 14;
  v3 = (_QWORD *)*((_QWORD *)v2 + 7);
  v5 = *((_QWORD *)v4 + 1) - (_QWORD)v3;
  v13 = v5 >> 4;
  if (v5 != 32)
  {
    v12 = &v13;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  v6 = (std::__shared_weak_count *)v3[1];
  v11[0] = *v3;
  v11[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  turi::query_eval::infer_planner_node_type(a2, v11);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2180B8494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::LOGICAL_FILTER_NODE", 43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 150, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B8630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 151, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B8840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_type(_DWORD **a1@<X0>, unint64_t *a2@<X8>)
{
  _DWORD *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  unsigned int v16;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  void *v43;
  void *v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  void *__p[2];
  char v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD v61[2];
  void *v62[3];

  v3 = *a1;
  LODWORD(v58) = **a1;
  if ((_DWORD)v58 != 4)
  {
    v62[0] = &v58;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v5 = (_QWORD *)*((_QWORD *)v3 + 7);
  v6 = (std::__shared_weak_count *)v5[1];
  v61[0] = *v5;
  v61[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  turi::query_eval::infer_planner_node_type(v62, v61);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  v12 = *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v11 + 2), (const void **)__p);
  v59 = 0;
  v60 = 0;
  v58 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v58, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 4);
  if (v57 < 0)
    operator delete(__p[0]);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v13 = v58;
  for (i = v59; v13 != i; v13 += 2)
  {
    v15 = *v13;
    v16 = *((unsigned __int8 *)v13 + 12);
    if (v16 <= 9 && ((1 << v16) & 0x33C) != 0)
    {
      do
        v18 = __ldaxr((unint64_t *)v15);
      while (__stlxr(v18 + 1, (unint64_t *)v15));
    }
    v19 = v62[0];
    v21 = (_BYTE *)a2[1];
    v20 = a2[2];
    if ((unint64_t)v21 >= v20)
    {
      v23 = *a2;
      v24 = &v21[-*a2];
      v25 = (unint64_t)(v24 + 1);
      if ((uint64_t)(v24 + 1) < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v26 = v20 - v23;
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
        v27 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
        v28 = (char *)operator new(v27);
      else
        v28 = 0;
      v29 = &v24[(_QWORD)v28];
      v24[(_QWORD)v28] = v19[v15];
      v22 = (uint64_t)&v24[(_QWORD)v28 + 1];
      if (v21 != (_BYTE *)v23)
      {
        v30 = &v21[~v23];
        do
        {
          v31 = *--v21;
          (v30--)[(_QWORD)v28] = v31;
        }
        while (v21 != (_BYTE *)v23);
        v29 = v28;
      }
      *a2 = (unint64_t)v29;
      a2[1] = v22;
      a2[2] = (unint64_t)&v28[v27];
      if (v23)
        operator delete((void *)v23);
    }
    else
    {
      *v21 = *((_BYTE *)v62[0] + v15);
      v22 = (uint64_t)(v21 + 1);
    }
    a2[1] = v22;
    switch(v16)
    {
      case 2u:
        do
        {
          v32 = __ldaxr((unint64_t *)v15);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, (unint64_t *)v15));
        if (v33)
          v34 = 1;
        else
          v34 = v15 == 0;
        if (!v34)
        {
          if (*(char *)(v15 + 31) < 0)
            operator delete(*(void **)(v15 + 8));
          v35 = v15;
          v36 = 0x1012C404EF22A49;
          goto LABEL_82;
        }
        break;
      case 3u:
        do
        {
          v46 = __ldaxr((unint64_t *)v15);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, (unint64_t *)v15));
        if (v47)
          v48 = 1;
        else
          v48 = v15 == 0;
        if (!v48)
        {
          v49 = *(void **)(v15 + 8);
          if (v49)
          {
            *(_QWORD *)(v15 + 16) = v49;
            operator delete(v49);
          }
          v35 = v15;
          v36 = 0x1080C409938AC02;
          goto LABEL_82;
        }
        break;
      case 4u:
        do
        {
          v37 = __ldaxr((unint64_t *)v15);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, (unint64_t *)v15));
        if (v38)
          v39 = 1;
        else
          v39 = v15 == 0;
        if (!v39)
        {
          __p[0] = (void *)(v15 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_74;
        }
        break;
      case 5u:
        do
        {
          v50 = __ldaxr((unint64_t *)v15);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, (unint64_t *)v15));
        if (v51)
          v52 = 1;
        else
          v52 = v15 == 0;
        if (!v52)
        {
          __p[0] = (void *)(v15 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_74:
          v35 = v15;
          v36 = 0x1020C405E66F15BLL;
          goto LABEL_82;
        }
        break;
      case 8u:
        do
        {
          v53 = __ldaxr((unint64_t *)v15);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, (unint64_t *)v15));
        if (v54)
          v55 = 1;
        else
          v55 = v15 == 0;
        if (!v55)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v15 + 16));
          v35 = v15;
          v45 = -235920773;
          goto LABEL_81;
        }
        break;
      case 9u:
        do
        {
          v40 = __ldaxr((unint64_t *)v15);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, (unint64_t *)v15));
        if (v41)
          v42 = 1;
        else
          v42 = v15 == 0;
        if (!v42)
        {
          v43 = *(void **)(v15 + 48);
          if (v43)
          {
            *(_QWORD *)(v15 + 56) = v43;
            operator delete(v43);
          }
          v44 = *(void **)(v15 + 24);
          if (v44)
          {
            *(_QWORD *)(v15 + 32) = v44;
            operator delete(v44);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v15 + 8);
          v35 = v15;
          v45 = 2071181815;
LABEL_81:
          v36 = v45 | 0x1030C4000000000;
LABEL_82:
          MEMORY[0x219A19A08](v35, v36);
        }
        break;
      default:
        continue;
    }
  }
  __p[0] = &v58;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
}

void sub_2180B8CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::PROJECT_NODE", 36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 116, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B9030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_BYTE *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_type@<X0>(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  if (**a1 != 5)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = operator new(1uLL);
  *a2 = v3;
  *v3 = 0;
  result = v3 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::RANGE_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 102, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B92A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_BYTE *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_type@<X0>(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  _BYTE *v20;
  _BYTE *result;
  std::runtime_error *exception;
  std::string *v23;
  __int128 v24;
  void *v25[2];
  char v26;
  void *__p[2];
  void *v28[2];
  __int128 v29;
  __int128 v30;
  std::string v31;
  size_t __idx;

  v3 = *a1;
  LODWORD(v31.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v31.__r_.__value_.__l.__data_) != 6)
  {
LABEL_37:
    __p[0] = &v31;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v5 = (uint64_t)(v3 + 2);
  std::string::basic_string[abi:ne180100]<0>(v25, "type");
  __p[0] = v25;
  v4 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v5, (const void **)v25, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  LOBYTE(v5) = 0;
  switch(*((_BYTE *)v4 + 68))
  {
    case 0:
      v5 = *((_QWORD *)v4 + 7);
      goto LABEL_30;
    case 1:
      v5 = (uint64_t)*((double *)v4 + 7);
      goto LABEL_30;
    case 2:
      v9 = *((_QWORD *)v4 + 7);
      __idx = 0;
      v10 = (char *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(char **)(v9 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      LOBYTE(v5) = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v28[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v9 + 31) < 0)
        v11 = *(_QWORD *)(v9 + 16);
      else
        v11 = *(unsigned __int8 *)(v9 + 31);
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v23 = std::string::append(&v31, " cannot be interpreted as an integer");
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v28[0] = (void *)v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_30;
    case 3:
      v6 = *((_QWORD *)v4 + 7);
      __p[1] = 0;
      v28[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_29;
    case 4:
      v12 = *((_QWORD *)v4 + 7);
      __p[1] = 0;
      v28[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      goto LABEL_29;
    case 5:
      v13 = *((_QWORD *)v4 + 7);
      __p[1] = 0;
      v28[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      goto LABEL_29;
    case 6:
      v5 = (uint64_t)(*((_QWORD *)v4 + 7) << 8) >> 8;
      goto LABEL_30;
    case 7:
      goto LABEL_30;
    case 8:
      v14 = *((_QWORD *)v4 + 7);
      v15 = *(unsigned int **)(v14 + 16);
      __p[0] = *(void **)(v14 + 8);
      __p[1] = v15;
      if (v15)
      {
        v16 = v15 + 2;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(_OWORD *)(v14 + 24);
      v19 = *(_OWORD *)(v14 + 56);
      v29 = *(_OWORD *)(v14 + 40);
      v30 = v19;
      *(_OWORD *)v28 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_29;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v4 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v29 + 1))
      {
        *(_QWORD *)&v30 = *((_QWORD *)&v29 + 1);
        operator delete(*((void **)&v29 + 1));
      }
      if (v28[0])
      {
        v28[1] = v28[0];
        operator delete(v28[0]);
      }
      v5 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_30;
      v7 = (unint64_t *)((char *)__p[1] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
      }
LABEL_29:
      LOBYTE(v5) = 0;
LABEL_30:
      if (v26 < 0)
        operator delete(v25[0]);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v20 = operator new(1uLL);
      *a2 = v20;
      *v20 = v5;
      result = v20 + 1;
      a2[1] = result;
      a2[2] = result;
      return result;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      goto LABEL_37;
  }
}

void sub_2180B9698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 41) < 0)
  {
    operator delete(*(void **)(v23 - 64));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0)
        operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SARRAY_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180B9914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_type(_DWORD **a1@<X0>, unint64_t *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;
  BOOL v8;
  std::string::size_type v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const std::string *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  std::string::size_type v49;
  unint64_t *v50;
  unint64_t v51;
  std::string::size_type v52;
  double v53;
  double v54;
  unint64_t *v55;
  unint64_t v56;
  std::string::size_type v57;
  std::string::size_type v58;
  uint64_t v59;
  std::string::size_type v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  __int128 v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  BOOL v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  BOOL v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  BOOL v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  BOOL v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::string::size_type v103;
  unint64_t *v104;
  unint64_t v105;
  std::string::size_type v106;
  void *v107;
  void *v108;
  unsigned int v109;
  unint64_t *v110;
  unint64_t v111;
  std::string::size_type v112;
  void *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::string::size_type v118;
  double *v119;
  double *v120;
  double v121;
  int v122;
  unint64_t v123;
  char *v124;
  const std::string *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int v137;
  __int128 v138;
  __int128 v139;
  unint64_t v140;
  _BYTE *v141;
  _BYTE *v142;
  unint64_t v143;
  _BYTE *v144;
  unint64_t v145;
  unint64_t v146;
  size_t v147;
  char *v148;
  char *v149;
  _BYTE *v150;
  _BYTE *v151;
  char v152;
  unint64_t v153;
  unint64_t v154;
  BOOL v155;
  double v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  BOOL v160;
  unint64_t v161;
  unint64_t v162;
  BOOL v163;
  void *v164;
  void *v165;
  unsigned int v166;
  unint64_t v167;
  unint64_t v168;
  BOOL v169;
  void *v170;
  unint64_t v171;
  unint64_t v172;
  BOOL v173;
  unint64_t v174;
  unint64_t v175;
  BOOL v176;
  std::runtime_error *exception;
  std::string *v178;
  __int128 v179;
  double *v180;
  double *v181;
  char *v182;
  void *__p;
  unsigned int *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _QWORD v188[3];
  void *v189[3];
  void *v190;
  void *v191;
  uint64_t v192;
  std::string v193;
  size_t __idx;
  void **p_p;
  std::__shared_weak_count *v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  std::string v200;
  uint64_t v201;

  v201 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  LODWORD(__p) = **a1;
  if ((_DWORD)__p != 7)
  {
    p_p = &__p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "types");
  v4 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v3 + 2), (const void **)&__p);
  switch(*(_BYTE *)(v4 + 12))
  {
    case 0:
      v5 = *(_QWORD *)v4;
      v200.__r_.__value_.__s.__data_[12] = 0;
      LODWORD(v200.__r_.__value_.__r.__words[1]) = 0;
      v200.__r_.__value_.__r.__words[0] = v5;
      v181 = 0;
      v182 = 0;
      v180 = 0;
      p_p = (void **)&v180;
      LOBYTE(v196) = 0;
      v180 = (double *)operator new(0x10uLL);
      v181 = v180;
      v182 = (char *)(v180 + 2);
      v181 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v182, (uint64_t *)&v200, (uint64_t *)&v200.__r_.__value_.__r.__words[2], (uint64_t)v180);
      switch(v200.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v6 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v7 = __ldaxr(v6);
            v8 = --v7 == 0;
          }
          while (__stlxr(v7, v6));
          goto LABEL_77;
        case 3:
          v80 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v81 = __ldaxr(v80);
            v82 = --v81 == 0;
          }
          while (__stlxr(v81, v80));
          goto LABEL_150;
        case 4:
          v66 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v67 = __ldaxr(v66);
            v68 = --v67 == 0;
          }
          while (__stlxr(v67, v66));
          goto LABEL_134;
        case 5:
          v85 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v86 = __ldaxr(v85);
            v87 = --v86 == 0;
          }
          while (__stlxr(v86, v85));
          goto LABEL_158;
        case 8:
          v92 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v93 = __ldaxr(v92);
            v94 = --v93 == 0;
          }
          while (__stlxr(v93, v92));
          goto LABEL_165;
        case 9:
          v71 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v72 = __ldaxr(v71);
            v73 = --v72 == 0;
          }
          while (__stlxr(v72, v71));
          goto LABEL_140;
        default:
          goto LABEL_171;
      }
      goto LABEL_171;
    case 1:
      v49 = *(_QWORD *)v4;
      LODWORD(v200.__r_.__value_.__r.__words[1]) = 0;
      v200.__r_.__value_.__s.__data_[12] = 1;
      v200.__r_.__value_.__r.__words[0] = v49;
      v181 = 0;
      v182 = 0;
      v180 = 0;
      p_p = (void **)&v180;
      LOBYTE(v196) = 0;
      v180 = (double *)operator new(0x10uLL);
      v181 = v180;
      v182 = (char *)(v180 + 2);
      v181 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v182, (uint64_t *)&v200, (uint64_t *)&v200.__r_.__value_.__r.__words[2], (uint64_t)v180);
      switch(v200.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v50 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v51 = __ldaxr(v50);
            v8 = --v51 == 0;
          }
          while (__stlxr(v51, v50));
          goto LABEL_77;
        case 3:
          v83 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v84 = __ldaxr(v83);
            v82 = --v84 == 0;
          }
          while (__stlxr(v84, v83));
          goto LABEL_150;
        case 4:
          v69 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v70 = __ldaxr(v69);
            v68 = --v70 == 0;
          }
          while (__stlxr(v70, v69));
          goto LABEL_134;
        case 5:
          v88 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v89 = __ldaxr(v88);
            v87 = --v89 == 0;
          }
          while (__stlxr(v89, v88));
          goto LABEL_158;
        case 8:
          v95 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v96 = __ldaxr(v95);
            v94 = --v96 == 0;
          }
          while (__stlxr(v96, v95));
          goto LABEL_165;
        case 9:
          v74 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v75 = __ldaxr(v74);
            v73 = --v75 == 0;
          }
          while (__stlxr(v75, v74));
          goto LABEL_140;
        default:
          goto LABEL_171;
      }
      goto LABEL_171;
    case 2:
      v13 = (const std::string *)(*(_QWORD *)v4 + 8);
      v200.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v200.__r_.__value_.__r.__words[1]) = 0;
      v200.__r_.__value_.__s.__data_[12] = 0;
      turi::flexible_type::operator=<std::string>((uint64_t *)&v200, v13);
      v180 = 0;
      v181 = 0;
      v182 = 0;
      p_p = (void **)&v180;
      LOBYTE(v196) = 0;
      v180 = (double *)operator new(0x10uLL);
      v181 = v180;
      v182 = (char *)(v180 + 2);
      v181 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v182, (uint64_t *)&v200, (uint64_t *)&v200.__r_.__value_.__r.__words[2], (uint64_t)v180);
      switch(v200.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v14 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v15 = __ldaxr(v14);
            v8 = --v15 == 0;
          }
          while (__stlxr(v15, v14));
          goto LABEL_77;
        case 3:
          v110 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v111 = __ldaxr(v110);
            v82 = --v111 == 0;
          }
          while (__stlxr(v111, v110));
          goto LABEL_150;
        case 4:
          v101 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v102 = __ldaxr(v101);
            v68 = --v102 == 0;
          }
          while (__stlxr(v102, v101));
          goto LABEL_134;
        case 5:
          v114 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v115 = __ldaxr(v114);
            v87 = --v115 == 0;
          }
          while (__stlxr(v115, v114));
          goto LABEL_158;
        case 8:
          v116 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v117 = __ldaxr(v116);
            v94 = --v117 == 0;
          }
          while (__stlxr(v117, v116));
          goto LABEL_165;
        case 9:
          v104 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v105 = __ldaxr(v104);
            v73 = --v105 == 0;
          }
          while (__stlxr(v105, v104));
          goto LABEL_140;
        default:
          goto LABEL_171;
      }
      goto LABEL_171;
    case 3:
      v16 = *(_QWORD *)v4;
      std::vector<turi::flexible_type>::vector(&v180, (uint64_t)(*(_QWORD *)(*(_QWORD *)v4 + 16) - *(_QWORD *)(*(_QWORD *)v4 + 8)) >> 3);
      v17 = *(_QWORD *)(v16 + 8);
      if (*(_QWORD *)(v16 + 16) != v17)
      {
        v18 = 0;
        do
        {
          v19 = (char *)&v180[2 * v18];
          switch(v19[12])
          {
            case 2:
              v20 = *(unint64_t **)v19;
              do
              {
                v21 = __ldaxr(v20);
                v22 = v21 - 1;
              }
              while (__stlxr(v22, v20));
              if (!v22)
              {
                v23 = *(unint64_t **)v19;
                if (!*(_QWORD *)v19)
                  goto LABEL_65;
                if (*((char *)v23 + 31) < 0)
                  operator delete((void *)v23[1]);
                v24 = v23;
                v25 = 0x1012C404EF22A49;
                goto LABEL_64;
              }
              break;
            case 3:
              v37 = *(unint64_t **)v19;
              do
              {
                v38 = __ldaxr(v37);
                v39 = v38 - 1;
              }
              while (__stlxr(v39, v37));
              if (!v39)
              {
                v40 = *(unint64_t **)v19;
                if (!*(_QWORD *)v19)
                  goto LABEL_65;
                v41 = (void *)v40[1];
                if (v41)
                {
                  v40[2] = (unint64_t)v41;
                  operator delete(v41);
                }
                v24 = v40;
                v25 = 0x1080C409938AC02;
                goto LABEL_64;
              }
              break;
            case 4:
              v26 = *(unint64_t **)v19;
              do
              {
                v27 = __ldaxr(v26);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, v26));
              if (!v28)
              {
                v29 = *(unint64_t **)v19;
                if (!*(_QWORD *)v19)
                  goto LABEL_65;
                p_p = (void **)(v29 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
                goto LABEL_57;
              }
              break;
            case 5:
              v42 = *(unint64_t **)v19;
              do
              {
                v43 = __ldaxr(v42);
                v44 = v43 - 1;
              }
              while (__stlxr(v44, v42));
              if (!v44)
              {
                v29 = *(unint64_t **)v19;
                if (!*(_QWORD *)v19)
                  goto LABEL_65;
                p_p = (void **)(v29 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_57:
                v24 = v29;
                v25 = 0x1020C405E66F15BLL;
                goto LABEL_64;
              }
              break;
            case 8:
              v45 = *(unint64_t **)v19;
              do
              {
                v46 = __ldaxr(v45);
                v47 = v46 - 1;
              }
              while (__stlxr(v47, v45));
              if (!v47)
              {
                v48 = *(unint64_t **)v19;
                if (!*(_QWORD *)v19)
                  goto LABEL_65;
                boost::detail::shared_count::~shared_count((unsigned int **)v48 + 2);
                v24 = v48;
                v36 = -235920773;
                goto LABEL_63;
              }
              break;
            case 9:
              v30 = *(unint64_t **)v19;
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32)
              {
                v33 = *(unint64_t **)v19;
                if (*(_QWORD *)v19)
                {
                  v34 = (void *)v33[6];
                  if (v34)
                  {
                    v33[7] = (unint64_t)v34;
                    operator delete(v34);
                  }
                  v35 = (void *)v33[3];
                  if (v35)
                  {
                    v33[4] = (unint64_t)v35;
                    operator delete(v35);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
                  v24 = v33;
                  v36 = 2071181815;
LABEL_63:
                  v25 = v36 | 0x1030C4000000000;
LABEL_64:
                  MEMORY[0x219A19A08](v24, v25);
                }
LABEL_65:
                *(_QWORD *)v19 = 0;
              }
              break;
            default:
              break;
          }
          *(_QWORD *)v19 = 0;
          *((_DWORD *)v19 + 2) = 0;
          v19[12] = 1;
          *(_QWORD *)v19 = *(_QWORD *)(v17 + 8 * v18++);
          v17 = *(_QWORD *)(v16 + 8);
        }
        while (v18 < (*(_QWORD *)(v16 + 16) - v17) >> 3);
      }
      goto LABEL_171;
    case 4:
      v9 = *(_QWORD *)v4;
      v181 = 0;
      v182 = 0;
      v180 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v180, *(uint64_t **)(v9 + 8), *(uint64_t **)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 4);
      goto LABEL_171;
    case 5:
      v52 = *(_QWORD *)v4;
      v196 = 0;
      *(_QWORD *)&v197 = 0;
      p_p = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&p_p, *(uint64_t **)(v52 + 8), *(uint64_t **)(v52 + 16), (uint64_t)(*(_QWORD *)(v52 + 16) - *(_QWORD *)(v52 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v180 = 0;
      v181 = 0;
      v182 = 0;
      v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
      goto LABEL_171;
    case 6:
      v53 = (double)((uint64_t)(*(_QWORD *)v4 << 8) >> 8);
      v54 = (double)*(int *)(v4 + 8) / 1000000.0;
      LODWORD(v200.__r_.__value_.__r.__words[1]) = 0;
      v200.__r_.__value_.__s.__data_[12] = 1;
      *(double *)&v200.__r_.__value_.__l.__data_ = v54 + v53;
      v181 = 0;
      v182 = 0;
      v180 = 0;
      p_p = (void **)&v180;
      LOBYTE(v196) = 0;
      v180 = (double *)operator new(0x10uLL);
      v181 = v180;
      v182 = (char *)(v180 + 2);
      v181 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v182, (uint64_t *)&v200, (uint64_t *)&v200.__r_.__value_.__r.__words[2], (uint64_t)v180);
      switch(v200.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v55 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v56 = __ldaxr(v55);
            v8 = --v56 == 0;
          }
          while (__stlxr(v56, v55));
LABEL_77:
          if (v8)
          {
            v57 = v200.__r_.__value_.__r.__words[0];
            if (v200.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v200.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v200.__r_.__value_.__r.__words[0] + 8));
              v58 = v57;
              v59 = 0x1012C404EF22A49;
              goto LABEL_170;
            }
          }
          break;
        case 3:
          v90 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v91 = __ldaxr(v90);
            v82 = --v91 == 0;
          }
          while (__stlxr(v91, v90));
LABEL_150:
          if (v82)
          {
            v112 = v200.__r_.__value_.__r.__words[0];
            if (v200.__r_.__value_.__r.__words[0])
            {
              v113 = *(void **)(v200.__r_.__value_.__r.__words[0] + 8);
              if (v113)
              {
                *(_QWORD *)(v200.__r_.__value_.__r.__words[0] + 16) = v113;
                operator delete(v113);
              }
              v58 = v112;
              v59 = 0x1080C409938AC02;
              goto LABEL_170;
            }
          }
          break;
        case 4:
          v76 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v77 = __ldaxr(v76);
            v68 = --v77 == 0;
          }
          while (__stlxr(v77, v76));
LABEL_134:
          if (v68)
          {
            v103 = v200.__r_.__value_.__r.__words[0];
            if (v200.__r_.__value_.__r.__words[0])
            {
              p_p = (void **)(v200.__r_.__value_.__r.__words[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
              goto LABEL_162;
            }
          }
          break;
        case 5:
          v97 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v98 = __ldaxr(v97);
            v87 = --v98 == 0;
          }
          while (__stlxr(v98, v97));
LABEL_158:
          if (v87)
          {
            v103 = v200.__r_.__value_.__r.__words[0];
            if (v200.__r_.__value_.__r.__words[0])
            {
              p_p = (void **)(v200.__r_.__value_.__r.__words[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_162:
              v58 = v103;
              v59 = 0x1020C405E66F15BLL;
              goto LABEL_170;
            }
          }
          break;
        case 8:
          v99 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v100 = __ldaxr(v99);
            v94 = --v100 == 0;
          }
          while (__stlxr(v100, v99));
LABEL_165:
          if (v94)
          {
            v118 = v200.__r_.__value_.__r.__words[0];
            if (v200.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v200.__r_.__value_.__r.__words[0] + 16));
              v58 = v118;
              v109 = -235920773;
              goto LABEL_169;
            }
          }
          break;
        case 9:
          v78 = (unint64_t *)v200.__r_.__value_.__r.__words[0];
          do
          {
            v79 = __ldaxr(v78);
            v73 = --v79 == 0;
          }
          while (__stlxr(v79, v78));
LABEL_140:
          if (v73)
          {
            v106 = v200.__r_.__value_.__r.__words[0];
            if (v200.__r_.__value_.__r.__words[0])
            {
              v107 = *(void **)(v200.__r_.__value_.__r.__words[0] + 48);
              if (v107)
              {
                *(_QWORD *)(v200.__r_.__value_.__r.__words[0] + 56) = v107;
                operator delete(v107);
              }
              v108 = *(void **)(v106 + 24);
              if (v108)
              {
                *(_QWORD *)(v106 + 32) = v108;
                operator delete(v108);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v106 + 8);
              v58 = v106;
              v109 = 2071181815;
LABEL_169:
              v59 = v109 | 0x1030C4000000000;
LABEL_170:
              MEMORY[0x219A19A08](v58, v59);
            }
          }
          break;
        default:
          goto LABEL_171;
      }
      goto LABEL_171;
    case 7:
      v180 = 0;
      v181 = 0;
      v182 = 0;
      goto LABEL_171;
    case 8:
      v60 = *(_QWORD *)v4;
      v61 = *(unsigned int **)(*(_QWORD *)v4 + 16);
      p_p = *(void ***)(*(_QWORD *)v4 + 8);
      v196 = (std::__shared_weak_count *)v61;
      if (v61)
      {
        v62 = v61 + 2;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      v64 = *(_OWORD *)(v60 + 24);
      v65 = *(_OWORD *)(v60 + 40);
      v199 = *(_OWORD *)(v60 + 56);
      v198 = v65;
      v197 = v64;
      turi::flexible_type_fail(0);
      v180 = 0;
      v181 = 0;
      v182 = 0;
      boost::detail::shared_count::~shared_count((unsigned int **)&v196);
      goto LABEL_171;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&p_p, *(_QWORD *)v4 + 8);
      turi::flexible_type_fail(0);
      v180 = 0;
      v181 = 0;
      v182 = 0;
      if (*((_QWORD *)&v198 + 1))
      {
        *(_QWORD *)&v199 = *((_QWORD *)&v198 + 1);
        operator delete(*((void **)&v198 + 1));
      }
      if ((_QWORD)v197)
      {
        *((_QWORD *)&v197 + 1) = v197;
        operator delete((void *)v197);
      }
      v10 = v196;
      if (v196)
      {
        p_shared_owners = (unint64_t *)&v196->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
LABEL_171:
      if (SBYTE7(v185) < 0)
        operator delete(__p);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v119 = v180;
      v120 = v181;
      if (v180 != v181)
      {
        while (2)
        {
          v121 = *v119;
          v122 = *((unsigned __int8 *)v119 + 12) - 2;
          switch(*((_BYTE *)v119 + 12))
          {
            case 2:
              do
                v123 = __ldaxr(*(unint64_t **)&v121);
              while (__stlxr(v123 + 1, *(unint64_t **)&v121));
              __idx = 0;
              v124 = (char *)(*(_QWORD *)&v121 + 8);
              if (*(char *)(*(_QWORD *)&v121 + 31) < 0)
                v124 = *(char **)(*(_QWORD *)&v121 + 8);
              v125 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v200, v124);
              LOBYTE(v126) = std::stoll(v125, &__idx, 10);
              if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v200.__r_.__value_.__l.__data_);
              if (*(char *)(*(_QWORD *)&v121 + 31) < 0)
                v127 = *(_QWORD *)(*(_QWORD *)&v121 + 16);
              else
                v127 = *(unsigned __int8 *)(*(_QWORD *)&v121 + 31);
              if (__idx != v127)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v178 = std::string::append(&v193, " cannot be interpreted as an integer");
                v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
                v200.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v179;
                v178->__r_.__value_.__l.__size_ = 0;
                v178->__r_.__value_.__r.__words[2] = 0;
                v178->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &v200);
                __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_205;
            case 3:
              do
                v132 = __ldaxr(*(unint64_t **)&v121);
              while (__stlxr(v132 + 1, *(unint64_t **)&v121));
              v191 = 0;
              v192 = 0;
              v190 = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v190, *(const void **)(*(_QWORD *)&v121 + 8), *(_QWORD *)(*(_QWORD *)&v121 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v121 + 16) - *(_QWORD *)(*(_QWORD *)&v121 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (v190)
              {
                v191 = v190;
                operator delete(v190);
              }
              goto LABEL_204;
            case 4:
              do
                v128 = __ldaxr(*(unint64_t **)&v121);
              while (__stlxr(v128 + 1, *(unint64_t **)&v121));
              memset(v189, 0, sizeof(v189));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v189, *(uint64_t **)(*(_QWORD *)&v121 + 8), *(uint64_t **)(*(_QWORD *)&v121 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v121 + 16) - *(_QWORD *)(*(_QWORD *)&v121 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v200.__r_.__value_.__r.__words[0] = (std::string::size_type)v189;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
              goto LABEL_204;
            case 5:
              do
                v133 = __ldaxr(*(unint64_t **)&v121);
              while (__stlxr(v133 + 1, *(unint64_t **)&v121));
              memset(v188, 0, sizeof(v188));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v188, *(uint64_t **)(*(_QWORD *)&v121 + 8), *(uint64_t **)(*(_QWORD *)&v121 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v121 + 16) - *(_QWORD *)(*(_QWORD *)&v121 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v200.__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
              goto LABEL_204;
            case 8:
              do
                v134 = __ldaxr(*(unint64_t **)&v121);
              while (__stlxr(v134 + 1, *(unint64_t **)&v121));
              v135 = *(unsigned int **)(*(_QWORD *)&v121 + 16);
              __p = *(void **)(*(_QWORD *)&v121 + 8);
              v184 = v135;
              if (v135)
              {
                v136 = v135 + 2;
                do
                  v137 = __ldxr(v136);
                while (__stxr(v137 + 1, v136));
              }
              v138 = *(_OWORD *)(*(_QWORD *)&v121 + 24);
              v139 = *(_OWORD *)(*(_QWORD *)&v121 + 56);
              v186 = *(_OWORD *)(*(_QWORD *)&v121 + 40);
              v187 = v139;
              v185 = v138;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v184);
              goto LABEL_204;
            case 9:
              do
                v129 = __ldaxr(*(unint64_t **)&v121);
              while (__stlxr(v129 + 1, *(unint64_t **)&v121));
              turi::flexible_type_impl::ndarray<double>::ndarray(&p_p, *(_QWORD *)&v121 + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v198 + 1))
              {
                *(_QWORD *)&v199 = *((_QWORD *)&v198 + 1);
                operator delete(*((void **)&v198 + 1));
              }
              if ((_QWORD)v197)
              {
                *((_QWORD *)&v197 + 1) = v197;
                operator delete((void *)v197);
              }
              v126 = (uint64_t)v196;
              if (!v196)
                goto LABEL_205;
              v130 = (unint64_t *)&v196->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v126 + 16))(v126);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v126);
              }
LABEL_204:
              LOBYTE(v126) = 0;
LABEL_205:
              v141 = (_BYTE *)a2[1];
              v140 = a2[2];
              if ((unint64_t)v141 >= v140)
              {
                v143 = *a2;
                v144 = &v141[-*a2];
                v145 = (unint64_t)(v144 + 1);
                if ((uint64_t)(v144 + 1) < 0)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v146 = v140 - v143;
                if (2 * v146 > v145)
                  v145 = 2 * v146;
                if (v146 >= 0x3FFFFFFFFFFFFFFFLL)
                  v147 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v147 = v145;
                if (v147)
                  v148 = (char *)operator new(v147);
                else
                  v148 = 0;
                v149 = &v144[(_QWORD)v148];
                v150 = &v144[(_QWORD)v148];
                *v150 = v126;
                v142 = v150 + 1;
                if (v141 != (_BYTE *)v143)
                {
                  v151 = &v141[~v143];
                  do
                  {
                    v152 = *--v141;
                    (v151--)[(_QWORD)v148] = v152;
                  }
                  while (v141 != (_BYTE *)v143);
                  v149 = v148;
                }
                *a2 = (unint64_t)v149;
                a2[1] = (unint64_t)v142;
                a2[2] = (unint64_t)&v148[v147];
                if (v143)
                  operator delete((void *)v143);
              }
              else
              {
                *v141 = v126;
                v142 = v141 + 1;
              }
              a2[1] = (unint64_t)v142;
              switch(v122)
              {
                case 0:
                  do
                  {
                    v153 = __ldaxr(*(unint64_t **)&v121);
                    v154 = v153 - 1;
                  }
                  while (__stlxr(v154, *(unint64_t **)&v121));
                  if (v154)
                    v155 = 1;
                  else
                    v155 = *(_QWORD *)&v121 == 0;
                  if (!v155)
                  {
                    if (*(char *)(*(_QWORD *)&v121 + 31) < 0)
                      operator delete(*(void **)(*(_QWORD *)&v121 + 8));
                    v156 = v121;
                    v157 = 0x1012C404EF22A49;
                    goto LABEL_269;
                  }
                  break;
                case 1:
                  do
                  {
                    v167 = __ldaxr(*(unint64_t **)&v121);
                    v168 = v167 - 1;
                  }
                  while (__stlxr(v168, *(unint64_t **)&v121));
                  if (v168)
                    v169 = 1;
                  else
                    v169 = *(_QWORD *)&v121 == 0;
                  if (!v169)
                  {
                    v170 = *(void **)(*(_QWORD *)&v121 + 8);
                    if (v170)
                    {
                      *(_QWORD *)(*(_QWORD *)&v121 + 16) = v170;
                      operator delete(v170);
                    }
                    v156 = v121;
                    v157 = 0x1080C409938AC02;
                    goto LABEL_269;
                  }
                  break;
                case 2:
                  do
                  {
                    v158 = __ldaxr(*(unint64_t **)&v121);
                    v159 = v158 - 1;
                  }
                  while (__stlxr(v159, *(unint64_t **)&v121));
                  if (v159)
                    v160 = 1;
                  else
                    v160 = *(_QWORD *)&v121 == 0;
                  if (!v160)
                  {
                    p_p = (void **)(*(_QWORD *)&v121 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
                    goto LABEL_261;
                  }
                  break;
                case 3:
                  do
                  {
                    v171 = __ldaxr(*(unint64_t **)&v121);
                    v172 = v171 - 1;
                  }
                  while (__stlxr(v172, *(unint64_t **)&v121));
                  if (v172)
                    v173 = 1;
                  else
                    v173 = *(_QWORD *)&v121 == 0;
                  if (!v173)
                  {
                    p_p = (void **)(*(_QWORD *)&v121 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_261:
                    v156 = v121;
                    v157 = 0x1020C405E66F15BLL;
                    goto LABEL_269;
                  }
                  break;
                case 6:
                  do
                  {
                    v174 = __ldaxr(*(unint64_t **)&v121);
                    v175 = v174 - 1;
                  }
                  while (__stlxr(v175, *(unint64_t **)&v121));
                  if (v175)
                    v176 = 1;
                  else
                    v176 = *(_QWORD *)&v121 == 0;
                  if (!v176)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v121 + 16));
                    v156 = v121;
                    v166 = -235920773;
                    goto LABEL_268;
                  }
                  break;
                case 7:
                  do
                  {
                    v161 = __ldaxr(*(unint64_t **)&v121);
                    v162 = v161 - 1;
                  }
                  while (__stlxr(v162, *(unint64_t **)&v121));
                  if (v162)
                    v163 = 1;
                  else
                    v163 = *(_QWORD *)&v121 == 0;
                  if (!v163)
                  {
                    v164 = *(void **)(*(_QWORD *)&v121 + 48);
                    if (v164)
                    {
                      *(_QWORD *)(*(_QWORD *)&v121 + 56) = v164;
                      operator delete(v164);
                    }
                    v165 = *(void **)(*(_QWORD *)&v121 + 24);
                    if (v165)
                    {
                      *(_QWORD *)(*(_QWORD *)&v121 + 32) = v165;
                      operator delete(v165);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v121 + 8);
                    v156 = v121;
                    v166 = 2071181815;
LABEL_268:
                    v157 = v166 | 0x1030C4000000000;
LABEL_269:
                    MEMORY[0x219A19A08](*(_QWORD *)&v156, v157);
                  }
                  break;
                default:
                  break;
              }
              v119 += 2;
              if (v119 == v120)
                break;
              continue;
            default:
              LOBYTE(v126) = 0;
              switch(*((_BYTE *)v119 + 12))
              {
                case 0:
                  v126 = *(_QWORD *)v119;
                  goto LABEL_205;
                case 1:
                  v126 = (uint64_t)v121;
                  goto LABEL_205;
                case 6:
                  v126 = (uint64_t)(*(_QWORD *)&v121 << 8) >> 8;
                  goto LABEL_205;
                case 7:
                  goto LABEL_205;
                default:
                  turi::flexible_type_fail(0);
                  goto LABEL_284;
              }
          }
          break;
        }
      }
      p_p = (void **)&v180;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
      break;
    default:
      turi::flexible_type_fail(0);
LABEL_284:
      __break(1u);
      break;
  }
}

void sub_2180BA940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, boost::detail::shared_count *a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;

  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
  switch(*(_BYTE *)(v40 - 116))
  {
    case 2:
      v41 = *(unint64_t **)(v40 - 128);
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (v43)
        goto LABEL_45;
      v59 = *(_QWORD *)(v40 - 128);
      if (!v59)
        goto LABEL_45;
      if (*(char *)(v59 + 31) < 0)
        operator delete(*(void **)(v59 + 8));
      v60 = (_QWORD *)v59;
      v61 = 0x1012C404EF22A49;
      goto LABEL_44;
    case 3:
      v44 = *(unint64_t **)(v40 - 128);
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (v46)
        goto LABEL_45;
      v62 = *(_QWORD **)(v40 - 128);
      if (!v62)
        goto LABEL_45;
      v63 = (void *)v62[1];
      if (v63)
      {
        v62[2] = v63;
        operator delete(v63);
      }
      v60 = v62;
      v61 = 0x1080C409938AC02;
      goto LABEL_44;
    case 4:
      v47 = *(unint64_t **)(v40 - 128);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_45;
      v64 = *(_QWORD **)(v40 - 128);
      if (!v64)
        goto LABEL_45;
      *(_QWORD *)(v40 - 200) = v64 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
      goto LABEL_36;
    case 5:
      v50 = *(unint64_t **)(v40 - 128);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (v52)
        goto LABEL_45;
      v64 = *(_QWORD **)(v40 - 128);
      if (!v64)
        goto LABEL_45;
      *(_QWORD *)(v40 - 200) = v64 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
LABEL_36:
      v60 = v64;
      v61 = 0x1020C405E66F15BLL;
      goto LABEL_44;
    case 8:
      v53 = *(unint64_t **)(v40 - 128);
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (v55)
        goto LABEL_45;
      v65 = *(_QWORD *)(v40 - 128);
      if (!v65)
        goto LABEL_45;
      boost::detail::shared_count::~shared_count((unsigned int **)(v65 + 16));
      v60 = (_QWORD *)v65;
      v66 = -235920773;
      goto LABEL_43;
    case 9:
      v56 = *(unint64_t **)(v40 - 128);
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (v58)
        goto LABEL_45;
      v67 = *(_QWORD **)(v40 - 128);
      if (!v67)
        goto LABEL_45;
      v60 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v67);
      v66 = 2071181815;
LABEL_43:
      v61 = v66 | 0x1030C4000000000;
LABEL_44:
      MEMORY[0x219A19A08](v60, v61);
LABEL_45:
      if (a20 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_45;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SFRAME_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", "operator()", 133, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BB248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  _BYTE *v23;
  std::runtime_error *exception;
  std::string *v25;
  __int128 v26;
  void *v27[2];
  char v28;
  void *__p[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::string v33;
  size_t __idx;

  v3 = *a1;
  LODWORD(v33.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v33.__r_.__value_.__l.__data_) != 8)
  {
LABEL_40:
    __p[0] = &v33;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v5 = (uint64_t)(v3 + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  if (!v6)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  v8 = (uint64_t)(*a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(v27, "output_type");
  __p[0] = v27;
  v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v8, (const void **)v27, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  LOBYTE(v8) = 0;
  switch(*((_BYTE *)v7 + 68))
  {
    case 0:
      v8 = *((_QWORD *)v7 + 7);
      goto LABEL_33;
    case 1:
      v8 = (uint64_t)*((double *)v7 + 7);
      goto LABEL_33;
    case 2:
      v12 = *((_QWORD *)v7 + 7);
      __idx = 0;
      v13 = (char *)(v12 + 8);
      if (*(char *)(v12 + 31) < 0)
        v13 = *(char **)(v12 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v13);
      LOBYTE(v8) = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v30) < 0)
        operator delete(__p[0]);
      if (*(char *)(v12 + 31) < 0)
        v14 = *(_QWORD *)(v12 + 16);
      else
        v14 = *(unsigned __int8 *)(v12 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v25 = std::string::append(&v33, " cannot be interpreted as an integer");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        *(_QWORD *)&v30 = *((_QWORD *)&v25->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_33;
    case 3:
      v9 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_32;
    case 4:
      v15 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      goto LABEL_32;
    case 5:
      v16 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      goto LABEL_32;
    case 6:
      v8 = (uint64_t)(*((_QWORD *)v7 + 7) << 8) >> 8;
      goto LABEL_33;
    case 7:
      goto LABEL_33;
    case 8:
      v17 = *((_QWORD *)v7 + 7);
      v18 = *(unsigned int **)(v17 + 16);
      __p[0] = *(void **)(v17 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v31 = *(_OWORD *)(v17 + 40);
      v32 = v22;
      v30 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_32;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v7 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v31 + 1))
      {
        *(_QWORD *)&v32 = *((_QWORD *)&v31 + 1);
        operator delete(*((void **)&v31 + 1));
      }
      if ((_QWORD)v30)
      {
        *((_QWORD *)&v30 + 1) = v30;
        operator delete((void *)v30);
      }
      v8 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_33;
      v10 = (unint64_t *)((char *)__p[1] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
      }
LABEL_32:
      LOBYTE(v8) = 0;
LABEL_33:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v23 = operator new(1uLL);
      *a2 = v23;
      *v23++ = v8;
      a2[1] = v23;
      a2[2] = v23;
      if (v28 < 0)
        operator delete(v27[0]);
      return;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      goto LABEL_40;
  }
}

void sub_2180BB684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 41) < 0)
  {
    operator delete(*(void **)(v23 - 64));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0)
        operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TRANSFORM_NODE", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 123, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BB918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 124, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BBA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(uint64_t ***a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t **v3;
  uint64_t v5;
  uint64_t **v6;
  _OWORD *v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const std::string *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  std::string::size_type v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  unint64_t *v58;
  unint64_t v59;
  std::string::size_type v60;
  std::string::size_type v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  BOOL v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  BOOL v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  BOOL v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  BOOL v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  BOOL v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::string::size_type v106;
  unint64_t *v107;
  unint64_t v108;
  std::string::size_type v109;
  void *v110;
  void *v111;
  unsigned int v112;
  unint64_t *v113;
  unint64_t v114;
  std::string::size_type v115;
  void *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::string::size_type v121;
  double *v122;
  double *v123;
  double v124;
  int v125;
  unint64_t v126;
  char *v127;
  const std::string *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int v140;
  __int128 v141;
  __int128 v142;
  unint64_t v143;
  _BYTE *v144;
  _BYTE *v145;
  unint64_t v146;
  _BYTE *v147;
  unint64_t v148;
  unint64_t v149;
  size_t v150;
  char *v151;
  char *v152;
  _BYTE *v153;
  _BYTE *v154;
  char v155;
  unint64_t v156;
  unint64_t v157;
  BOOL v158;
  double v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  BOOL v163;
  unint64_t v164;
  unint64_t v165;
  BOOL v166;
  void *v167;
  void *v168;
  unsigned int v169;
  unint64_t v170;
  unint64_t v171;
  BOOL v172;
  void *v173;
  unint64_t v174;
  unint64_t v175;
  BOOL v176;
  unint64_t v177;
  unint64_t v178;
  BOOL v179;
  std::runtime_error *exception;
  std::string *v181;
  __int128 v182;
  double *v183;
  double *v184;
  char *v185;
  void *__p;
  unsigned int *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  _QWORD v191[3];
  void *v192[3];
  void *v193;
  void *v194;
  uint64_t v195;
  std::string v196;
  size_t __idx;
  void **p_p;
  std::__shared_weak_count *v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  std::string v203;
  uint64_t v204;

  v204 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  LODWORD(__p) = *(_DWORD *)*a1;
  if ((_DWORD)__p != 10)
  {
    p_p = &__p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&p_p, "output_types");
  v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v3 + 1), (const void **)&p_p);
  if (SBYTE7(v200) < 0)
    operator delete(p_p);
  if (!v5)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  v6 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_types");
  p_p = &__p;
  v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 1, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  switch(*((_BYTE *)v7 + 68))
  {
    case 0:
      v8 = *((_QWORD *)v7 + 7);
      v203.__r_.__value_.__s.__data_[12] = 0;
      LODWORD(v203.__r_.__value_.__r.__words[1]) = 0;
      v203.__r_.__value_.__r.__words[0] = v8;
      v184 = 0;
      v185 = 0;
      v183 = 0;
      p_p = (void **)&v183;
      LOBYTE(v199) = 0;
      v183 = (double *)operator new(0x10uLL);
      v184 = v183;
      v185 = (char *)(v183 + 2);
      v184 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v185, (uint64_t *)&v203, (uint64_t *)&v203.__r_.__value_.__r.__words[2], (uint64_t)v183);
      switch(v203.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v9 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v10 = __ldaxr(v9);
            v11 = --v10 == 0;
          }
          while (__stlxr(v10, v9));
          goto LABEL_80;
        case 3:
          v83 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v84 = __ldaxr(v83);
            v85 = --v84 == 0;
          }
          while (__stlxr(v84, v83));
          goto LABEL_153;
        case 4:
          v69 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v70 = __ldaxr(v69);
            v71 = --v70 == 0;
          }
          while (__stlxr(v70, v69));
          goto LABEL_137;
        case 5:
          v88 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v89 = __ldaxr(v88);
            v90 = --v89 == 0;
          }
          while (__stlxr(v89, v88));
          goto LABEL_161;
        case 8:
          v95 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v96 = __ldaxr(v95);
            v97 = --v96 == 0;
          }
          while (__stlxr(v96, v95));
          goto LABEL_168;
        case 9:
          v74 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v75 = __ldaxr(v74);
            v76 = --v75 == 0;
          }
          while (__stlxr(v75, v74));
          goto LABEL_143;
        default:
          goto LABEL_174;
      }
      goto LABEL_174;
    case 1:
      v52 = *((_QWORD *)v7 + 7);
      LODWORD(v203.__r_.__value_.__r.__words[1]) = 0;
      v203.__r_.__value_.__s.__data_[12] = 1;
      v203.__r_.__value_.__r.__words[0] = v52;
      v184 = 0;
      v185 = 0;
      v183 = 0;
      p_p = (void **)&v183;
      LOBYTE(v199) = 0;
      v183 = (double *)operator new(0x10uLL);
      v184 = v183;
      v185 = (char *)(v183 + 2);
      v184 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v185, (uint64_t *)&v203, (uint64_t *)&v203.__r_.__value_.__r.__words[2], (uint64_t)v183);
      switch(v203.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v53 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v54 = __ldaxr(v53);
            v11 = --v54 == 0;
          }
          while (__stlxr(v54, v53));
          goto LABEL_80;
        case 3:
          v86 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v87 = __ldaxr(v86);
            v85 = --v87 == 0;
          }
          while (__stlxr(v87, v86));
          goto LABEL_153;
        case 4:
          v72 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v73 = __ldaxr(v72);
            v71 = --v73 == 0;
          }
          while (__stlxr(v73, v72));
          goto LABEL_137;
        case 5:
          v91 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v92 = __ldaxr(v91);
            v90 = --v92 == 0;
          }
          while (__stlxr(v92, v91));
          goto LABEL_161;
        case 8:
          v98 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v99 = __ldaxr(v98);
            v97 = --v99 == 0;
          }
          while (__stlxr(v99, v98));
          goto LABEL_168;
        case 9:
          v77 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v78 = __ldaxr(v77);
            v76 = --v78 == 0;
          }
          while (__stlxr(v78, v77));
          goto LABEL_143;
        default:
          goto LABEL_174;
      }
      goto LABEL_174;
    case 2:
      v16 = (const std::string *)(*((_QWORD *)v7 + 7) + 8);
      v203.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v203.__r_.__value_.__r.__words[1]) = 0;
      v203.__r_.__value_.__s.__data_[12] = 0;
      turi::flexible_type::operator=<std::string>((uint64_t *)&v203, v16);
      v183 = 0;
      v184 = 0;
      v185 = 0;
      p_p = (void **)&v183;
      LOBYTE(v199) = 0;
      v183 = (double *)operator new(0x10uLL);
      v184 = v183;
      v185 = (char *)(v183 + 2);
      v184 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v185, (uint64_t *)&v203, (uint64_t *)&v203.__r_.__value_.__r.__words[2], (uint64_t)v183);
      switch(v203.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v17 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v18 = __ldaxr(v17);
            v11 = --v18 == 0;
          }
          while (__stlxr(v18, v17));
          goto LABEL_80;
        case 3:
          v113 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v114 = __ldaxr(v113);
            v85 = --v114 == 0;
          }
          while (__stlxr(v114, v113));
          goto LABEL_153;
        case 4:
          v104 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v105 = __ldaxr(v104);
            v71 = --v105 == 0;
          }
          while (__stlxr(v105, v104));
          goto LABEL_137;
        case 5:
          v117 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v118 = __ldaxr(v117);
            v90 = --v118 == 0;
          }
          while (__stlxr(v118, v117));
          goto LABEL_161;
        case 8:
          v119 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v120 = __ldaxr(v119);
            v97 = --v120 == 0;
          }
          while (__stlxr(v120, v119));
          goto LABEL_168;
        case 9:
          v107 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v108 = __ldaxr(v107);
            v76 = --v108 == 0;
          }
          while (__stlxr(v108, v107));
          goto LABEL_143;
        default:
          goto LABEL_174;
      }
      goto LABEL_174;
    case 3:
      v19 = *((_QWORD *)v7 + 7);
      std::vector<turi::flexible_type>::vector(&v183, (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 3);
      v20 = *(_QWORD *)(v19 + 8);
      if (*(_QWORD *)(v19 + 16) != v20)
      {
        v21 = 0;
        do
        {
          v22 = (char *)&v183[2 * v21];
          switch(v22[12])
          {
            case 2:
              v23 = *(unint64_t **)v22;
              do
              {
                v24 = __ldaxr(v23);
                v25 = v24 - 1;
              }
              while (__stlxr(v25, v23));
              if (!v25)
              {
                v26 = *(unint64_t **)v22;
                if (!*(_QWORD *)v22)
                  goto LABEL_68;
                if (*((char *)v26 + 31) < 0)
                  operator delete((void *)v26[1]);
                v27 = v26;
                v28 = 0x1012C404EF22A49;
                goto LABEL_67;
              }
              break;
            case 3:
              v40 = *(unint64_t **)v22;
              do
              {
                v41 = __ldaxr(v40);
                v42 = v41 - 1;
              }
              while (__stlxr(v42, v40));
              if (!v42)
              {
                v43 = *(unint64_t **)v22;
                if (!*(_QWORD *)v22)
                  goto LABEL_68;
                v44 = (void *)v43[1];
                if (v44)
                {
                  v43[2] = (unint64_t)v44;
                  operator delete(v44);
                }
                v27 = v43;
                v28 = 0x1080C409938AC02;
                goto LABEL_67;
              }
              break;
            case 4:
              v29 = *(unint64_t **)v22;
              do
              {
                v30 = __ldaxr(v29);
                v31 = v30 - 1;
              }
              while (__stlxr(v31, v29));
              if (!v31)
              {
                v32 = *(unint64_t **)v22;
                if (!*(_QWORD *)v22)
                  goto LABEL_68;
                p_p = (void **)(v32 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
                goto LABEL_60;
              }
              break;
            case 5:
              v45 = *(unint64_t **)v22;
              do
              {
                v46 = __ldaxr(v45);
                v47 = v46 - 1;
              }
              while (__stlxr(v47, v45));
              if (!v47)
              {
                v32 = *(unint64_t **)v22;
                if (!*(_QWORD *)v22)
                  goto LABEL_68;
                p_p = (void **)(v32 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_60:
                v27 = v32;
                v28 = 0x1020C405E66F15BLL;
                goto LABEL_67;
              }
              break;
            case 8:
              v48 = *(unint64_t **)v22;
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50)
              {
                v51 = *(unint64_t **)v22;
                if (!*(_QWORD *)v22)
                  goto LABEL_68;
                boost::detail::shared_count::~shared_count((unsigned int **)v51 + 2);
                v27 = v51;
                v39 = -235920773;
                goto LABEL_66;
              }
              break;
            case 9:
              v33 = *(unint64_t **)v22;
              do
              {
                v34 = __ldaxr(v33);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, v33));
              if (!v35)
              {
                v36 = *(unint64_t **)v22;
                if (*(_QWORD *)v22)
                {
                  v37 = (void *)v36[6];
                  if (v37)
                  {
                    v36[7] = (unint64_t)v37;
                    operator delete(v37);
                  }
                  v38 = (void *)v36[3];
                  if (v38)
                  {
                    v36[4] = (unint64_t)v38;
                    operator delete(v38);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v36 + 1));
                  v27 = v36;
                  v39 = 2071181815;
LABEL_66:
                  v28 = v39 | 0x1030C4000000000;
LABEL_67:
                  MEMORY[0x219A19A08](v27, v28);
                }
LABEL_68:
                *(_QWORD *)v22 = 0;
              }
              break;
            default:
              break;
          }
          *(_QWORD *)v22 = 0;
          *((_DWORD *)v22 + 2) = 0;
          v22[12] = 1;
          *(_QWORD *)v22 = *(_QWORD *)(v20 + 8 * v21++);
          v20 = *(_QWORD *)(v19 + 8);
        }
        while (v21 < (*(_QWORD *)(v19 + 16) - v20) >> 3);
      }
      goto LABEL_174;
    case 4:
      v12 = *((_QWORD *)v7 + 7);
      v184 = 0;
      v185 = 0;
      v183 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v183, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 4);
      goto LABEL_174;
    case 5:
      v55 = *((_QWORD *)v7 + 7);
      v199 = 0;
      *(_QWORD *)&v200 = 0;
      p_p = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&p_p, *(uint64_t **)(v55 + 8), *(uint64_t **)(v55 + 16), (uint64_t)(*(_QWORD *)(v55 + 16) - *(_QWORD *)(v55 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v183 = 0;
      v184 = 0;
      v185 = 0;
      v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
      goto LABEL_174;
    case 6:
      v56 = (double)((uint64_t)(*((_QWORD *)v7 + 7) << 8) >> 8);
      v57 = (double)*((int *)v7 + 16) / 1000000.0;
      LODWORD(v203.__r_.__value_.__r.__words[1]) = 0;
      v203.__r_.__value_.__s.__data_[12] = 1;
      *(double *)&v203.__r_.__value_.__l.__data_ = v57 + v56;
      v184 = 0;
      v185 = 0;
      v183 = 0;
      p_p = (void **)&v183;
      LOBYTE(v199) = 0;
      v183 = (double *)operator new(0x10uLL);
      v184 = v183;
      v185 = (char *)(v183 + 2);
      v184 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v185, (uint64_t *)&v203, (uint64_t *)&v203.__r_.__value_.__r.__words[2], (uint64_t)v183);
      switch(v203.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v58 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v59 = __ldaxr(v58);
            v11 = --v59 == 0;
          }
          while (__stlxr(v59, v58));
LABEL_80:
          if (v11)
          {
            v60 = v203.__r_.__value_.__r.__words[0];
            if (v203.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v203.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v203.__r_.__value_.__r.__words[0] + 8));
              v61 = v60;
              v62 = 0x1012C404EF22A49;
              goto LABEL_173;
            }
          }
          break;
        case 3:
          v93 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v94 = __ldaxr(v93);
            v85 = --v94 == 0;
          }
          while (__stlxr(v94, v93));
LABEL_153:
          if (v85)
          {
            v115 = v203.__r_.__value_.__r.__words[0];
            if (v203.__r_.__value_.__r.__words[0])
            {
              v116 = *(void **)(v203.__r_.__value_.__r.__words[0] + 8);
              if (v116)
              {
                *(_QWORD *)(v203.__r_.__value_.__r.__words[0] + 16) = v116;
                operator delete(v116);
              }
              v61 = v115;
              v62 = 0x1080C409938AC02;
              goto LABEL_173;
            }
          }
          break;
        case 4:
          v79 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v80 = __ldaxr(v79);
            v71 = --v80 == 0;
          }
          while (__stlxr(v80, v79));
LABEL_137:
          if (v71)
          {
            v106 = v203.__r_.__value_.__r.__words[0];
            if (v203.__r_.__value_.__r.__words[0])
            {
              p_p = (void **)(v203.__r_.__value_.__r.__words[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
              goto LABEL_165;
            }
          }
          break;
        case 5:
          v100 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v101 = __ldaxr(v100);
            v90 = --v101 == 0;
          }
          while (__stlxr(v101, v100));
LABEL_161:
          if (v90)
          {
            v106 = v203.__r_.__value_.__r.__words[0];
            if (v203.__r_.__value_.__r.__words[0])
            {
              p_p = (void **)(v203.__r_.__value_.__r.__words[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_165:
              v61 = v106;
              v62 = 0x1020C405E66F15BLL;
              goto LABEL_173;
            }
          }
          break;
        case 8:
          v102 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v103 = __ldaxr(v102);
            v97 = --v103 == 0;
          }
          while (__stlxr(v103, v102));
LABEL_168:
          if (v97)
          {
            v121 = v203.__r_.__value_.__r.__words[0];
            if (v203.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v203.__r_.__value_.__r.__words[0] + 16));
              v61 = v121;
              v112 = -235920773;
              goto LABEL_172;
            }
          }
          break;
        case 9:
          v81 = (unint64_t *)v203.__r_.__value_.__r.__words[0];
          do
          {
            v82 = __ldaxr(v81);
            v76 = --v82 == 0;
          }
          while (__stlxr(v82, v81));
LABEL_143:
          if (v76)
          {
            v109 = v203.__r_.__value_.__r.__words[0];
            if (v203.__r_.__value_.__r.__words[0])
            {
              v110 = *(void **)(v203.__r_.__value_.__r.__words[0] + 48);
              if (v110)
              {
                *(_QWORD *)(v203.__r_.__value_.__r.__words[0] + 56) = v110;
                operator delete(v110);
              }
              v111 = *(void **)(v109 + 24);
              if (v111)
              {
                *(_QWORD *)(v109 + 32) = v111;
                operator delete(v111);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v109 + 8);
              v61 = v109;
              v112 = 2071181815;
LABEL_172:
              v62 = v112 | 0x1030C4000000000;
LABEL_173:
              MEMORY[0x219A19A08](v61, v62);
            }
          }
          break;
        default:
          goto LABEL_174;
      }
      goto LABEL_174;
    case 7:
      v183 = 0;
      v184 = 0;
      v185 = 0;
      goto LABEL_174;
    case 8:
      v63 = *((_QWORD *)v7 + 7);
      v64 = *(unsigned int **)(v63 + 16);
      p_p = *(void ***)(v63 + 8);
      v199 = (std::__shared_weak_count *)v64;
      if (v64)
      {
        v65 = v64 + 2;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v67 = *(_OWORD *)(v63 + 24);
      v68 = *(_OWORD *)(v63 + 40);
      v202 = *(_OWORD *)(v63 + 56);
      v201 = v68;
      v200 = v67;
      turi::flexible_type_fail(0);
      v183 = 0;
      v184 = 0;
      v185 = 0;
      boost::detail::shared_count::~shared_count((unsigned int **)&v199);
      goto LABEL_174;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&p_p, *((_QWORD *)v7 + 7) + 8);
      turi::flexible_type_fail(0);
      v183 = 0;
      v184 = 0;
      v185 = 0;
      if (*((_QWORD *)&v201 + 1))
      {
        *(_QWORD *)&v202 = *((_QWORD *)&v201 + 1);
        operator delete(*((void **)&v201 + 1));
      }
      if ((_QWORD)v200)
      {
        *((_QWORD *)&v200 + 1) = v200;
        operator delete((void *)v200);
      }
      v13 = v199;
      if (v199)
      {
        p_shared_owners = (unint64_t *)&v199->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
LABEL_174:
      if (SBYTE7(v188) < 0)
        operator delete(__p);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v122 = v183;
      v123 = v184;
      if (v183 != v184)
      {
        while (2)
        {
          v124 = *v122;
          v125 = *((unsigned __int8 *)v122 + 12) - 2;
          switch(*((_BYTE *)v122 + 12))
          {
            case 2:
              do
                v126 = __ldaxr(*(unint64_t **)&v124);
              while (__stlxr(v126 + 1, *(unint64_t **)&v124));
              __idx = 0;
              v127 = (char *)(*(_QWORD *)&v124 + 8);
              if (*(char *)(*(_QWORD *)&v124 + 31) < 0)
                v127 = *(char **)(*(_QWORD *)&v124 + 8);
              v128 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v203, v127);
              LOBYTE(v129) = std::stoll(v128, &__idx, 10);
              if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v203.__r_.__value_.__l.__data_);
              if (*(char *)(*(_QWORD *)&v124 + 31) < 0)
                v130 = *(_QWORD *)(*(_QWORD *)&v124 + 16);
              else
                v130 = *(unsigned __int8 *)(*(_QWORD *)&v124 + 31);
              if (__idx != v130)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v181 = std::string::append(&v196, " cannot be interpreted as an integer");
                v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
                v203.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v182;
                v181->__r_.__value_.__l.__size_ = 0;
                v181->__r_.__value_.__r.__words[2] = 0;
                v181->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &v203);
                __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_208;
            case 3:
              do
                v135 = __ldaxr(*(unint64_t **)&v124);
              while (__stlxr(v135 + 1, *(unint64_t **)&v124));
              v194 = 0;
              v195 = 0;
              v193 = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v193, *(const void **)(*(_QWORD *)&v124 + 8), *(_QWORD *)(*(_QWORD *)&v124 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v124 + 16) - *(_QWORD *)(*(_QWORD *)&v124 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (v193)
              {
                v194 = v193;
                operator delete(v193);
              }
              goto LABEL_207;
            case 4:
              do
                v131 = __ldaxr(*(unint64_t **)&v124);
              while (__stlxr(v131 + 1, *(unint64_t **)&v124));
              memset(v192, 0, sizeof(v192));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v192, *(uint64_t **)(*(_QWORD *)&v124 + 8), *(uint64_t **)(*(_QWORD *)&v124 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v124 + 16) - *(_QWORD *)(*(_QWORD *)&v124 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v203.__r_.__value_.__r.__words[0] = (std::string::size_type)v192;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
              goto LABEL_207;
            case 5:
              do
                v136 = __ldaxr(*(unint64_t **)&v124);
              while (__stlxr(v136 + 1, *(unint64_t **)&v124));
              memset(v191, 0, sizeof(v191));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v191, *(uint64_t **)(*(_QWORD *)&v124 + 8), *(uint64_t **)(*(_QWORD *)&v124 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v124 + 16) - *(_QWORD *)(*(_QWORD *)&v124 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v203.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
              goto LABEL_207;
            case 8:
              do
                v137 = __ldaxr(*(unint64_t **)&v124);
              while (__stlxr(v137 + 1, *(unint64_t **)&v124));
              v138 = *(unsigned int **)(*(_QWORD *)&v124 + 16);
              __p = *(void **)(*(_QWORD *)&v124 + 8);
              v187 = v138;
              if (v138)
              {
                v139 = v138 + 2;
                do
                  v140 = __ldxr(v139);
                while (__stxr(v140 + 1, v139));
              }
              v141 = *(_OWORD *)(*(_QWORD *)&v124 + 24);
              v142 = *(_OWORD *)(*(_QWORD *)&v124 + 56);
              v189 = *(_OWORD *)(*(_QWORD *)&v124 + 40);
              v190 = v142;
              v188 = v141;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v187);
              goto LABEL_207;
            case 9:
              do
                v132 = __ldaxr(*(unint64_t **)&v124);
              while (__stlxr(v132 + 1, *(unint64_t **)&v124));
              turi::flexible_type_impl::ndarray<double>::ndarray(&p_p, *(_QWORD *)&v124 + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v201 + 1))
              {
                *(_QWORD *)&v202 = *((_QWORD *)&v201 + 1);
                operator delete(*((void **)&v201 + 1));
              }
              if ((_QWORD)v200)
              {
                *((_QWORD *)&v200 + 1) = v200;
                operator delete((void *)v200);
              }
              v129 = (uint64_t)v199;
              if (!v199)
                goto LABEL_208;
              v133 = (unint64_t *)&v199->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v129 + 16))(v129);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v129);
              }
LABEL_207:
              LOBYTE(v129) = 0;
LABEL_208:
              v144 = (_BYTE *)a2[1];
              v143 = a2[2];
              if ((unint64_t)v144 >= v143)
              {
                v146 = *a2;
                v147 = &v144[-*a2];
                v148 = (unint64_t)(v147 + 1);
                if ((uint64_t)(v147 + 1) < 0)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v149 = v143 - v146;
                if (2 * v149 > v148)
                  v148 = 2 * v149;
                if (v149 >= 0x3FFFFFFFFFFFFFFFLL)
                  v150 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v150 = v148;
                if (v150)
                  v151 = (char *)operator new(v150);
                else
                  v151 = 0;
                v152 = &v147[(_QWORD)v151];
                v153 = &v147[(_QWORD)v151];
                *v153 = v129;
                v145 = v153 + 1;
                if (v144 != (_BYTE *)v146)
                {
                  v154 = &v144[~v146];
                  do
                  {
                    v155 = *--v144;
                    (v154--)[(_QWORD)v151] = v155;
                  }
                  while (v144 != (_BYTE *)v146);
                  v152 = v151;
                }
                *a2 = (unint64_t)v152;
                a2[1] = (unint64_t)v145;
                a2[2] = (unint64_t)&v151[v150];
                if (v146)
                  operator delete((void *)v146);
              }
              else
              {
                *v144 = v129;
                v145 = v144 + 1;
              }
              a2[1] = (unint64_t)v145;
              switch(v125)
              {
                case 0:
                  do
                  {
                    v156 = __ldaxr(*(unint64_t **)&v124);
                    v157 = v156 - 1;
                  }
                  while (__stlxr(v157, *(unint64_t **)&v124));
                  if (v157)
                    v158 = 1;
                  else
                    v158 = *(_QWORD *)&v124 == 0;
                  if (!v158)
                  {
                    if (*(char *)(*(_QWORD *)&v124 + 31) < 0)
                      operator delete(*(void **)(*(_QWORD *)&v124 + 8));
                    v159 = v124;
                    v160 = 0x1012C404EF22A49;
                    goto LABEL_272;
                  }
                  break;
                case 1:
                  do
                  {
                    v170 = __ldaxr(*(unint64_t **)&v124);
                    v171 = v170 - 1;
                  }
                  while (__stlxr(v171, *(unint64_t **)&v124));
                  if (v171)
                    v172 = 1;
                  else
                    v172 = *(_QWORD *)&v124 == 0;
                  if (!v172)
                  {
                    v173 = *(void **)(*(_QWORD *)&v124 + 8);
                    if (v173)
                    {
                      *(_QWORD *)(*(_QWORD *)&v124 + 16) = v173;
                      operator delete(v173);
                    }
                    v159 = v124;
                    v160 = 0x1080C409938AC02;
                    goto LABEL_272;
                  }
                  break;
                case 2:
                  do
                  {
                    v161 = __ldaxr(*(unint64_t **)&v124);
                    v162 = v161 - 1;
                  }
                  while (__stlxr(v162, *(unint64_t **)&v124));
                  if (v162)
                    v163 = 1;
                  else
                    v163 = *(_QWORD *)&v124 == 0;
                  if (!v163)
                  {
                    p_p = (void **)(*(_QWORD *)&v124 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
                    goto LABEL_264;
                  }
                  break;
                case 3:
                  do
                  {
                    v174 = __ldaxr(*(unint64_t **)&v124);
                    v175 = v174 - 1;
                  }
                  while (__stlxr(v175, *(unint64_t **)&v124));
                  if (v175)
                    v176 = 1;
                  else
                    v176 = *(_QWORD *)&v124 == 0;
                  if (!v176)
                  {
                    p_p = (void **)(*(_QWORD *)&v124 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_264:
                    v159 = v124;
                    v160 = 0x1020C405E66F15BLL;
                    goto LABEL_272;
                  }
                  break;
                case 6:
                  do
                  {
                    v177 = __ldaxr(*(unint64_t **)&v124);
                    v178 = v177 - 1;
                  }
                  while (__stlxr(v178, *(unint64_t **)&v124));
                  if (v178)
                    v179 = 1;
                  else
                    v179 = *(_QWORD *)&v124 == 0;
                  if (!v179)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v124 + 16));
                    v159 = v124;
                    v169 = -235920773;
                    goto LABEL_271;
                  }
                  break;
                case 7:
                  do
                  {
                    v164 = __ldaxr(*(unint64_t **)&v124);
                    v165 = v164 - 1;
                  }
                  while (__stlxr(v165, *(unint64_t **)&v124));
                  if (v165)
                    v166 = 1;
                  else
                    v166 = *(_QWORD *)&v124 == 0;
                  if (!v166)
                  {
                    v167 = *(void **)(*(_QWORD *)&v124 + 48);
                    if (v167)
                    {
                      *(_QWORD *)(*(_QWORD *)&v124 + 56) = v167;
                      operator delete(v167);
                    }
                    v168 = *(void **)(*(_QWORD *)&v124 + 24);
                    if (v168)
                    {
                      *(_QWORD *)(*(_QWORD *)&v124 + 32) = v168;
                      operator delete(v168);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v124 + 8);
                    v159 = v124;
                    v169 = 2071181815;
LABEL_271:
                    v160 = v169 | 0x1030C4000000000;
LABEL_272:
                    MEMORY[0x219A19A08](*(_QWORD *)&v159, v160);
                  }
                  break;
                default:
                  break;
              }
              v122 += 2;
              if (v122 == v123)
                break;
              continue;
            default:
              LOBYTE(v129) = 0;
              switch(*((_BYTE *)v122 + 12))
              {
                case 0:
                  v129 = *(_QWORD *)v122;
                  goto LABEL_208;
                case 1:
                  v129 = (uint64_t)v124;
                  goto LABEL_208;
                case 6:
                  v129 = (uint64_t)(*(_QWORD *)&v124 << 8) >> 8;
                  goto LABEL_208;
                case 7:
                  goto LABEL_208;
                default:
                  turi::flexible_type_fail(0);
                  goto LABEL_288;
              }
          }
          break;
        }
      }
      p_p = (void **)&v183;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
      break;
    default:
      turi::flexible_type_fail(0);
LABEL_288:
      __break(1u);
      break;
  }
}

void sub_2180BCB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, boost::detail::shared_count *a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;

  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
  switch(*(_BYTE *)(v40 - 116))
  {
    case 2:
      v41 = *(unint64_t **)(v40 - 128);
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (v43)
        goto LABEL_45;
      v59 = *(_QWORD *)(v40 - 128);
      if (!v59)
        goto LABEL_45;
      if (*(char *)(v59 + 31) < 0)
        operator delete(*(void **)(v59 + 8));
      v60 = (_QWORD *)v59;
      v61 = 0x1012C404EF22A49;
      goto LABEL_44;
    case 3:
      v44 = *(unint64_t **)(v40 - 128);
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (v46)
        goto LABEL_45;
      v62 = *(_QWORD **)(v40 - 128);
      if (!v62)
        goto LABEL_45;
      v63 = (void *)v62[1];
      if (v63)
      {
        v62[2] = v63;
        operator delete(v63);
      }
      v60 = v62;
      v61 = 0x1080C409938AC02;
      goto LABEL_44;
    case 4:
      v47 = *(unint64_t **)(v40 - 128);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_45;
      v64 = *(_QWORD **)(v40 - 128);
      if (!v64)
        goto LABEL_45;
      *(_QWORD *)(v40 - 200) = v64 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
      goto LABEL_36;
    case 5:
      v50 = *(unint64_t **)(v40 - 128);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (v52)
        goto LABEL_45;
      v64 = *(_QWORD **)(v40 - 128);
      if (!v64)
        goto LABEL_45;
      *(_QWORD *)(v40 - 200) = v64 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 200));
LABEL_36:
      v60 = v64;
      v61 = 0x1020C405E66F15BLL;
      goto LABEL_44;
    case 8:
      v53 = *(unint64_t **)(v40 - 128);
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (v55)
        goto LABEL_45;
      v65 = *(_QWORD *)(v40 - 128);
      if (!v65)
        goto LABEL_45;
      boost::detail::shared_count::~shared_count((unsigned int **)(v65 + 16));
      v60 = (_QWORD *)v65;
      v66 = -235920773;
      goto LABEL_43;
    case 9:
      v56 = *(unint64_t **)(v40 - 128);
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (v58)
        goto LABEL_45;
      v67 = *(_QWORD **)(v40 - 128);
      if (!v67)
        goto LABEL_45;
      v60 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v67);
      v66 = 2071181815;
LABEL_43:
      v61 = v66 | 0x1030C4000000000;
LABEL_44:
      MEMORY[0x219A19A08](v60, v61);
LABEL_45:
      if (a20 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_45;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_TRANSFORM_NODE", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 127, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BD440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_types\")", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 128, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BD5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(_DWORD **a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  void *__p;
  char *v23;
  _QWORD v24[2];
  void **p_p;

  v3 = *a1;
  LODWORD(p_p) = **a1;
  if ((_DWORD)p_p != 11)
  {
    __p = &p_p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v5 = v3 + 14;
  v4 = (_QWORD *)*((_QWORD *)v3 + 7);
  v6 = *((_QWORD *)v5 + 1) - (_QWORD)v4;
  __p = (void *)(v6 >> 4);
  if (!v6)
  {
    p_p = &__p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  v8 = (std::__shared_weak_count *)v4[1];
  v24[0] = *v4;
  v24[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  turi::query_eval::infer_planner_node_type((_QWORD *)a2, v24);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *((_QWORD *)*a1 + 7);
  if ((unint64_t)(*((_QWORD *)*a1 + 8) - v13) >= 0x11)
  {
    v14 = 1;
    do
    {
      v15 = *(_OWORD *)(v13 + 16 * v14);
      v21 = v15;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
      if (*((_QWORD *)&v15 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      turi::query_eval::infer_planner_node_type(&__p, &v21);
      if (v16)
      {
        v19 = (unint64_t *)&v16->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::vector<turi::flex_type_enum>::__insert_with_size[abi:ne180100]<std::__wrap_iter<turi::flex_type_enum*>,std::__wrap_iter<turi::flex_type_enum*>>(a2, *(char **)(a2 + 8), (char *)__p, v23, v23 - (_BYTE *)__p);
      if (__p)
      {
        v23 = (char *)__p;
        operator delete(__p);
      }
      ++v14;
      v13 = *((_QWORD *)*a1 + 7);
    }
    while (v14 < (*((_QWORD *)*a1 + 8) - v13) >> 4);
  }
}

void sub_2180BD7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::UNION_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 124, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BD9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 125, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BDBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

char *std::vector<turi::flex_type_enum>::__insert_with_size[abi:ne180100]<std::__wrap_iter<turi::flex_type_enum*>,std::__wrap_iter<turi::flex_type_enum*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  char v25;
  char *v26;
  char *v27;
  int64_t v28;
  char v29;
  char *v30;
  char *v31;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    v27 = &v13[(_QWORD)v16 + v6];
    v28 = (_BYTE *)v16 - v11;
    do
    {
      v29 = *v7++;
      v5[v28++] = v29;
      --v6;
    }
    while (v6);
    v30 = &v13[(_QWORD)v16];
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v16 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v30 = (char *)v16;
    }
    v31 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v27, v5, v10 - v5);
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = &v27[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v11)
      operator delete(v11);
    return v26;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
LABEL_17:
    v21 = &v5[v6];
    v22 = &v20[-v6];
    v23 = v20;
    if (&v20[-v6] < v10)
    {
      v24 = &v10[v6] - v20;
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v5[v6], v5, v20 - v21);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7);
    return v5;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
  return v5;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  _BYTE *v23;
  std::runtime_error *exception;
  std::string *v25;
  __int128 v26;
  void *v27[2];
  char v28;
  void *__p[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::string v33;
  size_t __idx;

  v3 = *a1;
  LODWORD(v33.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v33.__r_.__value_.__l.__data_) != 13)
  {
LABEL_40:
    __p[0] = &v33;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v5 = (uint64_t)(v3 + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  if (!v6)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  v8 = (uint64_t)(*a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(v27, "output_type");
  __p[0] = v27;
  v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v8, (const void **)v27, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  LOBYTE(v8) = 0;
  switch(*((_BYTE *)v7 + 68))
  {
    case 0:
      v8 = *((_QWORD *)v7 + 7);
      goto LABEL_33;
    case 1:
      v8 = (uint64_t)*((double *)v7 + 7);
      goto LABEL_33;
    case 2:
      v12 = *((_QWORD *)v7 + 7);
      __idx = 0;
      v13 = (char *)(v12 + 8);
      if (*(char *)(v12 + 31) < 0)
        v13 = *(char **)(v12 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v13);
      LOBYTE(v8) = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v30) < 0)
        operator delete(__p[0]);
      if (*(char *)(v12 + 31) < 0)
        v14 = *(_QWORD *)(v12 + 16);
      else
        v14 = *(unsigned __int8 *)(v12 + 31);
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v25 = std::string::append(&v33, " cannot be interpreted as an integer");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        *(_QWORD *)&v30 = *((_QWORD *)&v25->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_33;
    case 3:
      v9 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_32;
    case 4:
      v15 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      goto LABEL_32;
    case 5:
      v16 = *((_QWORD *)v7 + 7);
      __p[1] = 0;
      *(_QWORD *)&v30 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      goto LABEL_32;
    case 6:
      v8 = (uint64_t)(*((_QWORD *)v7 + 7) << 8) >> 8;
      goto LABEL_33;
    case 7:
      goto LABEL_33;
    case 8:
      v17 = *((_QWORD *)v7 + 7);
      v18 = *(unsigned int **)(v17 + 16);
      __p[0] = *(void **)(v17 + 8);
      __p[1] = v18;
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_OWORD *)(v17 + 56);
      v31 = *(_OWORD *)(v17 + 40);
      v32 = v22;
      v30 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_32;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v7 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v31 + 1))
      {
        *(_QWORD *)&v32 = *((_QWORD *)&v31 + 1);
        operator delete(*((void **)&v31 + 1));
      }
      if ((_QWORD)v30)
      {
        *((_QWORD *)&v30 + 1) = v30;
        operator delete((void *)v30);
      }
      v8 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_33;
      v10 = (unint64_t *)((char *)__p[1] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
      }
LABEL_32:
      LOBYTE(v8) = 0;
LABEL_33:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v23 = operator new(1uLL);
      *a2 = v23;
      *v23++ = v8;
      a2[1] = v23;
      a2[2] = v23;
      if (v28 < 0)
        operator delete(v27[0]);
      return;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      goto LABEL_40;
  }
}

void sub_2180BE1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 41) < 0)
  {
    operator delete(*(void **)(v23 - 64));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0)
        operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::REDUCE_NODE", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 110, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BE470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BE5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  void *__p[2];
  uint64_t v29;
  _QWORD v30[3];

  v3 = *a1;
  LODWORD(__p[0]) = **a1;
  if (LODWORD(__p[0]) != 12)
  {
    v30[0] = __p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v4 = *((_QWORD *)v3 + 8) - *((_QWORD *)v3 + 7);
  v30[0] = v4 >> 4;
  if (!v4)
  {
    __p[0] = v30;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  std::vector<std::vector<turi::flex_type_enum>>::vector(v30, v4 >> 4);
  v6 = *a1;
  v7 = *((_QWORD *)*a1 + 7);
  if (*((_QWORD *)*a1 + 8) != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_OWORD *)(v7 + 16 * v8);
      v27 = v9;
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      turi::query_eval::infer_planner_node_type(__p, &v27);
      v13 = v30[0];
      v14 = v30[0] + 24 * v8;
      v15 = *(void **)v14;
      if (*(_QWORD *)v14)
      {
        *(_QWORD *)(v30[0] + 24 * v8 + 8) = v15;
        operator delete(v15);
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0;
      }
      *(_OWORD *)v14 = *(_OWORD *)__p;
      *(_QWORD *)(v13 + 24 * v8 + 16) = v29;
      __p[0] = 0;
      __p[1] = 0;
      v29 = 0;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v8;
      v6 = *a1;
      v7 = *((_QWORD *)*a1 + 7);
    }
    while (v8 < (*((_QWORD *)*a1 + 8) - v7) >> 4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "index_map");
  v18 = *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v6 + 2), (const void **)__p);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  std::vector<turi::flex_type_enum>::vector(a2, (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 5);
  v19 = *(_QWORD *)(v18 + 8);
  v20 = *(_QWORD *)(v18 + 16) - v19;
  if (v20)
  {
    v21 = v20 >> 5;
    v22 = v30[0];
    v23 = (_BYTE *)*a2;
    if (v21 <= 1)
      v21 = 1;
    v24 = (uint64_t *)(v19 + 16);
    do
    {
      v25 = 24 * *(v24 - 2);
      v26 = *v24;
      v24 += 4;
      *v23++ = *(_BYTE *)(*(_QWORD *)(v22 + v25) + v26);
      --v21;
    }
    while (v21);
  }
  __p[0] = v30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_2180BE880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  __p = &a17;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_UNION_PROJECT_NODE", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 137, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BEA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 138, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BEC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<turi::flex_type_enum>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2180BED74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_type(int **a1@<X0>, _QWORD *a2@<X8>)
{
  int *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];
  int v10;

  v2 = *a1;
  v10 = **a1;
  if (v10 != 14)
  {
    v9[2] = &v10;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v3 = *((_QWORD *)v2 + 7);
  v4 = *(std::__shared_weak_count **)(v3 + 24);
  v9[0] = *(_QWORD *)(v3 + 16);
  v9[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  turi::query_eval::infer_planner_node_type(a2, v9);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2180BEE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TERNARY_OPERATOR", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 158, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BEFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_type(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];
  uint64_t v10;

  v2 = *(_QWORD **)(*(_QWORD *)a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64) - (_QWORD)v2;
  v10 = v3 >> 4;
  if (v3 != 16)
  {
    v9[2] = &v10;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v4 = (std::__shared_weak_count *)v2[1];
  v9[0] = *v2;
  v9[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  turi::query_eval::infer_planner_node_type(a2, v9);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2180BF118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/optonly_identity_operator.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/optonly_identity_operator.hpp", "operator()", 57, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_type(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180BF2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::any<std::vector<turi::flex_type_enum>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D92D788;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v4 + 1, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = v4;
  return a1;
}

void sub_2180BF3AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::holder<std::vector<turi::flex_type_enum>>::~holder(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24D92D788;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void turi::any::holder<std::vector<turi::flex_type_enum>>::~holder(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24D92D788;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x219A19A08);
}

void *turi::any::holder<std::vector<turi::flex_type_enum>>::type()
{
}

_QWORD *turi::any::holder<std::vector<turi::flex_type_enum>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_24D92D788;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v2 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8));
  return v2;
}

void sub_2180BF4CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::vector<turi::flex_type_enum>>::deserializer_id()
{
  return turi::any::holder<std::vector<turi::flex_type_enum>>::registry;
}

_QWORD *turi::any::holder<std::vector<turi::flex_type_enum>>::deep_op_equal(_QWORD *result, uint64_t a2)
{
  if (result != (_QWORD *)a2)
    return std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(result + 1, *(char **)(a2 + 8), *(char **)(a2 + 16), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
  return result;
}

void *turi::any::holder<std::vector<turi::flex_type_enum>>::save(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  size_t v8;
  char **v9;
  size_t v10;
  BOOL v11;
  std::vector<char>::size_type v12;

  v4 = (_QWORD *)*a2;
  if (*(_QWORD *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = v4[5];
    if (v4[4] + 8 > v5)
    {
      v8 = 2 * v5 + 16;
      v4[5] = v8;
      v9 = (char **)v4[2];
      if (v9)
      {
        v6 = *v9;
        v10 = v9[1] - *v9;
        v11 = v8 >= v10;
        v12 = v8 - v10;
        if (v12 != 0 && v11)
        {
          std::vector<char>::__append((std::vector<char> *)v4[2], v12);
          v6 = *(char **)v4[2];
        }
        else if (!v11)
        {
          v9[1] = &v6[v8];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc((void *)v4[3], v8, 0xF6EA6B1uLL);
      }
      v4[3] = v6;
    }
    else
    {
      v6 = (char *)v4[3];
    }
    *(_QWORD *)&v6[v4[4]] = turi::any::holder<std::vector<turi::flex_type_enum>>::registry;
    v4[4] += 8;
  }
  return turi::archive_detail::vector_serialize_impl<turi::oarchive_soft_fail,turi::flex_type_enum,true>::exec(a2, (const void **)(a1 + 8));
}

_QWORD *turi::any::holder<std::vector<turi::flex_type_enum>>::print(uint64_t a1, _QWORD *a2)
{
  turi::operator<<<turi::flex_type_enum>(a2, (uint64_t *)(a1 + 8));
  return a2;
}

void *turi::archive_detail::vector_serialize_impl<turi::oarchive_soft_fail,turi::flex_type_enum,true>::exec(_QWORD *a1, const void **a2)
{
  int64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  const void *v8;
  size_t v9;
  _QWORD *v10;
  void *result;
  size_t v12;
  char *v13;
  size_t v14;
  char **v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;
  size_t v19;
  char **v20;
  size_t v21;
  BOOL v22;
  std::vector<char>::size_type v23;

  v4 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  v5 = (_QWORD *)*a1;
  if (*(_QWORD *)*a1)
  {
    std::ostream::write();
  }
  else
  {
    v6 = v5[5];
    if (v5[4] + 8 > v6)
    {
      v14 = 2 * v6 + 16;
      v5[5] = v14;
      v15 = (char **)v5[2];
      if (v15)
      {
        v7 = *v15;
        v16 = v15[1] - *v15;
        v17 = v14 >= v16;
        v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append((std::vector<char> *)v5[2], v18);
          v7 = *(char **)v5[2];
        }
        else if (!v17)
        {
          v15[1] = &v7[v14];
        }
      }
      else
      {
        v7 = (char *)malloc_type_realloc((void *)v5[3], v14, 0xF6EA6B1uLL);
      }
      v5[3] = v7;
    }
    else
    {
      v7 = (char *)v5[3];
    }
    *(_QWORD *)&v7[v5[4]] = v4;
    v5[4] += 8;
  }
  v8 = *a2;
  v9 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  v10 = (_QWORD *)*a1;
  if (*v10)
    return (void *)std::ostream::write();
  v12 = v10[5];
  if (v10[4] + v9 > v12)
  {
    v19 = 2 * (v12 + v9);
    v10[5] = v19;
    v20 = (char **)v10[2];
    if (v20)
    {
      v13 = *v20;
      v21 = v20[1] - *v20;
      v22 = v19 >= v21;
      v23 = v19 - v21;
      if (v23 != 0 && v22)
      {
        std::vector<char>::__append((std::vector<char> *)v10[2], v23);
        v13 = *(char **)v10[2];
      }
      else if (!v22)
      {
        v20[1] = &v13[v19];
      }
    }
    else
    {
      v13 = (char *)malloc_type_realloc((void *)v10[3], v19, 0xF6EA6B1uLL);
    }
    v10[3] = v13;
  }
  else
  {
    v13 = (char *)v10[3];
  }
  result = memcpy(&v13[v10[4]], v8, v9);
  v10[4] += v9;
  return result;
}

_QWORD *turi::operator<<<turi::flex_type_enum>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "[");
  std::string::basic_string[abi:ne180100]<0>(v8, ", ");
  std::string::basic_string[abi:ne180100]<0>(__p, "]");
  v4 = turi::print_range<std::vector<turi::flex_type_enum>>(a1, a2, (uint64_t)v10, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  return v4;
}

void sub_2180BF87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

_QWORD *turi::print_range<std::vector<turi::flex_type_enum>>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  std::locale v22;

  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *(_QWORD *)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v10, v11);
  v12 = *a2;
  while (v12 != a2[1])
  {
    ++v12;
    std::ostream::operator<<();
    if (v12 == a2[1])
      break;
    v13 = *(char *)(a4 + 23);
    if (v13 >= 0)
      v14 = a4;
    else
      v14 = *(_QWORD *)a4;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a4 + 23);
    else
      v15 = *(_QWORD *)(a4 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v14, v15);
  }
  v16 = *(char *)(a5 + 23);
  if (v16 >= 0)
    v17 = a5;
  else
    v17 = *(_QWORD *)a5;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a5 + 23);
  else
    v18 = *(_QWORD *)(a5 + 8);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v22, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_2180BF9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *turi::any::holder<std::vector<turi::flex_type_enum>>::registry_type::registry_type(uint64_t *a1)
{
  int v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *global_registry;
  uint64_t *v10[2];
  unsigned __int8 v11;

  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002186D980DLL & 0x7FFFFFFFFFFFFFFFLL));
  v2 = (char)v11;
  v3 = v10[0];
  v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (uint64_t **)v10[0];
  if ((v11 & 0x80u) == 0)
    v4 = v11;
  if (v4)
  {
    v6 = 0;
    do
    {
      v7 = *(char *)v5;
      v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0)
    operator delete(v3);
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::vector<turi::flex_type_enum>>::deserialize;
  return a1;
}

uint64_t turi::any::holder<std::vector<turi::flex_type_enum>>::deserialize(uint64_t *a1)
{
  uint64_t v2;

  v2 = operator new();
  turi::any::holder<std::vector<turi::flex_type_enum>>::holder(v2, a1);
  return v2;
}

void sub_2180BFB14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::vector<turi::flex_type_enum>>::holder(uint64_t a1, uint64_t *a2)
{
  *(_QWORD *)a1 = &unk_24D92D788;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  turi::archive_detail::vector_deserialize_impl<turi::iarchive_soft_fail,turi::flex_type_enum,true>::exec(a2, (void **)(a1 + 8));
  return a1;
}

void sub_2180BFB88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive_soft_fail,turi::flex_type_enum,true>::exec(uint64_t *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _BYTE *v8;
  _BYTE *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 24);
    v7 = *(_QWORD *)(v5 + v6);
    *(_QWORD *)(v4 + 24) = v6 + 8;
  }
  else
  {
    std::istream::read();
    v7 = 0;
  }
  v8 = *a2;
  a2[1] = *a2;
  if (v7)
  {
    std::vector<turi::table_internal::table_printer_element_base::style_type>::__append((uint64_t)a2, v7);
    v9 = *a2;
    v8 = a2[1];
  }
  else
  {
    v9 = v8;
  }
  v10 = v8 - v9;
  v11 = *a1;
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    return (void *)std::istream::read();
  result = memcpy(v9, (const void *)(v12 + *(_QWORD *)(v11 + 24)), v10);
  *(_QWORD *)(v11 + 24) += v10;
  return result;
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)0>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t **v9;
  std::__shared_weak_count *v10;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(uint64_t ***)a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180BFCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)1>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int *v9;
  std::__shared_weak_count *v10;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(int **)a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180BFD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)2>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int *v9;
  std::__shared_weak_count *v10;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(int **)a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180BFE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)3>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  unint64_t v4;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  return -1;
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)4>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int *v9;
  std::__shared_weak_count *v10;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(int **)a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180BFF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)5>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t **v9;
  std::__shared_weak_count *v10;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(uint64_t ***)a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180BFFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)6>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v9;
  std::__shared_weak_count *v10;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(_DWORD **)a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180C0064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)7>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v9;
  std::__shared_weak_count *v10;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(_DWORD **)a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180C0100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)8>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int *v9;
  std::__shared_weak_count *v10;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(int **)a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180C019C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)10>::get(uint64_t *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v1 = (std::__shared_weak_count *)a1[1];
  v9 = *a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180C0238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)11>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int *v9;
  std::__shared_weak_count *v10;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(int **)a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180C02D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)12>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int *v9;
  std::__shared_weak_count *v10;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(int **)a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180C0370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)14>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int *v9;
  std::__shared_weak_count *v10;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(int **)a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_length(&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180C040C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::visitor_infer_length<(turi::query_eval::planner_node_type)15>::get(uint64_t *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v1 = (std::__shared_weak_count *)a1[1];
  v9 = *a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_length((uint64_t)&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_2180C04A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_length(uint64_t ***a1)
{
  uint64_t **v1;
  uint64_t **v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  std::runtime_error *exception;
  std::string *v39;
  __int128 v40;
  std::runtime_error *v41;
  std::string *v42;
  __int128 v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  void *__p[2];
  void *v49[2];
  __int128 v50;
  __int128 v51;
  std::string v52;
  size_t __idx;

  v1 = *a1;
  LODWORD(v52.__r_.__value_.__l.__data_) = *(_DWORD *)*a1;
  if (LODWORD(v52.__r_.__value_.__l.__data_))
  {
LABEL_72:
    __p[0] = &v52;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v3 = v1 + 1;
  std::string::basic_string[abi:ne180100]<0>(v46, "end_index");
  __p[0] = v46;
  v4 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (const void **)v46, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  v5 = 0;
  switch(*((_BYTE *)v4 + 68))
  {
    case 0:
      v5 = *((_QWORD *)v4 + 7);
      goto LABEL_30;
    case 1:
      v5 = (uint64_t)*((double *)v4 + 7);
      goto LABEL_30;
    case 2:
      v9 = *((_QWORD *)v4 + 7);
      v44[0] = 0;
      v10 = (char *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(char **)(v9 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      v5 = std::stoll((const std::string *)__p, (size_t *)v44, 10);
      if (SHIBYTE(v49[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v9 + 31) < 0)
        v11 = *(void **)(v9 + 16);
      else
        v11 = (void *)*(unsigned __int8 *)(v9 + 31);
      if (v44[0] != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v39 = std::string::append(&v52, " cannot be interpreted as an integer");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v49[0] = (void *)v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_30;
    case 3:
      v6 = *((_QWORD *)v4 + 7);
      __p[1] = 0;
      v49[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_29;
    case 4:
      v12 = *((_QWORD *)v4 + 7);
      __p[1] = 0;
      v49[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
      goto LABEL_29;
    case 5:
      v13 = *((_QWORD *)v4 + 7);
      __p[1] = 0;
      v49[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
      goto LABEL_29;
    case 6:
      v5 = (uint64_t)(*((_QWORD *)v4 + 7) << 8) >> 8;
      goto LABEL_30;
    case 7:
      goto LABEL_30;
    case 8:
      v14 = *((_QWORD *)v4 + 7);
      v15 = *(unsigned int **)(v14 + 16);
      __p[0] = *(void **)(v14 + 8);
      __p[1] = v15;
      if (v15)
      {
        v16 = v15 + 2;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(_OWORD *)(v14 + 24);
      v19 = *(_OWORD *)(v14 + 56);
      v50 = *(_OWORD *)(v14 + 40);
      v51 = v19;
      *(_OWORD *)v49 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_29;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v4 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v50 + 1))
      {
        *(_QWORD *)&v51 = *((_QWORD *)&v50 + 1);
        operator delete(*((void **)&v50 + 1));
      }
      if (v49[0])
      {
        v49[1] = v49[0];
        operator delete(v49[0]);
      }
      v5 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_30;
      v7 = (unint64_t *)((char *)__p[1] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
      }
LABEL_29:
      v5 = 0;
LABEL_30:
      v20 = *a1;
      std::string::basic_string[abi:ne180100]<0>(v44, "begin_index");
      __p[0] = v44;
      v21 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20 + 1, (const void **)v44, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      v22 = 0;
      switch(*((_BYTE *)v21 + 68))
      {
        case 0:
          v22 = *((_QWORD *)v21 + 7);
          goto LABEL_58;
        case 1:
          v22 = (uint64_t)*((double *)v21 + 7);
          goto LABEL_58;
        case 2:
          v26 = *((_QWORD *)v21 + 7);
          __idx = 0;
          v27 = (char *)(v26 + 8);
          if (*(char *)(v26 + 31) < 0)
            v27 = *(char **)(v26 + 8);
          std::string::basic_string[abi:ne180100]<0>(__p, v27);
          v22 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SHIBYTE(v49[0]) < 0)
            operator delete(__p[0]);
          if (*(char *)(v26 + 31) < 0)
            v28 = *(_QWORD *)(v26 + 16);
          else
            v28 = *(unsigned __int8 *)(v26 + 31);
          if (__idx != v28)
          {
            v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v42 = std::string::append(&v52, " cannot be interpreted as an integer");
            v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
            v49[0] = (void *)v42->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v43;
            v42->__r_.__value_.__l.__size_ = 0;
            v42->__r_.__value_.__r.__words[2] = 0;
            v42->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v41, (const std::string *)__p);
            __cxa_throw(v41, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_58;
        case 3:
          v23 = *((_QWORD *)v21 + 7);
          __p[1] = 0;
          v49[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v23 + 8), *(_QWORD *)(v23 + 16), (uint64_t)(*(_QWORD *)(v23 + 16) - *(_QWORD *)(v23 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_57;
        case 4:
          v29 = *((_QWORD *)v21 + 7);
          __p[1] = 0;
          v49[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v29 + 8), *(uint64_t **)(v29 + 16), (uint64_t)(*(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v52.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
          goto LABEL_57;
        case 5:
          v30 = *((_QWORD *)v21 + 7);
          __p[1] = 0;
          v49[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v30 + 8), *(uint64_t **)(v30 + 16), (uint64_t)(*(_QWORD *)(v30 + 16) - *(_QWORD *)(v30 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v52.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
          goto LABEL_57;
        case 6:
          v22 = (uint64_t)(*((_QWORD *)v21 + 7) << 8) >> 8;
          goto LABEL_58;
        case 7:
          goto LABEL_58;
        case 8:
          v31 = *((_QWORD *)v21 + 7);
          v32 = *(unsigned int **)(v31 + 16);
          __p[0] = *(void **)(v31 + 8);
          __p[1] = v32;
          if (v32)
          {
            v33 = v32 + 2;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v35 = *(_OWORD *)(v31 + 24);
          v36 = *(_OWORD *)(v31 + 56);
          v50 = *(_OWORD *)(v31 + 40);
          v51 = v36;
          *(_OWORD *)v49 = v35;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          goto LABEL_57;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v21 + 7) + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v50 + 1))
          {
            *(_QWORD *)&v51 = *((_QWORD *)&v50 + 1);
            operator delete(*((void **)&v50 + 1));
          }
          if (v49[0])
          {
            v49[1] = v49[0];
            operator delete(v49[0]);
          }
          v22 = (uint64_t)__p[1];
          if (!__p[1])
            goto LABEL_58;
          v24 = (unint64_t *)((char *)__p[1] + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
          }
LABEL_57:
          v22 = 0;
LABEL_58:
          if (v45 < 0)
            operator delete(v44[0]);
          if (v47 < 0)
            operator delete(v46[0]);
          return v5 - v22;
        default:
          turi::flexible_type_fail(0);
          goto LABEL_71;
      }
    default:
      turi::flexible_type_fail(0);
LABEL_71:
      __break(1u);
      goto LABEL_72;
  }
}

void sub_2180C0B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  uint64_t v28;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 41) < 0)
  {
    operator delete(*(void **)(v28 - 64));
    if ((v27 & 1) == 0)
    {
LABEL_8:
      if (a14 < 0)
        operator delete(a9);
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::CONSTANT_NODE", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180C0E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_length(int **a1)
{
  int *v1;
  int **v2;
  int **v3;
  uint64_t v4;
  int *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int *v17;
  std::__shared_weak_count *v18;
  int *v19;
  std::__shared_weak_count *v20;
  int v21;

  v1 = *a1;
  v21 = **a1;
  if (v21 != 1)
  {
    v19 = &v21;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v2 = (int **)*((_QWORD *)v1 + 7);
  v3 = (int **)*((_QWORD *)v1 + 8);
  if (v2 == v3)
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    v19 = *v2;
    v20 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v17 = v5;
      v18 = v6;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      v17 = v5;
      v18 = 0;
    }
    v10 = turi::query_eval::infer_planner_node_length(&v17);
    if (v6)
    {
      v11 = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v13 = v20;
    if (v20)
    {
      v14 = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v10 == -1)
      break;
    v4 += v10;
    v2 += 2;
    if (v2 == v3)
      return v4;
  }
  return -1;
}

void sub_2180C103C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::APPEND_NODE", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 142, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180C11E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_length(int **a1)
{
  int *v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[3];
  int v11;

  v1 = *a1;
  v11 = **a1;
  if (v11 != 2)
  {
    v10[2] = &v11;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v2 = (_QWORD *)*((_QWORD *)v1 + 7);
  v3 = (std::__shared_weak_count *)v2[1];
  v10[0] = *v2;
  v10[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = turi::query_eval::infer_planner_node_length(v10);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_2180C1318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::BINARY_TRANSFORM_NODE", 45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 129, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180C14B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_length(int **a1)
{
  int *v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[3];
  int v11;

  v1 = *a1;
  v11 = **a1;
  if (v11 != 4)
  {
    v10[2] = &v11;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v2 = (_QWORD *)*((_QWORD *)v1 + 7);
  v3 = (std::__shared_weak_count *)v2[1];
  v10[0] = *v2;
  v10[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = turi::query_eval::infer_planner_node_length(v10);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_2180C15EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::PROJECT_NODE", 36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 126, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180C1788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_length(uint64_t ***a1)
{
  uint64_t **v1;
  _OWORD *v3;
  uint64_t **v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  double v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  double v48;
  double *v49;
  uint64_t v50;
  unint64_t v51;
  double *v52;
  double v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  double v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void **v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  void **v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  double v99;
  _QWORD *v100;
  unint64_t v101;
  BOOL v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t *v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  double *v110;
  uint64_t v111;
  unint64_t v112;
  double v113;
  unint64_t *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  double *v119;
  uint64_t v120;
  double v121;
  unint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  void *v130;
  double v131;
  uint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  double v144;
  uint64_t *v145;
  uint64_t *v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t *v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  double v174;
  uint64_t *v175;
  uint64_t *v176;
  double v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  double v200;
  _QWORD *v201;
  unint64_t v202;
  BOOL v203;
  double v204;
  uint64_t v205;
  double v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int v209;
  __int128 v210;
  __int128 v211;
  unint64_t v212;
  BOOL v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  double v230;
  unint64_t v231;
  double v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  double v236;
  uint64_t v237;
  unsigned int *v238;
  unsigned int v239;
  __int128 v240;
  __int128 v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  _QWORD *v247;
  unint64_t v248;
  uint64_t v249;
  double v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  __int128 v254;
  __int128 v255;
  unint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  _QWORD *v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  double v270;
  uint64_t v271;
  unsigned int *v272;
  unsigned int v273;
  __int128 v274;
  __int128 v275;
  unint64_t v276;
  uint64_t v277;
  double v278;
  uint64_t v279;
  unsigned int *v280;
  unsigned int v281;
  __int128 v282;
  __int128 v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  uint64_t v291;
  double v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  __int128 v296;
  __int128 v297;
  unint64_t v298;
  uint64_t v299;
  double v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  __int128 v304;
  __int128 v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  uint64_t v309;
  double v310;
  uint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  __int128 v314;
  __int128 v315;
  unint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  uint64_t v319;
  double v320;
  uint64_t v321;
  unsigned int *v322;
  unsigned int v323;
  __int128 v324;
  __int128 v325;
  unint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  double v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  double v340;
  char *v341;
  const std::string *v342;
  uint64_t v343;
  double v344;
  unsigned int *v345;
  unsigned int *v346;
  unsigned int v347;
  __int128 v348;
  __int128 v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  double v353;
  double v354;
  uint64_t v355;
  unint64_t *v356;
  unint64_t v357;
  unint64_t v358;
  double v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  double v363;
  void *v364;
  void *v365;
  unsigned int v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t v369;
  double v370;
  void *v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t v377;
  double v378;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v381;
  __int128 v382;
  void *v383[2];
  char v384;
  void *v385[2];
  char v386;
  uint64_t v387;
  unsigned int *v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  _QWORD v392[3];
  _QWORD v393[3];
  void **v394;
  _QWORD *v395;
  void *v396;
  void *v397;
  void *__p;
  void *v399;
  void *v400;
  void *v401;
  uint64_t v402;
  std::string v403;
  std::string v404;
  size_t __idx;
  double v406[3];

  v406[2] = *(double *)MEMORY[0x24BDAC8D0];
  v1 = *a1;
  LODWORD(v387) = *(_DWORD *)*a1;
  if ((_DWORD)v387 != 5)
  {
    v394 = (void **)&v387;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(v385, "end_index");
  v394 = v385;
  v3 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1 + 1, (const void **)v385, (uint64_t)&std::piecewise_construct, (_OWORD **)&v394);
  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v383, "begin_index");
  v394 = v383;
  v5 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 1, (const void **)v383, (uint64_t)&std::piecewise_construct, (_OWORD **)&v394);
  v6 = v5;
  memset(v406, 0, 13);
  if ((double *)((char *)v3 + 56) != v406)
  {
    *(double *)((char *)v406 + 5) = *(double *)((char *)v3 + 61);
    v406[0] = *((double *)v3 + 7);
    BYTE4(v406[1]) = *((_BYTE *)v3 + 68);
    if (BYTE4(v406[1]) <= 9u && ((1 << SBYTE4(v406[1])) & 0x33C) != 0)
    {
      v8 = *(unint64_t **)&v406[0];
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  switch(*((_BYTE *)v5 + 68))
  {
    case 0:
      switch(BYTE4(v406[1]))
      {
        case 0:
          v10 = *(_QWORD *)&v406[0] - *((_QWORD *)v5 + 7);
          goto LABEL_39;
        case 1:
          v200 = (double)*((uint64_t *)v5 + 7);
          goto LABEL_296;
        case 2:
          v11 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v226 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v226, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v226;
          *v226 = 1;
          do
          {
            v227 = __ldaxr(*(unint64_t **)&v11);
            v14 = --v227 == 0;
          }
          while (__stlxr(v227, *(unint64_t **)&v11));
          goto LABEL_272;
        case 3:
          v105 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v106 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v106, *(uint64_t *)&v406[0]);
            *(_QWORD *)&v406[0] = v106;
            *v106 = 1;
            do
            {
              v107 = __ldaxr(v105);
              v108 = v107 - 1;
            }
            while (__stlxr(v108, v105));
            if (!v108)
            {
              v109 = (void *)v105[1];
              if (v109)
              {
                v105[2] = (unint64_t)v109;
                operator delete(v109);
              }
              MEMORY[0x219A19A08](v105, 0x1080C409938AC02);
            }
          }
          v110 = *(double **)(*(_QWORD *)&v406[0] + 8);
          v111 = *(_QWORD *)(*(_QWORD *)&v406[0] + 16) - (_QWORD)v110;
          if (v111)
          {
            v112 = v111 >> 3;
            v113 = (double)*((uint64_t *)v6 + 7);
            if (v112 <= 1)
              v112 = 1;
            do
            {
              *v110 = *v110 - v113;
              ++v110;
              --v112;
            }
            while (v112);
          }
          goto LABEL_415;
        case 4:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr(*(unint64_t **)&v99);
            v203 = --v262 == 0;
          }
          while (__stlxr(v262, *(unint64_t **)&v99));
          goto LABEL_399;
        case 5:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v287 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v287, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v287;
          *v287 = 1;
          do
          {
            v288 = __ldaxr(*(unint64_t **)&v99);
            v102 = --v288 == 0;
          }
          while (__stlxr(v288, *(unint64_t **)&v99));
          goto LABEL_357;
        case 6:
          *(_QWORD *)&v406[0] = *(_QWORD *)&v406[0] & 0xFF00000000000000 | (*(_QWORD *)&v406[0] - *((_QWORD *)v5 + 7)) & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_415;
        case 7:
          goto LABEL_414;
        case 8:
          v204 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v291 = operator new();
          v292 = v406[0];
          *(_QWORD *)v291 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v291 + 8) = *(_QWORD *)(*(_QWORD *)&v292 + 8);
          v293 = *(_QWORD *)(*(_QWORD *)&v292 + 16);
          *(_QWORD *)(v291 + 16) = v293;
          if (v293)
          {
            v294 = (unsigned int *)(v293 + 8);
            do
              v295 = __ldxr(v294);
            while (__stxr(v295 + 1, v294));
          }
          v296 = *(_OWORD *)(*(_QWORD *)&v292 + 24);
          v297 = *(_OWORD *)(*(_QWORD *)&v292 + 40);
          *(_OWORD *)(v291 + 56) = *(_OWORD *)(*(_QWORD *)&v292 + 56);
          *(_OWORD *)(v291 + 40) = v297;
          *(_OWORD *)(v291 + 24) = v296;
          *(_QWORD *)&v406[0] = v291;
          *(_QWORD *)v291 = 1;
          do
          {
            v298 = __ldaxr(*(unint64_t **)&v204);
            v213 = --v298 == 0;
          }
          while (__stlxr(v298, *(unint64_t **)&v204));
          goto LABEL_409;
        case 9:
          v138 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v139 = (_QWORD *)operator new();
            v140 = *(_QWORD *)&v406[0] + 8;
            *v139 = **(_QWORD **)&v406[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v139 + 1, v140);
            *(_QWORD *)&v406[0] = v139;
            *v139 = 1;
            do
            {
              v141 = __ldaxr(v138);
              v142 = v141 - 1;
            }
            while (__stlxr(v142, v138));
            if (!v142)
            {
              v143 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v138);
              MEMORY[0x219A19A08](v143, 0x1030C407B73B9F7);
            }
          }
          v144 = v406[0];
          v146 = *(uint64_t **)(*(_QWORD *)&v406[0] + 24);
          v145 = *(uint64_t **)(*(_QWORD *)&v406[0] + 32);
          if (v145 == v146)
            goto LABEL_415;
          if (!*(_QWORD *)(*(_QWORD *)&v406[0] + 8))
            goto LABEL_415;
          v147 = (double)*((uint64_t *)v6 + 7);
          v148 = 1;
          do
          {
            v149 = *v146++;
            v148 *= v149;
          }
          while (v146 != v145);
          if (!v148)
            goto LABEL_415;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v406[0] + 8));
          v150 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v144 + 32) - *(_QWORD *)(*(_QWORD *)&v144 + 24)) >> 3;
          v404.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v394, v150, &v404);
          v70 = v394;
          v151 = (char *)v395;
          break;
        default:
          goto LABEL_496;
      }
      while (2)
      {
        v152 = 0;
        v153 = v151 - (char *)v70;
        if (v153)
        {
          v154 = v153 >> 3;
          v155 = *(uint64_t **)(*(_QWORD *)&v144 + 48);
          if (v154 <= 1)
            v154 = 1;
          do
          {
            v157 = (uint64_t)*v70++;
            v156 = v157;
            v158 = *v155++;
            v152 += v158 * v156;
            --v154;
          }
          while (v154);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v144 + 8));
        *(double *)(**(_QWORD **)(*(_QWORD *)&v144 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v144 + 72) + v152)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v144 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v144 + 72) + v152)) - v147;
        v70 = v394;
        v151 = (char *)v395;
        v159 = (void **)v395 - v394;
        v160 = v159 - 1;
        if ((char *)v395 - (char *)v394 < 1)
          goto LABEL_200;
        v161 = *(_QWORD *)(*(_QWORD *)&v144 + 24);
        v162 = (unint64_t)v394[v160] + 1;
        v394[v160] = (void *)v162;
        if (v162 < *(_QWORD *)(v161 + 8 * v160))
        {
LABEL_199:
          v159 = 1;
LABEL_200:
          if (v160 < 0 || !v159)
            goto LABEL_227;
          continue;
        }
        break;
      }
      v163 = (unint64_t *)&v70[v159 - 2];
      v164 = v161 - 16;
      while (1)
      {
        v165 = v159 - 1;
        v163[1] = 0;
        if (v159 - 1 <= 0)
          goto LABEL_228;
        v166 = *v163 + 1;
        *v163-- = v166;
        v167 = *(_QWORD *)(v164 + 8 * v159--);
        if (v166 < v167)
        {
          v160 = v165 - 1;
          goto LABEL_199;
        }
      }
    case 1:
      switch(BYTE4(v406[1]))
      {
        case 0:
          v10 = (uint64_t)((double)*(uint64_t *)&v406[0] - *((double *)v5 + 7));
LABEL_39:
          *(_QWORD *)&v406[0] = v10;
          goto LABEL_415;
        case 1:
          v200 = *((double *)v5 + 7);
LABEL_296:
          v406[0] = v406[0] - v200;
          goto LABEL_415;
        case 2:
          v11 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v228 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v228, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v228;
          *v228 = 1;
          do
          {
            v229 = __ldaxr(*(unint64_t **)&v11);
            v14 = --v229 == 0;
          }
          while (__stlxr(v229, *(unint64_t **)&v11));
          goto LABEL_272;
        case 3:
          v114 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v115 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v115, *(uint64_t *)&v406[0]);
            *(_QWORD *)&v406[0] = v115;
            *v115 = 1;
            do
            {
              v116 = __ldaxr(v114);
              v117 = v116 - 1;
            }
            while (__stlxr(v117, v114));
            if (!v117)
            {
              v118 = (void *)v114[1];
              if (v118)
              {
                v114[2] = (unint64_t)v118;
                operator delete(v118);
              }
              MEMORY[0x219A19A08](v114, 0x1080C409938AC02);
            }
          }
          v119 = *(double **)(*(_QWORD *)&v406[0] + 8);
          v120 = *(_QWORD *)(*(_QWORD *)&v406[0] + 16) - (_QWORD)v119;
          if (v120)
          {
            v121 = *((double *)v6 + 7);
            v122 = v120 >> 3;
            if (v122 <= 1)
              v122 = 1;
            do
            {
              *v119 = *v119 - v121;
              ++v119;
              --v122;
            }
            while (v122);
          }
          goto LABEL_415;
        case 4:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v263, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr(*(unint64_t **)&v99);
            v203 = --v264 == 0;
          }
          while (__stlxr(v264, *(unint64_t **)&v99));
          goto LABEL_399;
        case 5:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v289 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v289, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v289;
          *v289 = 1;
          do
          {
            v290 = __ldaxr(*(unint64_t **)&v99);
            v102 = --v290 == 0;
          }
          while (__stlxr(v290, *(unint64_t **)&v99));
          goto LABEL_357;
        case 6:
          v230 = *((double *)v5 + 7);
          v231 = vcvtmd_s64_f64(v230);
          v232 = v406[0];
          v233 = *(_QWORD *)&v406[0] - v231;
          *(_QWORD *)&v406[0] = *(_QWORD *)&v406[0] & 0xFF00000000000000 | (*(_QWORD *)&v406[0] - v231) & 0xFFFFFFFFFFFFFFLL;
          v234 = SLODWORD(v406[1]) - (uint64_t)((v230 - (double)(uint64_t)floor(v230)) * 1000000.0);
          if (v234 < 0)
          {
            *(_QWORD *)&v406[0] = (v233 - 1) & 0xFFFFFFFFFFFFFFLL | *(_QWORD *)&v232 & 0xFF00000000000000;
            LODWORD(v234) = v234 + 1000000;
          }
          if (v234 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          LODWORD(v406[1]) = v234;
          goto LABEL_415;
        case 7:
          goto LABEL_414;
        case 8:
          v204 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v299 = operator new();
          v300 = v406[0];
          *(_QWORD *)v299 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v299 + 8) = *(_QWORD *)(*(_QWORD *)&v300 + 8);
          v301 = *(_QWORD *)(*(_QWORD *)&v300 + 16);
          *(_QWORD *)(v299 + 16) = v301;
          if (v301)
          {
            v302 = (unsigned int *)(v301 + 8);
            do
              v303 = __ldxr(v302);
            while (__stxr(v303 + 1, v302));
          }
          v304 = *(_OWORD *)(*(_QWORD *)&v300 + 24);
          v305 = *(_OWORD *)(*(_QWORD *)&v300 + 40);
          *(_OWORD *)(v299 + 56) = *(_OWORD *)(*(_QWORD *)&v300 + 56);
          *(_OWORD *)(v299 + 40) = v305;
          *(_OWORD *)(v299 + 24) = v304;
          *(_QWORD *)&v406[0] = v299;
          *(_QWORD *)v299 = 1;
          do
          {
            v306 = __ldaxr(*(unint64_t **)&v204);
            v213 = --v306 == 0;
          }
          while (__stlxr(v306, *(unint64_t **)&v204));
          goto LABEL_409;
        case 9:
          v168 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v169 = (_QWORD *)operator new();
            v170 = *(_QWORD *)&v406[0] + 8;
            *v169 = **(_QWORD **)&v406[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v169 + 1, v170);
            *(_QWORD *)&v406[0] = v169;
            *v169 = 1;
            do
            {
              v171 = __ldaxr(v168);
              v172 = v171 - 1;
            }
            while (__stlxr(v172, v168));
            if (!v172)
            {
              v173 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v168);
              MEMORY[0x219A19A08](v173, 0x1030C407B73B9F7);
            }
          }
          v174 = v406[0];
          v176 = *(uint64_t **)(*(_QWORD *)&v406[0] + 24);
          v175 = *(uint64_t **)(*(_QWORD *)&v406[0] + 32);
          if (v175 == v176)
            goto LABEL_415;
          if (!*(_QWORD *)(*(_QWORD *)&v406[0] + 8))
            goto LABEL_415;
          v177 = *((double *)v6 + 7);
          v178 = 1;
          do
          {
            v179 = *v176++;
            v178 *= v179;
          }
          while (v176 != v175);
          if (!v178)
            goto LABEL_415;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v406[0] + 8));
          v180 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v174 + 32) - *(_QWORD *)(*(_QWORD *)&v174 + 24)) >> 3;
          v404.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v394, v180, &v404);
          v70 = v394;
          v181 = (char *)v395;
          break;
        default:
          goto LABEL_496;
      }
      while (2)
      {
        v182 = 0;
        v183 = v181 - (char *)v70;
        if (v183)
        {
          v184 = v183 >> 3;
          v185 = *(uint64_t **)(*(_QWORD *)&v174 + 48);
          if (v184 <= 1)
            v184 = 1;
          do
          {
            v187 = (uint64_t)*v70++;
            v186 = v187;
            v188 = *v185++;
            v182 += v188 * v186;
            --v184;
          }
          while (v184);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v174 + 8));
        *(double *)(**(_QWORD **)(*(_QWORD *)&v174 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v174 + 72) + v182)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v174 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v174 + 72) + v182)) - v177;
        v70 = v394;
        v181 = (char *)v395;
        v189 = (void **)v395 - v394;
        v190 = v189 - 1;
        if ((char *)v395 - (char *)v394 < 1)
          goto LABEL_225;
        v191 = *(_QWORD *)(*(_QWORD *)&v174 + 24);
        v192 = (unint64_t)v394[v190] + 1;
        v394[v190] = (void *)v192;
        if (v192 < *(_QWORD *)(v191 + 8 * v190))
        {
LABEL_224:
          v189 = 1;
LABEL_225:
          if (v190 < 0 || !v189)
            goto LABEL_227;
          continue;
        }
        break;
      }
      v193 = (unint64_t *)&v70[v189 - 2];
      v194 = v191 - 16;
      while (1)
      {
        v195 = v189 - 1;
        v193[1] = 0;
        if (v189 - 1 <= 0)
          goto LABEL_228;
        v196 = *v193 + 1;
        *v193-- = v196;
        v197 = *(_QWORD *)(v194 + 8 * v189--);
        if (v196 < v197)
        {
          v190 = v195 - 1;
          goto LABEL_224;
        }
      }
    case 2:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v11 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v17 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v17, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v17;
          *v17 = 1;
          do
          {
            v18 = __ldaxr(*(unint64_t **)&v11);
            v14 = --v18 == 0;
          }
          while (__stlxr(v18, *(unint64_t **)&v11));
          goto LABEL_272;
        case 3:
          v29 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v35 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v35, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v35;
          *v35 = 1;
          do
          {
            v36 = __ldaxr(*(unint64_t **)&v29);
            v32 = --v36 == 0;
          }
          while (__stlxr(v36, *(unint64_t **)&v29));
          goto LABEL_165;
        case 4:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v247 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v247, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v247;
          *v247 = 1;
          do
          {
            v248 = __ldaxr(*(unint64_t **)&v99);
            v203 = --v248 == 0;
          }
          while (__stlxr(v248, *(unint64_t **)&v99));
          goto LABEL_399;
        case 5:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v198 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v198, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v198;
          *v198 = 1;
          do
          {
            v199 = __ldaxr(*(unint64_t **)&v99);
            v102 = --v199 == 0;
          }
          while (__stlxr(v199, *(unint64_t **)&v99));
          goto LABEL_357;
        case 8:
          v204 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v249 = operator new();
          v250 = v406[0];
          *(_QWORD *)v249 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v249 + 8) = *(_QWORD *)(*(_QWORD *)&v250 + 8);
          v251 = *(_QWORD *)(*(_QWORD *)&v250 + 16);
          *(_QWORD *)(v249 + 16) = v251;
          if (v251)
          {
            v252 = (unsigned int *)(v251 + 8);
            do
              v253 = __ldxr(v252);
            while (__stxr(v253 + 1, v252));
          }
          v254 = *(_OWORD *)(*(_QWORD *)&v250 + 24);
          v255 = *(_OWORD *)(*(_QWORD *)&v250 + 40);
          *(_OWORD *)(v249 + 56) = *(_OWORD *)(*(_QWORD *)&v250 + 56);
          *(_OWORD *)(v249 + 40) = v255;
          *(_OWORD *)(v249 + 24) = v254;
          *(_QWORD *)&v406[0] = v249;
          *(_QWORD *)v249 = 1;
          do
          {
            v256 = __ldaxr(*(unint64_t **)&v204);
            v213 = --v256 == 0;
          }
          while (__stlxr(v256, *(unint64_t **)&v204));
          goto LABEL_409;
        case 9:
          v37 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v96 = (_QWORD *)operator new();
          v97 = *(_QWORD *)&v406[0] + 8;
          *v96 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v96 + 1, v97);
          *(_QWORD *)&v406[0] = v96;
          *v96 = 1;
          do
          {
            v98 = __ldaxr(v37);
            v41 = --v98 == 0;
          }
          while (__stlxr(v98, v37));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 3:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v11 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v19 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v19, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v19;
          *v19 = 1;
          do
          {
            v20 = __ldaxr(*(unint64_t **)&v11);
            v14 = --v20 == 0;
          }
          while (__stlxr(v20, *(unint64_t **)&v11));
          goto LABEL_272;
        case 3:
          v42 = *((_QWORD *)v5 + 7);
          v43 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v44 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v44, *(uint64_t *)&v406[0]);
            *(_QWORD *)&v406[0] = v44;
            *v44 = 1;
            do
            {
              v45 = __ldaxr(v43);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v43));
            if (!v46)
            {
              v47 = (void *)v43[1];
              if (v47)
              {
                v43[2] = (unint64_t)v47;
                operator delete(v47);
              }
              MEMORY[0x219A19A08](v43, 0x1080C409938AC02);
            }
          }
          v48 = v406[0];
          turi::flexible_type_fail(*(_QWORD *)(*(_QWORD *)&v48 + 16) - *(_QWORD *)(*(_QWORD *)&v48 + 8) == *(_QWORD *)(v42 + 16) - *(_QWORD *)(v42 + 8));
          v49 = *(double **)(*(_QWORD *)&v48 + 8);
          v50 = *(_QWORD *)(*(_QWORD *)&v48 + 16) - (_QWORD)v49;
          if (v50)
          {
            v51 = v50 >> 3;
            v52 = *(double **)(v42 + 8);
            if (v51 <= 1)
              v51 = 1;
            do
            {
              v53 = *v52++;
              *v49 = *v49 - v53;
              ++v49;
              --v51;
            }
            while (v51);
          }
          goto LABEL_415;
        case 4:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v259 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v259, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v259;
          *v259 = 1;
          do
          {
            v260 = __ldaxr(*(unint64_t **)&v99);
            v203 = --v260 == 0;
          }
          while (__stlxr(v260, *(unint64_t **)&v99));
          goto LABEL_399;
        case 5:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v217 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v217, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v217;
          *v217 = 1;
          do
          {
            v218 = __ldaxr(*(unint64_t **)&v99);
            v102 = --v218 == 0;
          }
          while (__stlxr(v218, *(unint64_t **)&v99));
          goto LABEL_357;
        case 8:
          v204 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v269 = operator new();
          v270 = v406[0];
          *(_QWORD *)v269 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v269 + 8) = *(_QWORD *)(*(_QWORD *)&v270 + 8);
          v271 = *(_QWORD *)(*(_QWORD *)&v270 + 16);
          *(_QWORD *)(v269 + 16) = v271;
          if (v271)
          {
            v272 = (unsigned int *)(v271 + 8);
            do
              v273 = __ldxr(v272);
            while (__stxr(v273 + 1, v272));
          }
          v274 = *(_OWORD *)(*(_QWORD *)&v270 + 24);
          v275 = *(_OWORD *)(*(_QWORD *)&v270 + 40);
          *(_OWORD *)(v269 + 56) = *(_OWORD *)(*(_QWORD *)&v270 + 56);
          *(_OWORD *)(v269 + 40) = v275;
          *(_OWORD *)(v269 + 24) = v274;
          *(_QWORD *)&v406[0] = v269;
          *(_QWORD *)v269 = 1;
          do
          {
            v276 = __ldaxr(*(unint64_t **)&v204);
            v213 = --v276 == 0;
          }
          while (__stlxr(v276, *(unint64_t **)&v204));
          goto LABEL_409;
        case 9:
          v37 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v125 = (_QWORD *)operator new();
          v126 = *(_QWORD *)&v406[0] + 8;
          *v125 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v125 + 1, v126);
          *(_QWORD *)&v406[0] = v125;
          *v125 = 1;
          do
          {
            v127 = __ldaxr(v37);
            v41 = --v127 == 0;
          }
          while (__stlxr(v127, v37));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 4:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v11 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v12 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v12, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v12;
          *v12 = 1;
          do
          {
            v13 = __ldaxr(*(unint64_t **)&v11);
            v14 = --v13 == 0;
          }
          while (__stlxr(v13, *(unint64_t **)&v11));
          goto LABEL_272;
        case 3:
          v29 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v30 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v30, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v30;
          *v30 = 1;
          do
          {
            v31 = __ldaxr(*(unint64_t **)&v29);
            v32 = --v31 == 0;
          }
          while (__stlxr(v31, *(unint64_t **)&v29));
          goto LABEL_165;
        case 4:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v201 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v201, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v201;
          *v201 = 1;
          do
          {
            v202 = __ldaxr(*(unint64_t **)&v99);
            v203 = --v202 == 0;
          }
          while (__stlxr(v202, *(unint64_t **)&v99));
          goto LABEL_399;
        case 5:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v100 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v100, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v100;
          *v100 = 1;
          do
          {
            v101 = __ldaxr(*(unint64_t **)&v99);
            v102 = --v101 == 0;
          }
          while (__stlxr(v101, *(unint64_t **)&v99));
          goto LABEL_357;
        case 8:
          v204 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v205 = operator new();
          v206 = v406[0];
          *(_QWORD *)v205 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v205 + 8) = *(_QWORD *)(*(_QWORD *)&v206 + 8);
          v207 = *(_QWORD *)(*(_QWORD *)&v206 + 16);
          *(_QWORD *)(v205 + 16) = v207;
          if (v207)
          {
            v208 = (unsigned int *)(v207 + 8);
            do
              v209 = __ldxr(v208);
            while (__stxr(v209 + 1, v208));
          }
          v210 = *(_OWORD *)(*(_QWORD *)&v206 + 24);
          v211 = *(_OWORD *)(*(_QWORD *)&v206 + 40);
          *(_OWORD *)(v205 + 56) = *(_OWORD *)(*(_QWORD *)&v206 + 56);
          *(_OWORD *)(v205 + 40) = v211;
          *(_OWORD *)(v205 + 24) = v210;
          *(_QWORD *)&v406[0] = v205;
          *(_QWORD *)v205 = 1;
          do
          {
            v212 = __ldaxr(*(unint64_t **)&v204);
            v213 = --v212 == 0;
          }
          while (__stlxr(v212, *(unint64_t **)&v204));
          goto LABEL_409;
        case 9:
          v37 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v38 = (_QWORD *)operator new();
          v39 = *(_QWORD *)&v406[0] + 8;
          *v38 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v38 + 1, v39);
          *(_QWORD *)&v406[0] = v38;
          *v38 = 1;
          do
          {
            v40 = __ldaxr(v37);
            v41 = --v40 == 0;
          }
          while (__stlxr(v40, v37));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 5:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v11 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v23 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v23, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v23;
          *v23 = 1;
          do
          {
            v24 = __ldaxr(*(unint64_t **)&v11);
            v14 = --v24 == 0;
          }
          while (__stlxr(v24, *(unint64_t **)&v11));
          goto LABEL_272;
        case 3:
          v29 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v103 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v103, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v103;
          *v103 = 1;
          do
          {
            v104 = __ldaxr(*(unint64_t **)&v29);
            v32 = --v104 == 0;
          }
          while (__stlxr(v104, *(unint64_t **)&v29));
          goto LABEL_165;
        case 4:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v307 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v307, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v307;
          *v307 = 1;
          do
          {
            v308 = __ldaxr(*(unint64_t **)&v99);
            v203 = --v308 == 0;
          }
          while (__stlxr(v308, *(unint64_t **)&v99));
          goto LABEL_399;
        case 5:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v257 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v257, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v257;
          *v257 = 1;
          do
          {
            v258 = __ldaxr(*(unint64_t **)&v99);
            v102 = --v258 == 0;
          }
          while (__stlxr(v258, *(unint64_t **)&v99));
          goto LABEL_357;
        case 8:
          v204 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v309 = operator new();
          v310 = v406[0];
          *(_QWORD *)v309 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v309 + 8) = *(_QWORD *)(*(_QWORD *)&v310 + 8);
          v311 = *(_QWORD *)(*(_QWORD *)&v310 + 16);
          *(_QWORD *)(v309 + 16) = v311;
          if (v311)
          {
            v312 = (unsigned int *)(v311 + 8);
            do
              v313 = __ldxr(v312);
            while (__stxr(v313 + 1, v312));
          }
          v314 = *(_OWORD *)(*(_QWORD *)&v310 + 24);
          v315 = *(_OWORD *)(*(_QWORD *)&v310 + 40);
          *(_OWORD *)(v309 + 56) = *(_OWORD *)(*(_QWORD *)&v310 + 56);
          *(_OWORD *)(v309 + 40) = v315;
          *(_OWORD *)(v309 + 24) = v314;
          *(_QWORD *)&v406[0] = v309;
          *(_QWORD *)v309 = 1;
          do
          {
            v316 = __ldaxr(*(unint64_t **)&v204);
            v213 = --v316 == 0;
          }
          while (__stlxr(v316, *(unint64_t **)&v204));
          goto LABEL_409;
        case 9:
          v37 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v214 = (_QWORD *)operator new();
          v215 = *(_QWORD *)&v406[0] + 8;
          *v214 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v214 + 1, v215);
          *(_QWORD *)&v406[0] = v214;
          *v214 = 1;
          do
          {
            v216 = __ldaxr(v37);
            v41 = --v216 == 0;
          }
          while (__stlxr(v216, v37));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 6:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v11 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v25 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v25, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v25;
          *v25 = 1;
          do
          {
            v26 = __ldaxr(*(unint64_t **)&v11);
            v14 = --v26 == 0;
          }
          while (__stlxr(v26, *(unint64_t **)&v11));
          goto LABEL_272;
        case 3:
          v29 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v123 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v123, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v123;
          *v123 = 1;
          do
          {
            v124 = __ldaxr(*(unint64_t **)&v29);
            v32 = --v124 == 0;
          }
          while (__stlxr(v124, *(unint64_t **)&v29));
          goto LABEL_165;
        case 4:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v317 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v317, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v317;
          *v317 = 1;
          do
          {
            v318 = __ldaxr(*(unint64_t **)&v99);
            v203 = --v318 == 0;
          }
          while (__stlxr(v318, *(unint64_t **)&v99));
          goto LABEL_399;
        case 5:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v267 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v267, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v267;
          *v267 = 1;
          do
          {
            v268 = __ldaxr(*(unint64_t **)&v99);
            v102 = --v268 == 0;
          }
          while (__stlxr(v268, *(unint64_t **)&v99));
          goto LABEL_357;
        case 8:
          v204 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v319 = operator new();
          v320 = v406[0];
          *(_QWORD *)v319 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v319 + 8) = *(_QWORD *)(*(_QWORD *)&v320 + 8);
          v321 = *(_QWORD *)(*(_QWORD *)&v320 + 16);
          *(_QWORD *)(v319 + 16) = v321;
          if (v321)
          {
            v322 = (unsigned int *)(v321 + 8);
            do
              v323 = __ldxr(v322);
            while (__stxr(v323 + 1, v322));
          }
          v324 = *(_OWORD *)(*(_QWORD *)&v320 + 24);
          v325 = *(_OWORD *)(*(_QWORD *)&v320 + 40);
          *(_OWORD *)(v319 + 56) = *(_OWORD *)(*(_QWORD *)&v320 + 56);
          *(_OWORD *)(v319 + 40) = v325;
          *(_OWORD *)(v319 + 24) = v324;
          *(_QWORD *)&v406[0] = v319;
          *(_QWORD *)v319 = 1;
          do
          {
            v326 = __ldaxr(*(unint64_t **)&v204);
            v213 = --v326 == 0;
          }
          while (__stlxr(v326, *(unint64_t **)&v204));
          goto LABEL_409;
        case 9:
          v37 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v223 = (_QWORD *)operator new();
          v224 = *(_QWORD *)&v406[0] + 8;
          *v223 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v223 + 1, v224);
          *(_QWORD *)&v406[0] = v223;
          *v223 = 1;
          do
          {
            v225 = __ldaxr(v37);
            v41 = --v225 == 0;
          }
          while (__stlxr(v225, v37));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 7:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v11 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v21 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v21, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v21;
          *v21 = 1;
          do
          {
            v22 = __ldaxr(*(unint64_t **)&v11);
            v14 = --v22 == 0;
          }
          while (__stlxr(v22, *(unint64_t **)&v11));
          goto LABEL_272;
        case 3:
          v29 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v54 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v54, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v54;
          *v54 = 1;
          do
          {
            v55 = __ldaxr(*(unint64_t **)&v29);
            v32 = --v55 == 0;
          }
          while (__stlxr(v55, *(unint64_t **)&v29));
          goto LABEL_165;
        case 4:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v265 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v265, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v265;
          *v265 = 1;
          do
          {
            v266 = __ldaxr(*(unint64_t **)&v99);
            v203 = --v266 == 0;
          }
          while (__stlxr(v266, *(unint64_t **)&v99));
          goto LABEL_399;
        case 5:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v219 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v219, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v219;
          *v219 = 1;
          do
          {
            v220 = __ldaxr(*(unint64_t **)&v99);
            v102 = --v220 == 0;
          }
          while (__stlxr(v220, *(unint64_t **)&v99));
          goto LABEL_357;
        case 8:
          v204 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v277 = operator new();
          v278 = v406[0];
          *(_QWORD *)v277 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v277 + 8) = *(_QWORD *)(*(_QWORD *)&v278 + 8);
          v279 = *(_QWORD *)(*(_QWORD *)&v278 + 16);
          *(_QWORD *)(v277 + 16) = v279;
          if (v279)
          {
            v280 = (unsigned int *)(v279 + 8);
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          v282 = *(_OWORD *)(*(_QWORD *)&v278 + 24);
          v283 = *(_OWORD *)(*(_QWORD *)&v278 + 40);
          *(_OWORD *)(v277 + 56) = *(_OWORD *)(*(_QWORD *)&v278 + 56);
          *(_OWORD *)(v277 + 40) = v283;
          *(_OWORD *)(v277 + 24) = v282;
          *(_QWORD *)&v406[0] = v277;
          *(_QWORD *)v277 = 1;
          do
          {
            v284 = __ldaxr(*(unint64_t **)&v204);
            v213 = --v284 == 0;
          }
          while (__stlxr(v284, *(unint64_t **)&v204));
          goto LABEL_409;
        case 9:
          v37 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v135 = (_QWORD *)operator new();
          v136 = *(_QWORD *)&v406[0] + 8;
          *v135 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v135 + 1, v136);
          *(_QWORD *)&v406[0] = v135;
          *v135 = 1;
          do
          {
            v137 = __ldaxr(v37);
            v41 = --v137 == 0;
          }
          while (__stlxr(v137, v37));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 8:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v11 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v27 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v27, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v27;
          *v27 = 1;
          do
          {
            v28 = __ldaxr(*(unint64_t **)&v11);
            v14 = --v28 == 0;
          }
          while (__stlxr(v28, *(unint64_t **)&v11));
          goto LABEL_272;
        case 3:
          v29 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v128 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v128, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v128;
          *v128 = 1;
          do
          {
            v129 = __ldaxr(*(unint64_t **)&v29);
            v32 = --v129 == 0;
          }
          while (__stlxr(v129, *(unint64_t **)&v29));
          goto LABEL_165;
        case 4:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v327 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v327, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v327;
          *v327 = 1;
          do
          {
            v328 = __ldaxr(*(unint64_t **)&v99);
            v203 = --v328 == 0;
          }
          while (__stlxr(v328, *(unint64_t **)&v99));
          goto LABEL_399;
        case 5:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v285, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr(*(unint64_t **)&v99);
            v102 = --v286 == 0;
          }
          while (__stlxr(v286, *(unint64_t **)&v99));
          goto LABEL_357;
        case 8:
          v204 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v329 = operator new();
          v330 = v406[0];
          *(_QWORD *)v329 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v329 + 8) = *(_QWORD *)(*(_QWORD *)&v330 + 8);
          v331 = *(_QWORD *)(*(_QWORD *)&v330 + 16);
          *(_QWORD *)(v329 + 16) = v331;
          if (v331)
          {
            v332 = (unsigned int *)(v331 + 8);
            do
              v333 = __ldxr(v332);
            while (__stxr(v333 + 1, v332));
          }
          v334 = *(_OWORD *)(*(_QWORD *)&v330 + 24);
          v335 = *(_OWORD *)(*(_QWORD *)&v330 + 40);
          *(_OWORD *)(v329 + 56) = *(_OWORD *)(*(_QWORD *)&v330 + 56);
          *(_OWORD *)(v329 + 40) = v335;
          *(_OWORD *)(v329 + 24) = v334;
          *(_QWORD *)&v406[0] = v329;
          *(_QWORD *)v329 = 1;
          do
          {
            v336 = __ldaxr(*(unint64_t **)&v204);
            v213 = --v336 == 0;
          }
          while (__stlxr(v336, *(unint64_t **)&v204));
          goto LABEL_409;
        case 9:
          v37 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v243 = (_QWORD *)operator new();
          v244 = *(_QWORD *)&v406[0] + 8;
          *v243 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v243 + 1, v244);
          *(_QWORD *)&v406[0] = v243;
          *v243 = 1;
          do
          {
            v245 = __ldaxr(v37);
            v41 = --v245 == 0;
          }
          while (__stlxr(v245, v37));
LABEL_292:
          if (!v41)
            goto LABEL_414;
          v131 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v37));
          v246 = 2071181815;
          goto LABEL_412;
        default:
          goto LABEL_496;
      }
    case 9:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v11 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v15 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v15, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v15;
          *v15 = 1;
          do
          {
            v16 = __ldaxr(*(unint64_t **)&v11);
            v14 = --v16 == 0;
          }
          while (__stlxr(v16, *(unint64_t **)&v11));
LABEL_272:
          if (!v14)
            goto LABEL_414;
          if (*(char *)(*(_QWORD *)&v11 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v11 + 8));
          v131 = v11;
          v132 = 0x1012C404EF22A49;
          goto LABEL_413;
        case 3:
          v29 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v33 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v33, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v33;
          *v33 = 1;
          do
          {
            v34 = __ldaxr(*(unint64_t **)&v29);
            v32 = --v34 == 0;
          }
          while (__stlxr(v34, *(unint64_t **)&v29));
LABEL_165:
          if (!v32)
            goto LABEL_414;
          v130 = *(void **)(*(_QWORD *)&v29 + 8);
          if (v130)
          {
            *(_QWORD *)(*(_QWORD *)&v29 + 16) = v130;
            operator delete(v130);
          }
          v131 = v29;
          v132 = 0x1080C409938AC02;
          goto LABEL_413;
        case 4:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v221 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v221, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v221;
          *v221 = 1;
          do
          {
            v222 = __ldaxr(*(unint64_t **)&v99);
            v203 = --v222 == 0;
          }
          while (__stlxr(v222, *(unint64_t **)&v99));
LABEL_399:
          if (!v203)
            goto LABEL_414;
          v394 = (void **)(*(_QWORD *)&v99 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v394);
          goto LABEL_402;
        case 5:
          v99 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v133 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v133, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v133;
          *v133 = 1;
          do
          {
            v134 = __ldaxr(*(unint64_t **)&v99);
            v102 = --v134 == 0;
          }
          while (__stlxr(v134, *(unint64_t **)&v99));
LABEL_357:
          if (!v102)
            goto LABEL_414;
          v394 = (void **)(*(_QWORD *)&v99 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v394);
LABEL_402:
          v131 = v99;
          v132 = 0x1020C405E66F15BLL;
          goto LABEL_413;
        case 8:
          v204 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v235 = operator new();
          v236 = v406[0];
          *(_QWORD *)v235 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v235 + 8) = *(_QWORD *)(*(_QWORD *)&v236 + 8);
          v237 = *(_QWORD *)(*(_QWORD *)&v236 + 16);
          *(_QWORD *)(v235 + 16) = v237;
          if (v237)
          {
            v238 = (unsigned int *)(v237 + 8);
            do
              v239 = __ldxr(v238);
            while (__stxr(v239 + 1, v238));
          }
          v240 = *(_OWORD *)(*(_QWORD *)&v236 + 24);
          v241 = *(_OWORD *)(*(_QWORD *)&v236 + 40);
          *(_OWORD *)(v235 + 56) = *(_OWORD *)(*(_QWORD *)&v236 + 56);
          *(_OWORD *)(v235 + 40) = v241;
          *(_OWORD *)(v235 + 24) = v240;
          *(_QWORD *)&v406[0] = v235;
          *(_QWORD *)v235 = 1;
          do
          {
            v242 = __ldaxr(*(unint64_t **)&v204);
            v213 = --v242 == 0;
          }
          while (__stlxr(v242, *(unint64_t **)&v204));
LABEL_409:
          if (!v213)
            goto LABEL_414;
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v204 + 16));
          v131 = v204;
          v246 = -235920773;
LABEL_412:
          v132 = v246 | 0x1030C4000000000;
LABEL_413:
          MEMORY[0x219A19A08](*(_QWORD *)&v131, v132);
LABEL_414:
          turi::flexible_type_fail(0);
          goto LABEL_415;
        case 9:
          v56 = *((_QWORD *)v5 + 7);
          v57 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v58 = (_QWORD *)operator new();
            v59 = *(_QWORD *)&v406[0] + 8;
            *v58 = **(_QWORD **)&v406[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v58 + 1, v59);
            *(_QWORD *)&v406[0] = v58;
            *v58 = 1;
            do
            {
              v60 = __ldaxr(v57);
              v61 = v60 - 1;
            }
            while (__stlxr(v61, v57));
            if (!v61)
            {
              v62 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v57);
              MEMORY[0x219A19A08](v62, 0x1030C407B73B9F7);
            }
          }
          v63 = v406[0];
          v64 = (_QWORD *)(*(_QWORD *)&v406[0] + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v406[0] + 8, v56 + 8))
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v66 = *(uint64_t **)(*(_QWORD *)&v63 + 24);
          v65 = *(uint64_t **)(*(_QWORD *)&v63 + 32);
          if (v65 == v66)
            goto LABEL_415;
          if (!*v64)
            goto LABEL_415;
          v67 = 1;
          do
          {
            v68 = *v66++;
            v67 *= v68;
          }
          while (v66 != v65);
          if (!v67)
            goto LABEL_415;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v63 + 8));
          v69 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v63 + 32) - *(_QWORD *)(*(_QWORD *)&v63 + 24)) >> 3;
          v404.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v394, v69, &v404);
          v70 = v394;
          v71 = (char *)v395;
          break;
        default:
          goto LABEL_496;
      }
      break;
    default:
LABEL_496:
      result = turi::flexible_type_fail(0);
LABEL_499:
      __break(1u);
      return result;
  }
  while (1)
  {
    v72 = v71 - (char *)v70;
    if (v72)
    {
      v73 = 0;
      v74 = v72 >> 3;
      v75 = *(uint64_t **)(v56 + 48);
      if (v74 <= 1)
        v74 = 1;
      v76 = v70;
      v77 = v74;
      do
      {
        v79 = (uint64_t)*v76++;
        v78 = v79;
        v80 = *v75++;
        v73 += v80 * v78;
        --v77;
      }
      while (v77);
      v81 = 0;
      v82 = *(double *)(**(_QWORD **)(v56 + 8) + 8 * (*(_QWORD *)(v56 + 72) + v73));
      v83 = *(uint64_t **)(*(_QWORD *)&v63 + 48);
      do
      {
        v85 = (uint64_t)*v70++;
        v84 = v85;
        v86 = *v83++;
        v81 += v86 * v84;
        --v74;
      }
      while (v74);
    }
    else
    {
      v81 = 0;
      v82 = *(double *)(**(_QWORD **)(v56 + 8) + 8 * *(_QWORD *)(v56 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v63 + 8));
    *(double *)(**(_QWORD **)(*(_QWORD *)&v63 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v63 + 72) + v81)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v63 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v63 + 72) + v81)) - v82;
    v70 = v394;
    v71 = (char *)v395;
    v87 = (void **)v395 - v394;
    v88 = v87 - 1;
    if ((char *)v395 - (char *)v394 < 1)
      goto LABEL_115;
    v89 = *(_QWORD *)(*(_QWORD *)&v63 + 24);
    v90 = (unint64_t)v394[v88] + 1;
    v394[v88] = (void *)v90;
    if (v90 >= *(_QWORD *)(v89 + 8 * v88))
      break;
LABEL_114:
    v87 = 1;
LABEL_115:
    if (v88 < 0 || !v87)
      goto LABEL_227;
  }
  v91 = (unint64_t *)&v70[v87 - 2];
  v92 = v89 - 16;
  while (1)
  {
    v93 = v87 - 1;
    v91[1] = 0;
    if (v87 - 1 <= 0)
      break;
    v94 = *v91 + 1;
    *v91-- = v94;
    v95 = *(_QWORD *)(v92 + 8 * v87--);
    if (v94 < v95)
    {
      v88 = v93 - 1;
      goto LABEL_114;
    }
  }
LABEL_227:
  if (v70)
  {
LABEL_228:
    v395 = v70;
    operator delete(v70);
  }
LABEL_415:
  v337 = 0;
  switch(BYTE4(v406[1]))
  {
    case 0:
      v337 = *(_QWORD *)&v406[0];
      goto LABEL_486;
    case 1:
      v337 = (uint64_t)v406[0];
      goto LABEL_486;
    case 2:
      v340 = v406[0];
      __idx = 0;
      v341 = (char *)(*(_QWORD *)&v406[0] + 8);
      if (*(char *)(*(_QWORD *)&v406[0] + 31) < 0)
        v341 = *(char **)(*(_QWORD *)&v406[0] + 8);
      v342 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v404, v341);
      v337 = std::stoll(v342, &__idx, 10);
      if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v404.__r_.__value_.__l.__data_);
      if (*(char *)(*(_QWORD *)&v340 + 31) < 0)
        v343 = *(_QWORD *)(*(_QWORD *)&v340 + 16);
      else
        v343 = *(unsigned __int8 *)(*(_QWORD *)&v340 + 31);
      if (__idx != v343)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v381 = std::string::append(&v403, " cannot be interpreted as an integer");
        v382 = *(_OWORD *)&v381->__r_.__value_.__l.__data_;
        v404.__r_.__value_.__r.__words[2] = v381->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v404.__r_.__value_.__l.__data_ = v382;
        v381->__r_.__value_.__l.__size_ = 0;
        v381->__r_.__value_.__r.__words[2] = 0;
        v381->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v404);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_443;
    case 3:
      v401 = 0;
      v402 = 0;
      v400 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v400, *(const void **)(*(_QWORD *)&v406[0] + 8), *(_QWORD *)(*(_QWORD *)&v406[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v406[0] + 16) - *(_QWORD *)(*(_QWORD *)&v406[0] + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v400)
      {
        v401 = v400;
        operator delete(v400);
      }
      goto LABEL_442;
    case 4:
      memset(v393, 0, sizeof(v393));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v393, *(uint64_t **)(*(_QWORD *)&v406[0] + 8), *(uint64_t **)(*(_QWORD *)&v406[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v406[0] + 16) - *(_QWORD *)(*(_QWORD *)&v406[0] + 8)) >> 4);
      turi::flexible_type_fail(0);
      v404.__r_.__value_.__r.__words[0] = (std::string::size_type)v393;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v404);
      goto LABEL_442;
    case 5:
      memset(v392, 0, sizeof(v392));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v392, *(uint64_t **)(*(_QWORD *)&v406[0] + 8), *(uint64_t **)(*(_QWORD *)&v406[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v406[0] + 16) - *(_QWORD *)(*(_QWORD *)&v406[0] + 8)) >> 5);
      turi::flexible_type_fail(0);
      v404.__r_.__value_.__r.__words[0] = (std::string::size_type)v392;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v404);
      goto LABEL_442;
    case 6:
      v337 = (uint64_t)(*(_QWORD *)&v406[0] << 8) >> 8;
      goto LABEL_486;
    case 7:
      goto LABEL_486;
    case 8:
      v344 = v406[0];
      v345 = *(unsigned int **)(*(_QWORD *)&v406[0] + 16);
      v387 = *(_QWORD *)(*(_QWORD *)&v406[0] + 8);
      v388 = v345;
      if (v345)
      {
        v346 = v345 + 2;
        do
          v347 = __ldxr(v346);
        while (__stxr(v347 + 1, v346));
      }
      v348 = *(_OWORD *)(*(_QWORD *)&v344 + 24);
      v349 = *(_OWORD *)(*(_QWORD *)&v344 + 40);
      v391 = *(_OWORD *)(*(_QWORD *)&v344 + 56);
      v390 = v349;
      v389 = v348;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v388);
      goto LABEL_442;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v394, *(_QWORD *)&v406[0] + 8);
      turi::flexible_type_fail(0);
      if (__p)
      {
        v399 = __p;
        operator delete(__p);
      }
      if (v396)
      {
        v397 = v396;
        operator delete(v396);
      }
      v337 = (uint64_t)v395;
      if (!v395)
        goto LABEL_443;
      v338 = v395 + 1;
      do
        v339 = __ldaxr(v338);
      while (__stlxr(v339 - 1, v338));
      if (!v339)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v337 + 16))(v337);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v337);
      }
LABEL_442:
      v337 = 0;
LABEL_443:
      switch(BYTE4(v406[1]))
      {
        case 2:
          v350 = *(unint64_t **)&v406[0];
          do
          {
            v351 = __ldaxr(v350);
            v352 = v351 - 1;
          }
          while (__stlxr(v352, v350));
          if (!v352)
          {
            v353 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            if (*(char *)(*(_QWORD *)&v406[0] + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v406[0] + 8));
            v354 = v353;
            v355 = 0x1012C404EF22A49;
            goto LABEL_484;
          }
          break;
        case 3:
          v367 = *(unint64_t **)&v406[0];
          do
          {
            v368 = __ldaxr(v367);
            v369 = v368 - 1;
          }
          while (__stlxr(v369, v367));
          if (!v369)
          {
            v370 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            v371 = *(void **)(*(_QWORD *)&v406[0] + 8);
            if (v371)
            {
              *(_QWORD *)(*(_QWORD *)&v406[0] + 16) = v371;
              operator delete(v371);
            }
            v354 = v370;
            v355 = 0x1080C409938AC02;
            goto LABEL_484;
          }
          break;
        case 4:
          v356 = *(unint64_t **)&v406[0];
          do
          {
            v357 = __ldaxr(v356);
            v358 = v357 - 1;
          }
          while (__stlxr(v358, v356));
          if (!v358)
          {
            v359 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            v394 = (void **)(*(_QWORD *)&v406[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v394);
            goto LABEL_477;
          }
          break;
        case 5:
          v372 = *(unint64_t **)&v406[0];
          do
          {
            v373 = __ldaxr(v372);
            v374 = v373 - 1;
          }
          while (__stlxr(v374, v372));
          if (!v374)
          {
            v359 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            v394 = (void **)(*(_QWORD *)&v406[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v394);
LABEL_477:
            v354 = v359;
            v355 = 0x1020C405E66F15BLL;
            goto LABEL_484;
          }
          break;
        case 8:
          v375 = *(unint64_t **)&v406[0];
          do
          {
            v376 = __ldaxr(v375);
            v377 = v376 - 1;
          }
          while (__stlxr(v377, v375));
          if (!v377)
          {
            v378 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v406[0] + 16));
            v354 = v378;
            v366 = -235920773;
            goto LABEL_483;
          }
          break;
        case 9:
          v360 = *(unint64_t **)&v406[0];
          do
          {
            v361 = __ldaxr(v360);
            v362 = v361 - 1;
          }
          while (__stlxr(v362, v360));
          if (!v362)
          {
            v363 = v406[0];
            if (*(_QWORD *)&v406[0])
            {
              v364 = *(void **)(*(_QWORD *)&v406[0] + 48);
              if (v364)
              {
                *(_QWORD *)(*(_QWORD *)&v406[0] + 56) = v364;
                operator delete(v364);
              }
              v365 = *(void **)(*(_QWORD *)&v363 + 24);
              if (v365)
              {
                *(_QWORD *)(*(_QWORD *)&v363 + 32) = v365;
                operator delete(v365);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v363 + 8);
              v354 = v363;
              v366 = 2071181815;
LABEL_483:
              v355 = v366 | 0x1030C4000000000;
LABEL_484:
              MEMORY[0x219A19A08](*(_QWORD *)&v354, v355);
            }
LABEL_485:
            v406[0] = 0.0;
          }
          break;
        default:
          break;
      }
LABEL_486:
      memset(v406, 0, 13);
      if (v384 < 0)
        operator delete(v383[0]);
      if (v386 < 0)
        operator delete(v385[0]);
      result = v337;
      break;
    default:
      result = turi::flexible_type_fail(0);
      goto LABEL_499;
  }
  return result;
}

void sub_2180C3DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;

  MEMORY[0x219A19A08](v37, 0x1020C405E66F15BLL);
  switch(*(_BYTE *)(v38 - 76))
  {
    case 2:
      v39 = *(unint64_t **)(v38 - 88);
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_39;
      v42 = *(_QWORD *)(v38 - 88);
      if (!v42)
        goto LABEL_39;
      if (*(char *)(v42 + 31) < 0)
        operator delete(*(void **)(v42 + 8));
      v43 = (_QWORD *)v42;
      v44 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v45 = *(unint64_t **)(v38 - 88);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_39;
      v48 = *(_QWORD **)(v38 - 88);
      if (!v48)
        goto LABEL_39;
      v49 = (void *)v48[1];
      if (v49)
      {
        v48[2] = v49;
        operator delete(v49);
      }
      v43 = v48;
      v44 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v50 = *(unint64_t **)(v38 - 88);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (v52)
        goto LABEL_39;
      v53 = *(_QWORD **)(v38 - 88);
      if (!v53)
        goto LABEL_39;
      a22 = v53 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      goto LABEL_26;
    case 5:
      v54 = *(unint64_t **)(v38 - 88);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (v56)
        goto LABEL_39;
      v53 = *(_QWORD **)(v38 - 88);
      if (!v53)
        goto LABEL_39;
      a22 = v53 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_26:
      v43 = v53;
      v44 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v57 = *(unint64_t **)(v38 - 88);
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (v59)
        goto LABEL_39;
      v60 = *(_QWORD *)(v38 - 88);
      if (!v60)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v60 + 16));
      v43 = (_QWORD *)v60;
      v61 = -235920773;
      goto LABEL_37;
    case 9:
      v62 = *(unint64_t **)(v38 - 88);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (v64)
        goto LABEL_39;
      v65 = *(_QWORD **)(v38 - 88);
      if (!v65)
        goto LABEL_39;
      v43 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v65);
      v61 = 2071181815;
LABEL_37:
      v44 = v61 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v43, v44);
LABEL_39:
      *(_QWORD *)(v38 - 88) = 0;
      *(_DWORD *)(v38 - 80) = 0;
      *(_BYTE *)(v38 - 76) = 0;
      if (a15 < 0)
        operator delete(__p);
      if (a21 < 0)
        operator delete(a16);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_39;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::RANGE_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180C4448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_length(_DWORD **a1)
{
  _DWORD *v1;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  double v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  double v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  double v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  double v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  double v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  double v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t *v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  void *v110;
  double *v111;
  uint64_t v112;
  unint64_t v113;
  double v114;
  unint64_t *v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  void *v119;
  double *v120;
  uint64_t v121;
  double v122;
  unint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  void *v131;
  double v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  double v145;
  uint64_t *v146;
  uint64_t *v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  double v175;
  uint64_t *v176;
  uint64_t *v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void **v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  unint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  double v201;
  _QWORD *v202;
  unint64_t v203;
  BOOL v204;
  double v205;
  uint64_t v206;
  double v207;
  uint64_t v208;
  unsigned int *v209;
  unsigned int v210;
  __int128 v211;
  __int128 v212;
  unint64_t v213;
  BOOL v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  double v231;
  double v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  double v236;
  uint64_t v237;
  unsigned int *v238;
  unsigned int v239;
  __int128 v240;
  __int128 v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  _QWORD *v247;
  unint64_t v248;
  uint64_t v249;
  double v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  __int128 v254;
  __int128 v255;
  unint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  _QWORD *v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  double v270;
  uint64_t v271;
  unsigned int *v272;
  unsigned int v273;
  __int128 v274;
  __int128 v275;
  unint64_t v276;
  uint64_t v277;
  double v278;
  uint64_t v279;
  unsigned int *v280;
  unsigned int v281;
  __int128 v282;
  __int128 v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  uint64_t v291;
  double v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  __int128 v296;
  __int128 v297;
  unint64_t v298;
  uint64_t v299;
  double v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  __int128 v304;
  __int128 v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  uint64_t v309;
  double v310;
  uint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  __int128 v314;
  __int128 v315;
  unint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  uint64_t v319;
  double v320;
  uint64_t v321;
  unsigned int *v322;
  unsigned int v323;
  __int128 v324;
  __int128 v325;
  unint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  double v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  double v340;
  char *v341;
  const std::string *v342;
  uint64_t v343;
  double v344;
  unsigned int *v345;
  unsigned int *v346;
  unsigned int v347;
  __int128 v348;
  __int128 v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  double v353;
  double v354;
  uint64_t v355;
  unint64_t *v356;
  unint64_t v357;
  unint64_t v358;
  double v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  double v363;
  void *v364;
  void *v365;
  unsigned int v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t v369;
  double v370;
  void *v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t v377;
  double v378;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v381;
  __int128 v382;
  void *v383[2];
  char v384;
  void *v385[2];
  char v386;
  uint64_t v387;
  unsigned int *v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  _QWORD v392[3];
  _QWORD v393[3];
  void **v394;
  void **v395;
  void *v396;
  void *v397;
  void *__p;
  void *v399;
  void *v400;
  void *v401;
  uint64_t v402;
  std::string v403;
  std::string v404;
  size_t __idx;
  double v406[3];

  v406[2] = *(double *)MEMORY[0x24BDAC8D0];
  v1 = *a1;
  LODWORD(v387) = **a1;
  if ((_DWORD)v387 != 6)
  {
    v394 = (void **)&v387;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(v385, "end_index");
  v3 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v1 + 2), (const void **)v385);
  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v383, "begin_index");
  v5 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v4 + 2), (const void **)v383);
  v6 = (uint64_t *)v5;
  memset(v406, 0, 13);
  if ((double *)v3 != v406)
  {
    v7 = *(double *)v3;
    *(double *)((char *)v406 + 5) = *(double *)(v3 + 5);
    v406[0] = v7;
    BYTE4(v406[1]) = *(_BYTE *)(v3 + 12);
    if (BYTE4(v406[1]) <= 9u && ((1 << SBYTE4(v406[1])) & 0x33C) != 0)
    {
      v9 = *(unint64_t **)&v406[0];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(v5 + 12))
  {
    case 0:
      switch(BYTE4(v406[1]))
      {
        case 0:
          v11 = *(_QWORD *)&v406[0] - *(_QWORD *)v5;
          goto LABEL_39;
        case 1:
          v201 = (double)*(uint64_t *)v5;
          goto LABEL_296;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v227 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v227, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v227;
          *v227 = 1;
          do
          {
            v228 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v228 == 0;
          }
          while (__stlxr(v228, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v106 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v107 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v107, *(uint64_t *)&v406[0]);
            *(_QWORD *)&v406[0] = v107;
            *v107 = 1;
            do
            {
              v108 = __ldaxr(v106);
              v109 = v108 - 1;
            }
            while (__stlxr(v109, v106));
            if (!v109)
            {
              v110 = (void *)v106[1];
              if (v110)
              {
                v106[2] = (unint64_t)v110;
                operator delete(v110);
              }
              MEMORY[0x219A19A08](v106, 0x1080C409938AC02);
            }
          }
          v111 = *(double **)(*(_QWORD *)&v406[0] + 8);
          v112 = *(_QWORD *)(*(_QWORD *)&v406[0] + 16) - (_QWORD)v111;
          if (v112)
          {
            v113 = v112 >> 3;
            v114 = (double)*v6;
            if (v113 <= 1)
              v113 = 1;
            do
            {
              *v111 = *v111 - v114;
              ++v111;
              --v113;
            }
            while (v113);
          }
          goto LABEL_415;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v262 == 0;
          }
          while (__stlxr(v262, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v287 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v287, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v287;
          *v287 = 1;
          do
          {
            v288 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v288 == 0;
          }
          while (__stlxr(v288, *(unint64_t **)&v100));
          goto LABEL_357;
        case 6:
          *(_QWORD *)&v406[0] = *(_QWORD *)&v406[0] & 0xFF00000000000000 | (*(_QWORD *)&v406[0] - *(_QWORD *)v5) & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_415;
        case 7:
          goto LABEL_414;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v291 = operator new();
          v292 = v406[0];
          *(_QWORD *)v291 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v291 + 8) = *(_QWORD *)(*(_QWORD *)&v292 + 8);
          v293 = *(_QWORD *)(*(_QWORD *)&v292 + 16);
          *(_QWORD *)(v291 + 16) = v293;
          if (v293)
          {
            v294 = (unsigned int *)(v293 + 8);
            do
              v295 = __ldxr(v294);
            while (__stxr(v295 + 1, v294));
          }
          v296 = *(_OWORD *)(*(_QWORD *)&v292 + 24);
          v297 = *(_OWORD *)(*(_QWORD *)&v292 + 40);
          *(_OWORD *)(v291 + 56) = *(_OWORD *)(*(_QWORD *)&v292 + 56);
          *(_OWORD *)(v291 + 40) = v297;
          *(_OWORD *)(v291 + 24) = v296;
          *(_QWORD *)&v406[0] = v291;
          *(_QWORD *)v291 = 1;
          do
          {
            v298 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v298 == 0;
          }
          while (__stlxr(v298, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v139 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v140 = (_QWORD *)operator new();
            v141 = *(_QWORD *)&v406[0] + 8;
            *v140 = **(_QWORD **)&v406[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v140 + 1, v141);
            *(_QWORD *)&v406[0] = v140;
            *v140 = 1;
            do
            {
              v142 = __ldaxr(v139);
              v143 = v142 - 1;
            }
            while (__stlxr(v143, v139));
            if (!v143)
            {
              v144 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v139);
              MEMORY[0x219A19A08](v144, 0x1030C407B73B9F7);
            }
          }
          v145 = v406[0];
          v147 = *(uint64_t **)(*(_QWORD *)&v406[0] + 24);
          v146 = *(uint64_t **)(*(_QWORD *)&v406[0] + 32);
          if (v146 == v147)
            goto LABEL_415;
          if (!*(_QWORD *)(*(_QWORD *)&v406[0] + 8))
            goto LABEL_415;
          v148 = (double)*v6;
          v149 = 1;
          do
          {
            v150 = *v147++;
            v149 *= v150;
          }
          while (v147 != v146);
          if (!v149)
            goto LABEL_415;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v406[0] + 8));
          v151 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v145 + 32) - *(_QWORD *)(*(_QWORD *)&v145 + 24)) >> 3;
          v404.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v394, v151, &v404);
          v71 = v394;
          v152 = v395;
          break;
        default:
          goto LABEL_496;
      }
      while (2)
      {
        v153 = 0;
        v154 = (char *)v152 - (char *)v71;
        if (v154)
        {
          v155 = v154 >> 3;
          v156 = *(uint64_t **)(*(_QWORD *)&v145 + 48);
          if (v155 <= 1)
            v155 = 1;
          do
          {
            v158 = (uint64_t)*v71++;
            v157 = v158;
            v159 = *v156++;
            v153 += v159 * v157;
            --v155;
          }
          while (v155);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v145 + 8));
        *(double *)(**(_QWORD **)(*(_QWORD *)&v145 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v145 + 72) + v153)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v145 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v145 + 72) + v153)) - v148;
        v71 = v394;
        v152 = v395;
        v160 = v395 - v394;
        v161 = v160 - 1;
        if ((char *)v395 - (char *)v394 < 1)
          goto LABEL_200;
        v162 = *(_QWORD *)(*(_QWORD *)&v145 + 24);
        v163 = (char *)v394[v161] + 1;
        v394[v161] = v163;
        if ((unint64_t)v163 < *(_QWORD *)(v162 + 8 * v161))
        {
LABEL_199:
          v160 = 1;
LABEL_200:
          if (v161 < 0 || !v160)
            goto LABEL_227;
          continue;
        }
        break;
      }
      v164 = (unint64_t *)&v71[v160 - 2];
      v165 = v162 - 16;
      while (1)
      {
        v166 = v160 - 1;
        v164[1] = 0;
        if (v160 - 1 <= 0)
          goto LABEL_228;
        v167 = *v164 + 1;
        *v164-- = v167;
        v168 = *(_QWORD *)(v165 + 8 * v160--);
        if (v167 < v168)
        {
          v161 = v166 - 1;
          goto LABEL_199;
        }
      }
    case 1:
      switch(BYTE4(v406[1]))
      {
        case 0:
          v11 = (uint64_t)((double)*(uint64_t *)&v406[0] - *(double *)v5);
LABEL_39:
          *(_QWORD *)&v406[0] = v11;
          goto LABEL_415;
        case 1:
          v201 = *(double *)v5;
LABEL_296:
          v406[0] = v406[0] - v201;
          goto LABEL_415;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v229, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v230 == 0;
          }
          while (__stlxr(v230, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v115 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v116 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v116, *(uint64_t *)&v406[0]);
            *(_QWORD *)&v406[0] = v116;
            *v116 = 1;
            do
            {
              v117 = __ldaxr(v115);
              v118 = v117 - 1;
            }
            while (__stlxr(v118, v115));
            if (!v118)
            {
              v119 = (void *)v115[1];
              if (v119)
              {
                v115[2] = (unint64_t)v119;
                operator delete(v119);
              }
              MEMORY[0x219A19A08](v115, 0x1080C409938AC02);
            }
          }
          v120 = *(double **)(*(_QWORD *)&v406[0] + 8);
          v121 = *(_QWORD *)(*(_QWORD *)&v406[0] + 16) - (_QWORD)v120;
          if (v121)
          {
            v122 = *(double *)v6;
            v123 = v121 >> 3;
            if (v123 <= 1)
              v123 = 1;
            do
            {
              *v120 = *v120 - v122;
              ++v120;
              --v123;
            }
            while (v123);
          }
          goto LABEL_415;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v263, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v264 == 0;
          }
          while (__stlxr(v264, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v289 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v289, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v289;
          *v289 = 1;
          do
          {
            v290 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v290 == 0;
          }
          while (__stlxr(v290, *(unint64_t **)&v100));
          goto LABEL_357;
        case 6:
          v231 = (*(double *)v5 - (double)(uint64_t)floor(*(double *)v5)) * 1000000.0;
          v232 = v406[0];
          v233 = *(_QWORD *)&v406[0] - vcvtmd_s64_f64(*(double *)v5);
          *(_QWORD *)&v406[0] = *(_QWORD *)&v406[0] & 0xFF00000000000000 | v233 & 0xFFFFFFFFFFFFFFLL;
          v234 = SLODWORD(v406[1]) - (uint64_t)v231;
          if (v234 < 0)
          {
            *(_QWORD *)&v406[0] = (v233 - 1) & 0xFFFFFFFFFFFFFFLL | *(_QWORD *)&v232 & 0xFF00000000000000;
            LODWORD(v234) = v234 + 1000000;
          }
          if (v234 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          LODWORD(v406[1]) = v234;
          goto LABEL_415;
        case 7:
          goto LABEL_414;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v299 = operator new();
          v300 = v406[0];
          *(_QWORD *)v299 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v299 + 8) = *(_QWORD *)(*(_QWORD *)&v300 + 8);
          v301 = *(_QWORD *)(*(_QWORD *)&v300 + 16);
          *(_QWORD *)(v299 + 16) = v301;
          if (v301)
          {
            v302 = (unsigned int *)(v301 + 8);
            do
              v303 = __ldxr(v302);
            while (__stxr(v303 + 1, v302));
          }
          v304 = *(_OWORD *)(*(_QWORD *)&v300 + 24);
          v305 = *(_OWORD *)(*(_QWORD *)&v300 + 40);
          *(_OWORD *)(v299 + 56) = *(_OWORD *)(*(_QWORD *)&v300 + 56);
          *(_OWORD *)(v299 + 40) = v305;
          *(_OWORD *)(v299 + 24) = v304;
          *(_QWORD *)&v406[0] = v299;
          *(_QWORD *)v299 = 1;
          do
          {
            v306 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v306 == 0;
          }
          while (__stlxr(v306, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v169 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v170 = (_QWORD *)operator new();
            v171 = *(_QWORD *)&v406[0] + 8;
            *v170 = **(_QWORD **)&v406[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v170 + 1, v171);
            *(_QWORD *)&v406[0] = v170;
            *v170 = 1;
            do
            {
              v172 = __ldaxr(v169);
              v173 = v172 - 1;
            }
            while (__stlxr(v173, v169));
            if (!v173)
            {
              v174 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v169);
              MEMORY[0x219A19A08](v174, 0x1030C407B73B9F7);
            }
          }
          v175 = v406[0];
          v177 = *(uint64_t **)(*(_QWORD *)&v406[0] + 24);
          v176 = *(uint64_t **)(*(_QWORD *)&v406[0] + 32);
          if (v176 == v177)
            goto LABEL_415;
          if (!*(_QWORD *)(*(_QWORD *)&v406[0] + 8))
            goto LABEL_415;
          v178 = *(double *)v6;
          v179 = 1;
          do
          {
            v180 = *v177++;
            v179 *= v180;
          }
          while (v177 != v176);
          if (!v179)
            goto LABEL_415;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v406[0] + 8));
          v181 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v175 + 32) - *(_QWORD *)(*(_QWORD *)&v175 + 24)) >> 3;
          v404.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v394, v181, &v404);
          v71 = v394;
          v182 = v395;
          break;
        default:
          goto LABEL_496;
      }
      while (2)
      {
        v183 = 0;
        v184 = (char *)v182 - (char *)v71;
        if (v184)
        {
          v185 = v184 >> 3;
          v186 = *(uint64_t **)(*(_QWORD *)&v175 + 48);
          if (v185 <= 1)
            v185 = 1;
          do
          {
            v188 = (uint64_t)*v71++;
            v187 = v188;
            v189 = *v186++;
            v183 += v189 * v187;
            --v185;
          }
          while (v185);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v175 + 8));
        *(double *)(**(_QWORD **)(*(_QWORD *)&v175 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v175 + 72) + v183)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v175 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v175 + 72) + v183)) - v178;
        v71 = v394;
        v182 = v395;
        v190 = v395 - v394;
        v191 = v190 - 1;
        if ((char *)v395 - (char *)v394 < 1)
          goto LABEL_225;
        v192 = *(_QWORD *)(*(_QWORD *)&v175 + 24);
        v193 = (char *)v394[v191] + 1;
        v394[v191] = v193;
        if ((unint64_t)v193 < *(_QWORD *)(v192 + 8 * v191))
        {
LABEL_224:
          v190 = 1;
LABEL_225:
          if (v191 < 0 || !v190)
            goto LABEL_227;
          continue;
        }
        break;
      }
      v194 = (unint64_t *)&v71[v190 - 2];
      v195 = v192 - 16;
      while (1)
      {
        v196 = v190 - 1;
        v194[1] = 0;
        if (v190 - 1 <= 0)
          goto LABEL_228;
        v197 = *v194 + 1;
        *v194-- = v197;
        v198 = *(_QWORD *)(v195 + 8 * v190--);
        if (v197 < v198)
        {
          v191 = v196 - 1;
          goto LABEL_224;
        }
      }
    case 2:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v247 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v247, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v247;
          *v247 = 1;
          do
          {
            v248 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v248 == 0;
          }
          while (__stlxr(v248, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v199 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v199, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v199;
          *v199 = 1;
          do
          {
            v200 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v200 == 0;
          }
          while (__stlxr(v200, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v249 = operator new();
          v250 = v406[0];
          *(_QWORD *)v249 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v249 + 8) = *(_QWORD *)(*(_QWORD *)&v250 + 8);
          v251 = *(_QWORD *)(*(_QWORD *)&v250 + 16);
          *(_QWORD *)(v249 + 16) = v251;
          if (v251)
          {
            v252 = (unsigned int *)(v251 + 8);
            do
              v253 = __ldxr(v252);
            while (__stxr(v253 + 1, v252));
          }
          v254 = *(_OWORD *)(*(_QWORD *)&v250 + 24);
          v255 = *(_OWORD *)(*(_QWORD *)&v250 + 40);
          *(_OWORD *)(v249 + 56) = *(_OWORD *)(*(_QWORD *)&v250 + 56);
          *(_OWORD *)(v249 + 40) = v255;
          *(_OWORD *)(v249 + 24) = v254;
          *(_QWORD *)&v406[0] = v249;
          *(_QWORD *)v249 = 1;
          do
          {
            v256 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v256 == 0;
          }
          while (__stlxr(v256, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v97 = (_QWORD *)operator new();
          v98 = *(_QWORD *)&v406[0] + 8;
          *v97 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *(_QWORD *)&v406[0] = v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 3:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v43 = *(double *)v5;
          v44 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, *(uint64_t *)&v406[0]);
            *(_QWORD *)&v406[0] = v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = v406[0];
          turi::flexible_type_fail(*(_QWORD *)(*(_QWORD *)&v49 + 16) - *(_QWORD *)(*(_QWORD *)&v49 + 8) == *(_QWORD *)(*(_QWORD *)&v43 + 16) - *(_QWORD *)(*(_QWORD *)&v43 + 8));
          v50 = *(double **)(*(_QWORD *)&v49 + 8);
          v51 = *(_QWORD *)(*(_QWORD *)&v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(*(_QWORD *)&v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = *v50 - v54;
              ++v50;
              --v52;
            }
            while (v52);
          }
          goto LABEL_415;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v259 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v259, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v259;
          *v259 = 1;
          do
          {
            v260 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v260 == 0;
          }
          while (__stlxr(v260, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v218 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v218, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v218;
          *v218 = 1;
          do
          {
            v219 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v219 == 0;
          }
          while (__stlxr(v219, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v269 = operator new();
          v270 = v406[0];
          *(_QWORD *)v269 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v269 + 8) = *(_QWORD *)(*(_QWORD *)&v270 + 8);
          v271 = *(_QWORD *)(*(_QWORD *)&v270 + 16);
          *(_QWORD *)(v269 + 16) = v271;
          if (v271)
          {
            v272 = (unsigned int *)(v271 + 8);
            do
              v273 = __ldxr(v272);
            while (__stxr(v273 + 1, v272));
          }
          v274 = *(_OWORD *)(*(_QWORD *)&v270 + 24);
          v275 = *(_OWORD *)(*(_QWORD *)&v270 + 40);
          *(_OWORD *)(v269 + 56) = *(_OWORD *)(*(_QWORD *)&v270 + 56);
          *(_OWORD *)(v269 + 40) = v275;
          *(_OWORD *)(v269 + 24) = v274;
          *(_QWORD *)&v406[0] = v269;
          *(_QWORD *)v269 = 1;
          do
          {
            v276 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v276 == 0;
          }
          while (__stlxr(v276, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v126 = (_QWORD *)operator new();
          v127 = *(_QWORD *)&v406[0] + 8;
          *v126 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
          *(_QWORD *)&v406[0] = v126;
          *v126 = 1;
          do
          {
            v128 = __ldaxr(v38);
            v42 = --v128 == 0;
          }
          while (__stlxr(v128, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 4:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v202 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v202, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v202;
          *v202 = 1;
          do
          {
            v203 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v203 == 0;
          }
          while (__stlxr(v203, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v206 = operator new();
          v207 = v406[0];
          *(_QWORD *)v206 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v206 + 8) = *(_QWORD *)(*(_QWORD *)&v207 + 8);
          v208 = *(_QWORD *)(*(_QWORD *)&v207 + 16);
          *(_QWORD *)(v206 + 16) = v208;
          if (v208)
          {
            v209 = (unsigned int *)(v208 + 8);
            do
              v210 = __ldxr(v209);
            while (__stxr(v210 + 1, v209));
          }
          v211 = *(_OWORD *)(*(_QWORD *)&v207 + 24);
          v212 = *(_OWORD *)(*(_QWORD *)&v207 + 40);
          *(_OWORD *)(v206 + 56) = *(_OWORD *)(*(_QWORD *)&v207 + 56);
          *(_OWORD *)(v206 + 40) = v212;
          *(_OWORD *)(v206 + 24) = v211;
          *(_QWORD *)&v406[0] = v206;
          *(_QWORD *)v206 = 1;
          do
          {
            v213 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v213 == 0;
          }
          while (__stlxr(v213, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v39 = (_QWORD *)operator new();
          v40 = *(_QWORD *)&v406[0] + 8;
          *v39 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *(_QWORD *)&v406[0] = v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 5:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v307 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v307, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v307;
          *v307 = 1;
          do
          {
            v308 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v308 == 0;
          }
          while (__stlxr(v308, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v257 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v257, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v257;
          *v257 = 1;
          do
          {
            v258 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v258 == 0;
          }
          while (__stlxr(v258, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v309 = operator new();
          v310 = v406[0];
          *(_QWORD *)v309 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v309 + 8) = *(_QWORD *)(*(_QWORD *)&v310 + 8);
          v311 = *(_QWORD *)(*(_QWORD *)&v310 + 16);
          *(_QWORD *)(v309 + 16) = v311;
          if (v311)
          {
            v312 = (unsigned int *)(v311 + 8);
            do
              v313 = __ldxr(v312);
            while (__stxr(v313 + 1, v312));
          }
          v314 = *(_OWORD *)(*(_QWORD *)&v310 + 24);
          v315 = *(_OWORD *)(*(_QWORD *)&v310 + 40);
          *(_OWORD *)(v309 + 56) = *(_OWORD *)(*(_QWORD *)&v310 + 56);
          *(_OWORD *)(v309 + 40) = v315;
          *(_OWORD *)(v309 + 24) = v314;
          *(_QWORD *)&v406[0] = v309;
          *(_QWORD *)v309 = 1;
          do
          {
            v316 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v316 == 0;
          }
          while (__stlxr(v316, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v215 = (_QWORD *)operator new();
          v216 = *(_QWORD *)&v406[0] + 8;
          *v215 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v215 + 1, v216);
          *(_QWORD *)&v406[0] = v215;
          *v215 = 1;
          do
          {
            v217 = __ldaxr(v38);
            v42 = --v217 == 0;
          }
          while (__stlxr(v217, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 6:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v124 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v124, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v124;
          *v124 = 1;
          do
          {
            v125 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v125 == 0;
          }
          while (__stlxr(v125, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v317 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v317, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v317;
          *v317 = 1;
          do
          {
            v318 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v318 == 0;
          }
          while (__stlxr(v318, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v267 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v267, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v267;
          *v267 = 1;
          do
          {
            v268 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v268 == 0;
          }
          while (__stlxr(v268, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v319 = operator new();
          v320 = v406[0];
          *(_QWORD *)v319 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v319 + 8) = *(_QWORD *)(*(_QWORD *)&v320 + 8);
          v321 = *(_QWORD *)(*(_QWORD *)&v320 + 16);
          *(_QWORD *)(v319 + 16) = v321;
          if (v321)
          {
            v322 = (unsigned int *)(v321 + 8);
            do
              v323 = __ldxr(v322);
            while (__stxr(v323 + 1, v322));
          }
          v324 = *(_OWORD *)(*(_QWORD *)&v320 + 24);
          v325 = *(_OWORD *)(*(_QWORD *)&v320 + 40);
          *(_OWORD *)(v319 + 56) = *(_OWORD *)(*(_QWORD *)&v320 + 56);
          *(_OWORD *)(v319 + 40) = v325;
          *(_OWORD *)(v319 + 24) = v324;
          *(_QWORD *)&v406[0] = v319;
          *(_QWORD *)v319 = 1;
          do
          {
            v326 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v326 == 0;
          }
          while (__stlxr(v326, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v224 = (_QWORD *)operator new();
          v225 = *(_QWORD *)&v406[0] + 8;
          *v224 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v224 + 1, v225);
          *(_QWORD *)&v406[0] = v224;
          *v224 = 1;
          do
          {
            v226 = __ldaxr(v38);
            v42 = --v226 == 0;
          }
          while (__stlxr(v226, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 7:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v265 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v265, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v265;
          *v265 = 1;
          do
          {
            v266 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v266 == 0;
          }
          while (__stlxr(v266, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v220 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v220, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v220;
          *v220 = 1;
          do
          {
            v221 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v221 == 0;
          }
          while (__stlxr(v221, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v277 = operator new();
          v278 = v406[0];
          *(_QWORD *)v277 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v277 + 8) = *(_QWORD *)(*(_QWORD *)&v278 + 8);
          v279 = *(_QWORD *)(*(_QWORD *)&v278 + 16);
          *(_QWORD *)(v277 + 16) = v279;
          if (v279)
          {
            v280 = (unsigned int *)(v279 + 8);
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          v282 = *(_OWORD *)(*(_QWORD *)&v278 + 24);
          v283 = *(_OWORD *)(*(_QWORD *)&v278 + 40);
          *(_OWORD *)(v277 + 56) = *(_OWORD *)(*(_QWORD *)&v278 + 56);
          *(_OWORD *)(v277 + 40) = v283;
          *(_OWORD *)(v277 + 24) = v282;
          *(_QWORD *)&v406[0] = v277;
          *(_QWORD *)v277 = 1;
          do
          {
            v284 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v284 == 0;
          }
          while (__stlxr(v284, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v136 = (_QWORD *)operator new();
          v137 = *(_QWORD *)&v406[0] + 8;
          *v136 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v136 + 1, v137);
          *(_QWORD *)&v406[0] = v136;
          *v136 = 1;
          do
          {
            v138 = __ldaxr(v38);
            v42 = --v138 == 0;
          }
          while (__stlxr(v138, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 8:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v129 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v129, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v129;
          *v129 = 1;
          do
          {
            v130 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v130 == 0;
          }
          while (__stlxr(v130, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v327 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v327, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v327;
          *v327 = 1;
          do
          {
            v328 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v328 == 0;
          }
          while (__stlxr(v328, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v285, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v286 == 0;
          }
          while (__stlxr(v286, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v329 = operator new();
          v330 = v406[0];
          *(_QWORD *)v329 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v329 + 8) = *(_QWORD *)(*(_QWORD *)&v330 + 8);
          v331 = *(_QWORD *)(*(_QWORD *)&v330 + 16);
          *(_QWORD *)(v329 + 16) = v331;
          if (v331)
          {
            v332 = (unsigned int *)(v331 + 8);
            do
              v333 = __ldxr(v332);
            while (__stxr(v333 + 1, v332));
          }
          v334 = *(_OWORD *)(*(_QWORD *)&v330 + 24);
          v335 = *(_OWORD *)(*(_QWORD *)&v330 + 40);
          *(_OWORD *)(v329 + 56) = *(_OWORD *)(*(_QWORD *)&v330 + 56);
          *(_OWORD *)(v329 + 40) = v335;
          *(_OWORD *)(v329 + 24) = v334;
          *(_QWORD *)&v406[0] = v329;
          *(_QWORD *)v329 = 1;
          do
          {
            v336 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v336 == 0;
          }
          while (__stlxr(v336, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v243 = (_QWORD *)operator new();
          v244 = *(_QWORD *)&v406[0] + 8;
          *v243 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v243 + 1, v244);
          *(_QWORD *)&v406[0] = v243;
          *v243 = 1;
          do
          {
            v245 = __ldaxr(v38);
            v42 = --v245 == 0;
          }
          while (__stlxr(v245, v38));
LABEL_292:
          if (!v42)
            goto LABEL_414;
          v132 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38));
          v246 = 2071181815;
          goto LABEL_412;
        default:
          goto LABEL_496;
      }
    case 9:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, *(unint64_t **)&v12));
LABEL_272:
          if (!v15)
            goto LABEL_414;
          if (*(char *)(*(_QWORD *)&v12 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v12 + 8));
          v132 = v12;
          v133 = 0x1012C404EF22A49;
          goto LABEL_413;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, *(unint64_t **)&v30));
LABEL_165:
          if (!v33)
            goto LABEL_414;
          v131 = *(void **)(*(_QWORD *)&v30 + 8);
          if (v131)
          {
            *(_QWORD *)(*(_QWORD *)&v30 + 16) = v131;
            operator delete(v131);
          }
          v132 = v30;
          v133 = 0x1080C409938AC02;
          goto LABEL_413;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v222 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v222, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v222;
          *v222 = 1;
          do
          {
            v223 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v223 == 0;
          }
          while (__stlxr(v223, *(unint64_t **)&v100));
LABEL_399:
          if (!v204)
            goto LABEL_414;
          v394 = (void **)(*(_QWORD *)&v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v394);
          goto LABEL_402;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v134 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v134, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v134;
          *v134 = 1;
          do
          {
            v135 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v135 == 0;
          }
          while (__stlxr(v135, *(unint64_t **)&v100));
LABEL_357:
          if (!v103)
            goto LABEL_414;
          v394 = (void **)(*(_QWORD *)&v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v394);
LABEL_402:
          v132 = v100;
          v133 = 0x1020C405E66F15BLL;
          goto LABEL_413;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v235 = operator new();
          v236 = v406[0];
          *(_QWORD *)v235 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v235 + 8) = *(_QWORD *)(*(_QWORD *)&v236 + 8);
          v237 = *(_QWORD *)(*(_QWORD *)&v236 + 16);
          *(_QWORD *)(v235 + 16) = v237;
          if (v237)
          {
            v238 = (unsigned int *)(v237 + 8);
            do
              v239 = __ldxr(v238);
            while (__stxr(v239 + 1, v238));
          }
          v240 = *(_OWORD *)(*(_QWORD *)&v236 + 24);
          v241 = *(_OWORD *)(*(_QWORD *)&v236 + 40);
          *(_OWORD *)(v235 + 56) = *(_OWORD *)(*(_QWORD *)&v236 + 56);
          *(_OWORD *)(v235 + 40) = v241;
          *(_OWORD *)(v235 + 24) = v240;
          *(_QWORD *)&v406[0] = v235;
          *(_QWORD *)v235 = 1;
          do
          {
            v242 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v242 == 0;
          }
          while (__stlxr(v242, *(unint64_t **)&v205));
LABEL_409:
          if (!v214)
            goto LABEL_414;
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v205 + 16));
          v132 = v205;
          v246 = -235920773;
LABEL_412:
          v133 = v246 | 0x1030C4000000000;
LABEL_413:
          MEMORY[0x219A19A08](*(_QWORD *)&v132, v133);
LABEL_414:
          turi::flexible_type_fail(0);
          goto LABEL_415;
        case 9:
          v57 = *(double *)v5;
          v58 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = *(_QWORD *)&v406[0] + 8;
            *v59 = **(_QWORD **)&v406[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *(_QWORD *)&v406[0] = v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = v406[0];
          v65 = (_QWORD *)(*(_QWORD *)&v406[0] + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v406[0] + 8, *(_QWORD *)&v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(*(_QWORD *)&v64 + 24);
          v66 = *(uint64_t **)(*(_QWORD *)&v64 + 32);
          if (v66 == v67)
            goto LABEL_415;
          if (!*v65)
            goto LABEL_415;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            goto LABEL_415;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v64 + 8));
          v70 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v64 + 32) - *(_QWORD *)(*(_QWORD *)&v64 + 24)) >> 3;
          v404.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v394, v70, &v404);
          v71 = v394;
          v72 = v395;
          break;
        default:
          goto LABEL_496;
      }
      break;
    default:
LABEL_496:
      result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(*(_QWORD *)&v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v57 + 72) + v74));
      v84 = *(uint64_t **)(*(_QWORD *)&v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v64 + 8));
    *(double *)(**(_QWORD **)(*(_QWORD *)&v64 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v64 + 72) + v82)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v64 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v64 + 72) + v82)) - v83;
    v71 = v394;
    v72 = v395;
    v88 = v395 - v394;
    v89 = v88 - 1;
    if ((char *)v395 - (char *)v394 < 1)
      goto LABEL_115;
    v90 = *(_QWORD *)(*(_QWORD *)&v64 + 24);
    v91 = (char *)v394[v89] + 1;
    v394[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_114:
    v88 = 1;
LABEL_115:
    if (v89 < 0 || !v88)
      goto LABEL_227;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_114;
    }
  }
LABEL_227:
  if (v71)
  {
LABEL_228:
    v395 = v71;
    operator delete(v71);
  }
LABEL_415:
  v337 = 0;
  switch(BYTE4(v406[1]))
  {
    case 0:
      v337 = *(_QWORD *)&v406[0];
      goto LABEL_486;
    case 1:
      v337 = (uint64_t)v406[0];
      goto LABEL_486;
    case 2:
      v340 = v406[0];
      __idx = 0;
      v341 = (char *)(*(_QWORD *)&v406[0] + 8);
      if (*(char *)(*(_QWORD *)&v406[0] + 31) < 0)
        v341 = *(char **)(*(_QWORD *)&v406[0] + 8);
      v342 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v404, v341);
      v337 = std::stoll(v342, &__idx, 10);
      if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v404.__r_.__value_.__l.__data_);
      if (*(char *)(*(_QWORD *)&v340 + 31) < 0)
        v343 = *(_QWORD *)(*(_QWORD *)&v340 + 16);
      else
        v343 = *(unsigned __int8 *)(*(_QWORD *)&v340 + 31);
      if (__idx != v343)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v381 = std::string::append(&v403, " cannot be interpreted as an integer");
        v382 = *(_OWORD *)&v381->__r_.__value_.__l.__data_;
        v404.__r_.__value_.__r.__words[2] = v381->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v404.__r_.__value_.__l.__data_ = v382;
        v381->__r_.__value_.__l.__size_ = 0;
        v381->__r_.__value_.__r.__words[2] = 0;
        v381->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v404);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_443;
    case 3:
      v401 = 0;
      v402 = 0;
      v400 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v400, *(const void **)(*(_QWORD *)&v406[0] + 8), *(_QWORD *)(*(_QWORD *)&v406[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v406[0] + 16) - *(_QWORD *)(*(_QWORD *)&v406[0] + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v400)
      {
        v401 = v400;
        operator delete(v400);
      }
      goto LABEL_442;
    case 4:
      memset(v393, 0, sizeof(v393));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v393, *(uint64_t **)(*(_QWORD *)&v406[0] + 8), *(uint64_t **)(*(_QWORD *)&v406[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v406[0] + 16) - *(_QWORD *)(*(_QWORD *)&v406[0] + 8)) >> 4);
      turi::flexible_type_fail(0);
      v404.__r_.__value_.__r.__words[0] = (std::string::size_type)v393;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v404);
      goto LABEL_442;
    case 5:
      memset(v392, 0, sizeof(v392));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v392, *(uint64_t **)(*(_QWORD *)&v406[0] + 8), *(uint64_t **)(*(_QWORD *)&v406[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v406[0] + 16) - *(_QWORD *)(*(_QWORD *)&v406[0] + 8)) >> 5);
      turi::flexible_type_fail(0);
      v404.__r_.__value_.__r.__words[0] = (std::string::size_type)v392;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v404);
      goto LABEL_442;
    case 6:
      v337 = (uint64_t)(*(_QWORD *)&v406[0] << 8) >> 8;
      goto LABEL_486;
    case 7:
      goto LABEL_486;
    case 8:
      v344 = v406[0];
      v345 = *(unsigned int **)(*(_QWORD *)&v406[0] + 16);
      v387 = *(_QWORD *)(*(_QWORD *)&v406[0] + 8);
      v388 = v345;
      if (v345)
      {
        v346 = v345 + 2;
        do
          v347 = __ldxr(v346);
        while (__stxr(v347 + 1, v346));
      }
      v348 = *(_OWORD *)(*(_QWORD *)&v344 + 24);
      v349 = *(_OWORD *)(*(_QWORD *)&v344 + 40);
      v391 = *(_OWORD *)(*(_QWORD *)&v344 + 56);
      v390 = v349;
      v389 = v348;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v388);
      goto LABEL_442;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v394, *(_QWORD *)&v406[0] + 8);
      turi::flexible_type_fail(0);
      if (__p)
      {
        v399 = __p;
        operator delete(__p);
      }
      if (v396)
      {
        v397 = v396;
        operator delete(v396);
      }
      v337 = (uint64_t)v395;
      if (!v395)
        goto LABEL_443;
      v338 = (unint64_t *)(v395 + 1);
      do
        v339 = __ldaxr(v338);
      while (__stlxr(v339 - 1, v338));
      if (!v339)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v337 + 16))(v337);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v337);
      }
LABEL_442:
      v337 = 0;
LABEL_443:
      switch(BYTE4(v406[1]))
      {
        case 2:
          v350 = *(unint64_t **)&v406[0];
          do
          {
            v351 = __ldaxr(v350);
            v352 = v351 - 1;
          }
          while (__stlxr(v352, v350));
          if (!v352)
          {
            v353 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            if (*(char *)(*(_QWORD *)&v406[0] + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v406[0] + 8));
            v354 = v353;
            v355 = 0x1012C404EF22A49;
            goto LABEL_484;
          }
          break;
        case 3:
          v367 = *(unint64_t **)&v406[0];
          do
          {
            v368 = __ldaxr(v367);
            v369 = v368 - 1;
          }
          while (__stlxr(v369, v367));
          if (!v369)
          {
            v370 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            v371 = *(void **)(*(_QWORD *)&v406[0] + 8);
            if (v371)
            {
              *(_QWORD *)(*(_QWORD *)&v406[0] + 16) = v371;
              operator delete(v371);
            }
            v354 = v370;
            v355 = 0x1080C409938AC02;
            goto LABEL_484;
          }
          break;
        case 4:
          v356 = *(unint64_t **)&v406[0];
          do
          {
            v357 = __ldaxr(v356);
            v358 = v357 - 1;
          }
          while (__stlxr(v358, v356));
          if (!v358)
          {
            v359 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            v394 = (void **)(*(_QWORD *)&v406[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v394);
            goto LABEL_477;
          }
          break;
        case 5:
          v372 = *(unint64_t **)&v406[0];
          do
          {
            v373 = __ldaxr(v372);
            v374 = v373 - 1;
          }
          while (__stlxr(v374, v372));
          if (!v374)
          {
            v359 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            v394 = (void **)(*(_QWORD *)&v406[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v394);
LABEL_477:
            v354 = v359;
            v355 = 0x1020C405E66F15BLL;
            goto LABEL_484;
          }
          break;
        case 8:
          v375 = *(unint64_t **)&v406[0];
          do
          {
            v376 = __ldaxr(v375);
            v377 = v376 - 1;
          }
          while (__stlxr(v377, v375));
          if (!v377)
          {
            v378 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v406[0] + 16));
            v354 = v378;
            v366 = -235920773;
            goto LABEL_483;
          }
          break;
        case 9:
          v360 = *(unint64_t **)&v406[0];
          do
          {
            v361 = __ldaxr(v360);
            v362 = v361 - 1;
          }
          while (__stlxr(v362, v360));
          if (!v362)
          {
            v363 = v406[0];
            if (*(_QWORD *)&v406[0])
            {
              v364 = *(void **)(*(_QWORD *)&v406[0] + 48);
              if (v364)
              {
                *(_QWORD *)(*(_QWORD *)&v406[0] + 56) = v364;
                operator delete(v364);
              }
              v365 = *(void **)(*(_QWORD *)&v363 + 24);
              if (v365)
              {
                *(_QWORD *)(*(_QWORD *)&v363 + 32) = v365;
                operator delete(v365);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v363 + 8);
              v354 = v363;
              v366 = 2071181815;
LABEL_483:
              v355 = v366 | 0x1030C4000000000;
LABEL_484:
              MEMORY[0x219A19A08](*(_QWORD *)&v354, v355);
            }
LABEL_485:
            v406[0] = 0.0;
          }
          break;
        default:
          break;
      }
LABEL_486:
      memset(v406, 0, 13);
      if (v384 < 0)
        operator delete(v383[0]);
      if (v386 < 0)
        operator delete(v385[0]);
      result = v337;
      break;
    default:
      goto LABEL_496;
  }
  return result;
}

void sub_2180C6A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;

  MEMORY[0x219A19A08](v37, 0x1020C405E66F15BLL);
  switch(*(_BYTE *)(v38 - 76))
  {
    case 2:
      v39 = *(unint64_t **)(v38 - 88);
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_39;
      v42 = *(_QWORD *)(v38 - 88);
      if (!v42)
        goto LABEL_39;
      if (*(char *)(v42 + 31) < 0)
        operator delete(*(void **)(v42 + 8));
      v43 = (_QWORD *)v42;
      v44 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v45 = *(unint64_t **)(v38 - 88);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_39;
      v48 = *(_QWORD **)(v38 - 88);
      if (!v48)
        goto LABEL_39;
      v49 = (void *)v48[1];
      if (v49)
      {
        v48[2] = v49;
        operator delete(v49);
      }
      v43 = v48;
      v44 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v50 = *(unint64_t **)(v38 - 88);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (v52)
        goto LABEL_39;
      v53 = *(_QWORD **)(v38 - 88);
      if (!v53)
        goto LABEL_39;
      a22 = v53 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      goto LABEL_26;
    case 5:
      v54 = *(unint64_t **)(v38 - 88);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (v56)
        goto LABEL_39;
      v53 = *(_QWORD **)(v38 - 88);
      if (!v53)
        goto LABEL_39;
      a22 = v53 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_26:
      v43 = v53;
      v44 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v57 = *(unint64_t **)(v38 - 88);
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (v59)
        goto LABEL_39;
      v60 = *(_QWORD *)(v38 - 88);
      if (!v60)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v60 + 16));
      v43 = (_QWORD *)v60;
      v61 = -235920773;
      goto LABEL_37;
    case 9:
      v62 = *(unint64_t **)(v38 - 88);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (v64)
        goto LABEL_39;
      v65 = *(_QWORD **)(v38 - 88);
      if (!v65)
        goto LABEL_39;
      v43 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v65);
      v61 = 2071181815;
LABEL_37:
      v44 = v61 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v43, v44);
LABEL_39:
      *(_QWORD *)(v38 - 88) = 0;
      *(_DWORD *)(v38 - 80) = 0;
      *(_BYTE *)(v38 - 76) = 0;
      if (a15 < 0)
        operator delete(__p);
      if (a21 < 0)
        operator delete(a16);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_39;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SARRAY_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", "operator()", 138, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180C70D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_length(_DWORD **a1)
{
  _DWORD *v1;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  double v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  double v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  double v49;
  double *v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  _QWORD *v55;
  unint64_t v56;
  double v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  double v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  double v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t *v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  void *v110;
  double *v111;
  uint64_t v112;
  unint64_t v113;
  double v114;
  unint64_t *v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  void *v119;
  double *v120;
  uint64_t v121;
  double v122;
  unint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  void *v131;
  double v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  double v145;
  uint64_t *v146;
  uint64_t *v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  double v175;
  uint64_t *v176;
  uint64_t *v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void **v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  unint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  double v201;
  _QWORD *v202;
  unint64_t v203;
  BOOL v204;
  double v205;
  uint64_t v206;
  double v207;
  uint64_t v208;
  unsigned int *v209;
  unsigned int v210;
  __int128 v211;
  __int128 v212;
  unint64_t v213;
  BOOL v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  double v231;
  double v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  double v236;
  uint64_t v237;
  unsigned int *v238;
  unsigned int v239;
  __int128 v240;
  __int128 v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  _QWORD *v247;
  unint64_t v248;
  uint64_t v249;
  double v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  __int128 v254;
  __int128 v255;
  unint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  _QWORD *v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  double v270;
  uint64_t v271;
  unsigned int *v272;
  unsigned int v273;
  __int128 v274;
  __int128 v275;
  unint64_t v276;
  uint64_t v277;
  double v278;
  uint64_t v279;
  unsigned int *v280;
  unsigned int v281;
  __int128 v282;
  __int128 v283;
  unint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  uint64_t v291;
  double v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  __int128 v296;
  __int128 v297;
  unint64_t v298;
  uint64_t v299;
  double v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  __int128 v304;
  __int128 v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  uint64_t v309;
  double v310;
  uint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  __int128 v314;
  __int128 v315;
  unint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  uint64_t v319;
  double v320;
  uint64_t v321;
  unsigned int *v322;
  unsigned int v323;
  __int128 v324;
  __int128 v325;
  unint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  double v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  double v340;
  char *v341;
  const std::string *v342;
  uint64_t v343;
  double v344;
  unsigned int *v345;
  unsigned int *v346;
  unsigned int v347;
  __int128 v348;
  __int128 v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  double v353;
  double v354;
  uint64_t v355;
  unint64_t *v356;
  unint64_t v357;
  unint64_t v358;
  double v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  double v363;
  void *v364;
  void *v365;
  unsigned int v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t v369;
  double v370;
  void *v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t v377;
  double v378;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v381;
  __int128 v382;
  void *v383[2];
  char v384;
  void *v385[2];
  char v386;
  uint64_t v387;
  unsigned int *v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  _QWORD v392[3];
  _QWORD v393[3];
  void **v394;
  void **v395;
  void *v396;
  void *v397;
  void *__p;
  void *v399;
  void *v400;
  void *v401;
  uint64_t v402;
  std::string v403;
  std::string v404;
  size_t __idx;
  double v406[3];

  v406[2] = *(double *)MEMORY[0x24BDAC8D0];
  v1 = *a1;
  LODWORD(v387) = **a1;
  if ((_DWORD)v387 != 7)
  {
    v394 = (void **)&v387;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(v385, "end_index");
  v3 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v1 + 2), (const void **)v385);
  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v383, "begin_index");
  v5 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v4 + 2), (const void **)v383);
  v6 = (uint64_t *)v5;
  memset(v406, 0, 13);
  if ((double *)v3 != v406)
  {
    v7 = *(double *)v3;
    *(double *)((char *)v406 + 5) = *(double *)(v3 + 5);
    v406[0] = v7;
    BYTE4(v406[1]) = *(_BYTE *)(v3 + 12);
    if (BYTE4(v406[1]) <= 9u && ((1 << SBYTE4(v406[1])) & 0x33C) != 0)
    {
      v9 = *(unint64_t **)&v406[0];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  switch(*(_BYTE *)(v5 + 12))
  {
    case 0:
      switch(BYTE4(v406[1]))
      {
        case 0:
          v11 = *(_QWORD *)&v406[0] - *(_QWORD *)v5;
          goto LABEL_39;
        case 1:
          v201 = (double)*(uint64_t *)v5;
          goto LABEL_296;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v227 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v227, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v227;
          *v227 = 1;
          do
          {
            v228 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v228 == 0;
          }
          while (__stlxr(v228, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v106 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v107 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v107, *(uint64_t *)&v406[0]);
            *(_QWORD *)&v406[0] = v107;
            *v107 = 1;
            do
            {
              v108 = __ldaxr(v106);
              v109 = v108 - 1;
            }
            while (__stlxr(v109, v106));
            if (!v109)
            {
              v110 = (void *)v106[1];
              if (v110)
              {
                v106[2] = (unint64_t)v110;
                operator delete(v110);
              }
              MEMORY[0x219A19A08](v106, 0x1080C409938AC02);
            }
          }
          v111 = *(double **)(*(_QWORD *)&v406[0] + 8);
          v112 = *(_QWORD *)(*(_QWORD *)&v406[0] + 16) - (_QWORD)v111;
          if (v112)
          {
            v113 = v112 >> 3;
            v114 = (double)*v6;
            if (v113 <= 1)
              v113 = 1;
            do
            {
              *v111 = *v111 - v114;
              ++v111;
              --v113;
            }
            while (v113);
          }
          goto LABEL_415;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v261 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v261, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v261;
          *v261 = 1;
          do
          {
            v262 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v262 == 0;
          }
          while (__stlxr(v262, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v287 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v287, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v287;
          *v287 = 1;
          do
          {
            v288 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v288 == 0;
          }
          while (__stlxr(v288, *(unint64_t **)&v100));
          goto LABEL_357;
        case 6:
          *(_QWORD *)&v406[0] = *(_QWORD *)&v406[0] & 0xFF00000000000000 | (*(_QWORD *)&v406[0] - *(_QWORD *)v5) & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_415;
        case 7:
          goto LABEL_414;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v291 = operator new();
          v292 = v406[0];
          *(_QWORD *)v291 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v291 + 8) = *(_QWORD *)(*(_QWORD *)&v292 + 8);
          v293 = *(_QWORD *)(*(_QWORD *)&v292 + 16);
          *(_QWORD *)(v291 + 16) = v293;
          if (v293)
          {
            v294 = (unsigned int *)(v293 + 8);
            do
              v295 = __ldxr(v294);
            while (__stxr(v295 + 1, v294));
          }
          v296 = *(_OWORD *)(*(_QWORD *)&v292 + 24);
          v297 = *(_OWORD *)(*(_QWORD *)&v292 + 40);
          *(_OWORD *)(v291 + 56) = *(_OWORD *)(*(_QWORD *)&v292 + 56);
          *(_OWORD *)(v291 + 40) = v297;
          *(_OWORD *)(v291 + 24) = v296;
          *(_QWORD *)&v406[0] = v291;
          *(_QWORD *)v291 = 1;
          do
          {
            v298 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v298 == 0;
          }
          while (__stlxr(v298, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v139 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v140 = (_QWORD *)operator new();
            v141 = *(_QWORD *)&v406[0] + 8;
            *v140 = **(_QWORD **)&v406[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v140 + 1, v141);
            *(_QWORD *)&v406[0] = v140;
            *v140 = 1;
            do
            {
              v142 = __ldaxr(v139);
              v143 = v142 - 1;
            }
            while (__stlxr(v143, v139));
            if (!v143)
            {
              v144 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v139);
              MEMORY[0x219A19A08](v144, 0x1030C407B73B9F7);
            }
          }
          v145 = v406[0];
          v147 = *(uint64_t **)(*(_QWORD *)&v406[0] + 24);
          v146 = *(uint64_t **)(*(_QWORD *)&v406[0] + 32);
          if (v146 == v147)
            goto LABEL_415;
          if (!*(_QWORD *)(*(_QWORD *)&v406[0] + 8))
            goto LABEL_415;
          v148 = (double)*v6;
          v149 = 1;
          do
          {
            v150 = *v147++;
            v149 *= v150;
          }
          while (v147 != v146);
          if (!v149)
            goto LABEL_415;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v406[0] + 8));
          v151 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v145 + 32) - *(_QWORD *)(*(_QWORD *)&v145 + 24)) >> 3;
          v404.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v394, v151, &v404);
          v71 = v394;
          v152 = v395;
          break;
        default:
          goto LABEL_496;
      }
      while (2)
      {
        v153 = 0;
        v154 = (char *)v152 - (char *)v71;
        if (v154)
        {
          v155 = v154 >> 3;
          v156 = *(uint64_t **)(*(_QWORD *)&v145 + 48);
          if (v155 <= 1)
            v155 = 1;
          do
          {
            v158 = (uint64_t)*v71++;
            v157 = v158;
            v159 = *v156++;
            v153 += v159 * v157;
            --v155;
          }
          while (v155);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v145 + 8));
        *(double *)(**(_QWORD **)(*(_QWORD *)&v145 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v145 + 72) + v153)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v145 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v145 + 72) + v153)) - v148;
        v71 = v394;
        v152 = v395;
        v160 = v395 - v394;
        v161 = v160 - 1;
        if ((char *)v395 - (char *)v394 < 1)
          goto LABEL_200;
        v162 = *(_QWORD *)(*(_QWORD *)&v145 + 24);
        v163 = (char *)v394[v161] + 1;
        v394[v161] = v163;
        if ((unint64_t)v163 < *(_QWORD *)(v162 + 8 * v161))
        {
LABEL_199:
          v160 = 1;
LABEL_200:
          if (v161 < 0 || !v160)
            goto LABEL_227;
          continue;
        }
        break;
      }
      v164 = (unint64_t *)&v71[v160 - 2];
      v165 = v162 - 16;
      while (1)
      {
        v166 = v160 - 1;
        v164[1] = 0;
        if (v160 - 1 <= 0)
          goto LABEL_228;
        v167 = *v164 + 1;
        *v164-- = v167;
        v168 = *(_QWORD *)(v165 + 8 * v160--);
        if (v167 < v168)
        {
          v161 = v166 - 1;
          goto LABEL_199;
        }
      }
    case 1:
      switch(BYTE4(v406[1]))
      {
        case 0:
          v11 = (uint64_t)((double)*(uint64_t *)&v406[0] - *(double *)v5);
LABEL_39:
          *(_QWORD *)&v406[0] = v11;
          goto LABEL_415;
        case 1:
          v201 = *(double *)v5;
LABEL_296:
          v406[0] = v406[0] - v201;
          goto LABEL_415;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v229 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v229, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v229;
          *v229 = 1;
          do
          {
            v230 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v230 == 0;
          }
          while (__stlxr(v230, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v115 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v116 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v116, *(uint64_t *)&v406[0]);
            *(_QWORD *)&v406[0] = v116;
            *v116 = 1;
            do
            {
              v117 = __ldaxr(v115);
              v118 = v117 - 1;
            }
            while (__stlxr(v118, v115));
            if (!v118)
            {
              v119 = (void *)v115[1];
              if (v119)
              {
                v115[2] = (unint64_t)v119;
                operator delete(v119);
              }
              MEMORY[0x219A19A08](v115, 0x1080C409938AC02);
            }
          }
          v120 = *(double **)(*(_QWORD *)&v406[0] + 8);
          v121 = *(_QWORD *)(*(_QWORD *)&v406[0] + 16) - (_QWORD)v120;
          if (v121)
          {
            v122 = *(double *)v6;
            v123 = v121 >> 3;
            if (v123 <= 1)
              v123 = 1;
            do
            {
              *v120 = *v120 - v122;
              ++v120;
              --v123;
            }
            while (v123);
          }
          goto LABEL_415;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v263 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v263, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v263;
          *v263 = 1;
          do
          {
            v264 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v264 == 0;
          }
          while (__stlxr(v264, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v289 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v289, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v289;
          *v289 = 1;
          do
          {
            v290 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v290 == 0;
          }
          while (__stlxr(v290, *(unint64_t **)&v100));
          goto LABEL_357;
        case 6:
          v231 = (*(double *)v5 - (double)(uint64_t)floor(*(double *)v5)) * 1000000.0;
          v232 = v406[0];
          v233 = *(_QWORD *)&v406[0] - vcvtmd_s64_f64(*(double *)v5);
          *(_QWORD *)&v406[0] = *(_QWORD *)&v406[0] & 0xFF00000000000000 | v233 & 0xFFFFFFFFFFFFFFLL;
          v234 = SLODWORD(v406[1]) - (uint64_t)v231;
          if (v234 < 0)
          {
            *(_QWORD *)&v406[0] = (v233 - 1) & 0xFFFFFFFFFFFFFFLL | *(_QWORD *)&v232 & 0xFF00000000000000;
            LODWORD(v234) = v234 + 1000000;
          }
          if (v234 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          LODWORD(v406[1]) = v234;
          goto LABEL_415;
        case 7:
          goto LABEL_414;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v299 = operator new();
          v300 = v406[0];
          *(_QWORD *)v299 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v299 + 8) = *(_QWORD *)(*(_QWORD *)&v300 + 8);
          v301 = *(_QWORD *)(*(_QWORD *)&v300 + 16);
          *(_QWORD *)(v299 + 16) = v301;
          if (v301)
          {
            v302 = (unsigned int *)(v301 + 8);
            do
              v303 = __ldxr(v302);
            while (__stxr(v303 + 1, v302));
          }
          v304 = *(_OWORD *)(*(_QWORD *)&v300 + 24);
          v305 = *(_OWORD *)(*(_QWORD *)&v300 + 40);
          *(_OWORD *)(v299 + 56) = *(_OWORD *)(*(_QWORD *)&v300 + 56);
          *(_OWORD *)(v299 + 40) = v305;
          *(_OWORD *)(v299 + 24) = v304;
          *(_QWORD *)&v406[0] = v299;
          *(_QWORD *)v299 = 1;
          do
          {
            v306 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v306 == 0;
          }
          while (__stlxr(v306, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v169 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v170 = (_QWORD *)operator new();
            v171 = *(_QWORD *)&v406[0] + 8;
            *v170 = **(_QWORD **)&v406[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v170 + 1, v171);
            *(_QWORD *)&v406[0] = v170;
            *v170 = 1;
            do
            {
              v172 = __ldaxr(v169);
              v173 = v172 - 1;
            }
            while (__stlxr(v173, v169));
            if (!v173)
            {
              v174 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v169);
              MEMORY[0x219A19A08](v174, 0x1030C407B73B9F7);
            }
          }
          v175 = v406[0];
          v177 = *(uint64_t **)(*(_QWORD *)&v406[0] + 24);
          v176 = *(uint64_t **)(*(_QWORD *)&v406[0] + 32);
          if (v176 == v177)
            goto LABEL_415;
          if (!*(_QWORD *)(*(_QWORD *)&v406[0] + 8))
            goto LABEL_415;
          v178 = *(double *)v6;
          v179 = 1;
          do
          {
            v180 = *v177++;
            v179 *= v180;
          }
          while (v177 != v176);
          if (!v179)
            goto LABEL_415;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v406[0] + 8));
          v181 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v175 + 32) - *(_QWORD *)(*(_QWORD *)&v175 + 24)) >> 3;
          v404.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v394, v181, &v404);
          v71 = v394;
          v182 = v395;
          break;
        default:
          goto LABEL_496;
      }
      while (2)
      {
        v183 = 0;
        v184 = (char *)v182 - (char *)v71;
        if (v184)
        {
          v185 = v184 >> 3;
          v186 = *(uint64_t **)(*(_QWORD *)&v175 + 48);
          if (v185 <= 1)
            v185 = 1;
          do
          {
            v188 = (uint64_t)*v71++;
            v187 = v188;
            v189 = *v186++;
            v183 += v189 * v187;
            --v185;
          }
          while (v185);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v175 + 8));
        *(double *)(**(_QWORD **)(*(_QWORD *)&v175 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v175 + 72) + v183)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v175 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v175 + 72) + v183)) - v178;
        v71 = v394;
        v182 = v395;
        v190 = v395 - v394;
        v191 = v190 - 1;
        if ((char *)v395 - (char *)v394 < 1)
          goto LABEL_225;
        v192 = *(_QWORD *)(*(_QWORD *)&v175 + 24);
        v193 = (char *)v394[v191] + 1;
        v394[v191] = v193;
        if ((unint64_t)v193 < *(_QWORD *)(v192 + 8 * v191))
        {
LABEL_224:
          v190 = 1;
LABEL_225:
          if (v191 < 0 || !v190)
            goto LABEL_227;
          continue;
        }
        break;
      }
      v194 = (unint64_t *)&v71[v190 - 2];
      v195 = v192 - 16;
      while (1)
      {
        v196 = v190 - 1;
        v194[1] = 0;
        if (v190 - 1 <= 0)
          goto LABEL_228;
        v197 = *v194 + 1;
        *v194-- = v197;
        v198 = *(_QWORD *)(v195 + 8 * v190--);
        if (v197 < v198)
        {
          v191 = v196 - 1;
          goto LABEL_224;
        }
      }
    case 2:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v18 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v18;
          *v18 = 1;
          do
          {
            v19 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v19 == 0;
          }
          while (__stlxr(v19, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v36 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v36, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v37 == 0;
          }
          while (__stlxr(v37, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v247 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v247, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v247;
          *v247 = 1;
          do
          {
            v248 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v248 == 0;
          }
          while (__stlxr(v248, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v199 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v199, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v199;
          *v199 = 1;
          do
          {
            v200 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v200 == 0;
          }
          while (__stlxr(v200, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v249 = operator new();
          v250 = v406[0];
          *(_QWORD *)v249 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v249 + 8) = *(_QWORD *)(*(_QWORD *)&v250 + 8);
          v251 = *(_QWORD *)(*(_QWORD *)&v250 + 16);
          *(_QWORD *)(v249 + 16) = v251;
          if (v251)
          {
            v252 = (unsigned int *)(v251 + 8);
            do
              v253 = __ldxr(v252);
            while (__stxr(v253 + 1, v252));
          }
          v254 = *(_OWORD *)(*(_QWORD *)&v250 + 24);
          v255 = *(_OWORD *)(*(_QWORD *)&v250 + 40);
          *(_OWORD *)(v249 + 56) = *(_OWORD *)(*(_QWORD *)&v250 + 56);
          *(_OWORD *)(v249 + 40) = v255;
          *(_OWORD *)(v249 + 24) = v254;
          *(_QWORD *)&v406[0] = v249;
          *(_QWORD *)v249 = 1;
          do
          {
            v256 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v256 == 0;
          }
          while (__stlxr(v256, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v97 = (_QWORD *)operator new();
          v98 = *(_QWORD *)&v406[0] + 8;
          *v97 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, v98);
          *(_QWORD *)&v406[0] = v97;
          *v97 = 1;
          do
          {
            v99 = __ldaxr(v38);
            v42 = --v99 == 0;
          }
          while (__stlxr(v99, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 3:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v20 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v20, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v21 == 0;
          }
          while (__stlxr(v21, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v43 = *(double *)v5;
          v44 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v45 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v45, *(uint64_t *)&v406[0]);
            *(_QWORD *)&v406[0] = v45;
            *v45 = 1;
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              v48 = (void *)v44[1];
              if (v48)
              {
                v44[2] = (unint64_t)v48;
                operator delete(v48);
              }
              MEMORY[0x219A19A08](v44, 0x1080C409938AC02);
            }
          }
          v49 = v406[0];
          turi::flexible_type_fail(*(_QWORD *)(*(_QWORD *)&v49 + 16) - *(_QWORD *)(*(_QWORD *)&v49 + 8) == *(_QWORD *)(*(_QWORD *)&v43 + 16) - *(_QWORD *)(*(_QWORD *)&v43 + 8));
          v50 = *(double **)(*(_QWORD *)&v49 + 8);
          v51 = *(_QWORD *)(*(_QWORD *)&v49 + 16) - (_QWORD)v50;
          if (v51)
          {
            v52 = v51 >> 3;
            v53 = *(double **)(*(_QWORD *)&v43 + 8);
            if (v52 <= 1)
              v52 = 1;
            do
            {
              v54 = *v53++;
              *v50 = *v50 - v54;
              ++v50;
              --v52;
            }
            while (v52);
          }
          goto LABEL_415;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v259 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v259, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v259;
          *v259 = 1;
          do
          {
            v260 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v260 == 0;
          }
          while (__stlxr(v260, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v218 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v218, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v218;
          *v218 = 1;
          do
          {
            v219 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v219 == 0;
          }
          while (__stlxr(v219, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v269 = operator new();
          v270 = v406[0];
          *(_QWORD *)v269 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v269 + 8) = *(_QWORD *)(*(_QWORD *)&v270 + 8);
          v271 = *(_QWORD *)(*(_QWORD *)&v270 + 16);
          *(_QWORD *)(v269 + 16) = v271;
          if (v271)
          {
            v272 = (unsigned int *)(v271 + 8);
            do
              v273 = __ldxr(v272);
            while (__stxr(v273 + 1, v272));
          }
          v274 = *(_OWORD *)(*(_QWORD *)&v270 + 24);
          v275 = *(_OWORD *)(*(_QWORD *)&v270 + 40);
          *(_OWORD *)(v269 + 56) = *(_OWORD *)(*(_QWORD *)&v270 + 56);
          *(_OWORD *)(v269 + 40) = v275;
          *(_OWORD *)(v269 + 24) = v274;
          *(_QWORD *)&v406[0] = v269;
          *(_QWORD *)v269 = 1;
          do
          {
            v276 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v276 == 0;
          }
          while (__stlxr(v276, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v126 = (_QWORD *)operator new();
          v127 = *(_QWORD *)&v406[0] + 8;
          *v126 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
          *(_QWORD *)&v406[0] = v126;
          *v126 = 1;
          do
          {
            v128 = __ldaxr(v38);
            v42 = --v128 == 0;
          }
          while (__stlxr(v128, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 4:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v13 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v13;
          *v13 = 1;
          do
          {
            v14 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v14 == 0;
          }
          while (__stlxr(v14, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v31, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v32 == 0;
          }
          while (__stlxr(v32, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v202 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v202, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v202;
          *v202 = 1;
          do
          {
            v203 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v203 == 0;
          }
          while (__stlxr(v203, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v101 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v101, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v101;
          *v101 = 1;
          do
          {
            v102 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v102 == 0;
          }
          while (__stlxr(v102, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v206 = operator new();
          v207 = v406[0];
          *(_QWORD *)v206 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v206 + 8) = *(_QWORD *)(*(_QWORD *)&v207 + 8);
          v208 = *(_QWORD *)(*(_QWORD *)&v207 + 16);
          *(_QWORD *)(v206 + 16) = v208;
          if (v208)
          {
            v209 = (unsigned int *)(v208 + 8);
            do
              v210 = __ldxr(v209);
            while (__stxr(v210 + 1, v209));
          }
          v211 = *(_OWORD *)(*(_QWORD *)&v207 + 24);
          v212 = *(_OWORD *)(*(_QWORD *)&v207 + 40);
          *(_OWORD *)(v206 + 56) = *(_OWORD *)(*(_QWORD *)&v207 + 56);
          *(_OWORD *)(v206 + 40) = v212;
          *(_OWORD *)(v206 + 24) = v211;
          *(_QWORD *)&v406[0] = v206;
          *(_QWORD *)v206 = 1;
          do
          {
            v213 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v213 == 0;
          }
          while (__stlxr(v213, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v39 = (_QWORD *)operator new();
          v40 = *(_QWORD *)&v406[0] + 8;
          *v39 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
          *(_QWORD *)&v406[0] = v39;
          *v39 = 1;
          do
          {
            v41 = __ldaxr(v38);
            v42 = --v41 == 0;
          }
          while (__stlxr(v41, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 5:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v25 == 0;
          }
          while (__stlxr(v25, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v104 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v104;
          *v104 = 1;
          do
          {
            v105 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v105 == 0;
          }
          while (__stlxr(v105, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v307 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v307, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v307;
          *v307 = 1;
          do
          {
            v308 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v308 == 0;
          }
          while (__stlxr(v308, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v257 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v257, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v257;
          *v257 = 1;
          do
          {
            v258 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v258 == 0;
          }
          while (__stlxr(v258, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v309 = operator new();
          v310 = v406[0];
          *(_QWORD *)v309 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v309 + 8) = *(_QWORD *)(*(_QWORD *)&v310 + 8);
          v311 = *(_QWORD *)(*(_QWORD *)&v310 + 16);
          *(_QWORD *)(v309 + 16) = v311;
          if (v311)
          {
            v312 = (unsigned int *)(v311 + 8);
            do
              v313 = __ldxr(v312);
            while (__stxr(v313 + 1, v312));
          }
          v314 = *(_OWORD *)(*(_QWORD *)&v310 + 24);
          v315 = *(_OWORD *)(*(_QWORD *)&v310 + 40);
          *(_OWORD *)(v309 + 56) = *(_OWORD *)(*(_QWORD *)&v310 + 56);
          *(_OWORD *)(v309 + 40) = v315;
          *(_OWORD *)(v309 + 24) = v314;
          *(_QWORD *)&v406[0] = v309;
          *(_QWORD *)v309 = 1;
          do
          {
            v316 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v316 == 0;
          }
          while (__stlxr(v316, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v215 = (_QWORD *)operator new();
          v216 = *(_QWORD *)&v406[0] + 8;
          *v215 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v215 + 1, v216);
          *(_QWORD *)&v406[0] = v215;
          *v215 = 1;
          do
          {
            v217 = __ldaxr(v38);
            v42 = --v217 == 0;
          }
          while (__stlxr(v217, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 6:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v26 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v26;
          *v26 = 1;
          do
          {
            v27 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v27 == 0;
          }
          while (__stlxr(v27, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v124 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v124, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v124;
          *v124 = 1;
          do
          {
            v125 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v125 == 0;
          }
          while (__stlxr(v125, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v317 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v317, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v317;
          *v317 = 1;
          do
          {
            v318 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v318 == 0;
          }
          while (__stlxr(v318, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v267 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v267, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v267;
          *v267 = 1;
          do
          {
            v268 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v268 == 0;
          }
          while (__stlxr(v268, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v319 = operator new();
          v320 = v406[0];
          *(_QWORD *)v319 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v319 + 8) = *(_QWORD *)(*(_QWORD *)&v320 + 8);
          v321 = *(_QWORD *)(*(_QWORD *)&v320 + 16);
          *(_QWORD *)(v319 + 16) = v321;
          if (v321)
          {
            v322 = (unsigned int *)(v321 + 8);
            do
              v323 = __ldxr(v322);
            while (__stxr(v323 + 1, v322));
          }
          v324 = *(_OWORD *)(*(_QWORD *)&v320 + 24);
          v325 = *(_OWORD *)(*(_QWORD *)&v320 + 40);
          *(_OWORD *)(v319 + 56) = *(_OWORD *)(*(_QWORD *)&v320 + 56);
          *(_OWORD *)(v319 + 40) = v325;
          *(_OWORD *)(v319 + 24) = v324;
          *(_QWORD *)&v406[0] = v319;
          *(_QWORD *)v319 = 1;
          do
          {
            v326 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v326 == 0;
          }
          while (__stlxr(v326, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v224 = (_QWORD *)operator new();
          v225 = *(_QWORD *)&v406[0] + 8;
          *v224 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v224 + 1, v225);
          *(_QWORD *)&v406[0] = v224;
          *v224 = 1;
          do
          {
            v226 = __ldaxr(v38);
            v42 = --v226 == 0;
          }
          while (__stlxr(v226, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 7:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v22 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v22;
          *v22 = 1;
          do
          {
            v23 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v23 == 0;
          }
          while (__stlxr(v23, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v55 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v55, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v55;
          *v55 = 1;
          do
          {
            v56 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v56 == 0;
          }
          while (__stlxr(v56, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v265 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v265, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v265;
          *v265 = 1;
          do
          {
            v266 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v266 == 0;
          }
          while (__stlxr(v266, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v220 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v220, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v220;
          *v220 = 1;
          do
          {
            v221 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v221 == 0;
          }
          while (__stlxr(v221, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v277 = operator new();
          v278 = v406[0];
          *(_QWORD *)v277 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v277 + 8) = *(_QWORD *)(*(_QWORD *)&v278 + 8);
          v279 = *(_QWORD *)(*(_QWORD *)&v278 + 16);
          *(_QWORD *)(v277 + 16) = v279;
          if (v279)
          {
            v280 = (unsigned int *)(v279 + 8);
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          v282 = *(_OWORD *)(*(_QWORD *)&v278 + 24);
          v283 = *(_OWORD *)(*(_QWORD *)&v278 + 40);
          *(_OWORD *)(v277 + 56) = *(_OWORD *)(*(_QWORD *)&v278 + 56);
          *(_OWORD *)(v277 + 40) = v283;
          *(_OWORD *)(v277 + 24) = v282;
          *(_QWORD *)&v406[0] = v277;
          *(_QWORD *)v277 = 1;
          do
          {
            v284 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v284 == 0;
          }
          while (__stlxr(v284, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v136 = (_QWORD *)operator new();
          v137 = *(_QWORD *)&v406[0] + 8;
          *v136 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v136 + 1, v137);
          *(_QWORD *)&v406[0] = v136;
          *v136 = 1;
          do
          {
            v138 = __ldaxr(v38);
            v42 = --v138 == 0;
          }
          while (__stlxr(v138, v38));
          goto LABEL_292;
        default:
          goto LABEL_496;
      }
    case 8:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v28 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v28;
          *v28 = 1;
          do
          {
            v29 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v29 == 0;
          }
          while (__stlxr(v29, *(unint64_t **)&v12));
          goto LABEL_272;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v129 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v129, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v129;
          *v129 = 1;
          do
          {
            v130 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v130 == 0;
          }
          while (__stlxr(v130, *(unint64_t **)&v30));
          goto LABEL_165;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v327 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v327, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v327;
          *v327 = 1;
          do
          {
            v328 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v328 == 0;
          }
          while (__stlxr(v328, *(unint64_t **)&v100));
          goto LABEL_399;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v285 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v285, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v285;
          *v285 = 1;
          do
          {
            v286 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v286 == 0;
          }
          while (__stlxr(v286, *(unint64_t **)&v100));
          goto LABEL_357;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v329 = operator new();
          v330 = v406[0];
          *(_QWORD *)v329 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v329 + 8) = *(_QWORD *)(*(_QWORD *)&v330 + 8);
          v331 = *(_QWORD *)(*(_QWORD *)&v330 + 16);
          *(_QWORD *)(v329 + 16) = v331;
          if (v331)
          {
            v332 = (unsigned int *)(v331 + 8);
            do
              v333 = __ldxr(v332);
            while (__stxr(v333 + 1, v332));
          }
          v334 = *(_OWORD *)(*(_QWORD *)&v330 + 24);
          v335 = *(_OWORD *)(*(_QWORD *)&v330 + 40);
          *(_OWORD *)(v329 + 56) = *(_OWORD *)(*(_QWORD *)&v330 + 56);
          *(_OWORD *)(v329 + 40) = v335;
          *(_OWORD *)(v329 + 24) = v334;
          *(_QWORD *)&v406[0] = v329;
          *(_QWORD *)v329 = 1;
          do
          {
            v336 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v336 == 0;
          }
          while (__stlxr(v336, *(unint64_t **)&v205));
          goto LABEL_409;
        case 9:
          v38 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v243 = (_QWORD *)operator new();
          v244 = *(_QWORD *)&v406[0] + 8;
          *v243 = **(_QWORD **)&v406[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v243 + 1, v244);
          *(_QWORD *)&v406[0] = v243;
          *v243 = 1;
          do
          {
            v245 = __ldaxr(v38);
            v42 = --v245 == 0;
          }
          while (__stlxr(v245, v38));
LABEL_292:
          if (!v42)
            goto LABEL_414;
          v132 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38));
          v246 = 2071181815;
          goto LABEL_412;
        default:
          goto LABEL_496;
      }
    case 9:
      switch(BYTE4(v406[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_414;
        case 2:
          v12 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v16 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v16;
          *v16 = 1;
          do
          {
            v17 = __ldaxr(*(unint64_t **)&v12);
            v15 = --v17 == 0;
          }
          while (__stlxr(v17, *(unint64_t **)&v12));
LABEL_272:
          if (!v15)
            goto LABEL_414;
          if (*(char *)(*(_QWORD *)&v12 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v12 + 8));
          v132 = v12;
          v133 = 0x1012C404EF22A49;
          goto LABEL_413;
        case 3:
          v30 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v34 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v34, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v34;
          *v34 = 1;
          do
          {
            v35 = __ldaxr(*(unint64_t **)&v30);
            v33 = --v35 == 0;
          }
          while (__stlxr(v35, *(unint64_t **)&v30));
LABEL_165:
          if (!v33)
            goto LABEL_414;
          v131 = *(void **)(*(_QWORD *)&v30 + 8);
          if (v131)
          {
            *(_QWORD *)(*(_QWORD *)&v30 + 16) = v131;
            operator delete(v131);
          }
          v132 = v30;
          v133 = 0x1080C409938AC02;
          goto LABEL_413;
        case 4:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v222 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v222, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v222;
          *v222 = 1;
          do
          {
            v223 = __ldaxr(*(unint64_t **)&v100);
            v204 = --v223 == 0;
          }
          while (__stlxr(v223, *(unint64_t **)&v100));
LABEL_399:
          if (!v204)
            goto LABEL_414;
          v394 = (void **)(*(_QWORD *)&v100 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v394);
          goto LABEL_402;
        case 5:
          v100 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v134 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v134, *(uint64_t *)&v406[0]);
          *(_QWORD *)&v406[0] = v134;
          *v134 = 1;
          do
          {
            v135 = __ldaxr(*(unint64_t **)&v100);
            v103 = --v135 == 0;
          }
          while (__stlxr(v135, *(unint64_t **)&v100));
LABEL_357:
          if (!v103)
            goto LABEL_414;
          v394 = (void **)(*(_QWORD *)&v100 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v394);
LABEL_402:
          v132 = v100;
          v133 = 0x1020C405E66F15BLL;
          goto LABEL_413;
        case 8:
          v205 = v406[0];
          if (**(_QWORD **)&v406[0] == 1)
            goto LABEL_414;
          v235 = operator new();
          v236 = v406[0];
          *(_QWORD *)v235 = **(_QWORD **)&v406[0];
          *(_QWORD *)(v235 + 8) = *(_QWORD *)(*(_QWORD *)&v236 + 8);
          v237 = *(_QWORD *)(*(_QWORD *)&v236 + 16);
          *(_QWORD *)(v235 + 16) = v237;
          if (v237)
          {
            v238 = (unsigned int *)(v237 + 8);
            do
              v239 = __ldxr(v238);
            while (__stxr(v239 + 1, v238));
          }
          v240 = *(_OWORD *)(*(_QWORD *)&v236 + 24);
          v241 = *(_OWORD *)(*(_QWORD *)&v236 + 40);
          *(_OWORD *)(v235 + 56) = *(_OWORD *)(*(_QWORD *)&v236 + 56);
          *(_OWORD *)(v235 + 40) = v241;
          *(_OWORD *)(v235 + 24) = v240;
          *(_QWORD *)&v406[0] = v235;
          *(_QWORD *)v235 = 1;
          do
          {
            v242 = __ldaxr(*(unint64_t **)&v205);
            v214 = --v242 == 0;
          }
          while (__stlxr(v242, *(unint64_t **)&v205));
LABEL_409:
          if (!v214)
            goto LABEL_414;
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v205 + 16));
          v132 = v205;
          v246 = -235920773;
LABEL_412:
          v133 = v246 | 0x1030C4000000000;
LABEL_413:
          MEMORY[0x219A19A08](*(_QWORD *)&v132, v133);
LABEL_414:
          turi::flexible_type_fail(0);
          goto LABEL_415;
        case 9:
          v57 = *(double *)v5;
          v58 = *(unint64_t **)&v406[0];
          if (**(_QWORD **)&v406[0] != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = *(_QWORD *)&v406[0] + 8;
            *v59 = **(_QWORD **)&v406[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *(_QWORD *)&v406[0] = v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v58);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v58));
            if (!v62)
            {
              v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
              MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
            }
          }
          v64 = v406[0];
          v65 = (_QWORD *)(*(_QWORD *)&v406[0] + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v406[0] + 8, *(_QWORD *)&v57 + 8))
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v67 = *(uint64_t **)(*(_QWORD *)&v64 + 24);
          v66 = *(uint64_t **)(*(_QWORD *)&v64 + 32);
          if (v66 == v67)
            goto LABEL_415;
          if (!*v65)
            goto LABEL_415;
          v68 = 1;
          do
          {
            v69 = *v67++;
            v68 *= v69;
          }
          while (v67 != v66);
          if (!v68)
            goto LABEL_415;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v64 + 8));
          v70 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v64 + 32) - *(_QWORD *)(*(_QWORD *)&v64 + 24)) >> 3;
          v404.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v394, v70, &v404);
          v71 = v394;
          v72 = v395;
          break;
        default:
          goto LABEL_496;
      }
      break;
    default:
LABEL_496:
      result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  while (1)
  {
    v73 = (char *)v72 - (char *)v71;
    if (v73)
    {
      v74 = 0;
      v75 = v73 >> 3;
      v76 = *(uint64_t **)(*(_QWORD *)&v57 + 48);
      if (v75 <= 1)
        v75 = 1;
      v77 = v71;
      v78 = v75;
      do
      {
        v80 = (uint64_t)*v77++;
        v79 = v80;
        v81 = *v76++;
        v74 += v81 * v79;
        --v78;
      }
      while (v78);
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v57 + 72) + v74));
      v84 = *(uint64_t **)(*(_QWORD *)&v64 + 48);
      do
      {
        v86 = (uint64_t)*v71++;
        v85 = v86;
        v87 = *v84++;
        v82 += v87 * v85;
        --v75;
      }
      while (v75);
    }
    else
    {
      v82 = 0;
      v83 = *(double *)(**(_QWORD **)(*(_QWORD *)&v57 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v57 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v64 + 8));
    *(double *)(**(_QWORD **)(*(_QWORD *)&v64 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v64 + 72) + v82)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v64 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v64 + 72) + v82)) - v83;
    v71 = v394;
    v72 = v395;
    v88 = v395 - v394;
    v89 = v88 - 1;
    if ((char *)v395 - (char *)v394 < 1)
      goto LABEL_115;
    v90 = *(_QWORD *)(*(_QWORD *)&v64 + 24);
    v91 = (char *)v394[v89] + 1;
    v394[v89] = v91;
    if ((unint64_t)v91 >= *(_QWORD *)(v90 + 8 * v89))
      break;
LABEL_114:
    v88 = 1;
LABEL_115:
    if (v89 < 0 || !v88)
      goto LABEL_227;
  }
  v92 = (unint64_t *)&v71[v88 - 2];
  v93 = v90 - 16;
  while (1)
  {
    v94 = v88 - 1;
    v92[1] = 0;
    if (v88 - 1 <= 0)
      break;
    v95 = *v92 + 1;
    *v92-- = v95;
    v96 = *(_QWORD *)(v93 + 8 * v88--);
    if (v95 < v96)
    {
      v89 = v94 - 1;
      goto LABEL_114;
    }
  }
LABEL_227:
  if (v71)
  {
LABEL_228:
    v395 = v71;
    operator delete(v71);
  }
LABEL_415:
  v337 = 0;
  switch(BYTE4(v406[1]))
  {
    case 0:
      v337 = *(_QWORD *)&v406[0];
      goto LABEL_486;
    case 1:
      v337 = (uint64_t)v406[0];
      goto LABEL_486;
    case 2:
      v340 = v406[0];
      __idx = 0;
      v341 = (char *)(*(_QWORD *)&v406[0] + 8);
      if (*(char *)(*(_QWORD *)&v406[0] + 31) < 0)
        v341 = *(char **)(*(_QWORD *)&v406[0] + 8);
      v342 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v404, v341);
      v337 = std::stoll(v342, &__idx, 10);
      if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v404.__r_.__value_.__l.__data_);
      if (*(char *)(*(_QWORD *)&v340 + 31) < 0)
        v343 = *(_QWORD *)(*(_QWORD *)&v340 + 16);
      else
        v343 = *(unsigned __int8 *)(*(_QWORD *)&v340 + 31);
      if (__idx != v343)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v381 = std::string::append(&v403, " cannot be interpreted as an integer");
        v382 = *(_OWORD *)&v381->__r_.__value_.__l.__data_;
        v404.__r_.__value_.__r.__words[2] = v381->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v404.__r_.__value_.__l.__data_ = v382;
        v381->__r_.__value_.__l.__size_ = 0;
        v381->__r_.__value_.__r.__words[2] = 0;
        v381->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v404);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_443;
    case 3:
      v401 = 0;
      v402 = 0;
      v400 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v400, *(const void **)(*(_QWORD *)&v406[0] + 8), *(_QWORD *)(*(_QWORD *)&v406[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v406[0] + 16) - *(_QWORD *)(*(_QWORD *)&v406[0] + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v400)
      {
        v401 = v400;
        operator delete(v400);
      }
      goto LABEL_442;
    case 4:
      memset(v393, 0, sizeof(v393));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v393, *(uint64_t **)(*(_QWORD *)&v406[0] + 8), *(uint64_t **)(*(_QWORD *)&v406[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v406[0] + 16) - *(_QWORD *)(*(_QWORD *)&v406[0] + 8)) >> 4);
      turi::flexible_type_fail(0);
      v404.__r_.__value_.__r.__words[0] = (std::string::size_type)v393;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v404);
      goto LABEL_442;
    case 5:
      memset(v392, 0, sizeof(v392));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v392, *(uint64_t **)(*(_QWORD *)&v406[0] + 8), *(uint64_t **)(*(_QWORD *)&v406[0] + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v406[0] + 16) - *(_QWORD *)(*(_QWORD *)&v406[0] + 8)) >> 5);
      turi::flexible_type_fail(0);
      v404.__r_.__value_.__r.__words[0] = (std::string::size_type)v392;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v404);
      goto LABEL_442;
    case 6:
      v337 = (uint64_t)(*(_QWORD *)&v406[0] << 8) >> 8;
      goto LABEL_486;
    case 7:
      goto LABEL_486;
    case 8:
      v344 = v406[0];
      v345 = *(unsigned int **)(*(_QWORD *)&v406[0] + 16);
      v387 = *(_QWORD *)(*(_QWORD *)&v406[0] + 8);
      v388 = v345;
      if (v345)
      {
        v346 = v345 + 2;
        do
          v347 = __ldxr(v346);
        while (__stxr(v347 + 1, v346));
      }
      v348 = *(_OWORD *)(*(_QWORD *)&v344 + 24);
      v349 = *(_OWORD *)(*(_QWORD *)&v344 + 40);
      v391 = *(_OWORD *)(*(_QWORD *)&v344 + 56);
      v390 = v349;
      v389 = v348;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v388);
      goto LABEL_442;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v394, *(_QWORD *)&v406[0] + 8);
      turi::flexible_type_fail(0);
      if (__p)
      {
        v399 = __p;
        operator delete(__p);
      }
      if (v396)
      {
        v397 = v396;
        operator delete(v396);
      }
      v337 = (uint64_t)v395;
      if (!v395)
        goto LABEL_443;
      v338 = (unint64_t *)(v395 + 1);
      do
        v339 = __ldaxr(v338);
      while (__stlxr(v339 - 1, v338));
      if (!v339)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v337 + 16))(v337);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v337);
      }
LABEL_442:
      v337 = 0;
LABEL_443:
      switch(BYTE4(v406[1]))
      {
        case 2:
          v350 = *(unint64_t **)&v406[0];
          do
          {
            v351 = __ldaxr(v350);
            v352 = v351 - 1;
          }
          while (__stlxr(v352, v350));
          if (!v352)
          {
            v353 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            if (*(char *)(*(_QWORD *)&v406[0] + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v406[0] + 8));
            v354 = v353;
            v355 = 0x1012C404EF22A49;
            goto LABEL_484;
          }
          break;
        case 3:
          v367 = *(unint64_t **)&v406[0];
          do
          {
            v368 = __ldaxr(v367);
            v369 = v368 - 1;
          }
          while (__stlxr(v369, v367));
          if (!v369)
          {
            v370 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            v371 = *(void **)(*(_QWORD *)&v406[0] + 8);
            if (v371)
            {
              *(_QWORD *)(*(_QWORD *)&v406[0] + 16) = v371;
              operator delete(v371);
            }
            v354 = v370;
            v355 = 0x1080C409938AC02;
            goto LABEL_484;
          }
          break;
        case 4:
          v356 = *(unint64_t **)&v406[0];
          do
          {
            v357 = __ldaxr(v356);
            v358 = v357 - 1;
          }
          while (__stlxr(v358, v356));
          if (!v358)
          {
            v359 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            v394 = (void **)(*(_QWORD *)&v406[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v394);
            goto LABEL_477;
          }
          break;
        case 5:
          v372 = *(unint64_t **)&v406[0];
          do
          {
            v373 = __ldaxr(v372);
            v374 = v373 - 1;
          }
          while (__stlxr(v374, v372));
          if (!v374)
          {
            v359 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            v394 = (void **)(*(_QWORD *)&v406[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v394);
LABEL_477:
            v354 = v359;
            v355 = 0x1020C405E66F15BLL;
            goto LABEL_484;
          }
          break;
        case 8:
          v375 = *(unint64_t **)&v406[0];
          do
          {
            v376 = __ldaxr(v375);
            v377 = v376 - 1;
          }
          while (__stlxr(v377, v375));
          if (!v377)
          {
            v378 = v406[0];
            if (!*(_QWORD *)&v406[0])
              goto LABEL_485;
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v406[0] + 16));
            v354 = v378;
            v366 = -235920773;
            goto LABEL_483;
          }
          break;
        case 9:
          v360 = *(unint64_t **)&v406[0];
          do
          {
            v361 = __ldaxr(v360);
            v362 = v361 - 1;
          }
          while (__stlxr(v362, v360));
          if (!v362)
          {
            v363 = v406[0];
            if (*(_QWORD *)&v406[0])
            {
              v364 = *(void **)(*(_QWORD *)&v406[0] + 48);
              if (v364)
              {
                *(_QWORD *)(*(_QWORD *)&v406[0] + 56) = v364;
                operator delete(v364);
              }
              v365 = *(void **)(*(_QWORD *)&v363 + 24);
              if (v365)
              {
                *(_QWORD *)(*(_QWORD *)&v363 + 32) = v365;
                operator delete(v365);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v363 + 8);
              v354 = v363;
              v366 = 2071181815;
LABEL_483:
              v355 = v366 | 0x1030C4000000000;
LABEL_484:
              MEMORY[0x219A19A08](*(_QWORD *)&v354, v355);
            }
LABEL_485:
            v406[0] = 0.0;
          }
          break;
        default:
          break;
      }
LABEL_486:
      memset(v406, 0, 13);
      if (v384 < 0)
        operator delete(v383[0]);
      if (v386 < 0)
        operator delete(v385[0]);
      result = v337;
      break;
    default:
      goto LABEL_496;
  }
  return result;
}

void sub_2180C96C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;

  MEMORY[0x219A19A08](v37, 0x1020C405E66F15BLL);
  switch(*(_BYTE *)(v38 - 76))
  {
    case 2:
      v39 = *(unint64_t **)(v38 - 88);
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_39;
      v42 = *(_QWORD *)(v38 - 88);
      if (!v42)
        goto LABEL_39;
      if (*(char *)(v42 + 31) < 0)
        operator delete(*(void **)(v42 + 8));
      v43 = (_QWORD *)v42;
      v44 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v45 = *(unint64_t **)(v38 - 88);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_39;
      v48 = *(_QWORD **)(v38 - 88);
      if (!v48)
        goto LABEL_39;
      v49 = (void *)v48[1];
      if (v49)
      {
        v48[2] = v49;
        operator delete(v49);
      }
      v43 = v48;
      v44 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v50 = *(unint64_t **)(v38 - 88);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (v52)
        goto LABEL_39;
      v53 = *(_QWORD **)(v38 - 88);
      if (!v53)
        goto LABEL_39;
      a22 = v53 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      goto LABEL_26;
    case 5:
      v54 = *(unint64_t **)(v38 - 88);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (v56)
        goto LABEL_39;
      v53 = *(_QWORD **)(v38 - 88);
      if (!v53)
        goto LABEL_39;
      a22 = v53 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_26:
      v43 = v53;
      v44 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v57 = *(unint64_t **)(v38 - 88);
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (v59)
        goto LABEL_39;
      v60 = *(_QWORD *)(v38 - 88);
      if (!v60)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v60 + 16));
      v43 = (_QWORD *)v60;
      v61 = -235920773;
      goto LABEL_37;
    case 9:
      v62 = *(unint64_t **)(v38 - 88);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (v64)
        goto LABEL_39;
      v65 = *(_QWORD **)(v38 - 88);
      if (!v65)
        goto LABEL_39;
      v43 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v65);
      v61 = 2071181815;
LABEL_37:
      v44 = v61 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v43, v44);
LABEL_39:
      *(_QWORD *)(v38 - 88) = 0;
      *(_DWORD *)(v38 - 80) = 0;
      *(_BYTE *)(v38 - 76) = 0;
      if (a15 < 0)
        operator delete(__p);
      if (a21 < 0)
        operator delete(a16);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_39;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SFRAME_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", "operator()", 141, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180C9D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_length(int **a1)
{
  int *v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[3];
  int v11;

  v1 = *a1;
  v11 = **a1;
  if (v11 != 8)
  {
    v10[2] = &v11;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v2 = (_QWORD *)*((_QWORD *)v1 + 7);
  v3 = (std::__shared_weak_count *)v2[1];
  v10[0] = *v2;
  v10[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = turi::query_eval::infer_planner_node_length(v10);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_2180C9E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TRANSFORM_NODE", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 129, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CA034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(int **a1)
{
  int *v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[3];
  int v11;

  v1 = *a1;
  v11 = **a1;
  if (v11 != 10)
  {
    v10[2] = &v11;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v2 = (_QWORD *)*((_QWORD *)v1 + 7);
  v3 = (std::__shared_weak_count *)v2[1];
  v10[0] = *v2;
  v10[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = turi::query_eval::infer_planner_node_length((uint64_t)v10);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_2180CA16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_TRANSFORM_NODE", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 137, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CA308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_length(int **a1)
{
  int *v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[3];
  int v11;

  v1 = *a1;
  v11 = **a1;
  if (v11 != 11)
  {
    v10[2] = &v11;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v2 = (_QWORD *)*((_QWORD *)v1 + 7);
  v3 = (std::__shared_weak_count *)v2[1];
  v10[0] = *v2;
  v10[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = turi::query_eval::infer_planner_node_length(v10);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_2180CA440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::UNION_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 138, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CA5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_length(int **a1)
{
  int *v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[3];
  int v11;

  v1 = *a1;
  v11 = **a1;
  if (v11 != 12)
  {
    v10[2] = &v11;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v2 = (_QWORD *)*((_QWORD *)v1 + 7);
  v3 = (std::__shared_weak_count *)v2[1];
  v10[0] = *v2;
  v10[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = turi::query_eval::infer_planner_node_length(v10);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_2180CA714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_UNION_PROJECT_NODE", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 157, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CA8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_length(int **a1)
{
  int *v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[3];
  int v11;

  v1 = *a1;
  v11 = **a1;
  if (v11 != 14)
  {
    v10[2] = &v11;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v2 = (_QWORD *)*((_QWORD *)v1 + 7);
  v3 = (std::__shared_weak_count *)v2[1];
  v10[0] = *v2;
  v10[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = turi::query_eval::infer_planner_node_length(v10);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_2180CA9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TERNARY_OPERATOR", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 163, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CAB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_length(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[3];
  uint64_t v11;

  v1 = *(_QWORD **)(*(_QWORD *)a1 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 64) - (_QWORD)v1;
  v11 = v2 >> 4;
  if (v2 != 16)
  {
    v10[2] = &v11;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v3 = (std::__shared_weak_count *)v1[1];
  v10[0] = *v1;
  v10[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = turi::query_eval::infer_planner_node_length(v10);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_2180CACC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/optonly_identity_operator.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/optonly_identity_operator.hpp", "operator()", 62, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::infer_length(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CAE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::any::holder<long long>::~holder()
{
  JUMPOUT(0x219A19A08);
}

uint64_t turi::any::holder<long long>::type()
{
  return MEMORY[0x24BEDB7D0];
}

_QWORD *turi::any::holder<long long>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D92D7F0;
  result[1] = v3;
  return result;
}

uint64_t turi::any::holder<long long>::deserializer_id()
{
  return turi::any::holder<long long>::registry;
}

uint64_t turi::any::holder<long long>::deep_op_equal(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

char *turi::any::holder<long long>::save(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *result;
  unint64_t v10;
  size_t v11;
  char **v12;
  size_t v13;
  BOOL v14;
  std::vector<char>::size_type v15;
  size_t v16;
  char **v17;
  size_t v18;
  BOOL v19;
  std::vector<char>::size_type v20;

  v4 = (_QWORD *)*a2;
  if (*(_QWORD *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = v4[5];
    if (v4[4] + 8 > v5)
    {
      v11 = 2 * v5 + 16;
      v4[5] = v11;
      v12 = (char **)v4[2];
      if (v12)
      {
        v6 = *v12;
        v13 = v12[1] - *v12;
        v14 = v11 >= v13;
        v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append((std::vector<char> *)v4[2], v15);
          v6 = *(char **)v4[2];
        }
        else if (!v14)
        {
          v12[1] = &v6[v11];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc((void *)v4[3], v11, 0xF6EA6B1uLL);
      }
      v4[3] = v6;
    }
    else
    {
      v6 = (char *)v4[3];
    }
    *(_QWORD *)&v6[v4[4]] = turi::any::holder<long long>::registry;
    v4[4] += 8;
  }
  v7 = (_QWORD *)(a1 + 8);
  v8 = (_QWORD *)*a2;
  if (*v8)
    return (char *)std::ostream::write();
  v10 = v8[5];
  if (v8[4] + 8 > v10)
  {
    v16 = 2 * v10 + 16;
    v8[5] = v16;
    v17 = (char **)v8[2];
    if (v17)
    {
      result = *v17;
      v18 = v17[1] - *v17;
      v19 = v16 >= v18;
      v20 = v16 - v18;
      if (v20 != 0 && v19)
      {
        std::vector<char>::__append((std::vector<char> *)v8[2], v20);
        result = *(char **)v8[2];
      }
      else if (!v19)
      {
        v17[1] = &result[v16];
      }
    }
    else
    {
      result = (char *)malloc_type_realloc((void *)v8[3], v16, 0xF6EA6B1uLL);
    }
    v8[3] = result;
  }
  else
  {
    result = (char *)v8[3];
  }
  *(_QWORD *)&result[v8[4]] = *v7;
  v8[4] += 8;
  return result;
}

uint64_t turi::any::holder<long long>::print(uint64_t a1, uint64_t a2)
{
  std::ostream::operator<<();
  return a2;
}

uint64_t *turi::any::holder<long long>::registry_type::registry_type(uint64_t *a1)
{
  int v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *global_registry;
  uint64_t *v10[2];
  unsigned __int8 v11;

  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(*(_QWORD *)(MEMORY[0x24BEDB7D0] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v2 = (char)v11;
  v3 = v10[0];
  v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (uint64_t **)v10[0];
  if ((v11 & 0x80u) == 0)
    v4 = v11;
  if (v4)
  {
    v6 = 0;
    do
    {
      v7 = *(char *)v5;
      v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0)
    operator delete(v3);
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<long long>::deserialize;
  return a1;
}

_QWORD *turi::any::holder<long long>::deserialize(uint64_t *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  turi::any::holder<long long>::holder(v2, a1);
  return v2;
}

void sub_2180CB23C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::holder<long long>::holder(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_24D92D7F0;
  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 16);
  if (v4)
  {
    a1[1] = *(_QWORD *)(v4 + *(_QWORD *)(v3 + 24));
    *(_QWORD *)(v3 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  return a1;
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)0>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(uint64_t ***)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CB34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)1>::get(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[1];
  v8 = *a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node((uint64_t)&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CB3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)2>::get(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = a1[1];
  v8 = *a1;
  v9 = (std::__shared_weak_count *)v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CB474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)3>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CB508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)4>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CB59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)5>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _DWORD *v9;
  std::__shared_weak_count *v10;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v9 = *(_DWORD **)a1;
  v10 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5.n128_f64[0] = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(&v9, a2);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2180CB630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)6>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CB6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)7>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CB758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)8>::get(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = a1[1];
  v8 = *a1;
  v9 = (std::__shared_weak_count *)v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CB7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)10>::get(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(uint64_t ***)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CB880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)11>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CB914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)13>::get(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = a1[1];
  v8 = *a1;
  v9 = (std::__shared_weak_count *)v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CB9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)12>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CBA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)14>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180CBAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_planner_to_operator<(turi::query_eval::planner_node_type)15>::get(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = (unint64_t *)(v1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  turi::query_eval::query_operator::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_2180CBB20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(uint64_t ***a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t **v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  uint64_t **v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t *v49;
  std::runtime_error *exception;
  std::string *v51;
  __int128 v52;
  std::runtime_error *v53;
  std::string *v54;
  __int128 v55;
  size_t __idx[2];
  char v57;
  void *v58[2];
  char v59;
  uint64_t v60;
  void *__p[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  std::string v65;
  size_t v66;

  v3 = *a1;
  LODWORD(v65.__r_.__value_.__l.__data_) = *(_DWORD *)*a1;
  if (LODWORD(v65.__r_.__value_.__l.__data_))
  {
LABEL_86:
    __p[0] = &v65;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v5 = (uint64_t)(v3 + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
  if (SBYTE7(v62) < 0)
    operator delete(__p[0]);
  if (!v6)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  v7 = (uint64_t)(*a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
  v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v7, (const void **)__p);
  if (SBYTE7(v62) < 0)
    operator delete(__p[0]);
  if (!v8)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
  v9 = (uint64_t)(*a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
  v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v9, (const void **)__p);
  if (SBYTE7(v62) < 0)
    operator delete(__p[0]);
  if (!v10)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
  v11 = (uint64_t)(*a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "type");
  v12 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v11, (const void **)__p);
  if (SBYTE7(v62) < 0)
    operator delete(__p[0]);
  if (!v12)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#5}::operator()();
  v60 = 0;
  v13 = *a1 + 1;
  std::string::basic_string[abi:ne180100]<0>(v58, "end_index");
  __p[0] = v58;
  v14 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13, (const void **)v58, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  v15 = 0;
  switch(*((_BYTE *)v14 + 68))
  {
    case 0:
      v15 = *((_QWORD *)v14 + 7);
      goto LABEL_42;
    case 1:
      v15 = (uint64_t)*((double *)v14 + 7);
      goto LABEL_42;
    case 2:
      v19 = *((_QWORD *)v14 + 7);
      __idx[0] = 0;
      v20 = (char *)(v19 + 8);
      if (*(char *)(v19 + 31) < 0)
        v20 = *(char **)(v19 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v20);
      v15 = std::stoll((const std::string *)__p, __idx, 10);
      if (SBYTE7(v62) < 0)
        operator delete(__p[0]);
      if (*(char *)(v19 + 31) < 0)
        v21 = *(_QWORD *)(v19 + 16);
      else
        v21 = *(unsigned __int8 *)(v19 + 31);
      if (__idx[0] != v21)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v51 = std::string::append(&v65, " cannot be interpreted as an integer");
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        *(_QWORD *)&v62 = *((_QWORD *)&v51->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_42;
    case 3:
      v16 = *((_QWORD *)v14 + 7);
      __p[1] = 0;
      *(_QWORD *)&v62 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v16 + 8), *(_QWORD *)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_41;
    case 4:
      v22 = *((_QWORD *)v14 + 7);
      __p[1] = 0;
      *(_QWORD *)&v62 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v65.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      goto LABEL_41;
    case 5:
      v23 = *((_QWORD *)v14 + 7);
      __p[1] = 0;
      *(_QWORD *)&v62 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v23 + 8), *(uint64_t **)(v23 + 16), (uint64_t)(*(_QWORD *)(v23 + 16) - *(_QWORD *)(v23 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v65.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      goto LABEL_41;
    case 6:
      v15 = (uint64_t)(*((_QWORD *)v14 + 7) << 8) >> 8;
      goto LABEL_42;
    case 7:
      goto LABEL_42;
    case 8:
      v24 = *((_QWORD *)v14 + 7);
      v25 = *(unsigned int **)(v24 + 16);
      __p[0] = *(void **)(v24 + 8);
      __p[1] = v25;
      if (v25)
      {
        v26 = v25 + 2;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = *(_OWORD *)(v24 + 24);
      v29 = *(_OWORD *)(v24 + 56);
      v63 = *(_OWORD *)(v24 + 40);
      v64 = v29;
      v62 = v28;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_41;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v14 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v63 + 1))
      {
        *(_QWORD *)&v64 = *((_QWORD *)&v63 + 1);
        operator delete(*((void **)&v63 + 1));
      }
      if ((_QWORD)v62)
      {
        *((_QWORD *)&v62 + 1) = v62;
        operator delete((void *)v62);
      }
      v15 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_42;
      v17 = (unint64_t *)((char *)__p[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
      }
LABEL_41:
      v15 = 0;
LABEL_42:
      v30 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__idx, "begin_index");
      __p[0] = __idx;
      v31 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30 + 1, (const void **)__idx, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      v32 = 0;
      switch(*((_BYTE *)v31 + 68))
      {
        case 0:
          v32 = *((_QWORD *)v31 + 7);
          goto LABEL_70;
        case 1:
          v32 = (uint64_t)*((double *)v31 + 7);
          goto LABEL_70;
        case 2:
          v36 = *((_QWORD *)v31 + 7);
          v66 = 0;
          v37 = (char *)(v36 + 8);
          if (*(char *)(v36 + 31) < 0)
            v37 = *(char **)(v36 + 8);
          std::string::basic_string[abi:ne180100]<0>(__p, v37);
          v32 = std::stoll((const std::string *)__p, &v66, 10);
          if (SBYTE7(v62) < 0)
            operator delete(__p[0]);
          if (*(char *)(v36 + 31) < 0)
            v38 = *(_QWORD *)(v36 + 16);
          else
            v38 = *(unsigned __int8 *)(v36 + 31);
          if (v66 != v38)
          {
            v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v54 = std::string::append(&v65, " cannot be interpreted as an integer");
            v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
            *(_QWORD *)&v62 = *((_QWORD *)&v54->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v55;
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            v54->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v53, (const std::string *)__p);
            __cxa_throw(v53, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_70;
        case 3:
          v33 = *((_QWORD *)v31 + 7);
          __p[1] = 0;
          *(_QWORD *)&v62 = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v33 + 8), *(_QWORD *)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_69;
        case 4:
          v39 = *((_QWORD *)v31 + 7);
          __p[1] = 0;
          *(_QWORD *)&v62 = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(_QWORD *)(v39 + 16) - *(_QWORD *)(v39 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v65.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
          goto LABEL_69;
        case 5:
          v40 = *((_QWORD *)v31 + 7);
          __p[1] = 0;
          *(_QWORD *)&v62 = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v40 + 8), *(uint64_t **)(v40 + 16), (uint64_t)(*(_QWORD *)(v40 + 16) - *(_QWORD *)(v40 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v65.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
          goto LABEL_69;
        case 6:
          v32 = (uint64_t)(*((_QWORD *)v31 + 7) << 8) >> 8;
          goto LABEL_70;
        case 7:
          goto LABEL_70;
        case 8:
          v41 = *((_QWORD *)v31 + 7);
          v42 = *(unsigned int **)(v41 + 16);
          __p[0] = *(void **)(v41 + 8);
          __p[1] = v42;
          if (v42)
          {
            v43 = v42 + 2;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          v45 = *(_OWORD *)(v41 + 24);
          v46 = *(_OWORD *)(v41 + 56);
          v63 = *(_OWORD *)(v41 + 40);
          v64 = v46;
          v62 = v45;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          goto LABEL_69;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v31 + 7) + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v63 + 1))
          {
            *(_QWORD *)&v64 = *((_QWORD *)&v63 + 1);
            operator delete(*((void **)&v63 + 1));
          }
          if ((_QWORD)v62)
          {
            *((_QWORD *)&v62 + 1) = v62;
            operator delete((void *)v62);
          }
          v32 = (uint64_t)__p[1];
          if (!__p[1])
            goto LABEL_70;
          v34 = (unint64_t *)((char *)__p[1] + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v32);
          }
LABEL_69:
          v32 = 0;
LABEL_70:
          if (v57 < 0)
            operator delete((void *)__idx[0]);
          v47 = v15 - v32;
          if (v59 < 0)
            operator delete(v58[0]);
          v60 = v47;
          v48 = *a1 + 1;
          std::string::basic_string[abi:ne180100]<0>(__p, "value");
          v58[0] = __p;
          v49 = (uint64_t *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v48, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v58);
          std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,turi::flexible_type &,unsigned long &,void>(v49 + 7, &v60, &v65);
          *a2 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = 0uLL;
          if (SBYTE7(v62) < 0)
            operator delete(__p[0]);
          return;
        default:
          turi::flexible_type_fail(0);
          goto LABEL_85;
      }
    default:
      turi::flexible_type_fail(0);
LABEL_85:
      __break(1u);
      goto LABEL_86;
  }
}

void sub_2180CC318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v30 - 57) < 0)
  {
    operator delete(*(void **)(v30 - 80));
    if ((v29 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0)
        operator delete(a10);
      if (a21 < 0)
        operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::CONSTANT_NODE", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 93, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CC6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"value\")", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 94, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CC828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"begin_index\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 95, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CC9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"end_index\")", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 96, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CCB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#5}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"type\")", 40);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 97, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#5}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CCCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,turi::flexible_type &,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2180CCD7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24D92D858;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,turi::flexible_type &,unsigned long &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_2180CCDE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,turi::flexible_type &,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  void *v30;
  void *v31;
  void **v32;

  v4 = *a3;
  v5 = *((_DWORD *)a3 + 2);
  v6 = *((unsigned __int8 *)a3 + 12);
  if (v6 > 9 || ((1 << v6) & 0x33C) == 0)
  {
    v9 = *a4;
    *(_QWORD *)a2 = &unk_24D92D8A8;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 48) = v4;
    *(_DWORD *)(a2 + 56) = v5;
    *(_BYTE *)(a2 + 60) = v6;
  }
  else
  {
    do
      v8 = __ldaxr((unint64_t *)v4);
    while (__stlxr(v8 + 1, (unint64_t *)v4));
    v9 = *a4;
    *(_QWORD *)a2 = &unk_24D92D8A8;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 48) = v4;
    *(_DWORD *)(a2 + 56) = v5;
    *(_BYTE *)(a2 + 60) = v6;
    do
      v10 = __ldaxr((unint64_t *)v4);
    while (__stlxr(v10 + 1, (unint64_t *)v4));
  }
  *(_QWORD *)(a2 + 64) = v9;
  switch(v6)
  {
    case 2u:
      do
      {
        v11 = __ldaxr((unint64_t *)v4);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unint64_t *)v4));
      if (v12)
        v13 = 1;
      else
        v13 = v4 == 0;
      if (v13)
        return;
      if (*(char *)(v4 + 31) < 0)
        operator delete(*(void **)(v4 + 8));
      break;
    case 3u:
      do
      {
        v14 = __ldaxr((unint64_t *)v4);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unint64_t *)v4));
      if (v15)
        v16 = 1;
      else
        v16 = v4 == 0;
      if (v16)
        return;
      v17 = *(void **)(v4 + 8);
      if (v17)
      {
        *(_QWORD *)(v4 + 16) = v17;
        operator delete(v17);
      }
      break;
    case 4u:
      do
      {
        v18 = __ldaxr((unint64_t *)v4);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unint64_t *)v4));
      if (v19)
        v20 = 1;
      else
        v20 = v4 == 0;
      if (v20)
        return;
      v32 = (void **)(v4 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
      goto LABEL_37;
    case 5u:
      do
      {
        v21 = __ldaxr((unint64_t *)v4);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unint64_t *)v4));
      if (v22)
        v23 = 1;
      else
        v23 = v4 == 0;
      if (v23)
        return;
      v32 = (void **)(v4 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_37:
      MEMORY[0x219A19A08](v4, 0x1020C405E66F15BLL);
      return;
    case 8u:
      do
      {
        v24 = __ldaxr((unint64_t *)v4);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unint64_t *)v4));
      if (v25)
        v26 = 1;
      else
        v26 = v4 == 0;
      if (v26)
        return;
      boost::detail::shared_count::~shared_count((unsigned int **)(v4 + 16));
      break;
    case 9u:
      do
      {
        v27 = __ldaxr((unint64_t *)v4);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unint64_t *)v4));
      if (v28)
        v29 = 1;
      else
        v29 = v4 == 0;
      if (v29)
        return;
      v30 = *(void **)(v4 + 48);
      if (v30)
      {
        *(_QWORD *)(v4 + 56) = v30;
        operator delete(v30);
      }
      v31 = *(void **)(v4 + 24);
      if (v31)
      {
        *(_QWORD *)(v4 + 32) = v31;
        operator delete(v31);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v4 + 8);
      break;
    default:
      return;
  }
  JUMPOUT(0x219A19A08);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::~operator_impl(uint64_t a1)
{
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::~operator_impl(a1);
  JUMPOUT(0x219A19A08);
}

BOOL turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::coro_running(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) != 0;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::print(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  turi::flexible_type_impl *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string v13;
  std::string v14;
  std::string v15;
  _QWORD v16[13];
  char v17;
  uint64_t v18;

  std::string::basic_string[abi:ne180100]<0>(&v14, "constant(");
  v4 = (turi::flexible_type_impl *)(a1 + 48);
  switch(*(_BYTE *)(a1 + 60))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_10;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_10:
      v16[0] = *MEMORY[0x24BEDB7F0];
      v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v16[2] = v7;
      v16[3] = MEMORY[0x24BEDB848] + 16;
      if (v17 < 0)
        operator delete((void *)v16[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v18);
      goto LABEL_17;
    case 2:
      v5 = *(_QWORD *)v4;
      if (*(char *)(*(_QWORD *)v4 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v6 = *(_OWORD *)(v5 + 8);
        v13.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 24);
        *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v6;
      }
      goto LABEL_17;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v16, (_QWORD *)(*(_QWORD *)v4 + 8));
      goto LABEL_17;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v16, (uint64_t *)(*(_QWORD *)v4 + 8));
      goto LABEL_17;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v16, (_QWORD *)(*(_QWORD *)v4 + 8));
      goto LABEL_17;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v4, &v13);
      goto LABEL_17;
    case 7:
      memset(&v13, 0, sizeof(v13));
      goto LABEL_17;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_17;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v16, (_QWORD *)(*(_QWORD *)v4 + 8));
LABEL_17:
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v13;
      else
        v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      else
        size = v13.__r_.__value_.__l.__size_;
      v10 = std::string::append(&v14, (const std::string::value_type *)v8, size);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = std::string::append(&v15, ")");
      *a2 = *v12;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_2180CD380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,turi::flexible_type const&,unsigned long const&,void>((uint64_t *)(a1 + 48), (uint64_t *)(a1 + 64), v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::execute(uint64_t a1, turi::query_eval::query_context *this)
{
  int v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  __int128 v51;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 73)
  {
    v5 = *(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v5;
  }
  else
  {
    if (v4)
      return;
    v5 = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  if (v5 >= *(_QWORD *)(a1 + 64))
  {
    v50 = 0;
  }
  else
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v51);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 16, &v51);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (*(_QWORD *)this >= *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 32))
      v9 = *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 32);
    else
      v9 = *(_QWORD *)this;
    *(_QWORD *)(a1 + 40) = v9;
    turi::sframe_rows::resize(*(uint64_t ****)(a1 + 16), 1uLL, v9);
    v10 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v10 + 24))
      turi::sframe_rows::ensure_unique(*(turi::sframe_rows **)(a1 + 16));
    v11 = **(uint64_t ***)v10;
    v12 = *v11;
    v13 = v11[1];
    if (*v11 != v13)
    {
      v14 = (uint64_t *)(a1 + 48);
      do
      {
        if (v14 != (uint64_t *)v12)
        {
          switch(*(_BYTE *)(v12 + 12))
          {
            case 2:
              v15 = *(unint64_t **)v12;
              do
              {
                v16 = __ldaxr(v15);
                v17 = v16 - 1;
              }
              while (__stlxr(v17, v15));
              if (!v17)
              {
                v18 = *(unint64_t **)v12;
                if (!*(_QWORD *)v12)
                  goto LABEL_61;
                if (*((char *)v18 + 31) < 0)
                  operator delete((void *)v18[1]);
                v19 = v18;
                v20 = 0x1012C404EF22A49;
                goto LABEL_60;
              }
              break;
            case 3:
              v21 = *(unint64_t **)v12;
              do
              {
                v22 = __ldaxr(v21);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v21));
              if (!v23)
              {
                v24 = *(unint64_t **)v12;
                if (!*(_QWORD *)v12)
                  goto LABEL_61;
                v25 = (void *)v24[1];
                if (v25)
                {
                  v24[2] = (unint64_t)v25;
                  operator delete(v25);
                }
                v19 = v24;
                v20 = 0x1080C409938AC02;
                goto LABEL_60;
              }
              break;
            case 4:
              v26 = *(unint64_t **)v12;
              do
              {
                v27 = __ldaxr(v26);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, v26));
              if (!v28)
              {
                v29 = *(unint64_t **)v12;
                if (!*(_QWORD *)v12)
                  goto LABEL_61;
                *(_QWORD *)&v51 = v29 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
                goto LABEL_44;
              }
              break;
            case 5:
              v30 = *(unint64_t **)v12;
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32)
              {
                v29 = *(unint64_t **)v12;
                if (!*(_QWORD *)v12)
                  goto LABEL_61;
                *(_QWORD *)&v51 = v29 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
LABEL_44:
                v19 = v29;
                v20 = 0x1020C405E66F15BLL;
                goto LABEL_60;
              }
              break;
            case 8:
              v33 = *(unint64_t **)v12;
              do
              {
                v34 = __ldaxr(v33);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, v33));
              if (!v35)
              {
                v36 = *(unint64_t **)v12;
                if (!*(_QWORD *)v12)
                  goto LABEL_61;
                boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
                v19 = v36;
                v37 = -235920773;
                goto LABEL_59;
              }
              break;
            case 9:
              v38 = *(unint64_t **)v12;
              do
              {
                v39 = __ldaxr(v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, v38));
              if (!v40)
              {
                v41 = *(unint64_t **)v12;
                if (*(_QWORD *)v12)
                {
                  v42 = (void *)v41[6];
                  if (v42)
                  {
                    v41[7] = (unint64_t)v42;
                    operator delete(v42);
                  }
                  v43 = (void *)v41[3];
                  if (v43)
                  {
                    v41[4] = (unint64_t)v43;
                    operator delete(v43);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v41 + 1));
                  v19 = v41;
                  v37 = 2071181815;
LABEL_59:
                  v20 = v37 | 0x1030C4000000000;
LABEL_60:
                  MEMORY[0x219A19A08](v19, v20);
                }
LABEL_61:
                *(_QWORD *)v12 = 0;
              }
              break;
            default:
              break;
          }
          v44 = *v14;
          *(_QWORD *)(v12 + 5) = *(_QWORD *)(a1 + 53);
          *(_QWORD *)v12 = v44;
          LODWORD(v44) = *(unsigned __int8 *)(a1 + 60);
          *(_BYTE *)(v12 + 12) = v44;
          v45 = v44 > 9;
          v46 = (1 << v44) & 0x33C;
          if (!v45 && v46 != 0)
          {
            v48 = *(unint64_t **)v12;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 + 1, v48));
          }
        }
        v12 += 16;
      }
      while (v12 != v13);
    }
    turi::query_eval::query_context::emit((uint64_t)this, (__int128 *)(a1 + 16));
    v50 = 73;
  }
  *(_DWORD *)(a1 + 8) = v50;
}

_QWORD *turi::query_eval::query_operator::print@<X0>(turi::query_eval::query_operator *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*(uint64_t (**)(turi::query_eval::query_operator *))(*(_QWORD *)this + 16))(this);
  return turi::query_eval::extract_field<turi::query_eval::visitor_get_name,std::string>(v3, a2);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::~operator_impl(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v32;

  *(_QWORD *)a1 = &unk_24D92D8A8;
  switch(*(_BYTE *)(a1 + 60))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 48);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 48);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 48);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 48);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 48);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 48);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 48);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 48);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 48);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 48);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 48);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 48);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 16);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,turi::flexible_type const&,unsigned long const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type const&,unsigned long const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2180CDA1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::__shared_ptr_emplace[abi:ne180100]<turi::flexible_type const&,unsigned long const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24D92D858;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,turi::flexible_type const&,unsigned long const&>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_2180CDA80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>,turi::flexible_type const&,unsigned long const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  void *v30;
  void *v31;
  void **v32;

  v4 = *a3;
  v5 = *((_DWORD *)a3 + 2);
  v6 = *((unsigned __int8 *)a3 + 12);
  if (v6 > 9 || ((1 << v6) & 0x33C) == 0)
  {
    v9 = *a4;
    *(_QWORD *)a2 = &unk_24D92D8A8;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 48) = v4;
    *(_DWORD *)(a2 + 56) = v5;
    *(_BYTE *)(a2 + 60) = v6;
  }
  else
  {
    do
      v8 = __ldaxr((unint64_t *)v4);
    while (__stlxr(v8 + 1, (unint64_t *)v4));
    v9 = *a4;
    *(_QWORD *)a2 = &unk_24D92D8A8;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 48) = v4;
    *(_DWORD *)(a2 + 56) = v5;
    *(_BYTE *)(a2 + 60) = v6;
    do
      v10 = __ldaxr((unint64_t *)v4);
    while (__stlxr(v10 + 1, (unint64_t *)v4));
  }
  *(_QWORD *)(a2 + 64) = v9;
  switch(v6)
  {
    case 2u:
      do
      {
        v11 = __ldaxr((unint64_t *)v4);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unint64_t *)v4));
      if (v12)
        v13 = 1;
      else
        v13 = v4 == 0;
      if (v13)
        return;
      if (*(char *)(v4 + 31) < 0)
        operator delete(*(void **)(v4 + 8));
      break;
    case 3u:
      do
      {
        v14 = __ldaxr((unint64_t *)v4);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unint64_t *)v4));
      if (v15)
        v16 = 1;
      else
        v16 = v4 == 0;
      if (v16)
        return;
      v17 = *(void **)(v4 + 8);
      if (v17)
      {
        *(_QWORD *)(v4 + 16) = v17;
        operator delete(v17);
      }
      break;
    case 4u:
      do
      {
        v18 = __ldaxr((unint64_t *)v4);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unint64_t *)v4));
      if (v19)
        v20 = 1;
      else
        v20 = v4 == 0;
      if (v20)
        return;
      v32 = (void **)(v4 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
      goto LABEL_37;
    case 5u:
      do
      {
        v21 = __ldaxr((unint64_t *)v4);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unint64_t *)v4));
      if (v22)
        v23 = 1;
      else
        v23 = v4 == 0;
      if (v23)
        return;
      v32 = (void **)(v4 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_37:
      MEMORY[0x219A19A08](v4, 0x1020C405E66F15BLL);
      return;
    case 8u:
      do
      {
        v24 = __ldaxr((unint64_t *)v4);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unint64_t *)v4));
      if (v25)
        v26 = 1;
      else
        v26 = v4 == 0;
      if (v26)
        return;
      boost::detail::shared_count::~shared_count((unsigned int **)(v4 + 16));
      break;
    case 9u:
      do
      {
        v27 = __ldaxr((unint64_t *)v4);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unint64_t *)v4));
      if (v28)
        v29 = 1;
      else
        v29 = v4 == 0;
      if (v29)
        return;
      v30 = *(void **)(v4 + 48);
      if (v30)
      {
        *(_QWORD *)(v4 + 56) = v30;
        operator delete(v30);
      }
      v31 = *(void **)(v4 + 24);
      if (v31)
      {
        *(_QWORD *)(v4 + 32) = v31;
        operator delete(v31);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v4 + 8);
      break;
    default:
      return;
  }
  JUMPOUT(0x219A19A08);
}

char *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  char *v5;
  char *result;
  uint64_t *v7;
  uint64_t v8;

  v3 = *(_DWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64) - *(_QWORD *)(*(_QWORD *)a1 + 56);
  v8 = v4 >> 4;
  if (v4 != 32)
  {
    v7 = &v8;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  LODWORD(v7) = *v3;
  if ((_DWORD)v7 != 1)
  {
    v8 = (uint64_t)&v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  v5 = (char *)operator new(0x88uLL);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &unk_24D92D918;
  *((_QWORD *)v5 + 1) = 0;
  *((_DWORD *)v5 + 8) = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  a2[1] = v5;
  *((_QWORD *)v5 + 3) = &unk_24D92D968;
  result = v5 + 24;
  *a2 = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 118, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CDF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::APPEND_NODE", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 119, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CE154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::~operator_impl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24D92D968;
  v2 = (uint64_t)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::~operator_impl(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24D92D968;
  v1 = (uint64_t)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  JUMPOUT(0x219A19A08);
}

char *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::clone@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x88uLL);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &unk_24D92D918;
  *((_QWORD *)v2 + 1) = 0;
  *((_DWORD *)v2 + 8) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  a1[1] = v2;
  *((_QWORD *)v2 + 3) = &unk_24D92D968;
  result = v2 + 24;
  *a1 = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::execute(uint64_t a1, turi::query_eval::query_context *this)
{
  int v3;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _QWORD **v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  v3 = *(_DWORD *)(a1 + 8);
  switch(v3)
  {
    case 98:
      goto LABEL_11;
    case 85:
      turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v31);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 16, &v31);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      turi::sframe_rows::resize(*(uint64_t ****)(a1 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) - **(_QWORD **)(a1 + 48)) >> 4, *(_QWORD *)this);
      *(_QWORD *)(a1 + 32) = 0;
      goto LABEL_45;
    case 0:
      v5 = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      while (v5 <= 1)
      {
        turi::query_eval::query_context::get_next((turi::query_eval::execution_node **)this, v5, &v31);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 48, &v31);
        v10 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
        if (*((_QWORD *)&v31 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        if (*(_QWORD *)(a1 + 48) && !*(_QWORD *)(a1 + 16))
        {
          turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v31);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 16, &v31);
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v14 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          turi::sframe_rows::resize(*(uint64_t ****)(a1 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) - **(_QWORD **)(a1 + 48)) >> 4, *(_QWORD *)this);
          *(_QWORD *)(a1 + 32) = 0;
        }
        while (1)
        {
          v19 = *(_QWORD ***)(a1 + 48);
          if (!v19)
            break;
          v20 = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = v19;
          *(_QWORD *)(a1 + 80) = 0;
          if (*v19 != v19[1])
          {
            v20 = 0;
            v21 = (_QWORD *)**v19;
            if (v21)
              v20 = (uint64_t)(*(_QWORD *)(**v19 + 8) - *v21) >> 4;
          }
          v22 = 0;
          v23 = 0;
          v24 = 0;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = v19;
          *(_QWORD *)(a1 + 104) = v20;
          while (v24 != v23 || v22 != v20)
          {
            v18 = (__int128 *)(a1 + 16);
            v28 = *(_QWORD *)(a1 + 16);
            v29 = *(_QWORD *)(a1 + 32);
            if (!*(_BYTE *)(v28 + 24))
              turi::sframe_rows::ensure_unique(*(turi::sframe_rows **)(a1 + 16));
            *(_QWORD *)&v31 = v28;
            *((_QWORD *)&v31 + 1) = v29;
            turi::sframe_rows::row::operator=((uint64_t **)&v31, (_QWORD *)(a1 + 72));
            v30 = *(_QWORD *)(a1 + 32) + 1;
            *(_QWORD *)(a1 + 32) = v30;
            if (v30 == *(_QWORD *)this)
            {
              v9 = 85;
              goto LABEL_47;
            }
LABEL_45:
            v23 = *(_QWORD *)(a1 + 88);
            v22 = *(_QWORD *)(a1 + 80) + 1;
            *(_QWORD *)(a1 + 80) = v22;
            v24 = *(_QWORD *)(a1 + 64);
            v20 = *(_QWORD *)(a1 + 104);
          }
          turi::query_eval::query_context::get_next((turi::query_eval::execution_node **)this, *(_QWORD *)(a1 + 40), &v31);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 48, &v31);
          v25 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v26 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
        }
        v5 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 40) = v5;
      }
      v16 = *(_QWORD *)(a1 + 32);
      if (v16)
      {
        v18 = (__int128 *)(a1 + 16);
        v17 = *(_QWORD *)(a1 + 16);
        if (v17)
        {
          turi::sframe_rows::resize((uint64_t ***)v17, (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 4, v16);
          v9 = 98;
LABEL_47:
          turi::query_eval::query_context::emit((uint64_t)this, v18);
          goto LABEL_48;
        }
      }
LABEL_11:
      v9 = 0;
LABEL_48:
      *(_DWORD *)(a1 + 8) = v9;
      break;
  }
}

uint64_t **turi::sframe_rows::row::operator=(uint64_t **a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  unint64_t *v42;
  unint64_t v43;
  void **v45[2];
  uint64_t v46;
  uint64_t v47;

  v2 = **a1;
  v3 = (*a1)[1];
  v47 = (v3 - v2) >> 4;
  v46 = (uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 4;
  if (v47 != v46)
  {
    v45[0] = (void **)&v47;
    v45[1] = (void **)&v46;
    turi::sframe_rows::row::operator=(turi::sframe_rows::row const&)::{lambda(void)#1}::operator()();
  }
  if (v3 != v2)
  {
    v6 = 0;
    do
    {
      v7 = **(_QWORD **)(*(_QWORD *)*a2 + 16 * v6) + 16 * a2[1];
      v8 = **(_QWORD **)(v2 + 16 * v6) + 16 * (_QWORD)a1[1];
      if (v7 != v8)
      {
        switch(*(_BYTE *)(v8 + 12))
        {
          case 2:
            v9 = *(unint64_t **)v8;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v12 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_47;
              if (*((char *)v12 + 31) < 0)
                operator delete((void *)v12[1]);
              v13 = v12;
              v14 = 0x1012C404EF22A49;
              goto LABEL_46;
            }
            break;
          case 3:
            v26 = *(unint64_t **)v8;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v29 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_47;
              v30 = (void *)v29[1];
              if (v30)
              {
                v29[2] = (unint64_t)v30;
                operator delete(v30);
              }
              v13 = v29;
              v14 = 0x1080C409938AC02;
              goto LABEL_46;
            }
            break;
          case 4:
            v15 = *(unint64_t **)v8;
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              v18 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_47;
              v45[0] = (void **)(v18 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v45);
              goto LABEL_39;
            }
            break;
          case 5:
            v31 = *(unint64_t **)v8;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              v18 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_47;
              v45[0] = (void **)(v18 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v45);
LABEL_39:
              v13 = v18;
              v14 = 0x1020C405E66F15BLL;
              goto LABEL_46;
            }
            break;
          case 8:
            v34 = *(unint64_t **)v8;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v37 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_47;
              boost::detail::shared_count::~shared_count((unsigned int **)v37 + 2);
              v13 = v37;
              v25 = -235920773;
              goto LABEL_45;
            }
            break;
          case 9:
            v19 = *(unint64_t **)v8;
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              v22 = *(unint64_t **)v8;
              if (*(_QWORD *)v8)
              {
                v23 = (void *)v22[6];
                if (v23)
                {
                  v22[7] = (unint64_t)v23;
                  operator delete(v23);
                }
                v24 = (void *)v22[3];
                if (v24)
                {
                  v22[4] = (unint64_t)v24;
                  operator delete(v24);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v22 + 1));
                v13 = v22;
                v25 = 2071181815;
LABEL_45:
                v14 = v25 | 0x1030C4000000000;
LABEL_46:
                MEMORY[0x219A19A08](v13, v14);
              }
LABEL_47:
              *(_QWORD *)v8 = 0;
            }
            break;
          default:
            break;
        }
        v38 = *(_QWORD *)v7;
        *(_QWORD *)(v8 + 5) = *(_QWORD *)(v7 + 5);
        *(_QWORD *)v8 = v38;
        LODWORD(v38) = *(unsigned __int8 *)(v7 + 12);
        *(_BYTE *)(v8 + 12) = v38;
        v39 = v38 > 9;
        v40 = (1 << v38) & 0x33C;
        if (!v39 && v40 != 0)
        {
          v42 = *(unint64_t **)v8;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
        }
      }
      ++v6;
      v2 = **a1;
    }
    while (v6 < ((*a1)[1] - v2) >> 4);
  }
  return a1;
}

void turi::sframe_rows::row::operator=(turi::sframe_rows::row const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.hpp", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"size()", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"other.size()", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.hpp", "operator()", 203, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe_rows::row::operator=(turi::sframe_rows::row const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CEAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  uint64_t **v25;
  _OWORD *v26;
  _QWORD *result;
  uint64_t v28;
  std::runtime_error *exception;
  std::string *v30;
  __int128 v31;
  void *v32[2];
  char v33;
  char v34;
  void *__p[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  std::string v39;
  size_t __idx;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = (_DWORD *)*a1;
  LODWORD(v41[0]) = *(_DWORD *)*a1;
  if (LODWORD(v41[0]) != 2)
  {
    __p[0] = v41;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v4 = *((_QWORD *)v3 + 8) - *((_QWORD *)v3 + 7);
  __p[0] = (void *)(v4 >> 4);
  if (v4 != 32)
  {
    v41[0] = __p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v3 + 2), (const void **)__p);
  if (SBYTE7(v36) < 0)
    operator delete(__p[0]);
  if (!v6)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
  v7 = (_DWORD *)*a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "function");
  v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v7 + 8), (const void **)__p);
  if (SBYTE7(v36) < 0)
    operator delete(__p[0]);
  if (!v8)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
  v42 = 0;
  v34 = 0;
  v10 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v32, "output_type");
  __p[0] = v32;
  v9 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v10 + 8), (const void **)v32, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  LOBYTE(v10) = 0;
  switch(*((_BYTE *)v9 + 68))
  {
    case 0:
      v10 = *((_QWORD *)v9 + 7);
      goto LABEL_37;
    case 1:
      v10 = (uint64_t)*((double *)v9 + 7);
      goto LABEL_37;
    case 2:
      v14 = *((_QWORD *)v9 + 7);
      __idx = 0;
      v15 = (char *)(v14 + 8);
      if (*(char *)(v14 + 31) < 0)
        v15 = *(char **)(v14 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v15);
      LOBYTE(v10) = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v36) < 0)
        operator delete(__p[0]);
      if (*(char *)(v14 + 31) < 0)
        v16 = *(_QWORD *)(v14 + 16);
      else
        v16 = *(unsigned __int8 *)(v14 + 31);
      if (__idx != v16)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v30 = std::string::append(&v39, " cannot be interpreted as an integer");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        *(_QWORD *)&v36 = *((_QWORD *)&v30->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_37;
    case 3:
      v11 = *((_QWORD *)v9 + 7);
      __p[1] = 0;
      *(_QWORD *)&v36 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_36;
    case 4:
      v17 = *((_QWORD *)v9 + 7);
      __p[1] = 0;
      *(_QWORD *)&v36 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
      goto LABEL_36;
    case 5:
      v18 = *((_QWORD *)v9 + 7);
      __p[1] = 0;
      *(_QWORD *)&v36 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
      goto LABEL_36;
    case 6:
      v10 = (uint64_t)(*((_QWORD *)v9 + 7) << 8) >> 8;
      goto LABEL_37;
    case 7:
      goto LABEL_37;
    case 8:
      v19 = *((_QWORD *)v9 + 7);
      v20 = *(unsigned int **)(v19 + 16);
      __p[0] = *(void **)(v19 + 8);
      __p[1] = v20;
      if (v20)
      {
        v21 = v20 + 2;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(_OWORD *)(v19 + 24);
      v24 = *(_OWORD *)(v19 + 56);
      v37 = *(_OWORD *)(v19 + 40);
      v38 = v24;
      v36 = v23;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_36;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v9 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v37 + 1))
      {
        *(_QWORD *)&v38 = *((_QWORD *)&v37 + 1);
        operator delete(*((void **)&v37 + 1));
      }
      if ((_QWORD)v36)
      {
        *((_QWORD *)&v36 + 1) = v36;
        operator delete((void *)v36);
      }
      v10 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_37;
      v12 = (unint64_t *)((char *)__p[1] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
      }
LABEL_36:
      LOBYTE(v10) = 0;
LABEL_37:
      if (v33 < 0)
        operator delete(v32[0]);
      v34 = v10;
      v25 = (uint64_t **)*a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "function");
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      v26 = std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25 + 4, (const void **)__p, (uint64_t)&std::piecewise_construct, &v39);
      std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator=(v41, *((_QWORD *)v26 + 7) + 8);
      if (SBYTE7(v36) < 0)
        operator delete(__p[0]);
      std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &,void>((uint64_t)v41, __p);
      *a2 = *(_OWORD *)__p;
      result = v42;
      if (v42 == v41)
      {
        v28 = 4;
        result = v41;
      }
      else
      {
        if (!v42)
          return result;
        v28 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v28))();
    default:
      result = (_QWORD *)turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
}

void sub_2180CF054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;

  if (a21 < 0)
    operator delete(__p);
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      if (a14 < 0)
        operator delete(a9);
      v37 = *(_QWORD **)(v35 - 64);
      if (v37 == (_QWORD *)(v35 - 88))
      {
        v38 = 4;
        v37 = (_QWORD *)(v35 - 88);
      }
      else
      {
        if (!v37)
          goto LABEL_15;
        v38 = 5;
      }
      (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_15:
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::BINARY_TRANSFORM_NODE", 45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 110, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CF348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CF558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 112, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CF6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"function\")", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 113, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180CF858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xC0uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::__shared_ptr_emplace[abi:ne180100]<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2180CF92C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::__shared_ptr_emplace[abi:ne180100]<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D92D9C8;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2180CF990(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92D9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a2 = &unk_24D92DA18;
  *(_DWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_QWORD *)(a2 + 128) = 0;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a2 + 136, a3);
}

void sub_2180CFA5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2 + 120);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2 + 32);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::~operator_impl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D92DA18;
  v2 = a1 + 17;
  v3 = (_QWORD *)a1[20];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 15));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::~operator_impl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D92DA18;
  v2 = a1 + 17;
  v3 = (_QWORD *)a1[20];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 15));
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
      JUMPOUT(0x219A19A08);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::type()
{
  return 2;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2> const&,void>(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v2;
  char ***v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char **v13;
  uint64_t **v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  void *v50;
  void *v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void **v96;
  __int128 v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 90 || v2 == 0)
  {
    turi::query_eval::query_context::get_next(this, 0, &v97);
    v6 = (char ***)(a1 + 16);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 16, &v97);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
    if (*((_QWORD *)&v97 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    turi::query_eval::query_context::get_next(this, 1uLL, &v97);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 32, &v97);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
    if (*((_QWORD *)&v97 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = *v6;
    v14 = *(uint64_t ***)(a1 + 32);
    if (*v6)
    {
      if (v14)
      {
        v15 = *v13;
        v16 = v13[1];
        if (v15 == v16 || !*(_QWORD *)v15)
          v17 = 0;
        else
          v17 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v15 + 8) - **(_QWORD **)v15) >> 4;
        v96 = (void **)v17;
        v19 = *v14;
        v18 = v14[1];
        if (v19 == v18)
        {
          v20 = 0;
        }
        else
        {
          v20 = *v19;
          if (*v19)
            v20 = (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 4;
        }
        v95 = v20;
        if (v17 != v20)
        {
          *(_QWORD *)&v97 = &v96;
          *((_QWORD *)&v97 + 1) = &v95;
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()();
        }
        v22 = v16 - v15;
        *(_QWORD *)&v97 = v22 >> 4;
        if (v22 != 16)
        {
          v96 = (void **)&v97;
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()();
        }
        *(_QWORD *)&v97 = ((char *)v18 - (char *)v19) >> 4;
        if ((char *)v18 - (char *)v19 != 16)
        {
          v96 = (void **)&v97;
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator()();
        }
        turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v97);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 120, &v97);
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
        if (*((_QWORD *)&v97 + 1))
        {
          v24 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = **v6;
        if (v26 == (*v6)[1] || (v27 = *(_QWORD **)v26) == 0)
          v28 = 0;
        else
          v28 = (uint64_t)(v27[1] - *v27) >> 4;
        turi::sframe_rows::resize(*(uint64_t ****)(a1 + 120), 1uLL, v28);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 88) = 0;
        v29 = *(_QWORD *)(a1 + 120);
        if (!*(_BYTE *)(v29 + 24))
          turi::sframe_rows::ensure_unique(*(turi::sframe_rows **)(a1 + 120));
        v30 = 0;
        *(_QWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 104) = v29;
        while (1)
        {
          *(_QWORD *)(a1 + 112) = v30;
          v31 = *(_QWORD *)(a1 + 16);
          if (*(_QWORD *)v31 == *(_QWORD *)(v31 + 8))
          {
            v32 = 0;
          }
          else
          {
            v32 = **(_QWORD **)v31;
            if (v32)
              v32 = (uint64_t)(*(_QWORD *)(v32 + 8) - *(_QWORD *)v32) >> 4;
          }
          if (!*(_QWORD *)(a1 + 48) && *(_QWORD *)(a1 + 64) == v32)
            break;
          v34 = *(_QWORD *)(a1 + 160);
          if (!v34)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(&v97, v34, a1 + 56, a1 + 80);
          v35 = ****(_QWORD ****)(a1 + 104) + 16 * *(_QWORD *)(a1 + 112);
          if (&v97 == (__int128 *)v35)
          {
            switch(BYTE12(v97))
            {
              case 2:
                v66 = (unint64_t *)v97;
                do
                {
                  v67 = __ldaxr(v66);
                  v68 = v67 - 1;
                }
                while (__stlxr(v68, v66));
                if (!v68)
                {
                  v69 = v97;
                  if ((_QWORD)v97)
                  {
                    if (*(char *)(v97 + 31) < 0)
                      operator delete(*(void **)(v97 + 8));
                    v70 = v69;
                    v71 = 0x1012C404EF22A49;
                    goto LABEL_139;
                  }
                }
                break;
              case 3:
                v83 = (unint64_t *)v97;
                do
                {
                  v84 = __ldaxr(v83);
                  v85 = v84 - 1;
                }
                while (__stlxr(v85, v83));
                if (!v85)
                {
                  v86 = v97;
                  if ((_QWORD)v97)
                  {
                    v87 = *(void **)(v97 + 8);
                    if (v87)
                    {
                      *(_QWORD *)(v97 + 16) = v87;
                      operator delete(v87);
                    }
                    v70 = v86;
                    v71 = 0x1080C409938AC02;
                    goto LABEL_139;
                  }
                }
                break;
              case 4:
                v72 = (unint64_t *)v97;
                do
                {
                  v73 = __ldaxr(v72);
                  v74 = v73 - 1;
                }
                while (__stlxr(v74, v72));
                if (!v74)
                {
                  v75 = v97;
                  if ((_QWORD)v97)
                  {
                    v96 = (void **)(v97 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v96);
                    goto LABEL_132;
                  }
                }
                break;
              case 5:
                v88 = (unint64_t *)v97;
                do
                {
                  v89 = __ldaxr(v88);
                  v90 = v89 - 1;
                }
                while (__stlxr(v90, v88));
                if (!v90)
                {
                  v75 = v97;
                  if ((_QWORD)v97)
                  {
                    v96 = (void **)(v97 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v96);
LABEL_132:
                    v70 = v75;
                    v71 = 0x1020C405E66F15BLL;
                    goto LABEL_139;
                  }
                }
                break;
              case 8:
                v91 = (unint64_t *)v97;
                do
                {
                  v92 = __ldaxr(v91);
                  v93 = v92 - 1;
                }
                while (__stlxr(v93, v91));
                if (!v93)
                {
                  v94 = v97;
                  if ((_QWORD)v97)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(v97 + 16));
                    v70 = v94;
                    v82 = -235920773;
                    goto LABEL_138;
                  }
                }
                break;
              case 9:
                v76 = (unint64_t *)v97;
                do
                {
                  v77 = __ldaxr(v76);
                  v78 = v77 - 1;
                }
                while (__stlxr(v78, v76));
                if (!v78)
                {
                  v79 = v97;
                  if ((_QWORD)v97)
                  {
                    v80 = *(void **)(v97 + 48);
                    if (v80)
                    {
                      *(_QWORD *)(v97 + 56) = v80;
                      operator delete(v80);
                    }
                    v81 = *(void **)(v79 + 24);
                    if (v81)
                    {
                      *(_QWORD *)(v79 + 32) = v81;
                      operator delete(v81);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v79 + 8);
                    v70 = v79;
                    v82 = 2071181815;
LABEL_138:
                    v71 = v82 | 0x1030C4000000000;
LABEL_139:
                    MEMORY[0x219A19A08](v70, v71);
                  }
                }
                break;
              default:
                break;
            }
          }
          else
          {
            switch(*(_BYTE *)(v35 + 12))
            {
              case 2:
                v36 = *(unint64_t **)v35;
                do
                {
                  v37 = __ldaxr(v36);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, v36));
                if (!v38)
                {
                  v39 = *(unint64_t **)v35;
                  if (!*(_QWORD *)v35)
                    goto LABEL_95;
                  if (*((char *)v39 + 31) < 0)
                    operator delete((void *)v39[1]);
                  v40 = v39;
                  v41 = 0x1012C404EF22A49;
                  goto LABEL_94;
                }
                break;
              case 3:
                v53 = *(unint64_t **)v35;
                do
                {
                  v54 = __ldaxr(v53);
                  v55 = v54 - 1;
                }
                while (__stlxr(v55, v53));
                if (!v55)
                {
                  v56 = *(unint64_t **)v35;
                  if (!*(_QWORD *)v35)
                    goto LABEL_95;
                  v57 = (void *)v56[1];
                  if (v57)
                  {
                    v56[2] = (unint64_t)v57;
                    operator delete(v57);
                  }
                  v40 = v56;
                  v41 = 0x1080C409938AC02;
                  goto LABEL_94;
                }
                break;
              case 4:
                v42 = *(unint64_t **)v35;
                do
                {
                  v43 = __ldaxr(v42);
                  v44 = v43 - 1;
                }
                while (__stlxr(v44, v42));
                if (!v44)
                {
                  v45 = *(unint64_t **)v35;
                  if (!*(_QWORD *)v35)
                    goto LABEL_95;
                  v96 = (void **)(v45 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v96);
                  goto LABEL_87;
                }
                break;
              case 5:
                v58 = *(unint64_t **)v35;
                do
                {
                  v59 = __ldaxr(v58);
                  v60 = v59 - 1;
                }
                while (__stlxr(v60, v58));
                if (!v60)
                {
                  v45 = *(unint64_t **)v35;
                  if (!*(_QWORD *)v35)
                    goto LABEL_95;
                  v96 = (void **)(v45 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v96);
LABEL_87:
                  v40 = v45;
                  v41 = 0x1020C405E66F15BLL;
                  goto LABEL_94;
                }
                break;
              case 8:
                v61 = *(unint64_t **)v35;
                do
                {
                  v62 = __ldaxr(v61);
                  v63 = v62 - 1;
                }
                while (__stlxr(v63, v61));
                if (!v63)
                {
                  v64 = *(unint64_t **)v35;
                  if (!*(_QWORD *)v35)
                    goto LABEL_95;
                  boost::detail::shared_count::~shared_count((unsigned int **)v64 + 2);
                  v40 = v64;
                  v52 = -235920773;
                  goto LABEL_93;
                }
                break;
              case 9:
                v46 = *(unint64_t **)v35;
                do
                {
                  v47 = __ldaxr(v46);
                  v48 = v47 - 1;
                }
                while (__stlxr(v48, v46));
                if (!v48)
                {
                  v49 = *(unint64_t **)v35;
                  if (*(_QWORD *)v35)
                  {
                    v50 = (void *)v49[6];
                    if (v50)
                    {
                      v49[7] = (unint64_t)v50;
                      operator delete(v50);
                    }
                    v51 = (void *)v49[3];
                    if (v51)
                    {
                      v49[4] = (unint64_t)v51;
                      operator delete(v51);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v49 + 1));
                    v40 = v49;
                    v52 = 2071181815;
LABEL_93:
                    v41 = v52 | 0x1030C4000000000;
LABEL_94:
                    MEMORY[0x219A19A08](v40, v41);
                  }
LABEL_95:
                  *(_QWORD *)v35 = 0;
                }
                break;
              default:
                break;
            }
            v65 = v97;
            *(_QWORD *)(v35 + 5) = *(_QWORD *)((char *)&v97 + 5);
            *(_QWORD *)v35 = v65;
            *(_BYTE *)(v35 + 12) = BYTE12(v97);
          }
          ++*(_QWORD *)(a1 + 64);
          ++*(_QWORD *)(a1 + 88);
          v30 = *(_QWORD *)(a1 + 112) + 1;
        }
        turi::query_eval::query_context::emit((uint64_t)this, (__int128 *)(a1 + 120));
        v21 = 90;
        goto LABEL_141;
      }
    }
    else if (!v14)
    {
      v21 = 0;
LABEL_141:
      *(_DWORD *)(a1 + 8) = v21;
      return;
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()();
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xC0uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2180D037C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24D92D9C8;
  a1[1] = 0;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::operator_impl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2180D03C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::operator_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)a1 = &unk_24D92DA18;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v9;
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 136, a2 + 136);
  return a1;
}

void sub_2180D04DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left != nullptr && rows_right != nullptr", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 72, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D05F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left->num_rows()", 21);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"rows_right->num_rows()", 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 73, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D080C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left->num_columns()", 24);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D0A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_right->num_columns()", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 75, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D0C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

char *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node@<X0>(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  char *v5;
  char *result;
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  LODWORD(v7) = **a1;
  if ((_DWORD)v7 != 3)
  {
    v8 = (uint64_t)&v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v4 = *((_QWORD *)v3 + 8) - *((_QWORD *)v3 + 7);
  v8 = v4 >> 4;
  if (v4 != 32)
  {
    v7 = &v8;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  v5 = (char *)operator new(0xC0uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &unk_24D92DA78;
  *((_DWORD *)v5 + 8) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  v5[184] = 0;
  a2[1] = v5;
  *((_QWORD *)v5 + 3) = &unk_24D92DAC8;
  result = v5 + 24;
  *a2 = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::LOGICAL_FILTER_NODE", 43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 142, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D0F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 143, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D1128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DA78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DA78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::~operator_impl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24D92DAC8;
  v2 = (uint64_t)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 15));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::~operator_impl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24D92DAC8;
  v2 = (uint64_t)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 15));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::type()
{
  return 3;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&,void>(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v3;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  turi::query_eval::execution_node *v16;
  _QWORD **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  _QWORD **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD ***v30;
  uint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  __int128 *v40;
  _BYTE *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;

  v3 = *(_DWORD *)(a1 + 8);
  switch(v3)
  {
    case 125:
LABEL_30:
      v21 = 0;
LABEL_85:
      *(_DWORD *)(a1 + 8) = v21;
      return;
    case 97:
      turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v49);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 120, &v49);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      turi::sframe_rows::resize(*(uint64_t ****)(a1 + 120), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
      *(_QWORD *)(a1 + 136) = 0;
LABEL_82:
      v28 = *(_QWORD *)(a1 + 64) + 1;
      *(_QWORD *)(a1 + 64) = v28;
      v27 = *(_QWORD *)(a1 + 88) + 1;
      *(_QWORD *)(a1 + 88) = v27;
      v17 = *(_QWORD ***)(a1 + 16);
      goto LABEL_43;
    case 0:
      turi::query_eval::query_context::get_next(this, 0, &v49);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 16, &v49);
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      turi::query_eval::query_context::get_next(this, 1uLL, &v49);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 32, &v49);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(a1 + 16))
      {
        if (v11)
        {
          turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v49);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 120, &v49);
          v12 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
          if (*((_QWORD *)&v49 + 1))
          {
            v13 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          *(_QWORD *)(a1 + 136) = 0;
          v15 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 4;
          *(_QWORD *)(a1 + 144) = v15;
          v16 = *this;
          *(_QWORD *)(a1 + 152) = *this;
          turi::sframe_rows::resize(*(uint64_t ****)(a1 + 120), v15, (unint64_t)v16);
          v17 = *(_QWORD ***)(a1 + 16);
          do
          {
            if (!v17 || (v22 = *(_QWORD ***)(a1 + 32)) == 0)
              turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()();
            v23 = 0;
            if (*v17 != v17[1])
            {
              v23 = 0;
              v24 = (_QWORD *)**v17;
              if (v24)
                v23 = (uint64_t)(*(_QWORD *)(**v17 + 8) - *v24) >> 4;
            }
            v25 = 0;
            v48 = v23;
            if (*v22 != v22[1])
            {
              v25 = 0;
              v26 = (_QWORD *)**v22;
              if (v26)
                v25 = (uint64_t)(*(_QWORD *)(**v22 + 8) - *v26) >> 4;
            }
            v47 = v25;
            if (v23 != v25)
            {
              *(_QWORD *)&v49 = &v48;
              *((_QWORD *)&v49 + 1) = &v47;
              turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()();
            }
            v27 = 0;
            v28 = 0;
            *(_QWORD *)(a1 + 48) = 0;
            *(_QWORD *)(a1 + 56) = v17;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 72) = 0;
            *(_QWORD *)(a1 + 80) = v22;
            *(_QWORD *)(a1 + 88) = 0;
LABEL_43:
            v29 = 0;
            v30 = (_QWORD ***)(a1 + 16);
            v31 = (uint64_t)*v17;
            if (*v17 != v17[1])
            {
              v29 = 0;
              if (*(_QWORD *)v31)
                v29 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v31 + 8) - **(_QWORD **)v31) >> 4;
            }
            if (*(_QWORD *)(a1 + 48) || v28 != v29)
            {
              v41 = (_BYTE *)(****(_QWORD ****)(a1 + 80) + 16 * v27);
              switch(v41[12])
              {
                case 0:
                  v43 = *(double *)v41;
                  goto LABEL_78;
                case 1:
                  if (*(double *)v41 != 0.0)
                    goto LABEL_79;
                  goto LABEL_82;
                case 2:
                  v42 = *(_QWORD *)v41;
                  if (*(char *)(v42 + 31) < 0)
                    v43 = *(double *)(v42 + 16);
                  else
                    *(_QWORD *)&v43 = *(unsigned __int8 *)(v42 + 31);
LABEL_78:
                  if (v43 != 0.0)
                    goto LABEL_79;
                  goto LABEL_82;
                case 3:
                case 4:
                case 5:
                  if (*(_QWORD *)(*(_QWORD *)v41 + 8) == *(_QWORD *)(*(_QWORD *)v41 + 16))
                    goto LABEL_82;
                  goto LABEL_79;
                case 7:
                  goto LABEL_82;
                case 8:
                  if (*(_QWORD *)(*(_QWORD *)v41 + 64) == 3)
                    goto LABEL_82;
LABEL_79:
                  v40 = (__int128 *)(a1 + 120);
                  v44 = *(_QWORD *)(a1 + 120);
                  v45 = *(_QWORD *)(a1 + 136);
                  if (!*(_BYTE *)(v44 + 24))
                    turi::sframe_rows::ensure_unique(*(turi::sframe_rows **)(a1 + 120));
                  *(_QWORD *)&v49 = v44;
                  *((_QWORD *)&v49 + 1) = v45;
                  turi::sframe_rows::row::operator=((uint64_t **)&v49, (_QWORD *)(a1 + 56));
                  v46 = *(_QWORD *)(a1 + 136) + 1;
                  *(_QWORD *)(a1 + 136) = v46;
                  if (v46 != *(_QWORD *)(a1 + 152))
                    goto LABEL_82;
                  v21 = 97;
                  break;
                default:
                  turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
              }
              goto LABEL_84;
            }
            *(_BYTE *)(a1 + 160) = 0;
            v32 = (_QWORD *)(a1 + 32);
            do
            {
              turi::query_eval::query_context::get_next(this, 1uLL, &v49);
              std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 32, &v49);
              v33 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
              if (*((_QWORD *)&v49 + 1))
              {
                v34 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
                do
                  v35 = __ldaxr(v34);
                while (__stlxr(v35 - 1, v34));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
              }
              if (*v32
                && turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::is_all_zero(a1, (_QWORD **)(a1 + 32)))
              {
                turi::query_eval::query_context::skip_next(this, 0);
              }
              else
              {
                *(_BYTE *)(a1 + 160) = 1;
                turi::query_eval::query_context::get_next(this, 0, &v49);
                std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 16, &v49);
                v36 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
                if (*((_QWORD *)&v49 + 1))
                {
                  v37 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
                  do
                    v38 = __ldaxr(v37);
                  while (__stlxr(v38 - 1, v37));
                  if (!v38)
                  {
                    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                    std::__shared_weak_count::__release_weak(v36);
                  }
                }
              }
            }
            while (!*(_BYTE *)(a1 + 160));
            v17 = *v30;
          }
          while (*v30 || *v32);
          v39 = *(_QWORD *)(a1 + 136);
          if (!v39)
            goto LABEL_30;
          v40 = (__int128 *)(a1 + 120);
          turi::sframe_rows::resize(*(uint64_t ****)(a1 + 120), *(_QWORD *)(a1 + 144), v39);
          v21 = 125;
LABEL_84:
          turi::query_eval::query_context::emit((uint64_t)this, v40);
          goto LABEL_85;
        }
      }
      else if (!v11)
      {
        return;
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()();
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xC0uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2180D1858(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D92DA78;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2180D18B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

__n128 std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;

  *(_QWORD *)a2 = &unk_24D92DAC8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  v3 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 24) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  v9 = *(_QWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a2 + 120) = v9;
  v10 = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a2 + 128) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  result = *(__n128 *)(a3 + 136);
  *(_OWORD *)(a2 + 145) = *(_OWORD *)(a3 + 145);
  *(__n128 *)(a2 + 136) = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left != nullptr && rows_right != nullptr", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 75, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D1A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left != nullptr && rows_right != nullptr", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 86, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D1C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left->num_rows()", 21);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"rows_right->num_rows()", 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 87, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D1E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::is_all_zero(uint64_t a1, _QWORD **a2)
{
  _BYTE ***v2;
  _BYTE **v3;
  _BYTE *v4;
  _BYTE **v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  v2 = (_BYTE ***)**a2;
  if (v2 == (_BYTE ***)(*a2)[1])
    return 1;
  v3 = *v2;
  if (!v3)
    return 1;
  v5 = v3;
  v4 = *v3;
  v6 = v5[1] - v4;
  if (!v6)
    return 1;
  v7 = v6 >> 4;
  while (2)
  {
    switch(v4[12])
    {
      case 0:
        v8 = *(double *)v4;
        goto LABEL_16;
      case 1:
        if (*(double *)v4 != 0.0)
          return 0;
        goto LABEL_17;
      case 2:
        if (*(char *)(*(_QWORD *)v4 + 31) < 0)
          v8 = *(double *)(*(_QWORD *)v4 + 16);
        else
          *(_QWORD *)&v8 = *(unsigned __int8 *)(*(_QWORD *)v4 + 31);
LABEL_16:
        if (v8 == 0.0)
          goto LABEL_17;
        return 0;
      case 3:
      case 4:
      case 5:
        if (*(_QWORD *)(*(_QWORD *)v4 + 8) != *(_QWORD *)(*(_QWORD *)v4 + 16))
          return 0;
        goto LABEL_17;
      case 7:
        goto LABEL_17;
      case 8:
        if (*(_QWORD *)(*(_QWORD *)v4 + 64) == 3)
        {
LABEL_17:
          v4 += 16;
          if (!--v7)
            return 1;
          continue;
        }
        return 0;
      default:
        turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
    }
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(_DWORD **a1@<X0>, _OWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  void *p_p;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v14;
  uint64_t v15;

  v3 = *a1;
  LODWORD(p_p) = **a1;
  if ((_DWORD)p_p != 4)
  {
    __p = &p_p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v5 = (uint64_t)(v3 + 2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)&__p);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  if (!v6)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  v7 = (uint64_t)(*a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(&p_p, "indices");
  v8 = *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(v7, (const void **)&p_p);
  v14 = 0;
  v15 = 0;
  __p = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v8 + 8), *(uint64_t **)(v8 + 16), (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 4);
  if (SHIBYTE(v12) < 0)
    operator delete(p_p);
  v11 = 0;
  v12 = 0;
  p_p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>(&p_p, __p, v14, (v14 - (_BYTE *)__p) >> 4);
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,std::vector<unsigned long> &,void>((uint64_t)&p_p, &v9);
  *a2 = v9;
  if (p_p)
  {
    v11 = p_p;
    operator delete(p_p);
  }
  p_p = &__p;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
}

void sub_2180D20D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, void **a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a18;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&__p);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::PROJECT_NODE", 36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 106, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D22B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"indices\")", 43);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 107, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D2438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>(_QWORD *a1, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a4);
    std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>((uint64_t)a1, a2, a3);
  }
}

void sub_2180D2510(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v5;
  uint64_t *v6;

  if (a2 == a3)
  {
    v6 = *(uint64_t **)(a1 + 8);
  }
  else
  {
    v5 = a2;
    v6 = *(uint64_t **)(a1 + 8);
    do
    {
      std::allocator<unsigned long>::construct[abi:ne180100]<unsigned long,turi::flexible_type &>(a1 + 16, v6, v5);
      v5 += 16;
      ++v6;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(a1 + 8) = v6;
}

void sub_2180D25A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::allocator<unsigned long>::construct[abi:ne180100]<unsigned long,turi::flexible_type &>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  std::runtime_error *exception;
  std::string *v21;
  __int128 v22;
  void *__p[2];
  void *v24[2];
  __int128 v25;
  __int128 v26;
  std::string v27;
  size_t __idx;

  v4 = 0;
  switch(a3[12])
  {
    case 0:
      v4 = *(_QWORD *)a3;
      goto LABEL_29;
    case 1:
      v4 = (uint64_t)*(double *)a3;
      goto LABEL_29;
    case 2:
      v8 = *(_QWORD *)a3;
      v9 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v10 = (char *)v9;
      if (*(char *)(v8 + 31) < 0)
        v10 = *v9;
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v24[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v8 + 31) < 0)
        v11 = *(_QWORD *)(v8 + 16);
      else
        v11 = *(unsigned __int8 *)(v8 + 31);
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v21 = std::string::append(&v27, " cannot be interpreted as an integer");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v24[0] = (void *)v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v5 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(_QWORD *)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v12 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
      goto LABEL_28;
    case 5:
      v13 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
      goto LABEL_28;
    case 6:
      v4 = (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v14 = *(_QWORD *)a3;
      v15 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v15;
      if (v15)
      {
        v16 = v15 + 2;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(_OWORD *)(v14 + 24);
      v19 = *(_OWORD *)(v14 + 56);
      v25 = *(_OWORD *)(v14 + 40);
      v26 = v19;
      *(_OWORD *)v24 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v25 + 1))
      {
        *(_QWORD *)&v26 = *((_QWORD *)&v25 + 1);
        operator delete(*((void **)&v25 + 1));
      }
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      v4 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_29;
      v6 = (unint64_t *)((char *)__p[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
LABEL_28:
      v4 = 0;
LABEL_29:
      *a2 = v4;
      return;
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_2180D2880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    if ((v15 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,std::vector<unsigned long> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned long> &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2180D2998(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned long> &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D92DB28;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::vector<unsigned long> &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2180D29F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DB28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::vector<unsigned long> &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *result;

  *(_QWORD *)a2 = &unk_24D92DB78;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a2 + 16), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  if (*(_QWORD *)(a2 + 24) == *v4)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::operator_impl(std::vector<unsigned long> const&)::{lambda(void)#1}::operator()();
  return result;
}

void sub_2180D2AF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::operator_impl(std::vector<unsigned long> const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_indices.size()", 16);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 45, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::operator_impl(std::vector<unsigned long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D2C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::~operator_impl(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24D92DB78;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::~operator_impl(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24D92DB78;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x219A19A08);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::type()
{
  return 4;
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::print@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  uint64_t v14;
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  _QWORD v21[13];
  char v22;
  uint64_t v23;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
  v4 = *(_QWORD *)(a1 + 16);
  for (i = *(_QWORD *)(a1 + 24); v4 != i; v4 += 8)
  {
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "project");
  v7 = std::string::append(&v18, "(");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str();
  if ((v17 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v10 = v17;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v19, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v20, ")");
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v21[0] = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v21[2] = v14;
  v21[3] = MEMORY[0x24BEDB848] + 16;
  if (v22 < 0)
    operator delete((void *)v21[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v23);
}

void sub_2180D2F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4> const&,void>(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v2;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 79 || v2 == 0)
  {
    v6.n128_f64[0] = turi::query_eval::query_context::get_next(this, 0, &v22);
    v7 = v22;
    if ((_QWORD)v22)
    {
      turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v21);
      v8 = (_QWORD *)v22;
      v9 = v21;
      if (!*(_BYTE *)(v21 + 24))
        turi::sframe_rows::ensure_unique((turi::sframe_rows *)v21);
      v11 = *(char **)v9;
      for (i = *(_QWORD *)(v9 + 8);
            (char *)i != v11;
      *(_QWORD *)(v9 + 8) = v11;
      v12 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(a1 + 24) != v12)
      {
        v13 = 0;
        do
        {
          std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)v9, (__int128 *)(*v8 + 16 * *(_QWORD *)(v12 + 8 * v13++)));
          v12 = *(_QWORD *)(a1 + 16);
        }
        while (v13 < (*(_QWORD *)(a1 + 24) - v12) >> 3);
      }
      turi::query_eval::query_context::emit((uint64_t)this, &v21);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v6);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v7)
      v20 = 79;
    else
      v20 = 0;
    *(_DWORD *)(a1 + 8) = v20;
  }
}

void sub_2180D3198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x40uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_2180D3204(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,0>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_24D92DB28;
  *(_QWORD *)(a1 + 24) = &unk_24D92DB78;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 40), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return a1;
}

void sub_2180D3284(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node@<D0>(_DWORD **a1@<X0>, _OWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  uint64_t **v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  uint64_t **v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  double result;
  std::runtime_error *exception;
  std::string *v64;
  __int128 v65;
  std::runtime_error *v66;
  std::string *v67;
  __int128 v68;
  std::runtime_error *v69;
  std::string *v70;
  __int128 v71;
  void *v72[2];
  char v73;
  void *__p[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  std::string v78;
  size_t __idx;

  v3 = *a1;
  LODWORD(v78.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v78.__r_.__value_.__l.__data_) != 5)
  {
LABEL_112:
    __p[0] = &v78;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v5 = (uint64_t)(v3 + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "start");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
  if (SBYTE7(v75) < 0)
    operator delete(__p[0]);
  if (!v6)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  v7 = (uint64_t)(*a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
  v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v7, (const void **)__p);
  if (SBYTE7(v75) < 0)
    operator delete(__p[0]);
  if (!v8)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
  v9 = (uint64_t)(*a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
  v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v9, (const void **)__p);
  if (SBYTE7(v75) < 0)
    operator delete(__p[0]);
  if (!v10)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
  v11 = (uint64_t **)(*a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(v72, "start");
  __p[0] = v72;
  v12 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11, (const void **)v72, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  v13 = 0;
  switch(*((_BYTE *)v12 + 68))
  {
    case 0:
      v13 = *((_QWORD *)v12 + 7);
      goto LABEL_39;
    case 1:
      v13 = (uint64_t)*((double *)v12 + 7);
      goto LABEL_39;
    case 2:
      v17 = *((_QWORD *)v12 + 7);
      __idx = 0;
      v18 = (char *)(v17 + 8);
      if (*(char *)(v17 + 31) < 0)
        v18 = *(char **)(v17 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v18);
      v13 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v75) < 0)
        operator delete(__p[0]);
      if (*(char *)(v17 + 31) < 0)
        v19 = *(_QWORD *)(v17 + 16);
      else
        v19 = *(unsigned __int8 *)(v17 + 31);
      if (__idx != v19)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v64 = std::string::append(&v78, " cannot be interpreted as an integer");
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        *(_QWORD *)&v75 = *((_QWORD *)&v64->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_39;
    case 3:
      v14 = *((_QWORD *)v12 + 7);
      __p[1] = 0;
      *(_QWORD *)&v75 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v14 + 8), *(_QWORD *)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_38;
    case 4:
      v20 = *((_QWORD *)v12 + 7);
      __p[1] = 0;
      *(_QWORD *)&v75 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      goto LABEL_38;
    case 5:
      v21 = *((_QWORD *)v12 + 7);
      __p[1] = 0;
      *(_QWORD *)&v75 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v21 + 8), *(uint64_t **)(v21 + 16), (uint64_t)(*(_QWORD *)(v21 + 16) - *(_QWORD *)(v21 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      goto LABEL_38;
    case 6:
      v13 = (uint64_t)(*((_QWORD *)v12 + 7) << 8) >> 8;
      goto LABEL_39;
    case 7:
      goto LABEL_39;
    case 8:
      v22 = *((_QWORD *)v12 + 7);
      v23 = *(unsigned int **)(v22 + 16);
      __p[0] = *(void **)(v22 + 8);
      __p[1] = v23;
      if (v23)
      {
        v24 = v23 + 2;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = *(_OWORD *)(v22 + 24);
      v27 = *(_OWORD *)(v22 + 56);
      v76 = *(_OWORD *)(v22 + 40);
      v77 = v27;
      v75 = v26;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_38;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v12 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v76 + 1))
      {
        *(_QWORD *)&v77 = *((_QWORD *)&v76 + 1);
        operator delete(*((void **)&v76 + 1));
      }
      if ((_QWORD)v75)
      {
        *((_QWORD *)&v75 + 1) = v75;
        operator delete((void *)v75);
      }
      v13 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_39;
      v15 = (unint64_t *)((char *)__p[1] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
      }
LABEL_38:
      v13 = 0;
LABEL_39:
      if (v73 < 0)
        operator delete(v72[0]);
      v28 = (uint64_t **)(*a1 + 2);
      std::string::basic_string[abi:ne180100]<0>(v72, "begin_index");
      __p[0] = v72;
      v29 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28, (const void **)v72, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      v30 = 0;
      switch(*((_BYTE *)v29 + 68))
      {
        case 0:
          v30 = *((_QWORD *)v29 + 7);
          goto LABEL_69;
        case 1:
          v30 = (uint64_t)*((double *)v29 + 7);
          goto LABEL_69;
        case 2:
          v34 = *((_QWORD *)v29 + 7);
          __idx = 0;
          v35 = (char *)(v34 + 8);
          if (*(char *)(v34 + 31) < 0)
            v35 = *(char **)(v34 + 8);
          std::string::basic_string[abi:ne180100]<0>(__p, v35);
          v30 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SBYTE7(v75) < 0)
            operator delete(__p[0]);
          if (*(char *)(v34 + 31) < 0)
            v36 = *(_QWORD *)(v34 + 16);
          else
            v36 = *(unsigned __int8 *)(v34 + 31);
          if (__idx != v36)
          {
            v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v67 = std::string::append(&v78, " cannot be interpreted as an integer");
            v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            *(_QWORD *)&v75 = *((_QWORD *)&v67->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v66, (const std::string *)__p);
            __cxa_throw(v66, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_69;
        case 3:
          v31 = *((_QWORD *)v29 + 7);
          __p[1] = 0;
          *(_QWORD *)&v75 = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v31 + 8), *(_QWORD *)(v31 + 16), (uint64_t)(*(_QWORD *)(v31 + 16) - *(_QWORD *)(v31 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_68;
        case 4:
          v37 = *((_QWORD *)v29 + 7);
          __p[1] = 0;
          *(_QWORD *)&v75 = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v37 + 8), *(uint64_t **)(v37 + 16), (uint64_t)(*(_QWORD *)(v37 + 16) - *(_QWORD *)(v37 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
          goto LABEL_68;
        case 5:
          v38 = *((_QWORD *)v29 + 7);
          __p[1] = 0;
          *(_QWORD *)&v75 = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v38 + 8), *(uint64_t **)(v38 + 16), (uint64_t)(*(_QWORD *)(v38 + 16) - *(_QWORD *)(v38 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
          goto LABEL_68;
        case 6:
          v30 = (uint64_t)(*((_QWORD *)v29 + 7) << 8) >> 8;
          goto LABEL_69;
        case 7:
          goto LABEL_69;
        case 8:
          v39 = *((_QWORD *)v29 + 7);
          v40 = *(unsigned int **)(v39 + 16);
          __p[0] = *(void **)(v39 + 8);
          __p[1] = v40;
          if (v40)
          {
            v41 = v40 + 2;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          v43 = *(_OWORD *)(v39 + 24);
          v44 = *(_OWORD *)(v39 + 56);
          v76 = *(_OWORD *)(v39 + 40);
          v77 = v44;
          v75 = v43;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          goto LABEL_68;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v29 + 7) + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v76 + 1))
          {
            *(_QWORD *)&v77 = *((_QWORD *)&v76 + 1);
            operator delete(*((void **)&v76 + 1));
          }
          if ((_QWORD)v75)
          {
            *((_QWORD *)&v75 + 1) = v75;
            operator delete((void *)v75);
          }
          v30 = (uint64_t)__p[1];
          if (!__p[1])
            goto LABEL_69;
          v32 = (unint64_t *)((char *)__p[1] + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v30);
          }
LABEL_68:
          v30 = 0;
LABEL_69:
          if (v73 < 0)
            operator delete(v72[0]);
          v45 = (uint64_t **)(*a1 + 2);
          std::string::basic_string[abi:ne180100]<0>(v72, "end_index");
          __p[0] = v72;
          v46 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v45, (const void **)v72, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
          v47 = 0;
          switch(*((_BYTE *)v46 + 68))
          {
            case 0:
              v47 = *((_QWORD *)v46 + 7);
              goto LABEL_99;
            case 1:
              v47 = (uint64_t)*((double *)v46 + 7);
              goto LABEL_99;
            case 2:
              v51 = *((_QWORD *)v46 + 7);
              __idx = 0;
              v52 = (char *)(v51 + 8);
              if (*(char *)(v51 + 31) < 0)
                v52 = *(char **)(v51 + 8);
              std::string::basic_string[abi:ne180100]<0>(__p, v52);
              v47 = std::stoll((const std::string *)__p, &__idx, 10);
              if (SBYTE7(v75) < 0)
                operator delete(__p[0]);
              if (*(char *)(v51 + 31) < 0)
                v53 = *(_QWORD *)(v51 + 16);
              else
                v53 = *(unsigned __int8 *)(v51 + 31);
              if (__idx != v53)
              {
                v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v70 = std::string::append(&v78, " cannot be interpreted as an integer");
                v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
                *(_QWORD *)&v75 = *((_QWORD *)&v70->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v71;
                v70->__r_.__value_.__l.__size_ = 0;
                v70->__r_.__value_.__r.__words[2] = 0;
                v70->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v69, (const std::string *)__p);
                __cxa_throw(v69, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_99;
            case 3:
              v48 = *((_QWORD *)v46 + 7);
              __p[1] = 0;
              *(_QWORD *)&v75 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v48 + 8), *(_QWORD *)(v48 + 16), (uint64_t)(*(_QWORD *)(v48 + 16) - *(_QWORD *)(v48 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_98;
            case 4:
              v54 = *((_QWORD *)v46 + 7);
              __p[1] = 0;
              *(_QWORD *)&v75 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v54 + 8), *(uint64_t **)(v54 + 16), (uint64_t)(*(_QWORD *)(v54 + 16) - *(_QWORD *)(v54 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
              goto LABEL_98;
            case 5:
              v55 = *((_QWORD *)v46 + 7);
              __p[1] = 0;
              *(_QWORD *)&v75 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v55 + 8), *(uint64_t **)(v55 + 16), (uint64_t)(*(_QWORD *)(v55 + 16) - *(_QWORD *)(v55 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
              goto LABEL_98;
            case 6:
              v47 = (uint64_t)(*((_QWORD *)v46 + 7) << 8) >> 8;
              goto LABEL_99;
            case 7:
              goto LABEL_99;
            case 8:
              v56 = *((_QWORD *)v46 + 7);
              v57 = *(unsigned int **)(v56 + 16);
              __p[0] = *(void **)(v56 + 8);
              __p[1] = v57;
              if (v57)
              {
                v58 = v57 + 2;
                do
                  v59 = __ldxr(v58);
                while (__stxr(v59 + 1, v58));
              }
              v60 = *(_OWORD *)(v56 + 24);
              v61 = *(_OWORD *)(v56 + 56);
              v76 = *(_OWORD *)(v56 + 40);
              v77 = v61;
              v75 = v60;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              goto LABEL_98;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v46 + 7) + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v76 + 1))
              {
                *(_QWORD *)&v77 = *((_QWORD *)&v76 + 1);
                operator delete(*((void **)&v76 + 1));
              }
              if ((_QWORD)v75)
              {
                *((_QWORD *)&v75 + 1) = v75;
                operator delete((void *)v75);
              }
              v47 = (uint64_t)__p[1];
              if (!__p[1])
                goto LABEL_99;
              v49 = (unint64_t *)((char *)__p[1] + 8);
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v47);
              }
LABEL_98:
              v47 = 0;
LABEL_99:
              if (v73 < 0)
                operator delete(v72[0]);
              v78.__r_.__value_.__r.__words[0] = v30 + v13;
              v72[0] = (void *)(v47 + v13);
              std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,unsigned long long,unsigned long long,void>((uint64_t *)&v78, (uint64_t *)v72, __p);
              result = *(double *)__p;
              *a2 = *(_OWORD *)__p;
              return result;
            default:
              goto LABEL_111;
          }
        default:
          goto LABEL_111;
      }
    default:
LABEL_111:
      turi::flexible_type_fail(0);
      __break(1u);
      goto LABEL_112;
  }
}

void sub_2180D3CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 57) < 0)
  {
    operator delete(*(void **)(v23 - 80));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0)
        operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::RANGE_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 88, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D3FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"start\")", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 89, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D4164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"begin_index\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 90, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D42E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"end_index\")", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 91, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D4464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,unsigned long long,unsigned long long,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,unsigned long long,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2180D4538(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,unsigned long long,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24D92DBD8;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,unsigned long long,unsigned long long>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_2180D459C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DBD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DBD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,unsigned long long,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a3;
  v5 = *a4;
  *(_QWORD *)a2 = &unk_24D92DC28;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v5;
  if (v4 > v5)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::operator_impl(long long,long long)::{lambda(void)#1}::operator()();
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::operator_impl(long long,long long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_start", 7);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_end", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 46, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::operator_impl(long long,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D47F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::~operator_impl()
{
  JUMPOUT(0x219A19A08);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::type()
{
  return 5;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,long long const&,long long const&,void>((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::execute(uint64_t a1, turi::query_eval::query_context *this)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t ***v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  __int128 v44;
  void **v45;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    if (v4 != 73)
      return;
    v5 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v5;
  }
  if (v5 >= *(_QWORD *)(a1 + 32))
  {
    v43 = 0;
  }
  else
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v44);
    if (*(_QWORD *)this >= *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 16))
      v6 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 16);
    else
      v6 = *(_QWORD *)this;
    turi::sframe_rows::resize((uint64_t ***)v44, 1uLL, v6);
    v7 = (uint64_t ***)v44;
    if (!*(_BYTE *)(v44 + 24))
      turi::sframe_rows::ensure_unique((turi::sframe_rows *)v44);
    v8 = **v7;
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      do
      {
        switch(*(_BYTE *)(v9 + 12))
        {
          case 2:
            v11 = *(unint64_t **)v9;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v14 = *(unint64_t **)v9;
              if (!*(_QWORD *)v9)
                goto LABEL_54;
              if (*((char *)v14 + 31) < 0)
                operator delete((void *)v14[1]);
              v15 = v14;
              v16 = 0x1012C404EF22A49;
              goto LABEL_53;
            }
            break;
          case 3:
            v28 = *(unint64_t **)v9;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              v31 = *(unint64_t **)v9;
              if (!*(_QWORD *)v9)
                goto LABEL_54;
              v32 = (void *)v31[1];
              if (v32)
              {
                v31[2] = (unint64_t)v32;
                operator delete(v32);
              }
              v15 = v31;
              v16 = 0x1080C409938AC02;
              goto LABEL_53;
            }
            break;
          case 4:
            v17 = *(unint64_t **)v9;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              v20 = *(unint64_t **)v9;
              if (!*(_QWORD *)v9)
                goto LABEL_54;
              v45 = (void **)(v20 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v45);
              goto LABEL_46;
            }
            break;
          case 5:
            v33 = *(unint64_t **)v9;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              v20 = *(unint64_t **)v9;
              if (!*(_QWORD *)v9)
                goto LABEL_54;
              v45 = (void **)(v20 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v45);
LABEL_46:
              v15 = v20;
              v16 = 0x1020C405E66F15BLL;
              goto LABEL_53;
            }
            break;
          case 8:
            v36 = *(unint64_t **)v9;
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              v39 = *(unint64_t **)v9;
              if (!*(_QWORD *)v9)
                goto LABEL_54;
              boost::detail::shared_count::~shared_count((unsigned int **)v39 + 2);
              v15 = v39;
              v27 = -235920773;
              goto LABEL_52;
            }
            break;
          case 9:
            v21 = *(unint64_t **)v9;
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              v24 = *(unint64_t **)v9;
              if (*(_QWORD *)v9)
              {
                v25 = (void *)v24[6];
                if (v25)
                {
                  v24[7] = (unint64_t)v25;
                  operator delete(v25);
                }
                v26 = (void *)v24[3];
                if (v26)
                {
                  v24[4] = (unint64_t)v26;
                  operator delete(v26);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v24 + 1));
                v15 = v24;
                v27 = 2071181815;
LABEL_52:
                v16 = v27 | 0x1030C4000000000;
LABEL_53:
                MEMORY[0x219A19A08](v15, v16);
              }
LABEL_54:
              *(_QWORD *)v9 = 0;
            }
            break;
          default:
            break;
        }
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        *(_BYTE *)(v9 + 12) = 0;
        *(_QWORD *)v9 = *(_QWORD *)(a1 + 16);
        v9 += 16;
        ++*(_QWORD *)(a1 + 16);
      }
      while (v9 != v10);
    }
    turi::query_eval::query_context::emit((uint64_t)this, &v44);
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = 73;
  }
  *(_DWORD *)(a1 + 8) = v43;
}

void sub_2180D4BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,long long const&,long long const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,unsigned long long,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2180D4C44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(_DWORD **a1@<X0>, _OWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _DWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  _DWORD *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char **v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  __int128 v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::runtime_error *exception;
  std::string *v53;
  __int128 v54;
  std::runtime_error *v55;
  std::string *v56;
  __int128 v57;
  uint64_t v58;
  void *v59[2];
  char v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void *__p[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  std::string v68;
  size_t __idx;

  v3 = *a1;
  LODWORD(v68.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v68.__r_.__value_.__l.__data_) != 6)
  {
LABEL_83:
    __p[0] = &v68;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v5 = (uint64_t)(v3 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "sarray");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
  if (SBYTE7(v65) < 0)
    operator delete(__p[0]);
  if (!v6)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  v7 = (uint64_t **)(*a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "sarray");
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v8 = *((_QWORD *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7, (const void **)__p, (uint64_t)&std::piecewise_construct, &v68)+ 7);
  v10 = *(_QWORD *)(v8 + 8);
  v9 = *(std::__shared_weak_count **)(v8 + 16);
  v62 = v10;
  v63 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (SBYTE7(v65) < 0)
    operator delete(__p[0]);
  v61 = 0;
  v13 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v59, "begin_index");
  v14 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v13 + 2), (const void **)v59);
  v15 = 0;
  switch(v14[12])
  {
    case 0:
      v15 = *(_QWORD *)v14;
      goto LABEL_38;
    case 1:
      v15 = (uint64_t)*(double *)v14;
      goto LABEL_38;
    case 2:
      v19 = *(_QWORD *)v14;
      v20 = (char **)(*(_QWORD *)v14 + 8);
      __idx = 0;
      v21 = (char *)v20;
      if (*(char *)(v19 + 31) < 0)
        v21 = *v20;
      std::string::basic_string[abi:ne180100]<0>(__p, v21);
      v15 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v65) < 0)
        operator delete(__p[0]);
      if (*(char *)(v19 + 31) < 0)
        v22 = *(_QWORD *)(v19 + 16);
      else
        v22 = *(unsigned __int8 *)(v19 + 31);
      if (__idx != v22)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v53 = std::string::append(&v68, " cannot be interpreted as an integer");
        v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        *(_QWORD *)&v65 = *((_QWORD *)&v53->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_38;
    case 3:
      v16 = *(_QWORD *)v14;
      __p[1] = 0;
      *(_QWORD *)&v65 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v16 + 8), *(_QWORD *)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_37;
    case 4:
      v23 = *(_QWORD *)v14;
      __p[1] = 0;
      *(_QWORD *)&v65 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v23 + 8), *(uint64_t **)(v23 + 16), (uint64_t)(*(_QWORD *)(v23 + 16) - *(_QWORD *)(v23 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
      goto LABEL_37;
    case 5:
      v24 = *(_QWORD *)v14;
      __p[1] = 0;
      *(_QWORD *)&v65 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v24 + 8), *(uint64_t **)(v24 + 16), (uint64_t)(*(_QWORD *)(v24 + 16) - *(_QWORD *)(v24 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
      goto LABEL_37;
    case 6:
      v15 = (uint64_t)(*(_QWORD *)v14 << 8) >> 8;
      goto LABEL_38;
    case 7:
      goto LABEL_38;
    case 8:
      v25 = *(_QWORD *)v14;
      v26 = *(unsigned int **)(*(_QWORD *)v14 + 16);
      __p[0] = *(void **)(*(_QWORD *)v14 + 8);
      __p[1] = v26;
      if (v26)
      {
        v27 = v26 + 2;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = *(_OWORD *)(v25 + 24);
      v30 = *(_OWORD *)(v25 + 56);
      v66 = *(_OWORD *)(v25 + 40);
      v67 = v30;
      v65 = v29;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_37;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v14 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v66 + 1))
      {
        *(_QWORD *)&v67 = *((_QWORD *)&v66 + 1);
        operator delete(*((void **)&v66 + 1));
      }
      if ((_QWORD)v65)
      {
        *((_QWORD *)&v65 + 1) = v65;
        operator delete((void *)v65);
      }
      v15 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_38;
      v17 = (unint64_t *)((char *)__p[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
      }
LABEL_37:
      v15 = 0;
LABEL_38:
      if (v60 < 0)
        operator delete(v59[0]);
      v61 = v15;
      v58 = 0;
      v31 = *a1;
      std::string::basic_string[abi:ne180100]<0>(v59, "end_index");
      v32 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v31 + 2), (const void **)v59);
      v33 = 0;
      switch(v32[12])
      {
        case 0:
          v33 = *(_QWORD *)v32;
          goto LABEL_68;
        case 1:
          v33 = (uint64_t)*(double *)v32;
          goto LABEL_68;
        case 2:
          v37 = *(_QWORD *)v32;
          v38 = (char **)(*(_QWORD *)v32 + 8);
          __idx = 0;
          v39 = (char *)v38;
          if (*(char *)(v37 + 31) < 0)
            v39 = *v38;
          std::string::basic_string[abi:ne180100]<0>(__p, v39);
          v33 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SBYTE7(v65) < 0)
            operator delete(__p[0]);
          if (*(char *)(v37 + 31) < 0)
            v40 = *(_QWORD *)(v37 + 16);
          else
            v40 = *(unsigned __int8 *)(v37 + 31);
          if (__idx != v40)
          {
            v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v56 = std::string::append(&v68, " cannot be interpreted as an integer");
            v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            *(_QWORD *)&v65 = *((_QWORD *)&v56->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v55, (const std::string *)__p);
            __cxa_throw(v55, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_68;
        case 3:
          v34 = *(_QWORD *)v32;
          __p[1] = 0;
          *(_QWORD *)&v65 = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v34 + 8), *(_QWORD *)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_67;
        case 4:
          v41 = *(_QWORD *)v32;
          __p[1] = 0;
          *(_QWORD *)&v65 = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v41 + 8), *(uint64_t **)(v41 + 16), (uint64_t)(*(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v68.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
          goto LABEL_67;
        case 5:
          v42 = *(_QWORD *)v32;
          __p[1] = 0;
          *(_QWORD *)&v65 = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v42 + 8), *(uint64_t **)(v42 + 16), (uint64_t)(*(_QWORD *)(v42 + 16) - *(_QWORD *)(v42 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v68.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
          goto LABEL_67;
        case 6:
          v33 = (uint64_t)(*(_QWORD *)v32 << 8) >> 8;
          goto LABEL_68;
        case 7:
          goto LABEL_68;
        case 8:
          v43 = *(_QWORD *)v32;
          v44 = *(unsigned int **)(*(_QWORD *)v32 + 16);
          __p[0] = *(void **)(*(_QWORD *)v32 + 8);
          __p[1] = v44;
          if (v44)
          {
            v45 = v44 + 2;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v47 = *(_OWORD *)(v43 + 24);
          v48 = *(_OWORD *)(v43 + 56);
          v66 = *(_OWORD *)(v43 + 40);
          v67 = v48;
          v65 = v47;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          goto LABEL_67;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v32 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v66 + 1))
          {
            *(_QWORD *)&v67 = *((_QWORD *)&v66 + 1);
            operator delete(*((void **)&v66 + 1));
          }
          if ((_QWORD)v65)
          {
            *((_QWORD *)&v65 + 1) = v65;
            operator delete((void *)v65);
          }
          v33 = (uint64_t)__p[1];
          if (!__p[1])
            goto LABEL_68;
          v35 = (unint64_t *)((char *)__p[1] + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v33);
          }
LABEL_67:
          v33 = 0;
LABEL_68:
          if (v60 < 0)
            operator delete(v59[0]);
          v58 = v33;
          std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &,void>(&v62, &v61, &v58, __p);
          *a2 = *(_OWORD *)__p;
          v49 = v63;
          if (v63)
          {
            v50 = (unint64_t *)&v63->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          return;
        default:
          goto LABEL_82;
      }
    default:
LABEL_82:
      turi::flexible_type_fail(0);
      __break(1u);
      goto LABEL_83;
  }
}

void sub_2180D5394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;
  uint64_t v27;

  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 57) < 0)
  {
    operator delete(*(void **)(v27 - 80));
    if ((v26 & 1) == 0)
    {
LABEL_8:
      if (a16 < 0)
        operator delete(a11);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SARRAY_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", "operator()", 118, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D5674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"sarray\")", 46);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", "operator()", 119, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D57F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x88uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_2180D58D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_24D92DC88;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_2180D5940(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DC88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DC88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *a4;
  v10 = *a5;
  *(_QWORD *)a2 = &unk_24D92DCD8;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v6;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a2 + 80) = v9;
  if (v10 == -1)
  {
    v13 = *(_QWORD *)(a2 + 64);
    if (*(_BYTE *)(v13 + 248) && (v14 = *(uint64_t **)(v13 + 80), (v15 = *(_QWORD *)(v13 + 88) - (_QWORD)v14) != 0))
    {
      v10 = 0;
      v16 = v15 >> 3;
      if (v16 <= 1)
        v16 = 1;
      do
      {
        v17 = *v14++;
        v10 += v17;
        --v16;
      }
      while (v16);
    }
    else
    {
      v10 = 0;
    }
  }
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = v10;
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::~operator_impl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24D92DCD8;
  v2 = (uint64_t)(a1 + 6);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 12));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 8));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::~operator_impl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24D92DCD8;
  v2 = (uint64_t)(a1 + 6);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 12));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 8));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::type()
{
  return 6;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,std::shared_ptr<turi::sarray<turi::flexible_type>> const&,void>((uint64_t *)(a1 + 64), v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::execute(uint64_t a1, turi::query_eval::query_context *this)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 85 || v4 == 82)
  {
    *(_BYTE *)(a1 + 32) = turi::query_eval::query_context::should_skip(this);
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 16) = v6;
  }
  else
  {
    if (v4)
      return;
    if (!*(_QWORD *)(a1 + 96))
    {
      turi::sarray<turi::flexible_type>::get_reader(*(_QWORD *)(a1 + 64), (uint64_t *)&v16);
      std::shared_ptr<turi::sarray_reader<turi::flexible_type>>::operator=[abi:ne180100]<turi::sarray_reader<turi::flexible_type>,std::default_delete<turi::sarray_reader<turi::flexible_type>>,void>((_QWORD *)(a1 + 96), (uint64_t *)&v16);
      v5 = v16;
      *(_QWORD *)&v16 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)this;
    *(_BYTE *)(a1 + 32) = turi::query_eval::query_context::should_skip(this);
    v6 = *(_QWORD *)(a1 + 16);
  }
  if (v6 == *(_QWORD *)(a1 + 88))
  {
    v7 = 0;
  }
  else
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v16);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 48, &v16);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(a1 + 88) >= (unint64_t)(*(_QWORD *)(a1 + 24) + v11))
      v12 = *(_QWORD *)(a1 + 24) + v11;
    else
      v12 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 40) = v12;
    if (*(_BYTE *)(a1 + 32))
    {
      v16 = 0uLL;
      turi::query_eval::query_context::emit((uint64_t)this, &v16);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
      if (*((_QWORD *)&v16 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v7 = 85;
    }
    else
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 96) + 8) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
      turi::query_eval::query_context::emit((uint64_t)this, (__int128 *)(a1 + 48));
      v7 = 82;
    }
  }
  *(_DWORD *)(a1 + 8) = v7;
}

void sub_2180D5D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,std::shared_ptr<turi::sarray<turi::flexible_type>> const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x88uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2180D5DD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D92DC88;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::shared_ptr<turi::sarray<turi::flexible_type>> const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2180D5E38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::shared_ptr<turi::sarray<turi::flexible_type>> const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v3 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  *(_QWORD *)a2 = &unk_24D92DCD8;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 64) = v3;
  *(_QWORD *)(a2 + 72) = v4;
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v3 = *(_QWORD *)(a2 + 64);
  }
  *(_QWORD *)(a2 + 80) = 0;
  if (*(_BYTE *)(v3 + 248) && (v9 = *(uint64_t **)(v3 + 80), (v10 = *(_QWORD *)(v3 + 88) - (_QWORD)v9) != 0))
  {
    v11 = 0;
    v12 = v10 >> 3;
    if (v12 <= 1)
      v12 = 1;
    do
    {
      v13 = *v9++;
      v11 += v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = v11;
  if (v4)
  {
    v14 = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(_DWORD **a1@<X0>, _OWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  _DWORD *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  std::runtime_error *exception;
  std::string *v45;
  __int128 v46;
  std::runtime_error *v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50;
  void *v51[2];
  char v52;
  uint64_t v53;
  __int128 __str;
  __int128 __str_16;
  __int128 v56;
  __int128 v57;
  std::string v58;
  size_t __idx;
  void *__p[2];
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  LODWORD(__str) = **a1;
  if ((_DWORD)__str != 7)
  {
    __p[0] = &__str;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sframe");
  v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v3 + 8), (const void **)__p);
  if (v61 < 0)
    operator delete(__p[0]);
  if (!v5)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  v6 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "sframe");
  v7 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v6 + 8), (const void **)&__str);
  turi::sframe::sframe((turi::sframe *)__p, (const turi::sframe *)(*(_QWORD *)v7 + 8));
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  v53 = 0;
  v8 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v51, "begin_index");
  v9 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v8 + 2), (const void **)v51);
  v10 = 0;
  switch(v9[12])
  {
    case 0:
      v10 = *(_QWORD *)v9;
      goto LABEL_35;
    case 1:
      v10 = (uint64_t)*(double *)v9;
      goto LABEL_35;
    case 2:
      v14 = *(_QWORD *)v9;
      v15 = (char **)(*(_QWORD *)v9 + 8);
      __idx = 0;
      v16 = (char *)v15;
      if (*(char *)(v14 + 31) < 0)
        v16 = *v15;
      std::string::basic_string[abi:ne180100]<0>(&__str, v16);
      v10 = std::stoll((const std::string *)&__str, &__idx, 10);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      if (*(char *)(v14 + 31) < 0)
        v17 = *(_QWORD *)(v14 + 16);
      else
        v17 = *(unsigned __int8 *)(v14 + 31);
      if (__idx != v17)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v45 = std::string::append(&v58, " cannot be interpreted as an integer");
        v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        *(_QWORD *)&__str_16 = *((_QWORD *)&v45->__r_.__value_.__l + 2);
        __str = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&__str);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_35;
    case 3:
      v11 = *(_QWORD *)v9;
      *(_QWORD *)&__str_16 = 0;
      __str = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((_QWORD)__str)
      {
        *((_QWORD *)&__str + 1) = __str;
        operator delete((void *)__str);
      }
      goto LABEL_34;
    case 4:
      v18 = *(_QWORD *)v9;
      *(_QWORD *)&__str_16 = 0;
      __str = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      goto LABEL_34;
    case 5:
      v19 = *(_QWORD *)v9;
      *(_QWORD *)&__str_16 = 0;
      __str = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      goto LABEL_34;
    case 6:
      v10 = (uint64_t)(*(_QWORD *)v9 << 8) >> 8;
      goto LABEL_35;
    case 7:
      goto LABEL_35;
    case 8:
      v20 = *(_QWORD *)v9;
      v21 = *(_QWORD *)(*(_QWORD *)v9 + 16);
      *(_QWORD *)&__str = *(_QWORD *)(*(_QWORD *)v9 + 8);
      *((_QWORD *)&__str + 1) = v21;
      if (v21)
      {
        v22 = (unsigned int *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = *(_OWORD *)(v20 + 24);
      v25 = *(_OWORD *)(v20 + 56);
      v56 = *(_OWORD *)(v20 + 40);
      v57 = v25;
      __str_16 = v24;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__str + 1);
      goto LABEL_34;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(_QWORD *)v9 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v56 + 1))
      {
        *(_QWORD *)&v57 = *((_QWORD *)&v56 + 1);
        operator delete(*((void **)&v56 + 1));
      }
      if ((_QWORD)__str_16)
      {
        *((_QWORD *)&__str_16 + 1) = __str_16;
        operator delete((void *)__str_16);
      }
      v10 = *((_QWORD *)&__str + 1);
      if (!*((_QWORD *)&__str + 1))
        goto LABEL_35;
      v12 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
      }
LABEL_34:
      v10 = 0;
LABEL_35:
      if (v52 < 0)
        operator delete(v51[0]);
      v53 = v10;
      v50 = 0;
      v26 = *a1;
      std::string::basic_string[abi:ne180100]<0>(v51, "end_index");
      v27 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v26 + 2), (const void **)v51);
      v28 = 0;
      switch(v27[12])
      {
        case 0:
          v28 = *(_QWORD *)v27;
          goto LABEL_65;
        case 1:
          v28 = (uint64_t)*(double *)v27;
          goto LABEL_65;
        case 2:
          v32 = *(_QWORD *)v27;
          v33 = (char **)(*(_QWORD *)v27 + 8);
          __idx = 0;
          v34 = (char *)v33;
          if (*(char *)(v32 + 31) < 0)
            v34 = *v33;
          std::string::basic_string[abi:ne180100]<0>(&__str, v34);
          v28 = std::stoll((const std::string *)&__str, &__idx, 10);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
          if (*(char *)(v32 + 31) < 0)
            v35 = *(_QWORD *)(v32 + 16);
          else
            v35 = *(unsigned __int8 *)(v32 + 31);
          if (__idx != v35)
          {
            v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v48 = std::string::append(&v58, " cannot be interpreted as an integer");
            v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
            *(_QWORD *)&__str_16 = *((_QWORD *)&v48->__r_.__value_.__l + 2);
            __str = v49;
            v48->__r_.__value_.__l.__size_ = 0;
            v48->__r_.__value_.__r.__words[2] = 0;
            v48->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v47, (const std::string *)&__str);
            __cxa_throw(v47, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_65;
        case 3:
          v29 = *(_QWORD *)v27;
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v29 + 8), *(_QWORD *)(v29 + 16), (uint64_t)(*(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((_QWORD)__str)
          {
            *((_QWORD *)&__str + 1) = __str;
            operator delete((void *)__str);
          }
          goto LABEL_64;
        case 4:
          v36 = *(_QWORD *)v27;
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
          goto LABEL_64;
        case 5:
          v37 = *(_QWORD *)v27;
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v37 + 8), *(uint64_t **)(v37 + 16), (uint64_t)(*(_QWORD *)(v37 + 16) - *(_QWORD *)(v37 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
          goto LABEL_64;
        case 6:
          v28 = (uint64_t)(*(_QWORD *)v27 << 8) >> 8;
          goto LABEL_65;
        case 7:
          goto LABEL_65;
        case 8:
          v38 = *(_QWORD *)v27;
          v39 = *(_QWORD *)(*(_QWORD *)v27 + 16);
          *(_QWORD *)&__str = *(_QWORD *)(*(_QWORD *)v27 + 8);
          *((_QWORD *)&__str + 1) = v39;
          if (v39)
          {
            v40 = (unsigned int *)(v39 + 8);
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
          v42 = *(_OWORD *)(v38 + 24);
          v43 = *(_OWORD *)(v38 + 56);
          v56 = *(_OWORD *)(v38 + 40);
          v57 = v43;
          __str_16 = v42;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__str + 1);
          goto LABEL_64;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(_QWORD *)v27 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v56 + 1))
          {
            *(_QWORD *)&v57 = *((_QWORD *)&v56 + 1);
            operator delete(*((void **)&v56 + 1));
          }
          if ((_QWORD)__str_16)
          {
            *((_QWORD *)&__str_16 + 1) = __str_16;
            operator delete((void *)__str_16);
          }
          v28 = *((_QWORD *)&__str + 1);
          if (!*((_QWORD *)&__str + 1))
            goto LABEL_65;
          v30 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v28);
          }
LABEL_64:
          v28 = 0;
LABEL_65:
          if (v52 < 0)
            operator delete(v51[0]);
          v50 = v28;
          std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,turi::sframe &,unsigned long &,unsigned long &,void>((turi::sframe *)__p, &v53, &v50, &__str);
          *a2 = __str;
          turi::sframe::~sframe((turi::sframe *)__p);
          break;
        default:
          goto LABEL_76;
      }
      return;
    default:
LABEL_76:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
}

void sub_2180D6648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  int v44;

  if (a23 < 0)
    operator delete(__p);
  if (a36 < 0)
  {
    operator delete(a31);
    if ((v44 & 1) == 0)
    {
LABEL_8:
      if (a16 < 0)
        operator delete(a11);
      turi::sframe::~sframe((turi::sframe *)&a38);
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v43);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SFRAME_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", "operator()", 120, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D6940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"sframe\")", 46);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", "operator()", 122, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D6AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,turi::sframe &,unsigned long &,unsigned long &,void>@<X0>(turi::sframe *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x1A0uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::__shared_ptr_emplace[abi:ne180100]<turi::sframe &,unsigned long &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_2180D6BA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::__shared_ptr_emplace[abi:ne180100]<turi::sframe &,unsigned long &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,0>(_QWORD *a1, turi::sframe *a2, uint64_t *a3, uint64_t *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_24D92DD38;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,turi::sframe &,unsigned long &,unsigned long &>((int)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_2180D6C0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DD38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DD38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,turi::sframe &,unsigned long &,unsigned long &>(int a1, uint64_t a2, turi::sframe *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[38];

  v10[37] = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe((turi::sframe *)v10, a3);
  v8 = *a4;
  v9 = *a5;
  *(_QWORD *)a2 = &unk_24D92DD88;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 0;
  turi::sframe::sframe((turi::sframe *)(a2 + 64), (const turi::sframe *)v10);
  *(_QWORD *)(a2 + 360) = v8;
  if (v9 == -1)
  {
    if (*(_BYTE *)(a2 + 352))
      v9 = *(_QWORD *)(a2 + 96);
    else
      v9 = 0;
  }
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a2 + 368) = v9;
  turi::sframe::~sframe((turi::sframe *)v10);
}

void sub_2180D6D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v9 + 24);
  turi::sframe::~sframe((turi::sframe *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::~operator_impl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24D92DD88;
  v2 = (uint64_t)(a1 + 3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 47));
  turi::sframe::~sframe((turi::sframe *)(a1 + 8));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::~operator_impl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24D92DD88;
  v2 = (uint64_t)(a1 + 3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 47));
  turi::sframe::~sframe((turi::sframe *)(a1 + 8));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::type()
{
  return 7;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,turi::sframe const&,void>((turi::sframe *)(a1 + 64), v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::execute(uint64_t a1, turi::query_eval::query_context *this)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 82 || v4 == 79)
  {
    *(_BYTE *)(a1 + 48) = turi::query_eval::query_context::should_skip(this);
    v6 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 16) = v6;
  }
  else
  {
    if (v4)
      return;
    if (!*(_QWORD *)(a1 + 376))
    {
      turi::sframe::get_reader((turi::sframe *)(a1 + 64), (turi::sframe_reader **)&v16);
      std::shared_ptr<turi::sframe_reader>::operator=[abi:ne180100]<turi::sframe_reader,std::default_delete<turi::sframe_reader>,void>((_QWORD *)(a1 + 376), (uint64_t *)&v16);
      v5 = v16;
      *(_QWORD *)&v16 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 360);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)this;
    *(_BYTE *)(a1 + 48) = turi::query_eval::query_context::should_skip(this);
    v6 = *(_QWORD *)(a1 + 16);
  }
  if (v6 == *(_QWORD *)(a1 + 368))
  {
    v7 = 0;
  }
  else
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v16);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 24, &v16);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(a1 + 368) >= (unint64_t)(*(_QWORD *)(a1 + 40) + v11))
      v12 = *(_QWORD *)(a1 + 40) + v11;
    else
      v12 = *(_QWORD *)(a1 + 368);
    *(_QWORD *)(a1 + 56) = v12;
    if (*(_BYTE *)(a1 + 48))
    {
      v16 = 0uLL;
      turi::query_eval::query_context::emit((uint64_t)this, &v16);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
      if (*((_QWORD *)&v16 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v7 = 82;
    }
    else
    {
      turi::sframe_reader::read_rows(*(turi::sframe_reader **)(a1 + 376), v11, v12, *(uint64_t ****)(a1 + 24));
      turi::query_eval::query_context::emit((uint64_t)this, (__int128 *)(a1 + 24));
      v7 = 79;
    }
  }
  *(_DWORD *)(a1 + 8) = v7;
}

void sub_2180D7014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,turi::sframe const&,void>@<X0>(turi::sframe *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1A0uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::__shared_ptr_emplace[abi:ne180100]<turi::sframe const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2180D708C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::__shared_ptr_emplace[abi:ne180100]<turi::sframe const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,0>(_QWORD *a1, turi::sframe *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D92DD38;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,turi::sframe const&>((int)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2180D70EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,turi::sframe const&>(int a1, uint64_t a2, turi::sframe *a3)
{
  uint64_t v4;
  _QWORD v5[38];

  v5[37] = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe((turi::sframe *)v5, a3);
  *(_QWORD *)a2 = &unk_24D92DD88;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 0;
  turi::sframe::sframe((turi::sframe *)(a2 + 64), (const turi::sframe *)v5);
  *(_QWORD *)(a2 + 360) = 0;
  if (*(_BYTE *)(a2 + 352))
    v4 = *(_QWORD *)(a2 + 96);
  else
    v4 = 0;
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a2 + 368) = v4;
  turi::sframe::~sframe((turi::sframe *)v5);
}

void sub_2180D71BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v9 + 24);
  turi::sframe::~sframe((turi::sframe *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::sframe_reader>::operator=[abi:ne180100]<turi::sframe_reader,std::default_delete<turi::sframe_reader>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v5 = (_QWORD *)operator new();
  v6 = *a2;
  *v5 = &unk_24D91EBA0;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v6;
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  uint64_t **v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  _QWORD *result;
  uint64_t v44;
  std::runtime_error *exception;
  std::string *v46;
  __int128 v47;
  std::runtime_error *v48;
  std::string *v49;
  __int128 v50;
  int v51;
  void *v52[2];
  char v53;
  char v54;
  void *__p[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  std::string v59;
  size_t __idx;
  _QWORD v61[3];
  _QWORD *v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v3 = (_DWORD *)*a1;
  LODWORD(v61[0]) = *(_DWORD *)*a1;
  if (LODWORD(v61[0]) != 8)
  {
    __p[0] = v61;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v4 = *((_QWORD *)v3 + 8) - *((_QWORD *)v3 + 7);
  __p[0] = (void *)(v4 >> 4);
  if (v4 != 16)
  {
    v61[0] = __p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v3 + 2), (const void **)__p);
  if (SBYTE7(v56) < 0)
    operator delete(__p[0]);
  if (!v6)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
  v7 = (_DWORD *)*a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "function");
  v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v7 + 8), (const void **)__p);
  if (SBYTE7(v56) < 0)
    operator delete(__p[0]);
  if (!v8)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
  v62 = 0;
  v54 = 0;
  v10 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v52, "output_type");
  __p[0] = v52;
  v9 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v10 + 8), (const void **)v52, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  LOBYTE(v10) = 0;
  switch(*((_BYTE *)v9 + 68))
  {
    case 0:
      v10 = *((_QWORD *)v9 + 7);
      goto LABEL_37;
    case 1:
      v10 = (uint64_t)*((double *)v9 + 7);
      goto LABEL_37;
    case 2:
      v14 = *((_QWORD *)v9 + 7);
      __idx = 0;
      v15 = (char *)(v14 + 8);
      if (*(char *)(v14 + 31) < 0)
        v15 = *(char **)(v14 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v15);
      LOBYTE(v10) = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v56) < 0)
        operator delete(__p[0]);
      if (*(char *)(v14 + 31) < 0)
        v16 = *(_QWORD *)(v14 + 16);
      else
        v16 = *(unsigned __int8 *)(v14 + 31);
      if (__idx != v16)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v46 = std::string::append(&v59, " cannot be interpreted as an integer");
        v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        *(_QWORD *)&v56 = *((_QWORD *)&v46->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_37;
    case 3:
      v11 = *((_QWORD *)v9 + 7);
      __p[1] = 0;
      *(_QWORD *)&v56 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_36;
    case 4:
      v17 = *((_QWORD *)v9 + 7);
      __p[1] = 0;
      *(_QWORD *)&v56 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      goto LABEL_36;
    case 5:
      v18 = *((_QWORD *)v9 + 7);
      __p[1] = 0;
      *(_QWORD *)&v56 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      goto LABEL_36;
    case 6:
      v10 = (uint64_t)(*((_QWORD *)v9 + 7) << 8) >> 8;
      goto LABEL_37;
    case 7:
      goto LABEL_37;
    case 8:
      v19 = *((_QWORD *)v9 + 7);
      v20 = *(unsigned int **)(v19 + 16);
      __p[0] = *(void **)(v19 + 8);
      __p[1] = v20;
      if (v20)
      {
        v21 = v20 + 2;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(_OWORD *)(v19 + 24);
      v24 = *(_OWORD *)(v19 + 56);
      v57 = *(_OWORD *)(v19 + 40);
      v58 = v24;
      v56 = v23;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_36;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v9 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v57 + 1))
      {
        *(_QWORD *)&v58 = *((_QWORD *)&v57 + 1);
        operator delete(*((void **)&v57 + 1));
      }
      if ((_QWORD)v56)
      {
        *((_QWORD *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      v10 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_37;
      v12 = (unint64_t *)((char *)__p[1] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
      }
LABEL_36:
      LOBYTE(v10) = 0;
LABEL_37:
      if (v53 < 0)
        operator delete(v52[0]);
      v54 = v10;
      v25 = (uint64_t **)*a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "function");
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      v26 = std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25 + 4, (const void **)__p, (uint64_t)&std::piecewise_construct, &v59);
      std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>::operator=(v61, *((_QWORD *)v26 + 7) + 8);
      if (SBYTE7(v56) < 0)
        operator delete(__p[0]);
      v51 = 0;
      v28 = *a1;
      std::string::basic_string[abi:ne180100]<0>(v52, "random_seed");
      __p[0] = v52;
      v27 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v28 + 8), (const void **)v52, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      LODWORD(v28) = 0;
      switch(*((_BYTE *)v27 + 68))
      {
        case 0:
          v28 = *((_QWORD *)v27 + 7);
          goto LABEL_69;
        case 1:
          v28 = (uint64_t)*((double *)v27 + 7);
          goto LABEL_69;
        case 2:
          v32 = *((_QWORD *)v27 + 7);
          __idx = 0;
          v33 = (char *)(v32 + 8);
          if (*(char *)(v32 + 31) < 0)
            v33 = *(char **)(v32 + 8);
          std::string::basic_string[abi:ne180100]<0>(__p, v33);
          LODWORD(v28) = std::stoll((const std::string *)__p, &__idx, 10);
          if (SBYTE7(v56) < 0)
            operator delete(__p[0]);
          if (*(char *)(v32 + 31) < 0)
            v34 = *(_QWORD *)(v32 + 16);
          else
            v34 = *(unsigned __int8 *)(v32 + 31);
          if (__idx != v34)
          {
            v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v49 = std::string::append(&v59, " cannot be interpreted as an integer");
            v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
            *(_QWORD *)&v56 = *((_QWORD *)&v49->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v50;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            v49->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v48, (const std::string *)__p);
            __cxa_throw(v48, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_69;
        case 3:
          v29 = *((_QWORD *)v27 + 7);
          __p[1] = 0;
          *(_QWORD *)&v56 = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v29 + 8), *(_QWORD *)(v29 + 16), (uint64_t)(*(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_68;
        case 4:
          v35 = *((_QWORD *)v27 + 7);
          __p[1] = 0;
          *(_QWORD *)&v56 = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v35 + 8), *(uint64_t **)(v35 + 16), (uint64_t)(*(_QWORD *)(v35 + 16) - *(_QWORD *)(v35 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v59.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
          goto LABEL_68;
        case 5:
          v36 = *((_QWORD *)v27 + 7);
          __p[1] = 0;
          *(_QWORD *)&v56 = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v59.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
          goto LABEL_68;
        case 6:
          v28 = (uint64_t)(*((_QWORD *)v27 + 7) << 8) >> 8;
          goto LABEL_69;
        case 7:
          goto LABEL_69;
        case 8:
          v37 = *((_QWORD *)v27 + 7);
          v38 = *(unsigned int **)(v37 + 16);
          __p[0] = *(void **)(v37 + 8);
          __p[1] = v38;
          if (v38)
          {
            v39 = v38 + 2;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          v41 = *(_OWORD *)(v37 + 24);
          v42 = *(_OWORD *)(v37 + 56);
          v57 = *(_OWORD *)(v37 + 40);
          v58 = v42;
          v56 = v41;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          goto LABEL_68;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v27 + 7) + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v57 + 1))
          {
            *(_QWORD *)&v58 = *((_QWORD *)&v57 + 1);
            operator delete(*((void **)&v57 + 1));
          }
          if ((_QWORD)v56)
          {
            *((_QWORD *)&v56 + 1) = v56;
            operator delete((void *)v56);
          }
          v28 = (uint64_t)__p[1];
          if (!__p[1])
            goto LABEL_69;
          v30 = (unint64_t *)((char *)__p[1] + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v28);
          }
LABEL_68:
          LODWORD(v28) = 0;
LABEL_69:
          if (v53 < 0)
            operator delete(v52[0]);
          v51 = v28;
          std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&)> &,turi::flex_type_enum &,int &,void>((uint64_t)v61, &v54, &v51, __p);
          *a2 = *(_OWORD *)__p;
          result = v62;
          if (v62 == v61)
          {
            v44 = 4;
            result = v61;
          }
          else
          {
            if (!v62)
              return result;
            v44 = 5;
          }
          result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v44))();
          break;
        default:
          goto LABEL_87;
      }
      return result;
    default:
LABEL_87:
      result = (_QWORD *)turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
}

void sub_2180D7A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;

  if (a23 < 0)
    operator delete(__p);
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v36 & 1) == 0)
    {
LABEL_8:
      if (a16 < 0)
        operator delete(a11);
      v40 = *(_QWORD **)(v37 + 32);
      if (v40 == (_QWORD *)(v38 - 104))
      {
        v41 = 4;
        v40 = (_QWORD *)(v38 - 104);
      }
      else
      {
        if (!v40)
          goto LABEL_15;
        v41 = 5;
      }
      (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_15:
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TRANSFORM_NODE", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 110, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D7D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D7FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 112, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D812C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"function\")", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 113, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180D82AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&)> &,turi::flex_type_enum &,int &,void>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t result;

  v8 = (char *)operator new(0x58uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::__shared_ptr_emplace[abi:ne180100]<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)> &,turi::flex_type_enum &,int &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,0>((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_2180D8390(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::__shared_ptr_emplace[abi:ne180100]<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)> &,turi::flex_type_enum &,int &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,0>(uint64_t a1, uint64_t a2, char *a3, int *a4)
{
  char v5;
  uint64_t v6;

  *(_QWORD *)a1 = &unk_24D92DDE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *a3;
  v6 = *a4;
  *(_QWORD *)(a1 + 24) = &unk_24D92DE38;
  *(_DWORD *)(a1 + 32) = 0;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 40, a2);
  *(_BYTE *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v6;
  return a1;
}

void sub_2180D840C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DDE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DDE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::~operator_impl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D92DE38;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::~operator_impl(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D92DE38;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::type()
{
  return 8;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8> const&,void>(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v4;
  turi::thread *source;
  uint64_t v6;
  _BYTE *tls_data;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char **v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  __int128 v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  char *v102;
  uint64_t *v103;
  uint64_t *v104;
  _QWORD *v105;
  _QWORD *v107;
  unint64_t v108;
  BOOL v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  void *v116;
  void *v117;
  _QWORD *v118;
  unint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t *v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  BOOL v132;
  _QWORD *v133;
  unint64_t v134;
  BOOL v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  unint64_t v153;
  unint64_t v154;
  void *v155;
  _QWORD *v156;
  void *v157;
  _QWORD *v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  double v175;
  _QWORD *v176;
  unint64_t v177;
  unint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int v185;
  __int128 v186;
  __int128 v187;
  unint64_t v188;
  BOOL v189;
  _QWORD *v190;
  uint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  unint64_t v194;
  _QWORD *v195;
  unint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  BOOL v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  unsigned int v203;
  _QWORD *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int *v214;
  unsigned int v215;
  __int128 v216;
  __int128 v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  _QWORD *v229;
  void *v230;
  void *v231;
  _QWORD *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  __int128 v239;
  __int128 v240;
  unint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  unint64_t v248;
  _QWORD *v249;
  unint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  _QWORD *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int *v265;
  unsigned int v266;
  __int128 v267;
  __int128 v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int *v273;
  unsigned int v274;
  __int128 v275;
  __int128 v276;
  unint64_t v277;
  _QWORD *v278;
  unint64_t v279;
  _QWORD *v280;
  unint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int *v287;
  unsigned int v288;
  __int128 v289;
  __int128 v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int *v295;
  unsigned int v296;
  __int128 v297;
  __int128 v298;
  unint64_t v299;
  _QWORD *v300;
  unint64_t v301;
  _QWORD *v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int *v307;
  unsigned int v308;
  __int128 v309;
  __int128 v310;
  unint64_t v311;
  _QWORD *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int *v317;
  unsigned int v318;
  __int128 v319;
  __int128 v320;
  unint64_t v321;
  _QWORD *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int *v327;
  unsigned int v328;
  __int128 v329;
  __int128 v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t *v337;
  uint64_t v338;
  unint64_t *v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t *v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t *v346;
  void *v347;
  void *v348;
  unsigned int v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t *v353;
  void *v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t *v361;
  uint64_t v362;
  BOOL v363;
  int v364;
  unint64_t *v366;
  unint64_t v367;
  unint64_t *v368;
  unint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  void *v382;
  void *v383;
  unsigned int v384;
  unint64_t *v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  void *v389;
  unint64_t *v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t v410;
  void *v411;
  void *v412;
  unsigned int v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  void *v418;
  unint64_t *v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t *v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t *v429;
  unint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t *v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  void **v449;
  void **v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t *v458;
  void **v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  void **v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  __int128 v492;
  __int128 v493;
  _BYTE v494[32];
  _BYTE v495[32];
  uint64_t v496;
  void *v497;
  void *v498;
  uint64_t v499;
  void **v500;
  void **v501;
  uint64_t v502;
  __int128 v503;
  uint64_t v504;
  uint64_t v505[2];
  _BYTE v506[13];
  uint64_t v507;

  v507 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 != 91)
  {
    if (v4)
      return;
    if (*(_QWORD *)(a1 + 56) != -1)
    {
      source = turi::random::get_source((turi::random *)a1);
      v6 = *(_QWORD *)(a1 + 56);
      tls_data = turi::thread::get_tls_data(source);
      turi::random::generator::seed(source, *(_DWORD *)tls_data + v6);
    }
  }
  v8.n128_f64[0] = turi::query_eval::query_context::get_next(this, 0, &v493);
  v9 = v493;
  if (!(_QWORD)v493)
    goto LABEL_718;
  turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v492);
  if (*(_QWORD *)v493 == *(_QWORD *)(v493 + 8) || (v10 = **(_QWORD ***)v493) == 0)
    v11 = 0;
  else
    v11 = (uint64_t)(v10[1] - *v10) >> 4;
  turi::sframe_rows::resize((uint64_t ***)v492, 1uLL, v11);
  v489 = v9;
  v490 = v493;
  v491 = 0;
  v12 = (_QWORD ***)v492;
  if (!*(_BYTE *)(v492 + 24))
    turi::sframe_rows::ensure_unique((turi::sframe_rows *)v492);
  v13 = 0;
LABEL_13:
  if (*(_QWORD *)v493 == *(_QWORD *)(v493 + 8))
  {
    v14 = 0;
  }
  else
  {
    v14 = **(_QWORD **)v493;
    if (v14)
      v14 = (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 4;
  }
  if (v491 != v14)
  {
    v15 = *(_QWORD *)(a1 + 40);
    if (!v15)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v15 + 48))(v506, v15, &v490);
    v17 = *(unsigned __int8 *)(a1 + 48);
    if (v17 == 7 || v506[12] == v17 || v506[12] == 7)
    {
      v18 = ***v12 + 16 * v13;
      if (v506 != (_BYTE *)v18)
      {
        switch(*(_BYTE *)(v18 + 12))
        {
          case 2:
            v19 = *(unint64_t **)v18;
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              v22 = *(unint64_t **)v18;
              if (!*(_QWORD *)v18)
                goto LABEL_66;
              if (*((char *)v22 + 31) < 0)
                operator delete((void *)v22[1]);
              v23 = v22;
              v24 = 0x1012C404EF22A49;
              goto LABEL_65;
            }
            break;
          case 3:
            v37 = *(unint64_t **)v18;
            do
            {
              v38 = __ldaxr(v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v37));
            if (!v39)
            {
              v40 = *(unint64_t **)v18;
              if (!*(_QWORD *)v18)
                goto LABEL_66;
              v41 = (void *)v40[1];
              if (v41)
              {
                v40[2] = (unint64_t)v41;
                operator delete(v41);
              }
              v23 = v40;
              v24 = 0x1080C409938AC02;
              goto LABEL_65;
            }
            break;
          case 4:
            v26 = *(unint64_t **)v18;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v29 = *(unint64_t **)v18;
              if (!*(_QWORD *)v18)
                goto LABEL_66;
              *(_QWORD *)v494 = v29 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
              goto LABEL_58;
            }
            break;
          case 5:
            v42 = *(unint64_t **)v18;
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              v29 = *(unint64_t **)v18;
              if (!*(_QWORD *)v18)
                goto LABEL_66;
              *(_QWORD *)v494 = v29 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
LABEL_58:
              v23 = v29;
              v24 = 0x1020C405E66F15BLL;
              goto LABEL_65;
            }
            break;
          case 8:
            v45 = *(unint64_t **)v18;
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              v48 = *(unint64_t **)v18;
              if (!*(_QWORD *)v18)
                goto LABEL_66;
              boost::detail::shared_count::~shared_count((unsigned int **)v48 + 2);
              v23 = v48;
              v36 = -235920773;
              goto LABEL_64;
            }
            break;
          case 9:
            v30 = *(unint64_t **)v18;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = *(unint64_t **)v18;
              if (*(_QWORD *)v18)
              {
                v34 = (void *)v33[6];
                if (v34)
                {
                  v33[7] = (unint64_t)v34;
                  operator delete(v34);
                }
                v35 = (void *)v33[3];
                if (v35)
                {
                  v33[4] = (unint64_t)v35;
                  operator delete(v35);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
                v23 = v33;
                v36 = 2071181815;
LABEL_64:
                v24 = v36 | 0x1030C4000000000;
LABEL_65:
                MEMORY[0x219A19A08](v23, v24);
              }
LABEL_66:
              *(_QWORD *)v18 = 0;
            }
            break;
          default:
            break;
        }
        v49 = *(_QWORD *)v506;
        *(_QWORD *)(v18 + 5) = *(_QWORD *)&v506[5];
        *(_QWORD *)v18 = v49;
        LODWORD(v49) = v506[12];
        *(_BYTE *)(v18 + 12) = v506[12];
        switch((int)v49)
        {
          case 2:
            v50 = *(unint64_t **)v18;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 + 1, v50));
            break;
          case 3:
            v56 = *(unint64_t **)v18;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 + 1, v56));
            break;
          case 4:
            v52 = *(unint64_t **)v18;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 + 1, v52));
            break;
          case 5:
            v58 = *(unint64_t **)v18;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 + 1, v58));
            break;
          case 8:
            v60 = *(unint64_t **)v18;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 + 1, v60));
            break;
          case 9:
            v54 = *(unint64_t **)v18;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 + 1, v54));
            break;
          default:
            goto LABEL_604;
        }
      }
      goto LABEL_604;
    }
    v25 = 0;
    memset(v505, 0, 13);
    BYTE4(v505[1]) = v17;
    switch(v17)
    {
      case 2:
      case 3:
      case 4:
      case 5:
        v25 = operator new();
        *(_QWORD *)v25 = 0;
        *(_QWORD *)(v25 + 16) = 0;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 8) = 0;
        goto LABEL_89;
      case 6:
        v25 = 0x1900000000000000;
        v505[0] = 0x1900000000000000;
        LODWORD(v505[1]) = 0;
        break;
      case 8:
        v25 = operator new();
        *(_QWORD *)v25 = 0;
        v16 = 0.0;
        *(_OWORD *)(v25 + 8) = 0u;
        *(_OWORD *)(v25 + 24) = 0u;
        *(_OWORD *)(v25 + 40) = 0u;
        *(_QWORD *)(v25 + 56) = 0;
        *(_QWORD *)(v25 + 64) = 3;
        goto LABEL_89;
      case 9:
        v25 = operator new();
        std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v25);
LABEL_89:
        v505[0] = v25;
        *(_QWORD *)v25 = 1;
        break;
      default:
        break;
    }
    switch(v506[12])
    {
      case 0:
        switch(BYTE4(v505[1]))
        {
          case 0:
            v62 = *(_QWORD *)v506;
            goto LABEL_146;
          case 1:
            v175 = (double)*(uint64_t *)v506;
            goto LABEL_373;
          case 2:
            if (*(_QWORD *)v25 != 1)
            {
              v171 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v171, v505[0]);
              v505[0] = (uint64_t)v171;
              *v171 = 1;
              do
              {
                v172 = __ldaxr((unint64_t *)v25);
                v173 = v172 - 1;
              }
              while (__stlxr(v173, (unint64_t *)v25));
              if (!v173)
              {
                if (*(char *)(v25 + 31) < 0)
                  operator delete(*(void **)(v25 + 8));
                MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
              }
            }
            v174 = v505[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v494);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_339;
          case 3:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v142 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v142, v505[0]);
            v505[0] = (uint64_t)v142;
            *v142 = 1;
            do
            {
              v143 = __ldaxr((unint64_t *)v25);
              v109 = --v143 == 0;
            }
            while (__stlxr(v143, (unint64_t *)v25));
            goto LABEL_384;
          case 4:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v256 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v256, v505[0]);
            v505[0] = (uint64_t)v256;
            *v256 = 1;
            do
            {
              v257 = __ldaxr((unint64_t *)v25);
              v199 = --v257 == 0;
            }
            while (__stlxr(v257, (unint64_t *)v25));
            goto LABEL_496;
          case 5:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v280 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v280, v505[0]);
            v505[0] = (uint64_t)v280;
            *v280 = 1;
            do
            {
              v281 = __ldaxr((unint64_t *)v25);
              v135 = --v281 == 0;
            }
            while (__stlxr(v281, (unint64_t *)v25));
            goto LABEL_483;
          case 6:
            v505[0] = *(_QWORD *)v506 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            LODWORD(v505[1]) = 0;
            goto LABEL_512;
          case 7:
            goto LABEL_511;
          case 8:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v284 = operator new();
            v285 = v505[0];
            *(_QWORD *)v284 = *(_QWORD *)v505[0];
            *(_QWORD *)(v284 + 8) = *(_QWORD *)(v285 + 8);
            v286 = *(_QWORD *)(v285 + 16);
            *(_QWORD *)(v284 + 16) = v286;
            if (v286)
            {
              v287 = (unsigned int *)(v286 + 8);
              do
                v288 = __ldxr(v287);
              while (__stxr(v288 + 1, v287));
            }
            v289 = *(_OWORD *)(v285 + 24);
            v290 = *(_OWORD *)(v285 + 40);
            *(_OWORD *)(v284 + 56) = *(_OWORD *)(v285 + 56);
            *(_OWORD *)(v284 + 40) = v290;
            *(_OWORD *)(v284 + 24) = v289;
            v505[0] = v284;
            *(_QWORD *)v284 = 1;
            do
            {
              v291 = __ldaxr((unint64_t *)v25);
              v189 = --v291 == 0;
            }
            while (__stlxr(v291, (unint64_t *)v25));
            goto LABEL_506;
          case 9:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v163 = (_QWORD *)operator new();
            v164 = v505[0] + 8;
            *v163 = *(_QWORD *)v505[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v163 + 1, v164);
            v505[0] = (uint64_t)v163;
            *v163 = 1;
            do
            {
              v165 = __ldaxr((unint64_t *)v25);
              v132 = --v165 == 0;
            }
            while (__stlxr(v165, (unint64_t *)v25));
            goto LABEL_328;
          default:
            goto LABEL_732;
        }
      case 1:
        switch(BYTE4(v505[1]))
        {
          case 0:
            v62 = (uint64_t)*(double *)v506;
            goto LABEL_146;
          case 1:
            v175 = *(double *)v506;
            goto LABEL_373;
          case 2:
            if (*(_QWORD *)v25 != 1)
            {
              v204 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v204, v505[0]);
              v505[0] = (uint64_t)v204;
              *v204 = 1;
              do
              {
                v205 = __ldaxr((unint64_t *)v25);
                v206 = v205 - 1;
              }
              while (__stlxr(v206, (unint64_t *)v25));
              if (!v206)
              {
                if (*(char *)(v25 + 31) < 0)
                  operator delete(*(void **)(v25 + 8));
                MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
              }
            }
            v174 = v505[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v494);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_339:
            v207 = v174 + 8;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v494);
            if (*(char *)(v174 + 31) < 0)
              operator delete(*(void **)v207);
            v208 = v503;
            v209 = v504;
            goto LABEL_411;
          case 3:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v144 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v144, v505[0]);
            v505[0] = (uint64_t)v144;
            *v144 = 1;
            do
            {
              v145 = __ldaxr((unint64_t *)v25);
              v109 = --v145 == 0;
            }
            while (__stlxr(v145, (unint64_t *)v25));
            goto LABEL_384;
          case 4:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v258 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v258, v505[0]);
            v505[0] = (uint64_t)v258;
            *v258 = 1;
            do
            {
              v259 = __ldaxr((unint64_t *)v25);
              v199 = --v259 == 0;
            }
            while (__stlxr(v259, (unint64_t *)v25));
            goto LABEL_496;
          case 5:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v282 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v282, v505[0]);
            v505[0] = (uint64_t)v282;
            *v282 = 1;
            do
            {
              v283 = __ldaxr((unint64_t *)v25);
              v135 = --v283 == 0;
            }
            while (__stlxr(v283, (unint64_t *)v25));
            goto LABEL_483;
          case 6:
            v210 = (int)((*(double *)v506 - (double)(uint64_t)floor(*(double *)v506)) * 1000000.0);
            if (v210 >= 999999)
              v210 = 999999;
            if (v210 >= 0xF4240)
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            v505[0] = vcvtmd_s64_f64(*(double *)v506) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            LODWORD(v505[1]) = v210;
            goto LABEL_512;
          case 7:
            goto LABEL_511;
          case 8:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v292 = operator new();
            v293 = v505[0];
            *(_QWORD *)v292 = *(_QWORD *)v505[0];
            *(_QWORD *)(v292 + 8) = *(_QWORD *)(v293 + 8);
            v294 = *(_QWORD *)(v293 + 16);
            *(_QWORD *)(v292 + 16) = v294;
            if (v294)
            {
              v295 = (unsigned int *)(v294 + 8);
              do
                v296 = __ldxr(v295);
              while (__stxr(v296 + 1, v295));
            }
            v297 = *(_OWORD *)(v293 + 24);
            v298 = *(_OWORD *)(v293 + 40);
            *(_OWORD *)(v292 + 56) = *(_OWORD *)(v293 + 56);
            *(_OWORD *)(v292 + 40) = v298;
            *(_OWORD *)(v292 + 24) = v297;
            v505[0] = v292;
            *(_QWORD *)v292 = 1;
            do
            {
              v299 = __ldaxr((unint64_t *)v25);
              v189 = --v299 == 0;
            }
            while (__stlxr(v299, (unint64_t *)v25));
            goto LABEL_506;
          case 9:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v166 = (_QWORD *)operator new();
            v167 = v505[0] + 8;
            *v166 = *(_QWORD *)v505[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v166 + 1, v167);
            v505[0] = (uint64_t)v166;
            *v166 = 1;
            do
            {
              v168 = __ldaxr((unint64_t *)v25);
              v132 = --v168 == 0;
            }
            while (__stlxr(v168, (unint64_t *)v25));
            goto LABEL_328;
          default:
            goto LABEL_732;
        }
      case 2:
        switch(BYTE4(v505[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_511;
          case 2:
            v73 = *(_QWORD *)v506;
            if (*(_QWORD *)v25 != 1)
            {
              v74 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v74, v505[0]);
              v505[0] = (uint64_t)v74;
              *v74 = 1;
              do
              {
                v75 = __ldaxr((unint64_t *)v25);
                v76 = v75 - 1;
              }
              while (__stlxr(v76, (unint64_t *)v25));
              if (!v76)
              {
                if (*(char *)(v25 + 31) < 0)
                  operator delete(*(void **)(v25 + 8));
                MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
              }
            }
            v77 = v505[0];
            if (*(char *)(v73 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v494, *(const std::string::value_type **)(v73 + 8), *(_QWORD *)(v73 + 16));
            }
            else
            {
              v78 = *(_OWORD *)(v73 + 8);
              *(_QWORD *)&v494[16] = *(_QWORD *)(v73 + 24);
              *(_OWORD *)v494 = v78;
            }
            goto LABEL_648;
          case 3:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v107 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v107, v505[0]);
            v505[0] = (uint64_t)v107;
            *v107 = 1;
            do
            {
              v108 = __ldaxr((unint64_t *)v25);
              v109 = --v108 == 0;
            }
            while (__stlxr(v108, (unint64_t *)v25));
            goto LABEL_384;
          case 4:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v232 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v232, v505[0]);
            v505[0] = (uint64_t)v232;
            *v232 = 1;
            do
            {
              v233 = __ldaxr((unint64_t *)v25);
              v199 = --v233 == 0;
            }
            while (__stlxr(v233, (unint64_t *)v25));
            goto LABEL_496;
          case 5:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v169 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v169, v505[0]);
            v505[0] = (uint64_t)v169;
            *v169 = 1;
            do
            {
              v170 = __ldaxr((unint64_t *)v25);
              v135 = --v170 == 0;
            }
            while (__stlxr(v170, (unint64_t *)v25));
            goto LABEL_483;
          case 8:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v234 = operator new();
            v235 = v505[0];
            *(_QWORD *)v234 = *(_QWORD *)v505[0];
            *(_QWORD *)(v234 + 8) = *(_QWORD *)(v235 + 8);
            v236 = *(_QWORD *)(v235 + 16);
            *(_QWORD *)(v234 + 16) = v236;
            if (v236)
            {
              v237 = (unsigned int *)(v236 + 8);
              do
                v238 = __ldxr(v237);
              while (__stxr(v238 + 1, v237));
            }
            v239 = *(_OWORD *)(v235 + 24);
            v240 = *(_OWORD *)(v235 + 40);
            *(_OWORD *)(v234 + 56) = *(_OWORD *)(v235 + 56);
            *(_OWORD *)(v234 + 40) = v240;
            *(_OWORD *)(v234 + 24) = v239;
            v505[0] = v234;
            *(_QWORD *)v234 = 1;
            do
            {
              v241 = __ldaxr((unint64_t *)v25);
              v189 = --v241 == 0;
            }
            while (__stlxr(v241, (unint64_t *)v25));
            goto LABEL_506;
          case 9:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v129 = (_QWORD *)operator new();
            v130 = v505[0] + 8;
            *v129 = *(_QWORD *)v505[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v129 + 1, v130);
            v505[0] = (uint64_t)v129;
            *v129 = 1;
            do
            {
              v131 = __ldaxr((unint64_t *)v25);
              v132 = --v131 == 0;
            }
            while (__stlxr(v131, (unint64_t *)v25));
            goto LABEL_328;
          default:
            goto LABEL_732;
        }
      case 3:
        v79 = *(_QWORD *)v506;
        v80 = (char **)(*(_QWORD *)v506 + 8);
        switch(BYTE4(v505[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_511;
          case 2:
            if (*(_QWORD *)v25 != 1)
            {
              v81 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v81, v505[0]);
              v505[0] = (uint64_t)v81;
              *v81 = 1;
              do
              {
                v82 = __ldaxr((unint64_t *)v25);
                v83 = v82 - 1;
              }
              while (__stlxr(v83, (unint64_t *)v25));
              if (!v83)
              {
                if (*(char *)(v25 + 31) < 0)
                  operator delete(*(void **)(v25 + 8));
                MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
              }
            }
            v67 = v505[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v503, (_QWORD *)(v79 + 8));
            goto LABEL_156;
          case 3:
            if (*(_QWORD *)v25 != 1)
            {
              v118 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v118, v505[0]);
              v505[0] = (uint64_t)v118;
              *v118 = 1;
              do
              {
                v119 = __ldaxr((unint64_t *)v25);
                v120 = v119 - 1;
              }
              while (__stlxr(v120, (unint64_t *)v25));
              if (!v120)
              {
                v121 = *(void **)(v25 + 8);
                if (v121)
                {
                  *(_QWORD *)(v25 + 16) = v121;
                  operator delete(v121);
                }
                MEMORY[0x219A19A08](v25, 0x1080C409938AC02);
              }
            }
            if (v505[0] == v79)
              goto LABEL_512;
            v102 = (char *)(v505[0] + 8);
            v122 = (uint64_t *)(v79 + 16);
            goto LABEL_204;
          case 4:
            if (*(_QWORD *)v25 != 1)
            {
              v249 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v249, v505[0]);
              v505[0] = (uint64_t)v249;
              *v249 = 1;
              do
              {
                v250 = __ldaxr((unint64_t *)v25);
                v251 = v250 - 1;
              }
              while (__stlxr(v251, (unint64_t *)v25));
              if (!v251)
              {
                *(_QWORD *)v494 = v25 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
                MEMORY[0x219A19A08](v25, 0x1020C405E66F15BLL);
              }
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(v505[0] + 8), *(_QWORD **)(v79 + 8), *(_QWORD **)(v79 + 16), (uint64_t)(*(_QWORD *)(v79 + 16) - *(_QWORD *)(v79 + 8)) >> 3);
            goto LABEL_512;
          case 5:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v193 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v193, v505[0]);
            v505[0] = (uint64_t)v193;
            *v193 = 1;
            do
            {
              v194 = __ldaxr((unint64_t *)v25);
              v135 = --v194 == 0;
            }
            while (__stlxr(v194, (unint64_t *)v25));
            goto LABEL_483;
          case 8:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v262 = operator new();
            v263 = v505[0];
            *(_QWORD *)v262 = *(_QWORD *)v505[0];
            *(_QWORD *)(v262 + 8) = *(_QWORD *)(v263 + 8);
            v264 = *(_QWORD *)(v263 + 16);
            *(_QWORD *)(v262 + 16) = v264;
            if (v264)
            {
              v265 = (unsigned int *)(v264 + 8);
              do
                v266 = __ldxr(v265);
              while (__stxr(v266 + 1, v265));
            }
            v267 = *(_OWORD *)(v263 + 24);
            v268 = *(_OWORD *)(v263 + 40);
            *(_OWORD *)(v262 + 56) = *(_OWORD *)(v263 + 56);
            *(_OWORD *)(v262 + 40) = v268;
            *(_OWORD *)(v262 + 24) = v267;
            v505[0] = v262;
            *(_QWORD *)v262 = 1;
            do
            {
              v269 = __ldaxr((unint64_t *)v25);
              v189 = --v269 == 0;
            }
            while (__stlxr(v269, (unint64_t *)v25));
            goto LABEL_506;
          case 9:
            if (*(_QWORD *)v25 != 1)
            {
              v146 = (_QWORD *)operator new();
              v147 = v505[0] + 8;
              *v146 = *(_QWORD *)v505[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v146 + 1, v147);
              v505[0] = (uint64_t)v146;
              *v146 = 1;
              do
              {
                v148 = __ldaxr((unint64_t *)v25);
                v149 = v148 - 1;
              }
              while (__stlxr(v149, (unint64_t *)v25));
              if (!v149)
              {
                v150 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v25);
                MEMORY[0x219A19A08](v150, 0x1030C407B73B9F7);
              }
            }
            v151 = (_QWORD *)v505[0];
            v503 = 0uLL;
            v504 = 0;
            v500 = 0;
            v501 = 0;
            v502 = 0;
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v80, &v497);
            turi::flexible_type_impl::ndarray<double>::ndarray(v494, &v497, (uint64_t)&v503, (uint64_t)&v500, 0);
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v497);
            if (v500)
            {
              v501 = v500;
              operator delete(v500);
            }
            if ((_QWORD)v503)
            {
              *((_QWORD *)&v503 + 1) = v503;
              operator delete((void *)v503);
            }
            goto LABEL_362;
          default:
            goto LABEL_732;
        }
      case 4:
        v63 = *(_QWORD *)v506;
        switch(BYTE4(v505[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_511;
          case 2:
            if (*(_QWORD *)v25 != 1)
            {
              v64 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v64, v505[0]);
              v505[0] = (uint64_t)v64;
              *v64 = 1;
              do
              {
                v65 = __ldaxr((unint64_t *)v25);
                v66 = v65 - 1;
              }
              while (__stlxr(v66, (unint64_t *)v25));
              if (!v66)
              {
                if (*(char *)(v25 + 31) < 0)
                  operator delete(*(void **)(v25 + 8));
                MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
              }
            }
            v67 = v505[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v503, (uint64_t *)(v63 + 8));
            goto LABEL_156;
          case 3:
            if (*(_QWORD *)v25 != 1)
            {
              v94 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v94, v505[0]);
              v505[0] = (uint64_t)v94;
              *v94 = 1;
              do
              {
                v95 = __ldaxr((unint64_t *)v25);
                v96 = v95 - 1;
              }
              while (__stlxr(v96, (unint64_t *)v25));
              if (!v96)
              {
                v97 = *(void **)(v25 + 8);
                if (v97)
                {
                  *(_QWORD *)(v25 + 16) = v97;
                  operator delete(v97);
                }
                MEMORY[0x219A19A08](v25, 0x1080C409938AC02);
              }
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v494, (_QWORD *)(v505[0] + 8), (_QWORD *)(v63 + 8));
            goto LABEL_512;
          case 4:
            if (*(_QWORD *)v25 != 1)
            {
              v176 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v176, v505[0]);
              v505[0] = (uint64_t)v176;
              *v176 = 1;
              do
              {
                v177 = __ldaxr((unint64_t *)v25);
                v178 = v177 - 1;
              }
              while (__stlxr(v178, (unint64_t *)v25));
              if (!v178)
              {
                *(_QWORD *)v494 = v25 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
                MEMORY[0x219A19A08](v25, 0x1020C405E66F15BLL);
              }
            }
            if (v505[0] != v63)
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v505[0] + 8, *(uint64_t **)(v63 + 8), *(uint64_t **)(v63 + 16), (uint64_t)(*(_QWORD *)(v63 + 16) - *(_QWORD *)(v63 + 8)) >> 4);
            goto LABEL_512;
          case 5:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v133 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v133, v505[0]);
            v505[0] = (uint64_t)v133;
            *v133 = 1;
            do
            {
              v134 = __ldaxr((unint64_t *)v25);
              v135 = --v134 == 0;
            }
            while (__stlxr(v134, (unint64_t *)v25));
            goto LABEL_483;
          case 8:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v181 = operator new();
            v182 = v505[0];
            *(_QWORD *)v181 = *(_QWORD *)v505[0];
            *(_QWORD *)(v181 + 8) = *(_QWORD *)(v182 + 8);
            v183 = *(_QWORD *)(v182 + 16);
            *(_QWORD *)(v181 + 16) = v183;
            if (v183)
            {
              v184 = (unsigned int *)(v183 + 8);
              do
                v185 = __ldxr(v184);
              while (__stxr(v185 + 1, v184));
            }
            v186 = *(_OWORD *)(v182 + 24);
            v187 = *(_OWORD *)(v182 + 40);
            *(_OWORD *)(v181 + 56) = *(_OWORD *)(v182 + 56);
            *(_OWORD *)(v181 + 40) = v187;
            *(_OWORD *)(v181 + 24) = v186;
            v505[0] = v181;
            *(_QWORD *)v181 = 1;
            do
            {
              v188 = __ldaxr((unint64_t *)v25);
              v189 = --v188 == 0;
            }
            while (__stlxr(v188, (unint64_t *)v25));
            goto LABEL_506;
          case 9:
            if (*(_QWORD *)v25 != 1)
            {
              v110 = (_QWORD *)operator new();
              v111 = v505[0] + 8;
              *v110 = *(_QWORD *)v505[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v110 + 1, v111);
              v505[0] = (uint64_t)v110;
              *v110 = 1;
              do
              {
                v112 = __ldaxr((unint64_t *)v25);
                v113 = v112 - 1;
              }
              while (__stlxr(v113, (unint64_t *)v25));
              if (!v113)
              {
                v114 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v25);
                MEMORY[0x219A19A08](v114, 0x1030C407B73B9F7);
              }
            }
            v115 = (_QWORD *)v505[0];
            v504 = 0;
            v503 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v503, *(uint64_t **)(v63 + 8), *(uint64_t **)(v63 + 16), (uint64_t)(*(_QWORD *)(v63 + 16) - *(_QWORD *)(v63 + 8)) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v503, v494);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v115 + 1), (__int128 *)v494);
            v116 = (void *)v115[3];
            if (v116)
            {
              v115[4] = v116;
              operator delete(v116);
              v115[3] = 0;
              v115[4] = 0;
              v115[5] = 0;
            }
            v117 = (void *)v115[6];
            *(_OWORD *)(v115 + 3) = *(_OWORD *)&v494[16];
            v115[5] = *(_QWORD *)v495;
            *(_OWORD *)&v494[16] = 0uLL;
            *(_QWORD *)v495 = 0;
            if (v117)
            {
              v115[7] = v117;
              operator delete(v117);
              v115[6] = 0;
              v115[7] = 0;
              v115[8] = 0;
            }
            *((_OWORD *)v115 + 3) = *(_OWORD *)&v495[8];
            v115[8] = *(_QWORD *)&v495[24];
            memset(&v495[8], 0, 24);
            v115[9] = v496;
            turi::flexible_type_impl::ndarray<double>::~ndarray(v494);
            v500 = (void **)&v503;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v500);
            goto LABEL_512;
          default:
            goto LABEL_732;
        }
      case 5:
        v84 = *(_QWORD *)v506;
        switch(BYTE4(v505[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_511;
          case 2:
            if (*(_QWORD *)v25 != 1)
            {
              v85 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v85, v505[0]);
              v505[0] = (uint64_t)v85;
              *v85 = 1;
              do
              {
                v86 = __ldaxr((unint64_t *)v25);
                v87 = v86 - 1;
              }
              while (__stlxr(v87, (unint64_t *)v25));
              if (!v87)
              {
                if (*(char *)(v25 + 31) < 0)
                  operator delete(*(void **)(v25 + 8));
                MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
              }
            }
            v77 = v505[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v503, (_QWORD *)(v84 + 8));
LABEL_648:
            v92 = v77 + 8;
            if (*(char *)(v77 + 31) < 0)
              goto LABEL_157;
            goto LABEL_158;
          case 3:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v140 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v140, v505[0]);
            v505[0] = (uint64_t)v140;
            *v140 = 1;
            do
            {
              v141 = __ldaxr((unint64_t *)v25);
              v109 = --v141 == 0;
            }
            while (__stlxr(v141, (unint64_t *)v25));
            goto LABEL_384;
          case 4:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v300 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v300, v505[0]);
            v505[0] = (uint64_t)v300;
            *v300 = 1;
            do
            {
              v301 = __ldaxr((unint64_t *)v25);
              v199 = --v301 == 0;
            }
            while (__stlxr(v301, (unint64_t *)v25));
            goto LABEL_496;
          case 5:
            if (*(_QWORD *)v25 != 1)
            {
              v246 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v246, v505[0]);
              v505[0] = (uint64_t)v246;
              *v246 = 1;
              do
              {
                v247 = __ldaxr((unint64_t *)v25);
                v248 = v247 - 1;
              }
              while (__stlxr(v248, (unint64_t *)v25));
              if (!v248)
              {
                *(_QWORD *)v494 = v25 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
                MEMORY[0x219A19A08](v25, 0x1020C405E66F15BLL);
              }
            }
            if (v505[0] != v84)
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v505[0] + 8), *(uint64_t **)(v84 + 8), *(uint64_t **)(v84 + 16), (uint64_t)(*(_QWORD *)(v84 + 16) - *(_QWORD *)(v84 + 8)) >> 5);
            goto LABEL_512;
          case 8:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v304 = operator new();
            v305 = v505[0];
            *(_QWORD *)v304 = *(_QWORD *)v505[0];
            *(_QWORD *)(v304 + 8) = *(_QWORD *)(v305 + 8);
            v306 = *(_QWORD *)(v305 + 16);
            *(_QWORD *)(v304 + 16) = v306;
            if (v306)
            {
              v307 = (unsigned int *)(v306 + 8);
              do
                v308 = __ldxr(v307);
              while (__stxr(v308 + 1, v307));
            }
            v309 = *(_OWORD *)(v305 + 24);
            v310 = *(_OWORD *)(v305 + 40);
            *(_OWORD *)(v304 + 56) = *(_OWORD *)(v305 + 56);
            *(_OWORD *)(v304 + 40) = v310;
            *(_OWORD *)(v304 + 24) = v309;
            v505[0] = v304;
            *(_QWORD *)v304 = 1;
            do
            {
              v311 = __ldaxr((unint64_t *)v25);
              v189 = --v311 == 0;
            }
            while (__stlxr(v311, (unint64_t *)v25));
            goto LABEL_506;
          case 9:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v190 = (_QWORD *)operator new();
            v191 = v505[0] + 8;
            *v190 = *(_QWORD *)v505[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v190 + 1, v191);
            v505[0] = (uint64_t)v190;
            *v190 = 1;
            do
            {
              v192 = __ldaxr((unint64_t *)v25);
              v132 = --v192 == 0;
            }
            while (__stlxr(v192, (unint64_t *)v25));
            goto LABEL_328;
          default:
            goto LABEL_732;
        }
      case 6:
        switch(BYTE4(v505[1]))
        {
          case 0:
            v62 = (uint64_t)(*(_QWORD *)v506 << 8) >> 8;
            goto LABEL_146;
          case 1:
            v175 = (double)*(int *)&v506[8] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v506 << 8) >> 8);
LABEL_373:
            *(double *)v505 = v175;
            goto LABEL_512;
          case 2:
            if (*(_QWORD *)v25 != 1)
            {
              v252 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v252, v505[0]);
              v505[0] = (uint64_t)v252;
              *v252 = 1;
              do
              {
                v253 = __ldaxr((unint64_t *)v25);
                v254 = v253 - 1;
              }
              while (__stlxr(v254, (unint64_t *)v25));
              if (!v254)
              {
                if (*(char *)(v25 + 31) < 0)
                  operator delete(*(void **)(v25 + 8));
                MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
              }
            }
            v255 = v505[0];
            *(_QWORD *)&v503 = *(_QWORD *)v506;
            DWORD2(v503) = *(_DWORD *)&v506[8];
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v503, (std::string *)v494);
            v207 = v255 + 8;
            if (*(char *)(v255 + 31) < 0)
              operator delete(*(void **)v207);
            v208 = *(_OWORD *)v494;
            v209 = *(_QWORD *)&v494[16];
LABEL_411:
            *(_QWORD *)(v207 + 16) = v209;
            *(_OWORD *)v207 = v208;
            goto LABEL_512;
          case 3:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v179 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v179, v505[0]);
            v505[0] = (uint64_t)v179;
            *v179 = 1;
            do
            {
              v180 = __ldaxr((unint64_t *)v25);
              v109 = --v180 == 0;
            }
            while (__stlxr(v180, (unint64_t *)v25));
            goto LABEL_384;
          case 4:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v302 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v302, v505[0]);
            v505[0] = (uint64_t)v302;
            *v302 = 1;
            do
            {
              v303 = __ldaxr((unint64_t *)v25);
              v199 = --v303 == 0;
            }
            while (__stlxr(v303, (unint64_t *)v25));
            goto LABEL_496;
          case 5:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v312 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v312, v505[0]);
            v505[0] = (uint64_t)v312;
            *v312 = 1;
            do
            {
              v313 = __ldaxr((unint64_t *)v25);
              v135 = --v313 == 0;
            }
            while (__stlxr(v313, (unint64_t *)v25));
            goto LABEL_483;
          case 6:
            v505[0] = *(_QWORD *)v506;
            LODWORD(v505[1]) = *(_DWORD *)&v506[8];
            goto LABEL_512;
          case 7:
            goto LABEL_511;
          case 8:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v314 = operator new();
            v315 = v505[0];
            *(_QWORD *)v314 = *(_QWORD *)v505[0];
            *(_QWORD *)(v314 + 8) = *(_QWORD *)(v315 + 8);
            v316 = *(_QWORD *)(v315 + 16);
            *(_QWORD *)(v314 + 16) = v316;
            if (v316)
            {
              v317 = (unsigned int *)(v316 + 8);
              do
                v318 = __ldxr(v317);
              while (__stxr(v318 + 1, v317));
            }
            v319 = *(_OWORD *)(v315 + 24);
            v320 = *(_OWORD *)(v315 + 40);
            *(_OWORD *)(v314 + 56) = *(_OWORD *)(v315 + 56);
            *(_OWORD *)(v314 + 40) = v320;
            *(_OWORD *)(v314 + 24) = v319;
            v505[0] = v314;
            *(_QWORD *)v314 = 1;
            do
            {
              v321 = __ldaxr((unint64_t *)v25);
              v189 = --v321 == 0;
            }
            while (__stlxr(v321, (unint64_t *)v25));
            goto LABEL_506;
          case 9:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v200 = (_QWORD *)operator new();
            v201 = v505[0] + 8;
            *v200 = *(_QWORD *)v505[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
            v505[0] = (uint64_t)v200;
            *v200 = 1;
            do
            {
              v202 = __ldaxr((unint64_t *)v25);
              v132 = --v202 == 0;
            }
            while (__stlxr(v202, (unint64_t *)v25));
            goto LABEL_328;
          default:
            goto LABEL_732;
        }
      case 7:
        switch(BYTE4(v505[1]))
        {
          case 0:
          case 6:
            goto LABEL_511;
          case 1:
            v62 = 0x7FF8000000000000;
LABEL_146:
            v505[0] = v62;
            goto LABEL_512;
          case 2:
            if (*(_QWORD *)v25 != 1)
            {
              v136 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v136, v505[0]);
              v505[0] = (uint64_t)v136;
              *v136 = 1;
              do
              {
                v137 = __ldaxr((unint64_t *)v25);
                v138 = v137 - 1;
              }
              while (__stlxr(v138, (unint64_t *)v25));
              if (!v138)
              {
                if (*(char *)(v25 + 31) < 0)
                  operator delete(*(void **)(v25 + 8));
                MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
              }
            }
            v139 = v505[0] + 8;
            if (*(char *)(v505[0] + 31) < 0)
              operator delete(*(void **)v139);
            *(_QWORD *)v139 = 0;
            *(_QWORD *)(v139 + 8) = 0;
            *(_QWORD *)(v139 + 16) = 0;
            goto LABEL_512;
          case 3:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v242 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v242, v505[0]);
            v505[0] = (uint64_t)v242;
            *v242 = 1;
            do
            {
              v243 = __ldaxr((unint64_t *)v25);
              v109 = --v243 == 0;
            }
            while (__stlxr(v243, (unint64_t *)v25));
LABEL_384:
            if (!v109)
              goto LABEL_511;
            v244 = *(void **)(v25 + 8);
            v245 = 0x1080C409938AC02;
            if (v244)
            {
              *(_QWORD *)(v25 + 16) = v244;
              operator delete(v244);
              v245 = 0x1080C409938AC02;
            }
            goto LABEL_510;
          case 4:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v260 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v260, v505[0]);
            v505[0] = (uint64_t)v260;
            *v260 = 1;
            do
            {
              v261 = __ldaxr((unint64_t *)v25);
              v199 = --v261 == 0;
            }
            while (__stlxr(v261, (unint64_t *)v25));
            goto LABEL_496;
          case 5:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v195 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v195, v505[0]);
            v505[0] = (uint64_t)v195;
            *v195 = 1;
            do
            {
              v196 = __ldaxr((unint64_t *)v25);
              v135 = --v196 == 0;
            }
            while (__stlxr(v196, (unint64_t *)v25));
            goto LABEL_483;
          case 7:
            goto LABEL_512;
          case 8:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v270 = operator new();
            v271 = v505[0];
            *(_QWORD *)v270 = *(_QWORD *)v505[0];
            *(_QWORD *)(v270 + 8) = *(_QWORD *)(v271 + 8);
            v272 = *(_QWORD *)(v271 + 16);
            *(_QWORD *)(v270 + 16) = v272;
            if (v272)
            {
              v273 = (unsigned int *)(v272 + 8);
              do
                v274 = __ldxr(v273);
              while (__stxr(v274 + 1, v273));
            }
            v275 = *(_OWORD *)(v271 + 24);
            v276 = *(_OWORD *)(v271 + 40);
            *(_OWORD *)(v270 + 56) = *(_OWORD *)(v271 + 56);
            *(_OWORD *)(v270 + 40) = v276;
            *(_OWORD *)(v270 + 24) = v275;
            v505[0] = v270;
            *(_QWORD *)v270 = 1;
            do
            {
              v277 = __ldaxr((unint64_t *)v25);
              v189 = --v277 == 0;
            }
            while (__stlxr(v277, (unint64_t *)v25));
            goto LABEL_506;
          case 9:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v160 = (_QWORD *)operator new();
            v161 = v505[0] + 8;
            *v160 = *(_QWORD *)v505[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v160 + 1, v161);
            v505[0] = (uint64_t)v160;
            *v160 = 1;
            do
            {
              v162 = __ldaxr((unint64_t *)v25);
              v132 = --v162 == 0;
            }
            while (__stlxr(v162, (unint64_t *)v25));
LABEL_328:
            if (!v132)
              goto LABEL_511;
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v25);
            v203 = 2071181815;
            goto LABEL_509;
          default:
            goto LABEL_732;
        }
      case 8:
        v88 = (uint64_t *)(*(_QWORD *)v506 + 8);
        switch(BYTE4(v505[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_511;
          case 2:
            if (*(_QWORD *)v25 != 1)
            {
              v89 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v89, v505[0]);
              v505[0] = (uint64_t)v89;
              *v89 = 1;
              do
              {
                v90 = __ldaxr((unint64_t *)v25);
                v91 = v90 - 1;
              }
              while (__stlxr(v91, (unint64_t *)v25));
              if (!v91)
              {
                if (*(char *)(v25 + 31) < 0)
                  operator delete(*(void **)(v25 + 8));
                MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
              }
            }
            v67 = v505[0];
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_156;
          case 3:
            if (*(_QWORD *)v25 != 1)
            {
              v152 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v152, v505[0]);
              v505[0] = (uint64_t)v152;
              *v152 = 1;
              do
              {
                v153 = __ldaxr((unint64_t *)v25);
                v154 = v153 - 1;
              }
              while (__stlxr(v154, (unint64_t *)v25));
              if (!v154)
              {
                v155 = *(void **)(v25 + 8);
                if (v155)
                {
                  *(_QWORD *)(v25 + 16) = v155;
                  operator delete(v155);
                }
                v16 = MEMORY[0x219A19A08](v25, 0x1080C409938AC02);
              }
            }
            v156 = (_QWORD *)v505[0];
            turi::flexible_type_impl::get_vec_visitor::operator()(v88, (double **)v494, *(unint64_t *)&v16);
            v157 = (void *)v156[1];
            if (v157)
            {
              v156[2] = v157;
              operator delete(v157);
              v156[1] = 0;
              v156[2] = 0;
              v156[3] = 0;
            }
            *(_OWORD *)(v156 + 1) = *(_OWORD *)v494;
            v156[3] = *(_QWORD *)&v494[16];
            goto LABEL_512;
          case 4:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v322 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v322, v505[0]);
            v505[0] = (uint64_t)v322;
            *v322 = 1;
            do
            {
              v323 = __ldaxr((unint64_t *)v25);
              v199 = --v323 == 0;
            }
            while (__stlxr(v323, (unint64_t *)v25));
            goto LABEL_496;
          case 5:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v278 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v278, v505[0]);
            v505[0] = (uint64_t)v278;
            *v278 = 1;
            do
            {
              v279 = __ldaxr((unint64_t *)v25);
              v135 = --v279 == 0;
            }
            while (__stlxr(v279, (unint64_t *)v25));
            goto LABEL_483;
          case 8:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v324 = operator new();
            v325 = v505[0];
            *(_QWORD *)v324 = *(_QWORD *)v505[0];
            *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
            v326 = *(_QWORD *)(v325 + 16);
            *(_QWORD *)(v324 + 16) = v326;
            if (v326)
            {
              v327 = (unsigned int *)(v326 + 8);
              do
                v328 = __ldxr(v327);
              while (__stxr(v328 + 1, v327));
            }
            v329 = *(_OWORD *)(v325 + 24);
            v330 = *(_OWORD *)(v325 + 40);
            *(_OWORD *)(v324 + 56) = *(_OWORD *)(v325 + 56);
            *(_OWORD *)(v324 + 40) = v330;
            *(_OWORD *)(v324 + 24) = v329;
            v505[0] = v324;
            *(_QWORD *)v324 = 1;
            do
            {
              v331 = __ldaxr((unint64_t *)v25);
              v189 = --v331 == 0;
            }
            while (__stlxr(v331, (unint64_t *)v25));
LABEL_506:
            if (!v189)
              goto LABEL_511;
            boost::detail::shared_count::~shared_count((unsigned int **)(v25 + 16));
            v203 = -235920773;
LABEL_509:
            v245 = v203 | 0x1030C4000000000;
            goto LABEL_510;
          case 9:
            if (*(_QWORD *)v25 != 1)
            {
              v225 = (_QWORD *)operator new();
              v226 = v505[0] + 8;
              *v225 = *(_QWORD *)v505[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v225 + 1, v226);
              v505[0] = (uint64_t)v225;
              *v225 = 1;
              do
              {
                v227 = __ldaxr((unint64_t *)v25);
                v228 = v227 - 1;
              }
              while (__stlxr(v228, (unint64_t *)v25));
              if (!v228)
              {
                v229 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v25);
                v16 = MEMORY[0x219A19A08](v229, 0x1030C407B73B9F7);
              }
            }
            v151 = (_QWORD *)v505[0];
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v88, v494, *(unint64_t *)&v16);
LABEL_362:
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v151 + 1), (__int128 *)v494);
            v230 = (void *)v151[3];
            if (v230)
            {
              v151[4] = v230;
              operator delete(v230);
              v151[3] = 0;
              v151[4] = 0;
              v151[5] = 0;
            }
            v231 = (void *)v151[6];
            *(_OWORD *)(v151 + 3) = *(_OWORD *)&v494[16];
            v151[5] = *(_QWORD *)v495;
            *(_OWORD *)&v494[16] = 0uLL;
            *(_QWORD *)v495 = 0;
            if (v231)
            {
              v151[7] = v231;
              operator delete(v231);
              v151[6] = 0;
              v151[7] = 0;
              v151[8] = 0;
            }
            *((_OWORD *)v151 + 3) = *(_OWORD *)&v495[8];
            v151[8] = *(_QWORD *)&v495[24];
            memset(&v495[8], 0, 24);
            v151[9] = v496;
            goto LABEL_712;
          default:
            goto LABEL_732;
        }
      case 9:
        v68 = *(_QWORD *)v506;
        v69 = *(_QWORD *)v506 + 8;
        switch(BYTE4(v505[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_511;
          case 2:
            if (*(_QWORD *)v25 != 1)
            {
              v70 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v70, v505[0]);
              v505[0] = (uint64_t)v70;
              *v70 = 1;
              do
              {
                v71 = __ldaxr((unint64_t *)v25);
                v72 = v71 - 1;
              }
              while (__stlxr(v72, (unint64_t *)v25));
              if (!v72)
              {
                if (*(char *)(v25 + 31) < 0)
                  operator delete(*(void **)(v25 + 8));
                MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
              }
            }
            v67 = v505[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v503, (_QWORD *)(v68 + 8));
LABEL_156:
            v92 = v67 + 8;
            if (*(char *)(v67 + 31) < 0)
LABEL_157:
              operator delete(*(void **)v92);
LABEL_158:
            v93 = *(_OWORD *)v494;
            *(_QWORD *)(v92 + 16) = *(_QWORD *)&v494[16];
            *(_OWORD *)v92 = v93;
            goto LABEL_512;
          case 3:
            if (*(_QWORD *)v25 != 1)
            {
              v98 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v98, v505[0]);
              v505[0] = (uint64_t)v98;
              *v98 = 1;
              do
              {
                v99 = __ldaxr((unint64_t *)v25);
                v100 = v99 - 1;
              }
              while (__stlxr(v100, (unint64_t *)v25));
              if (!v100)
              {
                v101 = *(void **)(v25 + 8);
                if (v101)
                {
                  *(_QWORD *)(v25 + 16) = v101;
                  operator delete(v101);
                }
                MEMORY[0x219A19A08](v25, 0x1080C409938AC02);
              }
            }
            v102 = (char *)(v505[0] + 8);
            if (!*(_QWORD *)(v68 + 72))
            {
              v104 = *(uint64_t **)(v68 + 24);
              v103 = *(uint64_t **)(v68 + 32);
              v105 = *(_QWORD **)(v68 + 8);
              if (v103 == v104 || v105 == 0)
              {
                v426 = 0;
              }
              else
              {
                v426 = 1;
                do
                {
                  v427 = *v104++;
                  v426 *= v427;
                }
                while (v104 != v103);
              }
              if (v426 == (uint64_t)(v105[1] - *v105) >> 3
                && turi::flexible_type_impl::ndarray<double>::last_index((_QWORD *)(v68 + 8)) == (uint64_t)(*(_QWORD *)(*(_QWORD *)v69 + 8) - **(_QWORD **)v69) >> 3)
              {
                if (!turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(v68 + 8)))
                  turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                v80 = *(char ***)v69;
                if (v102 != (char *)v80)
                {
                  v122 = (uint64_t *)(v80 + 1);
LABEL_204:
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v102, *v80, *v122, (*v122 - (uint64_t)*v80) >> 3);
                }
                goto LABEL_512;
              }
            }
            if (!turi::flexible_type_impl::ndarray<double>::is_valid((_QWORD *)(v68 + 8)))
              turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
            if (turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(v68 + 8)))
            {
              turi::flexible_type_impl::ndarray<double>::ndarray(v494, v68 + 8);
              goto LABEL_709;
            }
            v503 = 0uLL;
            v504 = 0;
            v500 = 0;
            v501 = 0;
            v502 = 0;
            v497 = 0;
            v498 = 0;
            v499 = 0;
            turi::flexible_type_impl::ndarray<double>::ndarray(v494, (uint64_t)&v503, (uint64_t)&v500, (uint64_t)&v497, 0);
            if (v497)
            {
              v498 = v497;
              operator delete(v497);
            }
            if (v500)
            {
              v501 = v500;
              operator delete(v500);
            }
            if ((_QWORD)v503)
            {
              *((_QWORD *)&v503 + 1) = v503;
              operator delete((void *)v503);
            }
            v496 = 0;
            if (&v494[16] != (_BYTE *)(v68 + 24))
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v494[16], *(char **)(v68 + 24), *(_QWORD *)(v68 + 32), (uint64_t)(*(_QWORD *)(v68 + 32) - *(_QWORD *)(v68 + 24)) >> 3);
            v429 = *(uint64_t **)(v68 + 24);
            v428 = *(uint64_t **)(v68 + 32);
            if (v428 == v429 || !*(_QWORD *)v69)
            {
              v430 = 0;
            }
            else
            {
              v430 = 1;
              do
              {
                v431 = *v429++;
                v430 *= v431;
              }
              while (v429 != v428);
            }
            std::vector<double>::resize(*(uint64_t *)v494, v430);
            std::vector<unsigned long>::resize((uint64_t)&v495[8], (uint64_t)(*(_QWORD *)(v68 + 32) - *(_QWORD *)(v68 + 24)) >> 3);
            if (*(_QWORD *)&v494[24] == *(_QWORD *)&v494[16] || *(_QWORD *)(*(_QWORD *)v494 + 8) == **(_QWORD **)v494)
              goto LABEL_709;
            std::vector<std::pair<unsigned long,unsigned long>>::vector(&v503, (uint64_t)(*(_QWORD *)(v68 + 56) - *(_QWORD *)(v68 + 48)) >> 3);
            v432 = *(_QWORD *)(v68 + 48);
            v433 = *(_QWORD *)(v68 + 56);
            v434 = (unint64_t *)v503;
            v435 = v433 - v432;
            if (v433 != v432)
            {
              v436 = 0;
              v437 = v435 >> 3;
              if (v437 <= 1)
                v437 = 1;
              v438 = (_QWORD *)(v503 + 8);
              do
              {
                *(v438 - 1) = *(_QWORD *)(v432 + 8 * v436);
                *v438 = v436++;
                v438 += 2;
              }
              while (v437 != v436);
            }
            std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v503 + 1), *((unint64_t **)&v503 + 1), (uint64_t)v434, v434);
            v439 = v503;
            v440 = *(_QWORD *)&v495[8];
            *(_QWORD *)(*(_QWORD *)&v495[8] + 8 * *(_QWORD *)(v503 + 8)) = 1;
            v441 = *(_QWORD *)(v68 + 56) - *(_QWORD *)(v68 + 48);
            if ((unint64_t)v441 >= 9)
            {
              v442 = v441 >> 3;
              v443 = *(_QWORD *)&v494[16];
              if (v442 <= 2)
                v442 = 2;
              v444 = (uint64_t *)(v439 + 24);
              v445 = v442 - 1;
              do
              {
                v446 = *(_QWORD *)(v443 + 8 * *(v444 - 2)) * *(_QWORD *)(v440 + 8 * *(v444 - 2));
                v447 = *v444;
                v444 += 2;
                *(_QWORD *)(v440 + 8 * v447) = v446;
                --v445;
              }
              while (v445);
            }
            v448 = (uint64_t)(*(_QWORD *)(v68 + 32) - *(_QWORD *)(v68 + 24)) >> 3;
            v497 = 0;
            std::vector<unsigned long>::vector(&v500, v448, &v497);
            v449 = v500;
            v450 = v501;
            v451 = (char *)v501 - (char *)v500;
            v452 = v501 - v500;
            v453 = v452 - 1;
            if (v452 <= 1)
              v454 = 1;
            else
              v454 = v501 - v500;
            v455 = *(uint64_t **)&v495[8];
            v456 = **(_QWORD **)v494;
            break;
          case 4:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v197 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v197, v505[0]);
            v505[0] = (uint64_t)v197;
            *v197 = 1;
            do
            {
              v198 = __ldaxr((unint64_t *)v25);
              v199 = --v198 == 0;
            }
            while (__stlxr(v198, (unint64_t *)v25));
LABEL_496:
            if (!v199)
              goto LABEL_511;
            *(_QWORD *)v494 = v25 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
            goto LABEL_499;
          case 5:
            if (*(_QWORD *)v25 == 1)
              goto LABEL_511;
            v158 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v158, v505[0]);
            v505[0] = (uint64_t)v158;
            *v158 = 1;
            do
            {
              v159 = __ldaxr((unint64_t *)v25);
              v135 = --v159 == 0;
            }
            while (__stlxr(v159, (unint64_t *)v25));
LABEL_483:
            if (!v135)
              goto LABEL_511;
            *(_QWORD *)v494 = v25 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
LABEL_499:
            v245 = 0x1020C405E66F15BLL;
LABEL_510:
            MEMORY[0x219A19A08](v25, v245);
LABEL_511:
            turi::flexible_type_fail(0);
            goto LABEL_512;
          case 8:
            if (*(_QWORD *)v25 != 1)
            {
              v211 = operator new();
              v212 = v505[0];
              *(_QWORD *)v211 = *(_QWORD *)v505[0];
              *(_QWORD *)(v211 + 8) = *(_QWORD *)(v212 + 8);
              v213 = *(_QWORD *)(v212 + 16);
              *(_QWORD *)(v211 + 16) = v213;
              if (v213)
              {
                v214 = (unsigned int *)(v213 + 8);
                do
                  v215 = __ldxr(v214);
                while (__stxr(v215 + 1, v214));
              }
              v216 = *(_OWORD *)(v212 + 24);
              v217 = *(_OWORD *)(v212 + 40);
              *(_OWORD *)(v211 + 56) = *(_OWORD *)(v212 + 56);
              *(_OWORD *)(v211 + 40) = v217;
              *(_OWORD *)(v211 + 24) = v216;
              v505[0] = v211;
              *(_QWORD *)v211 = 1;
              do
              {
                v218 = __ldaxr((unint64_t *)v25);
                v219 = v218 - 1;
              }
              while (__stlxr(v219, (unint64_t *)v25));
              if (!v219)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v25 + 16));
                MEMORY[0x219A19A08](v25, 0x1030C40F1F0227BLL);
              }
            }
            v220 = v505[0];
            turi::flexible_type_impl::get_img_visitor::operator()(v69, (turi::image_type *)v494);
            v221 = *(_OWORD *)v494;
            *(_OWORD *)v494 = 0uLL;
            v222 = *(_OWORD *)(v220 + 8);
            *(_OWORD *)(v220 + 8) = v221;
            v503 = v222;
            boost::detail::shared_count::~shared_count((unsigned int **)&v503 + 1);
            v223 = *(_OWORD *)&v494[16];
            v224 = *(_OWORD *)v495;
            *(_OWORD *)(v220 + 56) = *(_OWORD *)&v495[16];
            *(_OWORD *)(v220 + 40) = v224;
            *(_OWORD *)(v220 + 24) = v223;
            boost::detail::shared_count::~shared_count((unsigned int **)&v494[8]);
            goto LABEL_512;
          case 9:
            if (*(_QWORD *)v25 != 1)
            {
              v123 = (_QWORD *)operator new();
              v124 = v505[0] + 8;
              *v123 = *(_QWORD *)v505[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v123 + 1, v124);
              v505[0] = (uint64_t)v123;
              *v123 = 1;
              do
              {
                v125 = __ldaxr((unint64_t *)v25);
                v126 = v125 - 1;
              }
              while (__stlxr(v126, (unint64_t *)v25));
              if (!v126)
              {
                v127 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v25);
                MEMORY[0x219A19A08](v127, 0x1030C407B73B9F7);
              }
            }
            v128 = v505[0];
            std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v505[0] + 8), (uint64_t *)(v68 + 8));
            if (v128 != v68)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v128 + 24), *(char **)(v68 + 24), *(_QWORD *)(v68 + 32), (uint64_t)(*(_QWORD *)(v68 + 32) - *(_QWORD *)(v68 + 24)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v128 + 48), *(char **)(v68 + 48), *(_QWORD *)(v68 + 56), (uint64_t)(*(_QWORD *)(v68 + 56) - *(_QWORD *)(v68 + 48)) >> 3);
            }
            *(_QWORD *)(v128 + 72) = *(_QWORD *)(v68 + 72);
            goto LABEL_512;
          default:
            goto LABEL_732;
        }
        break;
      default:
LABEL_732:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
    while (1)
    {
      if (v450 == v449)
      {
        v464 = 0;
        v465 = *(_QWORD *)(**(_QWORD **)(v68 + 8) + 8 * *(_QWORD *)(v68 + 72));
      }
      else
      {
        v457 = 0;
        v458 = *(uint64_t **)(v68 + 48);
        v459 = v449;
        v460 = v454;
        do
        {
          v462 = (uint64_t)*v459++;
          v461 = v462;
          v463 = *v458++;
          v457 += v463 * v461;
          --v460;
        }
        while (v460);
        v464 = 0;
        v465 = *(_QWORD *)(**(_QWORD **)(v68 + 8) + 8 * (*(_QWORD *)(v68 + 72) + v457));
        v466 = v449;
        v467 = v455;
        v468 = v454;
        do
        {
          v470 = (uint64_t)*v466++;
          v469 = v470;
          v471 = *v467++;
          v464 += v471 * v469;
          --v468;
        }
        while (v468);
      }
      *(_QWORD *)(v456 + 8 * v464) = v465;
      v472 = v450 - v449;
      v473 = v452 - 1;
      if (v451 >= 1)
      {
        v474 = *(_QWORD *)(v68 + 24);
        v475 = (unint64_t)v449[v453] + 1;
        v449[v453] = (void *)v475;
        if (v475 >= *(_QWORD *)(v474 + 8 * v453))
        {
          v476 = v474 - 16;
          v477 = v450 - v449;
          v478 = (unint64_t *)((char *)v449 + (v451 & 0xFFFFFFFFFFFFFFF8) - 16);
          while (1)
          {
            v479 = v477 - 1;
            v478[1] = 0;
            if (v477 - 1 <= 0)
              break;
            v480 = *v478 + 1;
            *v478-- = v480;
            v481 = *(_QWORD *)(v476 + 8 * v477--);
            if (v480 < v481)
            {
              v473 = v479 - 1;
              v472 = 1;
              goto LABEL_703;
            }
          }
LABEL_705:
          if (v449)
          {
            v501 = v449;
            operator delete(v449);
          }
          if ((_QWORD)v503)
          {
            *((_QWORD *)&v503 + 1) = v503;
            operator delete((void *)v503);
          }
LABEL_709:
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v494);
          if (!turi::flexible_type_impl::ndarray<double>::is_full(v494))
            turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
          if (v102 != *(char **)v494)
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v102, **(char ***)v494, *(_QWORD *)(*(_QWORD *)v494 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)v494 + 8) - **(_QWORD **)v494) >> 3);
LABEL_712:
          turi::flexible_type_impl::ndarray<double>::~ndarray(v494);
LABEL_512:
          v332 = ***v12 + 16 * v13;
          if (v505 != (uint64_t *)v332)
          {
            switch(*(_BYTE *)(v332 + 12))
            {
              case 2:
                v333 = *(unint64_t **)v332;
                do
                {
                  v334 = __ldaxr(v333);
                  v335 = v334 - 1;
                }
                while (__stlxr(v335, v333));
                if (!v335)
                {
                  v336 = *(unint64_t **)v332;
                  if (!*(_QWORD *)v332)
                    goto LABEL_555;
                  if (*((char *)v336 + 31) < 0)
                    operator delete((void *)v336[1]);
                  v337 = v336;
                  v338 = 0x1012C404EF22A49;
                  goto LABEL_554;
                }
                break;
              case 3:
                v350 = *(unint64_t **)v332;
                do
                {
                  v351 = __ldaxr(v350);
                  v352 = v351 - 1;
                }
                while (__stlxr(v352, v350));
                if (!v352)
                {
                  v353 = *(unint64_t **)v332;
                  if (!*(_QWORD *)v332)
                    goto LABEL_555;
                  v354 = (void *)v353[1];
                  if (v354)
                  {
                    v353[2] = (unint64_t)v354;
                    operator delete(v354);
                  }
                  v337 = v353;
                  v338 = 0x1080C409938AC02;
                  goto LABEL_554;
                }
                break;
              case 4:
                v339 = *(unint64_t **)v332;
                do
                {
                  v340 = __ldaxr(v339);
                  v341 = v340 - 1;
                }
                while (__stlxr(v341, v339));
                if (!v341)
                {
                  v342 = *(unint64_t **)v332;
                  if (!*(_QWORD *)v332)
                    goto LABEL_555;
                  *(_QWORD *)v494 = v342 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
                  goto LABEL_547;
                }
                break;
              case 5:
                v355 = *(unint64_t **)v332;
                do
                {
                  v356 = __ldaxr(v355);
                  v357 = v356 - 1;
                }
                while (__stlxr(v357, v355));
                if (!v357)
                {
                  v342 = *(unint64_t **)v332;
                  if (!*(_QWORD *)v332)
                    goto LABEL_555;
                  *(_QWORD *)v494 = v342 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
LABEL_547:
                  v337 = v342;
                  v338 = 0x1020C405E66F15BLL;
                  goto LABEL_554;
                }
                break;
              case 8:
                v358 = *(unint64_t **)v332;
                do
                {
                  v359 = __ldaxr(v358);
                  v360 = v359 - 1;
                }
                while (__stlxr(v360, v358));
                if (!v360)
                {
                  v361 = *(unint64_t **)v332;
                  if (!*(_QWORD *)v332)
                    goto LABEL_555;
                  boost::detail::shared_count::~shared_count((unsigned int **)v361 + 2);
                  v337 = v361;
                  v349 = -235920773;
                  goto LABEL_553;
                }
                break;
              case 9:
                v343 = *(unint64_t **)v332;
                do
                {
                  v344 = __ldaxr(v343);
                  v345 = v344 - 1;
                }
                while (__stlxr(v345, v343));
                if (!v345)
                {
                  v346 = *(unint64_t **)v332;
                  if (*(_QWORD *)v332)
                  {
                    v347 = (void *)v346[6];
                    if (v347)
                    {
                      v346[7] = (unint64_t)v347;
                      operator delete(v347);
                    }
                    v348 = (void *)v346[3];
                    if (v348)
                    {
                      v346[4] = (unint64_t)v348;
                      operator delete(v348);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v346 + 1));
                    v337 = v346;
                    v349 = 2071181815;
LABEL_553:
                    v338 = v349 | 0x1030C4000000000;
LABEL_554:
                    MEMORY[0x219A19A08](v337, v338);
                  }
LABEL_555:
                  *(_QWORD *)v332 = 0;
                }
                break;
              default:
                break;
            }
            v362 = v505[0];
            *(_QWORD *)(v332 + 5) = *(uint64_t *)((char *)v505 + 5);
            *(_QWORD *)v332 = v362;
            LODWORD(v362) = BYTE4(v505[1]);
            *(_BYTE *)(v332 + 12) = BYTE4(v505[1]);
            v363 = v362 > 9;
            v364 = (1 << v362) & 0x33C;
            if (!v363 && v364 != 0)
            {
              v366 = *(unint64_t **)v332;
              do
                v367 = __ldaxr(v366);
              while (__stlxr(v367 + 1, v366));
            }
          }
          switch(BYTE4(v505[1]))
          {
            case 2:
              v368 = (unint64_t *)v505[0];
              do
              {
                v369 = __ldaxr(v368);
                v370 = v369 - 1;
              }
              while (__stlxr(v370, v368));
              if (!v370)
              {
                v371 = v505[0];
                if (v505[0])
                {
                  if (*(char *)(v505[0] + 31) < 0)
                    operator delete(*(void **)(v505[0] + 8));
                  v372 = v371;
                  v373 = 0x1012C404EF22A49;
                  goto LABEL_603;
                }
              }
              break;
            case 3:
              v385 = (unint64_t *)v505[0];
              do
              {
                v386 = __ldaxr(v385);
                v387 = v386 - 1;
              }
              while (__stlxr(v387, v385));
              if (!v387)
              {
                v388 = v505[0];
                if (v505[0])
                {
                  v389 = *(void **)(v505[0] + 8);
                  if (v389)
                  {
                    *(_QWORD *)(v505[0] + 16) = v389;
                    operator delete(v389);
                  }
                  v372 = v388;
                  v373 = 0x1080C409938AC02;
                  goto LABEL_603;
                }
              }
              break;
            case 4:
              v374 = (unint64_t *)v505[0];
              do
              {
                v375 = __ldaxr(v374);
                v376 = v375 - 1;
              }
              while (__stlxr(v376, v374));
              if (!v376)
              {
                v377 = v505[0];
                if (v505[0])
                {
                  *(_QWORD *)v494 = v505[0] + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
                  goto LABEL_596;
                }
              }
              break;
            case 5:
              v390 = (unint64_t *)v505[0];
              do
              {
                v391 = __ldaxr(v390);
                v392 = v391 - 1;
              }
              while (__stlxr(v392, v390));
              if (!v392)
              {
                v377 = v505[0];
                if (v505[0])
                {
                  *(_QWORD *)v494 = v505[0] + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
LABEL_596:
                  v372 = v377;
                  v373 = 0x1020C405E66F15BLL;
                  goto LABEL_603;
                }
              }
              break;
            case 8:
              v393 = (unint64_t *)v505[0];
              do
              {
                v394 = __ldaxr(v393);
                v395 = v394 - 1;
              }
              while (__stlxr(v395, v393));
              if (!v395)
              {
                v396 = v505[0];
                if (v505[0])
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v505[0] + 16));
                  v372 = v396;
                  v384 = -235920773;
                  goto LABEL_602;
                }
              }
              break;
            case 9:
              v378 = (unint64_t *)v505[0];
              do
              {
                v379 = __ldaxr(v378);
                v380 = v379 - 1;
              }
              while (__stlxr(v380, v378));
              if (!v380)
              {
                v381 = v505[0];
                if (v505[0])
                {
                  v382 = *(void **)(v505[0] + 48);
                  if (v382)
                  {
                    *(_QWORD *)(v505[0] + 56) = v382;
                    operator delete(v382);
                  }
                  v383 = *(void **)(v381 + 24);
                  if (v383)
                  {
                    *(_QWORD *)(v381 + 32) = v383;
                    operator delete(v383);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v381 + 8);
                  v372 = v381;
                  v384 = 2071181815;
LABEL_602:
                  v373 = v384 | 0x1030C4000000000;
LABEL_603:
                  MEMORY[0x219A19A08](v372, v373);
                }
              }
              break;
            default:
              break;
          }
LABEL_604:
          ++v491;
          switch(v506[12])
          {
            case 2:
              v397 = *(unint64_t **)v506;
              do
              {
                v398 = __ldaxr(v397);
                v399 = v398 - 1;
              }
              while (__stlxr(v399, v397));
              if (!v399)
              {
                v400 = *(_QWORD *)v506;
                if (*(_QWORD *)v506)
                {
                  if (*(char *)(*(_QWORD *)v506 + 31) < 0)
                    operator delete(*(void **)(*(_QWORD *)v506 + 8));
                  v401 = v400;
                  v402 = 0x1012C404EF22A49;
                  goto LABEL_645;
                }
              }
              break;
            case 3:
              v414 = *(unint64_t **)v506;
              do
              {
                v415 = __ldaxr(v414);
                v416 = v415 - 1;
              }
              while (__stlxr(v416, v414));
              if (!v416)
              {
                v417 = *(_QWORD *)v506;
                if (*(_QWORD *)v506)
                {
                  v418 = *(void **)(*(_QWORD *)v506 + 8);
                  if (v418)
                  {
                    *(_QWORD *)(*(_QWORD *)v506 + 16) = v418;
                    operator delete(v418);
                  }
                  v401 = v417;
                  v402 = 0x1080C409938AC02;
                  goto LABEL_645;
                }
              }
              break;
            case 4:
              v403 = *(unint64_t **)v506;
              do
              {
                v404 = __ldaxr(v403);
                v405 = v404 - 1;
              }
              while (__stlxr(v405, v403));
              if (!v405)
              {
                v406 = *(_QWORD *)v506;
                if (*(_QWORD *)v506)
                {
                  *(_QWORD *)v494 = *(_QWORD *)v506 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
                  goto LABEL_638;
                }
              }
              break;
            case 5:
              v419 = *(unint64_t **)v506;
              do
              {
                v420 = __ldaxr(v419);
                v421 = v420 - 1;
              }
              while (__stlxr(v421, v419));
              if (!v421)
              {
                v406 = *(_QWORD *)v506;
                if (*(_QWORD *)v506)
                {
                  *(_QWORD *)v494 = *(_QWORD *)v506 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v494);
LABEL_638:
                  v401 = v406;
                  v402 = 0x1020C405E66F15BLL;
                  goto LABEL_645;
                }
              }
              break;
            case 8:
              v422 = *(unint64_t **)v506;
              do
              {
                v423 = __ldaxr(v422);
                v424 = v423 - 1;
              }
              while (__stlxr(v424, v422));
              if (!v424)
              {
                v425 = *(_QWORD *)v506;
                if (*(_QWORD *)v506)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v506 + 16));
                  v401 = v425;
                  v413 = -235920773;
                  goto LABEL_644;
                }
              }
              break;
            case 9:
              v407 = *(unint64_t **)v506;
              do
              {
                v408 = __ldaxr(v407);
                v409 = v408 - 1;
              }
              while (__stlxr(v409, v407));
              if (!v409)
              {
                v410 = *(_QWORD *)v506;
                if (*(_QWORD *)v506)
                {
                  v411 = *(void **)(*(_QWORD *)v506 + 48);
                  if (v411)
                  {
                    *(_QWORD *)(*(_QWORD *)v506 + 56) = v411;
                    operator delete(v411);
                  }
                  v412 = *(void **)(v410 + 24);
                  if (v412)
                  {
                    *(_QWORD *)(v410 + 32) = v412;
                    operator delete(v412);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v410 + 8);
                  v401 = v410;
                  v413 = 2071181815;
LABEL_644:
                  v402 = v413 | 0x1030C4000000000;
LABEL_645:
                  MEMORY[0x219A19A08](v401, v402);
                }
              }
              break;
            default:
              break;
          }
          ++v13;
          goto LABEL_13;
        }
        v472 = 1;
        v473 = v452 - 1;
      }
LABEL_703:
      if ((v473 & 0x8000000000000000) != 0 || !v472)
        goto LABEL_705;
    }
  }
  turi::query_eval::query_context::emit((uint64_t)this, &v492);
  v482 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
  v9 = v489;
  if (*((_QWORD *)&v492 + 1))
  {
    v483 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
    do
      v484 = __ldaxr(v483);
    while (__stlxr(v484 - 1, v483));
    if (!v484)
    {
      ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
      std::__shared_weak_count::__release_weak(v482);
    }
  }
LABEL_718:
  v485 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
  if (*((_QWORD *)&v493 + 1))
  {
    v486 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
    do
      v487 = __ldaxr(v486);
    while (__stlxr(v487 - 1, v486));
    if (!v487)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v485->__on_zero_shared)(v485, v8);
      std::__shared_weak_count::__release_weak(v485);
    }
  }
  if (v9)
    v488 = 91;
  else
    v488 = 0;
  *(_DWORD *)(a1 + 8) = v488;
}

void sub_2180DB760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  va_list va;
  uint64_t v70;
  uint64_t v71;
  va_list va1;
  uint64_t v73;
  va_list va2;

  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v68 = va_arg(va1, _QWORD);
  v70 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v71 = va_arg(va2, _QWORD);
  v73 = va_arg(va2, _QWORD);
  turi::flexible_type_impl::ndarray<double>::~ndarray((uint64_t *)va2);
  switch(*(_BYTE *)(v11 - 140))
  {
    case 2:
      v13 = *(unint64_t **)(v11 - 152);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (v15)
        goto LABEL_39;
      v16 = *(_QWORD *)(v11 - 152);
      if (!v16)
        goto LABEL_39;
      if (*(char *)(v16 + 31) < 0)
        operator delete(*(void **)(v16 + 8));
      v17 = (_QWORD *)v16;
      v18 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v28 = *(unint64_t **)(v11 - 152);
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (v30)
        goto LABEL_39;
      v31 = *(_QWORD **)(v11 - 152);
      if (!v31)
        goto LABEL_39;
      v32 = (void *)v31[1];
      if (v32)
      {
        v31[2] = v32;
        operator delete(v32);
      }
      v17 = v31;
      v18 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v19 = *(unint64_t **)(v11 - 152);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_39;
      v22 = *(_QWORD **)(v11 - 152);
      if (!v22)
        goto LABEL_39;
      *(_QWORD *)(v11 - 216) = v22 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 216));
      goto LABEL_31;
    case 5:
      v33 = *(unint64_t **)(v11 - 152);
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35)
        goto LABEL_39;
      v22 = *(_QWORD **)(v11 - 152);
      if (!v22)
        goto LABEL_39;
      *(_QWORD *)(v11 - 216) = v22 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 216));
LABEL_31:
      v17 = v22;
      v18 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v36 = *(unint64_t **)(v11 - 152);
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_39;
      v39 = *(_QWORD *)(v11 - 152);
      if (!v39)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v39 + 16));
      v17 = (_QWORD *)v39;
      v27 = -235920773;
      goto LABEL_37;
    case 9:
      v23 = *(unint64_t **)(v11 - 152);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_39;
      v26 = *(_QWORD **)(v11 - 152);
      if (!v26)
        goto LABEL_39;
      v17 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v26);
      v27 = 2071181815;
LABEL_37:
      v18 = v27 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v17, v18);
LABEL_39:
      switch(*(_BYTE *)(v11 - 124))
      {
        case 2:
          v40 = *(unint64_t **)(v11 - 136);
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (v42)
            break;
          v43 = *(_QWORD *)(v11 - 136);
          if (!v43)
            break;
          if (*(char *)(v43 + 31) < 0)
            operator delete(*(void **)(v43 + 8));
          v44 = (_QWORD *)v43;
          v45 = 0x1012C404EF22A49;
          goto LABEL_64;
        case 3:
          v54 = *(unint64_t **)(v11 - 136);
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (v56)
            break;
          v57 = *(_QWORD **)(v11 - 136);
          if (!v57)
            break;
          v58 = (void *)v57[1];
          if (v58)
          {
            v57[2] = v58;
            operator delete(v58);
          }
          v44 = v57;
          v45 = 0x1080C409938AC02;
          goto LABEL_64;
        case 4:
          v46 = *(unint64_t **)(v11 - 136);
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (v48)
            break;
          v49 = *(_QWORD *)(v11 - 136);
          if (!v49)
            goto LABEL_77;
          *(_QWORD *)(v11 - 216) = v49 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 216));
          goto LABEL_70;
        case 5:
          v59 = *(unint64_t **)(v11 - 136);
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (v61)
            break;
          v49 = *(_QWORD *)(v11 - 136);
          if (!v49)
            goto LABEL_77;
          *(_QWORD *)(v11 - 216) = v49 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 216));
LABEL_70:
          v62 = v49;
          v63 = 0x1020C405E66F15BLL;
          goto LABEL_76;
        case 8:
          v64 = *(unint64_t **)(v11 - 136);
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (v66)
            break;
          v67 = *(_QWORD *)(v11 - 136);
          if (!v67)
            goto LABEL_77;
          boost::detail::shared_count::~shared_count((unsigned int **)(v67 + 16));
          v62 = v67;
          v63 = 0x1030C40F1F0227BLL;
LABEL_76:
          MEMORY[0x219A19A08](v62, v63);
LABEL_77:
          *(_QWORD *)(v11 - 136) = 0;
          break;
        case 9:
          v50 = *(unint64_t **)(v11 - 136);
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (v52)
            break;
          v53 = *(_QWORD **)(v11 - 136);
          if (!v53)
            break;
          v44 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v53);
          v45 = 0x1030C407B73B9F7;
LABEL_64:
          MEMORY[0x219A19A08](v44, v45);
          break;
        default:
          break;
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_39;
  }
}

uint64_t std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x58uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_2180DBD78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,0>(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24D92DDE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24D92DE38;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 8);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 40, a2 + 16);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 48);
  return a1;
}

void sub_2180DBDEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node@<X0>(uint64_t ***a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  _OWORD *v10;
  std::string::size_type v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const std::string *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  void *v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  std::string::size_type v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  unint64_t *v61;
  unint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  __int128 v70;
  __int128 v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  BOOL v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  BOOL v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  BOOL v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  BOOL v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  std::string::size_type v109;
  unint64_t *v110;
  unint64_t v111;
  std::string::size_type v112;
  void *v113;
  void *v114;
  unsigned int v115;
  unint64_t *v116;
  unint64_t v117;
  std::string::size_type v118;
  void *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::string::size_type v124;
  double *v125;
  double *v126;
  double v127;
  int v128;
  unint64_t v129;
  char *v130;
  const std::string *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int *v141;
  unsigned int *v142;
  unsigned int v143;
  __int128 v144;
  __int128 v145;
  char *v146;
  char *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  size_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  BOOL v160;
  double v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  BOOL v165;
  unint64_t v166;
  unint64_t v167;
  BOOL v168;
  void *v169;
  void *v170;
  unsigned int v171;
  unint64_t v172;
  unint64_t v173;
  BOOL v174;
  void *v175;
  unint64_t v176;
  unint64_t v177;
  BOOL v178;
  unint64_t v179;
  unint64_t v180;
  BOOL v181;
  uint64_t **v182;
  _OWORD *v183;
  uint64_t **v184;
  _OWORD *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  char *v191;
  const std::string *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  __int128 v200;
  __int128 v201;
  _QWORD *result;
  uint64_t v203;
  std::runtime_error *v204;
  std::string *v205;
  __int128 v206;
  std::runtime_error *exception;
  std::string *v208;
  __int128 v209;
  _OWORD *v210;
  uint64_t ***v211;
  void *v212;
  char *v213;
  char *v214;
  double *v215;
  double *v216;
  char *v217;
  void *__p;
  unsigned int *v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  _QWORD v223[3];
  size_t v224[3];
  size_t v225;
  size_t v226;
  uint64_t v227;
  std::string v228;
  size_t __idx;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  _QWORD v234[3];
  _QWORD *v235;
  std::string v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  LODWORD(__p) = *(_DWORD *)*a1;
  if ((_DWORD)__p != 10)
  {
    *(_QWORD *)&v230 = &__p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v4 = (char *)v3[8] - (char *)v3[7];
  *(_QWORD *)&v230 = v4 >> 4;
  if (v4 != 16)
  {
    __p = &v230;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&v230, "output_types");
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v3 + 1), (const void **)&v230);
  if (SBYTE7(v231) < 0)
    operator delete((void *)v230);
  if (!v6)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
  v7 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v230, "function");
  v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v7 + 4), (const void **)&v230);
  if (SBYTE7(v231) < 0)
    operator delete((void *)v230);
  if (!v8)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
  v210 = a2;
  v235 = 0;
  v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_types");
  *(_QWORD *)&v230 = &__p;
  v10 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 1, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v230);
  switch(*((_BYTE *)v10 + 68))
  {
    case 0:
      v11 = *((_QWORD *)v10 + 7);
      v236.__r_.__value_.__s.__data_[12] = 0;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
      v236.__r_.__value_.__r.__words[0] = v11;
      v216 = 0;
      v217 = 0;
      v215 = 0;
      *(_QWORD *)&v230 = &v215;
      BYTE8(v230) = 0;
      v215 = (double *)operator new(0x10uLL);
      v216 = v215;
      v217 = (char *)(v215 + 2);
      v216 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v217, (uint64_t *)&v236, (uint64_t *)&v236.__r_.__value_.__r.__words[2], (uint64_t)v215);
      switch(v236.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v12 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v13 = __ldaxr(v12);
            v14 = --v13 == 0;
          }
          while (__stlxr(v13, v12));
          goto LABEL_84;
        case 3:
          v86 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v87 = __ldaxr(v86);
            v88 = --v87 == 0;
          }
          while (__stlxr(v87, v86));
          goto LABEL_157;
        case 4:
          v72 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v73 = __ldaxr(v72);
            v74 = --v73 == 0;
          }
          while (__stlxr(v73, v72));
          goto LABEL_141;
        case 5:
          v91 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v92 = __ldaxr(v91);
            v93 = --v92 == 0;
          }
          while (__stlxr(v92, v91));
          goto LABEL_165;
        case 8:
          v98 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v99 = __ldaxr(v98);
            v100 = --v99 == 0;
          }
          while (__stlxr(v99, v98));
          goto LABEL_172;
        case 9:
          v77 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v78 = __ldaxr(v77);
            v79 = --v78 == 0;
          }
          while (__stlxr(v78, v77));
          goto LABEL_147;
        default:
          goto LABEL_178;
      }
      goto LABEL_178;
    case 1:
      v55 = *((_QWORD *)v10 + 7);
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
      v236.__r_.__value_.__s.__data_[12] = 1;
      v236.__r_.__value_.__r.__words[0] = v55;
      v216 = 0;
      v217 = 0;
      v215 = 0;
      *(_QWORD *)&v230 = &v215;
      BYTE8(v230) = 0;
      v215 = (double *)operator new(0x10uLL);
      v216 = v215;
      v217 = (char *)(v215 + 2);
      v216 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v217, (uint64_t *)&v236, (uint64_t *)&v236.__r_.__value_.__r.__words[2], (uint64_t)v215);
      switch(v236.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v56 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v57 = __ldaxr(v56);
            v14 = --v57 == 0;
          }
          while (__stlxr(v57, v56));
          goto LABEL_84;
        case 3:
          v89 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v90 = __ldaxr(v89);
            v88 = --v90 == 0;
          }
          while (__stlxr(v90, v89));
          goto LABEL_157;
        case 4:
          v75 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v76 = __ldaxr(v75);
            v74 = --v76 == 0;
          }
          while (__stlxr(v76, v75));
          goto LABEL_141;
        case 5:
          v94 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v95 = __ldaxr(v94);
            v93 = --v95 == 0;
          }
          while (__stlxr(v95, v94));
          goto LABEL_165;
        case 8:
          v101 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v102 = __ldaxr(v101);
            v100 = --v102 == 0;
          }
          while (__stlxr(v102, v101));
          goto LABEL_172;
        case 9:
          v80 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v81 = __ldaxr(v80);
            v79 = --v81 == 0;
          }
          while (__stlxr(v81, v80));
          goto LABEL_147;
        default:
          goto LABEL_178;
      }
      goto LABEL_178;
    case 2:
      v19 = (const std::string *)(*((_QWORD *)v10 + 7) + 8);
      v236.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
      v236.__r_.__value_.__s.__data_[12] = 0;
      turi::flexible_type::operator=<std::string>((uint64_t *)&v236, v19);
      v215 = 0;
      v216 = 0;
      v217 = 0;
      *(_QWORD *)&v230 = &v215;
      BYTE8(v230) = 0;
      v215 = (double *)operator new(0x10uLL);
      v216 = v215;
      v217 = (char *)(v215 + 2);
      v216 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v217, (uint64_t *)&v236, (uint64_t *)&v236.__r_.__value_.__r.__words[2], (uint64_t)v215);
      switch(v236.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v20 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v21 = __ldaxr(v20);
            v14 = --v21 == 0;
          }
          while (__stlxr(v21, v20));
          goto LABEL_84;
        case 3:
          v116 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v117 = __ldaxr(v116);
            v88 = --v117 == 0;
          }
          while (__stlxr(v117, v116));
          goto LABEL_157;
        case 4:
          v107 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v108 = __ldaxr(v107);
            v74 = --v108 == 0;
          }
          while (__stlxr(v108, v107));
          goto LABEL_141;
        case 5:
          v120 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v121 = __ldaxr(v120);
            v93 = --v121 == 0;
          }
          while (__stlxr(v121, v120));
          goto LABEL_165;
        case 8:
          v122 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v123 = __ldaxr(v122);
            v100 = --v123 == 0;
          }
          while (__stlxr(v123, v122));
          goto LABEL_172;
        case 9:
          v110 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v111 = __ldaxr(v110);
            v79 = --v111 == 0;
          }
          while (__stlxr(v111, v110));
          goto LABEL_147;
        default:
          goto LABEL_178;
      }
      goto LABEL_178;
    case 3:
      v22 = *((_QWORD *)v10 + 7);
      std::vector<turi::flexible_type>::vector(&v215, (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 3);
      v23 = *(_QWORD *)(v22 + 8);
      if (*(_QWORD *)(v22 + 16) != v23)
      {
        v24 = 0;
        do
        {
          v25 = (char *)&v215[2 * v24];
          switch(v25[12])
          {
            case 2:
              v26 = *(unint64_t **)v25;
              do
              {
                v27 = __ldaxr(v26);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, v26));
              if (!v28)
              {
                v29 = *(unint64_t **)v25;
                if (!*(_QWORD *)v25)
                  goto LABEL_72;
                if (*((char *)v29 + 31) < 0)
                  operator delete((void *)v29[1]);
                v30 = v29;
                v31 = 0x1012C404EF22A49;
                goto LABEL_71;
              }
              break;
            case 3:
              v43 = *(unint64_t **)v25;
              do
              {
                v44 = __ldaxr(v43);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, v43));
              if (!v45)
              {
                v46 = *(unint64_t **)v25;
                if (!*(_QWORD *)v25)
                  goto LABEL_72;
                v47 = (void *)v46[1];
                if (v47)
                {
                  v46[2] = (unint64_t)v47;
                  operator delete(v47);
                }
                v30 = v46;
                v31 = 0x1080C409938AC02;
                goto LABEL_71;
              }
              break;
            case 4:
              v32 = *(unint64_t **)v25;
              do
              {
                v33 = __ldaxr(v32);
                v34 = v33 - 1;
              }
              while (__stlxr(v34, v32));
              if (!v34)
              {
                v35 = *(unint64_t **)v25;
                if (!*(_QWORD *)v25)
                  goto LABEL_72;
                *(_QWORD *)&v230 = v35 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
                goto LABEL_64;
              }
              break;
            case 5:
              v48 = *(unint64_t **)v25;
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50)
              {
                v35 = *(unint64_t **)v25;
                if (!*(_QWORD *)v25)
                  goto LABEL_72;
                *(_QWORD *)&v230 = v35 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
LABEL_64:
                v30 = v35;
                v31 = 0x1020C405E66F15BLL;
                goto LABEL_71;
              }
              break;
            case 8:
              v51 = *(unint64_t **)v25;
              do
              {
                v52 = __ldaxr(v51);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, v51));
              if (!v53)
              {
                v54 = *(unint64_t **)v25;
                if (!*(_QWORD *)v25)
                  goto LABEL_72;
                boost::detail::shared_count::~shared_count((unsigned int **)v54 + 2);
                v30 = v54;
                v42 = -235920773;
                goto LABEL_70;
              }
              break;
            case 9:
              v36 = *(unint64_t **)v25;
              do
              {
                v37 = __ldaxr(v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, v36));
              if (!v38)
              {
                v39 = *(unint64_t **)v25;
                if (*(_QWORD *)v25)
                {
                  v40 = (void *)v39[6];
                  if (v40)
                  {
                    v39[7] = (unint64_t)v40;
                    operator delete(v40);
                  }
                  v41 = (void *)v39[3];
                  if (v41)
                  {
                    v39[4] = (unint64_t)v41;
                    operator delete(v41);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v39 + 1));
                  v30 = v39;
                  v42 = 2071181815;
LABEL_70:
                  v31 = v42 | 0x1030C4000000000;
LABEL_71:
                  MEMORY[0x219A19A08](v30, v31);
                }
LABEL_72:
                *(_QWORD *)v25 = 0;
              }
              break;
            default:
              break;
          }
          *(_QWORD *)v25 = 0;
          *((_DWORD *)v25 + 2) = 0;
          v25[12] = 1;
          *(_QWORD *)v25 = *(_QWORD *)(v23 + 8 * v24++);
          v23 = *(_QWORD *)(v22 + 8);
        }
        while (v24 < (*(_QWORD *)(v22 + 16) - v23) >> 3);
      }
      goto LABEL_178;
    case 4:
      v15 = *((_QWORD *)v10 + 7);
      v216 = 0;
      v217 = 0;
      v215 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v215, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
      goto LABEL_178;
    case 5:
      v58 = *((_QWORD *)v10 + 7);
      *(_QWORD *)&v231 = 0;
      v230 = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v230, *(uint64_t **)(v58 + 8), *(uint64_t **)(v58 + 16), (uint64_t)(*(_QWORD *)(v58 + 16) - *(_QWORD *)(v58 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v215 = 0;
      v216 = 0;
      v217 = 0;
      v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&v230;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
      goto LABEL_178;
    case 6:
      v59 = (double)((uint64_t)(*((_QWORD *)v10 + 7) << 8) >> 8);
      v60 = (double)*((int *)v10 + 16) / 1000000.0;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
      v236.__r_.__value_.__s.__data_[12] = 1;
      *(double *)&v236.__r_.__value_.__l.__data_ = v60 + v59;
      v216 = 0;
      v217 = 0;
      v215 = 0;
      *(_QWORD *)&v230 = &v215;
      BYTE8(v230) = 0;
      v215 = (double *)operator new(0x10uLL);
      v216 = v215;
      v217 = (char *)(v215 + 2);
      v216 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v217, (uint64_t *)&v236, (uint64_t *)&v236.__r_.__value_.__r.__words[2], (uint64_t)v215);
      switch(v236.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v61 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v62 = __ldaxr(v61);
            v14 = --v62 == 0;
          }
          while (__stlxr(v62, v61));
LABEL_84:
          if (v14)
          {
            v63 = v236.__r_.__value_.__r.__words[0];
            if (v236.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v236.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v236.__r_.__value_.__r.__words[0] + 8));
              v64 = v63;
              v65 = 0x1012C404EF22A49;
              goto LABEL_177;
            }
          }
          break;
        case 3:
          v96 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v97 = __ldaxr(v96);
            v88 = --v97 == 0;
          }
          while (__stlxr(v97, v96));
LABEL_157:
          if (v88)
          {
            v118 = v236.__r_.__value_.__r.__words[0];
            if (v236.__r_.__value_.__r.__words[0])
            {
              v119 = *(void **)(v236.__r_.__value_.__r.__words[0] + 8);
              if (v119)
              {
                *(_QWORD *)(v236.__r_.__value_.__r.__words[0] + 16) = v119;
                operator delete(v119);
              }
              v64 = v118;
              v65 = 0x1080C409938AC02;
              goto LABEL_177;
            }
          }
          break;
        case 4:
          v82 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v83 = __ldaxr(v82);
            v74 = --v83 == 0;
          }
          while (__stlxr(v83, v82));
LABEL_141:
          if (v74)
          {
            v109 = v236.__r_.__value_.__r.__words[0];
            if (v236.__r_.__value_.__r.__words[0])
            {
              *(_QWORD *)&v230 = v236.__r_.__value_.__r.__words[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
              goto LABEL_169;
            }
          }
          break;
        case 5:
          v103 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v104 = __ldaxr(v103);
            v93 = --v104 == 0;
          }
          while (__stlxr(v104, v103));
LABEL_165:
          if (v93)
          {
            v109 = v236.__r_.__value_.__r.__words[0];
            if (v236.__r_.__value_.__r.__words[0])
            {
              *(_QWORD *)&v230 = v236.__r_.__value_.__r.__words[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
LABEL_169:
              v64 = v109;
              v65 = 0x1020C405E66F15BLL;
              goto LABEL_177;
            }
          }
          break;
        case 8:
          v105 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v106 = __ldaxr(v105);
            v100 = --v106 == 0;
          }
          while (__stlxr(v106, v105));
LABEL_172:
          if (v100)
          {
            v124 = v236.__r_.__value_.__r.__words[0];
            if (v236.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v236.__r_.__value_.__r.__words[0] + 16));
              v64 = v124;
              v115 = -235920773;
              goto LABEL_176;
            }
          }
          break;
        case 9:
          v84 = (unint64_t *)v236.__r_.__value_.__r.__words[0];
          do
          {
            v85 = __ldaxr(v84);
            v79 = --v85 == 0;
          }
          while (__stlxr(v85, v84));
LABEL_147:
          if (v79)
          {
            v112 = v236.__r_.__value_.__r.__words[0];
            if (v236.__r_.__value_.__r.__words[0])
            {
              v113 = *(void **)(v236.__r_.__value_.__r.__words[0] + 48);
              if (v113)
              {
                *(_QWORD *)(v236.__r_.__value_.__r.__words[0] + 56) = v113;
                operator delete(v113);
              }
              v114 = *(void **)(v112 + 24);
              if (v114)
              {
                *(_QWORD *)(v112 + 32) = v114;
                operator delete(v114);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v112 + 8);
              v64 = v112;
              v115 = 2071181815;
LABEL_176:
              v65 = v115 | 0x1030C4000000000;
LABEL_177:
              MEMORY[0x219A19A08](v64, v65);
            }
          }
          break;
        default:
          goto LABEL_178;
      }
      goto LABEL_178;
    case 7:
      v215 = 0;
      v216 = 0;
      v217 = 0;
      goto LABEL_178;
    case 8:
      v66 = *((_QWORD *)v10 + 7);
      v67 = *(_QWORD *)(v66 + 16);
      *(_QWORD *)&v230 = *(_QWORD *)(v66 + 8);
      *((_QWORD *)&v230 + 1) = v67;
      if (v67)
      {
        v68 = (unsigned int *)(v67 + 8);
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v70 = *(_OWORD *)(v66 + 24);
      v71 = *(_OWORD *)(v66 + 56);
      v232 = *(_OWORD *)(v66 + 40);
      v233 = v71;
      v231 = v70;
      turi::flexible_type_fail(0);
      v215 = 0;
      v216 = 0;
      v217 = 0;
      boost::detail::shared_count::~shared_count((unsigned int **)&v230 + 1);
      goto LABEL_178;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v230, *((_QWORD *)v10 + 7) + 8);
      turi::flexible_type_fail(0);
      v215 = 0;
      v216 = 0;
      v217 = 0;
      if (*((_QWORD *)&v232 + 1))
      {
        *(_QWORD *)&v233 = *((_QWORD *)&v232 + 1);
        operator delete(*((void **)&v232 + 1));
      }
      if ((_QWORD)v231)
      {
        *((_QWORD *)&v231 + 1) = v231;
        operator delete((void *)v231);
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
      if (*((_QWORD *)&v230 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
LABEL_178:
      v211 = a1;
      if (SBYTE7(v220) < 0)
        operator delete(__p);
      v212 = 0;
      v213 = 0;
      v214 = 0;
      v125 = v215;
      v126 = v216;
      if (v215 != v216)
      {
        while (2)
        {
          v127 = *v125;
          v128 = *((unsigned __int8 *)v125 + 12) - 2;
          switch(*((_BYTE *)v125 + 12))
          {
            case 2:
              do
                v129 = __ldaxr(*(unint64_t **)&v127);
              while (__stlxr(v129 + 1, *(unint64_t **)&v127));
              __idx = 0;
              v130 = (char *)(*(_QWORD *)&v127 + 8);
              if (*(char *)(*(_QWORD *)&v127 + 31) < 0)
                v130 = *(char **)(*(_QWORD *)&v127 + 8);
              v131 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v236, v130);
              LOBYTE(v132) = std::stoll(v131, &__idx, 10);
              if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v236.__r_.__value_.__l.__data_);
              if (*(char *)(*(_QWORD *)&v127 + 31) < 0)
                v133 = *(_QWORD *)(*(_QWORD *)&v127 + 16);
              else
                v133 = *(unsigned __int8 *)(*(_QWORD *)&v127 + 31);
              if (__idx != v133)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v208 = std::string::append(&v228, " cannot be interpreted as an integer");
                v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
                v236.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v209;
                v208->__r_.__value_.__l.__size_ = 0;
                v208->__r_.__value_.__r.__words[2] = 0;
                v208->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &v236);
                __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_212;
            case 3:
              do
                v138 = __ldaxr(*(unint64_t **)&v127);
              while (__stlxr(v138 + 1, *(unint64_t **)&v127));
              v226 = 0;
              v227 = 0;
              v225 = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v225, *(const void **)(*(_QWORD *)&v127 + 8), *(_QWORD *)(*(_QWORD *)&v127 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v127 + 16) - *(_QWORD *)(*(_QWORD *)&v127 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (v225)
              {
                v226 = v225;
                operator delete((void *)v225);
              }
              goto LABEL_211;
            case 4:
              do
                v134 = __ldaxr(*(unint64_t **)&v127);
              while (__stlxr(v134 + 1, *(unint64_t **)&v127));
              memset(v224, 0, sizeof(v224));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v224, *(uint64_t **)(*(_QWORD *)&v127 + 8), *(uint64_t **)(*(_QWORD *)&v127 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v127 + 16) - *(_QWORD *)(*(_QWORD *)&v127 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v236.__r_.__value_.__r.__words[0] = (std::string::size_type)v224;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
              goto LABEL_211;
            case 5:
              do
                v139 = __ldaxr(*(unint64_t **)&v127);
              while (__stlxr(v139 + 1, *(unint64_t **)&v127));
              memset(v223, 0, sizeof(v223));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v223, *(uint64_t **)(*(_QWORD *)&v127 + 8), *(uint64_t **)(*(_QWORD *)&v127 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v127 + 16) - *(_QWORD *)(*(_QWORD *)&v127 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v236.__r_.__value_.__r.__words[0] = (std::string::size_type)v223;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
              goto LABEL_211;
            case 8:
              do
                v140 = __ldaxr(*(unint64_t **)&v127);
              while (__stlxr(v140 + 1, *(unint64_t **)&v127));
              v141 = *(unsigned int **)(*(_QWORD *)&v127 + 16);
              __p = *(void **)(*(_QWORD *)&v127 + 8);
              v219 = v141;
              if (v141)
              {
                v142 = v141 + 2;
                do
                  v143 = __ldxr(v142);
                while (__stxr(v143 + 1, v142));
              }
              v144 = *(_OWORD *)(*(_QWORD *)&v127 + 24);
              v145 = *(_OWORD *)(*(_QWORD *)&v127 + 56);
              v221 = *(_OWORD *)(*(_QWORD *)&v127 + 40);
              v222 = v145;
              v220 = v144;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v219);
              goto LABEL_211;
            case 9:
              do
                v135 = __ldaxr(*(unint64_t **)&v127);
              while (__stlxr(v135 + 1, *(unint64_t **)&v127));
              turi::flexible_type_impl::ndarray<double>::ndarray(&v230, *(_QWORD *)&v127 + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v232 + 1))
              {
                *(_QWORD *)&v233 = *((_QWORD *)&v232 + 1);
                operator delete(*((void **)&v232 + 1));
              }
              if ((_QWORD)v231)
              {
                *((_QWORD *)&v231 + 1) = v231;
                operator delete((void *)v231);
              }
              v132 = *((_QWORD *)&v230 + 1);
              if (!*((_QWORD *)&v230 + 1))
                goto LABEL_212;
              v136 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v132 + 16))(v132);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v132);
              }
LABEL_211:
              LOBYTE(v132) = 0;
LABEL_212:
              v146 = v213;
              if (v213 >= v214)
              {
                v148 = (unint64_t)v212;
                v149 = v213 - (_BYTE *)v212;
                v150 = v213 - (_BYTE *)v212 + 1;
                if (v150 < 0)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v151 = v214 - (_BYTE *)v212;
                if (2 * (v214 - (_BYTE *)v212) > (unint64_t)v150)
                  v150 = 2 * v151;
                if (v151 >= 0x3FFFFFFFFFFFFFFFLL)
                  v152 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v152 = v150;
                if (v152)
                  v153 = (char *)operator new(v152);
                else
                  v153 = 0;
                v154 = &v153[v149];
                v155 = &v153[v149];
                *v155 = v132;
                v147 = v155 + 1;
                if (v146 != (char *)v148)
                {
                  v156 = &v146[~v148];
                  do
                  {
                    v157 = *--v146;
                    (v156--)[(_QWORD)v153] = v157;
                  }
                  while (v146 != (char *)v148);
                  v154 = v153;
                }
                v212 = v154;
                v213 = v147;
                v214 = &v153[v152];
                if (v148)
                  operator delete((void *)v148);
              }
              else
              {
                *v213 = v132;
                v147 = v146 + 1;
              }
              v213 = v147;
              switch(v128)
              {
                case 0:
                  do
                  {
                    v158 = __ldaxr(*(unint64_t **)&v127);
                    v159 = v158 - 1;
                  }
                  while (__stlxr(v159, *(unint64_t **)&v127));
                  if (v159)
                    v160 = 1;
                  else
                    v160 = *(_QWORD *)&v127 == 0;
                  if (!v160)
                  {
                    if (*(char *)(*(_QWORD *)&v127 + 31) < 0)
                      operator delete(*(void **)(*(_QWORD *)&v127 + 8));
                    v161 = v127;
                    v162 = 0x1012C404EF22A49;
                    goto LABEL_276;
                  }
                  break;
                case 1:
                  do
                  {
                    v172 = __ldaxr(*(unint64_t **)&v127);
                    v173 = v172 - 1;
                  }
                  while (__stlxr(v173, *(unint64_t **)&v127));
                  if (v173)
                    v174 = 1;
                  else
                    v174 = *(_QWORD *)&v127 == 0;
                  if (!v174)
                  {
                    v175 = *(void **)(*(_QWORD *)&v127 + 8);
                    if (v175)
                    {
                      *(_QWORD *)(*(_QWORD *)&v127 + 16) = v175;
                      operator delete(v175);
                    }
                    v161 = v127;
                    v162 = 0x1080C409938AC02;
                    goto LABEL_276;
                  }
                  break;
                case 2:
                  do
                  {
                    v163 = __ldaxr(*(unint64_t **)&v127);
                    v164 = v163 - 1;
                  }
                  while (__stlxr(v164, *(unint64_t **)&v127));
                  if (v164)
                    v165 = 1;
                  else
                    v165 = *(_QWORD *)&v127 == 0;
                  if (!v165)
                  {
                    *(_QWORD *)&v230 = *(_QWORD *)&v127 + 8;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
                    goto LABEL_268;
                  }
                  break;
                case 3:
                  do
                  {
                    v176 = __ldaxr(*(unint64_t **)&v127);
                    v177 = v176 - 1;
                  }
                  while (__stlxr(v177, *(unint64_t **)&v127));
                  if (v177)
                    v178 = 1;
                  else
                    v178 = *(_QWORD *)&v127 == 0;
                  if (!v178)
                  {
                    *(_QWORD *)&v230 = *(_QWORD *)&v127 + 8;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
LABEL_268:
                    v161 = v127;
                    v162 = 0x1020C405E66F15BLL;
                    goto LABEL_276;
                  }
                  break;
                case 6:
                  do
                  {
                    v179 = __ldaxr(*(unint64_t **)&v127);
                    v180 = v179 - 1;
                  }
                  while (__stlxr(v180, *(unint64_t **)&v127));
                  if (v180)
                    v181 = 1;
                  else
                    v181 = *(_QWORD *)&v127 == 0;
                  if (!v181)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v127 + 16));
                    v161 = v127;
                    v171 = -235920773;
                    goto LABEL_275;
                  }
                  break;
                case 7:
                  do
                  {
                    v166 = __ldaxr(*(unint64_t **)&v127);
                    v167 = v166 - 1;
                  }
                  while (__stlxr(v167, *(unint64_t **)&v127));
                  if (v167)
                    v168 = 1;
                  else
                    v168 = *(_QWORD *)&v127 == 0;
                  if (!v168)
                  {
                    v169 = *(void **)(*(_QWORD *)&v127 + 48);
                    if (v169)
                    {
                      *(_QWORD *)(*(_QWORD *)&v127 + 56) = v169;
                      operator delete(v169);
                    }
                    v170 = *(void **)(*(_QWORD *)&v127 + 24);
                    if (v170)
                    {
                      *(_QWORD *)(*(_QWORD *)&v127 + 32) = v170;
                      operator delete(v170);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v127 + 8);
                    v161 = v127;
                    v171 = 2071181815;
LABEL_275:
                    v162 = v171 | 0x1030C4000000000;
LABEL_276:
                    MEMORY[0x219A19A08](*(_QWORD *)&v161, v162);
                  }
                  break;
                default:
                  break;
              }
              v125 += 2;
              if (v125 == v126)
                break;
              continue;
            default:
              LOBYTE(v132) = 0;
              switch(*((_BYTE *)v125 + 12))
              {
                case 0:
                  v132 = *(_QWORD *)v125;
                  goto LABEL_212;
                case 1:
                  v132 = (uint64_t)v127;
                  goto LABEL_212;
                case 6:
                  v132 = (uint64_t)(*(_QWORD *)&v127 << 8) >> 8;
                  goto LABEL_212;
                case 7:
                  goto LABEL_212;
                default:
LABEL_335:
                  result = (_QWORD *)turi::flexible_type_fail(0);
                  goto LABEL_336;
              }
          }
          break;
        }
      }
      v182 = *v211;
      std::string::basic_string[abi:ne180100]<0>(&v230, "function");
      __p = &v230;
      v183 = std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v182 + 4, (const void **)&v230, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
      std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::operator=(v234, *((_QWORD *)v183 + 7) + 8);
      if (SBYTE7(v231) < 0)
        operator delete((void *)v230);
      LODWORD(v228.__r_.__value_.__l.__data_) = 0;
      v184 = *v211;
      std::string::basic_string[abi:ne180100]<0>(&v236, "random_seed");
      *(_QWORD *)&v230 = &v236;
      v185 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v184 + 1, (const void **)&v236.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v230);
      LODWORD(v186) = 0;
      switch(*((_BYTE *)v185 + 68))
      {
        case 0:
          v186 = *((_QWORD *)v185 + 7);
          goto LABEL_316;
        case 1:
          v186 = (uint64_t)*((double *)v185 + 7);
          goto LABEL_316;
        case 2:
          v190 = *((_QWORD *)v185 + 7);
          v225 = 0;
          v191 = (char *)(v190 + 8);
          if (*(char *)(v190 + 31) < 0)
            v191 = *(char **)(v190 + 8);
          v192 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v230, v191);
          LODWORD(v186) = std::stoll(v192, &v225, 10);
          if (SBYTE7(v231) < 0)
            operator delete((void *)v230);
          if (*(char *)(v190 + 31) < 0)
            v193 = *(_QWORD *)(v190 + 16);
          else
            v193 = *(unsigned __int8 *)(v190 + 31);
          if (v225 != v193)
          {
            v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v205 = std::string::append((std::string *)&__p, " cannot be interpreted as an integer");
            v206 = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
            *(_QWORD *)&v231 = *((_QWORD *)&v205->__r_.__value_.__l + 2);
            v230 = v206;
            v205->__r_.__value_.__l.__size_ = 0;
            v205->__r_.__value_.__r.__words[2] = 0;
            v205->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v204, (const std::string *)&v230);
            __cxa_throw(v204, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_316;
        case 3:
          v187 = *((_QWORD *)v185 + 7);
          *(_QWORD *)&v231 = 0;
          v230 = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v230, *(const void **)(v187 + 8), *(_QWORD *)(v187 + 16), (uint64_t)(*(_QWORD *)(v187 + 16) - *(_QWORD *)(v187 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((_QWORD)v230)
          {
            *((_QWORD *)&v230 + 1) = v230;
            operator delete((void *)v230);
          }
          goto LABEL_315;
        case 4:
          v194 = *((_QWORD *)v185 + 7);
          *(_QWORD *)&v231 = 0;
          v230 = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v230, *(uint64_t **)(v194 + 8), *(uint64_t **)(v194 + 16), (uint64_t)(*(_QWORD *)(v194 + 16) - *(_QWORD *)(v194 + 8)) >> 4);
          turi::flexible_type_fail(0);
          __p = &v230;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_315;
        case 5:
          v195 = *((_QWORD *)v185 + 7);
          *(_QWORD *)&v231 = 0;
          v230 = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v230, *(uint64_t **)(v195 + 8), *(uint64_t **)(v195 + 16), (uint64_t)(*(_QWORD *)(v195 + 16) - *(_QWORD *)(v195 + 8)) >> 5);
          turi::flexible_type_fail(0);
          __p = &v230;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_315;
        case 6:
          v186 = (uint64_t)(*((_QWORD *)v185 + 7) << 8) >> 8;
          goto LABEL_316;
        case 7:
          goto LABEL_316;
        case 8:
          v196 = *((_QWORD *)v185 + 7);
          v197 = *(_QWORD *)(v196 + 16);
          *(_QWORD *)&v230 = *(_QWORD *)(v196 + 8);
          *((_QWORD *)&v230 + 1) = v197;
          if (v197)
          {
            v198 = (unsigned int *)(v197 + 8);
            do
              v199 = __ldxr(v198);
            while (__stxr(v199 + 1, v198));
          }
          v200 = *(_OWORD *)(v196 + 24);
          v201 = *(_OWORD *)(v196 + 56);
          v232 = *(_OWORD *)(v196 + 40);
          v233 = v201;
          v231 = v200;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&v230 + 1);
          goto LABEL_315;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&v230, *((_QWORD *)v185 + 7) + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v232 + 1))
          {
            *(_QWORD *)&v233 = *((_QWORD *)&v232 + 1);
            operator delete(*((void **)&v232 + 1));
          }
          if ((_QWORD)v231)
          {
            *((_QWORD *)&v231 + 1) = v231;
            operator delete((void *)v231);
          }
          v186 = *((_QWORD *)&v230 + 1);
          if (!*((_QWORD *)&v230 + 1))
            goto LABEL_316;
          v188 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 - 1, v188));
          if (!v189)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v186 + 16))(v186);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v186);
          }
LABEL_315:
          LODWORD(v186) = 0;
LABEL_316:
          if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v236.__r_.__value_.__l.__data_);
          LODWORD(v228.__r_.__value_.__l.__data_) = v186;
          std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &,void>((uint64_t)v234, (uint64_t)&v212, (int *)&v228, &v230);
          *v210 = v230;
          if (v212)
          {
            v213 = (char *)v212;
            operator delete(v212);
          }
          *(_QWORD *)&v230 = &v215;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
          result = v235;
          if (v235 == v234)
          {
            v203 = 4;
            result = v234;
          }
          else
          {
            if (!v235)
              return result;
            v203 = 5;
          }
          result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v203))();
          break;
        default:
          goto LABEL_335;
      }
      break;
    default:
      result = (_QWORD *)turi::flexible_type_fail(0);
LABEL_336:
      __break(1u);
      break;
  }
  return result;
}

void sub_2180DD248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, boost::detail::shared_count *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  int v46;
  uint64_t v47;
  _QWORD *v49;
  uint64_t v50;

  if (*(char *)(v47 - 217) < 0)
    operator delete(*(void **)(v47 - 240));
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v47 - 105) < 0)
        operator delete(*(void **)(v47 - 128));
      if (a14)
        operator delete(a14);
      a40 = &a17;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
      v49 = *(_QWORD **)(v47 - 136);
      if (v49 == (_QWORD *)(v47 - 160))
      {
        v50 = 4;
        v49 = (_QWORD *)(v47 - 160);
      }
      else
      {
        if (!v49)
          goto LABEL_17;
        v50 = 5;
      }
      (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_17:
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v45);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_TRANSFORM_NODE", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 110, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180DDCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180DDECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_types\")", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 112, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180DE04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"function\")", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 113, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180DE1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::__shared_ptr_emplace[abi:ne180100]<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_2180DE2B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::__shared_ptr_emplace[abi:ne180100]<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_24D92DE98;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_2180DE318(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DE98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v7;
  _QWORD *result;

  v7 = *a5;
  *(_QWORD *)a2 = &unk_24D92DEE8;
  *(_DWORD *)(a2 + 8) = 0;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a2 + 16, a3);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  result = std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>((_QWORD *)(a2 + 48), *(const void **)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  *(_DWORD *)(a2 + 72) = v7;
  return result;
}

void sub_2180DE3F0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 40);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 40);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::~operator_impl(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D92DEE8;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[5];
  if (v3 == a1 + 2)
  {
    v4 = 4;
    v3 = a1 + 2;
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::~operator_impl(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D92DEE8;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[5];
  if (v3 == a1 + 2)
  {
    v4 = 4;
    v3 = a1 + 2;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  JUMPOUT(0x219A19A08);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::type()
{
  return 10;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&,void>(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v4;
  turi::thread *source;
  int v6;
  _BYTE *tls_data;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 != 85)
  {
    if (v4)
      return;
    if (*(_DWORD *)(a1 + 72) != -1)
    {
      source = turi::random::get_source((turi::random *)a1);
      v6 = *(_DWORD *)(a1 + 72);
      tls_data = turi::thread::get_tls_data(source);
      turi::random::generator::seed(source, *(_DWORD *)tls_data + v6);
    }
  }
  v8.n128_f64[0] = turi::query_eval::query_context::get_next(this, 0, &v31);
  v9 = v31;
  if ((_QWORD)v31)
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v30);
    if (*(_QWORD *)v31 == *(_QWORD *)(v31 + 8) || (v10 = **(_QWORD ***)v31) == 0)
      v11 = 0;
    else
      v11 = (uint64_t)(v10[1] - *v10) >> 4;
    turi::sframe_rows::resize((uint64_t ***)v30, *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48), v11);
    v27 = 0;
    v28 = v31;
    v29 = 0;
    v13 = v30;
    if (!*(_BYTE *)(v30 + 24))
      turi::sframe_rows::ensure_unique((turi::sframe_rows *)v30);
    v14 = 0;
    v25 = v13;
    v26 = 0;
    while (1)
    {
      if (*(_QWORD *)v31 == *(_QWORD *)(v31 + 8))
      {
        v15 = 0;
      }
      else
      {
        v15 = **(_QWORD **)v31;
        if (v15)
          v15 = (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 4;
      }
      if (!v27 && v14 == v15)
        break;
      v17 = *(_QWORD *)(a1 + 40);
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v28, &v25);
      ++v26;
      v14 = ++v29;
    }
    turi::sframe_rows::type_check_inplace((uint64_t *)v30, (_QWORD *)(a1 + 48), v12);
    turi::query_eval::query_context::emit((uint64_t)this, &v30);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v8);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v9)
    v24 = 85;
  else
    v24 = 0;
  *(_DWORD *)(a1 + 8) = v24;
}

void sub_2180DE790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2180DE800(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D92DE98;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2180DE860(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a2 = &unk_24D92DEE8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a2 + 16, a3 + 16);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  result = std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>((_QWORD *)(a2 + 48), *(const void **)(a3 + 48), *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48));
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a3 + 72);
  return result;
}

void sub_2180DE8E4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 40);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 40);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

char *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node@<X0>(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *result;
  uint64_t *v8;
  uint64_t v9;

  v3 = *a1;
  LODWORD(v8) = **a1;
  if ((_DWORD)v8 != 11)
  {
    v9 = (uint64_t)&v8;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v4 = *((_QWORD *)v3 + 8) - *((_QWORD *)v3 + 7);
  v5 = v4 >> 4;
  v9 = v4 >> 4;
  if (!v4)
  {
    v8 = &v9;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  v6 = operator new(0x48uLL);
  v6[2] = 0;
  *v6 = &unk_24D92DF48;
  v6[1] = 0;
  *((_DWORD *)v6 + 8) = 0;
  v6[5] = 0;
  v6[6] = 0;
  v6[7] = 0;
  v6[8] = v5;
  a2[1] = v6;
  v6[3] = &unk_24D92DF98;
  result = (char *)(v6 + 3);
  *a2 = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::UNION_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 117, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180DEB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 118, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180DED6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DF48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DF48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::~operator_impl(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D92DF98;
  v3 = (void **)(a1 + 16);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D92DF98;
  v3 = (void **)(a1 + 16);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0x10A1C40E6614521);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::type()
{
  return 11;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11> const&,void>(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v4;
  char v5;
  unint64_t v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  char *v15;
  unint64_t v16;
  unint64_t j;
  __int128 **v18;
  __int128 *v19;
  __int128 *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 != 86)
  {
    if (v4)
      return;
    std::vector<std::shared_ptr<turi::sframe_rows const>>::resize(a1 + 16, *(_QWORD *)(a1 + 40));
  }
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_15;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  do
  {
    turi::query_eval::query_context::get_next(this, v6, &v24);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)(a1 + 16) + 16 * v6, &v24);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v6) == 0;
    v5 |= v11;
    v7 &= v11;
    ++v6;
  }
  while (v6 < *(_QWORD *)(a1 + 40));
  if ((v5 & 1) != 0)
  {
    if ((v7 & 1) == 0)
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()();
    v12 = 0;
  }
  else
  {
LABEL_15:
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v24);
    v13 = v24;
    if (!*(_BYTE *)(v24 + 24))
      turi::sframe_rows::ensure_unique((turi::sframe_rows *)v24);
    v15 = *(char **)v13;
    for (i = *(_QWORD *)(v13 + 8);
          (char *)i != v15;
    *(_QWORD *)(v13 + 8) = v15;
    v16 = *(_QWORD *)(a1 + 40);
    if (v16)
    {
      for (j = 0; j < v16; ++j)
      {
        v18 = *(__int128 ***)(*(_QWORD *)(a1 + 16) + 16 * j);
        v19 = *v18;
        v20 = v18[1];
        if (*v18 != v20)
        {
          do
            std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)v13, v19++);
          while (v19 != v20);
          v16 = *(_QWORD *)(a1 + 40);
        }
      }
    }
    turi::query_eval::query_context::emit((uint64_t)this, &v24);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v12 = 86;
  }
  *(_DWORD *)(a1 + 8) = v12;
}

void sub_2180DF110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x48uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_2180DF16C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>,0>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_24D92DF48;
  *(_QWORD *)(a1 + 24) = &unk_24D92DF98;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)(a1 + 40), *(_QWORD **)(a2 + 16), *(_QWORD **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 4);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 40);
  return a1;
}

void sub_2180DF1F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<turi::sframe_rows const>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 - *(_QWORD *)a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 16 * a2;
      while (v3 != v5)
        v3 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v3 - 16);
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::shared_ptr<turi::sframe_rows const>>::__append((char **)a1, a2 - v4);
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"all_null", 8);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 71, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180DF370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<turi::sframe_rows const>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v25 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    v24 = v15;
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v23.i64[1] = (uint64_t)v16;
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v16 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v16;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v22);
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t (***v13)(_QWORD);
  unint64_t *p_shared_owners;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::runtime_error *exception;
  std::string *v40;
  __int128 v41;
  void *v42[2];
  char v43;
  char v44;
  uint64_t (***v45)(_QWORD);
  std::__shared_weak_count *v46;
  void *__p[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  std::string v51;
  size_t __idx;

  v3 = (_DWORD *)*a1;
  LODWORD(v51.__r_.__value_.__l.__data_) = *(_DWORD *)*a1;
  if (LODWORD(v51.__r_.__value_.__l.__data_) != 13)
  {
LABEL_59:
    __p[0] = &v51;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v4 = *((_QWORD *)v3 + 8) - *((_QWORD *)v3 + 7);
  __p[0] = (void *)(v4 >> 4);
  if (v4 != 16)
  {
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  v6 = (uint64_t)(v3 + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
  v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v6, (const void **)__p);
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  if (!v7)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
  v8 = *a1 + 32;
  std::string::basic_string[abi:ne180100]<0>(__p, "aggregator");
  v9 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v8, (const void **)__p);
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  if (!v9)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
  v10 = (uint64_t **)(*a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "aggregator");
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v11 = *((_QWORD *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10, (const void **)__p, (uint64_t)&std::piecewise_construct, &v51)+ 7);
  v13 = *(uint64_t (****)(_QWORD))(v11 + 8);
  v12 = *(std::__shared_weak_count **)(v11 + 16);
  v45 = v13;
  v46 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  v44 = 0;
  v17 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v42, "output_type");
  __p[0] = v42;
  v16 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v17 + 8), (const void **)v42, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  LOBYTE(v17) = 0;
  switch(*((_BYTE *)v16 + 68))
  {
    case 0:
      v17 = *((_QWORD *)v16 + 7);
      goto LABEL_42;
    case 1:
      v17 = (uint64_t)*((double *)v16 + 7);
      goto LABEL_42;
    case 2:
      v21 = *((_QWORD *)v16 + 7);
      __idx = 0;
      v22 = (char *)(v21 + 8);
      if (*(char *)(v21 + 31) < 0)
        v22 = *(char **)(v21 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v22);
      LOBYTE(v17) = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v48) < 0)
        operator delete(__p[0]);
      if (*(char *)(v21 + 31) < 0)
        v23 = *(_QWORD *)(v21 + 16);
      else
        v23 = *(unsigned __int8 *)(v21 + 31);
      if (__idx != v23)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v40 = std::string::append(&v51, " cannot be interpreted as an integer");
        v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        *(_QWORD *)&v48 = *((_QWORD *)&v40->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_42;
    case 3:
      v18 = *((_QWORD *)v16 + 7);
      __p[1] = 0;
      *(_QWORD *)&v48 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v18 + 8), *(_QWORD *)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_41;
    case 4:
      v24 = *((_QWORD *)v16 + 7);
      __p[1] = 0;
      *(_QWORD *)&v48 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v24 + 8), *(uint64_t **)(v24 + 16), (uint64_t)(*(_QWORD *)(v24 + 16) - *(_QWORD *)(v24 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
      goto LABEL_41;
    case 5:
      v25 = *((_QWORD *)v16 + 7);
      __p[1] = 0;
      *(_QWORD *)&v48 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
      goto LABEL_41;
    case 6:
      v17 = (uint64_t)(*((_QWORD *)v16 + 7) << 8) >> 8;
      goto LABEL_42;
    case 7:
      goto LABEL_42;
    case 8:
      v26 = *((_QWORD *)v16 + 7);
      v27 = *(unsigned int **)(v26 + 16);
      __p[0] = *(void **)(v26 + 8);
      __p[1] = v27;
      if (v27)
      {
        v28 = v27 + 2;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *(_OWORD *)(v26 + 24);
      v31 = *(_OWORD *)(v26 + 56);
      v49 = *(_OWORD *)(v26 + 40);
      v50 = v31;
      v48 = v30;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_41;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v16 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v49 + 1))
      {
        *(_QWORD *)&v50 = *((_QWORD *)&v49 + 1);
        operator delete(*((void **)&v49 + 1));
      }
      if ((_QWORD)v48)
      {
        *((_QWORD *)&v48 + 1) = v48;
        operator delete((void *)v48);
      }
      v17 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_42;
      v19 = (unint64_t *)((char *)__p[1] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
      }
LABEL_41:
      LOBYTE(v17) = 0;
LABEL_42:
      if (v43 < 0)
        operator delete(v42[0]);
      v44 = v17;
      v32 = (**v45)(v45);
      std::shared_ptr<turi::group_aggregate_value>::shared_ptr[abi:ne180100]<turi::group_aggregate_value,void>(__p, v32);
      std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &,void>((uint64_t *)__p, &v44, &v51);
      *a2 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
      v33 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v34 = (unint64_t *)((char *)__p[1] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = v46;
      if (v46)
      {
        v37 = (unint64_t *)&v46->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      return;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      goto LABEL_59;
  }
}

void sub_2180DFA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v25 - 41) < 0)
  {
    operator delete(*(void **)(v25 - 64));
    if ((v24 & 1) == 0)
    {
LABEL_8:
      if (a14 < 0)
        operator delete(a9);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::REDUCE_NODE", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 95, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180DFD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 96, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180DFF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 97, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E0094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"aggregator\")", 50);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 98, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E0214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &,void>@<X0>(uint64_t *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2180E02E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,0>(_QWORD *a1, uint64_t *a2, char *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24D92DFF8;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>,std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_2180E034C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DFF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92DFF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>,std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &>(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v4 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *a4;
    *(_QWORD *)a2 = &unk_24D92E048;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 24) = v5;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_BYTE *)(a2 + 32) = v8;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v11 = *a4;
    *(_QWORD *)a2 = &unk_24D92E048;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = v11;
  }
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::~operator_impl(_QWORD *a1)
{
  *a1 = &unk_24D92E048;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::~operator_impl(_QWORD *a1)
{
  *a1 = &unk_24D92E048;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x219A19A08);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::type()
{
  return 13;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::clone(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v4 = (***(uint64_t (****)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 16));
  std::shared_ptr<turi::group_aggregate_value>::shared_ptr[abi:ne180100]<turi::group_aggregate_value,void>(&v9, v4);
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum const&,void>(&v9, (char *)(a1 + 32), &v8);
  *a2 = v8;
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180E0588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v3;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  turi::sframe_rows *v15;
  __int128 *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unsigned int v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  turi::sframe_rows *v74[3];
  void **v75;
  uint64_t v76;
  uint64_t v77;
  turi::sframe_rows **v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 77)
  {
    v23 = 0;
  }
  else
  {
    if (v3)
      return;
    do
    {
      while (1)
      {
        v5.n128_f64[0] = turi::query_eval::query_context::get_next(this, 0, &v79);
        v6 = v79;
        if ((_QWORD)v79)
        {
          v75 = 0;
          v76 = v79;
          v77 = 0;
          if (*(_QWORD *)v79 != *(_QWORD *)(v79 + 8))
          {
            v7 = **(_QWORD ***)v79;
            if (v7)
            {
              v8 = *(_QWORD *)(**(_QWORD **)v79 + 8) - *v7;
              if (v8)
              {
                v9 = 0;
                v10 = v8 >> 4;
                do
                {
                  v11 = *(_QWORD *)(a1 + 16);
                  if (*(_QWORD *)(v76 + 8) - *(_QWORD *)v76 == 16)
                  {
                    (*(void (**)(_QWORD, uint64_t, __n128))(*(_QWORD *)v11 + 16))(*(_QWORD *)(a1 + 16), ***(_QWORD ***)v76 + 16 * v9, v5);
                  }
                  else
                  {
                    turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v76, (uint64_t *)v74);
                    (*(void (**)(uint64_t, turi::sframe_rows **))(*(_QWORD *)v11 + 8))(v11, v74);
                    v78 = v74;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
                  }
                  v9 = ++v77;
                }
                while (v75 || v9 != v10);
              }
            }
          }
        }
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (*((_QWORD *)&v79 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
            break;
        }
        if (!v6)
          goto LABEL_20;
      }
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v5);
      std::__shared_weak_count::__release_weak(v12);
    }
    while (v6);
LABEL_20:
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, v74);
    turi::sframe_rows::resize((uint64_t ***)v74[0], 1uLL, 1uLL);
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 16) + 40))(&v79);
    v15 = v74[0];
    if (!*((_BYTE *)v74[0] + 24))
      turi::sframe_rows::ensure_unique(v74[0]);
    v16 = ***(__int128 ****)v15;
    if (&v79 == v16)
    {
      switch(BYTE12(v79))
      {
        case 2:
          v48 = (unint64_t *)v79;
          do
          {
            v49 = __ldaxr(v48);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v48));
          if (!v50)
          {
            v51 = (_QWORD *)v79;
            if ((_QWORD)v79)
            {
              if (*(char *)(v79 + 31) < 0)
                operator delete(*(void **)(v79 + 8));
              v52 = v51;
              v53 = 0x1012C404EF22A49;
              goto LABEL_109;
            }
          }
          break;
        case 3:
          v54 = (unint64_t *)v79;
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            v57 = (_QWORD *)v79;
            if ((_QWORD)v79)
            {
              v58 = *(void **)(v79 + 8);
              if (v58)
              {
                *(_QWORD *)(v79 + 16) = v58;
                operator delete(v58);
              }
              v52 = v57;
              v53 = 0x1080C409938AC02;
              goto LABEL_109;
            }
          }
          break;
        case 4:
          v59 = (unint64_t *)v79;
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (!v61)
          {
            v62 = (_QWORD *)v79;
            if ((_QWORD)v79)
            {
              v75 = (void **)(v79 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
              goto LABEL_97;
            }
          }
          break;
        case 5:
          v63 = (unint64_t *)v79;
          do
          {
            v64 = __ldaxr(v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v63));
          if (!v65)
          {
            v62 = (_QWORD *)v79;
            if ((_QWORD)v79)
            {
              v75 = (void **)(v79 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
LABEL_97:
              v52 = v62;
              v53 = 0x1020C405E66F15BLL;
              goto LABEL_109;
            }
          }
          break;
        case 8:
          v66 = (unint64_t *)v79;
          do
          {
            v67 = __ldaxr(v66);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, v66));
          if (!v68)
          {
            v69 = (_QWORD *)v79;
            if ((_QWORD)v79)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v79 + 16));
              v52 = v69;
              v70 = -235920773;
              goto LABEL_108;
            }
          }
          break;
        case 9:
          v71 = (unint64_t *)v79;
          do
          {
            v72 = __ldaxr(v71);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v71));
          if (!v73 && (_QWORD)v79)
          {
            v52 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v79);
            v70 = 2071181815;
LABEL_108:
            v53 = v70 | 0x1030C4000000000;
LABEL_109:
            MEMORY[0x219A19A08](v52, v53);
          }
          break;
        default:
          break;
      }
    }
    else
    {
      switch(*((_BYTE *)v16 + 12))
      {
        case 2:
          v17 = *(unint64_t **)v16;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = *(unint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_62;
            if (*((char *)v20 + 31) < 0)
              operator delete((void *)v20[1]);
            v21 = v20;
            v22 = 0x1012C404EF22A49;
            goto LABEL_61;
          }
          break;
        case 3:
          v24 = *(unint64_t **)v16;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            v27 = *(unint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_62;
            v28 = (void *)v27[1];
            if (v28)
            {
              v27[2] = (unint64_t)v28;
              operator delete(v28);
            }
            v21 = v27;
            v22 = 0x1080C409938AC02;
            goto LABEL_61;
          }
          break;
        case 4:
          v29 = *(unint64_t **)v16;
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            v32 = *(unint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_62;
            v75 = (void **)(v32 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
            goto LABEL_49;
          }
          break;
        case 5:
          v33 = *(unint64_t **)v16;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v32 = *(unint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_62;
            v75 = (void **)(v32 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
LABEL_49:
            v21 = v32;
            v22 = 0x1020C405E66F15BLL;
            goto LABEL_61;
          }
          break;
        case 8:
          v36 = *(unint64_t **)v16;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = *(unint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_62;
            boost::detail::shared_count::~shared_count((unsigned int **)v39 + 2);
            v21 = v39;
            v40 = -235920773;
            goto LABEL_60;
          }
          break;
        case 9:
          v41 = *(unint64_t **)v16;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            if (*(_QWORD *)v16)
            {
              v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v16);
              v40 = 2071181815;
LABEL_60:
              v22 = v40 | 0x1030C4000000000;
LABEL_61:
              MEMORY[0x219A19A08](v21, v22);
            }
LABEL_62:
            *(_QWORD *)v16 = 0;
          }
          break;
        default:
          break;
      }
      v44 = v79;
      *(_QWORD *)((char *)v16 + 5) = *(_QWORD *)((char *)&v79 + 5);
      *(_QWORD *)v16 = v44;
      *((_BYTE *)v16 + 12) = BYTE12(v79);
    }
    turi::query_eval::query_context::emit((uint64_t)this, (__int128 *)v74);
    v45 = (std::__shared_weak_count *)v74[1];
    if (v74[1])
    {
      v46 = (unint64_t *)((char *)v74[1] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v23 = 77;
  }
  *(_DWORD *)(a1 + 8) = v23;
}

void sub_2180E0B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, int a17, char a18)
{
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  switch(a18)
  {
    case 2:
      turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,std::vector<std::string>>>();
      goto LABEL_17;
    case 3:
      turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,std::vector<std::string>>>();
      goto LABEL_17;
    case 4:
      v19 = a16;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        break;
      v22 = a16;
      if (!a16)
        break;
      a12 = (_Unwind_Exception *)(a16 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
      goto LABEL_14;
    case 5:
      v23 = a16;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        break;
      v22 = a16;
      if (!a16)
        break;
      a12 = (_Unwind_Exception *)(a16 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_14:
      MEMORY[0x219A19A08](v22, 0x1020C405E66F15BLL);
      break;
    case 8:
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::execute(&a16);
      goto LABEL_17;
    case 9:
      turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,std::vector<std::string>>>();
LABEL_17:
      a1 = a12;
      break;
    default:
      break;
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum const&,void>@<X0>(uint64_t *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2180E0CE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node@<X0>(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *result;
  void *__p[2];
  char v10;
  _QWORD v11[2];

  v3 = *a1;
  LODWORD(v11[0]) = **a1;
  if (LODWORD(v11[0]) != 12)
  {
    __p[0] = v11;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v4 = *((_QWORD *)v3 + 8) - *((_QWORD *)v3 + 7);
  v5 = v4 >> 4;
  __p[0] = (void *)(v4 >> 4);
  if (!v4)
  {
    v11[0] = __p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  v6 = (char *)operator new(0x78uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &unk_24D92E0A8;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 3) = &unk_24D92E0F8;
  *((_DWORD *)v6 + 8) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_QWORD *)v6 + 11) = v5;
  *((_QWORD *)v6 + 12) = 0;
  *((_QWORD *)v6 + 13) = 0;
  *((_QWORD *)v6 + 14) = 0;
  v11[0] = v6 + 24;
  v11[1] = v6;
  std::string::basic_string[abi:ne180100]<0>(__p, "index_map");
  v7 = *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v3 + 2), (const void **)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  result = std::vector<std::pair<unsigned long,unsigned long>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t *)v6 + 12, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 5);
  *a2 = v6 + 24;
  a2[1] = v6;
  return result;
}

void sub_2180E0E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_UNION_PROJECT_NODE", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 125, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E0FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 126, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E11E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E0A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E0A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::~operator_impl(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24D92E0F8;
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 40);
  std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 16);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24D92E0F8;
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 40);
  std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 16);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x219A19A08](a1, 0x10A1C40C5881B98);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::type()
{
  return 12;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12> const&,void>(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v4;
  char v5;
  unint64_t v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t i;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  char *v21;
  _QWORD *v22;
  _QWORD *k;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 != 95)
  {
    if (v4)
      return;
    std::vector<std::shared_ptr<turi::sframe_rows const>>::resize(a1 + 16, *(_QWORD *)(a1 + 64));
    std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::resize((uint64_t *)(a1 + 40), *(_QWORD *)(a1 + 64));
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_20;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  do
  {
    turi::query_eval::query_context::get_next(this, v6, &v27);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)(a1 + 16) + 16 * v6, &v27);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v6) == 0;
    v5 |= v11;
    v7 &= v11;
    ++v6;
    v12 = *(_QWORD *)(a1 + 64);
  }
  while (v6 < v12);
  if ((v5 & 1) == 0)
  {
    if (v12)
    {
      v14 = 0;
      v15 = 0;
      for (i = 0; i < v12; ++i)
      {
        v17 = *(uint64_t ***)(*(_QWORD *)(a1 + 16) + v15);
        v18 = *(_QWORD *)(a1 + 40) + v14;
        if ((uint64_t **)v18 != v17)
        {
          std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(v18, *v17, v17[1], ((char *)v17[1] - (char *)*v17) >> 4);
          v12 = *(_QWORD *)(a1 + 64);
        }
        v15 += 16;
        v14 += 24;
      }
    }
LABEL_20:
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v27);
    v19 = v27;
    if (!*(_BYTE *)(v27 + 24))
      turi::sframe_rows::ensure_unique((turi::sframe_rows *)v27);
    v21 = *(char **)v19;
    for (j = *(_QWORD *)(v19 + 8);
          (char *)j != v21;
    *(_QWORD *)(v19 + 8) = v21;
    v22 = *(_QWORD **)(a1 + 72);
    for (k = *(_QWORD **)(a1 + 80); v22 != k; v22 += 2)
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)v19, (__int128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * *v22) + 16 * v22[1]));
    turi::query_eval::query_context::emit((uint64_t)this, &v27);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v13 = 95;
    goto LABEL_33;
  }
  if ((v7 & 1) == 0)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()();
  v13 = 0;
LABEL_33:
  *(_DWORD *)(a1 + 8) = v13;
}

void sub_2180E1614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2180E16E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D92E0A8;
  a1[1] = 0;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12> const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2180E1740(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

char *std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  *(_QWORD *)a2 = &unk_24D92E0F8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)(a2 + 16), *(_QWORD **)(a3 + 16), *(_QWORD **)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 4);
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__init_with_size[abi:ne180100]<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>((_QWORD *)(v4 + 40), *(_QWORD ***)(a3 + 40), *(_QWORD ***)(a3 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40)) >> 3));
  v5 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(v4 + 72) = 0;
  v4 += 72;
  *(_QWORD *)(v4 - 8) = v5;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  return std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)v4, *(__int128 **)(a3 + 72), *(__int128 **)(a3 + 80), (uint64_t)(*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 4);
}

void sub_2180E180C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__init_with_size[abi:ne180100]<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>(_QWORD *result, _QWORD **a2, _QWORD **a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2180E189C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD **v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)v4, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2180E1958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"all_null", 8);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 77, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E1B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::~__split_buffer(&v15);
  }
}

void sub_2180E1D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t *std::vector<std::pair<unsigned long,unsigned long>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = (uint64_t)v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](v7, v11);
    v12 = (uint64_t)v7;
    v13 = v6;
    v14 = a3;
    return std::vector<std::pair<unsigned long,unsigned long>>::__construct_at_end<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(v12, v13, v14);
  }
  v15 = (_BYTE *)result[1];
  v16 = (v15 - v9) >> 4;
  if (v16 < a4)
  {
    v17 = a2 + 32 * v16;
    if (v15 != v9)
    {
      v18 = 32 * v16;
      do
      {
        std::pair<unsigned long,unsigned long>::operator=[abi:ne180100]<turi::flexible_type,turi::flexible_type,(void *)0>((uint64_t *)v9, v6);
        v6 += 32;
        v9 += 16;
        v18 -= 32;
      }
      while (v18);
    }
    v12 = (uint64_t)v7;
    v13 = v17;
    v14 = a3;
    return std::vector<std::pair<unsigned long,unsigned long>>::__construct_at_end<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(v12, v13, v14);
  }
  if (a2 == a3)
  {
    v19 = *result;
  }
  else
  {
    v19 = *result;
    do
    {
      result = std::pair<unsigned long,unsigned long>::operator=[abi:ne180100]<turi::flexible_type,turi::flexible_type,(void *)0>((uint64_t *)v9, v6);
      v6 += 32;
      v9 += 16;
      v19 += 16;
    }
    while (v6 != a3);
  }
  v7[1] = v19;
  return result;
}

uint64_t *std::vector<std::pair<unsigned long,unsigned long>>::__construct_at_end<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *result;
  uint64_t *v7;

  if (a2 == a3)
  {
    result = *(uint64_t **)(a1 + 8);
  }
  else
  {
    v5 = a2;
    result = *(uint64_t **)(a1 + 8);
    do
    {
      v7 = std::pair<unsigned long,unsigned long>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(result, v5);
      v5 += 32;
      result = v7 + 2;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_2180E2138(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::pair<unsigned long,unsigned long>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  std::runtime_error *exception;
  std::string *v39;
  __int128 v40;
  std::runtime_error *v41;
  std::string *v42;
  __int128 v43;
  void *__p[2];
  void *v45[2];
  __int128 v46;
  __int128 v47;
  std::string v48;
  size_t __idx;

  v4 = 0;
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      v4 = *(_QWORD *)a2;
      goto LABEL_29;
    case 1:
      v4 = (uint64_t)*(double *)a2;
      goto LABEL_29;
    case 2:
      v9 = *(_QWORD *)a2;
      v10 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v11 = (char *)v10;
      if (*(char *)(v9 + 31) < 0)
        v11 = *v10;
      std::string::basic_string[abi:ne180100]<0>(__p, v11);
      v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v45[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v9 + 31) < 0)
        v12 = *(_QWORD *)(v9 + 16);
      else
        v12 = *(unsigned __int8 *)(v9 + 31);
      if (__idx != v12)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v39 = std::string::append(&v48, " cannot be interpreted as an integer");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v45[0] = (void *)v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v5 = *(_QWORD *)a2;
      __p[1] = 0;
      v45[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(_QWORD *)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v13 = *(_QWORD *)a2;
      __p[1] = 0;
      v45[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
      goto LABEL_28;
    case 5:
      v14 = *(_QWORD *)a2;
      __p[1] = 0;
      v45[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
      goto LABEL_28;
    case 6:
      v4 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v15 = *(_QWORD *)a2;
      v16 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *(_OWORD *)(v15 + 24);
      v20 = *(_OWORD *)(v15 + 56);
      v46 = *(_OWORD *)(v15 + 40);
      v47 = v20;
      *(_OWORD *)v45 = v19;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v46 + 1))
      {
        *(_QWORD *)&v47 = *((_QWORD *)&v46 + 1);
        operator delete(*((void **)&v46 + 1));
      }
      if (v45[0])
      {
        v45[1] = v45[0];
        operator delete(v45[0]);
      }
      v6 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v7 = (unint64_t *)((char *)__p[1] + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
LABEL_28:
      v4 = 0;
LABEL_29:
      *a1 = v4;
      v21 = 0;
      switch(*(_BYTE *)(a2 + 28))
      {
        case 0:
          v21 = *(_QWORD *)(a2 + 16);
          goto LABEL_57;
        case 1:
          v21 = (uint64_t)*(double *)(a2 + 16);
          goto LABEL_57;
        case 2:
          v26 = *(_QWORD *)(a2 + 16);
          __idx = 0;
          v27 = (char *)(v26 + 8);
          if (*(char *)(v26 + 31) < 0)
            v27 = *(char **)(v26 + 8);
          std::string::basic_string[abi:ne180100]<0>(__p, v27);
          v21 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SHIBYTE(v45[0]) < 0)
            operator delete(__p[0]);
          if (*(char *)(v26 + 31) < 0)
            v28 = *(_QWORD *)(v26 + 16);
          else
            v28 = *(unsigned __int8 *)(v26 + 31);
          if (__idx != v28)
          {
            v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v42 = std::string::append(&v48, " cannot be interpreted as an integer");
            v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
            v45[0] = (void *)v42->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v43;
            v42->__r_.__value_.__l.__size_ = 0;
            v42->__r_.__value_.__r.__words[2] = 0;
            v42->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v41, (const std::string *)__p);
            __cxa_throw(v41, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_57;
        case 3:
          v22 = *(_QWORD *)(a2 + 16);
          __p[1] = 0;
          v45[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v22 + 8), *(_QWORD *)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_56;
        case 4:
          v29 = *(_QWORD *)(a2 + 16);
          __p[1] = 0;
          v45[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v29 + 8), *(uint64_t **)(v29 + 16), (uint64_t)(*(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
          goto LABEL_56;
        case 5:
          v30 = *(_QWORD *)(a2 + 16);
          __p[1] = 0;
          v45[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v30 + 8), *(uint64_t **)(v30 + 16), (uint64_t)(*(_QWORD *)(v30 + 16) - *(_QWORD *)(v30 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
          goto LABEL_56;
        case 6:
          v21 = (uint64_t)(*(_QWORD *)(a2 + 16) << 8) >> 8;
          goto LABEL_57;
        case 7:
          goto LABEL_57;
        case 8:
          v31 = *(_QWORD *)(a2 + 16);
          v32 = *(unsigned int **)(v31 + 16);
          __p[0] = *(void **)(v31 + 8);
          __p[1] = v32;
          if (v32)
          {
            v33 = v32 + 2;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v35 = *(_OWORD *)(v31 + 24);
          v36 = *(_OWORD *)(v31 + 56);
          v46 = *(_OWORD *)(v31 + 40);
          v47 = v36;
          *(_OWORD *)v45 = v35;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          goto LABEL_56;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)(a2 + 16) + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v46 + 1))
          {
            *(_QWORD *)&v47 = *((_QWORD *)&v46 + 1);
            operator delete(*((void **)&v46 + 1));
          }
          if (v45[0])
          {
            v45[1] = v45[0];
            operator delete(v45[0]);
          }
          v23 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v24 = (unint64_t *)((char *)__p[1] + 8);
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
LABEL_56:
          v21 = 0;
LABEL_57:
          a1[1] = v21;
          return a1;
        default:
          turi::apply_binary_op_ff();
      }
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_2180E26D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t *std::pair<unsigned long,unsigned long>::operator=[abi:ne180100]<turi::flexible_type,turi::flexible_type,(void *)0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  std::runtime_error *exception;
  std::string *v39;
  __int128 v40;
  std::runtime_error *v41;
  std::string *v42;
  __int128 v43;
  void *__p[2];
  void *v45[2];
  __int128 v46;
  __int128 v47;
  std::string v48;
  size_t __idx;

  v4 = 0;
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      v4 = *(_QWORD *)a2;
      goto LABEL_29;
    case 1:
      v4 = (uint64_t)*(double *)a2;
      goto LABEL_29;
    case 2:
      v9 = *(_QWORD *)a2;
      v10 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v11 = (char *)v10;
      if (*(char *)(v9 + 31) < 0)
        v11 = *v10;
      std::string::basic_string[abi:ne180100]<0>(__p, v11);
      v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v45[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v9 + 31) < 0)
        v12 = *(_QWORD *)(v9 + 16);
      else
        v12 = *(unsigned __int8 *)(v9 + 31);
      if (__idx != v12)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v39 = std::string::append(&v48, " cannot be interpreted as an integer");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v45[0] = (void *)v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v5 = *(_QWORD *)a2;
      __p[1] = 0;
      v45[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(_QWORD *)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v13 = *(_QWORD *)a2;
      __p[1] = 0;
      v45[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
      goto LABEL_28;
    case 5:
      v14 = *(_QWORD *)a2;
      __p[1] = 0;
      v45[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
      goto LABEL_28;
    case 6:
      v4 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v15 = *(_QWORD *)a2;
      v16 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *(_OWORD *)(v15 + 24);
      v20 = *(_OWORD *)(v15 + 56);
      v46 = *(_OWORD *)(v15 + 40);
      v47 = v20;
      *(_OWORD *)v45 = v19;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v46 + 1))
      {
        *(_QWORD *)&v47 = *((_QWORD *)&v46 + 1);
        operator delete(*((void **)&v46 + 1));
      }
      if (v45[0])
      {
        v45[1] = v45[0];
        operator delete(v45[0]);
      }
      v6 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v7 = (unint64_t *)((char *)__p[1] + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
LABEL_28:
      v4 = 0;
LABEL_29:
      *a1 = v4;
      v21 = 0;
      switch(*(_BYTE *)(a2 + 28))
      {
        case 0:
          v21 = *(_QWORD *)(a2 + 16);
          goto LABEL_57;
        case 1:
          v21 = (uint64_t)*(double *)(a2 + 16);
          goto LABEL_57;
        case 2:
          v26 = *(_QWORD *)(a2 + 16);
          __idx = 0;
          v27 = (char *)(v26 + 8);
          if (*(char *)(v26 + 31) < 0)
            v27 = *(char **)(v26 + 8);
          std::string::basic_string[abi:ne180100]<0>(__p, v27);
          v21 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SHIBYTE(v45[0]) < 0)
            operator delete(__p[0]);
          if (*(char *)(v26 + 31) < 0)
            v28 = *(_QWORD *)(v26 + 16);
          else
            v28 = *(unsigned __int8 *)(v26 + 31);
          if (__idx != v28)
          {
            v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v42 = std::string::append(&v48, " cannot be interpreted as an integer");
            v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
            v45[0] = (void *)v42->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v43;
            v42->__r_.__value_.__l.__size_ = 0;
            v42->__r_.__value_.__r.__words[2] = 0;
            v42->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v41, (const std::string *)__p);
            __cxa_throw(v41, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_57;
        case 3:
          v22 = *(_QWORD *)(a2 + 16);
          __p[1] = 0;
          v45[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v22 + 8), *(_QWORD *)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_56;
        case 4:
          v29 = *(_QWORD *)(a2 + 16);
          __p[1] = 0;
          v45[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v29 + 8), *(uint64_t **)(v29 + 16), (uint64_t)(*(_QWORD *)(v29 + 16) - *(_QWORD *)(v29 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
          goto LABEL_56;
        case 5:
          v30 = *(_QWORD *)(a2 + 16);
          __p[1] = 0;
          v45[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v30 + 8), *(uint64_t **)(v30 + 16), (uint64_t)(*(_QWORD *)(v30 + 16) - *(_QWORD *)(v30 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
          goto LABEL_56;
        case 6:
          v21 = (uint64_t)(*(_QWORD *)(a2 + 16) << 8) >> 8;
          goto LABEL_57;
        case 7:
          goto LABEL_57;
        case 8:
          v31 = *(_QWORD *)(a2 + 16);
          v32 = *(unsigned int **)(v31 + 16);
          __p[0] = *(void **)(v31 + 8);
          __p[1] = v32;
          if (v32)
          {
            v33 = v32 + 2;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v35 = *(_OWORD *)(v31 + 24);
          v36 = *(_OWORD *)(v31 + 56);
          v46 = *(_OWORD *)(v31 + 40);
          v47 = v36;
          *(_OWORD *)v45 = v35;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          goto LABEL_56;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)(a2 + 16) + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v46 + 1))
          {
            *(_QWORD *)&v47 = *((_QWORD *)&v46 + 1);
            operator delete(*((void **)&v46 + 1));
          }
          if (v45[0])
          {
            v45[1] = v45[0];
            operator delete(v45[0]);
          }
          v23 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v24 = (unint64_t *)((char *)__p[1] + 8);
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
LABEL_56:
          v21 = 0;
LABEL_57:
          a1[1] = v21;
          return a1;
        default:
          turi::apply_binary_op_ff();
      }
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_2180E2D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

char *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node@<X0>(_DWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char *result;
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  LODWORD(v7) = **a1;
  if ((_DWORD)v7 != 14)
  {
    v8 = (uint64_t)&v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  v4 = *((_QWORD *)v3 + 8) - *((_QWORD *)v3 + 7);
  v8 = v4 >> 4;
  if (v4 != 48)
  {
    v7 = &v8;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  v5 = operator new(0x28uLL);
  v5[2] = 0;
  *v5 = &unk_24D92E158;
  v5[1] = 0;
  *((_DWORD *)v5 + 8) = 0;
  a2[1] = v5;
  v5[3] = &unk_24D92E1A8;
  result = (char *)(v5 + 3);
  *a2 = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TERNARY_OPERATOR", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 151, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E30C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 152, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E32D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D92E158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::type()
{
  return 14;
}

char *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char *result;

  v4 = operator new(0x28uLL);
  v4[2] = 0;
  *v4 = &unk_24D92E158;
  v4[1] = 0;
  *((_DWORD *)v4 + 8) = *(_DWORD *)(a1 + 8);
  a2[1] = v4;
  v4[3] = &unk_24D92E1A8;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v2;
  __n128 v6;
  uint64_t v7;
  _BYTE ***v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t ***v32;
  uint64_t ***v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  BOOL v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  void *v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  BOOL v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  void *v69;
  unint64_t *v70;
  unint64_t v71;
  BOOL v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  BOOL v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  int v86;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  uint64_t ***v101;
  uint64_t ***v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != 132 && v2 != 0)
    return;
  v6.n128_f64[0] = turi::query_eval::query_context::get_next(this, 0, &v110);
  v7 = v110;
  if ((_QWORD)v110)
  {
    v8 = *(_BYTE ****)v110;
    v9 = *(_QWORD *)(v110 + 8) - *(_QWORD *)v110;
    *(_QWORD *)&v109 = v9 >> 4;
    if (v9 != 16)
    {
      *(_QWORD *)&v108 = &v109;
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()();
    }
    v10 = *v8;
    v11 = std::accumulate[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,unsigned long,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(unsigned long,turi::flexible_type const&)#1}>(**v8, (*v8)[1], 0);
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v109);
    if (v11)
    {
      if (v11 != (uint64_t)(v10[1] - *v10) >> 4)
      {
        turi::query_eval::query_context::get_next(this, 2uLL, &v108);
        turi::query_eval::query_context::get_next(this, 1uLL, &v106);
        if (!(_QWORD)v106)
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator()();
        if (!(_QWORD)v108)
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#5}::operator()();
        v18 = *(_QWORD *)v108;
        v19 = *(_QWORD *)(v108 + 8);
        if (*(_QWORD *)v108 == v19 || !*(_QWORD *)v18)
          v20 = 0;
        else
          v20 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v18 + 8) - **(_QWORD **)v18) >> 4;
        v107 = v20;
        v105 = (uint64_t)(v10[1] - *v10) >> 4;
        if (v20 != v105)
        {
          v103 = (uint64_t)&v107;
          v104 = &v105;
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#6}::operator()();
        }
        v28 = *(uint64_t **)v106;
        v27 = *(_QWORD *)(v106 + 8);
        if (*(_QWORD *)v106 == v27)
        {
          v29 = 0;
        }
        else
        {
          v29 = *v28;
          if (*v28)
            v29 = (uint64_t)(*(_QWORD *)(v29 + 8) - *(_QWORD *)v29) >> 4;
        }
        v107 = v29;
        v105 = v20;
        if (v29 != v20)
        {
          v103 = (uint64_t)&v107;
          v104 = &v105;
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#7}::operator()();
        }
        v30 = v19 - v18;
        v103 = v30 >> 4;
        if (v30 != 16)
        {
          v107 = (uint64_t)&v103;
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#8}::operator()();
        }
        v103 = (v27 - (uint64_t)v28) >> 4;
        if (v27 - (_QWORD)v28 != 16)
        {
          v107 = (uint64_t)&v103;
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#9}::operator()();
        }
        turi::sframe_rows::resize((uint64_t ***)v109, 1uLL, v20);
        v32 = (uint64_t ***)v106;
        v102 = (uint64_t ***)v108;
        v33 = (uint64_t ***)v109;
        if (!*(_BYTE *)(v109 + 24))
          turi::sframe_rows::ensure_unique((turi::sframe_rows *)v109);
        v34 = (_BYTE *)*v10;
        v35 = (_BYTE *)v10[1];
        if ((_BYTE *)*v10 != v35)
        {
          v36 = 0;
          v101 = v32;
          while (2)
          {
            switch(v34[12])
            {
              case 0:
                if (!*(_QWORD *)v34)
                  goto LABEL_62;
                goto LABEL_47;
              case 1:
                v31.n128_u64[0] = *(_QWORD *)v34;
                if (*(double *)v34 != 0.0)
                  goto LABEL_47;
                goto LABEL_62;
              case 2:
                if (*(char *)(*(_QWORD *)v34 + 31) < 0)
                {
                  if (*(_QWORD *)(*(_QWORD *)v34 + 16))
                  {
LABEL_47:
                    v37 = ***v32;
                    v38 = ***v33;
                    if (v37 == v38)
                      goto LABEL_133;
                    v39 = v38 + 16 * v36;
                    switch(*(_BYTE *)(v39 + 12))
                    {
                      case 2:
                        v40 = *(unint64_t **)v39;
                        do
                        {
                          v41 = __ldaxr(v40);
                          v42 = --v41 == 0;
                        }
                        while (__stlxr(v41, v40));
LABEL_66:
                        if (v42)
                        {
                          v46 = *(unint64_t **)v39;
                          if (!*(_QWORD *)v39)
                            goto LABEL_126;
                          if (*((char *)v46 + 31) < 0)
                            operator delete((void *)v46[1]);
                          v47 = v46;
                          v48 = 0x1012C404EF22A49;
                          goto LABEL_105;
                        }
                        break;
                      case 3:
                        v66 = *(unint64_t **)v39;
                        do
                        {
                          v67 = __ldaxr(v66);
                          v65 = --v67 == 0;
                        }
                        while (__stlxr(v67, v66));
LABEL_99:
                        if (v65)
                        {
                          v68 = *(unint64_t **)v39;
                          if (!*(_QWORD *)v39)
                            goto LABEL_126;
                          v69 = (void *)v68[1];
                          if (v69)
                          {
                            v68[2] = (unint64_t)v69;
                            operator delete(v69);
                          }
                          v47 = v68;
                          v48 = 0x1080C409938AC02;
                          goto LABEL_105;
                        }
                        break;
                      case 4:
                        v52 = *(unint64_t **)v39;
                        do
                        {
                          v53 = __ldaxr(v52);
                          v51 = --v53 == 0;
                        }
                        while (__stlxr(v53, v52));
LABEL_77:
                        if (v51)
                        {
                          v54 = *(unint64_t **)v39;
                          if (!*(_QWORD *)v39)
                            goto LABEL_126;
                          v103 = (uint64_t)(v54 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
                          goto LABEL_115;
                        }
                        break;
                      case 5:
                        v73 = *(unint64_t **)v39;
                        do
                        {
                          v74 = __ldaxr(v73);
                          v72 = --v74 == 0;
                        }
                        while (__stlxr(v74, v73));
LABEL_111:
                        if (v72)
                        {
                          v54 = *(unint64_t **)v39;
                          if (!*(_QWORD *)v39)
                            goto LABEL_126;
                          v103 = (uint64_t)(v54 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
LABEL_115:
                          v75 = v54;
                          v76 = 0x1020C405E66F15BLL;
                          goto LABEL_125;
                        }
                        break;
                      case 8:
                        v80 = *(unint64_t **)v39;
                        do
                        {
                          v81 = __ldaxr(v80);
                          v79 = --v81 == 0;
                        }
                        while (__stlxr(v81, v80));
LABEL_121:
                        if (v79)
                        {
                          v82 = *(unint64_t **)v39;
                          if (*(_QWORD *)v39)
                          {
                            boost::detail::shared_count::~shared_count((unsigned int **)v82 + 2);
                            v75 = v82;
                            v76 = 0x1030C40F1F0227BLL;
LABEL_125:
                            MEMORY[0x219A19A08](v75, v76);
                          }
                          goto LABEL_126;
                        }
                        break;
                      case 9:
                        v58 = *(unint64_t **)v39;
                        do
                        {
                          v59 = __ldaxr(v58);
                          v57 = --v59 == 0;
                        }
                        while (__stlxr(v59, v58));
LABEL_86:
                        if (v57)
                        {
                          v60 = *(unint64_t **)v39;
                          if (*(_QWORD *)v39)
                          {
                            v61 = (void *)v60[6];
                            if (v61)
                            {
                              v60[7] = (unint64_t)v61;
                              operator delete(v61);
                            }
                            v62 = (void *)v60[3];
                            if (v62)
                            {
                              v60[4] = (unint64_t)v62;
                              operator delete(v62);
                            }
                            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v60 + 1));
                            v47 = v60;
                            v48 = 0x1030C407B73B9F7;
LABEL_105:
                            MEMORY[0x219A19A08](v47, v48, v31);
                          }
LABEL_126:
                          *(_QWORD *)v39 = 0;
                          v32 = v101;
                        }
                        break;
                      default:
                        goto LABEL_127;
                    }
                    goto LABEL_127;
                  }
                }
                else if (*(_BYTE *)(*(_QWORD *)v34 + 31))
                {
                  goto LABEL_47;
                }
LABEL_62:
                v37 = ***v102;
                v43 = ***v33;
                if (v37 == v43)
                  goto LABEL_133;
                v39 = v43 + 16 * v36;
                switch(*(_BYTE *)(v39 + 12))
                {
                  case 2:
                    v44 = *(unint64_t **)v39;
                    do
                    {
                      v45 = __ldaxr(v44);
                      v42 = --v45 == 0;
                    }
                    while (__stlxr(v45, v44));
                    goto LABEL_66;
                  case 3:
                    v63 = *(unint64_t **)v39;
                    do
                    {
                      v64 = __ldaxr(v63);
                      v65 = --v64 == 0;
                    }
                    while (__stlxr(v64, v63));
                    goto LABEL_99;
                  case 4:
                    v49 = *(unint64_t **)v39;
                    do
                    {
                      v50 = __ldaxr(v49);
                      v51 = --v50 == 0;
                    }
                    while (__stlxr(v50, v49));
                    goto LABEL_77;
                  case 5:
                    v70 = *(unint64_t **)v39;
                    do
                    {
                      v71 = __ldaxr(v70);
                      v72 = --v71 == 0;
                    }
                    while (__stlxr(v71, v70));
                    goto LABEL_111;
                  case 8:
                    v77 = *(unint64_t **)v39;
                    do
                    {
                      v78 = __ldaxr(v77);
                      v79 = --v78 == 0;
                    }
                    while (__stlxr(v78, v77));
                    goto LABEL_121;
                  case 9:
                    v55 = *(unint64_t **)v39;
                    do
                    {
                      v56 = __ldaxr(v55);
                      v57 = --v56 == 0;
                    }
                    while (__stlxr(v56, v55));
                    goto LABEL_86;
                  default:
                    break;
                }
LABEL_127:
                v83 = v37 + 16 * v36;
                v84 = *(_QWORD *)v83;
                *(_QWORD *)(v39 + 5) = *(_QWORD *)(v83 + 5);
                *(_QWORD *)v39 = v84;
                LODWORD(v83) = *(unsigned __int8 *)(v83 + 12);
                *(_BYTE *)(v39 + 12) = v83;
                v85 = v83 > 9;
                v86 = (1 << v83) & 0x33C;
                if (!v85 && v86 != 0)
                {
                  v88 = *(unint64_t **)v39;
                  do
                    v89 = __ldaxr(v88);
                  while (__stlxr(v89 + 1, v88));
                }
LABEL_133:
                ++v36;
                v34 += 16;
                if (v34 == v35)
                  break;
                continue;
              case 3:
              case 4:
              case 5:
                if (*(_QWORD *)(*(_QWORD *)v34 + 8) != *(_QWORD *)(*(_QWORD *)v34 + 16))
                  goto LABEL_47;
                goto LABEL_62;
              case 7:
                goto LABEL_62;
              case 8:
                if (*(_QWORD *)(*(_QWORD *)v34 + 64) == 3)
                  goto LABEL_62;
                goto LABEL_47;
              default:
                turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
            }
            break;
          }
        }
        v90 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
        if (*((_QWORD *)&v106 + 1))
        {
          v91 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
        if (!*((_QWORD *)&v108 + 1))
          goto LABEL_144;
        v93 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
        do
          v26 = __ldaxr(v93);
        while (__stlxr(v26 - 1, v93));
        goto LABEL_142;
      }
      v12 = 2;
      v13 = 1;
    }
    else
    {
      v12 = 1;
      v13 = 2;
    }
    turi::query_eval::query_context::skip_next(this, v12);
    v14 = v109;
    if (!*(_BYTE *)(v109 + 24))
      turi::sframe_rows::ensure_unique((turi::sframe_rows *)v109);
    turi::query_eval::query_context::get_next(this, v13, &v108);
    v15 = *(__int128 **)v108;
    v16 = *(_QWORD *)(v108 + 8);
    if (*(_QWORD *)v108 == v16)
    {
      v17 = 0;
    }
    else
    {
      v17 = *(_QWORD *)v15;
      if (*(_QWORD *)v15)
        v17 = (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 4;
    }
    v103 = v17;
    v107 = (uint64_t)(v10[1] - *v10) >> 4;
    if (v17 != v107)
    {
      *(_QWORD *)&v106 = &v103;
      *((_QWORD *)&v106 + 1) = &v107;
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()();
    }
    v21 = v16 - (_QWORD)v15;
    *(_QWORD *)&v106 = v21 >> 4;
    if (v21 != 16)
    {
      v103 = (uint64_t)&v106;
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()();
    }
    v23 = *(char **)v14;
    v22 = *(_QWORD *)(v14 + 8);
    if (v22 != *(_QWORD *)v14)
    {
      do
        v22 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 - 16);
      while ((char *)v22 != v23);
      v15 = *(__int128 **)v108;
    }
    *(_QWORD *)(v14 + 8) = v23;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)v14, v15);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
    if (!*((_QWORD *)&v108 + 1))
      goto LABEL_144;
    v25 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
LABEL_142:
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
LABEL_144:
    turi::query_eval::query_context::emit((uint64_t)this, &v109);
    v94 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
    if (*((_QWORD *)&v109 + 1))
    {
      v95 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
  }
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v97->__on_zero_shared)(v97, v6);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (v7)
    v100 = 132;
  else
    v100 = 0;
  *(_DWORD *)(a1 + 8) = v100;
}

void sub_2180E3C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"condition->num_columns()", 24);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 68, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E3E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::accumulate[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,unsigned long,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(unsigned long,turi::flexible_type const&)#1}>(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  double v5;

  if (a1 != a2)
  {
    while (2)
    {
      v3 = 1;
      switch(a1[12])
      {
        case 0:
          v5 = *(double *)a1;
          goto LABEL_10;
        case 1:
          v4 = *(double *)a1 == 0.0;
          goto LABEL_11;
        case 2:
          if (*(char *)(*(_QWORD *)a1 + 31) < 0)
            v5 = *(double *)(*(_QWORD *)a1 + 16);
          else
            *(_QWORD *)&v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
LABEL_10:
          v4 = *(_QWORD *)&v5 == 0;
          goto LABEL_11;
        case 3:
        case 4:
        case 5:
          v4 = *(_QWORD *)(*(_QWORD *)a1 + 8) == *(_QWORD *)(*(_QWORD *)a1 + 16);
          goto LABEL_11;
        case 7:
          goto LABEL_14;
        case 8:
          v4 = *(_QWORD *)(*(_QWORD *)a1 + 64) == 3;
LABEL_11:
          v3 = v4;
LABEL_14:
          a3 += v3 ^ 1u;
          a1 += 16;
          if (a1 == a2)
            return a3;
          continue;
        default:
          turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
      }
    }
  }
  return a3;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input->num_rows()", 17);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"condition_column.size()", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 98, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E414C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input->num_columns()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 99, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E435C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"istrue != nullptr", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 107, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E44DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#5}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"isfalse != nullptr", 18);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#5}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E465C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#6}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"isfalse->num_rows()", 19);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"condition_column.size()", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 109, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E4870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#7}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"istrue->num_rows()", 18);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"condition_column.size()", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 110, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#7}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E4A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#8}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"isfalse->num_columns()", 22);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#8}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E4C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#9}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"istrue->num_columns()", 21);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 112, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#9}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E4EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::query_operator::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator.hpp", "operator()", 136, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::query_operator::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E5024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[2];
  char v20;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        return v9;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v13 = v12;
    v19[1] = v7;
    v14 = *a4;
    v12[4] = **a4;
    v15 = v14[1];
    v12[5] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    *((_BYTE *)v12 + 48) = 0;
    v20 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v19[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<turi::query_eval::execution_node>,void *>>>>::reset[abi:ne180100]((uint64_t)v19, 0);
  }
  return (uint64_t **)v13;
}

void std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)0>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v7 = *(uint64_t ***)a1;
  v8 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(&v7);
  v4 = v8;
  if (v8)
  {
    v5 = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2180E5278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)1>::get(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a1[1];
  v9 = *a1;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::repr((uint64_t)&v9, a2, a3);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2180E530C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(unsigned int **a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  turi::query_eval::extract_field<turi::query_eval::visitor_get_name,std::string>((_QWORD *)*v2, a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2180E53A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)3>::get(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a1[1];
  v9 = *a1;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::repr((uint64_t)&v9, a2, a3);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2180E543C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)4>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v7 = *(uint64_t ***)a1;
  v8 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(&v7);
  v4 = v8;
  if (v8)
  {
    v5 = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2180E54D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)5>::get(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  _DWORD *v7;
  std::__shared_weak_count *v8;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  v7 = *(_DWORD **)a1;
  v8 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(&v7);
  v4 = v8;
  if (v8)
  {
    v5 = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2180E5564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)6>::get(uint64_t *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v1 = a1[1];
  v7 = *a1;
  v8 = (std::__shared_weak_count *)v1;
  if (v1)
  {
    v2 = (unint64_t *)(v1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::repr(&v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2180E55F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)7>::get(uint64_t *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v1 = a1[1];
  v7 = *a1;
  v8 = (std::__shared_weak_count *)v1;
  if (v1)
  {
    v2 = (unint64_t *)(v1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::repr(&v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2180E568C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)10>::get(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[1];
  v8 = *a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::repr((uint64_t)&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180E5720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)11>::get(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[1];
  v8 = *a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::repr((uint64_t)&v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180E57B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)12>::get(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = a1[1];
  v8 = *a1;
  v9 = (std::__shared_weak_count *)v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::repr(&v8, a2);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2180E5848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(uint64_t ***a1)
{
  uint64_t **v1;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  _OWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t **v12;
  _OWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  uint64_t **v29;
  _OWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  std::runtime_error *exception;
  std::string *v51;
  __int128 v52;
  std::runtime_error *v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string::size_type size;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t result;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  unsigned int v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  std::string v90[3];
  void *v91;
  char v92;
  uint64_t v93;
  size_t __idx;
  std::string v95;
  void *__p[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  void *v100;
  char v101;
  uint64_t v102;
  _QWORD v103[3];

  v103[2] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  LODWORD(v90[0].__r_.__value_.__l.__data_) = *(_DWORD *)*a1;
  if (LODWORD(v90[0].__r_.__value_.__l.__data_))
  {
    __p[0] = v90;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v1 + 1), (const void **)__p);
  if (SBYTE7(v97) < 0)
    operator delete(__p[0]);
  if (!v3)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()();
  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
  v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v4 + 1), (const void **)__p);
  if (SBYTE7(v97) < 0)
    operator delete(__p[0]);
  if (!v5)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator()();
  v6 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
  v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v6 + 1), (const void **)__p);
  if (SBYTE7(v97) < 0)
    operator delete(__p[0]);
  if (!v7)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator()();
  v8 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  v90[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v9 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, v90);
  memset(v103, 0, 13);
  if ((_QWORD *)((char *)v9 + 56) != v103)
  {
    *(_QWORD *)((char *)v103 + 5) = *(_QWORD *)((char *)v9 + 61);
    v103[0] = *((_QWORD *)v9 + 7);
    BYTE4(v103[1]) = *((_BYTE *)v9 + 68);
    if (BYTE4(v103[1]) <= 9u && ((1 << SBYTE4(v103[1])) & 0x33C) != 0)
    {
      v10 = (unint64_t *)v103[0];
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  if (SBYTE7(v97) < 0)
    operator delete(__p[0]);
  v12 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v95, "begin_index");
  __p[0] = &v95;
  v13 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 1, (const void **)&v95.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  switch(*((_BYTE *)v13 + 68))
  {
    case 0:
    case 1:
    case 6:
    case 7:
      goto LABEL_42;
    case 2:
      v18 = *((_QWORD *)v13 + 7);
      __idx = 0;
      v19 = (char *)(v18 + 8);
      if (*(char *)(v18 + 31) < 0)
        v19 = *(char **)(v18 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v19);
      std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v97) < 0)
        operator delete(__p[0]);
      if (*(char *)(v18 + 31) < 0)
        v20 = *(_QWORD *)(v18 + 16);
      else
        v20 = *(unsigned __int8 *)(v18 + 31);
      if (__idx != v20)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v51 = std::string::append(v90, " cannot be interpreted as an integer");
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        *(_QWORD *)&v97 = *((_QWORD *)&v51->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_42;
    case 3:
      v14 = *((_QWORD *)v13 + 7);
      __p[1] = 0;
      *(_QWORD *)&v97 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v14 + 8), *(_QWORD *)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_42;
    case 4:
      v21 = *((_QWORD *)v13 + 7);
      __p[1] = 0;
      *(_QWORD *)&v97 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v21 + 8), *(uint64_t **)(v21 + 16), (uint64_t)(*(_QWORD *)(v21 + 16) - *(_QWORD *)(v21 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v90[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
      goto LABEL_42;
    case 5:
      v22 = *((_QWORD *)v13 + 7);
      __p[1] = 0;
      *(_QWORD *)&v97 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v90[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
      goto LABEL_42;
    case 8:
      v23 = *((_QWORD *)v13 + 7);
      v24 = *(unsigned int **)(v23 + 16);
      __p[0] = *(void **)(v23 + 8);
      __p[1] = v24;
      if (v24)
      {
        v25 = v24 + 2;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = *(_OWORD *)(v23 + 24);
      v28 = *(_OWORD *)(v23 + 56);
      v98 = *(_OWORD *)(v23 + 40);
      v99 = v28;
      v97 = v27;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_42;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v13 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v98 + 1))
      {
        *(_QWORD *)&v99 = *((_QWORD *)&v98 + 1);
        operator delete(*((void **)&v98 + 1));
      }
      if ((_QWORD)v97)
      {
        *((_QWORD *)&v97 + 1) = v97;
        operator delete((void *)v97);
      }
      v15 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v16 = (unint64_t *)((char *)__p[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
LABEL_42:
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      v29 = *a1;
      std::string::basic_string[abi:ne180100]<0>(&v95, "end_index");
      __p[0] = &v95;
      v30 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29 + 1, (const void **)&v95.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      switch(*((_BYTE *)v30 + 68))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          break;
        case 2:
          v35 = *((_QWORD *)v30 + 7);
          __idx = 0;
          v36 = (char *)(v35 + 8);
          if (*(char *)(v35 + 31) < 0)
            v36 = *(char **)(v35 + 8);
          std::string::basic_string[abi:ne180100]<0>(__p, v36);
          std::stoll((const std::string *)__p, &__idx, 10);
          if (SBYTE7(v97) < 0)
            operator delete(__p[0]);
          if (*(char *)(v35 + 31) < 0)
            v37 = *(_QWORD *)(v35 + 16);
          else
            v37 = *(unsigned __int8 *)(v35 + 31);
          if (__idx != v37)
          {
            v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v54 = std::string::append(v90, " cannot be interpreted as an integer");
            v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
            *(_QWORD *)&v97 = *((_QWORD *)&v54->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v55;
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            v54->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v53, (const std::string *)__p);
            __cxa_throw(v53, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          return result;
        case 3:
          v31 = *((_QWORD *)v30 + 7);
          __p[1] = 0;
          *(_QWORD *)&v97 = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v31 + 8), *(_QWORD *)(v31 + 16), (uint64_t)(*(_QWORD *)(v31 + 16) - *(_QWORD *)(v31 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          break;
        case 4:
          v38 = *((_QWORD *)v30 + 7);
          __p[1] = 0;
          *(_QWORD *)&v97 = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v38 + 8), *(uint64_t **)(v38 + 16), (uint64_t)(*(_QWORD *)(v38 + 16) - *(_QWORD *)(v38 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v90[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
          break;
        case 5:
          v39 = *((_QWORD *)v30 + 7);
          __p[1] = 0;
          *(_QWORD *)&v97 = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(_QWORD *)(v39 + 16) - *(_QWORD *)(v39 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v90[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
          break;
        case 8:
          v40 = *((_QWORD *)v30 + 7);
          v41 = *(unsigned int **)(v40 + 16);
          __p[0] = *(void **)(v40 + 8);
          __p[1] = v41;
          if (v41)
          {
            v42 = v41 + 2;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v44 = *(_OWORD *)(v40 + 24);
          v45 = *(_OWORD *)(v40 + 56);
          v98 = *(_OWORD *)(v40 + 40);
          v99 = v45;
          v97 = v44;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v30 + 7) + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v98 + 1))
          {
            *(_QWORD *)&v99 = *((_QWORD *)&v98 + 1);
            operator delete(*((void **)&v98 + 1));
          }
          if ((_QWORD)v97)
          {
            *((_QWORD *)&v97 + 1) = v97;
            operator delete((void *)v97);
          }
          v32 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v33 = (unint64_t *)((char *)__p[1] + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          break;
        default:
          goto LABEL_149;
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v90);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"Const(", 6);
      v47 = MEMORY[0x24BEDB848];
      switch(BYTE4(v103[1]))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_79;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_79:
          __p[0] = *(void **)MEMORY[0x24BEDB7F0];
          v49 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
          *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
          *(_QWORD *)&v97 = v49;
          *((_QWORD *)&v97 + 1) = v47 + 16;
          if (v101 < 0)
            operator delete(v100);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v102);
          break;
        case 2:
          if (*(char *)(v103[0] + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)(v103[0] + 8), *(_QWORD *)(v103[0] + 16));
          }
          else
          {
            v48 = *(_OWORD *)(v103[0] + 8);
            v95.__r_.__value_.__r.__words[2] = *(_QWORD *)(v103[0] + 24);
            *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v48;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(v103[0] + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(v103[0] + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(v103[0] + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v103, &v95);
          break;
        case 7:
          memset(&v95, 0, sizeof(v95));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(v103[0] + 8));
          break;
        default:
          goto LABEL_149;
      }
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v95;
      else
        v56 = (std::string *)v95.__r_.__value_.__r.__words[0];
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      else
        size = v95.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v56, size);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)")[", 2);
      v58 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)":", 1);
      v59 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"]", 1);
      std::stringbuf::str();
      v90[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB800];
      *(std::string::size_type *)((char *)v90[0].__r_.__value_.__r.__words
                                + *(_QWORD *)(v90[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v90[0].__r_.__value_.__l.__size_ = v47 + 16;
      if (v92 < 0)
        operator delete(v91);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      result = MEMORY[0x219A198F4](&v93);
      switch(BYTE4(v103[1]))
      {
        case 2:
          v61 = (unint64_t *)v103[0];
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
          {
            v64 = v103[0];
            if (v103[0])
            {
              if (*(char *)(v103[0] + 31) < 0)
                operator delete(*(void **)(v103[0] + 8));
              v65 = v64;
              v66 = 0x1012C404EF22A49;
              goto LABEL_143;
            }
          }
          break;
        case 3:
          v78 = (unint64_t *)v103[0];
          do
          {
            v79 = __ldaxr(v78);
            v80 = v79 - 1;
          }
          while (__stlxr(v80, v78));
          if (!v80)
          {
            v81 = v103[0];
            if (v103[0])
            {
              v82 = *(void **)(v103[0] + 8);
              if (v82)
              {
                *(_QWORD *)(v103[0] + 16) = v82;
                operator delete(v82);
              }
              v65 = v81;
              v66 = 0x1080C409938AC02;
              goto LABEL_143;
            }
          }
          break;
        case 4:
          v67 = (unint64_t *)v103[0];
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            v70 = v103[0];
            if (v103[0])
            {
              __p[0] = (void *)(v103[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_136;
            }
          }
          break;
        case 5:
          v83 = (unint64_t *)v103[0];
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
          {
            v70 = v103[0];
            if (v103[0])
            {
              __p[0] = (void *)(v103[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_136:
              v65 = v70;
              v66 = 0x1020C405E66F15BLL;
              goto LABEL_143;
            }
          }
          break;
        case 8:
          v86 = (unint64_t *)v103[0];
          do
          {
            v87 = __ldaxr(v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v86));
          if (!v88)
          {
            v89 = v103[0];
            if (v103[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v103[0] + 16));
              v65 = v89;
              v77 = -235920773;
              goto LABEL_142;
            }
          }
          break;
        case 9:
          v71 = (unint64_t *)v103[0];
          do
          {
            v72 = __ldaxr(v71);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v71));
          if (!v73)
          {
            v74 = v103[0];
            if (v103[0])
            {
              v75 = *(void **)(v103[0] + 48);
              if (v75)
              {
                *(_QWORD *)(v103[0] + 56) = v75;
                operator delete(v75);
              }
              v76 = *(void **)(v74 + 24);
              if (v76)
              {
                *(_QWORD *)(v74 + 32) = v76;
                operator delete(v76);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v74 + 8);
              v65 = v74;
              v77 = 2071181815;
LABEL_142:
              v66 = v77 | 0x1030C4000000000;
LABEL_143:
              result = MEMORY[0x219A19A08](v65, v66);
            }
          }
          break;
        default:
          return result;
      }
      break;
    default:
LABEL_149:
      result = turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
  return result;
}

void sub_2180E64E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;
  int v59;
  uint64_t v60;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;

  if (a58 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v59 & 1) == 0)
    {
LABEL_8:
      if (a51 < 0)
        operator delete(a46);
      switch(*(_BYTE *)(v60 - 108))
      {
        case 2:
          v62 = *(unint64_t **)(v60 - 120);
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (v64)
            goto LABEL_48;
          v65 = *(_QWORD *)(v60 - 120);
          if (!v65)
            goto LABEL_48;
          if (*(char *)(v65 + 31) < 0)
            operator delete(*(void **)(v65 + 8));
          v66 = (_QWORD *)v65;
          v67 = 0x1012C404EF22A49;
          goto LABEL_47;
        case 3:
          v68 = *(unint64_t **)(v60 - 120);
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (v70)
            goto LABEL_48;
          v71 = *(_QWORD **)(v60 - 120);
          if (!v71)
            goto LABEL_48;
          v72 = (void *)v71[1];
          if (v72)
          {
            v71[2] = v72;
            operator delete(v72);
          }
          v66 = v71;
          v67 = 0x1080C409938AC02;
          goto LABEL_47;
        case 4:
          v73 = *(unint64_t **)(v60 - 120);
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (v75)
            goto LABEL_48;
          v76 = *(_QWORD **)(v60 - 120);
          if (!v76)
            goto LABEL_48;
          a9 = v76 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
          goto LABEL_35;
        case 5:
          v77 = *(unint64_t **)(v60 - 120);
          do
          {
            v78 = __ldaxr(v77);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, v77));
          if (v79)
            goto LABEL_48;
          v76 = *(_QWORD **)(v60 - 120);
          if (!v76)
            goto LABEL_48;
          a9 = v76 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
LABEL_35:
          v66 = v76;
          v67 = 0x1020C405E66F15BLL;
          goto LABEL_47;
        case 8:
          v80 = *(unint64_t **)(v60 - 120);
          do
          {
            v81 = __ldaxr(v80);
            v82 = v81 - 1;
          }
          while (__stlxr(v82, v80));
          if (v82)
            goto LABEL_48;
          v83 = *(_QWORD *)(v60 - 120);
          if (!v83)
            goto LABEL_48;
          boost::detail::shared_count::~shared_count((unsigned int **)(v83 + 16));
          v66 = (_QWORD *)v83;
          v84 = -235920773;
          goto LABEL_46;
        case 9:
          v85 = *(unint64_t **)(v60 - 120);
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (v87)
            goto LABEL_48;
          v88 = *(_QWORD **)(v60 - 120);
          if (!v88)
            goto LABEL_48;
          v66 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v88);
          v84 = 2071181815;
LABEL_46:
          v67 = v84 | 0x1030C4000000000;
LABEL_47:
          MEMORY[0x219A19A08](v66, v67);
LABEL_48:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_48;
      }
    }
  }
  else if (!v59)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v58);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::CONSTANT_NODE", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 118, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E69AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"value\")", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 119, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E6B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"begin_index\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 120, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E6CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"end_index\")", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 121, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E6E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::repr(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  unsigned __int8 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64) - *(_QWORD *)(*(_QWORD *)a1 + 56);
  v47.__r_.__value_.__r.__words[0] = v4 >> 4;
  if (v4 != 32)
  {
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&v44, "Append(");
  v7 = *(uint64_t **)(*(_QWORD *)a1 + 56);
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  v40 = v9;
  v41 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v42, v12, &v40);
  if ((v43 & 0x80u) == 0)
    v13 = v42;
  else
    v13 = (void **)v42[0];
  if ((v43 & 0x80u) == 0)
    v14 = v43;
  else
    v14 = (std::string::size_type)v42[1];
  v15 = std::string::append(&v44, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v45, ",");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v21 = *(_QWORD *)(v19 + 16);
  v20 = *(std::__shared_weak_count **)(v19 + 24);
  v36 = v21;
  v37 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(_QWORD *)(a2 + 24);
  if (!v24)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v24 + 48))(__p, v24, &v36);
  if ((v39 & 0x80u) == 0)
    v25 = __p;
  else
    v25 = (void **)__p[0];
  if ((v39 & 0x80u) == 0)
    v26 = v39;
  else
    v26 = (std::string::size_type)__p[1];
  v27 = std::string::append(&v46, (const std::string::value_type *)v25, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v47, ")");
  *a3 = *v29;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if ((char)v39 < 0)
    operator delete(__p[0]);
  v30 = v37;
  if (v37)
  {
    v31 = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v43 < 0)
    operator delete(v42[0]);
  v33 = v41;
  if (v41)
  {
    v34 = (unint64_t *)&v41->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

void sub_2180E7164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 57) < 0)
    operator delete(*(void **)(v37 - 80));
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (*(char *)(v37 - 89) < 0)
    operator delete(*(void **)(v37 - 112));
  if (a37 < 0)
    operator delete(a32);
  if (a25 < 0)
    operator delete(a20);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 153, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E7390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::repr(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  unsigned __int8 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42[2];
  unsigned __int8 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64) - *(_QWORD *)(*(_QWORD *)a1 + 56);
  v47.__r_.__value_.__r.__words[0] = v4 >> 4;
  if (v4 != 32)
  {
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&v44, "Filter(");
  v7 = *(uint64_t **)(*(_QWORD *)a1 + 56);
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  v40 = v9;
  v41 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v42, v12, &v40);
  if ((v43 & 0x80u) == 0)
    v13 = v42;
  else
    v13 = (void **)v42[0];
  if ((v43 & 0x80u) == 0)
    v14 = v43;
  else
    v14 = (std::string::size_type)v42[1];
  v15 = std::string::append(&v44, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v45, "[");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v21 = *(_QWORD *)(v19 + 16);
  v20 = *(std::__shared_weak_count **)(v19 + 24);
  v36 = v21;
  v37 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(_QWORD *)(a2 + 24);
  if (!v24)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v24 + 48))(__p, v24, &v36);
  if ((v39 & 0x80u) == 0)
    v25 = __p;
  else
    v25 = (void **)__p[0];
  if ((v39 & 0x80u) == 0)
    v26 = v39;
  else
    v26 = (std::string::size_type)__p[1];
  v27 = std::string::append(&v46, (const std::string::value_type *)v25, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v47, "])");
  *a3 = *v29;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if ((char)v39 < 0)
    operator delete(__p[0]);
  v30 = v37;
  if (v37)
  {
    v31 = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v43 < 0)
    operator delete(v42[0]);
  v33 = v41;
  if (v41)
  {
    v34 = (unint64_t *)&v41->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

void sub_2180E76C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 57) < 0)
    operator delete(*(void **)(v37 - 80));
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (*(char *)(v37 - 89) < 0)
    operator delete(*(void **)(v37 - 112));
  if (a37 < 0)
    operator delete(a32);
  if (a25 < 0)
    operator delete(a20);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 160, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E78F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(uint64_t ***a1)
{
  uint64_t **v1;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  const std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _BYTE *v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BYTE *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  char *v41;
  const std::string *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char **v57;
  char *v58;
  const std::string *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  std::runtime_error *v80;
  std::string *v81;
  __int128 v82;
  _QWORD *v83;
  _QWORD *v84;
  char v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  std::runtime_error *exception;
  std::string *v92;
  __int128 v93;
  std::runtime_error *v94;
  std::string *v95;
  __int128 v96;
  size_t __idx;
  size_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  void *__p[2];
  char v104;
  void *v105;
  char v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  _BYTE v111[32];
  __int128 v112;
  __int128 v113;
  _BYTE v114[32];
  __int128 v115;
  __int128 v116;
  size_t v117;
  std::string v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  *(_DWORD *)v114 = *(_DWORD *)*a1;
  if (*(_DWORD *)v114 != 4)
  {
    __p[0] = v114;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v1 + 1), (const void **)__p);
  if (v104 < 0)
    operator delete(__p[0]);
  if (!v3)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()();
  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  *(_QWORD *)v114 = __p;
  v5 = *((_QWORD *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v114)+ 7);
  v109 = 0;
  v110 = 0;
  v108 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v108, *(uint64_t **)(v5 + 8), *(uint64_t **)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 4);
  if (v104 < 0)
    operator delete(__p[0]);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"PR(", 3);
  if (v109 != v108)
  {
    v6 = 0;
    switch(v108[12])
    {
      case 0:
        v6 = *(_QWORD *)v108;
        goto LABEL_36;
      case 1:
        v6 = (uint64_t)*(double *)v108;
        goto LABEL_36;
      case 2:
        v10 = *(_QWORD *)v108;
        v11 = (char **)(*(_QWORD *)v108 + 8);
        __idx = 0;
        v12 = (char *)v11;
        if (*(char *)(v10 + 31) < 0)
          v12 = *v11;
        v13 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(v114, v12);
        v6 = std::stoll(v13, &__idx, 10);
        if ((v114[23] & 0x80000000) != 0)
          operator delete(*(void **)v114);
        if (*(char *)(v10 + 31) < 0)
          v14 = *(_QWORD *)(v10 + 16);
        else
          v14 = *(unsigned __int8 *)(v10 + 31);
        if (__idx != v14)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v92 = std::string::append((std::string *)v111, " cannot be interpreted as an integer");
          v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
          *(_QWORD *)&v114[16] = *((_QWORD *)&v92->__r_.__value_.__l + 2);
          *(_OWORD *)v114 = v93;
          v92->__r_.__value_.__l.__size_ = 0;
          v92->__r_.__value_.__r.__words[2] = 0;
          v92->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)v114);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_36;
      case 3:
        v7 = *(_QWORD *)v108;
        memset(v114, 0, 24);
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v114, *(const void **)(v7 + 8), *(_QWORD *)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (*(_QWORD *)v114)
        {
          *(_QWORD *)&v114[8] = *(_QWORD *)v114;
          operator delete(*(void **)v114);
        }
        goto LABEL_35;
      case 4:
        v15 = *(_QWORD *)v108;
        memset(v114, 0, 24);
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v114, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 4);
        turi::flexible_type_fail(0);
        *(_QWORD *)v111 = v114;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v111);
        goto LABEL_35;
      case 5:
        v16 = *(_QWORD *)v108;
        memset(v114, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v114, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 5);
        turi::flexible_type_fail(0);
        *(_QWORD *)v111 = v114;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v111);
        goto LABEL_35;
      case 6:
        v6 = (uint64_t)(*(_QWORD *)v108 << 8) >> 8;
        goto LABEL_36;
      case 7:
        goto LABEL_36;
      case 8:
        v17 = *(_QWORD *)v108;
        v18 = *(_QWORD *)(*(_QWORD *)v108 + 16);
        *(_QWORD *)v114 = *(_QWORD *)(*(_QWORD *)v108 + 8);
        *(_QWORD *)&v114[8] = v18;
        if (v18)
        {
          v19 = (unsigned int *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v21 = *(_OWORD *)(v17 + 24);
        v22 = *(_OWORD *)(v17 + 56);
        v115 = *(_OWORD *)(v17 + 40);
        v116 = v22;
        *(_OWORD *)&v114[16] = v21;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&v114[8]);
        goto LABEL_35;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v114, *(_QWORD *)v108 + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v115 + 1))
        {
          *(_QWORD *)&v116 = *((_QWORD *)&v115 + 1);
          operator delete(*((void **)&v115 + 1));
        }
        if (*(_QWORD *)&v114[16])
        {
          *(_QWORD *)&v114[24] = *(_QWORD *)&v114[16];
          operator delete(*(void **)&v114[16]);
        }
        v6 = *(_QWORD *)&v114[8];
        if (!*(_QWORD *)&v114[8])
          goto LABEL_36;
        v8 = (unint64_t *)(*(_QWORD *)&v114[8] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
        }
LABEL_35:
        v6 = 0;
LABEL_36:
        v23 = operator new(8uLL);
        v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        *v23 = v6;
        v118.__r_.__value_.__l.__size_ = (std::string::size_type)(v23 + 1);
        v118.__r_.__value_.__r.__words[2] = (std::string::size_type)(v23 + 1);
        v101 = 0;
        v102 = 0;
        v100 = 0;
        *(_QWORD *)v114 = &v100;
        v114[8] = 0;
        v100 = operator new(0x18uLL);
        v101 = v100;
        v102 = v100 + 3;
        v101 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long> const*,std::vector<unsigned long> const*,std::vector<unsigned long>*>((uint64_t)&v102, (uint64_t)&v118, (uint64_t)&v119, v100);
        if (v118.__r_.__value_.__r.__words[0])
        {
          v118.__r_.__value_.__l.__size_ = v118.__r_.__value_.__r.__words[0];
          operator delete(v118.__r_.__value_.__l.__data_);
        }
        v24 = v108;
        if ((unint64_t)(v109 - v108) >= 0x11)
        {
          v25 = 1;
          while (2)
          {
            v26 = &v24[16 * v25];
            v27 = *(_QWORD *)(*(v101 - 2) - 8) + 1;
            switch(v26[12])
            {
              case 0:
                if (*(_QWORD *)v26 == v27)
                  goto LABEL_51;
                goto LABEL_41;
              case 1:
                if (*(double *)v26 == (double)v27)
                  goto LABEL_51;
                goto LABEL_41;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_41;
              case 6:
                v30 = *(_QWORD *)v26;
                v31 = *((_DWORD *)v26 + 2);
                if (v27 == v30 << 8 >> 8 && v31 == 0)
                {
LABEL_51:
                  v33 = &v108[16 * v25];
                  v34 = 0;
                  v35 = v101;
                  switch(v33[12])
                  {
                    case 0:
                      v34 = *(_QWORD *)v33;
                      goto LABEL_110;
                    case 1:
                      v34 = (uint64_t)*(double *)v33;
                      goto LABEL_110;
                    case 2:
                      v56 = *(_QWORD *)v33;
                      v57 = (char **)(*(_QWORD *)v33 + 8);
                      __idx = 0;
                      v58 = (char *)v57;
                      if (*(char *)(v56 + 31) < 0)
                        v58 = *v57;
                      v59 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(v114, v58);
                      v34 = std::stoll(v59, &__idx, 10);
                      if ((v114[23] & 0x80000000) != 0)
                        operator delete(*(void **)v114);
                      if (*(char *)(v56 + 31) < 0)
                        v60 = *(_QWORD *)(v56 + 16);
                      else
                        v60 = *(unsigned __int8 *)(v56 + 31);
                      if (__idx != v60)
                      {
                        v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::operator+<char>();
                        v81 = std::string::append(&v118, " cannot be interpreted as an integer");
                        v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
                        *(_QWORD *)&v114[16] = *((_QWORD *)&v81->__r_.__value_.__l + 2);
                        *(_OWORD *)v114 = v82;
                        v81->__r_.__value_.__l.__size_ = 0;
                        v81->__r_.__value_.__r.__words[2] = 0;
                        v81->__r_.__value_.__r.__words[0] = 0;
                        std::runtime_error::runtime_error(v80, (const std::string *)v114);
                        __cxa_throw(v80, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                      }
                      goto LABEL_110;
                    case 3:
                      v53 = *(_QWORD *)v33;
                      memset(v114, 0, 24);
                      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v114, *(const void **)(v53 + 8), *(_QWORD *)(v53 + 16), (uint64_t)(*(_QWORD *)(v53 + 16) - *(_QWORD *)(v53 + 8)) >> 3);
                      turi::flexible_type_fail(0);
                      if (*(_QWORD *)v114)
                      {
                        *(_QWORD *)&v114[8] = *(_QWORD *)v114;
                        operator delete(*(void **)v114);
                      }
                      goto LABEL_109;
                    case 4:
                      v61 = *(_QWORD *)v33;
                      memset(v114, 0, 24);
                      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v114, *(uint64_t **)(v61 + 8), *(uint64_t **)(v61 + 16), (uint64_t)(*(_QWORD *)(v61 + 16) - *(_QWORD *)(v61 + 8)) >> 4);
                      turi::flexible_type_fail(0);
                      v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
                      goto LABEL_109;
                    case 5:
                      v62 = *(_QWORD *)v33;
                      memset(v114, 0, 24);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v114, *(uint64_t **)(v62 + 8), *(uint64_t **)(v62 + 16), (uint64_t)(*(_QWORD *)(v62 + 16) - *(_QWORD *)(v62 + 8)) >> 5);
                      turi::flexible_type_fail(0);
                      v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
                      goto LABEL_109;
                    case 6:
                      v34 = (uint64_t)(*(_QWORD *)v33 << 8) >> 8;
                      goto LABEL_110;
                    case 7:
                      goto LABEL_110;
                    case 8:
                      v63 = *(_QWORD *)v33;
                      v64 = *(_QWORD *)(v63 + 16);
                      *(_QWORD *)v111 = *(_QWORD *)(v63 + 8);
                      *(_QWORD *)&v111[8] = v64;
                      if (v64)
                      {
                        v65 = (unsigned int *)(v64 + 8);
                        do
                          v66 = __ldxr(v65);
                        while (__stxr(v66 + 1, v65));
                      }
                      v67 = *(_OWORD *)(v63 + 24);
                      v68 = *(_OWORD *)(v63 + 56);
                      v112 = *(_OWORD *)(v63 + 40);
                      v113 = v68;
                      *(_OWORD *)&v111[16] = v67;
                      turi::flexible_type_fail(0);
                      boost::detail::shared_count::~shared_count((unsigned int **)&v111[8]);
                      goto LABEL_109;
                    case 9:
                      turi::flexible_type_impl::ndarray<double>::ndarray(v114, *(_QWORD *)v33 + 8);
                      turi::flexible_type_fail(0);
                      if (*((_QWORD *)&v115 + 1))
                      {
                        *(_QWORD *)&v116 = *((_QWORD *)&v115 + 1);
                        operator delete(*((void **)&v115 + 1));
                      }
                      if (*(_QWORD *)&v114[16])
                      {
                        *(_QWORD *)&v114[24] = *(_QWORD *)&v114[16];
                        operator delete(*(void **)&v114[16]);
                      }
                      v34 = *(_QWORD *)&v114[8];
                      if (!*(_QWORD *)&v114[8])
                        goto LABEL_110;
                      v54 = (unint64_t *)(*(_QWORD *)&v114[8] + 8);
                      do
                        v55 = __ldaxr(v54);
                      while (__stlxr(v55 - 1, v54));
                      if (!v55)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
                      }
LABEL_109:
                      v34 = 0;
LABEL_110:
                      v69 = *(v35 - 1);
                      v70 = (uint64_t *)*(v35 - 2);
                      if ((unint64_t)v70 >= v69)
                      {
                        v72 = (uint64_t *)*(v35 - 3);
                        v73 = v70 - v72;
                        if ((unint64_t)(v73 + 1) >> 61)
                          std::vector<float>::__throw_length_error[abi:ne180100]();
                        v74 = v69 - (_QWORD)v72;
                        v75 = (uint64_t)(v69 - (_QWORD)v72) >> 2;
                        if (v75 <= v73 + 1)
                          v75 = v73 + 1;
                        if (v74 >= 0x7FFFFFFFFFFFFFF8)
                          v76 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v76 = v75;
                        if (v76)
                        {
                          v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v35 - 1), v76);
                          v72 = (uint64_t *)*(v35 - 3);
                          v70 = (uint64_t *)*(v35 - 2);
                        }
                        else
                        {
                          v77 = 0;
                        }
                        v78 = (uint64_t *)&v77[8 * v73];
                        *v78 = v34;
                        v71 = v78 + 1;
                        while (v70 != v72)
                        {
                          v79 = *--v70;
                          *--v78 = v79;
                        }
                        *(v35 - 3) = v78;
                        *(v35 - 2) = v71;
                        *(v35 - 1) = &v77[8 * v76];
                        if (v72)
                          operator delete(v72);
                      }
                      else
                      {
                        *v70 = v34;
                        v71 = v70 + 1;
                      }
                      *(v35 - 2) = v71;
                      break;
                    default:
                      goto LABEL_154;
                  }
                }
                else
                {
LABEL_41:
                  v28 = &v108[16 * v25];
                  v29 = 0;
                  switch(v28[12])
                  {
                    case 0:
                      v29 = *(_QWORD *)v28;
                      goto LABEL_79;
                    case 1:
                      v29 = (uint64_t)*(double *)v28;
                      goto LABEL_79;
                    case 2:
                      v39 = *(_QWORD *)v28;
                      v40 = (char **)(*(_QWORD *)v28 + 8);
                      v117 = 0;
                      v41 = (char *)v40;
                      if (*(char *)(v39 + 31) < 0)
                        v41 = *v40;
                      v42 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(v114, v41);
                      v29 = std::stoll(v42, &v117, 10);
                      if ((v114[23] & 0x80000000) != 0)
                        operator delete(*(void **)v114);
                      if (*(char *)(v39 + 31) < 0)
                        v43 = *(_QWORD *)(v39 + 16);
                      else
                        v43 = *(unsigned __int8 *)(v39 + 31);
                      if (v117 != v43)
                      {
                        v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::operator+<char>();
                        v95 = std::string::append(&v118, " cannot be interpreted as an integer");
                        v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
                        *(_QWORD *)&v114[16] = *((_QWORD *)&v95->__r_.__value_.__l + 2);
                        *(_OWORD *)v114 = v96;
                        v95->__r_.__value_.__l.__size_ = 0;
                        v95->__r_.__value_.__r.__words[2] = 0;
                        v95->__r_.__value_.__r.__words[0] = 0;
                        std::runtime_error::runtime_error(v94, (const std::string *)v114);
                        __cxa_throw(v94, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                      }
                      goto LABEL_79;
                    case 3:
                      v36 = *(_QWORD *)v28;
                      memset(v114, 0, 24);
                      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v114, *(const void **)(v36 + 8), *(_QWORD *)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 3);
                      turi::flexible_type_fail(0);
                      if (*(_QWORD *)v114)
                      {
                        *(_QWORD *)&v114[8] = *(_QWORD *)v114;
                        operator delete(*(void **)v114);
                      }
                      goto LABEL_78;
                    case 4:
                      v44 = *(_QWORD *)v28;
                      memset(v114, 0, 24);
                      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v114, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(_QWORD *)(v44 + 16) - *(_QWORD *)(v44 + 8)) >> 4);
                      turi::flexible_type_fail(0);
                      v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
                      goto LABEL_78;
                    case 5:
                      v45 = *(_QWORD *)v28;
                      memset(v114, 0, 24);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v114, *(uint64_t **)(v45 + 8), *(uint64_t **)(v45 + 16), (uint64_t)(*(_QWORD *)(v45 + 16) - *(_QWORD *)(v45 + 8)) >> 5);
                      turi::flexible_type_fail(0);
                      v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
                      goto LABEL_78;
                    case 6:
                      v29 = (uint64_t)(*(_QWORD *)v28 << 8) >> 8;
                      goto LABEL_79;
                    case 7:
                      goto LABEL_79;
                    case 8:
                      v46 = *(_QWORD *)v28;
                      v47 = *(_QWORD *)(v46 + 16);
                      *(_QWORD *)v111 = *(_QWORD *)(v46 + 8);
                      *(_QWORD *)&v111[8] = v47;
                      if (v47)
                      {
                        v48 = (unsigned int *)(v47 + 8);
                        do
                          v49 = __ldxr(v48);
                        while (__stxr(v49 + 1, v48));
                      }
                      v50 = *(_OWORD *)(v46 + 24);
                      v51 = *(_OWORD *)(v46 + 56);
                      v112 = *(_OWORD *)(v46 + 40);
                      v113 = v51;
                      *(_OWORD *)&v111[16] = v50;
                      turi::flexible_type_fail(0);
                      boost::detail::shared_count::~shared_count((unsigned int **)&v111[8]);
                      goto LABEL_78;
                    case 9:
                      turi::flexible_type_impl::ndarray<double>::ndarray(v114, *(_QWORD *)v28 + 8);
                      turi::flexible_type_fail(0);
                      if (*((_QWORD *)&v115 + 1))
                      {
                        *(_QWORD *)&v116 = *((_QWORD *)&v115 + 1);
                        operator delete(*((void **)&v115 + 1));
                      }
                      if (*(_QWORD *)&v114[16])
                      {
                        *(_QWORD *)&v114[24] = *(_QWORD *)&v114[16];
                        operator delete(*(void **)&v114[16]);
                      }
                      v29 = *(_QWORD *)&v114[8];
                      if (!*(_QWORD *)&v114[8])
                        goto LABEL_79;
                      v37 = (unint64_t *)(*(_QWORD *)&v114[8] + 8);
                      do
                        v38 = __ldaxr(v37);
                      while (__stlxr(v38 - 1, v37));
                      if (!v38)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v29);
                      }
LABEL_78:
                      v29 = 0;
LABEL_79:
                      v52 = operator new(8uLL);
                      __idx = (size_t)v52;
                      *v52 = v29;
                      v98 = (size_t)(v52 + 1);
                      v99 = v52 + 1;
                      std::vector<std::vector<unsigned long>>::push_back[abi:ne180100]((uint64_t *)&v100, (uint64_t)&__idx);
                      if (__idx)
                      {
                        v98 = __idx;
                        operator delete((void *)__idx);
                      }
                      break;
                    default:
                      goto LABEL_154;
                  }
                }
                ++v25;
                v24 = v108;
                if (v25 >= (v109 - v108) >> 4)
                  break;
                continue;
              default:
LABEL_154:
                turi::flexible_type_fail(0);
                goto LABEL_156;
            }
            break;
          }
        }
        v83 = v100;
        v84 = v101;
        if (v100 != v101)
        {
          v85 = 1;
          do
          {
            if ((v85 & 1) == 0)
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)",", 1);
            v86 = (uint64_t)(v83[1] - *v83) >> 3;
            if (v86 != 1)
            {
              if (v86 == 3)
              {
                v88 = (_QWORD *)std::ostream::operator<<();
                v114[0] = 44;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v114, 1);
                v89 = (_QWORD *)std::ostream::operator<<();
                v114[0] = 44;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v114, 1);
              }
              else if (v86 == 2)
              {
                v87 = (_QWORD *)std::ostream::operator<<();
                v114[0] = 44;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v114, 1);
              }
              else
              {
                v90 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)",...,", 5);
              }
            }
            std::ostream::operator<<();
            v85 = 0;
            v83 += 3;
          }
          while (v83 != v84);
        }
        *(_QWORD *)v114 = &v100;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v114);
        break;
      default:
        turi::flexible_type_fail(0);
LABEL_156:
        __break(1u);
        return;
    }
  }
  v114[0] = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v114, 1);
  std::stringbuf::str();
  __p[0] = *(void **)MEMORY[0x24BEDB800];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
  __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (v106 < 0)
    operator delete(v105);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&v107);
  __p[0] = &v108;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_2180E86C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  int v62;
  uint64_t v63;

  if (*(char *)(v63 - 185) < 0)
    operator delete(*(void **)(v63 - 208));
  if (a61 < 0)
  {
    operator delete(__p);
    if ((v62 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      a17 = &a53;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v61);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::PROJECT_NODE", 36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E8AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"indices\")", 43);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 132, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E8C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2180E8E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long> const*,std::vector<unsigned long> const*,std::vector<unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2180E8EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(_DWORD **a1)
{
  _DWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  _OWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  uint64_t **v26;
  _OWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  uint64_t **v43;
  _OWORD *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  std::runtime_error *exception;
  std::string *v65;
  __int128 v66;
  std::runtime_error *v67;
  std::string *v68;
  __int128 v69;
  std::runtime_error *v70;
  std::string *v71;
  __int128 v72;
  void *__p[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void *v77;
  char v78;
  uint64_t v79;
  const void *v80[2];
  char v81;
  std::string v82;
  size_t __idx;

  v1 = *a1;
  LODWORD(v82.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v82.__r_.__value_.__l.__data_) == 5)
  {
    v3 = (uint64_t)(v1 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "start");
    v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v3, (const void **)__p);
    if (SBYTE7(v74) < 0)
      operator delete(__p[0]);
    if (!v4)
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()();
    v5 = (uint64_t)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
    v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
    if (SBYTE7(v74) < 0)
      operator delete(__p[0]);
    if (!v6)
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator()();
    v7 = (uint64_t)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
    v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v7, (const void **)__p);
    if (SBYTE7(v74) < 0)
      operator delete(__p[0]);
    if (!v8)
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator()();
    v9 = (uint64_t **)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(v80, "start");
    __p[0] = v80;
    v10 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9, v80, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    switch(*((_BYTE *)v10 + 68))
    {
      case 0:
      case 1:
      case 6:
      case 7:
        goto LABEL_35;
      case 2:
        v15 = *((_QWORD *)v10 + 7);
        __idx = 0;
        v16 = (char *)(v15 + 8);
        if (*(char *)(v15 + 31) < 0)
          v16 = *(char **)(v15 + 8);
        std::string::basic_string[abi:ne180100]<0>(__p, v16);
        std::stoll((const std::string *)__p, &__idx, 10);
        if (SBYTE7(v74) < 0)
          operator delete(__p[0]);
        if (*(char *)(v15 + 31) < 0)
          v17 = *(_QWORD *)(v15 + 16);
        else
          v17 = *(unsigned __int8 *)(v15 + 31);
        if (__idx != v17)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v65 = std::string::append(&v82, " cannot be interpreted as an integer");
          v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          *(_QWORD *)&v74 = *((_QWORD *)&v65->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_35;
      case 3:
        v11 = *((_QWORD *)v10 + 7);
        __p[1] = 0;
        *(_QWORD *)&v74 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_35;
      case 4:
        v18 = *((_QWORD *)v10 + 7);
        __p[1] = 0;
        *(_QWORD *)&v74 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v82.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
        goto LABEL_35;
      case 5:
        v19 = *((_QWORD *)v10 + 7);
        __p[1] = 0;
        *(_QWORD *)&v74 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v82.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
        goto LABEL_35;
      case 8:
        v20 = *((_QWORD *)v10 + 7);
        v21 = *(unsigned int **)(v20 + 16);
        __p[0] = *(void **)(v20 + 8);
        __p[1] = v21;
        if (v21)
        {
          v22 = v21 + 2;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v24 = *(_OWORD *)(v20 + 24);
        v25 = *(_OWORD *)(v20 + 56);
        v75 = *(_OWORD *)(v20 + 40);
        v76 = v25;
        v74 = v24;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
        goto LABEL_35;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v10 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v75 + 1))
        {
          *(_QWORD *)&v76 = *((_QWORD *)&v75 + 1);
          operator delete(*((void **)&v75 + 1));
        }
        if ((_QWORD)v74)
        {
          *((_QWORD *)&v74 + 1) = v74;
          operator delete((void *)v74);
        }
        v12 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v13 = (unint64_t *)((char *)__p[1] + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
LABEL_35:
        if (v81 < 0)
          operator delete((void *)v80[0]);
        v26 = (uint64_t **)(*a1 + 2);
        std::string::basic_string[abi:ne180100]<0>(v80, "begin_index");
        __p[0] = v80;
        v27 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26, v80, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        switch(*((_BYTE *)v27 + 68))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_61;
          case 2:
            v32 = *((_QWORD *)v27 + 7);
            __idx = 0;
            v33 = (char *)(v32 + 8);
            if (*(char *)(v32 + 31) < 0)
              v33 = *(char **)(v32 + 8);
            std::string::basic_string[abi:ne180100]<0>(__p, v33);
            std::stoll((const std::string *)__p, &__idx, 10);
            if (SBYTE7(v74) < 0)
              operator delete(__p[0]);
            if (*(char *)(v32 + 31) < 0)
              v34 = *(_QWORD *)(v32 + 16);
            else
              v34 = *(unsigned __int8 *)(v32 + 31);
            if (__idx != v34)
            {
              v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v68 = std::string::append(&v82, " cannot be interpreted as an integer");
              v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
              *(_QWORD *)&v74 = *((_QWORD *)&v68->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v69;
              v68->__r_.__value_.__l.__size_ = 0;
              v68->__r_.__value_.__r.__words[2] = 0;
              v68->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v67, (const std::string *)__p);
              __cxa_throw(v67, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_61;
          case 3:
            v28 = *((_QWORD *)v27 + 7);
            __p[1] = 0;
            *(_QWORD *)&v74 = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v28 + 8), *(_QWORD *)(v28 + 16), (uint64_t)(*(_QWORD *)(v28 + 16) - *(_QWORD *)(v28 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_61;
          case 4:
            v35 = *((_QWORD *)v27 + 7);
            __p[1] = 0;
            *(_QWORD *)&v74 = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v35 + 8), *(uint64_t **)(v35 + 16), (uint64_t)(*(_QWORD *)(v35 + 16) - *(_QWORD *)(v35 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v82.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
            goto LABEL_61;
          case 5:
            v36 = *((_QWORD *)v27 + 7);
            __p[1] = 0;
            *(_QWORD *)&v74 = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v82.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
            goto LABEL_61;
          case 8:
            v37 = *((_QWORD *)v27 + 7);
            v38 = *(unsigned int **)(v37 + 16);
            __p[0] = *(void **)(v37 + 8);
            __p[1] = v38;
            if (v38)
            {
              v39 = v38 + 2;
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            v41 = *(_OWORD *)(v37 + 24);
            v42 = *(_OWORD *)(v37 + 56);
            v75 = *(_OWORD *)(v37 + 40);
            v76 = v42;
            v74 = v41;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
            goto LABEL_61;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v27 + 7) + 8);
            turi::flexible_type_fail(0);
            if (*((_QWORD *)&v75 + 1))
            {
              *(_QWORD *)&v76 = *((_QWORD *)&v75 + 1);
              operator delete(*((void **)&v75 + 1));
            }
            if ((_QWORD)v74)
            {
              *((_QWORD *)&v74 + 1) = v74;
              operator delete((void *)v74);
            }
            v29 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v30 = (unint64_t *)((char *)__p[1] + 8);
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
LABEL_61:
            if (v81 < 0)
              operator delete((void *)v80[0]);
            v43 = (uint64_t **)(*a1 + 2);
            std::string::basic_string[abi:ne180100]<0>(v80, "end_index");
            __p[0] = v80;
            v44 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v43, v80, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
            switch(*((_BYTE *)v44 + 68))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_87;
              case 2:
                v49 = *((_QWORD *)v44 + 7);
                __idx = 0;
                v50 = (char *)(v49 + 8);
                if (*(char *)(v49 + 31) < 0)
                  v50 = *(char **)(v49 + 8);
                std::string::basic_string[abi:ne180100]<0>(__p, v50);
                std::stoll((const std::string *)__p, &__idx, 10);
                if (SBYTE7(v74) < 0)
                  operator delete(__p[0]);
                if (*(char *)(v49 + 31) < 0)
                  v51 = *(_QWORD *)(v49 + 16);
                else
                  v51 = *(unsigned __int8 *)(v49 + 31);
                if (__idx != v51)
                {
                  v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v71 = std::string::append(&v82, " cannot be interpreted as an integer");
                  v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v74 = *((_QWORD *)&v71->__r_.__value_.__l + 2);
                  *(_OWORD *)__p = v72;
                  v71->__r_.__value_.__l.__size_ = 0;
                  v71->__r_.__value_.__r.__words[2] = 0;
                  v71->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v70, (const std::string *)__p);
                  __cxa_throw(v70, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                goto LABEL_87;
              case 3:
                v45 = *((_QWORD *)v44 + 7);
                __p[1] = 0;
                *(_QWORD *)&v74 = 0;
                __p[0] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v45 + 8), *(_QWORD *)(v45 + 16), (uint64_t)(*(_QWORD *)(v45 + 16) - *(_QWORD *)(v45 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                goto LABEL_87;
              case 4:
                v52 = *((_QWORD *)v44 + 7);
                __p[1] = 0;
                *(_QWORD *)&v74 = 0;
                __p[0] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v52 + 8), *(uint64_t **)(v52 + 16), (uint64_t)(*(_QWORD *)(v52 + 16) - *(_QWORD *)(v52 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v82.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
                goto LABEL_87;
              case 5:
                v53 = *((_QWORD *)v44 + 7);
                __p[1] = 0;
                *(_QWORD *)&v74 = 0;
                __p[0] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), (uint64_t)(*(_QWORD *)(v53 + 16) - *(_QWORD *)(v53 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v82.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
                goto LABEL_87;
              case 8:
                v54 = *((_QWORD *)v44 + 7);
                v55 = *(unsigned int **)(v54 + 16);
                __p[0] = *(void **)(v54 + 8);
                __p[1] = v55;
                if (v55)
                {
                  v56 = v55 + 2;
                  do
                    v57 = __ldxr(v56);
                  while (__stxr(v57 + 1, v56));
                }
                v58 = *(_OWORD *)(v54 + 24);
                v59 = *(_OWORD *)(v54 + 56);
                v75 = *(_OWORD *)(v54 + 40);
                v76 = v59;
                v74 = v58;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
                goto LABEL_87;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((_QWORD *)v44 + 7) + 8);
                turi::flexible_type_fail(0);
                if (*((_QWORD *)&v75 + 1))
                {
                  *(_QWORD *)&v76 = *((_QWORD *)&v75 + 1);
                  operator delete(*((void **)&v75 + 1));
                }
                if ((_QWORD)v74)
                {
                  *((_QWORD *)&v74 + 1) = v74;
                  operator delete((void *)v74);
                }
                v46 = (std::__shared_weak_count *)__p[1];
                if (__p[1])
                {
                  v47 = (unint64_t *)((char *)__p[1] + 8);
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
LABEL_87:
                if (v81 < 0)
                  operator delete((void *)v80[0]);
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Sequence(", 9);
                v60 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)")[", 2);
                v61 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)":", 1);
                v62 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"]", 1);
                std::stringbuf::str();
                __p[0] = *(void **)MEMORY[0x24BEDB800];
                *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
                __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
                if (v78 < 0)
                  operator delete(v77);
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                return MEMORY[0x219A198F4](&v79);
              default:
                goto LABEL_101;
            }
          default:
            goto LABEL_101;
        }
      default:
        break;
    }
LABEL_101:
    turi::flexible_type_fail(0);
    __break(1u);
  }
  __p[0] = &v82;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()();
}

void sub_2180E9BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 73) < 0)
  {
    operator delete(*(void **)(v16 - 96));
    if ((v15 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v16 - 97) < 0)
        operator delete(*(void **)(v16 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::RANGE_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 115, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180E9EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"start\")", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 116, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180EA028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"begin_index\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 117, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180EA1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"end_index\")", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 118, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2180EA328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::repr(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  char *v16;
  const std::string *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  char *v35;
  const std::string *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v58;
  __int128 v59;
  std::runtime_error *v60;
  std::string *v61;
  __int128 v62;
  void *__p[2];
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  _QWORD v67[11];
  char v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  std::string v74;
  size_t __idx;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
  v2 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v70, "sarray");
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  v3 = *((_QWORD *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 32), (const void **)&v70, (uint64_t)&std::piecewise_construct, &v74)+ 7);
  v5 = *(_QWORD *)(v3 + 8);
  v4 = *(std::__shared_weak_count **)(v3 + 16);
  v65 = v5;
  v66 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (SBYTE7(v71) < 0)
    operator delete((void *)v70);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"S", 1);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(&v65);
  std::ostream::operator<<();
  v8 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
  v9 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(v8 + 8, (const void **)__p);
  v10 = 0;
  switch(v9[12])
  {
    case 0:
      v10 = *(_QWORD *)v9;
      goto LABEL_34;
    case 1:
      v10 = (uint64_t)*(double *)v9;
      goto LABEL_34;
    case 2:
      v14 = *(_QWORD *)v9;
      v15 = (char **)(*(_QWORD *)v9 + 8);
      __idx = 0;
      v16 = (char *)v15;
      if (*(char *)(v14 + 31) < 0)
        v16 = *v15;
      v17 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v70, v16);
      v10 = std::stoll(v17, &__idx, 10);
      if (SBYTE7(v71) < 0)
        operator delete((void *)v70);
      if (*(char *)(v14 + 31) < 0)
        v18 = *(_QWORD *)(v14 + 16);
      else
        v18 = *(unsigned __int8 *)(v14 + 31);
      if (__idx != v18)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v58 = std::string::append(&v74, " cannot be interpreted as an integer");
        v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        *(_QWORD *)&v71 = *((_QWORD *)&v58->__r_.__value_.__l + 2);
        v70 = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&v70);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_34;
    case 3:
      v11 = *(_QWORD *)v9;
      *(_QWORD *)&v71 = 0;
      v70 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v70, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((_QWORD)v70)
      {
        *((_QWORD *)&v70 + 1) = v70;
        operator delete((void *)v70);
      }
      goto LABEL_33;
    case 4:
      v19 = *(_QWORD *)v9;
      *(_QWORD *)&v71 = 0;
      v70 = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v70, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      goto LABEL_33;
    case 5:
      v20 = *(_QWORD *)v9;
      *(_QWORD *)&v71 = 0;
      v70 = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v70, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      goto LABEL_33;
    case 6:
      v10 = (uint64_t)(*(_QWORD *)v9 << 8) >> 8;
      goto LABEL_34;
    case 7:
      goto LABEL_34;
    case 8:
      v21 = *(_QWORD *)v9;
      v22 = *(_QWORD *)(*(_QWORD *)v9 + 16);
      *(_QWORD *)&v70 = *(_QWORD *)(*(_QWORD *)v9 + 8);
      *((_QWORD *)&v70 + 1) = v22;
      if (v22)
      {
        v23 = (unsigned int *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = *(_OWORD *)(v21 + 24);
      v26 = *(_OWORD *)(v21 + 56);
      v72 = *(_OWORD *)(v21 + 40);
      v73 = v26;
      v71 = v25;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&v70 + 1);
      goto LABEL_33;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v70, *(_QWORD *)v9 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v72 + 1))
      {
        *(_QWORD *)&v73 = *((_QWORD *)&v72 + 1);
        operator delete(*((void **)&v72 + 1));
      }
      if ((_QWORD)v71)
      {
        *((_QWORD *)&v71 + 1) = v71;
        operator delete((void *)v71);
      }
      v10 = *((_QWORD *)&v70 + 1);
      if (!*((_QWORD *)&v70 + 1))
        goto LABEL_34;
      v12 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
      }
LABEL_33:
      v10 = 0;
LABEL_34:
      if (v64 < 0)
        operator delete(__p[0]);
      break;
    default:
LABEL_91:
      result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  v27 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
  v28 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(v27 + 8, (const void **)__p);
  v29 = 0;
  switch(v28[12])
  {
    case 0:
      v29 = *(_QWORD *)v28;
      goto LABEL_64;
    case 1:
      v29 = (uint64_t)*(double *)v28;
      goto LABEL_64;
    case 2:
      v33 = *(_QWORD *)v28;
      v34 = (char **)(*(_QWORD *)v28 + 8);
      __idx = 0;
      v35 = (char *)v34;
      if (*(char *)(v33 + 31) < 0)
        v35 = *v34;
      v36 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v70, v35);
      v29 = std::stoll(v36, &__idx, 10);
      if (SBYTE7(v71) < 0)
        operator delete((void *)v70);
      if (*(char *)(v33 + 31) < 0)
        v37 = *(_QWORD *)(v33 + 16);
      else
        v37 = *(unsigned __int8 *)(v33 + 31);
      if (__idx != v37)
      {
        v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v61 = std::string::append(&v74, " cannot be interpreted as an integer");
        v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        *(_QWORD *)&v71 = *((_QWORD *)&v61->__r_.__value_.__l + 2);
        v70 = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v60, (const std::string *)&v70);
        __cxa_throw(v60, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_64;
    case 3:
      v30 = *(_QWORD *)v28;
      *(_QWORD *)&v71 = 0;
      v70 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v70, *(const void **)(v30 + 8), *(_QWORD *)(v30 + 16), (uint64_t)(*(_QWORD *)(v30 + 16) - *(_QWORD *)(v30 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((_QWORD)v70)
      {
        *((_QWORD *)&v70 + 1) = v70;
        operator delete((void *)v70);
      }
      goto LABEL_63;
    case 4:
      v38 = *(_QWORD *)v28;
      *(_QWORD *)&v71 = 0;
      v70 = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v70, *(uint64_t **)(v38 + 8), *(uint64_t **)(v38 + 16), (uint64_t)(*(_QWORD *)(v38 + 16) - *(_QWORD *)(v38 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      goto LABEL_63;
    case 5:
      v39 = *(_QWORD *)v28;
      *(_QWORD *)&v71 = 0;
      v70 = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v70, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(_QWORD *)(v39 + 16) - *(_QWORD *)(v39 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      goto LABEL_63;
    case 6:
      v29 = (uint64_t)(*(_QWORD *)v28 << 8) >> 8;
      goto LABEL_64;
    case 7:
      goto LABEL_64;
    case 8:
      v40 = *(_QWORD *)v28;
      v41 = *(_QWORD *)(*(_QWORD *)v28 + 16);
      *(_QWORD *)&v70 = *(_QWORD *)(*(_QWORD *)v28 + 8);
      *((_QWORD *)&v70 + 1) = v41;
      if (v41)
      {
        v42 = (unsigned int *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = *(_OWORD *)(v40 + 24);
      v45 = *(_OWORD *)(v40 + 56);
      v72 = *(_OWORD *)(v40 + 40);
      v73 = v45;
      v71 = v44;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&v70 + 1);
      goto LABEL_63;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v70, *(_QWORD *)v28 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v72 + 1))
      {
        *(_QWORD *)&v73 = *((_QWORD *)&v72 + 1);
        operator delete(*((void **)&v72 + 1));
      }
      if ((_QWORD)v71)
      {
        *((_QWORD *)&v71 + 1) = v71;
        operator delete((void *)v71);
      }
      v29 = *((_QWORD *)&v70 + 1);
      if (!*((_QWORD *)&v70 + 1))
        goto LABEL_64;
      v31 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v29);
      }
LABEL_63:
      v29 = 0;
LABEL_64:
      if ((v64 & 0x80000000) == 0)
      {
        if (!v10)
          goto LABEL_68;
LABEL_76:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"[", 1);
        v51 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)",", 1);
        v52 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"]", 1);
        goto LABEL_77;
      }
      operator delete(__p[0]);
      if (v10)
        goto LABEL_76;
LABEL_68:
      if (*(_BYTE *)(v65 + 248) && (v46 = *(uint64_t **)(v65 + 80), (v47 = *(_QWORD *)(v65 + 88) - (_QWORD)v46) != 0))
      {
        v48 = 0;
        v49 = v47 >> 3;
        if (v49 <= 1)
          v49 = 1;
        do
        {
          v50 = *v46++;
          v48 += v50;
          --v49;
        }
        while (v49);
      }
      else
      {
        v48 = 0;
      }
      if (v29 != v48)
        goto LABEL_76;
LABEL_77:
      std::stringbuf::str();
      v53 = v66;
      if (v66)
      {
        v54 = (unint64_t *)&v66->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v67[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v67 + *(_QWORD *)(v67[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v67[1] = MEMORY[0x24BEDB848] + 16;
      if (v68 < 0)
        operator delete((void *)v67[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x219A198F4](&v69);
    default:
      goto LABEL_91;
  }
}

void sub_2180EAB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  void *v17;
  int v18;
  uint64_t v19;

  if (*(char *)(v19 - 137) < 0)
    operator delete(*(void **)(v19 - 160));
  if (*(char *)(v19 - 57) < 0)
  {
    operator delete(*(void **)(v19 - 80));
    if ((v18 & 1) == 0)
    {
LABEL_8:
      if (a14 < 0)
        operator delete(__p);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v17);
  goto LABEL_8;
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(uint64_t *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;

  if ((v2 & 1) == 0
  {
    turi::mutex::mutex(&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::access_lock);
    __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::access_lock, &dword_217E69000);
  }
  pthread_mutex_lock(&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::access_lock);
  if ((v3 & 1) == 0
  {
    qword_254FD3DA0 = 0;
    off_254FD3D98 = 0;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers = &off_254FD3D98;
    __cxa_atexit((void (*)(void *))std::map<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>::~map[abi:ne180100], &turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers, &dword_217E69000);
  }
  v4 = *a1;
  v26 = *a1;
  v5 = off_254FD3D98;
  if (off_254FD3D98)
  {
    v6 = (uint64_t *)&off_254FD3D98;
    do
    {
      v7 = v5[4];
      v8 = v7 < v4;
      if (v7 >= v4)
        v9 = v5;
      else
        v9 = v5 + 1;
      if (!v8)
        v6 = v5;
      v5 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != (uint64_t *)&off_254FD3D98 && v6[4] <= v4)
    {
      v10 = v6[6];
      if (v10 && *(_QWORD *)(v10 + 8) != -1)
      {
        v11 = v6 + 7;
        goto LABEL_37;
      }
      std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::erase((uint64_t **)&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers, v6);
    }
  }
  ++turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::current_number;
  v12 = (uint64_t *)turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers;
  if ((_BYTE)turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::current_number)
    v13 = 1;
  else
    v13 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers == (_UNKNOWN *)&off_254FD3D98;
  if (!v13)
  {
    do
    {
      v14 = v12[6];
      if (!v14 || *(_QWORD *)(v14 + 8) == -1)
      {
        v16 = std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::erase((uint64_t **)&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers, v12);
      }
      else
      {
        v15 = (uint64_t *)v12[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (uint64_t *)v12[2];
            v13 = *v16 == (_QWORD)v12;
            v12 = v16;
          }
          while (!v13);
        }
      }
      v12 = v16;
    }
    while (v16 != (uint64_t *)&off_254FD3D98);
  }
  v18 = *a1;
  v17 = a1[1];
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 16);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::current_number;
  v27 = &v26;
  v22 = std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers, &v26, (uint64_t)&std::piecewise_construct, &v27);
  v23 = (std::__shared_weak_count *)v22[6];
  v22[5] = v18;
  v22[6] = v17;
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  v22[7] = v21;
  v11 = &turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::current_number;
LABEL_37:
  v24 = *v11;
  pthread_mutex_unlock(&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::access_lock);
  return v24;
}

void sub_2180EAF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::map<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;

  if (a2)
  {
    std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::destroy(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;

  v3 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(a1, a2);
  v4 = (std::__shared_weak_count *)a2[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::repr(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::string::size_type v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  std::string::size_type v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v74;
  __int128 v75;
  std::runtime_error *v76;
  std::string *v77;
  __int128 v78;
  _QWORD v79[11];
  char v80;
  uint64_t v81;
  __int128 __p;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  std::string v86;
  size_t __idx;
  char v88;
  void *v89;
  void *v90;
  _QWORD *v91;
  _BYTE v92[24];
  unint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v79);
  v2 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sframe");
  v3 = std::map<std::string,turi::neural_net::shared_float_array>::at(v2 + 32, (const void **)&__p);
  turi::sframe::sframe((turi::sframe *)v92, (const turi::sframe *)(*(_QWORD *)v3 + 8));
  if (SBYTE7(v83) < 0)
    operator delete((void *)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"SF(", 3);
  if (v93)
  {
    std::vector<unsigned long>::vector(&__p, v93);
    if (v93)
    {
      for (i = 0; i < v93; ++i)
      {
        turi::sframe::select_column((uint64_t)v92, i, &v86);
        v5 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag((uint64_t *)&v86);
        *(_QWORD *)(__p + 8 * i) = v5;
        size = (std::__shared_weak_count *)v86.__r_.__value_.__l.__size_;
        if (v86.__r_.__value_.__l.__size_)
        {
          v7 = (unint64_t *)(v86.__r_.__value_.__l.__size_ + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }
    }
    v9 = *(_QWORD *)__p;
    v10 = operator new(8uLL);
    v89 = v10;
    *v10 = v9;
    v90 = v10 + 1;
    v91 = v10 + 1;
    memset(&v86, 0, sizeof(v86));
    __idx = (size_t)&v86;
    v88 = 0;
    v86.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v86.__r_.__value_.__l.__size_ = v86.__r_.__value_.__r.__words[0];
    v86.__r_.__value_.__r.__words[2] = v86.__r_.__value_.__r.__words[0] + 24;
    v86.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long> const*,std::vector<unsigned long> const*,std::vector<unsigned long>*>((uint64_t)&v86.__r_.__value_.__r.__words[2], (uint64_t)&v89, (uint64_t)v92, v86.__r_.__value_.__l.__data_);
    if (v89)
    {
      v90 = v89;
      operator delete(v89);
    }
    v11 = __p;
    if (*((_QWORD *)&__p + 1) - (_QWORD)__p >= 9uLL)
    {
      v12 = 1;
      do
      {
        v13 = *(_QWORD *)(v11 + 8 * v12);
        v14 = v86.__r_.__value_.__l.__size_;
        v15 = *(char **)(v86.__r_.__value_.__l.__size_ - 16);
        if (v13 == *((_QWORD *)v15 - 1) + 1)
        {
          v16 = *(_QWORD *)(v86.__r_.__value_.__l.__size_ - 8);
          if ((unint64_t)v15 >= v16)
          {
            v19 = *(char **)(v86.__r_.__value_.__l.__size_ - 24);
            v20 = (v15 - v19) >> 3;
            if ((unint64_t)(v20 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v21 = v16 - (_QWORD)v19;
            v22 = (uint64_t)(v16 - (_QWORD)v19) >> 2;
            if (v22 <= v20 + 1)
              v22 = v20 + 1;
            if (v21 >= 0x7FFFFFFFFFFFFFF8)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            if (v23)
            {
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v86.__r_.__value_.__l.__size_ - 8, v23);
              v19 = *(char **)(v14 - 24);
              v15 = *(char **)(v14 - 16);
              v13 = *(_QWORD *)(v11 + 8 * v12);
            }
            else
            {
              v24 = 0;
            }
            v25 = &v24[8 * v20];
            *(_QWORD *)v25 = v13;
            v17 = v25 + 8;
            while (v15 != v19)
            {
              v26 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v25 - 1) = v26;
              v25 -= 8;
            }
            *(_QWORD *)(v14 - 24) = v25;
            *(_QWORD *)(v14 - 16) = v17;
            *(_QWORD *)(v14 - 8) = &v24[8 * v23];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *(_QWORD *)v15 = v13;
            v17 = v15 + 8;
          }
          *(_QWORD *)(v14 - 16) = v17;
        }
        else
        {
          v18 = operator new(8uLL);
          v89 = v18;
          *v18 = v13;
          v90 = v18 + 1;
          v91 = v18 + 1;
          std::vector<std::vector<unsigned long>>::push_back[abi:ne180100]((uint64_t *)&v86, (uint64_t)&v89);
          if (v89)
          {
            v90 = v89;
            operator delete(v89);
          }
        }
        ++v12;
        v11 = __p;
      }
      while (v12 < (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
    }
    v28 = v86.__r_.__value_.__l.__size_;
    v27 = (_QWORD *)v86.__r_.__value_.__r.__words[0];
    if (v86.__r_.__value_.__r.__words[0] != v86.__r_.__value_.__l.__size_)
    {
      v29 = 1;
      do
      {
        if ((v29 & 1) == 0)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)",", 1);
        v30 = (uint64_t)(v27[1] - *v27) >> 3;
        if (v30 == 2)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"S", 1);
          v31 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)",S", 2);
        }
        else if (v30 == 1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"S", 1);
        }
        else
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"S", 1);
          v32 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)",...,S", 6);
        }
        std::ostream::operator<<();
        v29 = 0;
        v27 += 3;
      }
      while (v27 != (_QWORD *)v28);
    }
    v89 = &v86;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)")", 1);
  v33 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v89, "begin_index");
  v34 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(v33 + 8, (const void **)&v89);
  v35 = 0;
  switch(v34[12])
  {
    case 0:
      v35 = *(_QWORD *)v34;
      goto LABEL_77;
    case 1:
      v35 = (uint64_t)*(double *)v34;
      goto LABEL_77;
    case 2:
      v39 = *(_QWORD *)v34;
      v40 = (char **)(*(_QWORD *)v34 + 8);
      __idx = 0;
      v41 = (char *)v40;
      if (*(char *)(v39 + 31) < 0)
        v41 = *v40;
      std::string::basic_string[abi:ne180100]<0>(&__p, v41);
      v35 = std::stoll((const std::string *)&__p, &__idx, 10);
      if (SBYTE7(v83) < 0)
        operator delete((void *)__p);
      if (*(char *)(v39 + 31) < 0)
        v42 = *(_QWORD *)(v39 + 16);
      else
        v42 = *(unsigned __int8 *)(v39 + 31);
      if (__idx != v42)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v74 = std::string::append(&v86, " cannot be interpreted as an integer");
        v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        *(_QWORD *)&v83 = *((_QWORD *)&v74->__r_.__value_.__l + 2);
        __p = v75;
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_77;
    case 3:
      v36 = *(_QWORD *)v34;
      *(_QWORD *)&v83 = 0;
      __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v36 + 8), *(_QWORD *)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      goto LABEL_76;
    case 4:
      v43 = *(_QWORD *)v34;
      *(_QWORD *)&v83 = 0;
      __p = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v43 + 8), *(uint64_t **)(v43 + 16), (uint64_t)(*(_QWORD *)(v43 + 16) - *(_QWORD *)(v43 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
      goto LABEL_76;
    case 5:
      v44 = *(_QWORD *)v34;
      *(_QWORD *)&v83 = 0;
      __p = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(_QWORD *)(v44 + 16) - *(_QWORD *)(v44 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
      goto LABEL_76;
    case 6:
      v35 = (uint64_t)(*(_QWORD *)v34 << 8) >> 8;
      goto LABEL_77;
    case 7:
      goto LABEL_77;
    case 8:
      v45 = *(_QWORD *)v34;
      v46 = *(_QWORD *)(*(_QWORD *)v34 + 16);
      *(_QWORD *)&__p = *(_QWORD *)(*(_QWORD *)v34 + 8);
      *((_QWORD *)&__p + 1) = v46;
      if (v46)
      {
        v47 = (unsigned int *)(v46 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = *(_OWORD *)(v45 + 24);
      v50 = *(_OWORD *)(v45 + 56);
      v84 = *(_OWORD *)(v45 + 40);
      v85 = v50;
      v83 = v49;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p + 1);
      goto LABEL_76;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v34 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v84 + 1))
      {
        *(_QWORD *)&v85 = *((_QWORD *)&v84 + 1);
        operator delete(*((void **)&v84 + 1));
      }
      if ((_QWORD)v83)
      {
        *((_QWORD *)&v83 + 1) = v83;
        operator delete((void *)v83);
      }
      v35 = *((_QWORD *)&__p + 1);
      if (!*((_QWORD *)&__p + 1))
        goto LABEL_77;
      v37 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v35);
      }
LABEL_76:
      v35 = 0;
LABEL_77:
      if (SHIBYTE(v91) < 0)
        operator delete(v89);
      break;
    default:
LABEL_126:
      result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  v51 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v89, "end_index");
  v52 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at(v51 + 8, (const void **)&v89);
  v53 = 0;
  switch(v52[12])
  {
    case 0:
      v53 = *(_QWORD *)v52;
      goto LABEL_107;
    case 1:
      v53 = (uint64_t)*(double *)v52;
      goto LABEL_107;
    case 2:
      v57 = *(_QWORD *)v52;
      v58 = (char **)(*(_QWORD *)v52 + 8);
      __idx = 0;
      v59 = (char *)v58;
      if (*(char *)(v57 + 31) < 0)
        v59 = *v58;
      std::string::basic_string[abi:ne180100]<0>(&__p, v59);
      v53 = std::stoll((const std::string *)&__p, &__idx, 10);
      if (SBYTE7(v83) < 0)
        operator delete((void *)__p);
      if (*(char *)(v57 + 31) < 0)
        v60 = *(_QWORD *)(v57 + 16);
      else
        v60 = *(unsigned __int8 *)(v57 + 31);
      if (__idx != v60)
      {
        v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v77 = std::string::append(&v86, " cannot be interpreted as an integer");
        v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        *(_QWORD *)&v83 = *((_QWORD *)&v77->__r_.__value_.__l + 2);
        __p = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v76, (const std::string *)&__p);
        __cxa_throw(v76, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_107;
    case 3:
      v54 = *(_QWORD *)v52;
      *(_QWORD *)&v83 = 0;
      __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v54 + 8), *(_QWORD *)(v54 + 16), (uint64_t)(*(_QWORD *)(v54 + 16) - *(_QWORD *)(v54 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      goto LABEL_106;
    case 4:
      v61 = *(_QWORD *)v52;
      *(_QWORD *)&v83 = 0;
      __p = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v61 + 8), *(uint64_t **)(v61 + 16), (uint64_t)(*(_QWORD *)(v61 + 16) - *(_QWORD *)(v61 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
      goto LABEL_106;
    case 5:
      v62 = *(_QWORD *)v52;
      *(_QWORD *)&v83 = 0;
      __p = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v62 + 8), *(uint64_t **)(v62 + 16), (uint64_t)(*(_QWORD *)(v62 + 16) - *(_QWORD *)(v62 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
      goto LABEL_106;
    case 6:
      v53 = (uint64_t)(*(_QWORD *)v52 << 8) >> 8;
      goto LABEL_107;
    case 7:
      goto LABEL_107;
    case 8:
      v63 = *(_QWORD *)v52;
      v64 = *(_QWORD *)(*(_QWORD *)v52 + 16);
      *(_QWORD *)&__p = *(_QWORD *)(*(_QWORD *)v52 + 8);
      *((_QWORD *)&__p + 1) = v64;
      if (v64)
      {
        v65 = (unsigned int *)(v64 + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v67 = *(_OWORD *)(v63 + 24);
      v68 = *(_OWORD *)(v63 + 56);
      v84 = *(_OWORD *)(v63 + 40);
      v85 = v68;
      v83 = v67;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p + 1);
      goto LABEL_106;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v52 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v84 + 1))
      {
        *(_QWORD *)&v85 = *((_QWORD *)&v84 + 1);
        operator delete(*((void **)&v84 + 1));
      }
      if ((_QWORD)v83)
      {
        *((_QWORD *)&v83 + 1) = v83;
        operator delete((void *)v83);
      }
      v53 = *((_QWORD *)&__p + 1);
      if (!*((_QWORD *)&__p + 1))
        goto LABEL_107;
      v55 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v53);
      }
LABEL_106:
      v53 = 0;
LABEL_107:
      if (SHIBYTE(v91) < 0)
      {
        operator delete(v89);
        if (!v35)
          goto LABEL_111;
LABEL_115:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"[", 1);
        v70 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)",", 1);
        v71 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"]", 1);
        goto LABEL_116;
      }
      if (v35)
        goto LABEL_115;
LABEL_111:
      if (v95)
        v69 = v94;
      else
        v69 = 0;
      if (v53 != v69)
        goto LABEL_115;
LABEL_116:
      std::stringbuf::str();
      turi::sframe::~sframe((turi::sframe *)v92);
      v79[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v79 + *(_QWORD *)(v79[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v79[1] = MEMORY[0x24BEDB848] + 16;
      if (v80 < 0)
        operator delete((void *)v79[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x219A198F4](&v81);
    default:
      goto LABEL_126;
  }
}

void sub_2180EBBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  char a70;
  void *v70;
  int v71;

  if (a48 < 0)
    operator delete(__p);
  if (a61 < 0)
  {
    operator delete(a56);
    if ((v71 & 1) == 0)
    {
LABEL_8:
      if (a69 < 0)
        operator delete(a64);
      turi::sframe::~sframe((turi::sframe *)&a70);
      std::ostringstream::~ostringstream((uint64_t)&a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v71)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v70);
  goto LABEL_8;
}

_QWORD *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::repr@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  _QWORD *v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  int *v16;
  std::__shared_weak_count *v17;

  v3 = *(std::__shared_weak_count **)(a1 + 8);
  v16 = *(int **)a1;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(&v16);
  v7 = v17;
  if (v17)
  {
    v8 = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  switch(v6)
  {
    case 1:
      v10 = "Tr->[C0]";
      return std::string::basic_string[abi:ne180100]<0>(a2, v10);
    case 2:
      v10 = "Tr->[C0,C1]";
      return std::string::basic_string[abi:ne180100]<0>(a2, v10);
    case 3:
      v10 = "Tr->[C0,C1,C2]";
      return std::string::basic_string[abi:ne180100]<0>(a2, v10);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Tr->[C0,...,C", 13);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"]", 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x219A198F4](&v15);
}

void sub_2180EBF4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::repr(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  unsigned __int8 v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Union(", 6);
  v4 = *(uint64_t **)(*(_QWORD *)a1 + 56);
  v5 = *(uint64_t **)(*(_QWORD *)a1 + 64);
  if (v4 != v5)
  {
    v6 = 1;
    do
    {
      if ((v6 & 1) == 0)
      {
        LOBYTE(__p[0]) = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)__p, 1);
      }
      v7 = (std::__shared_weak_count *)v4[1];
      v17 = *v4;
      v18 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(_QWORD *)(a2 + 24);
      if (!v10)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(__p, v10, &v17);
      if ((v20 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if ((v20 & 0x80u) == 0)
        v12 = v20;
      else
        v12 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v11, v12);
      if ((char)v20 < 0)
        operator delete(__p[0]);
      v13 = v18;
      if (v18)
      {
        v14 = (unint64_t *)&v18->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v6 = 0;
      v4 += 2;
    }
    while (v4 != v5);
  }
  LOBYTE(__p[0]) = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)__p, 1);
  std::stringbuf::str();
  v21[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v21[1] = MEMORY[0x24BEDB848] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v23);
}

void sub_2180EC148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::repr(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  double v50;
  double v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  char **v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  char **v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  double v102;
  int v103;
  uint64_t v104;
  uint64_t v106;
  int v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  char **v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int *v122;
  unsigned int v123;
  __int128 v124;
  __int128 v125;
  unint64_t v126;
  uint64_t *v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  std::runtime_error *v137;
  std::string *v138;
  __int128 v139;
  char *v140;
  unint64_t v141;
  char v142;
  char *v143;
  const char *v144;
  uint64_t v145;
  __int128 v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  void **v150;
  uint64_t v151;
  _QWORD *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v163;
  __int128 v164;
  std::runtime_error *v165;
  std::string *v166;
  __int128 v167;
  std::runtime_error *v168;
  std::string *v169;
  __int128 v170;
  std::runtime_error *v171;
  std::string *v172;
  __int128 v173;
  __int128 v175;
  std::string v176;
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  _QWORD v181[11];
  char v182;
  uint64_t v183;
  void *__p[2];
  __int128 v185;
  __int128 v186;
  __int128 v187;
  std::string __idx;
  size_t v189;
  uint64_t v190;
  unsigned int *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;

  v195 = *MEMORY[0x24BDAC8D0];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v181);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)"UP(", 3);
  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "index_map");
  v4 = *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(v3 + 8, (const void **)__p);
  if (SBYTE7(v185) < 0)
    operator delete(__p[0]);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 == *(_QWORD *)(v4 + 16))
  {
LABEL_243:
    LOBYTE(__p[0]) = 41;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)__p, 1);
    std::stringbuf::str();
    v181[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v181 + *(_QWORD *)(v181[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v181[1] = MEMORY[0x24BEDB848] + 16;
    if (v182 < 0)
      operator delete((void *)v181[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x219A198F4](&v183);
  }
  else
  {
    v6 = 0;
    switch(*(_BYTE *)(v5 + 12))
    {
      case 0:
        v6 = *(_QWORD *)v5;
        goto LABEL_32;
      case 1:
        v6 = (uint64_t)*(double *)v5;
        goto LABEL_32;
      case 2:
        v10 = *(_QWORD *)v5;
        v11 = (char **)(*(_QWORD *)v5 + 8);
        __idx.__r_.__value_.__r.__words[0] = 0;
        v12 = (char *)v11;
        if (*(char *)(v10 + 31) < 0)
          v12 = *v11;
        std::string::basic_string[abi:ne180100]<0>(__p, v12);
        v6 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
        if (SBYTE7(v185) < 0)
          operator delete(__p[0]);
        if (*(char *)(v10 + 31) < 0)
          v13 = *(_QWORD *)(v10 + 16);
        else
          v13 = *(unsigned __int8 *)(v10 + 31);
        if (__idx.__r_.__value_.__r.__words[0] != v13)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v163 = std::string::append(&v176, " cannot be interpreted as an integer");
          v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
          *(_QWORD *)&v185 = *((_QWORD *)&v163->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v164;
          v163->__r_.__value_.__l.__size_ = 0;
          v163->__r_.__value_.__r.__words[2] = 0;
          v163->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_32;
      case 3:
        v7 = *(_QWORD *)v5;
        __p[1] = 0;
        *(_QWORD *)&v185 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v7 + 8), *(_QWORD *)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_31;
      case 4:
        v14 = *(_QWORD *)v5;
        __p[1] = 0;
        *(_QWORD *)&v185 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v176.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
        goto LABEL_31;
      case 5:
        v15 = *(_QWORD *)v5;
        __p[1] = 0;
        *(_QWORD *)&v185 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v176.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
        goto LABEL_31;
      case 6:
        v6 = (uint64_t)(*(_QWORD *)v5 << 8) >> 8;
        goto LABEL_32;
      case 7:
        goto LABEL_32;
      case 8:
        v16 = *(_QWORD *)v5;
        v17 = *(unsigned int **)(v16 + 16);
        __p[0] = *(void **)(v16 + 8);
        __p[1] = v17;
        if (v17)
        {
          v18 = v17 + 2;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = *(_OWORD *)(v16 + 24);
        v21 = *(_OWORD *)(v16 + 56);
        v186 = *(_OWORD *)(v16 + 40);
        v187 = v21;
        v185 = v20;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
        goto LABEL_31;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v5 + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v186 + 1))
        {
          *(_QWORD *)&v187 = *((_QWORD *)&v186 + 1);
          operator delete(*((void **)&v186 + 1));
        }
        if ((_QWORD)v185)
        {
          *((_QWORD *)&v185 + 1) = v185;
          operator delete((void *)v185);
        }
        v6 = (uint64_t)__p[1];
        if (!__p[1])
          goto LABEL_32;
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
        }
LABEL_31:
        v6 = 0;
LABEL_32:
        v22 = *(_QWORD *)(v4 + 8);
        v23 = 0;
        switch(*(_BYTE *)(v22 + 28))
        {
          case 0:
            v23 = *(_QWORD *)(v22 + 16);
            goto LABEL_60;
          case 1:
            v23 = (uint64_t)*(double *)(v22 + 16);
            goto LABEL_60;
          case 2:
            v28 = *(_QWORD *)(v22 + 16);
            __idx.__r_.__value_.__r.__words[0] = 0;
            v29 = (char *)(v28 + 8);
            if (*(char *)(v28 + 31) < 0)
              v29 = *(char **)(v28 + 8);
            std::string::basic_string[abi:ne180100]<0>(__p, v29);
            v23 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
            if (SBYTE7(v185) < 0)
              operator delete(__p[0]);
            if (*(char *)(v28 + 31) < 0)
              v30 = *(_QWORD *)(v28 + 16);
            else
              v30 = *(unsigned __int8 *)(v28 + 31);
            if (__idx.__r_.__value_.__r.__words[0] != v30)
            {
              v165 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v166 = std::string::append(&v176, " cannot be interpreted as an integer");
              v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
              *(_QWORD *)&v185 = *((_QWORD *)&v166->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v167;
              v166->__r_.__value_.__l.__size_ = 0;
              v166->__r_.__value_.__r.__words[2] = 0;
              v166->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v165, (const std::string *)__p);
              __cxa_throw(v165, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_60;
          case 3:
            v24 = *(_QWORD *)(v22 + 16);
            __p[1] = 0;
            *(_QWORD *)&v185 = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v24 + 8), *(_QWORD *)(v24 + 16), (uint64_t)(*(_QWORD *)(v24 + 16) - *(_QWORD *)(v24 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_59;
          case 4:
            v31 = *(_QWORD *)(v22 + 16);
            __p[1] = 0;
            *(_QWORD *)&v185 = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(_QWORD *)(v31 + 16) - *(_QWORD *)(v31 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v176.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
            goto LABEL_59;
          case 5:
            v32 = *(_QWORD *)(v22 + 16);
            __p[1] = 0;
            *(_QWORD *)&v185 = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v32 + 8), *(uint64_t **)(v32 + 16), (uint64_t)(*(_QWORD *)(v32 + 16) - *(_QWORD *)(v32 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v176.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
            goto LABEL_59;
          case 6:
            v23 = (uint64_t)(*(_QWORD *)(v22 + 16) << 8) >> 8;
            goto LABEL_60;
          case 7:
            goto LABEL_60;
          case 8:
            v33 = *(_QWORD *)(v22 + 16);
            v34 = *(unsigned int **)(v33 + 16);
            __p[0] = *(void **)(v33 + 8);
            __p[1] = v34;
            if (v34)
            {
              v35 = v34 + 2;
              do
                v36 = __ldxr(v35);
              while (__stxr(v36 + 1, v35));
            }
            v37 = *(_OWORD *)(v33 + 24);
            v38 = *(_OWORD *)(v33 + 56);
            v186 = *(_OWORD *)(v33 + 40);
            v187 = v38;
            v185 = v37;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
            goto LABEL_59;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)(v22 + 16) + 8);
            turi::flexible_type_fail(0);
            if (*((_QWORD *)&v186 + 1))
            {
              *(_QWORD *)&v187 = *((_QWORD *)&v186 + 1);
              operator delete(*((void **)&v186 + 1));
            }
            if ((_QWORD)v185)
            {
              *((_QWORD *)&v185 + 1) = v185;
              operator delete((void *)v185);
            }
            v25 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v26 = (unint64_t *)((char *)__p[1] + 8);
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
LABEL_59:
            v23 = 0;
LABEL_60:
            v39 = operator new(8uLL);
            *v39 = v23;
            v190 = v6;
            v191 = 0;
            v192 = 0uLL;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v191, v39, (uint64_t)(v39 + 1), 1uLL);
            v178 = 0;
            v179 = 0;
            v180 = 0;
            __p[0] = &v178;
            LOBYTE(__p[1]) = 0;
            v178 = (char *)operator new(0x20uLL);
            v179 = v178;
            v180 = v178 + 32;
            v179 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>> const*,std::pair<unsigned long,std::vector<unsigned long>> const*,std::pair<unsigned long,std::vector<unsigned long>>*>((uint64_t)&v180, (uint64_t)&v190, (uint64_t)&v193, v178);
            if (v191)
            {
              *(_QWORD *)&v192 = v191;
              operator delete(v191);
            }
            operator delete(v39);
            v40 = *(_QWORD *)(v4 + 8);
            if ((unint64_t)(*(_QWORD *)(v4 + 16) - v40) < 0x21)
            {
LABEL_208:
              v140 = v178;
              if (v179 != v178)
              {
                v141 = 0;
                v142 = 1;
                do
                {
                  v143 = &v140[32 * v141];
                  if ((v142 & 1) == 0)
                  {
                    if (*((_QWORD *)v143 - 4) == *(_QWORD *)v143)
                      v144 = ",";
                    else
                      v144 = ";";
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)v144, 1);
                  }
                  v145 = *(_QWORD *)v143;
                  if (!v141 || v145 != *(_QWORD *)&v178[32 * v141 - 32])
                  {
                    v146 = *(_OWORD *)(*(_QWORD *)(*a1 + 56) + 16 * v145);
                    v175 = v146;
                    if (*((_QWORD *)&v146 + 1))
                    {
                      v147 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
                      do
                        v148 = __ldxr(v147);
                      while (__stxr(v148 + 1, v147));
                    }
                    v149 = *(_QWORD *)(a2 + 24);
                    if (!v149)
                      std::__throw_bad_function_call[abi:ne180100]();
                    (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v149 + 48))(__p, v149, &v175);
                    if ((SBYTE7(v185) & 0x80u) == 0)
                      v150 = __p;
                    else
                      v150 = (void **)__p[0];
                    if ((SBYTE7(v185) & 0x80u) == 0)
                      v151 = BYTE7(v185);
                    else
                      v151 = (uint64_t)__p[1];
                    v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)v150, v151);
                    LOBYTE(v190) = 58;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)&v190, 1);
                    if (SBYTE7(v185) < 0)
                      operator delete(__p[0]);
                    v153 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
                    if (*((_QWORD *)&v175 + 1))
                    {
                      v154 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
                      do
                        v155 = __ldaxr(v154);
                      while (__stlxr(v155 - 1, v154));
                      if (!v155)
                      {
                        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                        std::__shared_weak_count::__release_weak(v153);
                      }
                    }
                  }
                  v156 = (uint64_t)(*(_QWORD *)&v140[32 * v141 + 16] - *(_QWORD *)&v140[32 * v141 + 8]) >> 3;
                  if (v156 != 1)
                  {
                    if (v156 == 3)
                    {
                      v158 = (_QWORD *)std::ostream::operator<<();
                      LOBYTE(__p[0]) = 44;
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)__p, 1);
                      v159 = (_QWORD *)std::ostream::operator<<();
                      LOBYTE(__p[0]) = 44;
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)__p, 1);
                    }
                    else if (v156 == 2)
                    {
                      v157 = (_QWORD *)std::ostream::operator<<();
                      LOBYTE(__p[0]) = 44;
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)__p, 1);
                    }
                    else
                    {
                      v160 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)",...,", 5);
                    }
                  }
                  std::ostream::operator<<();
                  v142 = 0;
                  ++v141;
                  v140 = v178;
                }
                while (v141 < (v179 - v178) >> 5);
              }
              __p[0] = &v178;
              std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_243;
            }
            v41 = 1;
            while (2)
            {
              v42 = v40 + 32 * v41;
              v43 = *((_QWORD *)v179 - 4);
              switch(*(_BYTE *)(v42 + 12))
              {
                case 0:
                  v50 = *(double *)v42;
                  v44 = *(_QWORD *)(v4 + 8);
                  if (*(_QWORD *)&v50 == v43)
                    goto LABEL_77;
                  goto LABEL_66;
                case 1:
                  v51 = *(double *)v42;
                  v44 = *(_QWORD *)(v4 + 8);
                  if (v51 == (double)v43)
                    goto LABEL_77;
                  goto LABEL_66;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
LABEL_65:
                  v44 = *(_QWORD *)(v4 + 8);
                  goto LABEL_66;
                case 6:
                  v47 = *(_DWORD *)(v42 + 8);
                  v48 = *(_QWORD *)v42 << 8;
                  v44 = *(_QWORD *)(v4 + 8);
                  if (v43 != v48 >> 8 || v47 != 0)
                  {
LABEL_66:
                    v45 = v44 + 32 * v41;
                    v46 = 0;
                    switch(*(_BYTE *)(v45 + 12))
                    {
                      case 0:
                        v46 = *(_QWORD *)v45;
                        goto LABEL_106;
                      case 1:
                        v46 = (uint64_t)*(double *)v45;
                        goto LABEL_106;
                      case 2:
                        v60 = *(_QWORD *)v45;
                        v61 = (char **)(*(_QWORD *)v45 + 8);
                        v189 = 0;
                        v62 = (char *)v61;
                        if (*(char *)(v60 + 31) < 0)
                          v62 = *v61;
                        std::string::basic_string[abi:ne180100]<0>(__p, v62);
                        v46 = std::stoll((const std::string *)__p, &v189, 10);
                        if (SBYTE7(v185) < 0)
                          operator delete(__p[0]);
                        if (*(char *)(v60 + 31) < 0)
                          v63 = *(_QWORD *)(v60 + 16);
                        else
                          v63 = *(unsigned __int8 *)(v60 + 31);
                        if (v189 != v63)
                        {
                          v168 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::operator+<char>();
                          v169 = std::string::append(&__idx, " cannot be interpreted as an integer");
                          v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
                          *(_QWORD *)&v185 = *((_QWORD *)&v169->__r_.__value_.__l + 2);
                          *(_OWORD *)__p = v170;
                          v169->__r_.__value_.__l.__size_ = 0;
                          v169->__r_.__value_.__r.__words[2] = 0;
                          v169->__r_.__value_.__r.__words[0] = 0;
                          std::runtime_error::runtime_error(v168, (const std::string *)__p);
                          __cxa_throw(v168, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                        }
                        goto LABEL_106;
                      case 3:
                        v57 = *(_QWORD *)v45;
                        __p[1] = 0;
                        *(_QWORD *)&v185 = 0;
                        __p[0] = 0;
                        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v57 + 8), *(_QWORD *)(v57 + 16), (uint64_t)(*(_QWORD *)(v57 + 16) - *(_QWORD *)(v57 + 8)) >> 3);
                        turi::flexible_type_fail(0);
                        if (__p[0])
                        {
                          __p[1] = __p[0];
                          operator delete(__p[0]);
                        }
                        goto LABEL_105;
                      case 4:
                        v64 = *(_QWORD *)v45;
                        __p[1] = 0;
                        *(_QWORD *)&v185 = 0;
                        __p[0] = 0;
                        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v64 + 8), *(uint64_t **)(v64 + 16), (uint64_t)(*(_QWORD *)(v64 + 16) - *(_QWORD *)(v64 + 8)) >> 4);
                        turi::flexible_type_fail(0);
                        __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
                        goto LABEL_105;
                      case 5:
                        v65 = *(_QWORD *)v45;
                        __p[1] = 0;
                        *(_QWORD *)&v185 = 0;
                        __p[0] = 0;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v65 + 8), *(uint64_t **)(v65 + 16), (uint64_t)(*(_QWORD *)(v65 + 16) - *(_QWORD *)(v65 + 8)) >> 5);
                        turi::flexible_type_fail(0);
                        __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
                        goto LABEL_105;
                      case 6:
                        v46 = (uint64_t)(*(_QWORD *)v45 << 8) >> 8;
                        goto LABEL_106;
                      case 7:
                        goto LABEL_106;
                      case 8:
                        v66 = *(_QWORD *)v45;
                        v67 = *(unsigned int **)(v66 + 16);
                        v190 = *(_QWORD *)(v66 + 8);
                        v191 = v67;
                        if (v67)
                        {
                          v68 = v67 + 2;
                          do
                            v69 = __ldxr(v68);
                          while (__stxr(v69 + 1, v68));
                        }
                        v70 = *(_OWORD *)(v66 + 24);
                        v71 = *(_OWORD *)(v66 + 56);
                        v193 = *(_OWORD *)(v66 + 40);
                        v194 = v71;
                        v192 = v70;
                        turi::flexible_type_fail(0);
                        boost::detail::shared_count::~shared_count(&v191);
                        goto LABEL_105;
                      case 9:
                        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v45 + 8);
                        turi::flexible_type_fail(0);
                        if (*((_QWORD *)&v186 + 1))
                        {
                          *(_QWORD *)&v187 = *((_QWORD *)&v186 + 1);
                          operator delete(*((void **)&v186 + 1));
                        }
                        if ((_QWORD)v185)
                        {
                          *((_QWORD *)&v185 + 1) = v185;
                          operator delete((void *)v185);
                        }
                        v46 = (uint64_t)__p[1];
                        if (!__p[1])
                          goto LABEL_106;
                        v58 = (unint64_t *)((char *)__p[1] + 8);
                        do
                          v59 = __ldaxr(v58);
                        while (__stlxr(v59 - 1, v58));
                        if (!v59)
                        {
                          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
                          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v46);
                        }
LABEL_105:
                        v46 = 0;
LABEL_106:
                        v72 = *(_QWORD *)(v4 + 8) + 32 * v41;
                        v73 = *(unsigned __int8 *)(v72 + 28);
                        v74 = 0;
                        v75 = (uint64_t *)(v72 + 16);
                        switch(v73)
                        {
                          case 0:
                            v74 = *v75;
                            goto LABEL_134;
                          case 1:
                            v74 = (uint64_t)*(double *)v75;
                            goto LABEL_134;
                          case 2:
                            v80 = *v75;
                            v81 = (char **)(*v75 + 8);
                            v189 = 0;
                            v82 = (char *)v81;
                            if (*(char *)(v80 + 31) < 0)
                              v82 = *v81;
                            std::string::basic_string[abi:ne180100]<0>(__p, v82);
                            v74 = std::stoll((const std::string *)__p, &v189, 10);
                            if (SBYTE7(v185) < 0)
                              operator delete(__p[0]);
                            if (*(char *)(v80 + 31) < 0)
                              v83 = *(_QWORD *)(v80 + 16);
                            else
                              v83 = *(unsigned __int8 *)(v80 + 31);
                            if (v189 != v83)
                            {
                              v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                              std::operator+<char>();
                              v172 = std::string::append(&__idx, " cannot be interpreted as an integer");
                              v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
                              *(_QWORD *)&v185 = *((_QWORD *)&v172->__r_.__value_.__l + 2);
                              *(_OWORD *)__p = v173;
                              v172->__r_.__value_.__l.__size_ = 0;
                              v172->__r_.__value_.__r.__words[2] = 0;
                              v172->__r_.__value_.__r.__words[0] = 0;
                              std::runtime_error::runtime_error(v171, (const std::string *)__p);
                              __cxa_throw(v171, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                            }
                            goto LABEL_134;
                          case 3:
                            v76 = *v75;
                            __p[1] = 0;
                            *(_QWORD *)&v185 = 0;
                            __p[0] = 0;
                            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v76 + 8), *(_QWORD *)(v76 + 16), (uint64_t)(*(_QWORD *)(v76 + 16) - *(_QWORD *)(v76 + 8)) >> 3);
                            turi::flexible_type_fail(0);
                            if (__p[0])
                            {
                              __p[1] = __p[0];
                              operator delete(__p[0]);
                            }
                            goto LABEL_133;
                          case 4:
                            v84 = *v75;
                            __p[1] = 0;
                            *(_QWORD *)&v185 = 0;
                            __p[0] = 0;
                            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v84 + 8), *(uint64_t **)(v84 + 16), (uint64_t)(*(_QWORD *)(v84 + 16) - *(_QWORD *)(v84 + 8)) >> 4);
                            turi::flexible_type_fail(0);
                            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
                            goto LABEL_133;
                          case 5:
                            v85 = *v75;
                            __p[1] = 0;
                            *(_QWORD *)&v185 = 0;
                            __p[0] = 0;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v85 + 8), *(uint64_t **)(v85 + 16), (uint64_t)(*(_QWORD *)(v85 + 16) - *(_QWORD *)(v85 + 8)) >> 5);
                            turi::flexible_type_fail(0);
                            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
                            goto LABEL_133;
                          case 6:
                            v74 = *v75 << 8 >> 8;
                            goto LABEL_134;
                          case 7:
                            goto LABEL_134;
                          case 8:
                            v86 = *v75;
                            v87 = *(unsigned int **)(v86 + 16);
                            v190 = *(_QWORD *)(v86 + 8);
                            v191 = v87;
                            if (v87)
                            {
                              v88 = v87 + 2;
                              do
                                v89 = __ldxr(v88);
                              while (__stxr(v89 + 1, v88));
                            }
                            v90 = *(_OWORD *)(v86 + 24);
                            v91 = *(_OWORD *)(v86 + 56);
                            v193 = *(_OWORD *)(v86 + 40);
                            v194 = v91;
                            v192 = v90;
                            turi::flexible_type_fail(0);
                            boost::detail::shared_count::~shared_count(&v191);
                            goto LABEL_133;
                          case 9:
                            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *v75 + 8);
                            turi::flexible_type_fail(0);
                            if (*((_QWORD *)&v186 + 1))
                            {
                              *(_QWORD *)&v187 = *((_QWORD *)&v186 + 1);
                              operator delete(*((void **)&v186 + 1));
                            }
                            if ((_QWORD)v185)
                            {
                              *((_QWORD *)&v185 + 1) = v185;
                              operator delete((void *)v185);
                            }
                            v77 = (std::__shared_weak_count *)__p[1];
                            if (__p[1])
                            {
                              v78 = (unint64_t *)((char *)__p[1] + 8);
                              do
                                v79 = __ldaxr(v78);
                              while (__stlxr(v79 - 1, v78));
                              if (!v79)
                              {
                                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                                std::__shared_weak_count::__release_weak(v77);
                              }
                            }
LABEL_133:
                            v74 = 0;
LABEL_134:
                            v92 = operator new(8uLL);
                            *v92 = v74;
                            v176.__r_.__value_.__r.__words[0] = v46;
                            v177 = 0;
                            *(_OWORD *)&v176.__r_.__value_.__r.__words[1] = 0uLL;
                            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v176.__r_.__value_.__l.__size_, v92, (uint64_t)(v92 + 1), 1uLL);
                            v93 = v179;
                            if (v179 >= v180)
                            {
                              v94 = (v179 - v178) >> 5;
                              v95 = v94 + 1;
                              if ((unint64_t)(v94 + 1) >> 59)
                                std::vector<float>::__throw_length_error[abi:ne180100]();
                              v96 = v180 - v178;
                              if ((v180 - v178) >> 4 > v95)
                                v95 = v96 >> 4;
                              if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFE0)
                                v97 = 0x7FFFFFFFFFFFFFFLL;
                              else
                                v97 = v95;
                              *(_QWORD *)&v186 = &v180;
                              v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)&v180, v97);
                              v99 = &v98[32 * v94];
                              __p[0] = v98;
                              __p[1] = v99;
                              *((_QWORD *)&v185 + 1) = &v98[32 * v100];
                              *(_QWORD *)v99 = v176.__r_.__value_.__r.__words[0];
                              *((_QWORD *)v99 + 1) = 0;
                              *((_QWORD *)v99 + 2) = 0;
                              *((_QWORD *)v99 + 3) = 0;
                              *(_OWORD *)(v99 + 8) = *(_OWORD *)&v176.__r_.__value_.__r.__words[1];
                              *((_QWORD *)v99 + 3) = v177;
                              *(_OWORD *)&v176.__r_.__value_.__r.__words[1] = 0uLL;
                              v177 = 0;
                              *(_QWORD *)&v185 = v99 + 32;
                              std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__swap_out_circular_buffer((uint64_t *)&v178, __p);
                              v101 = v179;
                              std::__split_buffer<std::pair<unsigned long,std::vector<unsigned long>>>::~__split_buffer((uint64_t)__p);
                              v179 = v101;
                              if (v176.__r_.__value_.__l.__size_)
                              {
                                v176.__r_.__value_.__r.__words[2] = v176.__r_.__value_.__l.__size_;
                                operator delete((void *)v176.__r_.__value_.__l.__size_);
                              }
                            }
                            else
                            {
                              *(_QWORD *)v179 = v176.__r_.__value_.__r.__words[0];
                              *((_QWORD *)v93 + 1) = 0;
                              *((_QWORD *)v93 + 2) = 0;
                              *((_QWORD *)v93 + 3) = 0;
                              *(_OWORD *)(v93 + 8) = *(_OWORD *)&v176.__r_.__value_.__r.__words[1];
                              *((_QWORD *)v93 + 3) = v177;
                              *(_OWORD *)&v176.__r_.__value_.__r.__words[1] = 0uLL;
                              v177 = 0;
                              v179 = v93 + 32;
                            }
                            operator delete(v92);
                            goto LABEL_145;
                          default:
                            goto LABEL_256;
                        }
                      default:
                        goto LABEL_256;
                    }
                  }
LABEL_77:
                  v52 = v44 + 32 * v41;
                  v53 = *(unsigned __int8 *)(v52 + 28);
                  v54 = v52 + 16;
                  v55 = *(_QWORD *)(*((_QWORD *)v179 - 2) - 8) + 1;
                  switch(v53)
                  {
                    case 0:
                      v56 = *(double *)v54;
                      v44 = *(_QWORD *)(v4 + 8);
                      if (*(_QWORD *)&v56 == v55)
                        goto LABEL_160;
                      goto LABEL_66;
                    case 1:
                      v102 = *(double *)v54;
                      v44 = *(_QWORD *)(v4 + 8);
                      if (v102 != (double)v55)
                        goto LABEL_66;
                      goto LABEL_160;
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                      goto LABEL_65;
                    case 6:
                      v103 = *(_DWORD *)(v54 + 8);
                      v104 = *(_QWORD *)v54 << 8;
                      v44 = *(_QWORD *)(v4 + 8);
                      if (v55 != v104 >> 8 || v103 != 0)
                        goto LABEL_66;
LABEL_160:
                      v106 = v44 + 32 * v41;
                      v107 = *(unsigned __int8 *)(v106 + 28);
                      v108 = 0;
                      v109 = v179;
                      v110 = (uint64_t *)(v106 + 16);
                      switch(v107)
                      {
                        case 0:
                          v108 = *v110;
                          goto LABEL_188;
                        case 1:
                          v108 = (uint64_t)*(double *)v110;
                          goto LABEL_188;
                        case 2:
                          v114 = *v110;
                          v115 = (char **)(*v110 + 8);
                          __idx.__r_.__value_.__r.__words[0] = 0;
                          v116 = (char *)v115;
                          if (*(char *)(v114 + 31) < 0)
                            v116 = *v115;
                          std::string::basic_string[abi:ne180100]<0>(__p, v116);
                          v108 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
                          if (SBYTE7(v185) < 0)
                            operator delete(__p[0]);
                          if (*(char *)(v114 + 31) < 0)
                            v117 = *(_QWORD *)(v114 + 16);
                          else
                            v117 = *(unsigned __int8 *)(v114 + 31);
                          if (__idx.__r_.__value_.__r.__words[0] != v117)
                          {
                            v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::operator+<char>();
                            v138 = std::string::append(&v176, " cannot be interpreted as an integer");
                            v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
                            *(_QWORD *)&v185 = *((_QWORD *)&v138->__r_.__value_.__l + 2);
                            *(_OWORD *)__p = v139;
                            v138->__r_.__value_.__l.__size_ = 0;
                            v138->__r_.__value_.__r.__words[2] = 0;
                            v138->__r_.__value_.__r.__words[0] = 0;
                            std::runtime_error::runtime_error(v137, (const std::string *)__p);
                            __cxa_throw(v137, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                          }
                          goto LABEL_188;
                        case 3:
                          v111 = *v110;
                          __p[1] = 0;
                          *(_QWORD *)&v185 = 0;
                          __p[0] = 0;
                          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v111 + 8), *(_QWORD *)(v111 + 16), (uint64_t)(*(_QWORD *)(v111 + 16) - *(_QWORD *)(v111 + 8)) >> 3);
                          turi::flexible_type_fail(0);
                          if (__p[0])
                          {
                            __p[1] = __p[0];
                            operator delete(__p[0]);
                          }
                          goto LABEL_187;
                        case 4:
                          v118 = *v110;
                          __p[1] = 0;
                          *(_QWORD *)&v185 = 0;
                          __p[0] = 0;
                          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v118 + 8), *(uint64_t **)(v118 + 16), (uint64_t)(*(_QWORD *)(v118 + 16) - *(_QWORD *)(v118 + 8)) >> 4);
                          turi::flexible_type_fail(0);
                          v176.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
                          goto LABEL_187;
                        case 5:
                          v119 = *v110;
                          __p[1] = 0;
                          *(_QWORD *)&v185 = 0;
                          __p[0] = 0;
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v119 + 8), *(uint64_t **)(v119 + 16), (uint64_t)(*(_QWORD *)(v119 + 16) - *(_QWORD *)(v119 + 8)) >> 5);
                          turi::flexible_type_fail(0);
                          v176.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
                          goto LABEL_187;
                        case 6:
                          v108 = *v110 << 8 >> 8;
                          goto LABEL_188;
                        case 7:
                          goto LABEL_188;
                        case 8:
                          v120 = *v110;
                          v121 = *(unsigned int **)(v120 + 16);
                          v190 = *(_QWORD *)(v120 + 8);
                          v191 = v121;
                          if (v121)
                          {
                            v122 = v121 + 2;
                            do
                              v123 = __ldxr(v122);
                            while (__stxr(v123 + 1, v122));
                          }
                          v124 = *(_OWORD *)(v120 + 24);
                          v125 = *(_OWORD *)(v120 + 56);
                          v193 = *(_OWORD *)(v120 + 40);
                          v194 = v125;
                          v192 = v124;
                          turi::flexible_type_fail(0);
                          boost::detail::shared_count::~shared_count(&v191);
                          goto LABEL_187;
                        case 9:
                          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *v110 + 8);
                          turi::flexible_type_fail(0);
                          if (*((_QWORD *)&v186 + 1))
                          {
                            *(_QWORD *)&v187 = *((_QWORD *)&v186 + 1);
                            operator delete(*((void **)&v186 + 1));
                          }
                          if ((_QWORD)v185)
                          {
                            *((_QWORD *)&v185 + 1) = v185;
                            operator delete((void *)v185);
                          }
                          v108 = (uint64_t)__p[1];
                          if (!__p[1])
                            goto LABEL_188;
                          v112 = (unint64_t *)((char *)__p[1] + 8);
                          do
                            v113 = __ldaxr(v112);
                          while (__stlxr(v113 - 1, v112));
                          if (!v113)
                          {
                            (*(void (**)(uint64_t))(*(_QWORD *)v108 + 16))(v108);
                            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v108);
                          }
LABEL_187:
                          v108 = 0;
LABEL_188:
                          v126 = *((_QWORD *)v109 - 1);
                          v127 = (uint64_t *)*((_QWORD *)v109 - 2);
                          if ((unint64_t)v127 >= v126)
                          {
                            v129 = (uint64_t *)*((_QWORD *)v109 - 3);
                            v130 = v127 - v129;
                            if ((unint64_t)(v130 + 1) >> 61)
                              std::vector<float>::__throw_length_error[abi:ne180100]();
                            v131 = v126 - (_QWORD)v129;
                            v132 = (uint64_t)(v126 - (_QWORD)v129) >> 2;
                            if (v132 <= v130 + 1)
                              v132 = v130 + 1;
                            if (v131 >= 0x7FFFFFFFFFFFFFF8)
                              v133 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v133 = v132;
                            if (v133)
                            {
                              v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v109 - 8), v133);
                              v129 = (uint64_t *)*((_QWORD *)v109 - 3);
                              v127 = (uint64_t *)*((_QWORD *)v109 - 2);
                            }
                            else
                            {
                              v134 = 0;
                            }
                            v135 = (uint64_t *)&v134[8 * v130];
                            *v135 = v108;
                            v128 = v135 + 1;
                            while (v127 != v129)
                            {
                              v136 = *--v127;
                              *--v135 = v136;
                            }
                            *((_QWORD *)v109 - 3) = v135;
                            *((_QWORD *)v109 - 2) = v128;
                            *((_QWORD *)v109 - 1) = &v134[8 * v133];
                            if (v129)
                              operator delete(v129);
                          }
                          else
                          {
                            *v127 = v108;
                            v128 = v127 + 1;
                          }
                          *((_QWORD *)v109 - 2) = v128;
                          break;
                        default:
                          goto LABEL_256;
                      }
LABEL_145:
                      ++v41;
                      v40 = *(_QWORD *)(v4 + 8);
                      if (v41 >= (*(_QWORD *)(v4 + 16) - v40) >> 5)
                        goto LABEL_208;
                      continue;
                    default:
                      goto LABEL_256;
                  }
                default:
                  goto LABEL_256;
              }
            }
LABEL_256:
            result = turi::flexible_type_fail(0);
            break;
          default:
            goto LABEL_256;
        }
LABEL_257:
        __break(1u);
        break;
      default:
        result = turi::flexible_type_fail(0);
        goto LABEL_257;
    }
  }
  return result;
}

void sub_2180ED688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, char a13, uint64_t a14, char *a15, void *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *v63;
  int v64;

  if (a63 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v64 & 1) == 0)
    {
LABEL_8:
      a15 = &a22;
      std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
      std::ostringstream::~ostringstream((uint64_t)&a25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v64)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v63);
  goto LABEL_8;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>> const*,std::pair<unsigned long,std::vector<unsigned long>> const*,std::pair<unsigned long,std::vector<unsigned long>>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = *(_QWORD *)v6;
      v4[2] = 0;
      v4[3] = 0;
      v4[1] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4 + 1, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      v4 = v11 + 4;
      v11 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2180EDAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(_QWORD *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 32;
  }
}

void std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<unsigned long,std::vector<unsigned long>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<unsigned long,std::vector<unsigned long>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<unsigned long,std::vector<unsigned long>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

