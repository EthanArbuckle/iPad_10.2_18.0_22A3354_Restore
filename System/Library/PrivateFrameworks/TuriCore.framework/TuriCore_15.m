uint64_t std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (uint64_t *)*a1;
  v4 = (uint64_t *)a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 5;
    result = std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(result - 40, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type> const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(a1 + 24, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, (uint64_t)a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x38uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)(v17 + 2), *a4);
  v17[6] = 0;
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11)
          v25 %= v11;
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_218481A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::confusion_matrix::gather_counts_and_labels(turi::evaluation::confusion_matrix *this)
{
  unint64_t v2;
  unint64_t i;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t *v14;

  v11 = 0u;
  v12 = 0u;
  v13 = 1065353216;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)this + 1) + 40 * i + 16);
      if (v4)
      {
        do
        {
          v5 = std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::find<std::pair<turi::flexible_type,turi::flexible_type>>(&v11, v4 + 16);
          v6 = *((_QWORD *)v4 + 6);
          v14 = (uint64_t *)(v4 + 16);
          if (v5)
          {
            v7 = std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type> const&>,std::tuple<>>((uint64_t)&v11, v4 + 16, (uint64_t)&std::piecewise_construct, &v14);
            *((_QWORD *)v7 + 6) += v6;
          }
          else
          {
            *((_QWORD *)std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type> const&>,std::tuple<>>((uint64_t)&v11, v4 + 16, (uint64_t)&std::piecewise_construct, &v14)+ 6) = v6;
          }
          v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
        v2 = *((_QWORD *)this + 4);
      }
    }
  }
  if ((__int128 *)((char *)this + 144) != &v11)
  {
    *((_DWORD *)this + 44) = v13;
    std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,void *> *>>((_QWORD *)this + 18, (_QWORD *)v12, 0);
  }
  v8 = (unsigned __int8 *)*((_QWORD *)this + 20);
  if (v8)
  {
    v9 = (_QWORD *)((char *)this + 40);
    do
    {
      if (!std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>(v9, v8 + 16))std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>((uint64_t)v9, v8 + 16, (char *)v8 + 16);
      if (!std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>(v9, v8 + 32))std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>((uint64_t)v9, v8 + 32, (char *)v8 + 32);
      v8 = *(unsigned __int8 **)v8;
    }
    while (v8);
  }
  return std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&v11);
}

void sub_218481C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::map<unsigned long,turi::flexible_type>::at(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = v2[4];
      if (v3 >= v4)
        break;
      v2 = (_QWORD *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type>&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(a1 + 24, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, (uint64_t)a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x38uLL);
  v30[0] = v17;
  v30[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v17[2] = 0;
  *((_DWORD *)v17 + 6) = 0;
  *((_BYTE *)v17 + 28) = 0;
  v19 = *v18;
  *(_QWORD *)((char *)v17 + 21) = *(uint64_t *)((char *)v18 + 5);
  v17[2] = v19;
  *((_BYTE *)v17 + 28) = *((_BYTE *)v18 + 12);
  *((_BYTE *)v18 + 12) = 0;
  v17[4] = 0;
  *((_DWORD *)v17 + 10) = 0;
  *((_BYTE *)v17 + 44) = 0;
  v20 = v18[2];
  *(_QWORD *)((char *)v17 + 37) = *(uint64_t *)((char *)v18 + 21);
  v17[4] = v20;
  *((_BYTE *)v17 + 44) = *((_BYTE *)v18 + 28);
  *((_BYTE *)v18 + 28) = 0;
  v17[6] = 0;
  v31 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v26);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v30[0] = *v27;
    *v27 = v30[0];
  }
  else
  {
    *(_QWORD *)v30[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v30[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v30[0])
    {
      v28 = *(_QWORD *)(*(_QWORD *)v30[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v28 >= v11)
          v28 %= v11;
      }
      else
      {
        v28 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v30[0];
    }
  }
  i = (unsigned __int8 *)v30[0];
  v30[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v30, 0);
  return i;
}

void sub_218481F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)(v8 + 2), v4 + 2);
        v8[6] = v4[6];
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__node_insert_multi(a1, (uint64_t)v8);
        v4 = (_QWORD *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_multi<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long> const&>(a1, v4 + 2);
    v4 = (_QWORD *)*v4;
  }
}

void sub_218482020(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_218482038(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *inserted;

  v4 = a2 + 16;
  v5 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()((uint64_t)(a1 + 3), (unsigned __int8 *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_perform(a1, (_QWORD *)a2, inserted);
  return a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__rehash<false>(a1, v12);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v15);
  if (v16)
  {
    v17 = *(unsigned __int8 **)v16;
    if (*(_QWORD *)v16)
    {
      v18 = 0;
      do
      {
        v19 = *((_QWORD *)v17 + 1);
        if (v14 > 1)
        {
          v20 = *((_QWORD *)v17 + 1);
          if (v19 >= v6)
            v20 = v19 % v6;
        }
        else
        {
          v20 = v19 & (v6 - 1);
        }
        if (v20 != v15)
          break;
        v21 = v19 == a2
            ? std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(v17 + 16, a3): 0;
        if ((v18 & (v21 ^ 1) & 1) != 0)
          break;
        v18 |= v21;
        v16 = *(unsigned __int8 **)v16;
        v17 = *(unsigned __int8 **)v16;
      }
      while (*(_QWORD *)v16);
    }
  }
  return v16;
}

void std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  uint64_t i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v13 = *(_QWORD *)(i + 8);
        if (v10 > 1)
        {
          if (v13 >= a2)
            v13 %= a2;
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          v7 = (uint64_t *)i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          v14 = *(_QWORD **)i;
          if (*(_QWORD *)i)
          {
            v15 = (_QWORD *)i;
            while (1)
            {
              v16 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>((unsigned __int8 *)(i + 16), (uint64_t)(v14 + 2));
              v17 = (_QWORD *)*v15;
              if (!v16)
                break;
              v14 = (_QWORD *)*v17;
              v15 = (_QWORD *)*v15;
              if (!*v17)
                goto LABEL_31;
            }
            v14 = (_QWORD *)*v15;
            v17 = v15;
          }
          else
          {
            v17 = (_QWORD *)i;
          }
LABEL_31:
          *v7 = (uint64_t)v14;
          *v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = (uint64_t *)i;
          v8 = v13;
        }
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_multi<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long> const&>(_QWORD *a1, uint64_t *a2)
{
  uint64_t inserted;
  uint64_t v5[3];

  std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__construct_node<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_2184824EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__construct_node<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x38uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)v7 + 16, a2);
  *((_QWORD *)v7 + 6) = a2[4];
  *(_BYTE *)(a3 + 16) = 1;
  result = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(a1 + 24, (unsigned __int8 *)v7 + 16);
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_218482580(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::confusion_matrix::confusion_matrix(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_24D942980;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  if (a1 + 80 != a2)
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,turi::flexible_type>,std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *> *,long>>((uint64_t **)(a1 + 80), *(char **)a2, (char *)(a2 + 8));
  return a1;
}

void sub_218482654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;

  v15 = v14;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v13);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v12);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(v11, *(_QWORD **)(v10 + 88));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v10 + 40);
  a10 = v15;
  std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,turi::flexible_type>,std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *> *,long>>(uint64_t **result, char *a2, char *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  BOOL v11;
  char *v12;
  char *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD v17[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v17[0] = v8 + 4;
          v17[1] = v8 + 5;
          std::pair<unsigned long &,turi::flexible_type &>::operator=[abi:ne180100]<unsigned long const,turi::flexible_type,(void *)0>((uint64_t)v17, (uint64_t)(v9 + 32));
          std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__node_insert_multi(v5, v16);
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (char *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(char **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (char *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          v8 = v16;
          if (v16)
            v11 = a2 == a3;
          else
            v11 = 1;
          v9 = a2;
        }
        while (!v11);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_multi<std::pair<unsigned long const,turi::flexible_type> const&>((uint64_t)v5, a2 + 32);
      v12 = (char *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (char *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_2184827F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned long &,turi::flexible_type &>::operator=[abi:ne180100]<unsigned long const,turi::flexible_type,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  unint64_t *v39;
  unint64_t v40;
  void **v42;

  v3 = (uint64_t *)(a2 + 8);
  **(_QWORD **)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  if (a2 + 8 != v4)
  {
    switch(*(_BYTE *)(v4 + 12))
    {
      case 2:
        v6 = *(unint64_t **)v4;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          v9 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          if (*((char *)v9 + 31) < 0)
            operator delete((void *)v9[1]);
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v12 = *(unint64_t **)v4;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v16 = (void *)v15[1];
          if (v16)
          {
            v15[2] = (unint64_t)v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v17 = *(unint64_t **)v4;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
          goto LABEL_27;
        }
        break;
      case 5:
        v21 = *(unint64_t **)v4;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v20 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_27:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v24 = *(unint64_t **)v4;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
          v10 = v27;
          v28 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v29 = *(unint64_t **)v4;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *(unint64_t **)v4;
          if (*(_QWORD *)v4)
          {
            v33 = (void *)v32[6];
            if (v33)
            {
              v32[7] = (unint64_t)v33;
              operator delete(v33);
            }
            v34 = (void *)v32[3];
            if (v34)
            {
              v32[4] = (unint64_t)v34;
              operator delete(v34);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
            v10 = v32;
            v28 = 2071181815;
LABEL_42:
            v11 = v28 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v10, v11);
          }
LABEL_44:
          *(_QWORD *)v4 = 0;
        }
        break;
      default:
        break;
    }
    v35 = *v3;
    *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)v3 + 5);
    *(_QWORD *)v4 = v35;
    LODWORD(v35) = *(unsigned __int8 *)(a2 + 20);
    *(_BYTE *)(v4 + 12) = v35;
    v36 = v35 > 9;
    v37 = (1 << v35) & 0x33C;
    if (!v36 && v37 != 0)
    {
      v39 = *(unint64_t **)v4;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

void std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(a1, a2[1]);
    std::pair<unsigned long const,turi::flexible_type>::~pair((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::pair<unsigned long const,turi::flexible_type>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 20))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 8);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 8);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 8);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 8);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 8);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 8);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 8);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 8);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 8);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 8);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 8);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 8);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_multi<std::pair<unsigned long const,turi::flexible_type> const&>(uint64_t a1, char *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v8[3];

  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__construct_node<std::pair<unsigned long const,turi::flexible_type> const&>(a1, a2, (uint64_t)v8);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (v8[0][4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v8[0]);
  v6 = v8[0];
  v8[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v6;
}

_QWORD *std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__construct_node<std::pair<unsigned long const,turi::flexible_type> const&>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  unint64_t **v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;

  v5 = a1 + 8;
  result = operator new(0x38uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result[4] = *(_QWORD *)a2;
  result[5] = 0;
  v7 = (unint64_t **)(result + 5);
  *((_DWORD *)result + 12) = 0;
  *((_BYTE *)result + 52) = 0;
  if (result + 4 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)result + 45) = *(_QWORD *)(a2 + 13);
    *v7 = (unint64_t *)*((_QWORD *)a2 + 1);
    v8 = a2[20];
    *((_BYTE *)result + 52) = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0)
    {
      v9 = *v7;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<unsigned long const,turi::flexible_type>::~pair((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t turi::variant_converter<std::map<unsigned long,turi::flexible_type>,void>::get@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void **v39[3];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  memset(v40, 0, 13);
  v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((_QWORD *)v3 != v40)
  {
    v5 = *(_QWORD *)v3;
    *(_QWORD *)((char *)v40 + 5) = *(_QWORD *)(v3 + 5);
    v40[0] = v5;
    BYTE4(v40[1]) = *(_BYTE *)(v3 + 12);
    if (BYTE4(v40[1]) <= 9u && ((1 << SBYTE4(v40[1])) & 0x33C) != 0)
    {
      v7 = (unint64_t *)v40[0];
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  result = turi::flexible_type_converter<std::map<unsigned long,turi::flexible_type>>::get((turi::flexible_type_internals *)v40, v4, a2);
  switch(BYTE4(v40[1]))
  {
    case 2:
      v10 = (unint64_t *)v40[0];
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = v40[0];
        if (v40[0])
        {
          if (*(char *)(v40[0] + 31) < 0)
            operator delete(*(void **)(v40[0] + 8));
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v27 = (unint64_t *)v40[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v40[0];
        if (v40[0])
        {
          v31 = *(void **)(v40[0] + 8);
          if (v31)
          {
            *(_QWORD *)(v40[0] + 16) = v31;
            operator delete(v31);
          }
          v14 = v30;
          v15 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v40[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v40[0];
        if (v40[0])
        {
          v39[0] = (void **)(v40[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v39);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v32 = (unint64_t *)v40[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v19 = v40[0];
        if (v40[0])
        {
          v39[0] = (void **)(v40[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v39);
LABEL_42:
          v14 = v19;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v35 = (unint64_t *)v40[0];
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = v40[0];
        if (v40[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v40[0] + 16));
          v14 = v38;
          v26 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v20 = (unint64_t *)v40[0];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v40[0];
        if (v40[0])
        {
          v24 = *(void **)(v40[0] + 48);
          if (v24)
          {
            *(_QWORD *)(v40[0] + 56) = v24;
            operator delete(v24);
          }
          v25 = *(void **)(v23 + 24);
          if (v25)
          {
            *(_QWORD *)(v23 + 32) = v25;
            operator delete(v25);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 + 8);
          v14 = v23;
          v26 = 2071181815;
LABEL_48:
          v15 = v26 | 0x1030C4000000000;
LABEL_49:
          result = MEMORY[0x219A19A08](v14, v15);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2184831A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

void sub_2184834C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_2184834E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_converter<std::map<unsigned long,turi::flexible_type>>::get@<X0>(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  return turi::flexible_type_internals::ft_converter<9>::get<std::map<unsigned long,turi::flexible_type>>((uint64_t **)a3, a1, a2);
}

void sub_21848352C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_internals::ft_converter<9>::get<std::map<unsigned long,turi::flexible_type>>(uint64_t **a1, turi::flexible_type_internals *this, const char *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v15[0] = 0;
  *(_QWORD *)((char *)v15 + 5) = 0;
  v4 = *((unsigned __int8 *)this + 12);
  if (v4 == 4)
  {
    v9 = *(_QWORD *)this;
    v10 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (*(_QWORD *)(*(_QWORD *)this + 16) != v10)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<10>::get<unsigned long,turi::flexible_type>(&v14, (turi::flexible_type_internals *)(v10 + v11), a3);
        std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,turi::flexible_type>>(a1, &v14, (uint64_t)&v14);
        ++v12;
        v10 = *(_QWORD *)(v9 + 8);
        v11 += 16;
      }
      while (v12 < (*(_QWORD *)(v9 + 16) - v10) >> 4);
    }
  }
  else
  {
    if (v4 != 5)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"flex_dict / list of 2-element flex_lists/flex_vec", a3);
    v5 = *(_QWORD *)this;
    v6 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (*(_QWORD *)(*(_QWORD *)this + 16) != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(&v14, (turi::flexible_type_internals *)(v6 + v7), a3);
        turi::flexible_type_internals::ft_converter<1>::get((uint64_t)v15, (uint64_t *)(*(_QWORD *)(v5 + 8) + v7 + 16));
        std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,turi::flexible_type>>(a1, &v14, (uint64_t)&v14);
        ++v8;
        v6 = *(_QWORD *)(v5 + 8);
        v7 += 32;
      }
      while (v8 < (*(_QWORD *)(v5 + 16) - v6) >> 5);
    }
  }
  return std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)&v14);
}

void sub_218483694()
{
  turi::flexible_type_internals::ft_converter<9>::get<std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void sub_2184836A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,turi::flexible_type>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  char v15;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = operator new(0x38uLL);
    v14[1] = v6;
    *(_QWORD *)((char *)v11 + 45) = *(_QWORD *)(a3 + 13);
    v12 = *(_QWORD *)(a3 + 8);
    v11[4] = *(_QWORD *)a3;
    v11[5] = v12;
    *((_BYTE *)v11 + 52) = *(_BYTE *)(a3 + 20);
    *(_BYTE *)(a3 + 20) = 0;
    v15 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

uint64_t turi::flexible_type_internals::ft_converter<10>::get<unsigned long,turi::flexible_type>(unint64_t *a1, turi::flexible_type_internals *this, const char *a3)
{
  uint64_t v3;

  if (*((_BYTE *)this + 12) != 4)
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec", a3);
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8) != 32)
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec (list size != 2)", a3);
  turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(a1, *(turi::flexible_type_internals **)(*(_QWORD *)this + 8), a3);
  return turi::flexible_type_internals::ft_converter<1>::get((uint64_t)(a1 + 1), (uint64_t *)(*(_QWORD *)(v3 + 8) + 16));
}

void sub_21848383C()
{
  turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::pair<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

uint64_t *std::map<unsigned long,turi::flexible_type>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long,turi::flexible_type>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,turi::flexible_type>,std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_218483884(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long,turi::flexible_type>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,turi::flexible_type>,std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,turi::flexible_type> const&>(v5, v6, v4 + 4, (char *)v4 + 32);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,turi::flexible_type> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, char *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  uint64_t v12;

  v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v12, &v11, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__construct_node<std::pair<unsigned long const,turi::flexible_type> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__shared_ptr_emplace<turi::evaluation::classifier_accuracy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9429F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::classifier_accuracy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9429F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::classifier_accuracy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::evaluation::classifier_accuracy::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "classifier_accuracy");
}

double turi::evaluation::classifier_accuracy::register_example(turi::evaluation::classifier_accuracy *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  _BOOL4 v6;
  BOOL v7;
  double v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  double v13;
  char v14;
  size_t v15;
  unsigned int v16;
  double *v17;
  double *v18;
  unint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v32;
  uint64_t v33;
  double result;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  double v75;
  double v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  size_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  char v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;

  ++*(_QWORD *)(*((_QWORD *)this + 5) + 8 * a4);
  switch(*((_BYTE *)a3 + 12))
  {
    case 0:
      v6 = 0;
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v7 = *(_QWORD *)a2 == *(_QWORD *)a3;
          goto LABEL_38;
        case 1:
          v8 = *(double *)a2;
          v9 = *(_QWORD *)a3;
          goto LABEL_83;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_50;
        case 6:
          v7 = *(_QWORD *)a3 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && *((_DWORD *)a2 + 2) == 0;
          goto LABEL_38;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      v6 = 0;
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v8 = *(double *)a3;
          v9 = *(_QWORD *)a2;
LABEL_83:
          v7 = v8 == (double)v9;
          goto LABEL_38;
        case 1:
          v6 = *(double *)a2 == *(double *)a3;
          goto LABEL_50;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_50;
        case 6:
          v75 = *(double *)a3;
          v76 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
          goto LABEL_90;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v10 = *((unsigned __int8 *)a2 + 12);
      v11 = v10 - 3 >= 7 && v10 >= 2;
      if (!v11)
        goto LABEL_49;
      if (v10 != 2)
        turi::apply_binary_op_ff();
      v12 = *(_QWORD *)a3;
      v13 = *(double *)a2;
      v14 = *(_BYTE *)(*(_QWORD *)a2 + 31);
      v15 = v14 < 0 ? *(_QWORD *)(*(_QWORD *)&v13 + 16) : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
      v77 = *(char *)(v12 + 31) < 0 ? *(_QWORD *)(v12 + 16) : *(unsigned __int8 *)(v12 + 31);
      if (v15 != v77)
        goto LABEL_49;
      v78 = (_QWORD *)(*(_QWORD *)&v13 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
        v78 = (_QWORD *)*v78;
      v79 = (_QWORD *)(v12 + 8);
      if ((*(_BYTE *)(v12 + 31) & 0x80) != 0)
        v79 = (_QWORD *)*v79;
      if (v14 < 0)
      {
        v7 = memcmp(v78, v79, v15) == 0;
LABEL_38:
        v6 = v7;
      }
      else
      {
        if (!v15)
          goto LABEL_112;
        v80 = v15 - 1;
        do
        {
          v82 = *(unsigned __int8 *)v78;
          v78 = (_QWORD *)((char *)v78 + 1);
          v81 = v82;
          v84 = *(unsigned __int8 *)v79;
          v79 = (_QWORD *)((char *)v79 + 1);
          v83 = v84;
          v11 = v80-- != 0;
          v85 = v11;
          v6 = v81 == v83;
        }
        while (v81 == v83 && (v85 & 1) != 0);
      }
      goto LABEL_50;
    case 3:
      v16 = *((unsigned __int8 *)a2 + 12);
      if (v16 > 9)
        turi::apply_binary_op_ff();
      if (v16 != 3)
        goto LABEL_49;
      v17 = *(double **)(*(_QWORD *)a2 + 8);
      v18 = *(double **)(*(_QWORD *)a2 + 16);
      v19 = v18 - v17;
      v20 = *(double **)(*(_QWORD *)a3 + 8);
      if (v19 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v20) >> 3)
        goto LABEL_49;
      if (v18 == v17)
        goto LABEL_112;
      if (v19 <= 1)
        v21 = 1;
      else
        v21 = v18 - v17;
      if (*v17 != *v20)
        goto LABEL_49;
      v22 = 1;
      do
      {
        v23 = v22;
        if (v21 == v22)
          break;
        v24 = v17[v22];
        v25 = v20[v22++];
      }
      while (v24 == v25);
      v6 = v23 >= v19;
      goto LABEL_50;
    case 4:
      v26 = *((unsigned __int8 *)a2 + 12);
      if (v26 > 9)
        turi::apply_binary_op_ff();
      if (v26 != 4)
        goto LABEL_49;
      v27 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v87, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(*(_QWORD *)a3 + 8));
      goto LABEL_47;
    case 5:
      v28 = *((unsigned __int8 *)a2 + 12);
      if (v28 > 9)
        turi::apply_binary_op_ff();
      if (v28 != 5)
        goto LABEL_49;
      v27 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v87, (uint64_t **)(*(_QWORD *)a2 + 8), (uint64_t **)(*(_QWORD *)a3 + 8));
      goto LABEL_47;
    case 6:
      v6 = 0;
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v7 = *(_QWORD *)a2 == (uint64_t)(*(_QWORD *)a3 << 8) >> 8 && *((_DWORD *)a3 + 2) == 0;
          goto LABEL_38;
        case 1:
          v76 = *(double *)a2;
          v75 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
LABEL_90:
          v6 = vabdd_f64(v76, v75) < 0.0000005;
          goto LABEL_50;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_50;
        case 6:
          v7 = ((*(_QWORD *)a3 ^ *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a2 + 2) == *((_DWORD *)a3 + 2);
          goto LABEL_38;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v29 = *((unsigned __int8 *)a2 + 12);
      if (v29 >= 0xA)
        turi::apply_binary_op_ff();
      v7 = v29 == 7;
      goto LABEL_38;
    case 8:
      v30 = *((unsigned __int8 *)a2 + 12);
      if (v30 < 8 || v30 == 9)
        goto LABEL_49;
      if (v30 != 8)
        turi::apply_binary_op_ff();
      v27 = turi::image_type::operator==(*(_QWORD *)a2 + 8, *(_QWORD *)a3 + 8);
LABEL_47:
      v6 = v27;
      goto LABEL_50;
    case 9:
      v32 = *((unsigned __int8 *)a2 + 12);
      if (v32 < 9)
        goto LABEL_49;
      if (v32 != 9)
        turi::apply_binary_op_ff();
      v35 = *(_QWORD *)a3;
      v36 = *(_QWORD **)a2;
      if (*(_QWORD *)a3 == *(_QWORD *)a2)
        goto LABEL_112;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v36 + 1), v35 + 8))
      {
LABEL_49:
        v6 = 0;
        goto LABEL_50;
      }
      v38 = (char *)v36[3];
      v37 = (char *)v36[4];
      v39 = v37 - v38;
      if (v37 == v38)
        goto LABEL_112;
      if (!v36[1])
        goto LABEL_112;
      v40 = 1;
      do
      {
        v41 = *(_QWORD *)v38;
        v38 += 8;
        v40 *= v41;
      }
      while (v38 != v37);
      if (!v40)
      {
LABEL_112:
        v6 = 1;
        goto LABEL_50;
      }
      v86 = 0;
      std::vector<unsigned long>::vector(&v87, v39 >> 3, &v86);
      v42 = v87;
      v43 = v88;
      v44 = **(_QWORD **)(v35 + 8);
      v45 = (char *)v88 - (char *)v87;
      v46 = v88 - v87;
      v47 = v46 - 1;
      if (v46 <= 1)
        v48 = 1;
      else
        v48 = v88 - v87;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (v43 == v42)
    {
      v56 = 0;
      v57 = *(double *)(*(_QWORD *)v36[1] + 8 * v36[9]);
    }
    else
    {
      v49 = 0;
      v50 = (uint64_t *)v36[6];
      v51 = v42;
      v52 = v48;
      do
      {
        v54 = *v51++;
        v53 = v54;
        v55 = *v50++;
        v49 += v55 * v53;
        --v52;
      }
      while (v52);
      v56 = 0;
      v57 = *(double *)(*(_QWORD *)v36[1] + 8 * (v36[9] + v49));
      v58 = *(uint64_t **)(v35 + 48);
      v59 = v42;
      v60 = v48;
      do
      {
        v62 = *v59++;
        v61 = v62;
        v63 = *v58++;
        v56 += v63 * v61;
        --v60;
      }
      while (v60);
    }
    v64 = *(double *)(v44 + 8 * (*(_QWORD *)(v35 + 72) + v56));
    v6 = v57 == v64;
    if (v57 != v64)
    {
LABEL_80:
      if (!v42)
        goto LABEL_50;
      goto LABEL_115;
    }
    v65 = v46;
    v66 = v46 - 1;
    if (v45 >= 1)
      break;
LABEL_78:
    if ((v66 & 0x8000000000000000) != 0 || !v65)
      goto LABEL_80;
  }
  v67 = v36[3];
  v68 = v42[v47] + 1;
  v42[v47] = v68;
  if (v68 < *(_QWORD *)(v67 + 8 * v47))
  {
    v65 = 1;
    v66 = v46 - 1;
    goto LABEL_78;
  }
  v69 = v67 - 16;
  v70 = v46;
  v71 = (unint64_t *)((char *)v42 + (v45 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    v72 = v70 - 1;
    v71[1] = 0;
    if ((uint64_t)(v70 - 1) <= 0)
      break;
    v73 = *v71 + 1;
    *v71-- = v73;
    v74 = *(_QWORD *)(v69 + 8 * v70--);
    if (v73 < v74)
    {
      v66 = v72 - 1;
      v65 = 1;
      goto LABEL_78;
    }
  }
  v6 = 1;
LABEL_115:
  v88 = v42;
  operator delete(v42);
LABEL_50:
  v33 = *((_QWORD *)this + 2);
  result = *(double *)(v33 + 8 * a4) + (double)v6;
  *(double *)(v33 + 8 * a4) = result;
  return result;
}

double turi::evaluation::classifier_accuracy::register_unmapped_example(turi::evaluation::classifier_accuracy *this, const unint64_t *a2, const unint64_t *a3, uint64_t a4)
{
  double v4;
  uint64_t v5;
  double result;

  ++*(_QWORD *)(*((_QWORD *)this + 5) + 8 * a4);
  v4 = 0.0;
  if (*a2 == *a3)
    v4 = 1.0;
  v5 = *((_QWORD *)this + 2);
  result = *(double *)(v5 + 8 * a4) + v4;
  *(double *)(v5 + 8 * a4) = result;
  return result;
}

uint64_t turi::evaluation::classifier_accuracy::get_metric@<X0>(turi::evaluation::classifier_accuracy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  double *v5;
  uint64_t *v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t result;
  double v12;
  _BYTE v13[13];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = 0;
    v5 = (double *)*((_QWORD *)this + 2);
    v6 = (uint64_t *)*((_QWORD *)this + 5);
    v7 = 0.0;
    do
    {
      v8 = *v5++;
      v7 = v7 + v8;
      v9 = *v6++;
      v4 += v9;
      --v3;
    }
    while (v3);
    v10 = v7 / (double)v4;
  }
  else
  {
    v10 = NAN;
  }
  v12 = v10;
  result = turi::flexible_type_converter<double>::set(&v12, (uint64_t)v13);
  *(_QWORD *)(a2 + 13) = *(_QWORD *)&v13[5];
  *(_QWORD *)(a2 + 8) = *(_QWORD *)v13;
  *(_BYTE *)(a2 + 20) = v13[12];
  *(_DWORD *)a2 = 0;
  return result;
}

uint64_t turi::variant_converter<std::unordered_map<turi::flexible_type,unsigned long>,void>::get@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void **v39[3];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  memset(v40, 0, 13);
  v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((_QWORD *)v3 != v40)
  {
    v5 = *(_QWORD *)v3;
    *(_QWORD *)((char *)v40 + 5) = *(_QWORD *)(v3 + 5);
    v40[0] = v5;
    BYTE4(v40[1]) = *(_BYTE *)(v3 + 12);
    if (BYTE4(v40[1]) <= 9u && ((1 << SBYTE4(v40[1])) & 0x33C) != 0)
    {
      v7 = (unint64_t *)v40[0];
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  result = turi::flexible_type_converter<std::unordered_map<turi::flexible_type,unsigned long>>::get((turi::flexible_type_internals *)v40, v4, a2);
  switch(BYTE4(v40[1]))
  {
    case 2:
      v10 = (unint64_t *)v40[0];
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = v40[0];
        if (v40[0])
        {
          if (*(char *)(v40[0] + 31) < 0)
            operator delete(*(void **)(v40[0] + 8));
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v27 = (unint64_t *)v40[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v40[0];
        if (v40[0])
        {
          v31 = *(void **)(v40[0] + 8);
          if (v31)
          {
            *(_QWORD *)(v40[0] + 16) = v31;
            operator delete(v31);
          }
          v14 = v30;
          v15 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v40[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v40[0];
        if (v40[0])
        {
          v39[0] = (void **)(v40[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v39);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v32 = (unint64_t *)v40[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v19 = v40[0];
        if (v40[0])
        {
          v39[0] = (void **)(v40[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v39);
LABEL_42:
          v14 = v19;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v35 = (unint64_t *)v40[0];
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = v40[0];
        if (v40[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v40[0] + 16));
          v14 = v38;
          v26 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v20 = (unint64_t *)v40[0];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v40[0];
        if (v40[0])
        {
          v24 = *(void **)(v40[0] + 48);
          if (v24)
          {
            *(_QWORD *)(v40[0] + 56) = v24;
            operator delete(v24);
          }
          v25 = *(void **)(v23 + 24);
          if (v25)
          {
            *(_QWORD *)(v23 + 32) = v25;
            operator delete(v25);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 + 8);
          v14 = v23;
          v26 = 2071181815;
LABEL_48:
          v15 = v26 | 0x1030C4000000000;
LABEL_49:
          result = MEMORY[0x219A19A08](v14, v15);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_218484410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

uint64_t turi::flexible_type_converter<std::unordered_map<turi::flexible_type,unsigned long>>::get@<X0>(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  return turi::flexible_type_internals::ft_converter<9>::get<std::unordered_map<turi::flexible_type,unsigned long>>(a3, a1, a2);
}

void sub_2184846F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_internals::ft_converter<9>::get<std::unordered_map<turi::flexible_type,unsigned long>>(uint64_t a1, turi::flexible_type_internals *this, const char *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  char v17;
  unint64_t v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18[0] = 0;
  v4 = *((unsigned __int8 *)this + 12);
  if (v4 == 4)
  {
    v10 = *(_QWORD *)this;
    v11 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (*(_QWORD *)(*(_QWORD *)this + 16) != v11)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<10>::get<turi::flexible_type,unsigned long>((uint64_t)&v15, (turi::flexible_type_internals *)(v11 + v12), a3);
        std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type,unsigned long>>(a1, (unsigned __int8 *)&v15, (uint64_t)&v15);
        ++v13;
        v11 = *(_QWORD *)(v10 + 8);
        v12 += 16;
      }
      while (v13 < (*(_QWORD *)(v10 + 16) - v11) >> 4);
    }
  }
  else
  {
    if (v4 != 5)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"flex_dict / list of 2-element flex_lists/flex_vec", a3);
    v5 = *(_QWORD *)this;
    v6 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (*(_QWORD *)(*(_QWORD *)this + 16) != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<1>::get((uint64_t)&v15, (uint64_t *)(v6 + v7));
        turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(v18, (turi::flexible_type_internals *)(*(_QWORD *)(v5 + 8) + v7 + 16), v9);
        std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type,unsigned long>>(a1, (unsigned __int8 *)&v15, (uint64_t)&v15);
        ++v8;
        v6 = *(_QWORD *)(v5 + 8);
        v7 += 32;
      }
      while (v8 < (*(_QWORD *)(v5 + 16) - v6) >> 5);
    }
  }
  return std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&v15);
}

void sub_218484864()
{
  turi::flexible_type_internals::ft_converter<9>::get<std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void sub_218484870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type,unsigned long>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  *(_QWORD *)((char *)v15 + 21) = *(_QWORD *)(a3 + 5);
  v15[2] = *(_QWORD *)a3;
  *((_BYTE *)v15 + 28) = *(_BYTE *)(a3 + 12);
  *(_BYTE *)(a3 + 12) = 0;
  v15[4] = *(_QWORD *)(a3 + 16);
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_218484B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t *turi::flexible_type_internals::ft_converter<10>::get<turi::flexible_type,unsigned long>(uint64_t a1, turi::flexible_type_internals *this, const char *a3)
{
  uint64_t v3;
  const char *v5;

  if (*((_BYTE *)this + 12) != 4)
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec", a3);
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8) != 32)
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec (list size != 2)", a3);
  turi::flexible_type_internals::ft_converter<1>::get(a1, *(uint64_t **)(*(_QWORD *)this + 8));
  return turi::flexible_type_internals::ft_converter<3>::get<unsigned long>((unint64_t *)(a1 + 16), (turi::flexible_type_internals *)(*(_QWORD *)(v3 + 8) + 16), v5);
}

void sub_218484BB4()
{
  turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::pair<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void std::__shared_ptr_emplace<turi::evaluation::binary_logloss>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::binary_logloss>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::binary_logloss>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<turi::evaluation::binary_logloss>::construct[abi:ne180100]<turi::evaluation::binary_logloss,turi::evaluation::binary_logloss>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a3 + 8);
  *a2 = &unk_24D942B00;
  a2[1] = v3;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  *((_OWORD *)a2 + 1) = *(_OWORD *)(a3 + 16);
  a2[4] = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  *(_OWORD *)(a2 + 5) = *(_OWORD *)(a3 + 40);
  a2[7] = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table((uint64_t)(a2 + 8), (uint64_t *)(a3 + 64));
}

_QWORD *turi::evaluation::binary_logloss::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "binary_logloss");
}

long double turi::evaluation::binary_logloss::register_example(turi::evaluation::binary_logloss *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  unsigned __int8 *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  char *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  float v27;
  long double *v28;
  long double v29;
  uint64_t v30;
  long double result;
  std::runtime_error *exception;
  std::string *v33;
  __int128 v34;
  double v35;
  void *__p[2];
  void *v37[2];
  __int128 v38;
  __int128 v39;
  std::string v40;
  size_t __idx;

  if (*((_BYTE *)a3 + 12) == 7)
    turi::evaluation::check_undefined(turi::flexible_type const&)::{lambda(void)#1}::operator()();
  ++*(_QWORD *)(*((_QWORD *)this + 5) + 8 * a4);
  v7 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((_QWORD *)this + 8, (unsigned __int8 *)a2);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = *((_QWORD *)v7 + 4);
  v35 = 0.0;
  v9 = 0.0;
  switch(*((_BYTE *)a3 + 12))
  {
    case 0:
      v9 = (double)*(uint64_t *)a3;
      break;
    case 1:
      v9 = *(double *)a3;
      break;
    case 2:
      v14 = *(_QWORD *)a3;
      v15 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v16 = (char *)v15;
      if (*(char *)(v14 + 31) < 0)
        v16 = *v15;
      std::string::basic_string[abi:ne180100]<0>(__p, v16);
      v17 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v37[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v14 + 31) < 0)
        v18 = *(_QWORD *)(v14 + 16);
      else
        v18 = *(unsigned __int8 *)(v14 + 31);
      if (__idx != v18)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v33 = std::string::append(&v40, " cannot be interpreted as a float");
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v37[0] = (void *)v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v27 = v17;
      v9 = v27;
      break;
    case 3:
      v10 = *(_QWORD *)a3;
      __p[1] = 0;
      v37[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v10 + 8), *(_QWORD *)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v19 = *(_QWORD *)a3;
      __p[1] = 0;
      v37[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
      break;
    case 5:
      v20 = *(_QWORD *)a3;
      __p[1] = 0;
      v37[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
      break;
    case 6:
      v9 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v21 = *(_QWORD *)a3;
      v22 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v22;
      if (v22)
      {
        v23 = v22 + 2;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = *(_OWORD *)(v21 + 24);
      v26 = *(_OWORD *)(v21 + 56);
      v38 = *(_OWORD *)(v21 + 40);
      v39 = v26;
      *(_OWORD *)v37 = v25;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v38 + 1))
      {
        *(_QWORD *)&v39 = *((_QWORD *)&v38 + 1);
        operator delete(*((void **)&v38 + 1));
      }
      if (v37[0])
      {
        v37[1] = v37[0];
        operator delete(v37[0]);
      }
      v11 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v12 = (unint64_t *)((char *)__p[1] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v35 = v9;
  if (v9 < -0.000000001 || v9 > 1.0)
    turi::evaluation::check_probability_range(double const&)::{lambda(void)#1}::operator()();
  if (v8)
  {
    v28 = &v35;
  }
  else
  {
    v9 = 1.0 - v9;
    __p[0] = *(void **)&v9;
    v28 = (long double *)__p;
  }
  if (v9 < 0.000000001)
    v28 = (long double *)&EVAL_ZERO;
  v29 = log(*v28);
  v30 = *((_QWORD *)this + 2);
  result = v29 + *(double *)(v30 + 8 * a4);
  *(long double *)(v30 + 8 * a4) = result;
  return result;
}

void sub_2184850B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;

  if (a16 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

uint64_t turi::evaluation::binary_logloss::get_metric@<X0>(turi::evaluation::binary_logloss *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  double *v5;
  uint64_t *v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t result;
  double v11;
  _BYTE v12[13];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = 0;
    v5 = (double *)*((_QWORD *)this + 2);
    v6 = (uint64_t *)*((_QWORD *)this + 5);
    v7 = 0.0;
    do
    {
      v8 = *v5++;
      v7 = v7 + v8;
      v9 = *v6++;
      v4 += v9;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
    v7 = 0.0;
  }
  if (v4 <= 1)
    v4 = 1;
  v11 = -v7 / (double)v4;
  result = turi::flexible_type_converter<double>::set(&v11, (uint64_t)v12);
  *(_QWORD *)(a2 + 13) = *(_QWORD *)&v12[5];
  *(_QWORD *)(a2 + 8) = *(_QWORD *)v12;
  *(_BYTE *)(a2 + 20) = v12[12];
  *(_DWORD *)a2 = 0;
  return result;
}

uint64_t std::unordered_map<turi::flexible_type,unsigned long>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,unsigned long> const&>(a1, i + 16, (_QWORD *)i + 2);
  return a1;
}

void sub_2184852B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::binary_logloss::binary_logloss(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24D942B00;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  if (a1 + 64 != a2)
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>((_QWORD *)(a1 + 64), *(_QWORD **)(a2 + 16), 0);
  }
  return a1;
}

void sub_21848534C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v2);
  v5 = (void *)v1[5];
  if (v5)
  {
    v1[6] = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    v1[3] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12[2];

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 4;
        std::pair<turi::flexible_type &,unsigned long &>::operator=[abi:ne180100]<turi::flexible_type const,unsigned long,(void *)0>(v12, v4 + 2);
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi(a1, (uint64_t)v8);
        v4 = (_QWORD *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_multi<std::pair<turi::flexible_type const,unsigned long> const&>(a1, v4 + 2);
    v4 = (_QWORD *)*v4;
  }
}

void sub_21848545C(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_218485474(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t **std::pair<turi::flexible_type &,unsigned long &>::operator=[abi:ne180100]<turi::flexible_type const,unsigned long,(void *)0>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  unint64_t *v38;
  unint64_t v39;
  void **v41;

  v4 = *a1;
  if (*a1 != a2)
  {
    switch(*((_BYTE *)v4 + 12))
    {
      case 2:
        v5 = (unint64_t *)*v4;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          if (*((char *)v8 + 31) < 0)
            operator delete((void *)v8[1]);
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v11 = (unint64_t *)*v4;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v14 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          v15 = (void *)v14[1];
          if (v15)
          {
            v14[2] = (unint64_t)v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v16 = (unint64_t *)*v4;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          v19 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          v41 = (void **)(v19 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
          goto LABEL_27;
        }
        break;
      case 5:
        v20 = (unint64_t *)*v4;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v19 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          v41 = (void **)(v19 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_27:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v23 = (unint64_t *)*v4;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
          v9 = v26;
          v27 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v28 = (unint64_t *)*v4;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = (unint64_t *)*v4;
          if (*v4)
          {
            v32 = (void *)v31[6];
            if (v32)
            {
              v31[7] = (unint64_t)v32;
              operator delete(v32);
            }
            v33 = (void *)v31[3];
            if (v33)
            {
              v31[4] = (unint64_t)v33;
              operator delete(v33);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
            v9 = v31;
            v27 = 2071181815;
LABEL_42:
            v10 = v27 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v9, v10);
          }
LABEL_44:
          *v4 = 0;
        }
        break;
      default:
        break;
    }
    v34 = *a2;
    *(uint64_t *)((char *)v4 + 5) = *(uint64_t *)((char *)a2 + 5);
    *v4 = v34;
    LODWORD(v34) = *((unsigned __int8 *)a2 + 12);
    *((_BYTE *)v4 + 12) = v34;
    v35 = v34 > 9;
    v36 = (1 << v34) & 0x33C;
    if (!v35 && v36 != 0)
    {
      v38 = (unint64_t *)*v4;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
    }
  }
  *a1[1] = a2[2];
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_multi<std::pair<turi::flexible_type const,unsigned long> const&>(_QWORD *a1, _QWORD *a2)
{
  uint64_t inserted;
  uint64_t v5[3];

  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node<std::pair<turi::flexible_type const,unsigned long> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_21848573C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node<std::pair<turi::flexible_type const,unsigned long> const&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t **v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t result;

  v5 = a1 + 16;
  v6 = operator new(0x28uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v6[2] = 0;
  v7 = (unint64_t **)(v6 + 2);
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)((char *)v6 + 21) = 0;
  v8 = (unsigned __int8 *)v6;
  if (v6 + 2 != a2)
  {
    *(_QWORD *)((char *)v6 + 21) = *(_QWORD *)((char *)a2 + 5);
    *v7 = (unint64_t *)*a2;
    v9 = *((unsigned __int8 *)a2 + 12);
    *((_BYTE *)v6 + 28) = v9;
    v8 = (unsigned __int8 *)v6;
    if (v9 <= 9)
    {
      v8 = (unsigned __int8 *)v6;
      if (((1 << v9) & 0x33C) != 0)
      {
        v10 = *v7;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        v8 = *(unsigned __int8 **)a3;
      }
    }
  }
  v6[4] = a2[2];
  *(_BYTE *)(a3 + 16) = 1;
  result = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v8 + 16);
  *(_QWORD *)(*(_QWORD *)a3 + 8) = result;
  return result;
}

void sub_218485820(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::evaluation::multiclass_logloss>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::multiclass_logloss>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::multiclass_logloss>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<turi::evaluation::multiclass_logloss>::construct[abi:ne180100]<turi::evaluation::multiclass_logloss,turi::evaluation::multiclass_logloss>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a3 + 8);
  *a2 = &unk_24D942BC0;
  a2[1] = v5;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  *((_OWORD *)a2 + 1) = *(_OWORD *)(a3 + 16);
  a2[4] = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  *(_OWORD *)(a2 + 5) = *(_OWORD *)(a3 + 40);
  a2[7] = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  result = std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table((uint64_t)(a2 + 8), (uint64_t *)(a3 + 64));
  a2[13] = *(_QWORD *)(a3 + 104);
  return result;
}

_QWORD *turi::evaluation::multiclass_logloss::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "multiclass_logloss");
}

long double turi::evaluation::multiclass_logloss::register_example(turi::evaluation::multiclass_logloss *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  unsigned __int8 *v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  long double v16;
  uint64_t v17;
  long double result;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  _QWORD v32[33];

  ++*(_QWORD *)(*((_QWORD *)this + 5) + 8 * a4);
  v7 = 1;
  switch(*((_BYTE *)a3 + 12))
  {
    case 3:
      v8 = (_QWORD *)(*(_QWORD *)a3 + 8);
      v9 = (_QWORD *)(*(_QWORD *)a3 + 16);
      v10 = 3;
      goto LABEL_5;
    case 4:
      v8 = (_QWORD *)(*(_QWORD *)a3 + 8);
      v9 = (_QWORD *)(*(_QWORD *)a3 + 16);
      v10 = 4;
      goto LABEL_5;
    case 5:
      v8 = (_QWORD *)(*(_QWORD *)a3 + 8);
      v9 = (_QWORD *)(*(_QWORD *)a3 + 16);
      v10 = 5;
LABEL_5:
      v7 = (uint64_t)(*v9 - *v8) >> v10;
      break;
    case 9:
      v20 = *(uint64_t **)(*(_QWORD *)a3 + 24);
      v19 = *(uint64_t **)(*(_QWORD *)a3 + 32);
      if (v19 == v20)
      {
        v7 = 0;
      }
      else
      {
        v7 = *(_QWORD *)(*(_QWORD *)a3 + 8);
        if (v7)
        {
          v7 = 1;
          do
          {
            v21 = *v20++;
            v7 *= v21;
          }
          while (v20 != v19);
        }
      }
      break;
    default:
      break;
  }
  if (v7 != *((_QWORD *)this + 13))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Size of prediction probability vector", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
    switch(*((_BYTE *)a3 + 12))
    {
      case 9:
        v28 = *(uint64_t **)(*(_QWORD *)a3 + 24);
        v27 = *(uint64_t **)(*(_QWORD *)a3 + 32);
        if (v27 != v28 && *(_QWORD *)(*(_QWORD *)a3 + 8))
        {
          v29 = 1;
          do
          {
            v30 = *v28++;
            v29 *= v30;
          }
          while (v28 != v27);
        }
        break;
      default:
        break;
    }
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") != number of classes", 22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
    v25 = (_QWORD *)std::ostream::operator<<();
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)").", 2);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v26);
    turi::evaluation::multiclass_logloss::register_example(turi::flexible_type const&,turi::flexible_type const&,unsigned long)::{lambda(void)#1}::operator()();
  }
  v11 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((_QWORD *)this + 8, (unsigned __int8 *)a2);
  v12 = 0.0;
  if (v11)
  {
    v13 = *((_QWORD *)v11 + 4);
    v14 = *(_QWORD *)(*(_QWORD *)a3 + 8);
    if (v13 < (*(_QWORD *)(*(_QWORD *)a3 + 16) - v14) >> 3)
      v12 = *(double *)(v14 + 8 * v13);
  }
  if (v12 < -0.000000001 || v12 > 1.0)
    turi::evaluation::check_probability_range(double const&)::{lambda(void)#1}::operator()();
  v15 = fmin(v12, 1.0);
  if (v15 < 1.0e-15)
    v15 = 1.0e-15;
  v16 = log(v15);
  v17 = *((_QWORD *)this + 2);
  result = v16 + *(double *)(v17 + 8 * a4);
  *(long double *)(v17 + 8 * a4) = result;
  return result;
}

void sub_218485C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::multiclass_logloss::multiclass_logloss(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = &unk_24D942BC0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_QWORD *)(a1 + 104) = -1;
  if (a1 + 64 != a2)
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>((_QWORD *)(a1 + 64), *(_QWORD **)(a2 + 16), 0);
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (a3 != -1)
    v6 = a3;
  *(_QWORD *)(a1 + 104) = v6;
  return a1;
}

void sub_218485CF8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v2);
  v5 = (void *)v1[5];
  if (v5)
  {
    v1[6] = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    v1[3] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::evaluation::roc_curve>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::roc_curve>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942C30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::roc_curve>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 std::allocator<turi::evaluation::roc_curve>::construct[abi:ne180100]<turi::evaluation::roc_curve,turi::evaluation::roc_curve>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __n128 result;
  uint64_t v7;

  *(_QWORD *)a2 = &unk_24D942C80;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a2 + 8, (uint64_t *)(a3 + 8));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a2 + 48, (uint64_t *)(a3 + 48));
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  v5 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 176) = v5;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a2 + 192, (uint64_t *)(a3 + 192));
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_OWORD *)(a2 + 232) = *(_OWORD *)(a3 + 232);
  *(_QWORD *)(a2 + 248) = *(_QWORD *)(a3 + 248);
  *(_QWORD *)(a3 + 232) = 0;
  *(_QWORD *)(a3 + 240) = 0;
  *(_QWORD *)(a3 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  result = *(__n128 *)(a3 + 256);
  *(__n128 *)(a2 + 256) = result;
  *(_QWORD *)(a2 + 272) = *(_QWORD *)(a3 + 272);
  *(_QWORD *)(a3 + 256) = 0;
  *(_QWORD *)(a3 + 264) = 0;
  *(_QWORD *)(a3 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  v7 = *(_QWORD *)(a3 + 288);
  *(_QWORD *)(a2 + 280) = *(_QWORD *)(a3 + 280);
  *(_QWORD *)(a2 + 288) = v7;
  *(_QWORD *)(a2 + 296) = *(_QWORD *)(a3 + 296);
  *(_QWORD *)(a3 + 280) = 0;
  *(_QWORD *)(a3 + 288) = 0;
  *(_QWORD *)(a3 + 296) = 0;
  return result;
}

void turi::evaluation::roc_curve::~roc_curve(turi::evaluation::roc_curve *this)
{
  turi::evaluation::roc_curve::~roc_curve(this);
  JUMPOUT(0x219A19A08);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &unk_24D942C80;
  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 256);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 232);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 192);
  v3 = (void **)((char *)this + 136);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 112);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 88);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 8);
}

_QWORD *turi::evaluation::roc_curve::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "roc_curve");
}

void turi::evaluation::roc_curve::init(turi::evaluation::roc_curve *this, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *((_QWORD *)this + 22) = a2;
  v3 = (_QWORD *)((char *)this + 88);
  std::vector<std::vector<std::vector<unsigned long>>>::resize((uint64_t *)this + 11, a2);
  std::vector<std::vector<std::vector<unsigned long>>>::resize((uint64_t *)this + 14, *((_QWORD *)this + 22));
  std::vector<std::vector<unsigned long>>::resize((uint64_t *)this + 17, *((_QWORD *)this + 22));
  if (*((_QWORD *)this + 22))
  {
    v4 = 0;
    v5 = *((_QWORD *)this + 23);
    do
    {
      std::vector<std::vector<unsigned long>>::resize((uint64_t *)(*((_QWORD *)this + 11) + 24 * v4), v5);
      std::vector<std::vector<unsigned long>>::resize((uint64_t *)(*((_QWORD *)this + 14) + 24 * v4), *((_QWORD *)this + 23));
      std::vector<unsigned long>::resize(*((_QWORD *)this + 17) + 24 * v4, *((_QWORD *)this + 23));
      if (*((_QWORD *)this + 23))
      {
        v6 = 0;
        v7 = *((_QWORD *)this + 21);
        do
        {
          std::vector<unsigned long>::resize(*(_QWORD *)(*((_QWORD *)this + 11) + 24 * v4) + 24 * v6, v7);
          std::vector<unsigned long>::resize(*(_QWORD *)(*((_QWORD *)this + 14) + 24 * v4) + 24 * v6, *((_QWORD *)this + 21));
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24 * v4) + 8 * v6) = 0;
          v7 = *((_QWORD *)this + 21);
          if (v7)
          {
            v8 = 0;
            v9 = *(_QWORD *)(*(_QWORD *)(*v3 + 24 * v4) + 24 * v6);
            v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 24 * v4) + 24 * v6);
            do
            {
              *(_QWORD *)(v9 + 8 * v8) = 0;
              *(_QWORD *)(v10 + 8 * v8++) = 0;
              v7 = *((_QWORD *)this + 21);
            }
            while (v8 < v7);
          }
          ++v6;
          v5 = *((_QWORD *)this + 23);
        }
        while (v6 < v5);
      }
      else
      {
        v5 = 0;
      }
      ++v4;
    }
    while (v4 < *((_QWORD *)this + 22));
  }
  else
  {
    v5 = *((_QWORD *)this + 23);
  }
  std::vector<std::vector<unsigned long>>::resize((uint64_t *)this + 29, v5);
  std::vector<std::vector<unsigned long>>::resize((uint64_t *)this + 32, *((_QWORD *)this + 23));
  std::vector<unsigned long>::resize((uint64_t)this + 280, *((_QWORD *)this + 23));
  if (*((_QWORD *)this + 23))
  {
    v11 = 0;
    do
    {
      *(_QWORD *)(*((_QWORD *)this + 35) + 8 * v11) = 0;
      std::vector<unsigned long>::resize(*((_QWORD *)this + 29) + 24 * v11, *((_QWORD *)this + 21));
      std::vector<unsigned long>::resize(*((_QWORD *)this + 32) + 24 * v11, *((_QWORD *)this + 21));
      if (*((_QWORD *)this + 21))
      {
        v12 = 0;
        v13 = *(_QWORD *)(*((_QWORD *)this + 29) + 24 * v11);
        v14 = *(_QWORD *)(*((_QWORD *)this + 32) + 24 * v11);
        do
        {
          *(_QWORD *)(v13 + 8 * v12) = 0;
          *(_QWORD *)(v14 + 8 * v12++) = 0;
        }
        while (v12 < *((_QWORD *)this + 21));
      }
      ++v11;
    }
    while (v11 < *((_QWORD *)this + 23));
  }
}

void turi::evaluation::roc_curve::register_example(turi::evaluation::roc_curve *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  unsigned __int8 *v7;
  unint64_t v8;
  double v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  double *v31;
  int v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  double *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char **v54;
  char *v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  __int128 v64;
  __int128 v65;
  float v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  std::runtime_error *exception;
  std::string *v77;
  __int128 v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *__p[2];
  void *v89[2];
  __int128 v90;
  __int128 v91;
  std::string v92;
  size_t __idx[2];

  if (*((_BYTE *)a3 + 12) == 7)
    turi::evaluation::check_undefined(turi::flexible_type const&)::{lambda(void)#1}::operator()();
  v7 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((_QWORD *)this + 24, (unsigned __int8 *)a2);
  if (v7)
  {
    v8 = *((_QWORD *)v7 + 4);
    if (*((_BYTE *)this + 161))
    {
      v9 = 0.0;
      switch(*((_BYTE *)a3 + 12))
      {
        case 0:
          v9 = (double)*(uint64_t *)a3;
          break;
        case 1:
          v9 = *(double *)a3;
          break;
        case 2:
          v53 = *(_QWORD *)a3;
          v54 = (char **)(*(_QWORD *)a3 + 8);
          __idx[0] = 0;
          v55 = (char *)v54;
          if (*(char *)(v53 + 31) < 0)
            v55 = *v54;
          std::string::basic_string[abi:ne180100]<0>(__p, v55);
          v56 = std::stod((const std::string *)__p, __idx);
          if (SHIBYTE(v89[0]) < 0)
            operator delete(__p[0]);
          if (*(char *)(v53 + 31) < 0)
            v57 = *(_QWORD *)(v53 + 16);
          else
            v57 = *(unsigned __int8 *)(v53 + 31);
          if (__idx[0] != v57)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v77 = std::string::append(&v92, " cannot be interpreted as a float");
            v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
            v89[0] = (void *)v77->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v78;
            v77->__r_.__value_.__l.__size_ = 0;
            v77->__r_.__value_.__r.__words[2] = 0;
            v77->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, (const std::string *)__p);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v66 = v56;
          v9 = v66;
          break;
        case 3:
          v49 = *(_QWORD *)a3;
          __p[1] = 0;
          v89[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v49 + 8), *(_QWORD *)(v49 + 16), (uint64_t)(*(_QWORD *)(v49 + 16) - *(_QWORD *)(v49 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          break;
        case 4:
          v58 = *(_QWORD *)a3;
          __p[1] = 0;
          v89[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v58 + 8), *(uint64_t **)(v58 + 16), (uint64_t)(*(_QWORD *)(v58 + 16) - *(_QWORD *)(v58 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v92.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
          break;
        case 5:
          v59 = *(_QWORD *)a3;
          __p[1] = 0;
          v89[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v59 + 8), *(uint64_t **)(v59 + 16), (uint64_t)(*(_QWORD *)(v59 + 16) - *(_QWORD *)(v59 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v92.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
          break;
        case 6:
          v9 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          v60 = *(_QWORD *)a3;
          v61 = *(unsigned int **)(*(_QWORD *)a3 + 16);
          __p[0] = *(void **)(*(_QWORD *)a3 + 8);
          __p[1] = v61;
          if (v61)
          {
            v62 = v61 + 2;
            do
              v63 = __ldxr(v62);
            while (__stxr(v63 + 1, v62));
          }
          v64 = *(_OWORD *)(v60 + 24);
          v65 = *(_OWORD *)(v60 + 56);
          v90 = *(_OWORD *)(v60 + 40);
          v91 = v65;
          *(_OWORD *)v89 = v64;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v90 + 1))
          {
            *(_QWORD *)&v91 = *((_QWORD *)&v90 + 1);
            operator delete(*((void **)&v90 + 1));
          }
          if (v89[0])
          {
            v89[1] = v89[0];
            operator delete(v89[0]);
          }
          v50 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v51 = (unint64_t *)((char *)__p[1] + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          break;
        default:
          turi::apply_binary_op_ff();
      }
      if (v9 < -0.000000001 || v9 > 1.0)
LABEL_103:
        turi::evaluation::check_probability_range(double const&)::{lambda(void)#1}::operator()();
      v67 = *((_QWORD *)this + 21);
      v68 = vcvtmd_u64_f64(fmax(v9 * (double)v67, 0.0));
      if (v67 <= v68)
        v69 = v67 - 1;
      else
        v69 = v68;
      v70 = (unint64_t)(float)v69;
      if (v8 == 1)
      {
        v71 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24 * a4) + 24);
        ++*(_QWORD *)(v71 + 8 * v70);
        v72 = **(_QWORD **)(*((_QWORD *)this + 14) + 24 * a4);
        ++*(_QWORD *)(v72 + 8 * v70);
        v45 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24 * a4) + 8);
      }
      else
      {
        v73 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 24 * a4) + 24);
        ++*(_QWORD *)(v73 + 8 * v70);
        v74 = **(_QWORD **)(*((_QWORD *)this + 11) + 24 * a4);
        ++*(_QWORD *)(v74 + 8 * v70);
        v45 = *(_QWORD **)(*((_QWORD *)this + 17) + 24 * a4);
      }
    }
    else
    {
      v10 = *((_BYTE *)a3 + 12);
      v11 = 1;
      switch(v10)
      {
        case 3:
          v12 = (_QWORD *)(*(_QWORD *)a3 + 8);
          v13 = (_QWORD *)(*(_QWORD *)a3 + 16);
          v14 = 3;
          goto LABEL_10;
        case 4:
          v12 = (_QWORD *)(*(_QWORD *)a3 + 8);
          v13 = (_QWORD *)(*(_QWORD *)a3 + 16);
          v14 = 4;
          goto LABEL_10;
        case 5:
          v12 = (_QWORD *)(*(_QWORD *)a3 + 8);
          v13 = (_QWORD *)(*(_QWORD *)a3 + 16);
          v14 = 5;
LABEL_10:
          v11 = (uint64_t)(*v13 - *v12) >> v14;
          break;
        case 9:
          v20 = *(uint64_t **)(*(_QWORD *)a3 + 24);
          v19 = *(uint64_t **)(*(_QWORD *)a3 + 32);
          if (v19 == v20)
          {
            v11 = 0;
          }
          else
          {
            v11 = *(_QWORD *)(*(_QWORD *)a3 + 8);
            if (v11)
            {
              v11 = 1;
              do
              {
                v21 = *v20++;
                v11 *= v21;
              }
              while (v20 != v19);
            }
          }
          break;
        default:
          break;
      }
      if (v11 != *((_QWORD *)this + 23))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Size of prediction probability vector", 37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"(", 1);
        switch(*((_BYTE *)a3 + 12))
        {
          case 9:
            v84 = *(uint64_t **)(*(_QWORD *)a3 + 24);
            v83 = *(uint64_t **)(*(_QWORD *)a3 + 32);
            if (v83 != v84 && *(_QWORD *)(*(_QWORD *)a3 + 8))
            {
              v85 = 1;
              do
              {
                v86 = *v84++;
                v85 *= v86;
              }
              while (v84 != v83);
            }
            break;
          default:
            break;
        }
        v79 = (_QWORD *)std::ostream::operator<<();
        v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)") != number of classes", 22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"(", 1);
        v81 = (_QWORD *)std::ostream::operator<<();
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)").", 2);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v82);
        v92.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        turi::evaluation::roc_curve::register_example(turi::flexible_type const&,turi::flexible_type const&,unsigned long)::{lambda(void)#1}::operator()();
      }
      v15 = 1;
      switch(*((_BYTE *)a3 + 12))
      {
        case 3:
          v16 = (_QWORD *)(*(_QWORD *)a3 + 8);
          v17 = (_QWORD *)(*(_QWORD *)a3 + 16);
          v18 = 3;
          goto LABEL_21;
        case 4:
          v16 = (_QWORD *)(*(_QWORD *)a3 + 8);
          v17 = (_QWORD *)(*(_QWORD *)a3 + 16);
          v18 = 4;
          goto LABEL_21;
        case 5:
          v16 = (_QWORD *)(*(_QWORD *)a3 + 8);
          v17 = (_QWORD *)(*(_QWORD *)a3 + 16);
          v18 = 5;
LABEL_21:
          v15 = (uint64_t)(*v17 - *v16) >> v18;
          goto LABEL_22;
        case 9:
          v47 = *(uint64_t **)(*(_QWORD *)a3 + 24);
          v46 = *(uint64_t **)(*(_QWORD *)a3 + 32);
          if (v46 == v47 || !*(_QWORD *)(*(_QWORD *)a3 + 8))
            return;
          v15 = 1;
          do
          {
            v48 = *v47++;
            v15 *= v48;
          }
          while (v47 != v46);
LABEL_22:
          if (v8 >= v15)
            return;
          v22 = 0;
          v87 = a4;
          v23 = 24 * a4;
          break;
        default:
          goto LABEL_22;
      }
      while (1)
      {
        v24 = 1;
        switch(v10)
        {
          case 3:
            v25 = (_QWORD *)(*(_QWORD *)a3 + 8);
            v26 = (_QWORD *)(*(_QWORD *)a3 + 16);
            v27 = 3;
            goto LABEL_28;
          case 4:
            v25 = (_QWORD *)(*(_QWORD *)a3 + 8);
            v26 = (_QWORD *)(*(_QWORD *)a3 + 16);
            v27 = 4;
            goto LABEL_28;
          case 5:
            v25 = (_QWORD *)(*(_QWORD *)a3 + 8);
            v26 = (_QWORD *)(*(_QWORD *)a3 + 16);
            v27 = 5;
LABEL_28:
            v24 = (uint64_t)(*v26 - *v25) >> v27;
            break;
          case 9:
            v43 = *(uint64_t **)(*(_QWORD *)a3 + 24);
            v42 = *(uint64_t **)(*(_QWORD *)a3 + 32);
            if (v42 == v43)
            {
              v24 = 0;
            }
            else
            {
              v24 = *(_QWORD *)(*(_QWORD *)a3 + 8);
              if (v24)
              {
                v24 = 1;
                do
                {
                  v44 = *v43++;
                  v24 *= v44;
                }
                while (v43 != v42);
              }
            }
            break;
          default:
            break;
        }
        if (v22 >= v24)
          break;
        if (v10 == 1)
        {
          v31 = (double *)a3;
          if (v22)
LABEL_105:
            turi::apply_binary_op_ff();
        }
        else
        {
          if (v10 == 9)
          {
            v30 = *(_QWORD *)a3;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)a3 + 8));
            v28 = *(_QWORD **)(v30 + 8);
            v29 = *(_QWORD *)(v30 + 72) + v22;
          }
          else
          {
            if (v10 != 3)
              goto LABEL_105;
            v28 = (_QWORD *)(*(_QWORD *)a3 + 8);
            v29 = v22;
          }
          v31 = (double *)(*v28 + 8 * v29);
        }
        if (*v31 < -0.000000001 || *v31 > 1.0)
          goto LABEL_103;
        v32 = *((unsigned __int8 *)a3 + 12);
        if (v32 == 1)
        {
          v36 = (double *)a3;
          if (v22)
LABEL_104:
            turi::apply_binary_op_ff();
        }
        else
        {
          if (v32 == 9)
          {
            v35 = *(_QWORD *)a3;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)a3 + 8));
            v33 = *(_QWORD **)(v35 + 8);
            v34 = *(_QWORD *)(v35 + 72) + v22;
          }
          else
          {
            if (v32 != 3)
              goto LABEL_104;
            v33 = (_QWORD *)(*(_QWORD *)a3 + 8);
            v34 = v22;
          }
          v36 = (double *)(*v33 + 8 * v34);
        }
        v37 = *((_QWORD *)this + 21);
        v38 = vcvtmd_u64_f64(fmax(*v36 * (double)v37, 0.0));
        if (v37 <= v38)
          v38 = v37 - 1;
        v39 = (unint64_t)(float)v38;
        if (v22 == v8)
          v40 = 88;
        else
          v40 = 112;
        v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)this + v40) + v23) + 24 * v22);
        ++*(_QWORD *)(v41 + 8 * v39);
        ++v22;
        v10 = *((_BYTE *)a3 + 12);
      }
      v45 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24 * v87) + 8 * v8);
    }
    ++*v45;
  }
}

void sub_2184869B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void turi::evaluation::roc_curve::get_metric(turi::evaluation::roc_curve *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t **v6;
  int v7;
  uint64_t *i;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  BOOL v43;
  int v44;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD v49[2];
  unint64_t v50;
  unint64_t v51[2];
  std::string *v52;
  uint64_t *v53;
  _QWORD v54[11];

  v54[9] = *MEMORY[0x24BDAC8D0];
  turi::evaluation::roc_curve::gather_global_metrics(this);
  v4 = *((_QWORD *)this + 23);
  v51[0] = *((_QWORD *)this + 21);
  v51[1] = v4;
  if (v4 == 2)
  {
    v49[1] = 0;
    v50 = 1;
    v48 = v49;
    v49[0] = 0;
    turi::evaluation::roc_curve::get_metric(void)::{lambda(std::vector<std::vector<unsigned long>> const&,std::vector<std::vector<unsigned long>> const&,std::vector<unsigned long> const&,unsigned long const&,BOOL,std::map<unsigned long,turi::flexible_type> const&)#1}::operator()(v51, (_QWORD *)this + 29, (_QWORD *)this + 32, (uint64_t **)this + 35, &v50, 1, (uint64_t)&v48, (uint64_t)&v53);
    v52 = (std::string *)(a2 + 8);
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v53, v53 ^ ((int)v53 >> 31), &v52, (uint64_t)v54);
    *(_DWORD *)a2 = v53 ^ ((int)v53 >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v53);
    v5 = (_QWORD *)v49[0];
    v6 = &v48;
  }
  else
  {
    v7 = *((unsigned __int8 *)this + 160);
    if (v7 != 3 && v7 != 0)
      turi::evaluation::roc_curve::get_metric(void)::{lambda(void)#1}::operator()();
    v54[0] = 0;
    v54[1] = 0;
    v53 = v54;
    for (i = (uint64_t *)*((_QWORD *)this + 26); i; i = (uint64_t *)*i)
    {
      v48 = i + 4;
      v10 = std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v53, (unint64_t *)i + 4, (uint64_t)&std::piecewise_construct, &v48);
      v11 = v10;
      v12 = v10 + 5;
      if (i + 2 != (uint64_t *)(v10 + 5))
      {
        switch(*((_BYTE *)v10 + 52))
        {
          case 2:
            v13 = (unint64_t *)*v12;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = (unint64_t *)*v12;
              if (!*v12)
                goto LABEL_52;
              if (*((char *)v16 + 31) < 0)
                operator delete((void *)v16[1]);
              v17 = v16;
              v18 = 0x1012C404EF22A49;
              goto LABEL_51;
            }
            break;
          case 3:
            v30 = (unint64_t *)*v12;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = (unint64_t *)*v12;
              if (!*v12)
                goto LABEL_52;
              v34 = (void *)v33[1];
              if (v34)
              {
                v33[2] = (unint64_t)v34;
                operator delete(v34);
              }
              v17 = v33;
              v18 = 0x1080C409938AC02;
              goto LABEL_51;
            }
            break;
          case 4:
            v19 = (unint64_t *)*v12;
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              v22 = (unint64_t *)*v12;
              if (!*v12)
                goto LABEL_52;
              v48 = v22 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
              goto LABEL_44;
            }
            break;
          case 5:
            v35 = (unint64_t *)*v12;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              v22 = (unint64_t *)*v12;
              if (!*v12)
                goto LABEL_52;
              v48 = v22 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
LABEL_44:
              v17 = v22;
              v18 = 0x1020C405E66F15BLL;
              goto LABEL_51;
            }
            break;
          case 8:
            v38 = (unint64_t *)*v12;
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              v41 = (unint64_t *)*v12;
              if (!*v12)
                goto LABEL_52;
              boost::detail::shared_count::~shared_count((unsigned int **)v41 + 2);
              v17 = v41;
              v29 = -235920773;
              goto LABEL_50;
            }
            break;
          case 9:
            v23 = (unint64_t *)*v12;
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              v26 = (unint64_t *)*v12;
              if (*v12)
              {
                v27 = (void *)v26[6];
                if (v27)
                {
                  v26[7] = (unint64_t)v27;
                  operator delete(v27);
                }
                v28 = (void *)v26[3];
                if (v28)
                {
                  v26[4] = (unint64_t)v28;
                  operator delete(v28);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 1));
                v17 = v26;
                v29 = 2071181815;
LABEL_50:
                v18 = v29 | 0x1030C4000000000;
LABEL_51:
                MEMORY[0x219A19A08](v17, v18);
              }
LABEL_52:
              *v12 = 0;
            }
            break;
          default:
            break;
        }
        v42 = (uint64_t *)i[2];
        *(uint64_t **)((char *)v12 + 5) = *(uint64_t **)((char *)i + 21);
        *v12 = v42;
        LODWORD(v42) = *((unsigned __int8 *)i + 28);
        *((_BYTE *)v11 + 52) = (_BYTE)v42;
        v43 = v42 > 9;
        v44 = (1 << (char)v42) & 0x33C;
        if (!v43 && v44 != 0)
        {
          v46 = (unint64_t *)*v12;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 + 1, v46));
        }
      }
    }
    v48 = 0;
    turi::evaluation::roc_curve::get_metric(void)::{lambda(std::vector<std::vector<unsigned long>> const&,std::vector<std::vector<unsigned long>> const&,std::vector<unsigned long> const&,unsigned long const&,BOOL,std::map<unsigned long,turi::flexible_type> const&)#1}::operator()(v51, (_QWORD *)this + 29, (_QWORD *)this + 32, (uint64_t **)this + 35, (unint64_t *)&v48, 0, (uint64_t)&v53, a2);
    v5 = (_QWORD *)v54[0];
    v6 = &v53;
  }
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)v6, v5);
}

void sub_218486E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::vector<unsigned long>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<unsigned long>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::vector<unsigned long>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::vector<unsigned long>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(&v15);
  }
}

void sub_218487098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<unsigned long>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<unsigned long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *turi::evaluation::roc_curve::gather_global_metrics(_QWORD *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v1 = this[22];
  if (!v1)
  {
    v3 = this[23];
    if (!v3)
      return this;
    goto LABEL_14;
  }
  v2 = 0;
  v3 = this[23];
  v4 = v3;
  do
  {
    if (v4)
    {
      v5 = 0;
      v6 = *(_QWORD *)(this[17] + 24 * v2);
      v7 = this[35];
      do
      {
        *(_QWORD *)(v7 + 8 * v5) += *(_QWORD *)(v6 + 8 * v5);
        if (this[21])
        {
          v8 = 0;
          v9 = *(_QWORD *)(*(_QWORD *)(this[14] + 24 * v2) + 24 * v5);
          v10 = *(_QWORD *)(this[29] + 24 * v5);
          v11 = *(_QWORD *)(*(_QWORD *)(this[11] + 24 * v2) + 24 * v5);
          v12 = *(_QWORD *)(this[32] + 24 * v5);
          do
          {
            *(_QWORD *)(v10 + 8 * v8) += *(_QWORD *)(v9 + 8 * v8);
            *(_QWORD *)(v12 + 8 * v8) += *(_QWORD *)(v11 + 8 * v8);
            ++v8;
          }
          while (v8 < this[21]);
        }
        ++v5;
        v3 = this[23];
      }
      while (v5 < v3);
      v1 = this[22];
      v4 = this[23];
    }
    ++v2;
  }
  while (v2 < v1);
  if (v3)
  {
LABEL_14:
    for (i = 0; i < v3; ++i)
    {
      v14 = this[21];
      if (v14 - 2 >= 0)
      {
        v15 = v14 - 1;
        v16 = (_QWORD *)(*(_QWORD *)(this[32] + 24 * i) + 8 * v14 - 16);
        v17 = (_QWORD *)(*(_QWORD *)(this[29] + 24 * i) + 8 * v14 - 16);
        do
        {
          *v17 += v17[1];
          --v17;
          *v16 += v16[1];
          --v16;
          --v15;
        }
        while (v15);
        v3 = this[23];
      }
    }
  }
  return this;
}

void turi::evaluation::roc_curve::get_metric(void)::{lambda(std::vector<std::vector<unsigned long>> const&,std::vector<std::vector<unsigned long>> const&,std::vector<unsigned long> const&,unsigned long const&,BOOL,std::map<unsigned long,turi::flexible_type> const&)#1}::operator()(unint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X3>, unint64_t *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  std::vector<std::string>::pointer end;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  char v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  void *v32;
  char *v33;
  char *v34;
  _BYTE *v35;
  char *v36;
  char v37;
  uint64_t *p_v;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  std::string::size_type v42;
  double v43;
  uint64_t v44;
  uint64_t *v45;
  void **v46;
  void **v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  void **v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  unsigned int v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  void *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int **v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  void **v87;
  void **v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  void **v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  void *v103;
  void *v104;
  unsigned int v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  void *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int **v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t *p_shared_owners;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  std::__compressed_pair_elem<std::allocator<std::string> &, 1, false> *v136;
  uint64_t v137;
  _QWORD *words;
  uint64_t v139;
  turi::unity_sframe *v147;
  std::__shared_weak_count *v148;
  unint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  void *v153;
  char *v154;
  char *v155;
  std::vector<std::string> v156;
  void *__p[2];
  std::string::size_type v158;
  int v159;
  char v160;
  double v161;
  int v162;
  char v163;
  _QWORD v164[2];
  uint64_t v165;
  int v166;
  char v167;
  std::__split_buffer<std::string> __v;
  uint64_t v169;
  std::__split_buffer<std::string> *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  _QWORD v174[3];
  __int128 v175[18];
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v9 = *a4;
  v10 = a4[1];
  if (*a4 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = *v9++;
      v11 += v12;
    }
    while (v9 != v10);
  }
  turi::sframe::sframe((turi::sframe *)v175);
  std::string::basic_string[abi:ne180100]<0>(&__v, "threshold");
  std::string::basic_string[abi:ne180100]<0>(&__v.__end_cap_.__value_, "fpr");
  std::string::basic_string[abi:ne180100]<0>(&v169, "tpr");
  std::string::basic_string[abi:ne180100]<0>(&v172, "p");
  std::string::basic_string[abi:ne180100]<0>(v174, "n");
  memset(&v156, 0, sizeof(v156));
  __p[0] = &v156;
  LOBYTE(__p[1]) = 0;
  v156.__begin_ = (std::vector<std::string>::pointer)operator new(0x78uLL);
  v156.__end_ = v156.__begin_;
  v156.__end_cap_.__value_ = v156.__begin_ + 5;
  v13 = 0;
  v156.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v156.__end_cap_, (__int128 *)&__v, v175, v156.__begin_);
  do
  {
    if (SHIBYTE(v174[v13 + 2]) < 0)
      operator delete((void *)v174[v13]);
    v13 -= 3;
  }
  while (v13 != -15);
  v14 = (char *)operator new(5uLL);
  v154 = v14 + 5;
  v155 = v14 + 5;
  *(_DWORD *)v14 = 65793;
  v14[4] = 0;
  v153 = v14;
  if ((a6 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "class");
    end = v156.__end_;
    if (v156.__end_ >= v156.__end_cap_.__value_)
    {
      v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v156.__end_ - (char *)v156.__begin_) >> 3);
      v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v156.__end_cap_.__value_ - (char *)v156.__begin_) >> 3) > v18)
        v18 = 0x5555555555555556 * (((char *)v156.__end_cap_.__value_ - (char *)v156.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v156.__end_cap_.__value_ - (char *)v156.__begin_) >> 3) >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v156.__end_cap_;
      if (v19)
        v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v156.__end_cap_, v19);
      else
        v20 = 0;
      v21 = v20 + v17;
      __v.__first_ = v20;
      __v.__begin_ = v21;
      __v.__end_cap_.__value_ = &v20[v19];
      v22 = *(_OWORD *)__p;
      v21->__r_.__value_.__r.__words[2] = v158;
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      __p[1] = 0;
      v158 = 0;
      __p[0] = 0;
      __v.__end_ = v21 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v156, &__v);
      v23 = v156.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v156.__end_ = v23;
      if (SHIBYTE(v158) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v16 = *(_OWORD *)__p;
      v156.__end_->__r_.__value_.__r.__words[2] = v158;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v16;
      v156.__end_ = end + 1;
    }
    v24 = *((_BYTE *)std::map<unsigned long,turi::flexible_type>::at(a7, a5) + 12);
    v25 = v154;
    if (v154 >= v155)
    {
      v27 = (unint64_t)v153;
      v28 = v154 - (_BYTE *)v153;
      v29 = v154 - (_BYTE *)v153 + 1;
      if (v29 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v30 = v155 - (_BYTE *)v153;
      if (2 * (v155 - (_BYTE *)v153) > (unint64_t)v29)
        v29 = 2 * v30;
      if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
        v31 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
        v32 = operator new(v31);
      else
        v32 = 0;
      v33 = (char *)v32 + v28;
      v34 = (char *)v32 + v31;
      v35 = (char *)v32 + v28;
      *v35 = v24;
      v26 = v35 + 1;
      if (v25 == (char *)v27)
      {
        v32 = v33;
      }
      else
      {
        v36 = &v25[~v27];
        do
        {
          v37 = *--v25;
          (v36--)[(_QWORD)v32] = v37;
        }
        while (v25 != (char *)v27);
      }
      v153 = v32;
      v154 = v26;
      v155 = v34;
      if (v27)
        operator delete((void *)v27);
    }
    else
    {
      *v154 = v24;
      v26 = v25 + 1;
    }
    v154 = v26;
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "");
  turi::sframe::open_for_write((uint64_t)v175, &v156, &v153, (const std::string *)&__v, 1, 1);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  v150 = 0;
  v151 = 0;
  v152 = 0;
  turi::sframe::get_output_iterator((size_t *)v175, 0, (uint64_t)&__v);
  v149 = 0;
  p_v = (uint64_t *)&__v;
  do
  {
    if (a6)
      v149 = *a5;
    v39 = *a1;
    if (*a1)
    {
      v40 = 0;
      do
      {
        LODWORD(__p[1]) = 0;
        BYTE4(__p[1]) = 1;
        *(double *)__p = (double)v40 / (double)v39;
        v41 = *a4;
        *(double *)&v42 = (double)*(unint64_t *)(*(_QWORD *)(*a2 + 24 * v149) + 8 * v40)
                        / (double)(unint64_t)(v11 - (*a4)[v149]);
        v159 = 0;
        v160 = 1;
        v158 = v42;
        v43 = (double)*(unint64_t *)(*(_QWORD *)(*a3 + 24 * v149) + 8 * v40)
            / (double)(unint64_t)v41[v149];
        v162 = 0;
        v163 = 1;
        v161 = v43;
        v164[0] = 0;
        *(_QWORD *)((char *)v164 + 5) = 0;
        v44 = v41[v149];
        v166 = 0;
        v167 = 0;
        v164[0] = v44;
        v165 = v11 - v44;
        std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*>((uint64_t)&v150, (uint64_t *)__p, p_v, 5uLL);
        v45 = p_v;
        v46 = (void **)p_v;
        do
        {
          v47 = v46;
          v46 -= 2;
          switch(*((_BYTE *)v47 - 4))
          {
            case 2:
              v48 = (unint64_t *)*v46;
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50)
              {
                v51 = (void **)*v46;
                if (!*v46)
                  goto LABEL_93;
                if (*((char *)v51 + 31) < 0)
                  operator delete(v51[1]);
                v52 = v51;
                v53 = 0x1012C404EF22A49;
                goto LABEL_92;
              }
              break;
            case 3:
              v65 = (unint64_t *)*v46;
              do
              {
                v66 = __ldaxr(v65);
                v67 = v66 - 1;
              }
              while (__stlxr(v67, v65));
              if (!v67)
              {
                v68 = *v46;
                if (!*v46)
                  goto LABEL_93;
                v69 = (void *)v68[1];
                if (v69)
                {
                  v68[2] = v69;
                  operator delete(v69);
                }
                v52 = v68;
                v53 = 0x1080C409938AC02;
                goto LABEL_92;
              }
              break;
            case 4:
              v54 = (unint64_t *)*v46;
              do
              {
                v55 = __ldaxr(v54);
                v56 = v55 - 1;
              }
              while (__stlxr(v56, v54));
              if (!v56)
              {
                v57 = *v46;
                if (!*v46)
                  goto LABEL_93;
                v147 = (turi::unity_sframe *)(v57 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
                goto LABEL_85;
              }
              break;
            case 5:
              v70 = (unint64_t *)*v46;
              do
              {
                v71 = __ldaxr(v70);
                v72 = v71 - 1;
              }
              while (__stlxr(v72, v70));
              if (!v72)
              {
                v57 = *v46;
                if (!*v46)
                  goto LABEL_93;
                v147 = (turi::unity_sframe *)(v57 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
LABEL_85:
                v52 = v57;
                v53 = 0x1020C405E66F15BLL;
                goto LABEL_92;
              }
              break;
            case 8:
              v73 = (unint64_t *)*v46;
              do
              {
                v74 = __ldaxr(v73);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, v73));
              if (!v75)
              {
                v76 = (unsigned int **)*v46;
                if (!*v46)
                  goto LABEL_93;
                boost::detail::shared_count::~shared_count(v76 + 2);
                v52 = v76;
                v64 = -235920773;
                goto LABEL_91;
              }
              break;
            case 9:
              v58 = (unint64_t *)*v46;
              do
              {
                v59 = __ldaxr(v58);
                v60 = v59 - 1;
              }
              while (__stlxr(v60, v58));
              if (!v60)
              {
                v61 = *v46;
                if (*v46)
                {
                  v62 = (void *)v61[6];
                  if (v62)
                  {
                    v61[7] = v62;
                    operator delete(v62);
                  }
                  v63 = (void *)v61[3];
                  if (v63)
                  {
                    v61[4] = v63;
                    operator delete(v63);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v61 + 1));
                  v52 = v61;
                  v64 = 2071181815;
LABEL_91:
                  v53 = v64 | 0x1030C4000000000;
LABEL_92:
                  MEMORY[0x219A19A08](v52, v53);
                }
LABEL_93:
                *v46 = 0;
              }
              break;
            default:
              break;
          }
          *(v47 - 2) = 0;
          *((_DWORD *)v47 - 2) = 0;
          *((_BYTE *)v47 - 4) = 0;
        }
        while (v46 != __p);
        if ((a6 & 1) == 0)
        {
          v77 = std::map<unsigned long,turi::flexible_type>::at(a7, &v149);
          v78 = v151;
          if ((unint64_t)v151 >= v152)
          {
            v83 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(&v150, (char *)v77);
          }
          else
          {
            *v151 = 0;
            *((_DWORD *)v78 + 2) = 0;
            *((_BYTE *)v78 + 12) = 0;
            if (v78 != v77)
            {
              v79 = *v77;
              *(_QWORD *)((char *)v78 + 5) = *(_QWORD *)((char *)v77 + 5);
              *v78 = v79;
              v80 = *((unsigned __int8 *)v77 + 12);
              *((_BYTE *)v78 + 12) = v80;
              if (v80 <= 9 && ((1 << v80) & 0x33C) != 0)
              {
                v81 = (unint64_t *)*v78;
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 + 1, v81));
              }
            }
            v83 = (uint64_t)(v78 + 2);
          }
          v151 = (_QWORD *)v83;
        }
        if (!__v.__end_cap_.__value_)
          std::__throw_bad_function_call[abi:ne180100]();
        (*((void (**)(std::string *, uint64_t *))__v.__end_cap_.__value_->__r_.__value_.__l.__data_ + 6))(__v.__end_cap_.__value_, &v150);
        p_v = v45;
        ++v40;
        v39 = *a1;
      }
      while (v40 < *a1);
    }
    LODWORD(__p[1]) = 0;
    BYTE4(__p[1]) = 1;
    __p[0] = (void *)0x3FF0000000000000;
    v159 = 0;
    v160 = 1;
    v158 = 0;
    v162 = 0;
    v163 = 1;
    v161 = 0.0;
    v84 = *a5;
    v85 = *a4;
    v164[0] = 0;
    *(_QWORD *)((char *)v164 + 5) = 0;
    v86 = v85[v84];
    v166 = 0;
    v167 = 0;
    v164[0] = v86;
    v165 = v11 - v86;
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*>((uint64_t)&v150, (uint64_t *)__p, p_v, 5uLL);
    v87 = (void **)p_v;
    do
    {
      v88 = v87;
      v87 -= 2;
      switch(*((_BYTE *)v88 - 4))
      {
        case 2:
          v89 = (unint64_t *)*v87;
          do
          {
            v90 = __ldaxr(v89);
            v91 = v90 - 1;
          }
          while (__stlxr(v91, v89));
          if (!v91)
          {
            v92 = (void **)*v87;
            if (!*v87)
              goto LABEL_150;
            if (*((char *)v92 + 31) < 0)
              operator delete(v92[1]);
            v93 = v92;
            v94 = 0x1012C404EF22A49;
            goto LABEL_149;
          }
          break;
        case 3:
          v106 = (unint64_t *)*v87;
          do
          {
            v107 = __ldaxr(v106);
            v108 = v107 - 1;
          }
          while (__stlxr(v108, v106));
          if (!v108)
          {
            v109 = *v87;
            if (!*v87)
              goto LABEL_150;
            v110 = (void *)v109[1];
            if (v110)
            {
              v109[2] = v110;
              operator delete(v110);
            }
            v93 = v109;
            v94 = 0x1080C409938AC02;
            goto LABEL_149;
          }
          break;
        case 4:
          v95 = (unint64_t *)*v87;
          do
          {
            v96 = __ldaxr(v95);
            v97 = v96 - 1;
          }
          while (__stlxr(v97, v95));
          if (!v97)
          {
            v98 = *v87;
            if (!*v87)
              goto LABEL_150;
            v147 = (turi::unity_sframe *)(v98 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
            goto LABEL_142;
          }
          break;
        case 5:
          v111 = (unint64_t *)*v87;
          do
          {
            v112 = __ldaxr(v111);
            v113 = v112 - 1;
          }
          while (__stlxr(v113, v111));
          if (!v113)
          {
            v98 = *v87;
            if (!*v87)
              goto LABEL_150;
            v147 = (turi::unity_sframe *)(v98 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
LABEL_142:
            v93 = v98;
            v94 = 0x1020C405E66F15BLL;
            goto LABEL_149;
          }
          break;
        case 8:
          v114 = (unint64_t *)*v87;
          do
          {
            v115 = __ldaxr(v114);
            v116 = v115 - 1;
          }
          while (__stlxr(v116, v114));
          if (!v116)
          {
            v117 = (unsigned int **)*v87;
            if (!*v87)
              goto LABEL_150;
            boost::detail::shared_count::~shared_count(v117 + 2);
            v93 = v117;
            v105 = -235920773;
            goto LABEL_148;
          }
          break;
        case 9:
          v99 = (unint64_t *)*v87;
          do
          {
            v100 = __ldaxr(v99);
            v101 = v100 - 1;
          }
          while (__stlxr(v101, v99));
          if (!v101)
          {
            v102 = *v87;
            if (*v87)
            {
              v103 = (void *)v102[6];
              if (v103)
              {
                v102[7] = v103;
                operator delete(v103);
              }
              v104 = (void *)v102[3];
              if (v104)
              {
                v102[4] = v104;
                operator delete(v104);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v102 + 1));
              v93 = v102;
              v105 = 2071181815;
LABEL_148:
              v94 = v105 | 0x1030C4000000000;
LABEL_149:
              MEMORY[0x219A19A08](v93, v94);
            }
LABEL_150:
            *v87 = 0;
          }
          break;
        default:
          break;
      }
      *(v88 - 2) = 0;
      *((_DWORD *)v88 - 2) = 0;
      *((_BYTE *)v88 - 4) = 0;
    }
    while (v87 != __p);
    if ((a6 & 1) == 0)
    {
      v118 = std::map<unsigned long,turi::flexible_type>::at(a7, &v149);
      v119 = v151;
      if ((unint64_t)v151 >= v152)
      {
        v124 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(&v150, (char *)v118);
      }
      else
      {
        *v151 = 0;
        *((_DWORD *)v119 + 2) = 0;
        *((_BYTE *)v119 + 12) = 0;
        if (v119 != v118)
        {
          v120 = *v118;
          *(_QWORD *)((char *)v119 + 5) = *(_QWORD *)((char *)v118 + 5);
          *v119 = v120;
          v121 = *((unsigned __int8 *)v118 + 12);
          *((_BYTE *)v119 + 12) = v121;
          if (v121 <= 9 && ((1 << v121) & 0x33C) != 0)
          {
            v122 = (unint64_t *)*v119;
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 + 1, v122));
          }
        }
        v124 = (uint64_t)(v119 + 2);
      }
      v151 = (_QWORD *)v124;
    }
    if (!__v.__end_cap_.__value_)
      std::__throw_bad_function_call[abi:ne180100]();
    (*((void (**)(std::string *, uint64_t *))__v.__end_cap_.__value_->__r_.__value_.__l.__data_ + 6))(__v.__end_cap_.__value_, &v150);
    v125 = ++v149;
  }
  while ((a6 & 1) == 0 && v125 != a1[1]);
  turi::sframe::close((turi::sframe *)v175);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v147);
  turi::unity_sframe::construct_from_sframe(v147, (const turi::sframe *)v175);
  __p[0] = v147;
  __p[1] = v148;
  if (v148)
  {
    p_shared_owners = (unint64_t *)&v148->__shared_owners_;
    do
      v127 = __ldxr(p_shared_owners);
    while (__stxr(v127 + 1, p_shared_owners));
  }
  turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)__p, a8);
  v128 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v129 = (unint64_t *)((char *)__p[1] + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v148;
  if (v148)
  {
    v132 = (unint64_t *)&v148->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v173;
  if (v173 == &v171)
  {
    v135 = 4;
    v134 = &v171;
  }
  else
  {
    if (!v173)
      goto LABEL_183;
    v135 = 5;
  }
  (*(void (**)(void))(*v134 + 8 * v135))();
LABEL_183:
  v136 = (std::__compressed_pair_elem<std::allocator<std::string> &, 1, false> *)v170;
  if (v170 == (std::__split_buffer<std::string> *)&__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>)
  {
    v137 = 4;
    v136 = &__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
  }
  else
  {
    if (!v170)
      goto LABEL_188;
    v137 = 5;
  }
  (*((void (**)(void))v136->__value_ + v137))();
LABEL_188:
  words = __v.__end_cap_.__value_->__r_.__value_.__r.__words;
  if ((std::__split_buffer<std::string> *)__v.__end_cap_.__value_ == &__v)
  {
    v139 = 4;
    words = &__v;
  }
  else
  {
    if (!__v.__end_cap_.__value_)
      goto LABEL_193;
    v139 = 5;
  }
  (*(void (**)(void))(*words + 8 * v139))();
LABEL_193:
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v150;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v153)
  {
    v154 = (char *)v153;
    operator delete(v153);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v156;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  turi::sframe::~sframe((turi::sframe *)v175);
}

void sub_218487FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__pa,uint64_t a29,std::__split_buffer<std::string> *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,...)
{
  va_list va;

  va_start(va, a52);
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a38);
  if (SHIBYTE(a30) < 0)
    operator delete(__pa);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  a21 = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  turi::sframe::~sframe((turi::sframe *)va);
  _Unwind_Resume(a1);
}

#error "218488170: call analysis failed (funcsize=5)"

void sub_218488178()
{
  JUMPOUT(0x21848815CLL);
}

uint64_t **std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    *((_DWORD *)v12 + 12) = 0;
    *((_BYTE *)v12 + 52) = 0;
    v15 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t turi::evaluation::roc_curve::roc_curve(uint64_t a1, uint64_t a2, turi::evaluation *a3, char a4, uint64_t a5)
{
  _QWORD *v9;

  *(_QWORD *)a1 = &unk_24D942C80;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 146) = 0u;
  *(_QWORD *)(a1 + 168) = 100000;
  *(_OWORD *)(a1 + 192) = 0u;
  v9 = (_QWORD *)(a1 + 192);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_BYTE *)(a1 + 160) = turi::evaluation::average_type_enum_from_name(a3, (const turi::flexible_type *)a2);
  *(_BYTE *)(a1 + 161) = a4;
  if (v9 != (_QWORD *)a2)
  {
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>(v9, *(_QWORD **)(a2 + 16), 0);
  }
  if (a5 == -1)
    a5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 184) = a5;
  return a1;
}

void sub_218488380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;

  v15 = *(void **)(v12 + 280);
  if (v15)
  {
    *(_QWORD *)(v12 + 288) = v15;
    operator delete(v15);
  }
  a10 = (void **)(v12 + 256);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v13);
  a10 = (void **)(v12 + 136);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v12 + 112);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v11);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v10);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::average_type_enum_from_name(turi::evaluation *this, const turi::flexible_type *a2)
{
  unsigned __int8 v3;
  unsigned __int8 *v4;
  unint64_t v7;
  uint64_t i;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  void **v87;
  _BYTE v88[13];
  _BYTE v89[13];
  _BYTE v90[13];
  _BYTE v91[13];
  char v92;
  _BYTE v93[13];
  char v94;
  _BYTE v95[13];
  char v96;
  _BYTE v97[13];
  char v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  if ((v3 & 1) == 0
  {
    *(_QWORD *)&v91[5] = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
    *(_QWORD *)v91 = turi::FLEX_UNDEFINED;
    v91[12] = byte_254FF478C;
    if (byte_254FF478C <= 9u && ((1 << byte_254FF478C) & 0x33C) != 0)
    {
      do
        v7 = __ldaxr(*(unint64_t **)v91);
      while (__stlxr(v7 + 1, *(unint64_t **)v91));
    }
    v92 = 0;
    turi::flexible_type::flexible_type((turi::flexible_type *)v90, "micro");
    *(_QWORD *)&v93[5] = *(_QWORD *)&v90[5];
    *(_QWORD *)v93 = *(_QWORD *)v90;
    v93[12] = v90[12];
    v90[12] = 0;
    v94 = 1;
    turi::flexible_type::flexible_type((turi::flexible_type *)v89, "default");
    *(_QWORD *)&v95[5] = *(_QWORD *)&v89[5];
    *(_QWORD *)v95 = *(_QWORD *)v89;
    v95[12] = v89[12];
    v89[12] = 0;
    v96 = 3;
    turi::flexible_type::flexible_type((turi::flexible_type *)v88, "macro");
    *(_QWORD *)&v97[5] = *(_QWORD *)&v88[5];
    *(_QWORD *)v97 = *(_QWORD *)v88;
    v97[12] = v88[12];
    v88[12] = 0;
    v98 = 2;
    std::unordered_map<turi::flexible_type,turi::evaluation::average_type_enum>::unordered_map((uint64_t)turi::evaluation::average_type_enum_from_name(turi::flexible_type const&)::type_map, v91, 4);
    for (i = 72; i != -24; i -= 24)
      std::pair<turi::flexible_type const,turi::evaluation::average_type_enum>::~pair((uint64_t)&v91[i]);
    switch(v88[12])
    {
      case 2:
        v9 = *(unint64_t **)v88;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = *(_QWORD **)v88;
          if (*(_QWORD *)v88)
          {
            if (*(char *)(*(_QWORD *)v88 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)v88 + 8));
            v13 = v12;
            v14 = 0x1012C404EF22A49;
            goto LABEL_50;
          }
        }
        break;
      case 3:
        v23 = *(unint64_t **)v88;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *(_QWORD **)v88;
          if (*(_QWORD *)v88)
          {
            v27 = *(void **)(*(_QWORD *)v88 + 8);
            if (v27)
            {
              *(_QWORD *)(*(_QWORD *)v88 + 16) = v27;
              operator delete(v27);
            }
            v13 = v26;
            v14 = 0x1080C409938AC02;
            goto LABEL_50;
          }
        }
        break;
      case 4:
        v15 = *(unint64_t **)v88;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(_QWORD **)v88;
          if (*(_QWORD *)v88)
          {
            v87 = (void **)(*(_QWORD *)v88 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v87);
            goto LABEL_43;
          }
        }
        break;
      case 5:
        v28 = *(unint64_t **)v88;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v18 = *(_QWORD **)v88;
          if (*(_QWORD *)v88)
          {
            v87 = (void **)(*(_QWORD *)v88 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v87);
LABEL_43:
            v13 = v18;
            v14 = 0x1020C405E66F15BLL;
            goto LABEL_50;
          }
        }
        break;
      case 8:
        v31 = *(unint64_t **)v88;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v34 = *(_QWORD **)v88;
          if (*(_QWORD *)v88)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v88 + 16));
            v13 = v34;
            v22 = -235920773;
            goto LABEL_49;
          }
        }
        break;
      case 9:
        v19 = *(unint64_t **)v88;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21 && *(_QWORD *)v88)
        {
          v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v88);
          v22 = 2071181815;
LABEL_49:
          v14 = v22 | 0x1030C4000000000;
LABEL_50:
          MEMORY[0x219A19A08](v13, v14);
        }
        break;
      default:
        break;
    }
    switch(v89[12])
    {
      case 2:
        v35 = *(unint64_t **)v89;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = *(_QWORD **)v89;
          if (*(_QWORD *)v89)
          {
            if (*(char *)(*(_QWORD *)v89 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)v89 + 8));
            v39 = v38;
            v40 = 0x1012C404EF22A49;
            goto LABEL_88;
          }
        }
        break;
      case 3:
        v49 = *(unint64_t **)v89;
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          v52 = *(_QWORD **)v89;
          if (*(_QWORD *)v89)
          {
            v53 = *(void **)(*(_QWORD *)v89 + 8);
            if (v53)
            {
              *(_QWORD *)(*(_QWORD *)v89 + 16) = v53;
              operator delete(v53);
            }
            v39 = v52;
            v40 = 0x1080C409938AC02;
            goto LABEL_88;
          }
        }
        break;
      case 4:
        v41 = *(unint64_t **)v89;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          v44 = *(_QWORD **)v89;
          if (*(_QWORD *)v89)
          {
            *(_QWORD *)v88 = *(_QWORD *)v89 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
            goto LABEL_81;
          }
        }
        break;
      case 5:
        v54 = *(unint64_t **)v89;
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          v44 = *(_QWORD **)v89;
          if (*(_QWORD *)v89)
          {
            *(_QWORD *)v88 = *(_QWORD *)v89 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
LABEL_81:
            v39 = v44;
            v40 = 0x1020C405E66F15BLL;
            goto LABEL_88;
          }
        }
        break;
      case 8:
        v57 = *(unint64_t **)v89;
        do
        {
          v58 = __ldaxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (!v59)
        {
          v60 = *(_QWORD **)v89;
          if (*(_QWORD *)v89)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v89 + 16));
            v39 = v60;
            v48 = -235920773;
            goto LABEL_87;
          }
        }
        break;
      case 9:
        v45 = *(unint64_t **)v89;
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47 && *(_QWORD *)v89)
        {
          v39 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v89);
          v48 = 2071181815;
LABEL_87:
          v40 = v48 | 0x1030C4000000000;
LABEL_88:
          MEMORY[0x219A19A08](v39, v40);
        }
        break;
      default:
        break;
    }
    switch(v90[12])
    {
      case 2:
        v61 = *(unint64_t **)v90;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          v64 = *(_QWORD **)v90;
          if (*(_QWORD *)v90)
          {
            if (*(char *)(*(_QWORD *)v90 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)v90 + 8));
            v65 = v64;
            v66 = 0x1012C404EF22A49;
            goto LABEL_126;
          }
        }
        break;
      case 3:
        v75 = *(unint64_t **)v90;
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (!v77)
        {
          v78 = *(_QWORD **)v90;
          if (*(_QWORD *)v90)
          {
            v79 = *(void **)(*(_QWORD *)v90 + 8);
            if (v79)
            {
              *(_QWORD *)(*(_QWORD *)v90 + 16) = v79;
              operator delete(v79);
            }
            v65 = v78;
            v66 = 0x1080C409938AC02;
            goto LABEL_126;
          }
        }
        break;
      case 4:
        v67 = *(unint64_t **)v90;
        do
        {
          v68 = __ldaxr(v67);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v67));
        if (!v69)
        {
          v70 = *(_QWORD **)v90;
          if (*(_QWORD *)v90)
          {
            *(_QWORD *)v89 = *(_QWORD *)v90 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
            goto LABEL_119;
          }
        }
        break;
      case 5:
        v80 = *(unint64_t **)v90;
        do
        {
          v81 = __ldaxr(v80);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, v80));
        if (!v82)
        {
          v70 = *(_QWORD **)v90;
          if (*(_QWORD *)v90)
          {
            *(_QWORD *)v89 = *(_QWORD *)v90 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
LABEL_119:
            v65 = v70;
            v66 = 0x1020C405E66F15BLL;
            goto LABEL_126;
          }
        }
        break;
      case 8:
        v83 = *(unint64_t **)v90;
        do
        {
          v84 = __ldaxr(v83);
          v85 = v84 - 1;
        }
        while (__stlxr(v85, v83));
        if (!v85)
        {
          v86 = *(_QWORD **)v90;
          if (*(_QWORD *)v90)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v90 + 16));
            v65 = v86;
            v74 = -235920773;
            goto LABEL_125;
          }
        }
        break;
      case 9:
        v71 = *(unint64_t **)v90;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73 && *(_QWORD *)v90)
        {
          v65 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v90);
          v74 = 2071181815;
LABEL_125:
          v66 = v74 | 0x1030C4000000000;
LABEL_126:
          MEMORY[0x219A19A08](v65, v66);
        }
        break;
      default:
        break;
    }
    __cxa_atexit((void (*)(void *))std::unordered_map<turi::flexible_type,turi::evaluation::average_type_enum>::~unordered_map[abi:ne180100], turi::evaluation::average_type_enum_from_name(turi::flexible_type const&)::type_map, &dword_217E69000);
  }
  v4 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(turi::evaluation::average_type_enum_from_name(turi::flexible_type const&)::type_map, (unsigned __int8 *)this);
  if (!v4)
  {
    *(_QWORD *)v91 = this;
    turi::evaluation::average_type_enum_from_name(turi::flexible_type const&)::{lambda(void)#1}::operator()((turi::flexible_type_impl **)v91);
    __break(1u);
  }
  return (char)v4[32];
}

void sub_218488AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, int a11, char a12, void **a13, int a14, char a15, _QWORD *a16, int a17, char a18)
{
  uint64_t v18;
  uint64_t i;
  unint64_t *v21;
  unint64_t v22;
  void **v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void **v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void **v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  void **v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  void **v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  void **v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  void **v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  void *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  unsigned int v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;

  for (i = 72; i != -24; i -= 24)
    std::pair<turi::flexible_type const,turi::evaluation::average_type_enum>::~pair(v18 + i);
  switch(a12)
  {
    case 2:
      v21 = (unint64_t *)a10;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (v22 != 1)
        goto LABEL_41;
      v23 = a10;
      if (!a10)
        goto LABEL_41;
      if (*((char *)a10 + 31) < 0)
        operator delete(a10[1]);
      v24 = v23;
      v25 = 0x1012C404EF22A49;
      break;
    case 3:
      v26 = (unint64_t *)a10;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (v27 != 1)
        goto LABEL_41;
      v28 = a10;
      if (!a10)
        goto LABEL_41;
      v29 = a10[1];
      if (v29)
      {
        a10[2] = v29;
        operator delete(v29);
      }
      v24 = v28;
      v25 = 0x1080C409938AC02;
      break;
    case 4:
      v30 = (unint64_t *)a10;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (v31 != 1)
        goto LABEL_41;
      v32 = a10;
      if (!a10)
        goto LABEL_41;
      a9 = a10 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
      goto LABEL_28;
    case 5:
      v33 = (unint64_t *)a10;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (v34 != 1)
        goto LABEL_41;
      v32 = a10;
      if (!a10)
        goto LABEL_41;
      a9 = a10 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
LABEL_28:
      v24 = v32;
      v25 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v35 = (unint64_t *)a10;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (v36 == 1)
      {
        v37 = a10;
        if (a10)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)a10 + 2);
          MEMORY[0x219A19A08](v37, 0x1030C40F1F0227BLL);
        }
        a10 = 0;
      }
      goto LABEL_41;
    case 9:
      v38 = (unint64_t *)a10;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (v39 != 1 || !a10)
        goto LABEL_41;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a10);
      v25 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_41;
  }
  MEMORY[0x219A19A08](v24, v25);
LABEL_41:
  switch(a15)
  {
    case 2:
      v40 = (unint64_t *)a13;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_79;
      v43 = a13;
      if (!a13)
        goto LABEL_79;
      if (*((char *)a13 + 31) < 0)
        operator delete(a13[1]);
      v44 = v43;
      v45 = 0x1012C404EF22A49;
      break;
    case 3:
      v46 = (unint64_t *)a13;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (v48)
        goto LABEL_79;
      v49 = a13;
      if (!a13)
        goto LABEL_79;
      v50 = a13[1];
      if (v50)
      {
        a13[2] = v50;
        operator delete(v50);
      }
      v44 = v49;
      v45 = 0x1080C409938AC02;
      break;
    case 4:
      v51 = (unint64_t *)a13;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (v53)
        goto LABEL_79;
      v54 = a13;
      if (!a13)
        goto LABEL_79;
      a10 = a13 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_66;
    case 5:
      v55 = (unint64_t *)a13;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (v57)
        goto LABEL_79;
      v54 = a13;
      if (!a13)
        goto LABEL_79;
      a10 = a13 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_66:
      v44 = v54;
      v45 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v58 = (unint64_t *)a13;
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        v61 = a13;
        if (a13)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)a13 + 2);
          MEMORY[0x219A19A08](v61, 0x1030C40F1F0227BLL);
        }
        a13 = 0;
      }
      goto LABEL_79;
    case 9:
      v62 = (unint64_t *)a13;
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (v64 || !a13)
        goto LABEL_79;
      v44 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a13);
      v45 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_79;
  }
  MEMORY[0x219A19A08](v44, v45);
LABEL_79:
  switch(a18)
  {
    case 2:
      v65 = a16;
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (v67)
        goto LABEL_117;
      v68 = a16;
      if (!a16)
        goto LABEL_117;
      if (*((char *)a16 + 31) < 0)
        operator delete((void *)a16[1]);
      v69 = v68;
      v70 = 0x1012C404EF22A49;
      goto LABEL_116;
    case 3:
      v71 = a16;
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (v73)
        goto LABEL_117;
      v74 = a16;
      if (!a16)
        goto LABEL_117;
      v75 = (void *)a16[1];
      if (v75)
      {
        a16[2] = v75;
        operator delete(v75);
      }
      v69 = v74;
      v70 = 0x1080C409938AC02;
      goto LABEL_116;
    case 4:
      v76 = a16;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (v78)
        goto LABEL_117;
      v79 = a16;
      if (!a16)
        goto LABEL_117;
      a13 = (void **)(a16 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a13);
      goto LABEL_104;
    case 5:
      v80 = a16;
      do
      {
        v81 = __ldaxr(v80);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v80));
      if (v82)
        goto LABEL_117;
      v79 = a16;
      if (!a16)
        goto LABEL_117;
      a13 = (void **)(a16 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a13);
LABEL_104:
      v69 = v79;
      v70 = 0x1020C405E66F15BLL;
      goto LABEL_116;
    case 8:
      v83 = a16;
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (v85)
        goto LABEL_117;
      v86 = a16;
      if (!a16)
        goto LABEL_117;
      boost::detail::shared_count::~shared_count((unsigned int **)a16 + 2);
      v69 = v86;
      v87 = -235920773;
      goto LABEL_115;
    case 9:
      v88 = a16;
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (v90 || !a16)
        goto LABEL_117;
      v69 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a16);
      v87 = 2071181815;
LABEL_115:
      v70 = v87 | 0x1030C4000000000;
LABEL_116:
      MEMORY[0x219A19A08](v69, v70);
LABEL_117:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_117;
  }
}

uint64_t std::unordered_map<turi::flexible_type,turi::evaluation::average_type_enum>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::evaluation::average_type_enum> const&>(a1, a2, a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_2184890F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::evaluation::average_type_enum> const&>(uint64_t a1, unsigned __int8 *a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>>>::__construct_node_hash<std::pair<turi::flexible_type const,turi::evaluation::average_type_enum> const&>(a1, v8, a3, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (unsigned __int8 *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_218489364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>>>::__construct_node_hash<std::pair<turi::flexible_type const,turi::evaluation::average_type_enum> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  unint64_t **v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;

  v7 = a1 + 16;
  result = operator new(0x28uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  result[2] = 0;
  v9 = (unint64_t **)(result + 2);
  *((_DWORD *)result + 6) = 0;
  *((_BYTE *)result + 28) = 0;
  if (result + 2 != (_QWORD *)a3)
  {
    *(_QWORD *)((char *)result + 21) = *(_QWORD *)(a3 + 5);
    *v9 = *(unint64_t **)a3;
    v10 = a3[12];
    *((_BYTE *)result + 28) = v10;
    if (v10 <= 9 && ((1 << v10) & 0x33C) != 0)
    {
      v11 = *v9;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
  }
  *((_BYTE *)result + 32) = a3[16];
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<turi::flexible_type const,turi::evaluation::average_type_enum>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::evaluation::average_type_enum>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<turi::flexible_type const,turi::evaluation::average_type_enum>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::pair<turi::flexible_type const,turi::evaluation::average_type_enum>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

void std::__shared_ptr_emplace<turi::evaluation::auc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942CF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::auc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942CF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::auc>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 std::allocator<turi::evaluation::auc>::construct[abi:ne180100]<turi::evaluation::auc,turi::evaluation::auc>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __n128 result;
  uint64_t v7;

  *(_QWORD *)a2 = &unk_24D942C80;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a2 + 8, (uint64_t *)(a3 + 8));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a2 + 48, (uint64_t *)(a3 + 48));
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  v5 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 176) = v5;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a2 + 192, (uint64_t *)(a3 + 192));
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_OWORD *)(a2 + 232) = *(_OWORD *)(a3 + 232);
  *(_QWORD *)(a2 + 248) = *(_QWORD *)(a3 + 248);
  *(_QWORD *)(a3 + 232) = 0;
  *(_QWORD *)(a3 + 240) = 0;
  *(_QWORD *)(a3 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  result = *(__n128 *)(a3 + 256);
  *(__n128 *)(a2 + 256) = result;
  *(_QWORD *)(a2 + 272) = *(_QWORD *)(a3 + 272);
  *(_QWORD *)(a3 + 256) = 0;
  *(_QWORD *)(a3 + 264) = 0;
  *(_QWORD *)(a3 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  v7 = *(_QWORD *)(a3 + 288);
  *(_QWORD *)(a2 + 280) = *(_QWORD *)(a3 + 280);
  *(_QWORD *)(a2 + 288) = v7;
  *(_QWORD *)(a2 + 296) = *(_QWORD *)(a3 + 296);
  *(_QWORD *)(a3 + 280) = 0;
  *(_QWORD *)(a3 + 288) = 0;
  *(_QWORD *)(a3 + 296) = 0;
  *(_QWORD *)a2 = &unk_24D942D40;
  return result;
}

_QWORD *turi::evaluation::auc::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "auc");
}

BOOL turi::evaluation::auc::is_table_printer_compatible(turi::evaluation::auc *this)
{
  return *((_BYTE *)this + 160) != 0;
}

void turi::evaluation::auc::get_metric(turi::evaluation::auc *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  double v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  double v21;
  double v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  double v33;
  double v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t **v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  void *v60;
  void *v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t *v75;
  BOOL v76;
  int v77;
  unint64_t *v79;
  unint64_t v80;
  uint64_t **v81;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  double v93;
  double v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  double v100;
  _QWORD *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  unsigned int v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  double v132;
  _QWORD *v133[2];
  _QWORD *v134;
  _QWORD v135[2];
  _OWORD v136[2];
  int v137;
  _BYTE v138[13];
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  turi::evaluation::roc_curve::gather_global_metrics(this);
  v4 = *((_QWORD *)this + 21);
  v5 = *((_QWORD *)this + 23);
  if (v5 != 2)
  {
    if (*((unsigned __int8 *)this + 160) - 2 < 2)
    {
      if (!v5)
      {
        v14 = 0.0;
LABEL_149:
        v132 = v14 / (double)v5;
        turi::flexible_type_converter<double>::set(&v132, (uint64_t)v136);
        goto LABEL_150;
      }
      v11 = 0;
      v12 = (uint64_t *)*((_QWORD *)this + 35);
      v13 = (uint64_t *)*((_QWORD *)this + 36);
      v14 = 0.0;
      while (1)
      {
        if (v12 == v13)
        {
          v15 = 0;
          if (v4 != 1)
            goto LABEL_13;
        }
        else
        {
          v15 = 0;
          v16 = (uint64_t *)*((_QWORD *)this + 35);
          do
          {
            v17 = *v16++;
            v15 += v17;
          }
          while (v16 != v13);
          if (v4 != 1)
          {
LABEL_13:
            v18 = 0;
            v19 = *(uint64_t **)(*((_QWORD *)this + 29) + 24 * v11);
            v20 = v12[v11];
            v21 = (double)(v15 - v20);
            v22 = (double)v20;
            v25 = *v19;
            v23 = v19 + 1;
            v24 = v25;
            v26 = 0.0;
            do
            {
              v27 = v23[v18];
              v28 = (double)(unint64_t)(v24 - v27) / v21;
              if (v28 > 1.0e-10)
              {
                v29 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 24 * v11) + 8 * v18);
                v26 = v26 + v28 * ((double)(unint64_t)(v29[1] + *v29) * 0.5) / v22;
              }
              ++v18;
              v24 = v27;
            }
            while (v4 - 1 != v18);
            goto LABEL_20;
          }
        }
        v26 = 0.0;
LABEL_20:
        v14 = v14 + v26;
        if (++v11 == v5)
          goto LABEL_149;
      }
    }
    if (*((_BYTE *)this + 160))
      turi::evaluation::auc::get_metric(void)::{lambda(void)#1}::operator()();
    v133[0] = 0;
    v133[1] = 0;
    v132 = COERCE_DOUBLE(v133);
    v42 = (uint64_t *)*((_QWORD *)this + 26);
    if (v42)
    {
      do
      {
        *(_QWORD *)&v136[0] = v42 + 4;
        v43 = std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v132, (unint64_t *)v42 + 4, (uint64_t)&std::piecewise_construct, (_QWORD **)v136);
        v44 = v43;
        v45 = v43 + 5;
        if (v42 + 2 != (uint64_t *)(v43 + 5))
        {
          switch(*((_BYTE *)v43 + 52))
          {
            case 2:
              v46 = (unint64_t *)*v45;
              do
              {
                v47 = __ldaxr(v46);
                v48 = v47 - 1;
              }
              while (__stlxr(v48, v46));
              if (!v48)
              {
                v49 = (unint64_t *)*v45;
                if (!*v45)
                  goto LABEL_76;
                if (*((char *)v49 + 31) < 0)
                  operator delete((void *)v49[1]);
                v50 = v49;
                v51 = 0x1012C404EF22A49;
                goto LABEL_75;
              }
              break;
            case 3:
              v63 = (unint64_t *)*v45;
              do
              {
                v64 = __ldaxr(v63);
                v65 = v64 - 1;
              }
              while (__stlxr(v65, v63));
              if (!v65)
              {
                v66 = (unint64_t *)*v45;
                if (!*v45)
                  goto LABEL_76;
                v67 = (void *)v66[1];
                if (v67)
                {
                  v66[2] = (unint64_t)v67;
                  operator delete(v67);
                }
                v50 = v66;
                v51 = 0x1080C409938AC02;
                goto LABEL_75;
              }
              break;
            case 4:
              v52 = (unint64_t *)*v45;
              do
              {
                v53 = __ldaxr(v52);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, v52));
              if (!v54)
              {
                v55 = (unint64_t *)*v45;
                if (!*v45)
                  goto LABEL_76;
                *(_QWORD *)&v136[0] = v55 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
                goto LABEL_68;
              }
              break;
            case 5:
              v68 = (unint64_t *)*v45;
              do
              {
                v69 = __ldaxr(v68);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, v68));
              if (!v70)
              {
                v55 = (unint64_t *)*v45;
                if (!*v45)
                  goto LABEL_76;
                *(_QWORD *)&v136[0] = v55 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
LABEL_68:
                v50 = v55;
                v51 = 0x1020C405E66F15BLL;
                goto LABEL_75;
              }
              break;
            case 8:
              v71 = (unint64_t *)*v45;
              do
              {
                v72 = __ldaxr(v71);
                v73 = v72 - 1;
              }
              while (__stlxr(v73, v71));
              if (!v73)
              {
                v74 = (unint64_t *)*v45;
                if (!*v45)
                  goto LABEL_76;
                boost::detail::shared_count::~shared_count((unsigned int **)v74 + 2);
                v50 = v74;
                v62 = -235920773;
                goto LABEL_74;
              }
              break;
            case 9:
              v56 = (unint64_t *)*v45;
              do
              {
                v57 = __ldaxr(v56);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, v56));
              if (!v58)
              {
                v59 = (unint64_t *)*v45;
                if (*v45)
                {
                  v60 = (void *)v59[6];
                  if (v60)
                  {
                    v59[7] = (unint64_t)v60;
                    operator delete(v60);
                  }
                  v61 = (void *)v59[3];
                  if (v61)
                  {
                    v59[4] = (unint64_t)v61;
                    operator delete(v61);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v59 + 1));
                  v50 = v59;
                  v62 = 2071181815;
LABEL_74:
                  v51 = v62 | 0x1030C4000000000;
LABEL_75:
                  MEMORY[0x219A19A08](v50, v51);
                }
LABEL_76:
                *v45 = 0;
              }
              break;
            default:
              break;
          }
          v75 = (uint64_t *)v42[2];
          *(uint64_t **)((char *)v45 + 5) = *(uint64_t **)((char *)v42 + 21);
          *v45 = v75;
          LODWORD(v75) = *((unsigned __int8 *)v42 + 28);
          *((_BYTE *)v44 + 52) = (_BYTE)v75;
          v76 = v75 > 9;
          v77 = (1 << (char)v75) & 0x33C;
          if (!v76 && v77 != 0)
          {
            v79 = (unint64_t *)*v45;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 + 1, v79));
          }
        }
        v42 = (uint64_t *)*v42;
      }
      while (v42);
      v5 = *((_QWORD *)this + 23);
    }
    memset(v136, 0, sizeof(v136));
    v137 = 1065353216;
    v131 = 0;
    if (!v5)
    {
LABEL_147:
      turi::flexible_type_converter<std::unordered_map<turi::flexible_type,double>>::set((uint64_t)v136, (uint64_t)v138);
      *(_QWORD *)(a2 + 13) = *(_QWORD *)&v138[5];
      *(_QWORD *)(a2 + 8) = *(_QWORD *)v138;
      *(_BYTE *)(a2 + 20) = v138[12];
      *(_DWORD *)a2 = 0;
      std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::~__hash_table((uint64_t)v136);
      std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v132, v133[0]);
      return;
    }
    while (1)
    {
      *(_QWORD *)v138 = &v131;
      v81 = std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v132, &v131, (uint64_t)&std::piecewise_construct, (_QWORD **)v138);
      memset(v135, 0, 13);
      if (v81 + 5 != v135)
      {
        *(_QWORD *)((char *)v135 + 5) = *(uint64_t **)((char *)v81 + 45);
        v135[0] = v81[5];
        BYTE4(v135[1]) = *((_BYTE *)v81 + 52);
        if (BYTE4(v135[1]) <= 9u && ((1 << SBYTE4(v135[1])) & 0x33C) != 0)
        {
          v83 = (unint64_t *)v135[0];
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 + 1, v83));
        }
      }
      v86 = (uint64_t *)*((_QWORD *)this + 35);
      v85 = (uint64_t *)*((_QWORD *)this + 36);
      if (v86 == v85)
      {
        v87 = 0;
        if (v4 != 1)
          goto LABEL_97;
      }
      else
      {
        v87 = 0;
        v88 = (uint64_t *)*((_QWORD *)this + 35);
        do
        {
          v89 = *v88++;
          v87 += v89;
        }
        while (v88 != v85);
        if (v4 != 1)
        {
LABEL_97:
          v90 = 0;
          v91 = *(uint64_t **)(*((_QWORD *)this + 29) + 24 * v131);
          v92 = v86[v131];
          v93 = (double)(v87 - v92);
          v94 = (double)v92;
          v97 = *v91;
          v95 = v91 + 1;
          v96 = v97;
          v98 = 0.0;
          do
          {
            v99 = v95[v90];
            v100 = (double)(unint64_t)(v96 - v99) / v93;
            if (v100 > 1.0e-10)
            {
              v101 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 24 * v131) + 8 * v90);
              v98 = v98 + v100 * ((double)(unint64_t)(v101[1] + *v101) * 0.5) / v94;
            }
            ++v90;
            v96 = v99;
          }
          while (v4 - 1 != v90);
          goto LABEL_104;
        }
      }
      v98 = 0.0;
LABEL_104:
      v134 = v135;
      *((double *)std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v136, (unsigned __int8 *)v135, (uint64_t)&std::piecewise_construct, (void **)&v134)+ 4) = v98;
      switch(BYTE4(v135[1]))
      {
        case 2:
          v102 = (unint64_t *)v135[0];
          do
          {
            v103 = __ldaxr(v102);
            v104 = v103 - 1;
          }
          while (__stlxr(v104, v102));
          if (!v104)
          {
            v105 = v135[0];
            if (v135[0])
            {
              if (*(char *)(v135[0] + 31) < 0)
                operator delete(*(void **)(v135[0] + 8));
              v106 = v105;
              v107 = 0x1012C404EF22A49;
              goto LABEL_145;
            }
          }
          break;
        case 3:
          v119 = (unint64_t *)v135[0];
          do
          {
            v120 = __ldaxr(v119);
            v121 = v120 - 1;
          }
          while (__stlxr(v121, v119));
          if (!v121)
          {
            v122 = v135[0];
            if (v135[0])
            {
              v123 = *(void **)(v135[0] + 8);
              if (v123)
              {
                *(_QWORD *)(v135[0] + 16) = v123;
                operator delete(v123);
              }
              v106 = v122;
              v107 = 0x1080C409938AC02;
              goto LABEL_145;
            }
          }
          break;
        case 4:
          v108 = (unint64_t *)v135[0];
          do
          {
            v109 = __ldaxr(v108);
            v110 = v109 - 1;
          }
          while (__stlxr(v110, v108));
          if (!v110)
          {
            v111 = v135[0];
            if (v135[0])
            {
              *(_QWORD *)v138 = v135[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
              goto LABEL_138;
            }
          }
          break;
        case 5:
          v124 = (unint64_t *)v135[0];
          do
          {
            v125 = __ldaxr(v124);
            v126 = v125 - 1;
          }
          while (__stlxr(v126, v124));
          if (!v126)
          {
            v111 = v135[0];
            if (v135[0])
            {
              *(_QWORD *)v138 = v135[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
LABEL_138:
              v106 = v111;
              v107 = 0x1020C405E66F15BLL;
              goto LABEL_145;
            }
          }
          break;
        case 8:
          v127 = (unint64_t *)v135[0];
          do
          {
            v128 = __ldaxr(v127);
            v129 = v128 - 1;
          }
          while (__stlxr(v129, v127));
          if (!v129)
          {
            v130 = v135[0];
            if (v135[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v135[0] + 16));
              v106 = v130;
              v118 = -235920773;
              goto LABEL_144;
            }
          }
          break;
        case 9:
          v112 = (unint64_t *)v135[0];
          do
          {
            v113 = __ldaxr(v112);
            v114 = v113 - 1;
          }
          while (__stlxr(v114, v112));
          if (!v114)
          {
            v115 = v135[0];
            if (v135[0])
            {
              v116 = *(void **)(v135[0] + 48);
              if (v116)
              {
                *(_QWORD *)(v135[0] + 56) = v116;
                operator delete(v116);
              }
              v117 = *(void **)(v115 + 24);
              if (v117)
              {
                *(_QWORD *)(v115 + 32) = v117;
                operator delete(v117);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v115 + 8);
              v106 = v115;
              v118 = 2071181815;
LABEL_144:
              v107 = v118 | 0x1030C4000000000;
LABEL_145:
              MEMORY[0x219A19A08](v106, v107);
            }
          }
          break;
        default:
          break;
      }
      if (++v131 >= *((_QWORD *)this + 23))
        goto LABEL_147;
    }
  }
  v7 = (uint64_t *)*((_QWORD *)this + 35);
  v6 = (uint64_t *)*((_QWORD *)this + 36);
  if (v7 == v6)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = (uint64_t *)*((_QWORD *)this + 35);
    do
    {
      v10 = *v9++;
      v8 += v10;
    }
    while (v9 != v6);
  }
  if (v4 == 1)
  {
    v38 = 0.0;
  }
  else
  {
    v30 = 0;
    v31 = *(uint64_t **)(*((_QWORD *)this + 29) + 24);
    v32 = v7[1];
    v33 = (double)(v8 - v32);
    v34 = (double)v32;
    v37 = *v31;
    v35 = v31 + 1;
    v36 = v37;
    v38 = 0.0;
    do
    {
      v39 = v35[v30];
      v40 = (double)(unint64_t)(v36 - v39) / v33;
      if (v40 > 1.0e-10)
      {
        v41 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 24) + 8 * v30);
        v38 = v38 + v40 * ((double)(unint64_t)(v41[1] + *v41) * 0.5) / v34;
      }
      ++v30;
      v36 = v39;
    }
    while (v4 - 1 != v30);
  }
  v132 = v38;
  turi::flexible_type_converter<double>::set(&v132, (uint64_t)v136);
LABEL_150:
  *(_QWORD *)(a2 + 13) = *(_QWORD *)((char *)v136 + 5);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)&v136[0];
  *(_BYTE *)(a2 + 20) = BYTE12(v136[0]);
  *(_DWORD *)a2 = 0;
}

void sub_21848A214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::~__hash_table((uint64_t)va1);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(a1, v9, a4, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,double>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,double>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_21848A5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,double>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,double>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,double>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,double>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<turi::flexible_type const,double>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::pair<turi::flexible_type const,double>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

void turi::flexible_type_converter<std::unordered_map<turi::flexible_type,double>>::set(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<9>::set<std::unordered_map<turi::flexible_type,double>>((uint64_t *)a2, a1);
}

void sub_21848A84C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type_converter<std::unordered_map<turi::flexible_type,double>>::set((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type_converter<std::unordered_map<turi::flexible_type,double>>::set((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<9>::set<std::unordered_map<turi::flexible_type,double>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  void *v81;
  void *v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  _QWORD *v97;
  void **v98;
  _QWORD *v99;
  unint64_t *v100;
  std::string *v101;
  __int128 v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  _QWORD *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  __int128 v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  __int128 v133;
  unint64_t v134;
  void **v135[2];
  _QWORD v136[2];
  _QWORD v137[2];
  _BYTE v138[13];
  _BYTE v139[13];
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v133 = 0uLL;
  v134 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v133, *(_QWORD *)(a2 + 24));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    memset(v137, 0, 13);
    turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v137, i + 2);
    memset(v136, 0, 13);
    turi::flexible_type::operator=<double>((uint64_t)v136, i + 4);
    *(_QWORD *)&v138[5] = *(_QWORD *)((char *)v137 + 5);
    *(_QWORD *)v138 = v137[0];
    v138[12] = BYTE4(v137[1]);
    BYTE4(v137[1]) = 0;
    *(_QWORD *)&v139[5] = *(_QWORD *)((char *)v136 + 5);
    *(_QWORD *)v139 = v136[0];
    v139[12] = BYTE4(v136[1]);
    BYTE4(v136[1]) = 0;
    v5 = *((_QWORD *)&v133 + 1);
    if (*((_QWORD *)&v133 + 1) >= v134)
    {
      v8 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v133, (uint64_t *)v138);
    }
    else
    {
      **((_QWORD **)&v133 + 1) = 0;
      *(_DWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 12) = 0;
      v6 = *(_QWORD *)v138;
      *(_QWORD *)(v5 + 5) = *(_QWORD *)&v138[5];
      *(_QWORD *)v5 = v6;
      *(_BYTE *)(v5 + 12) = v138[12];
      v138[12] = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 28) = 0;
      v7 = *(_QWORD *)v139;
      *(_QWORD *)(v5 + 21) = *(_QWORD *)&v139[5];
      *(_QWORD *)(v5 + 16) = v7;
      *(_BYTE *)(v5 + 28) = v139[12];
      v139[12] = 0;
      v8 = v5 + 32;
    }
    *((_QWORD *)&v133 + 1) = v8;
    std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v138);
    switch(BYTE4(v136[1]))
    {
      case 2:
        v9 = (unint64_t *)v136[0];
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = v136[0];
          if (v136[0])
          {
            if (*(char *)(v136[0] + 31) < 0)
              operator delete(*(void **)(v136[0] + 8));
            v13 = v12;
            v14 = 0x1012C404EF22A49;
            goto LABEL_46;
          }
        }
        break;
      case 3:
        v26 = (unint64_t *)v136[0];
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v29 = v136[0];
          if (v136[0])
          {
            v30 = *(void **)(v136[0] + 8);
            if (v30)
            {
              *(_QWORD *)(v136[0] + 16) = v30;
              operator delete(v30);
            }
            v13 = v29;
            v14 = 0x1080C409938AC02;
            goto LABEL_46;
          }
        }
        break;
      case 4:
        v15 = (unint64_t *)v136[0];
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = v136[0];
          if (v136[0])
          {
            v135[0] = (void **)(v136[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v135);
            goto LABEL_39;
          }
        }
        break;
      case 5:
        v31 = (unint64_t *)v136[0];
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v18 = v136[0];
          if (v136[0])
          {
            v135[0] = (void **)(v136[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v135);
LABEL_39:
            v13 = v18;
            v14 = 0x1020C405E66F15BLL;
            goto LABEL_46;
          }
        }
        break;
      case 8:
        v34 = (unint64_t *)v136[0];
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v37 = v136[0];
          if (v136[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v136[0] + 16));
            v13 = v37;
            v25 = -235920773;
            goto LABEL_45;
          }
        }
        break;
      case 9:
        v19 = (unint64_t *)v136[0];
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = v136[0];
          if (v136[0])
          {
            v23 = *(void **)(v136[0] + 48);
            if (v23)
            {
              *(_QWORD *)(v136[0] + 56) = v23;
              operator delete(v23);
            }
            v24 = *(void **)(v22 + 24);
            if (v24)
            {
              *(_QWORD *)(v22 + 32) = v24;
              operator delete(v24);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
            v13 = v22;
            v25 = 2071181815;
LABEL_45:
            v14 = v25 | 0x1030C4000000000;
LABEL_46:
            MEMORY[0x219A19A08](v13, v14);
          }
        }
        break;
      default:
        break;
    }
    switch(BYTE4(v137[1]))
    {
      case 2:
        v38 = (unint64_t *)v137[0];
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          v41 = v137[0];
          if (v137[0])
          {
            if (*(char *)(v137[0] + 31) < 0)
              operator delete(*(void **)(v137[0] + 8));
            v42 = v41;
            v43 = 0x1012C404EF22A49;
            goto LABEL_88;
          }
        }
        break;
      case 3:
        v55 = (unint64_t *)v137[0];
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          v58 = v137[0];
          if (v137[0])
          {
            v59 = *(void **)(v137[0] + 8);
            if (v59)
            {
              *(_QWORD *)(v137[0] + 16) = v59;
              operator delete(v59);
            }
            v42 = v58;
            v43 = 0x1080C409938AC02;
            goto LABEL_88;
          }
        }
        break;
      case 4:
        v44 = (unint64_t *)v137[0];
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          v47 = v137[0];
          if (v137[0])
          {
            v135[0] = (void **)(v137[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v135);
            goto LABEL_81;
          }
        }
        break;
      case 5:
        v60 = (unint64_t *)v137[0];
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          v47 = v137[0];
          if (v137[0])
          {
            v135[0] = (void **)(v137[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v135);
LABEL_81:
            v42 = v47;
            v43 = 0x1020C405E66F15BLL;
            goto LABEL_88;
          }
        }
        break;
      case 8:
        v63 = (unint64_t *)v137[0];
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          v66 = v137[0];
          if (v137[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v137[0] + 16));
            v42 = v66;
            v54 = -235920773;
            goto LABEL_87;
          }
        }
        break;
      case 9:
        v48 = (unint64_t *)v137[0];
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          v51 = v137[0];
          if (v137[0])
          {
            v52 = *(void **)(v137[0] + 48);
            if (v52)
            {
              *(_QWORD *)(v137[0] + 56) = v52;
              operator delete(v52);
            }
            v53 = *(void **)(v51 + 24);
            if (v53)
            {
              *(_QWORD *)(v51 + 32) = v53;
              operator delete(v53);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v51 + 8);
            v42 = v51;
            v54 = 2071181815;
LABEL_87:
            v43 = v54 | 0x1030C4000000000;
LABEL_88:
            MEMORY[0x219A19A08](v42, v43);
          }
        }
        break;
      default:
        continue;
    }
  }
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v67 = (unint64_t *)*a1;
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        v70 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        if (*((char *)v70 + 31) < 0)
          operator delete((void *)v70[1]);
        v71 = v70;
        v72 = 0x1012C404EF22A49;
        goto LABEL_131;
      }
      break;
    case 3:
      v84 = (unint64_t *)*a1;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        v88 = (void *)v87[1];
        if (v88)
        {
          v87[2] = (unint64_t)v88;
          operator delete(v88);
        }
        v71 = v87;
        v72 = 0x1080C409938AC02;
        goto LABEL_131;
      }
      break;
    case 4:
      v73 = (unint64_t *)*a1;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        v76 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        *(_QWORD *)v138 = v76 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
        goto LABEL_124;
      }
      break;
    case 5:
      v89 = (unint64_t *)*a1;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v76 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        *(_QWORD *)v138 = v76 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
LABEL_124:
        v71 = v76;
        v72 = 0x1020C405E66F15BLL;
        goto LABEL_131;
      }
      break;
    case 8:
      v92 = (unint64_t *)*a1;
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        boost::detail::shared_count::~shared_count((unsigned int **)v95 + 2);
        v71 = v95;
        v83 = -235920773;
        goto LABEL_130;
      }
      break;
    case 9:
      v77 = (unint64_t *)*a1;
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        v80 = (unint64_t *)*a1;
        if (*a1)
        {
          v81 = (void *)v80[6];
          if (v81)
          {
            v80[7] = (unint64_t)v81;
            operator delete(v81);
          }
          v82 = (void *)v80[3];
          if (v82)
          {
            v80[4] = (unint64_t)v82;
            operator delete(v82);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v80 + 1));
          v71 = v80;
          v83 = 2071181815;
LABEL_130:
          v72 = v83 | 0x1030C4000000000;
LABEL_131:
          MEMORY[0x219A19A08](v71, v72);
        }
LABEL_132:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 5;
  v96 = (_QWORD *)operator new();
  v97 = v96;
  *v96 = 0;
  v96[1] = 0;
  v98 = (void **)(v96 + 1);
  v96[2] = 0;
  v96[3] = 0;
  *a1 = (uint64_t)v96;
  *v96 = 1;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v96 != 1)
      {
        v99 = (_QWORD *)operator new();
        v100 = (unint64_t *)*a1;
        *v99 = *(_QWORD *)*a1;
        v101 = (std::string *)(v99 + 1);
        if (*((char *)v100 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v101, (const std::string::value_type *)v100[1], v100[2]);
        }
        else
        {
          v102 = *(_OWORD *)(v100 + 1);
          v99[3] = v100[3];
          *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v102;
        }
        *a1 = (uint64_t)v99;
        *v99 = 1;
        do
        {
          v130 = __ldaxr(v97);
          v131 = v130 - 1;
        }
        while (__stlxr(v131, v97));
        if (!v131)
        {
          v107 = 0x1012C404EF22A49;
          if ((*((char *)v97 + 31) & 0x80000000) == 0)
            goto LABEL_173;
          v108 = *v98;
          goto LABEL_172;
        }
      }
      break;
    case 3:
      if (*v96 != 1)
      {
        v103 = (_QWORD *)operator new();
        v104 = (unint64_t *)*a1;
        *v103 = *(_QWORD *)*a1;
        v103[2] = 0;
        v103[3] = 0;
        v103[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v103 + 1, (const void *)v104[1], v104[2], (uint64_t)(v104[2] - v104[1]) >> 3);
        *a1 = (uint64_t)v103;
        *v103 = 1;
        do
        {
          v105 = __ldaxr(v97);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, v97));
        if (!v106)
        {
          v107 = 0x1080C409938AC02;
          v108 = *v98;
          if (*v98)
          {
            v97[2] = v108;
LABEL_172:
            operator delete(v108);
          }
          goto LABEL_173;
        }
      }
      break;
    case 4:
      if (*v96 != 1)
      {
        v109 = (_QWORD *)operator new();
        v110 = (unint64_t *)*a1;
        *v109 = *(_QWORD *)*a1;
        v109[2] = 0;
        v109[3] = 0;
        v109[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v109 + 1, (uint64_t *)v110[1], (uint64_t *)v110[2], (uint64_t)(v110[2] - v110[1]) >> 4);
        *a1 = (uint64_t)v109;
        *v109 = 1;
        do
        {
          v111 = __ldaxr(v97);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v97));
        if (!v112)
        {
          v107 = 0x1020C405E66F15BLL;
          *(_QWORD *)v138 = v98;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
          goto LABEL_173;
        }
      }
      break;
    case 5:
      if (*v96 != 1)
      {
        v113 = (_QWORD *)operator new();
        v114 = (unint64_t *)*a1;
        *v113 = *(_QWORD *)*a1;
        v113[2] = 0;
        v113[3] = 0;
        v113[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v113 + 1, (uint64_t *)v114[1], (uint64_t *)v114[2], (uint64_t)(v114[2] - v114[1]) >> 5);
        *a1 = (uint64_t)v113;
        *v113 = 1;
        do
        {
          v115 = __ldaxr(v97);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, v97));
        if (!v116)
        {
          v107 = 0x1020C405E66F15BLL;
          *(_QWORD *)v138 = v98;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
          goto LABEL_173;
        }
      }
      break;
    case 8:
      if (*v96 != 1)
      {
        v117 = operator new();
        v118 = (unint64_t *)*a1;
        *(_QWORD *)v117 = *(_QWORD *)*a1;
        *(_QWORD *)(v117 + 8) = v118[1];
        v119 = v118[2];
        *(_QWORD *)(v117 + 16) = v119;
        if (v119)
        {
          v120 = (unsigned int *)(v119 + 8);
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
        }
        v122 = *(_OWORD *)(v118 + 3);
        v123 = *(_OWORD *)(v118 + 5);
        *(_OWORD *)(v117 + 56) = *(_OWORD *)(v118 + 7);
        *(_OWORD *)(v117 + 40) = v123;
        *(_OWORD *)(v117 + 24) = v122;
        *a1 = v117;
        *(_QWORD *)v117 = 1;
        do
        {
          v124 = __ldaxr(v97);
          v125 = v124 - 1;
        }
        while (__stlxr(v125, v97));
        if (!v125)
        {
          v107 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v97 + 2);
          goto LABEL_173;
        }
      }
      break;
    case 9:
      if (*v96 != 1)
      {
        v126 = (_QWORD *)operator new();
        v127 = *a1 + 8;
        *v126 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
        *a1 = (uint64_t)v126;
        *v126 = 1;
        do
        {
          v128 = __ldaxr(v97);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, v97));
        if (!v129)
        {
          v107 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v97);
LABEL_173:
          MEMORY[0x219A19A08](v97, v107);
        }
      }
      break;
    default:
      break;
  }
  v132 = (unint64_t *)*a1;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)v132 + 1);
  *(_OWORD *)(v132 + 1) = v133;
  v132[3] = v134;
  v133 = 0uLL;
  v134 = 0;
  *(_QWORD *)v138 = &v133;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
}

void sub_21848B3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  MEMORY[0x219A19A08](v18, 0x1012C404EF22A49);
  a18 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<turi::flexible_type const,double>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t turi::evaluation::auc::auc(uint64_t a1, uint64_t a2, turi::evaluation *a3, char a4, uint64_t a5)
{
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  const turi::flexible_type *v41;
  _OWORD v43[2];
  int v44;
  void **v45;
  unint64_t *v46[3];

  v46[2] = *(unint64_t **)MEMORY[0x24BDAC8D0];
  memset(v43, 0, sizeof(v43));
  v44 = 1065353216;
  *(unint64_t **)((char *)v46 + 5) = *(unint64_t **)((char *)&turi::FLEX_UNDEFINED + 5);
  v46[0] = (unint64_t *)turi::FLEX_UNDEFINED;
  BYTE4(v46[1]) = byte_254FF478C;
  if (byte_254FF478C <= 9u && ((1 << byte_254FF478C) & 0x33C) != 0)
  {
    do
      v11 = __ldaxr(v46[0]);
    while (__stlxr(v11 + 1, v46[0]));
  }
  turi::evaluation::roc_curve::roc_curve(a1, (uint64_t)v43, (turi::evaluation *)v46, 1, -1);
  switch(BYTE4(v46[1]))
  {
    case 2:
      v12 = v46[0];
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = v46[0];
        if (v46[0])
        {
          if (*((char *)v46[0] + 31) < 0)
            operator delete(*((void **)v46[0] + 1));
          v16 = v15;
          v17 = 0x1012C404EF22A49;
          goto LABEL_47;
        }
      }
      break;
    case 3:
      v18 = v46[0];
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = v46[0];
        if (v46[0])
        {
          v22 = (void *)v46[0][1];
          if (v22)
          {
            v46[0][2] = (unint64_t)v22;
            operator delete(v22);
          }
          v16 = v21;
          v17 = 0x1080C409938AC02;
          goto LABEL_47;
        }
      }
      break;
    case 4:
      v23 = v46[0];
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = v46[0];
        if (v46[0])
        {
          v45 = (void **)(v46[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v45);
          goto LABEL_31;
        }
      }
      break;
    case 5:
      v27 = v46[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v26 = v46[0];
        if (v46[0])
        {
          v45 = (void **)(v46[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v45);
LABEL_31:
          v16 = v26;
          v17 = 0x1020C405E66F15BLL;
          goto LABEL_47;
        }
      }
      break;
    case 8:
      v37 = v46[0];
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = v46[0];
        if (v46[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v46[0] + 2);
          v16 = v40;
          v36 = -235920773;
          goto LABEL_46;
        }
      }
      break;
    case 9:
      v30 = v46[0];
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = v46[0];
        if (v46[0])
        {
          v34 = (void *)v46[0][6];
          if (v34)
          {
            v46[0][7] = (unint64_t)v34;
            operator delete(v34);
          }
          v35 = (void *)v33[3];
          if (v35)
          {
            v33[4] = (unint64_t)v35;
            operator delete(v35);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
          v16 = v33;
          v36 = 2071181815;
LABEL_46:
          v17 = v36 | 0x1030C4000000000;
LABEL_47:
          MEMORY[0x219A19A08](v16, v17);
        }
      }
      break;
    default:
      break;
  }
  memset(v46, 0, 13);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v43);
  *(_QWORD *)a1 = &unk_24D942D40;
  *(_BYTE *)(a1 + 160) = turi::evaluation::average_type_enum_from_name(a3, v41);
  *(_BYTE *)(a1 + 161) = a4;
  if (a1 + 192 != a2)
  {
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>((_QWORD *)(a1 + 192), *(_QWORD **)(a2 + 16), 0);
  }
  if (a5 == -1)
    a5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 184) = a5;
  return a1;
}

void sub_21848BB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, int a17, char a18)
{
  switch(a18)
  {
    case 2:
      turi::full_type_name<turi::flexible_type>(&a16);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>(&a16);
      break;
    case 4:
      turi::evaluation::compute_classifier_metrics(&a16);
      break;
    case 5:
      turi::evaluation::compute_classifier_metrics(&a16);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>(&a16);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a16);
      break;
    default:
      break;
  }
  a16 = 0;
  a17 = 0;
  a18 = 0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::evaluation::flexible_accuracy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::flexible_accuracy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::flexible_accuracy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t turi::evaluation::precision_recall_base::precision_recall_base(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_24D942980;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v4;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v5 = (_QWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v6;
  v7 = a1 + 88;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *(_QWORD *)(a2 + 80) = v5;
    *v5 = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v7;
  }
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a1 + 104, (uint64_t *)(a2 + 104));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a1 + 144, (uint64_t *)(a2 + 144));
  *(_QWORD *)a1 = &unk_24D942E88;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a1 + 192, (uint64_t *)(a2 + 192));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a1 + 232, (uint64_t *)(a2 + 232));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a1 + 272, (uint64_t *)(a2 + 272));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a1 + 312, (uint64_t *)(a2 + 312));
  return a1;
}

_QWORD *turi::evaluation::flexible_accuracy::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "accuracy");
}

BOOL turi::evaluation::precision_recall_base::is_table_printer_compatible(turi::evaluation::precision_recall_base *this)
{
  return *((_BYTE *)this + 184) != 0;
}

uint64_t turi::evaluation::flexible_accuracy::get_metric@<X0>(unsigned __int8 **this@<X0>, uint64_t a2@<X8>)
{
  __n128 v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  double v15;
  char v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int **v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  double *v71;
  double v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int **v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int **v83;
  unsigned int *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int **v91;
  turi::evaluation::precision_recall_base *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD v98[2];
  int v99;
  __int128 v100;
  __int128 v101;
  int v102;
  unsigned int **v103;
  char v104;
  _BYTE v105[13];
  _BYTE v106[13];
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  turi::evaluation::precision_recall_base::gather_global_metrics((turi::evaluation::precision_recall_base *)this);
  v3 = 0uLL;
  v100 = 0u;
  v101 = 0u;
  v102 = 1065353216;
  memset(v98, 0, sizeof(v98));
  v99 = 1065353216;
  v94 = (turi::evaluation::precision_recall_base *)this;
  v4 = this[7];
  if (v4)
  {
    v5 = (uint64_t)v94 + 192;
    v95 = (uint64_t)v94 + 272;
    v96 = (uint64_t)v94 + 232;
    do
    {
      *(_QWORD *)v106 = v4 + 16;
      v6 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(v5, v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4);
      *(_QWORD *)v106 = v4 + 16;
      v7 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(v96, v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4);
      *(_QWORD *)v106 = v4 + 16;
      v8 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(v5, v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4);
      *(_QWORD *)v106 = v4 + 16;
      v9 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(v95, v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4);
      *(_QWORD *)v106 = v4 + 16;
      v10 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(v96, v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4);
      *(_QWORD *)v106 = v4 + 16;
      v11 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v94 + 312, v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4);
      *(_QWORD *)v106 = v4 + 16;
      *((double *)std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)&v100, v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4) = (double)(unint64_t)(v7 + v6) / (double)(unint64_t)(v9 + v8 + v10 + v11);
      *(_QWORD *)v106 = v4 + 16;
      v12 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(v5, v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4);
      *(_QWORD *)v106 = v4 + 16;
      v13 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(v95, v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4)+ v12;
      if (v13)
      {
        v14 = 0;
        v15 = (double)v12 / (double)v13;
        v16 = 1;
      }
      else
      {
        v15 = *(double *)&turi::FLEX_UNDEFINED;
        v14 = dword_254FF4788;
        v16 = byte_254FF478C;
        switch(byte_254FF478C)
        {
          case 2:
            do
              v25 = __ldaxr(*(unint64_t **)&v15);
            while (__stlxr(v25 + 1, *(unint64_t **)&v15));
            v16 = 2;
            break;
          case 3:
            do
              v28 = __ldaxr(*(unint64_t **)&v15);
            while (__stlxr(v28 + 1, *(unint64_t **)&v15));
            v16 = 3;
            break;
          case 4:
            do
              v26 = __ldaxr(*(unint64_t **)&v15);
            while (__stlxr(v26 + 1, *(unint64_t **)&v15));
            v16 = 4;
            break;
          case 5:
            do
              v29 = __ldaxr(*(unint64_t **)&v15);
            while (__stlxr(v29 + 1, *(unint64_t **)&v15));
            v16 = 5;
            break;
          case 8:
            do
              v30 = __ldaxr(*(unint64_t **)&v15);
            while (__stlxr(v30 + 1, *(unint64_t **)&v15));
            v16 = 8;
            break;
          case 9:
            do
              v27 = __ldaxr(*(unint64_t **)&v15);
            while (__stlxr(v27 + 1, *(unint64_t **)&v15));
            v16 = 9;
            break;
          default:
            break;
        }
      }
      *(_QWORD *)v105 = v4 + 16;
      v17 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v98, v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v105);
      v18 = v17;
      switch(v17[44])
      {
        case 2u:
          v19 = (unint64_t *)*((_QWORD *)v17 + 4);
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = *((_QWORD *)v17 + 4);
            if (!v22)
              goto LABEL_60;
            if (*(char *)(v22 + 31) < 0)
              operator delete(*(void **)(v22 + 8));
            v23 = (_QWORD *)v22;
            v24 = 0x1012C404EF22A49;
            goto LABEL_59;
          }
          break;
        case 3u:
          v42 = (unint64_t *)*((_QWORD *)v17 + 4);
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            v45 = (_QWORD *)*((_QWORD *)v17 + 4);
            if (!v45)
              goto LABEL_60;
            v46 = (void *)v45[1];
            if (v46)
            {
              v45[2] = v46;
              operator delete(v46);
            }
            v23 = v45;
            v24 = 0x1080C409938AC02;
            goto LABEL_59;
          }
          break;
        case 4u:
          v31 = (unint64_t *)*((_QWORD *)v17 + 4);
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v34 = (_QWORD *)*((_QWORD *)v17 + 4);
            if (!v34)
              goto LABEL_60;
            *(_QWORD *)v106 = v34 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
            goto LABEL_52;
          }
          break;
        case 5u:
          v47 = (unint64_t *)*((_QWORD *)v17 + 4);
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            v34 = (_QWORD *)*((_QWORD *)v17 + 4);
            if (!v34)
              goto LABEL_60;
            *(_QWORD *)v106 = v34 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
LABEL_52:
            v23 = v34;
            v24 = 0x1020C405E66F15BLL;
            goto LABEL_59;
          }
          break;
        case 8u:
          v50 = (unint64_t *)*((_QWORD *)v17 + 4);
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = *((_QWORD *)v17 + 4);
            if (!v53)
              goto LABEL_60;
            boost::detail::shared_count::~shared_count((unsigned int **)(v53 + 16));
            v23 = (_QWORD *)v53;
            v41 = -235920773;
            goto LABEL_58;
          }
          break;
        case 9u:
          v35 = (unint64_t *)*((_QWORD *)v17 + 4);
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
          {
            v38 = (_QWORD *)*((_QWORD *)v17 + 4);
            if (v38)
            {
              v39 = (void *)v38[6];
              if (v39)
              {
                v38[7] = v39;
                operator delete(v39);
              }
              v40 = (void *)v38[3];
              if (v40)
              {
                v38[4] = v40;
                operator delete(v40);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v38 + 1));
              v23 = v38;
              v41 = 2071181815;
LABEL_58:
              v24 = v41 | 0x1030C4000000000;
LABEL_59:
              MEMORY[0x219A19A08](v23, v24);
            }
LABEL_60:
            *((_QWORD *)v18 + 4) = 0;
          }
          break;
        default:
          break;
      }
      *((double *)v18 + 4) = v15;
      *((_DWORD *)v18 + 10) = v14;
      v18[44] = v16;
      v4 = *(unsigned __int8 **)v4;
    }
    while (v4);
  }
  v54 = *((_QWORD *)v94 + 8);
  if (v54 == 2)
  {
    turi::evaluation::precision_recall_base::get_reference_label(v94, (unsigned __int8 *)&v103, v3);
    *(_QWORD *)v105 = &v103;
    v55 = std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>((uint64_t)&v100, (unsigned __int8 *)&v103, (uint64_t)&std::piecewise_construct, (uint64_t **)v105);
    turi::flexible_type_converter<double>::set((_QWORD *)v55 + 4, (uint64_t)v105);
    *(_QWORD *)(a2 + 13) = *(_QWORD *)&v105[5];
    *(_QWORD *)(a2 + 8) = *(_QWORD *)v105;
    *(_BYTE *)(a2 + 20) = v105[12];
    *(_DWORD *)a2 = 0;
    switch(v104)
    {
      case 2:
        v56 = (unint64_t *)v103;
        do
        {
          v57 = __ldaxr(v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, v56));
        if (!v58)
        {
          v59 = v103;
          if (v103)
          {
            if (*((char *)v103 + 31) < 0)
              operator delete(v103[1]);
            v60 = v59;
            v61 = 0x1012C404EF22A49;
            goto LABEL_106;
          }
        }
        break;
      case 3:
        v80 = (unint64_t *)v103;
        do
        {
          v81 = __ldaxr(v80);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, v80));
        if (!v82)
        {
          v83 = v103;
          if (v103)
          {
            v84 = v103[1];
            if (v84)
            {
              v103[2] = v84;
              operator delete(v84);
            }
            v60 = v83;
            v61 = 0x1080C409938AC02;
            goto LABEL_106;
          }
        }
        break;
      case 4:
        v73 = (unint64_t *)v103;
        do
        {
          v74 = __ldaxr(v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v73));
        if (!v75)
        {
          v76 = v103;
          if (v103)
          {
            *(_QWORD *)v106 = v103 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
            goto LABEL_105;
          }
        }
        break;
      case 5:
        v85 = (unint64_t *)v103;
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
        {
          v76 = v103;
          if (v103)
          {
            *(_QWORD *)v106 = v103 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
LABEL_105:
            v60 = v76;
            v61 = 0x1020C405E66F15BLL;
            goto LABEL_106;
          }
        }
        break;
      case 8:
        v88 = (unint64_t *)v103;
        do
        {
          v89 = __ldaxr(v88);
          v90 = v89 - 1;
        }
        while (__stlxr(v90, v88));
        if (!v90)
        {
          v91 = v103;
          if (v103)
          {
            boost::detail::shared_count::~shared_count(v103 + 2);
            MEMORY[0x219A19A08](v91, 0x1030C40F1F0227BLL);
          }
          v103 = 0;
        }
        break;
      case 9:
        v77 = (unint64_t *)v103;
        do
        {
          v78 = __ldaxr(v77);
          v79 = v78 - 1;
        }
        while (__stlxr(v79, v77));
        if (!v79 && v103)
        {
          v60 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v103);
          v61 = 0x1030C407B73B9F7;
LABEL_106:
          MEMORY[0x219A19A08](v60, v61);
        }
        break;
      default:
        break;
    }
  }
  else
  {
    switch(*((_BYTE *)v94 + 184))
    {
      case 0:
        turi::flexible_type_converter<std::unordered_map<turi::flexible_type,turi::flexible_type>>::set((uint64_t)v98, (uint64_t)v106);
        break;
      case 1:
      case 3:
        v62 = (unsigned __int8 *)*((_QWORD *)v94 + 7);
        if (v62)
        {
          v63 = 0;
          v64 = 0;
          v65 = 0;
          v66 = 0;
          v97 = (uint64_t)v94 + 192;
          do
          {
            *(_QWORD *)v106 = v62 + 16;
            v67 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(v97, v62 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4);
            *(_QWORD *)v106 = v62 + 16;
            v68 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(v97, v62 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4);
            *(_QWORD *)v106 = v62 + 16;
            v69 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v94 + 272, v62 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4);
            *(_QWORD *)v106 = v62 + 16;
            v63 += v67;
            v66 += v68;
            v65 += v69;
            v64 += *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v94 + 312, v62 + 16, (uint64_t)&std::piecewise_construct, (void **)v106)+ 4);
            v62 = *(unsigned __int8 **)v62;
          }
          while (v62);
          v70 = v63 + v66;
        }
        else
        {
          v65 = 0;
          v64 = 0;
          v70 = 0;
        }
        *(double *)v105 = (double)v70 / (double)(v70 + v65 + v64);
        turi::flexible_type_converter<double>::set(v105, (uint64_t)v106);
        break;
      case 2:
        v71 = (double *)v101;
        if ((_QWORD)v101)
        {
          v72 = 0.0;
          do
          {
            v72 = v71[4] + v72;
            v71 = *(double **)v71;
          }
          while (v71);
        }
        else
        {
          v72 = 0.0;
        }
        *(double *)v105 = v72 / (double)v54;
        turi::flexible_type_converter<double>::set(v105, (uint64_t)v106);
        break;
      default:
        turi::evaluation::flexible_accuracy::get_metric(void)::{lambda(void)#1}::operator()();
    }
    *(_QWORD *)(a2 + 13) = *(_QWORD *)&v106[5];
    *(_QWORD *)(a2 + 8) = *(_QWORD *)v106;
    *(_BYTE *)(a2 + 20) = v106[12];
    *(_DWORD *)a2 = 0;
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v98);
  return std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::~__hash_table((uint64_t)&v100);
}

void sub_21848C6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

unsigned __int8 *turi::evaluation::precision_recall_base::gather_global_metrics(turi::evaluation::precision_recall_base *this)
{
  unsigned __int8 *result;
  unsigned __int8 *v3;
  char *v4;
  uint64_t *v5;
  double v6;
  unsigned int v7;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  double *v14;
  int v15;
  BOOL v16;
  int v17;
  double v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  size_t v60;
  double *v61;
  double *v62;
  unint64_t v63;
  double *v64;
  uint64_t v65;
  unsigned int v67;
  int v68;
  unsigned int v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  double v109;
  size_t v110;
  unsigned int v111;
  double *v112;
  double *v113;
  unint64_t v114;
  double *v115;
  unsigned int v116;
  double v117;
  double v118;
  unsigned int v119;
  unsigned int v120;
  double v122;
  _QWORD *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  size_t v163;
  double *v164;
  double *v165;
  unint64_t v166;
  double *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  double v171;
  double v172;
  BOOL v173;
  double v174;
  uint64_t v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  uint64_t v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  double v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  size_t v188;
  int v189;
  int v190;
  int v191;
  int v192;
  char v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  _QWORD *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  double v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unsigned int v234;
  double v236;
  size_t v237;
  unsigned int v238;
  double *v239;
  double *v240;
  unint64_t v241;
  double *v242;
  unsigned int v243;
  double v244;
  double v245;
  unsigned int v246;
  unsigned int v247;
  double v249;
  double v250;
  uint64_t v251;
  uint64_t v252;
  unsigned __int8 *v253;
  unsigned __int8 *v254;
  unsigned __int8 *v255;
  unsigned __int8 *v256;
  uint64_t v257;
  unint64_t v258;
  double v259;
  double v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  double v264;
  double v265;
  uint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  double v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  double v274;
  void *v275;
  void *v276;
  unsigned int v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  double v281;
  void *v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t v288;
  double v289;
  unint64_t v290;
  unint64_t v291;
  BOOL v292;
  double v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  BOOL v297;
  unint64_t v298;
  unint64_t v299;
  BOOL v300;
  void *v301;
  void *v302;
  unsigned int v303;
  unint64_t v304;
  unint64_t v305;
  BOOL v306;
  void *v307;
  unint64_t v308;
  unint64_t v309;
  BOOL v310;
  unint64_t v311;
  unint64_t v312;
  BOOL v313;
  double v314;
  double v315;
  double v316;
  uint64_t v317;
  turi::evaluation::precision_recall_base *v318;
  uint64_t *v319;
  int v320;
  char v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t *v324;
  double v325[4];

  v325[2] = *(double *)MEMORY[0x24BDAC8D0];
  result = (unsigned __int8 *)turi::evaluation::confusion_matrix::gather_counts_and_labels(this);
  v318 = this;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 7);
  if (v3)
  {
    v4 = (char *)this + 192;
    do
    {
      v323 = (uint64_t *)(v3 + 16);
      *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v4, v3 + 16, (uint64_t)&std::piecewise_construct, (void **)&v323)+ 4) = 0;
      v323 = (uint64_t *)(v3 + 16);
      *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v318 + 272, v3 + 16, (uint64_t)&std::piecewise_construct, (void **)&v323)+ 4) = 0;
      v323 = (uint64_t *)(v3 + 16);
      *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v318 + 232, v3 + 16, (uint64_t)&std::piecewise_construct, (void **)&v323)+ 4) = 0;
      v323 = (uint64_t *)(v3 + 16);
      result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v318 + 312, v3 + 16, (uint64_t)&std::piecewise_construct, (void **)&v323);
      *((_QWORD *)result + 4) = 0;
      v3 = *(unsigned __int8 **)v3;
    }
    while (v3);
  }
  v5 = (uint64_t *)*((_QWORD *)v318 + 20);
  if (v5)
  {
    while (1)
    {
      v6 = *((double *)v5 + 2);
      v320 = *((_DWORD *)v5 + 6);
      v7 = *((unsigned __int8 *)v5 + 28);
      if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
      {
        do
          v9 = __ldaxr(*(unint64_t **)&v6);
        while (__stlxr(v9 + 1, *(unint64_t **)&v6));
      }
      memset(v325, 0, 13);
      if (v5 + 4 != (uint64_t *)v325)
      {
        *(_QWORD *)((char *)v325 + 5) = *(uint64_t *)((char *)v5 + 37);
        *(_QWORD *)&v325[0] = v5[4];
        BYTE4(v325[1]) = *((_BYTE *)v5 + 44);
        if (BYTE4(v325[1]) <= 9u && ((1 << SBYTE4(v325[1])) & 0x33C) != 0)
        {
          v10 = *(unint64_t **)&v325[0];
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
      }
      v12 = (uint64_t *)*((_QWORD *)v318 + 7);
      if (v12)
        break;
LABEL_471:
      switch(BYTE4(v325[1]))
      {
        case 2:
          v261 = *(unint64_t **)&v325[0];
          do
          {
            v262 = __ldaxr(v261);
            v263 = v262 - 1;
          }
          while (__stlxr(v263, v261));
          if (!v263)
          {
            v264 = v325[0];
            if (*(_QWORD *)&v325[0])
            {
              if (*(char *)(*(_QWORD *)&v325[0] + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v325[0] + 8));
              v265 = v264;
              v266 = 0x1012C404EF22A49;
              goto LABEL_512;
            }
          }
          break;
        case 3:
          v278 = *(unint64_t **)&v325[0];
          do
          {
            v279 = __ldaxr(v278);
            v280 = v279 - 1;
          }
          while (__stlxr(v280, v278));
          if (!v280)
          {
            v281 = v325[0];
            if (*(_QWORD *)&v325[0])
            {
              v282 = *(void **)(*(_QWORD *)&v325[0] + 8);
              if (v282)
              {
                *(_QWORD *)(*(_QWORD *)&v325[0] + 16) = v282;
                operator delete(v282);
              }
              v265 = v281;
              v266 = 0x1080C409938AC02;
              goto LABEL_512;
            }
          }
          break;
        case 4:
          v267 = *(unint64_t **)&v325[0];
          do
          {
            v268 = __ldaxr(v267);
            v269 = v268 - 1;
          }
          while (__stlxr(v269, v267));
          if (!v269)
          {
            v270 = v325[0];
            if (*(_QWORD *)&v325[0])
            {
              v323 = (uint64_t *)(*(_QWORD *)&v325[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
              goto LABEL_505;
            }
          }
          break;
        case 5:
          v283 = *(unint64_t **)&v325[0];
          do
          {
            v284 = __ldaxr(v283);
            v285 = v284 - 1;
          }
          while (__stlxr(v285, v283));
          if (!v285)
          {
            v270 = v325[0];
            if (*(_QWORD *)&v325[0])
            {
              v323 = (uint64_t *)(*(_QWORD *)&v325[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
LABEL_505:
              v265 = v270;
              v266 = 0x1020C405E66F15BLL;
              goto LABEL_512;
            }
          }
          break;
        case 8:
          v286 = *(unint64_t **)&v325[0];
          do
          {
            v287 = __ldaxr(v286);
            v288 = v287 - 1;
          }
          while (__stlxr(v288, v286));
          if (!v288)
          {
            v289 = v325[0];
            if (*(_QWORD *)&v325[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v325[0] + 16));
              v265 = v289;
              v277 = -235920773;
              goto LABEL_511;
            }
          }
          break;
        case 9:
          v271 = *(unint64_t **)&v325[0];
          do
          {
            v272 = __ldaxr(v271);
            v273 = v272 - 1;
          }
          while (__stlxr(v273, v271));
          if (!v273)
          {
            v274 = v325[0];
            if (*(_QWORD *)&v325[0])
            {
              v275 = *(void **)(*(_QWORD *)&v325[0] + 48);
              if (v275)
              {
                *(_QWORD *)(*(_QWORD *)&v325[0] + 56) = v275;
                operator delete(v275);
              }
              v276 = *(void **)(*(_QWORD *)&v274 + 24);
              if (v276)
              {
                *(_QWORD *)(*(_QWORD *)&v274 + 32) = v276;
                operator delete(v276);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v274 + 8);
              v265 = v274;
              v277 = 2071181815;
LABEL_511:
              v266 = v277 | 0x1030C4000000000;
LABEL_512:
              result = (unsigned __int8 *)MEMORY[0x219A19A08](*(_QWORD *)&v265, v266);
            }
          }
          break;
        default:
          break;
      }
      switch(v7)
      {
        case 2u:
          do
          {
            v290 = __ldaxr(*(unint64_t **)&v6);
            v291 = v290 - 1;
          }
          while (__stlxr(v291, *(unint64_t **)&v6));
          if (v291)
            v292 = 1;
          else
            v292 = *(_QWORD *)&v6 == 0;
          if (!v292)
          {
            if (*(char *)(*(_QWORD *)&v6 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v6 + 8));
            v293 = v6;
            v294 = 0x1012C404EF22A49;
            goto LABEL_560;
          }
          break;
        case 3u:
          do
          {
            v304 = __ldaxr(*(unint64_t **)&v6);
            v305 = v304 - 1;
          }
          while (__stlxr(v305, *(unint64_t **)&v6));
          if (v305)
            v306 = 1;
          else
            v306 = *(_QWORD *)&v6 == 0;
          if (!v306)
          {
            v307 = *(void **)(*(_QWORD *)&v6 + 8);
            if (v307)
            {
              *(_QWORD *)(*(_QWORD *)&v6 + 16) = v307;
              operator delete(v307);
            }
            v293 = v6;
            v294 = 0x1080C409938AC02;
            goto LABEL_560;
          }
          break;
        case 4u:
          do
          {
            v295 = __ldaxr(*(unint64_t **)&v6);
            v296 = v295 - 1;
          }
          while (__stlxr(v296, *(unint64_t **)&v6));
          if (v296)
            v297 = 1;
          else
            v297 = *(_QWORD *)&v6 == 0;
          if (!v297)
          {
            v323 = (uint64_t *)(*(_QWORD *)&v6 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
            goto LABEL_552;
          }
          break;
        case 5u:
          do
          {
            v308 = __ldaxr(*(unint64_t **)&v6);
            v309 = v308 - 1;
          }
          while (__stlxr(v309, *(unint64_t **)&v6));
          if (v309)
            v310 = 1;
          else
            v310 = *(_QWORD *)&v6 == 0;
          if (!v310)
          {
            v323 = (uint64_t *)(*(_QWORD *)&v6 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
LABEL_552:
            v293 = v6;
            v294 = 0x1020C405E66F15BLL;
            goto LABEL_560;
          }
          break;
        case 8u:
          do
          {
            v311 = __ldaxr(*(unint64_t **)&v6);
            v312 = v311 - 1;
          }
          while (__stlxr(v312, *(unint64_t **)&v6));
          if (v312)
            v313 = 1;
          else
            v313 = *(_QWORD *)&v6 == 0;
          if (!v313)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v6 + 16));
            v293 = v6;
            v303 = -235920773;
            goto LABEL_559;
          }
          break;
        case 9u:
          do
          {
            v298 = __ldaxr(*(unint64_t **)&v6);
            v299 = v298 - 1;
          }
          while (__stlxr(v299, *(unint64_t **)&v6));
          if (v299)
            v300 = 1;
          else
            v300 = *(_QWORD *)&v6 == 0;
          if (!v300)
          {
            v301 = *(void **)(*(_QWORD *)&v6 + 48);
            if (v301)
            {
              *(_QWORD *)(*(_QWORD *)&v6 + 56) = v301;
              operator delete(v301);
            }
            v302 = *(void **)(*(_QWORD *)&v6 + 24);
            if (v302)
            {
              *(_QWORD *)(*(_QWORD *)&v6 + 32) = v302;
              operator delete(v302);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v6 + 8);
            v293 = v6;
            v303 = 2071181815;
LABEL_559:
            v294 = v303 | 0x1030C4000000000;
LABEL_560:
            result = (unsigned __int8 *)MEMORY[0x219A19A08](*(_QWORD *)&v293, v294);
          }
          break;
        default:
          break;
      }
      v5 = (uint64_t *)*v5;
      if (!v5)
        return result;
    }
    v13 = v5[6];
    v319 = (uint64_t *)(*(_QWORD *)&v6 + 8);
    v317 = (uint64_t)(*(_QWORD *)&v6 << 8) >> 8;
    while (1)
    {
      v14 = (double *)(v12 + 2);
      switch(*((_BYTE *)v12 + 28))
      {
        case 0:
          switch(BYTE4(v325[1]))
          {
            case 0:
              v173 = *(_QWORD *)&v325[0] == *(_QWORD *)v14;
              goto LABEL_259;
            case 1:
              v174 = v325[0];
              v175 = *(_QWORD *)v14;
              goto LABEL_243;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              v15 = 0;
LABEL_20:
              switch(v7)
              {
                case 0u:
                  v16 = *(_QWORD *)&v6 == *(_QWORD *)v14;
                  goto LABEL_326;
                case 1u:
                  v16 = v6 == (double)*(uint64_t *)v14;
                  goto LABEL_326;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_112;
                case 6u:
                  v48 = v320 == 0;
                  if (v317 == *(_QWORD *)v14)
                    goto LABEL_329;
                  goto LABEL_112;
                default:
                  goto LABEL_563;
              }
            case 6:
              v173 = *(_QWORD *)v14 == (uint64_t)(*(_QWORD *)&v325[0] << 8) >> 8 && LODWORD(v325[1]) == 0;
              goto LABEL_259;
            default:
              goto LABEL_563;
          }
        case 1:
          switch(BYTE4(v325[1]))
          {
            case 0:
              v174 = *v14;
              v175 = *(_QWORD *)&v325[0];
LABEL_243:
              v173 = v174 == (double)v175;
              goto LABEL_259;
            case 1:
              v15 = v325[0] == *v14;
              goto LABEL_262;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              v15 = 0;
LABEL_92:
              switch(v7)
              {
                case 0u:
                  v16 = *v14 == (double)*(uint64_t *)&v6;
                  goto LABEL_326;
                case 1u:
                  v16 = *v14 == v6;
                  goto LABEL_326;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_112;
                case 6u:
                  v177 = vabdd_f64((double)v320 / 1000000.0 + (double)v317, *v14);
                  goto LABEL_271;
                default:
                  goto LABEL_563;
              }
            case 6:
              v176 = vabdd_f64((double)SLODWORD(v325[1]) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v325[0] << 8) >> 8), *v14);
              goto LABEL_255;
            default:
              goto LABEL_563;
          }
        case 2:
          v59 = BYTE4(v325[1]) - 3 >= 7 && BYTE4(v325[1]) >= 2u;
          if (v59)
          {
            if (BYTE4(v325[1]) != 2)
              goto LABEL_563;
            if (*(char *)(*(_QWORD *)&v325[0] + 31) < 0)
              v163 = *(_QWORD *)(*(_QWORD *)&v325[0] + 16);
            else
              v163 = *(unsigned __int8 *)(*(_QWORD *)&v325[0] + 31);
            v184 = *v14;
            if (*(char *)(*(_QWORD *)v14 + 31) < 0)
              v185 = *(_QWORD *)(*(_QWORD *)&v184 + 16);
            else
              v185 = *(unsigned __int8 *)(*(_QWORD *)v14 + 31);
            if (v163 != v185)
              goto LABEL_322;
            v186 = (_QWORD *)(*(_QWORD *)&v325[0] + 8);
            if ((*(_BYTE *)(*(_QWORD *)&v325[0] + 31) & 0x80) != 0)
              v186 = (_QWORD *)*v186;
            v187 = (_QWORD *)(*(_QWORD *)&v184 + 8);
            if ((*(_BYTE *)(*(_QWORD *)v14 + 31) & 0x80) != 0)
            {
              v187 = (_QWORD *)*v187;
              if ((*(_BYTE *)(*(_QWORD *)&v325[0] + 31) & 0x80) == 0)
              {
LABEL_314:
                if (v163)
                {
                  v188 = v163 - 1;
                  do
                  {
                    v190 = *(unsigned __int8 *)v186;
                    v186 = (_QWORD *)((char *)v186 + 1);
                    v189 = v190;
                    v192 = *(unsigned __int8 *)v187;
                    v187 = (_QWORD *)((char *)v187 + 1);
                    v191 = v192;
                    v59 = v188-- != 0;
                    v193 = v59;
                    v15 = v189 == v191;
                  }
                  while (v189 == v191 && (v193 & 1) != 0);
                  goto LABEL_262;
                }
                goto LABEL_323;
              }
            }
            else if ((*(_BYTE *)(*(_QWORD *)&v325[0] + 31) & 0x80) == 0)
            {
              goto LABEL_314;
            }
            v173 = memcmp(v186, v187, v163) == 0;
LABEL_259:
            v15 = v173;
            goto LABEL_262;
          }
          v15 = 0;
LABEL_67:
          if (v7 - 3 < 7 || v7 < 2)
            goto LABEL_112;
          if (v7 != 2)
            goto LABEL_563;
          v60 = *(char *)(*(_QWORD *)&v6 + 31) < 0
              ? *(_QWORD *)(*(_QWORD *)&v6 + 16)
              : *(unsigned __int8 *)(*(_QWORD *)&v6 + 31);
          v180 = *v14;
          v181 = *(char *)(*(_QWORD *)v14 + 31) < 0
               ? *(_QWORD *)(*(_QWORD *)&v180 + 16)
               : *(unsigned __int8 *)(*(_QWORD *)v14 + 31);
          if (v60 != v181)
            goto LABEL_112;
          v182 = (unsigned __int8 *)(*(_QWORD *)&v6 + 8);
          if ((*(_BYTE *)(*(_QWORD *)&v6 + 31) & 0x80) != 0)
            v182 = (unsigned __int8 *)*v319;
          v183 = (unsigned __int8 *)(*(_QWORD *)&v180 + 8);
          if ((*(_BYTE *)(*(_QWORD *)v14 + 31) & 0x80) != 0)
          {
            v183 = *(unsigned __int8 **)v183;
            if ((*(_BYTE *)(*(_QWORD *)&v6 + 31) & 0x80) != 0)
            {
LABEL_325:
              v16 = memcmp(v182, v183, v60) == 0;
LABEL_326:
              v48 = v16;
LABEL_329:
              if (v15 != v48)
                goto LABEL_113;
              goto LABEL_330;
            }
          }
          else if ((*(_BYTE *)(*(_QWORD *)&v6 + 31) & 0x80) != 0)
          {
            goto LABEL_325;
          }
          if (v60)
          {
            while (*v182 == *v183)
            {
              ++v182;
              ++v183;
              if (!--v60)
                goto LABEL_303;
            }
LABEL_112:
            if ((v15 & 1) != 0)
            {
LABEL_113:
              switch(BYTE4(v325[1]))
              {
                case 0:
                  switch(*((_BYTE *)v12 + 28))
                  {
                    case 0:
                      if (*(_QWORD *)v14 == *(_QWORD *)&v325[0])
                        goto LABEL_290;
                      goto LABEL_188;
                    case 1:
                      v117 = *v14;
                      v118 = v325[0];
                      goto LABEL_284;
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                      goto LABEL_188;
                    case 6:
                      if (*(_QWORD *)&v325[0] == (uint64_t)(*(_QWORD *)v14 << 8) >> 8 && !*((_DWORD *)v12 + 6))
                        goto LABEL_290;
                      goto LABEL_188;
                    default:
                      goto LABEL_563;
                  }
                case 1:
                  switch(*((_BYTE *)v12 + 28))
                  {
                    case 0:
                      v117 = v325[0];
                      v118 = *v14;
LABEL_284:
                      v179 = (double)*(uint64_t *)&v118;
                      goto LABEL_285;
                    case 1:
                      v117 = *v14;
                      v179 = v325[0];
LABEL_285:
                      if (v117 != v179)
                        goto LABEL_188;
                      goto LABEL_290;
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                      goto LABEL_188;
                    case 6:
                      v178 = vabdd_f64((double)*((int *)v12 + 6) / 1000000.0 + (double)(v12[2] << 8 >> 8), v325[0]);
                      goto LABEL_289;
                    default:
                      goto LABEL_563;
                  }
                case 2:
                  v107 = *((unsigned __int8 *)v12 + 28);
                  if (v107 - 3 < 7 || v107 < 2)
                    goto LABEL_188;
                  if (v107 != 2)
                    goto LABEL_563;
                  v109 = *v14;
                  if (*(char *)(*(_QWORD *)v14 + 31) < 0)
                    v110 = *(_QWORD *)(*(_QWORD *)&v109 + 16);
                  else
                    v110 = *(unsigned __int8 *)(*(_QWORD *)v14 + 31);
                  if (*(char *)(*(_QWORD *)&v325[0] + 31) < 0)
                    v251 = *(_QWORD *)(*(_QWORD *)&v325[0] + 16);
                  else
                    v251 = *(unsigned __int8 *)(*(_QWORD *)&v325[0] + 31);
                  if (v110 != v251)
                    goto LABEL_188;
                  v253 = (unsigned __int8 *)(*(_QWORD *)&v109 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)v14 + 31) & 0x80) != 0)
                    v253 = *(unsigned __int8 **)v253;
                  v254 = (unsigned __int8 *)(*(_QWORD *)&v325[0] + 8);
                  if ((*(_BYTE *)(*(_QWORD *)&v325[0] + 31) & 0x80) != 0)
                  {
                    v254 = *(unsigned __int8 **)v254;
                    if ((*(_BYTE *)(*(_QWORD *)v14 + 31) & 0x80) == 0)
                    {
LABEL_441:
                      if (!v110)
                        goto LABEL_290;
                      do
                      {
                        if (*v253 != *v254)
                          goto LABEL_188;
                        ++v253;
                        ++v254;
                        --v110;
                      }
                      while (v110);
                      goto LABEL_290;
                    }
                  }
                  else if ((*(_BYTE *)(*(_QWORD *)v14 + 31) & 0x80) == 0)
                  {
                    goto LABEL_441;
                  }
                  if (memcmp(v253, v254, v110))
                    goto LABEL_188;
LABEL_290:
                  v323 = v12 + 2;
                  result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v318 + 272, (unsigned __int8 *)v12 + 16, (uint64_t)&std::piecewise_construct, (void **)&v323);
                  break;
                case 3:
                  v111 = *((unsigned __int8 *)v12 + 28);
                  if (v111 > 9)
                    goto LABEL_563;
                  if (v111 != 3)
                    goto LABEL_188;
                  v112 = *(double **)(*(_QWORD *)v14 + 8);
                  v113 = *(double **)(*(_QWORD *)v14 + 16);
                  v114 = v113 - v112;
                  v115 = *(double **)(*(_QWORD *)&v325[0] + 8);
                  if (v114 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v325[0] + 16) - (_QWORD)v115) >> 3)
                    goto LABEL_188;
                  if (v113 == v112)
                    goto LABEL_290;
                  if (v114 <= 1)
                    v114 = 1;
                  while (*v112 == *v115)
                  {
                    ++v115;
                    ++v112;
                    if (!--v114)
                      goto LABEL_290;
                  }
                  goto LABEL_188;
                case 4:
                  v67 = *((unsigned __int8 *)v12 + 28);
                  if (v67 > 9)
                    goto LABEL_563;
                  if (v67 != 4)
                    goto LABEL_188;
                  v68 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v321, (uint64_t *)(*(_QWORD *)v14 + 8), (_QWORD *)(*(_QWORD *)&v325[0] + 8));
                  goto LABEL_274;
                case 5:
                  v119 = *((unsigned __int8 *)v12 + 28);
                  if (v119 > 9)
                    goto LABEL_563;
                  if (v119 != 5)
                    goto LABEL_188;
                  v68 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v321, (uint64_t **)(*(_QWORD *)v14 + 8), (uint64_t **)(*(_QWORD *)&v325[0] + 8));
                  goto LABEL_274;
                case 6:
                  switch(*((_BYTE *)v12 + 28))
                  {
                    case 0:
                      if (*(_QWORD *)v14 == (uint64_t)(*(_QWORD *)&v325[0] << 8) >> 8 && !LODWORD(v325[1]))
                        goto LABEL_290;
                      goto LABEL_188;
                    case 1:
                      v178 = vabdd_f64(*v14, (double)SLODWORD(v325[1]) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)&v325[0] << 8) >> 8));
LABEL_289:
                      if (v178 < 0.0000005)
                        goto LABEL_290;
                      goto LABEL_188;
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                      goto LABEL_188;
                    case 6:
                      if (((*(_QWORD *)&v325[0] ^ *(_QWORD *)v14) & 0xFFFFFFFFFFFFFFLL) == 0
                        && *((_DWORD *)v12 + 6) == LODWORD(v325[1]))
                      {
                        goto LABEL_290;
                      }
                      goto LABEL_188;
                    default:
                      goto LABEL_563;
                  }
                case 7:
                  v116 = *((unsigned __int8 *)v12 + 28);
                  if (v116 < 7 || v116 - 8 < 2)
                    goto LABEL_188;
                  if (v116 != 7)
                    goto LABEL_563;
                  goto LABEL_290;
                case 8:
                  v120 = *((unsigned __int8 *)v12 + 28);
                  if (v120 < 8 || v120 == 9)
                    goto LABEL_188;
                  if (v120 != 8)
                    goto LABEL_563;
                  v68 = turi::image_type::operator==(*(_QWORD *)v14 + 8, *(_QWORD *)&v325[0] + 8);
LABEL_274:
                  if (v68)
                    goto LABEL_290;
                  goto LABEL_188;
                case 9:
                  v69 = *((unsigned __int8 *)v12 + 28);
                  if (v69 < 9)
                    goto LABEL_188;
                  if (v69 != 9)
                    goto LABEL_563;
                  v70 = *(_QWORD **)v14;
                  if (*(_QWORD *)&v325[0] == *(_QWORD *)v14)
                    goto LABEL_290;
                  v314 = v325[0];
                  if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v70 + 1), *(_QWORD *)&v325[0] + 8))goto LABEL_188;
                  v72 = (char *)v70[3];
                  v71 = (char *)v70[4];
                  v73 = v71 - v72;
                  if (v71 == v72)
                    goto LABEL_290;
                  if (!v70[1])
                    goto LABEL_290;
                  v74 = 1;
                  do
                  {
                    v75 = *(_QWORD *)v72;
                    v72 += 8;
                    v74 *= v75;
                  }
                  while (v72 != v71);
                  if (!v74)
                    goto LABEL_290;
                  v322 = 0;
                  std::vector<unsigned long>::vector(&v323, v73 >> 3, &v322);
                  v76 = v323;
                  v77 = v324;
                  v78 = **(_QWORD **)(*(_QWORD *)&v314 + 8);
                  v79 = (char *)v324 - (char *)v323;
                  v80 = v324 - v323;
                  v81 = v80 - 1;
                  if (v80 <= 1)
                    v82 = 1;
                  else
                    v82 = v324 - v323;
                  while (2)
                  {
                    if (v77 == v76)
                    {
                      v90 = 0;
                      v91 = *(double *)(*(_QWORD *)v70[1] + 8 * v70[9]);
                    }
                    else
                    {
                      v83 = 0;
                      v84 = (uint64_t *)v70[6];
                      v85 = v76;
                      v86 = v82;
                      do
                      {
                        v88 = *v85++;
                        v87 = v88;
                        v89 = *v84++;
                        v83 += v89 * v87;
                        --v86;
                      }
                      while (v86);
                      v90 = 0;
                      v91 = *(double *)(*(_QWORD *)v70[1] + 8 * (v70[9] + v83));
                      v92 = *(uint64_t **)(*(_QWORD *)&v314 + 48);
                      v93 = v76;
                      v94 = v82;
                      do
                      {
                        v96 = *v93++;
                        v95 = v96;
                        v97 = *v92++;
                        v90 += v97 * v95;
                        --v94;
                      }
                      while (v94);
                    }
                    v98 = *(double *)(v78 + 8 * (*(_QWORD *)(*(_QWORD *)&v314 + 72) + v90));
                    if (v91 != v98)
                      goto LABEL_149;
                    v99 = v80;
                    v100 = v80 - 1;
                    if (v79 < 1)
                      goto LABEL_143;
                    v101 = v70[3];
                    v102 = v76[v81] + 1;
                    v76[v81] = v102;
                    v103 = (v79 & 0xFFFFFFFFFFFFFFF8) - 16;
                    v104 = v80 - 1;
                    if (v102 < *(_QWORD *)(v101 + 8 * v81))
                    {
                      v99 = 1;
                      v100 = v80 - 1;
LABEL_143:
                      if ((v100 & 0x8000000000000000) != 0)
                        goto LABEL_149;
LABEL_144:
                      if (!v99)
                        goto LABEL_149;
                      continue;
                    }
                    break;
                  }
                  do
                  {
                    *(uint64_t *)((char *)v76 + v103 + 8) = 0;
                    if (v104 <= 0)
                    {
                      v324 = v76;
                      operator delete(v76);
                      goto LABEL_290;
                    }
                    --v104;
                    v105 = *(uint64_t *)((char *)v76 + v103) + 1;
                    *(uint64_t *)((char *)v76 + v103) = v105;
                    v106 = *(_QWORD *)(v101 + v103);
                    v103 -= 8;
                  }
                  while (v105 >= v106);
                  v99 = 1;
                  if ((v104 & 0x8000000000000000) == 0)
                    goto LABEL_144;
LABEL_149:
                  if (v76)
                  {
                    v324 = v76;
                    operator delete(v76);
                  }
                  if (v91 == v98)
                    goto LABEL_290;
LABEL_188:
                  v323 = v12 + 2;
                  result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v318 + 312, (unsigned __int8 *)v12 + 16, (uint64_t)&std::piecewise_construct, (void **)&v323);
                  goto LABEL_406;
                default:
                  goto LABEL_563;
              }
              goto LABEL_406;
            }
          }
          else
          {
LABEL_303:
            if ((v15 & 1) == 0)
              goto LABEL_113;
          }
LABEL_330:
          switch(BYTE4(v325[1]))
          {
            case 0:
              switch(*((_BYTE *)v12 + 28))
              {
                case 0:
                  if (*(_QWORD *)v14 == *(_QWORD *)&v325[0])
                    goto LABEL_426;
                  goto LABEL_405;
                case 1:
                  v244 = *v14;
                  v245 = v325[0];
                  goto LABEL_420;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_405;
                case 6:
                  if (*(_QWORD *)&v325[0] == (uint64_t)(*(_QWORD *)v14 << 8) >> 8 && !*((_DWORD *)v12 + 6))
                    goto LABEL_426;
                  goto LABEL_405;
                default:
                  goto LABEL_563;
              }
            case 1:
              switch(*((_BYTE *)v12 + 28))
              {
                case 0:
                  v244 = v325[0];
                  v245 = *v14;
LABEL_420:
                  v250 = (double)*(uint64_t *)&v245;
                  goto LABEL_421;
                case 1:
                  v244 = *v14;
                  v250 = v325[0];
LABEL_421:
                  if (v244 != v250)
                    goto LABEL_405;
                  goto LABEL_426;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_405;
                case 6:
                  v249 = vabdd_f64((double)*((int *)v12 + 6) / 1000000.0 + (double)(v12[2] << 8 >> 8), v325[0]);
                  goto LABEL_425;
                default:
                  goto LABEL_563;
              }
            case 2:
              v234 = *((unsigned __int8 *)v12 + 28);
              if (v234 - 3 < 7 || v234 < 2)
                goto LABEL_405;
              if (v234 != 2)
                goto LABEL_563;
              v236 = *v14;
              if (*(char *)(*(_QWORD *)v14 + 31) < 0)
                v237 = *(_QWORD *)(*(_QWORD *)&v236 + 16);
              else
                v237 = *(unsigned __int8 *)(*(_QWORD *)v14 + 31);
              if (*(char *)(*(_QWORD *)&v325[0] + 31) < 0)
                v252 = *(_QWORD *)(*(_QWORD *)&v325[0] + 16);
              else
                v252 = *(unsigned __int8 *)(*(_QWORD *)&v325[0] + 31);
              if (v237 != v252)
                goto LABEL_405;
              v255 = (unsigned __int8 *)(*(_QWORD *)&v236 + 8);
              if ((*(_BYTE *)(*(_QWORD *)v14 + 31) & 0x80) != 0)
                v255 = *(unsigned __int8 **)v255;
              v256 = (unsigned __int8 *)(*(_QWORD *)&v325[0] + 8);
              if ((*(_BYTE *)(*(_QWORD *)&v325[0] + 31) & 0x80) != 0)
              {
                v256 = *(unsigned __int8 **)v256;
                if ((*(_BYTE *)(*(_QWORD *)v14 + 31) & 0x80) == 0)
                {
LABEL_451:
                  if (!v237)
                    goto LABEL_426;
                  do
                  {
                    if (*v255 != *v256)
                      goto LABEL_405;
                    ++v255;
                    ++v256;
                    --v237;
                  }
                  while (v237);
                  goto LABEL_426;
                }
              }
              else if ((*(_BYTE *)(*(_QWORD *)v14 + 31) & 0x80) == 0)
              {
                goto LABEL_451;
              }
              if (memcmp(v255, v256, v237))
                goto LABEL_405;
LABEL_426:
              v323 = v12 + 2;
              result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v318 + 192, (unsigned __int8 *)v12 + 16, (uint64_t)&std::piecewise_construct, (void **)&v323);
              break;
            case 3:
              v238 = *((unsigned __int8 *)v12 + 28);
              if (v238 > 9)
                goto LABEL_563;
              if (v238 != 3)
                goto LABEL_405;
              v239 = *(double **)(*(_QWORD *)v14 + 8);
              v240 = *(double **)(*(_QWORD *)v14 + 16);
              v241 = v240 - v239;
              v242 = *(double **)(*(_QWORD *)&v325[0] + 8);
              if (v241 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v325[0] + 16) - (_QWORD)v242) >> 3)
                goto LABEL_405;
              if (v240 == v239)
                goto LABEL_426;
              if (v241 <= 1)
                v241 = 1;
              while (*v239 == *v242)
              {
                ++v242;
                ++v239;
                if (!--v241)
                  goto LABEL_426;
              }
              goto LABEL_405;
            case 4:
              v194 = *((unsigned __int8 *)v12 + 28);
              if (v194 > 9)
                goto LABEL_563;
              if (v194 != 4)
                goto LABEL_405;
              v195 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v321, (uint64_t *)(*(_QWORD *)v14 + 8), (_QWORD *)(*(_QWORD *)&v325[0] + 8));
              goto LABEL_410;
            case 5:
              v246 = *((unsigned __int8 *)v12 + 28);
              if (v246 > 9)
                goto LABEL_563;
              if (v246 != 5)
                goto LABEL_405;
              v195 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v321, (uint64_t **)(*(_QWORD *)v14 + 8), (uint64_t **)(*(_QWORD *)&v325[0] + 8));
              goto LABEL_410;
            case 6:
              switch(*((_BYTE *)v12 + 28))
              {
                case 0:
                  if (*(_QWORD *)v14 == (uint64_t)(*(_QWORD *)&v325[0] << 8) >> 8 && !LODWORD(v325[1]))
                    goto LABEL_426;
                  goto LABEL_405;
                case 1:
                  v249 = vabdd_f64(*v14, (double)SLODWORD(v325[1]) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v325[0] << 8) >> 8));
LABEL_425:
                  if (v249 < 0.0000005)
                    goto LABEL_426;
                  goto LABEL_405;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_405;
                case 6:
                  if (((*(_QWORD *)&v325[0] ^ *(_QWORD *)v14) & 0xFFFFFFFFFFFFFFLL) == 0
                    && *((_DWORD *)v12 + 6) == LODWORD(v325[1]))
                  {
                    goto LABEL_426;
                  }
                  goto LABEL_405;
                default:
                  goto LABEL_563;
              }
            case 7:
              v243 = *((unsigned __int8 *)v12 + 28);
              if (v243 < 7 || v243 - 8 < 2)
                goto LABEL_405;
              if (v243 != 7)
                goto LABEL_563;
              goto LABEL_426;
            case 8:
              v247 = *((unsigned __int8 *)v12 + 28);
              if (v247 < 8 || v247 == 9)
                goto LABEL_405;
              if (v247 != 8)
                goto LABEL_563;
              v195 = turi::image_type::operator==(*(_QWORD *)v14 + 8, *(_QWORD *)&v325[0] + 8);
LABEL_410:
              if (v195)
                goto LABEL_426;
              goto LABEL_405;
            case 9:
              v196 = *((unsigned __int8 *)v12 + 28);
              if (v196 < 9)
                goto LABEL_405;
              if (v196 != 9)
                goto LABEL_563;
              v197 = *(_QWORD **)v14;
              if (*(_QWORD *)&v325[0] == *(_QWORD *)v14)
                goto LABEL_426;
              v316 = v325[0];
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v197 + 1), *(_QWORD *)&v325[0] + 8))goto LABEL_405;
              v199 = (char *)v197[3];
              v198 = (char *)v197[4];
              v200 = v198 - v199;
              if (v198 == v199)
                goto LABEL_426;
              if (!v197[1])
                goto LABEL_426;
              v201 = 1;
              do
              {
                v202 = *(_QWORD *)v199;
                v199 += 8;
                v201 *= v202;
              }
              while (v199 != v198);
              if (!v201)
                goto LABEL_426;
              v322 = 0;
              std::vector<unsigned long>::vector(&v323, v200 >> 3, &v322);
              v203 = v323;
              v204 = v324;
              v205 = **(_QWORD **)(*(_QWORD *)&v316 + 8);
              v206 = (char *)v324 - (char *)v323;
              v207 = v324 - v323;
              v208 = v207 - 1;
              if (v207 <= 1)
                v209 = 1;
              else
                v209 = v324 - v323;
              while (2)
              {
                if (v204 == v203)
                {
                  v217 = 0;
                  v218 = *(double *)(*(_QWORD *)v197[1] + 8 * v197[9]);
                }
                else
                {
                  v210 = 0;
                  v211 = (uint64_t *)v197[6];
                  v212 = v203;
                  v213 = v209;
                  do
                  {
                    v215 = *v212++;
                    v214 = v215;
                    v216 = *v211++;
                    v210 += v216 * v214;
                    --v213;
                  }
                  while (v213);
                  v217 = 0;
                  v218 = *(double *)(*(_QWORD *)v197[1] + 8 * (v197[9] + v210));
                  v219 = *(uint64_t **)(*(_QWORD *)&v316 + 48);
                  v220 = v203;
                  v221 = v209;
                  do
                  {
                    v223 = *v220++;
                    v222 = v223;
                    v224 = *v219++;
                    v217 += v224 * v222;
                    --v221;
                  }
                  while (v221);
                }
                v225 = *(double *)(v205 + 8 * (*(_QWORD *)(*(_QWORD *)&v316 + 72) + v217));
                if (v218 != v225)
                  goto LABEL_366;
                v226 = v207;
                v227 = v207 - 1;
                if (v206 < 1)
                  goto LABEL_360;
                v228 = v197[3];
                v229 = v203[v208] + 1;
                v203[v208] = v229;
                v230 = (v206 & 0xFFFFFFFFFFFFFFF8) - 16;
                v231 = v207 - 1;
                if (v229 < *(_QWORD *)(v228 + 8 * v208))
                {
                  v226 = 1;
                  v227 = v207 - 1;
LABEL_360:
                  if ((v227 & 0x8000000000000000) != 0)
                    goto LABEL_366;
LABEL_361:
                  if (!v226)
                    goto LABEL_366;
                  continue;
                }
                break;
              }
              do
              {
                *(uint64_t *)((char *)v203 + v230 + 8) = 0;
                if (v231 <= 0)
                {
                  v324 = v203;
                  operator delete(v203);
                  goto LABEL_426;
                }
                --v231;
                v232 = *(uint64_t *)((char *)v203 + v230) + 1;
                *(uint64_t *)((char *)v203 + v230) = v232;
                v233 = *(_QWORD *)(v228 + v230);
                v230 -= 8;
              }
              while (v232 >= v233);
              v226 = 1;
              if ((v231 & 0x8000000000000000) == 0)
                goto LABEL_361;
LABEL_366:
              if (v203)
              {
                v324 = v203;
                operator delete(v203);
              }
              if (v218 == v225)
                goto LABEL_426;
LABEL_405:
              v323 = v12 + 2;
              result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v318 + 232, (unsigned __int8 *)v12 + 16, (uint64_t)&std::piecewise_construct, (void **)&v323);
              break;
            default:
              goto LABEL_563;
          }
LABEL_406:
          *((_QWORD *)result + 4) += v13;
          v12 = (uint64_t *)*v12;
          if (!v12)
            goto LABEL_471;
          break;
        case 3:
          if (BYTE4(v325[1]) > 9u)
            goto LABEL_563;
          if (BYTE4(v325[1]) == 3)
          {
            v164 = *(double **)(*(_QWORD *)&v325[0] + 8);
            v165 = *(double **)(*(_QWORD *)&v325[0] + 16);
            v166 = v165 - v164;
            v167 = *(double **)(*(_QWORD *)v14 + 8);
            if (v166 == (uint64_t)(*(_QWORD *)(*(_QWORD *)v14 + 16) - (_QWORD)v167) >> 3)
            {
              if (v165 != v164)
              {
                if (v166 <= 1)
                  v168 = 1;
                else
                  v168 = v165 - v164;
                if (*v164 == *v167)
                {
                  v169 = 1;
                  do
                  {
                    v170 = v169;
                    if (v168 == v169)
                      break;
                    v171 = v164[v169];
                    v172 = v167[v169++];
                  }
                  while (v171 == v172);
                  v15 = v170 >= v166;
                  goto LABEL_262;
                }
                goto LABEL_322;
              }
LABEL_323:
              v15 = 1;
              goto LABEL_262;
            }
            goto LABEL_322;
          }
          v15 = 0;
LABEL_75:
          if (v7 > 9)
            goto LABEL_563;
          if (v7 != 3)
            goto LABEL_112;
          v61 = *(double **)(*(_QWORD *)&v6 + 8);
          v62 = *(double **)(*(_QWORD *)&v6 + 16);
          v63 = v62 - v61;
          v64 = *(double **)(*(_QWORD *)v14 + 8);
          if (v63 != (uint64_t)(*(_QWORD *)(*(_QWORD *)v14 + 16) - (_QWORD)v64) >> 3)
            goto LABEL_112;
          if (v62 == v61)
            goto LABEL_303;
          if (v63 <= 1)
            v65 = 1;
          else
            v65 = v62 - v61;
          if (*v61 == *v64)
          {
            v257 = 1;
            do
            {
              v258 = v257;
              if (v65 == v257)
                break;
              v259 = v61[v257];
              v260 = v64[v257++];
            }
            while (v259 == v260);
            v48 = v258 >= v63;
          }
          else
          {
            v48 = 0;
          }
          goto LABEL_329;
        case 4:
          if (BYTE4(v325[1]) > 9u)
            goto LABEL_563;
          if (BYTE4(v325[1]) == 4)
          {
            v162 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v321, (uint64_t *)(*(_QWORD *)&v325[0] + 8), (_QWORD *)(*(_QWORD *)v14 + 8));
            goto LABEL_250;
          }
          v15 = 0;
LABEL_25:
          if (v7 > 9)
            goto LABEL_563;
          if (v7 != 4)
            goto LABEL_112;
          v17 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v321, v319, (_QWORD *)(*(_QWORD *)v14 + 8));
          goto LABEL_192;
        case 5:
          if (BYTE4(v325[1]) > 9u)
            goto LABEL_563;
          if (BYTE4(v325[1]) == 5)
          {
            v162 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v321, (uint64_t **)(*(_QWORD *)&v325[0] + 8), (uint64_t **)(*(_QWORD *)v14 + 8));
LABEL_250:
            v15 = v162;
LABEL_262:
            switch(*((_BYTE *)v12 + 28))
            {
              case 0:
                goto LABEL_20;
              case 1:
                goto LABEL_92;
              case 2:
                goto LABEL_67;
              case 3:
                goto LABEL_75;
              case 4:
                goto LABEL_25;
              case 5:
                goto LABEL_97;
              case 6:
                goto LABEL_102;
              case 7:
                goto LABEL_86;
              case 8:
                goto LABEL_111;
              case 9:
                goto LABEL_30;
              default:
                goto LABEL_563;
            }
          }
          v15 = 0;
LABEL_97:
          if (v7 > 9)
            goto LABEL_563;
          if (v7 != 5)
            goto LABEL_112;
          v17 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v321, (uint64_t **)v319, (uint64_t **)(*(_QWORD *)v14 + 8));
          goto LABEL_192;
        case 6:
          switch(BYTE4(v325[1]))
          {
            case 0:
              v173 = *(_QWORD *)&v325[0] == v12[2] << 8 >> 8 && *((_DWORD *)v12 + 6) == 0;
              goto LABEL_259;
            case 1:
              v176 = vabdd_f64(v325[0], (double)*((int *)v12 + 6) / 1000000.0 + (double)(v12[2] << 8 >> 8));
LABEL_255:
              v15 = v176 < 0.0000005;
              goto LABEL_262;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              v15 = 0;
LABEL_102:
              switch(v7)
              {
                case 0u:
                  if (*(_QWORD *)&v6 != (uint64_t)(*(_QWORD *)v14 << 8) >> 8)
                    goto LABEL_112;
                  v16 = *((_DWORD *)v12 + 6) == 0;
                  break;
                case 1u:
                  v177 = vabdd_f64(v6, (double)*((int *)v12 + 6) / 1000000.0 + (double)(v12[2] << 8 >> 8));
LABEL_271:
                  v48 = v177 < 0.0000005;
                  goto LABEL_329;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_112;
                case 6u:
                  if (((*(_QWORD *)v14 ^ *(_QWORD *)&v6) & 0xFFFFFFFFFFFFFFLL) != 0)
                    goto LABEL_112;
                  v16 = v320 == *((_DWORD *)v12 + 6);
                  break;
                default:
                  goto LABEL_563;
              }
              goto LABEL_326;
            case 6:
              v173 = ((v12[2] ^ *(_QWORD *)&v325[0]) & 0xFFFFFFFFFFFFFFLL) == 0
                  && LODWORD(v325[1]) == *((_DWORD *)v12 + 6);
              goto LABEL_259;
            default:
              goto LABEL_563;
          }
        case 7:
          if (BYTE4(v325[1]) > 9u)
            goto LABEL_563;
          LOBYTE(v15) = BYTE4(v325[1]) == 7;
LABEL_86:
          if (v7 < 7 || v7 - 8 < 2)
            goto LABEL_112;
          if (v7 != 7)
            goto LABEL_563;
          goto LABEL_303;
        case 8:
          if (BYTE4(v325[1]) >= 8u && BYTE4(v325[1]) != 9)
          {
            if (BYTE4(v325[1]) == 8)
            {
              v162 = turi::image_type::operator==(*(_QWORD *)&v325[0] + 8, *(_QWORD *)v14 + 8);
              goto LABEL_250;
            }
            goto LABEL_563;
          }
          v15 = 0;
LABEL_111:
          if (v7 < 8 || v7 == 9)
            goto LABEL_112;
          if (v7 != 8)
            goto LABEL_563;
          v17 = turi::image_type::operator==((uint64_t)v319, *(_QWORD *)v14 + 8);
LABEL_192:
          v48 = v17;
          goto LABEL_329;
        case 9:
          if (BYTE4(v325[1]) >= 9u)
          {
            if (BYTE4(v325[1]) == 9)
            {
              v122 = v325[0];
              if (*(_QWORD *)v14 == *(_QWORD *)&v325[0])
                goto LABEL_323;
              v315 = *v14;
              v123 = (_QWORD *)(*(_QWORD *)&v325[0] + 8);
              if (turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v325[0] + 8, *(_QWORD *)v14 + 8))
              {
                v125 = *(char **)(*(_QWORD *)&v122 + 24);
                v124 = *(char **)(*(_QWORD *)&v122 + 32);
                v126 = v124 - v125;
                if (v124 != v125)
                {
                  if (*v123)
                  {
                    v127 = 1;
                    do
                    {
                      v128 = *(_QWORD *)v125;
                      v125 += 8;
                      v127 *= v128;
                    }
                    while (v125 != v124);
                    if (v127)
                    {
                      v322 = 0;
                      std::vector<unsigned long>::vector(&v323, v126 >> 3, &v322);
                      v129 = v323;
                      v130 = v324;
                      v131 = **(_QWORD **)(*(_QWORD *)&v315 + 8);
                      v132 = (char *)v324 - (char *)v323;
                      v133 = v324 - v323;
                      v134 = v133 - 1;
                      if (v133 <= 1)
                        v135 = 1;
                      else
                        v135 = v324 - v323;
                      do
                      {
                        if (v130 == v129)
                        {
                          v143 = 0;
                          v144 = *(double *)(**(_QWORD **)(*(_QWORD *)&v122 + 8)
                                           + 8 * *(_QWORD *)(*(_QWORD *)&v122 + 72));
                        }
                        else
                        {
                          v136 = 0;
                          v137 = *(uint64_t **)(*(_QWORD *)&v122 + 48);
                          v138 = v129;
                          v139 = v135;
                          do
                          {
                            v141 = *v138++;
                            v140 = v141;
                            v142 = *v137++;
                            v136 += v142 * v140;
                            --v139;
                          }
                          while (v139);
                          v143 = 0;
                          v144 = *(double *)(**(_QWORD **)(*(_QWORD *)&v122 + 8)
                                           + 8 * (*(_QWORD *)(*(_QWORD *)&v122 + 72) + v136));
                          v145 = *(uint64_t **)(*(_QWORD *)&v315 + 48);
                          v146 = v129;
                          v147 = v135;
                          do
                          {
                            v149 = *v146++;
                            v148 = v149;
                            v150 = *v145++;
                            v143 += v150 * v148;
                            --v147;
                          }
                          while (v147);
                        }
                        v151 = *(double *)(v131 + 8 * (*(_QWORD *)(*(_QWORD *)&v315 + 72) + v143));
                        v15 = v144 == v151;
                        if (v144 != v151)
                          break;
                        v152 = v133;
                        v153 = v133 - 1;
                        if (v132 < 1)
                          goto LABEL_215;
                        v154 = *(_QWORD *)(*(_QWORD *)&v122 + 24);
                        v155 = v129[v134] + 1;
                        v129[v134] = v155;
                        if (v155 < *(_QWORD *)(v154 + 8 * v134))
                        {
                          v152 = 1;
                          v153 = v133 - 1;
LABEL_215:
                          if ((v153 & 0x8000000000000000) != 0)
                            break;
                          continue;
                        }
                        v156 = v154 - 16;
                        v157 = v133;
                        v158 = (unint64_t *)((char *)v129 + (v132 & 0xFFFFFFFFFFFFFFF8) - 16);
                        do
                        {
                          v159 = v157 - 1;
                          v158[1] = 0;
                          if ((uint64_t)(v157 - 1) <= 0)
                          {
                            v15 = 1;
                            goto LABEL_468;
                          }
                          v160 = *v158 + 1;
                          *v158-- = v160;
                          v161 = *(_QWORD *)(v156 + 8 * v157--);
                        }
                        while (v160 >= v161);
                        v152 = 1;
                        if (((v159 - 1) & 0x8000000000000000) != 0)
                          break;
                      }
                      while (v152);
                      if (!v129)
                        goto LABEL_262;
LABEL_468:
                      v324 = v129;
                      operator delete(v129);
                      goto LABEL_262;
                    }
                  }
                }
                goto LABEL_323;
              }
LABEL_322:
              v15 = 0;
              goto LABEL_262;
            }
LABEL_563:
            turi::flexible_type_fail(0);
            __break(1u);
          }
          v15 = 0;
LABEL_30:
          if (v7 < 9)
            goto LABEL_112;
          if (v7 != 9)
            goto LABEL_563;
          if (*(_QWORD *)v14 == *(_QWORD *)&v6)
            goto LABEL_303;
          v18 = *v14;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v319, *(_QWORD *)v14 + 8))
            goto LABEL_112;
          v20 = *(char **)(*(_QWORD *)&v6 + 24);
          v19 = *(char **)(*(_QWORD *)&v6 + 32);
          v21 = v19 - v20;
          if (v19 == v20)
            goto LABEL_303;
          if (!*v319)
            goto LABEL_303;
          v22 = 1;
          do
          {
            v23 = *(_QWORD *)v20;
            v20 += 8;
            v22 *= v23;
          }
          while (v20 != v19);
          if (!v22)
            goto LABEL_303;
          v322 = 0;
          std::vector<unsigned long>::vector(&v323, v21 >> 3, &v322);
          v24 = v323;
          v25 = v324;
          v26 = v18;
          v27 = **(_QWORD **)(*(_QWORD *)&v18 + 8);
          v28 = (char *)v324 - (char *)v323;
          v29 = v324 - v323;
          v30 = v29 - 1;
          if (v29 <= 1)
            v31 = 1;
          else
            v31 = v324 - v323;
          do
          {
            if (v25 == v24)
            {
              v39 = 0;
              v40 = *(double *)(**(_QWORD **)(*(_QWORD *)&v6 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v6 + 72));
            }
            else
            {
              v32 = 0;
              v33 = *(uint64_t **)(*(_QWORD *)&v6 + 48);
              v34 = v24;
              v35 = v31;
              do
              {
                v37 = *v34++;
                v36 = v37;
                v38 = *v33++;
                v32 += v38 * v36;
                --v35;
              }
              while (v35);
              v39 = 0;
              v40 = *(double *)(**(_QWORD **)(*(_QWORD *)&v6 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v6 + 72) + v32));
              v41 = *(uint64_t **)(*(_QWORD *)&v26 + 48);
              v42 = v24;
              v43 = v31;
              do
              {
                v45 = *v42++;
                v44 = v45;
                v46 = *v41++;
                v39 += v46 * v44;
                --v43;
              }
              while (v43);
            }
            v47 = *(double *)(v27 + 8 * (*(_QWORD *)(*(_QWORD *)&v26 + 72) + v39));
            v48 = v40 == v47;
            if (v40 != v47)
              break;
            v49 = v29;
            v50 = v29 - 1;
            if (v28 >= 1)
            {
              v51 = *(_QWORD *)(*(_QWORD *)&v6 + 24);
              v52 = v24[v30] + 1;
              v24[v30] = v52;
              if (v52 >= *(_QWORD *)(v51 + 8 * v30))
              {
                v53 = v51 - 16;
                v54 = v29;
                v55 = (unint64_t *)((char *)v24 + (v28 & 0xFFFFFFFFFFFFFFF8) - 16);
                do
                {
                  v56 = v54 - 1;
                  v55[1] = 0;
                  if ((uint64_t)(v54 - 1) <= 0)
                  {
                    v48 = 1;
                    goto LABEL_466;
                  }
                  v57 = *v55 + 1;
                  *v55-- = v57;
                  v58 = *(_QWORD *)(v53 + 8 * v54--);
                }
                while (v57 >= v58);
                v49 = 1;
                if (((v56 - 1) & 0x8000000000000000) == 0)
                  continue;
                break;
              }
              v49 = 1;
              v50 = v29 - 1;
            }
            if ((v50 & 0x8000000000000000) != 0)
              break;
          }
          while (v49);
          if (v24)
          {
LABEL_466:
            v324 = v24;
            operator delete(v24);
          }
          goto LABEL_329;
        default:
          goto LABEL_563;
      }
    }
  }
  return result;
}

void sub_21848E4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27)
{
  _Unwind_Resume(exception_object);
}

void turi::evaluation::precision_recall_base::get_reference_label(turi::evaluation::precision_recall_base *this@<X0>, unsigned __int8 *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t *v3;
  double *v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  double v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t *v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  size_t v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  double *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  double v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  double v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  void *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  int v101;
  unint64_t *v103;
  unint64_t v104;
  uint64_t *v105;
  double *v106;
  unsigned int v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void **v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  void **v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  uint64_t *v133;
  void **v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unsigned int v147;
  uint64_t v149;
  size_t v150;
  unsigned int v151;
  unint64_t *v152;
  unint64_t *v153;
  unint64_t v154;
  double *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  double v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  int v165;
  unsigned int v166;
  _BOOL4 v167;
  unsigned int v169;
  unint64_t *v171;
  const void *v172;
  size_t v173;
  unsigned int v174;
  unint64_t *v175;
  double *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  double v182;
  double v183;
  BOOL v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t *v189;
  void *v190;
  unint64_t *v191;
  uint64_t v192;
  uint64_t v195;
  unsigned __int8 *v196;
  unsigned __int8 *v197;
  int v198;
  size_t v199;
  const void *v200;
  size_t v201;
  int v202;
  int v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t *v215;
  void *v216;
  void *v217;
  unsigned int v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t *v225;
  double v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  char v239;
  uint64_t v240;
  void **v241;
  void **v242;

  *(_QWORD *)a2 = 0;
  *((_DWORD *)a2 + 2) = 0;
  a2[12] = 0;
  v3 = (uint64_t *)*((_QWORD *)this + 7);
  if (!v3)
    return;
  while (2)
  {
    v6 = (double *)(v3 + 2);
    switch(byte_254FF478C)
    {
      case 0:
        switch(*((_BYTE *)v3 + 28))
        {
          case 0:
            if (*(_QWORD *)v6 != turi::FLEX_UNDEFINED)
              goto LABEL_106;
            goto LABEL_100;
          case 1:
            a3.n128_f64[0] = *v6;
            v61 = turi::FLEX_UNDEFINED;
            goto LABEL_73;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_106;
          case 6:
            if (turi::FLEX_UNDEFINED != (uint64_t)(*(_QWORD *)v6 << 8) >> 8 || *((_DWORD *)v3 + 6))
              goto LABEL_106;
            goto LABEL_100;
          default:
            goto LABEL_443;
        }
      case 1:
        switch(*((_BYTE *)v3 + 28))
        {
          case 0:
            a3.n128_u64[0] = turi::FLEX_UNDEFINED;
            v61 = *(_QWORD *)v6;
LABEL_73:
            v64 = (double)v61;
            goto LABEL_74;
          case 1:
            a3.n128_f64[0] = *v6;
            v64 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_74:
            if (a3.n128_f64[0] != v64)
              goto LABEL_106;
            goto LABEL_100;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_106;
          case 6:
            a3.n128_f64[0] = vabdd_f64((double)*((int *)v3 + 6) / 1000000.0 + (double)(v3[2] << 8 >> 8), *(double *)&turi::FLEX_UNDEFINED);
            goto LABEL_81;
          default:
            goto LABEL_443;
        }
      case 2:
        v48 = *((unsigned __int8 *)v3 + 28);
        if (v48 != 2)
        {
          if (v48 <= 9 && v48 != 2)
            goto LABEL_106;
LABEL_443:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
        }
        v49 = *(_QWORD *)v6;
        if (*(char *)(*(_QWORD *)v6 + 31) < 0)
          v50 = *(_QWORD *)(v49 + 16);
        else
          v50 = *(unsigned __int8 *)(*(_QWORD *)v6 + 31);
        if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
          v65 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
        else
          v65 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
        if (v50 != v65)
          goto LABEL_106;
        v66 = (unsigned __int8 *)(v49 + 8);
        if ((*(_BYTE *)(*(_QWORD *)v6 + 31) & 0x80) != 0)
          v66 = *(unsigned __int8 **)v66;
        v67 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
        if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) == 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)v6 + 31) & 0x80) == 0)
            goto LABEL_92;
          goto LABEL_97;
        }
        v67 = *(unsigned __int8 **)v67;
        if ((*(_BYTE *)(*(_QWORD *)v6 + 31) & 0x80) != 0)
        {
LABEL_97:
          if (memcmp(v66, v67, v50))
            goto LABEL_106;
LABEL_100:
          v3 = (uint64_t *)*v3;
          if (!v3)
            goto LABEL_184;
          continue;
        }
LABEL_92:
        if (!v50)
          goto LABEL_100;
        while (*v66 == *v67)
        {
          ++v66;
          ++v67;
          if (!--v50)
            goto LABEL_100;
        }
LABEL_106:
        if (v6 != (double *)a2)
        {
          switch(a2[12])
          {
            case 2u:
              v69 = *(unint64_t **)a2;
              do
              {
                v70 = __ldaxr(v69);
                v71 = v70 - 1;
              }
              while (__stlxr(v71, v69));
              if (!v71)
              {
                v72 = *(unint64_t **)a2;
                if (!*(_QWORD *)a2)
                  goto LABEL_177;
                if (*((char *)v72 + 31) < 0)
                  operator delete((void *)v72[1]);
                v73 = v72;
                v74 = 0x1012C404EF22A49;
                goto LABEL_176;
              }
              break;
            case 3u:
              v88 = *(unint64_t **)a2;
              do
              {
                v89 = __ldaxr(v88);
                v90 = v89 - 1;
              }
              while (__stlxr(v90, v88));
              if (!v90)
              {
                v91 = *(unint64_t **)a2;
                if (!*(_QWORD *)a2)
                  goto LABEL_177;
                v92 = (void *)v91[1];
                if (v92)
                {
                  v91[2] = (unint64_t)v92;
                  operator delete(v92);
                }
                v73 = v91;
                v74 = 0x1080C409938AC02;
                goto LABEL_176;
              }
              break;
            case 4u:
              v80 = *(unint64_t **)a2;
              do
              {
                v81 = __ldaxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
              {
                v83 = *(unint64_t **)a2;
                if (!*(_QWORD *)a2)
                  goto LABEL_177;
                v241 = (void **)(v83 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v241);
                goto LABEL_169;
              }
              break;
            case 5u:
              v93 = *(unint64_t **)a2;
              do
              {
                v94 = __ldaxr(v93);
                v95 = v94 - 1;
              }
              while (__stlxr(v95, v93));
              if (!v95)
              {
                v83 = *(unint64_t **)a2;
                if (!*(_QWORD *)a2)
                  goto LABEL_177;
                v241 = (void **)(v83 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v241);
LABEL_169:
                v73 = v83;
                v74 = 0x1020C405E66F15BLL;
                goto LABEL_176;
              }
              break;
            case 8u:
              v96 = *(unint64_t **)a2;
              do
              {
                v97 = __ldaxr(v96);
                v98 = v97 - 1;
              }
              while (__stlxr(v98, v96));
              if (!v98)
              {
                v99 = *(unint64_t **)a2;
                if (!*(_QWORD *)a2)
                  goto LABEL_177;
                boost::detail::shared_count::~shared_count((unsigned int **)v99 + 2);
                v73 = v99;
                v87 = -235920773;
                goto LABEL_175;
              }
              break;
            case 9u:
              v84 = *(unint64_t **)a2;
              do
              {
                v85 = __ldaxr(v84);
                v86 = v85 - 1;
              }
              while (__stlxr(v86, v84));
              if (!v86)
              {
                if (*(_QWORD *)a2)
                {
                  v73 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a2);
                  v87 = 2071181815;
LABEL_175:
                  v74 = v87 | 0x1030C4000000000;
LABEL_176:
                  MEMORY[0x219A19A08](v73, v74);
                }
LABEL_177:
                *(_QWORD *)a2 = 0;
              }
              break;
            default:
              break;
          }
          v100 = *(_QWORD *)v6;
          *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)v3 + 21);
          *(_QWORD *)a2 = v100;
          LODWORD(v100) = *((unsigned __int8 *)v3 + 28);
          a2[12] = v100;
          v181 = v100 > 9;
          v101 = (1 << v100) & 0x33C;
          if (!v181 && v101 != 0)
          {
            v103 = *(unint64_t **)a2;
            do
              v104 = __ldaxr(v103);
            while (__stlxr(v104 + 1, v103));
          }
        }
LABEL_184:
        v105 = (uint64_t *)*((_QWORD *)this + 7);
        if (!v105)
          return;
        while (2)
        {
          v106 = (double *)(v105 + 2);
          switch(byte_254FF478C)
          {
            case 0:
              switch(*((_BYTE *)v105 + 28))
              {
                case 0:
                  if (*(_QWORD *)v106 == turi::FLEX_UNDEFINED)
                    goto LABEL_265;
                  goto LABEL_262;
                case 1:
                  a3.n128_f64[0] = *v106;
                  v161 = turi::FLEX_UNDEFINED;
                  goto LABEL_316;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_262;
                case 6:
                  if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v106 << 8) >> 8 && !*((_DWORD *)v105 + 6))
                    goto LABEL_265;
                  goto LABEL_262;
                default:
                  goto LABEL_443;
              }
            case 1:
              switch(*((_BYTE *)v105 + 28))
              {
                case 0:
                  a3.n128_u64[0] = turi::FLEX_UNDEFINED;
                  v161 = *(_QWORD *)v106;
LABEL_316:
                  v182 = (double)v161;
                  goto LABEL_317;
                case 1:
                  a3.n128_f64[0] = *v106;
                  v182 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_317:
                  if (a3.n128_f64[0] != v182)
                    goto LABEL_262;
                  goto LABEL_265;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_262;
                case 6:
                  a3.n128_f64[0] = vabdd_f64((double)*((int *)v105 + 6) / 1000000.0 + (double)(v105[2] << 8 >> 8), *(double *)&turi::FLEX_UNDEFINED);
                  goto LABEL_321;
                default:
                  goto LABEL_443;
              }
            case 2:
              v147 = *((unsigned __int8 *)v105 + 28);
              if (v147 - 3 < 7 || v147 < 2)
                goto LABEL_262;
              if (v147 != 2)
                goto LABEL_443;
              v149 = *(_QWORD *)v106;
              if (*(char *)(*(_QWORD *)v106 + 31) < 0)
                v150 = *(_QWORD *)(v149 + 16);
              else
                v150 = *(unsigned __int8 *)(*(_QWORD *)v106 + 31);
              if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
                v195 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
              else
                v195 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
              if (v150 != v195)
                goto LABEL_262;
              v196 = (unsigned __int8 *)(v149 + 8);
              if ((*(_BYTE *)(*(_QWORD *)v106 + 31) & 0x80) != 0)
                v196 = *(unsigned __int8 **)v196;
              v197 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
              if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
                v197 = *(unsigned __int8 **)v197;
              if ((*(_BYTE *)(*(_QWORD *)v106 + 31) & 0x80) != 0)
              {
                if (memcmp(v196, v197, v150))
                  goto LABEL_262;
              }
              else
              {
                if (!v150)
                  goto LABEL_265;
                do
                {
                  if (*v196 != *v197)
                    goto LABEL_262;
                  ++v196;
                  ++v197;
                  --v150;
                }
                while (v150);
              }
              goto LABEL_265;
            case 3:
              v151 = *((unsigned __int8 *)v105 + 28);
              if (v151 > 9)
                goto LABEL_443;
              if (v151 != 3)
                goto LABEL_262;
              v152 = *(unint64_t **)(*(_QWORD *)v106 + 8);
              v153 = *(unint64_t **)(*(_QWORD *)v106 + 16);
              v154 = v153 - v152;
              v155 = *(double **)(turi::FLEX_UNDEFINED + 8);
              if (v154 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v155) >> 3)
                goto LABEL_262;
              if (v153 == v152)
                goto LABEL_265;
              if (v154 <= 1)
                v156 = 1;
              else
                v156 = v153 - v152;
              a3.n128_u64[0] = *v152;
              if (*(double *)v152 == *v155)
              {
                v157 = 1;
                do
                {
                  v158 = v157;
                  if (v156 == v157)
                    break;
                  a3.n128_u64[0] = v152[v157];
                  v159 = v155[v157++];
                }
                while (a3.n128_f64[0] == v159);
                v108 = v158 >= v154;
LABEL_306:
                if ((v108 & 1) != 0)
                  goto LABEL_265;
              }
              goto LABEL_262;
            case 4:
              v107 = *((unsigned __int8 *)v105 + 28);
              if (v107 > 9)
                goto LABEL_443;
              if (v107 != 4)
                goto LABEL_262;
              v108 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v239, (uint64_t *)(*(_QWORD *)v106 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
              goto LABEL_306;
            case 5:
              v162 = *((unsigned __int8 *)v105 + 28);
              if (v162 > 9)
                goto LABEL_443;
              if (v162 != 5)
                goto LABEL_262;
              v108 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v239, (uint64_t **)(*(_QWORD *)v106 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
              goto LABEL_306;
            case 6:
              switch(*((_BYTE *)v105 + 28))
              {
                case 0:
                  if (*(_QWORD *)v106 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF4788)
                    goto LABEL_265;
                  goto LABEL_262;
                case 1:
                  a3.n128_f64[0] = vabdd_f64(*v106, (double)dword_254FF4788 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_321:
                  if (a3.n128_f64[0] < 0.0000005)
                    goto LABEL_265;
                  goto LABEL_262;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_262;
                case 6:
                  if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v106) & 0xFFFFFFFFFFFFFFLL) == 0
                    && *((_DWORD *)v105 + 6) == dword_254FF4788)
                  {
                    goto LABEL_265;
                  }
                  goto LABEL_262;
                default:
                  goto LABEL_443;
              }
            case 7:
              v160 = *((unsigned __int8 *)v105 + 28);
              if (v160 < 7 || v160 - 8 < 2)
                goto LABEL_262;
              if (v160 != 7)
                goto LABEL_443;
              goto LABEL_265;
            case 8:
              v163 = *((unsigned __int8 *)v105 + 28);
              if (v163 < 8 || v163 == 9)
                goto LABEL_262;
              if (v163 != 8)
                goto LABEL_443;
              v108 = turi::image_type::operator==(*(_QWORD *)v106 + 8, turi::FLEX_UNDEFINED + 8);
              goto LABEL_306;
            case 9:
              v109 = *((unsigned __int8 *)v105 + 28);
              if (v109 < 9)
                goto LABEL_262;
              if (v109 != 9)
                goto LABEL_443;
              v110 = turi::FLEX_UNDEFINED;
              v111 = *(_QWORD **)v106;
              if (turi::FLEX_UNDEFINED == *(_QWORD *)v106)
                goto LABEL_265;
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v111 + 1), turi::FLEX_UNDEFINED + 8))
                goto LABEL_262;
              v113 = (char *)v111[3];
              v112 = (char *)v111[4];
              v114 = v112 - v113;
              if (v112 == v113)
                goto LABEL_265;
              if (!v111[1])
                goto LABEL_265;
              v115 = 1;
              do
              {
                v116 = *(_QWORD *)v113;
                v113 += 8;
                v115 *= v116;
              }
              while (v113 != v112);
              if (!v115)
                goto LABEL_265;
              v240 = 0;
              std::vector<unsigned long>::vector(&v241, v114 >> 3, &v240);
              v117 = v241;
              v118 = v242;
              v119 = **(_QWORD **)(v110 + 8);
              v120 = (char *)v242 - (char *)v241;
              v121 = v242 - v241;
              v122 = v121 - 1;
              if (v121 <= 1)
                v123 = 1;
              else
                v123 = v242 - v241;
              break;
            default:
              goto LABEL_443;
          }
          while (2)
          {
            if (v118 == v117)
            {
              v131 = 0;
              v132 = *(double *)(*(_QWORD *)v111[1] + 8 * v111[9]);
            }
            else
            {
              v124 = 0;
              v125 = (uint64_t *)v111[6];
              v126 = v117;
              v127 = v123;
              do
              {
                v129 = (uint64_t)*v126++;
                v128 = v129;
                v130 = *v125++;
                v124 += v130 * v128;
                --v127;
              }
              while (v127);
              v131 = 0;
              v132 = *(double *)(*(_QWORD *)v111[1] + 8 * (v111[9] + v124));
              v133 = *(uint64_t **)(v110 + 48);
              v134 = v117;
              v135 = v123;
              do
              {
                v137 = (uint64_t)*v134++;
                v136 = v137;
                v138 = *v133++;
                v131 += v138 * v136;
                --v135;
              }
              while (v135);
            }
            v139 = *(double *)(v119 + 8 * (*(_QWORD *)(v110 + 72) + v131));
            if (v132 != v139)
            {
LABEL_220:
              if (v117)
              {
                v242 = v117;
                operator delete(v117);
              }
              if (v132 != v139)
              {
LABEL_262:
                v165 = *((unsigned __int8 *)v105 + 28);
                switch(*((_BYTE *)v105 + 28))
                {
                  case 0:
                    switch(a2[12])
                    {
                      case 0u:
                        if (*(_QWORD *)a2 >= *(_QWORD *)v106)
                          goto LABEL_265;
                        goto LABEL_325;
                      case 1u:
                        a3.n128_u64[0] = *(_QWORD *)a2;
                        v183 = (double)*(uint64_t *)v106;
                        goto LABEL_339;
                      case 2u:
                      case 3u:
                      case 4u:
                      case 5u:
                      case 7u:
                      case 8u:
                      case 9u:
                        goto LABEL_264;
                      case 6u:
                        if (*(_QWORD *)v106 > (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
                          goto LABEL_325;
                        goto LABEL_265;
                      default:
                        goto LABEL_443;
                    }
                  case 1:
                    switch(a2[12])
                    {
                      case 0u:
                        a3.n128_f64[0] = *v106;
                        v181 = *v106 <= (double)*(uint64_t *)a2;
                        goto LABEL_346;
                      case 1u:
                        a3.n128_u64[0] = *(_QWORD *)a2;
                        v183 = *v106;
LABEL_339:
                        v184 = a3.n128_f64[0] < v183;
                        goto LABEL_340;
                      case 2u:
                      case 3u:
                      case 4u:
                      case 5u:
                      case 7u:
                      case 8u:
                      case 9u:
                        goto LABEL_264;
                      case 6u:
                        a3.n128_f64[0] = *v106;
                        v184 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) < *v106;
LABEL_340:
                        if (v184 && v106 != (double *)a2)
                          goto LABEL_422;
                        goto LABEL_265;
                      default:
                        goto LABEL_443;
                    }
                  case 2:
                    v169 = a2[12];
                    if (v169 - 3 < 7 || v169 < 2)
                      goto LABEL_264;
                    if (v169 != 2)
                      goto LABEL_443;
                    v171 = *(unint64_t **)a2;
                    if (*(char *)(*(_QWORD *)a2 + 31) < 0)
                    {
                      v172 = (const void *)v171[1];
                      v173 = v171[2];
                    }
                    else
                    {
                      v172 = v171 + 1;
                      v173 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
                    }
                    v198 = *(char *)(*(_QWORD *)v106 + 31);
                    if (v198 >= 0)
                      v199 = *(unsigned __int8 *)(*(_QWORD *)v106 + 31);
                    else
                      v199 = *(_QWORD *)(*(_QWORD *)v106 + 16);
                    if (v198 >= 0)
                      v200 = (const void *)(*(_QWORD *)v106 + 8);
                    else
                      v200 = *(const void **)(*(_QWORD *)v106 + 8);
                    if (v199 >= v173)
                      v201 = v173;
                    else
                      v201 = v199;
                    v202 = memcmp(v172, v200, v201);
                    if (v173 >= v199)
                      v203 = 0;
                    else
                      v203 = -1;
                    if (v202)
                      v203 = v202;
                    if ((v203 & 0x80000000) == 0 || v106 == (double *)a2)
                      goto LABEL_265;
LABEL_385:
                    v204 = *(unint64_t **)a2;
                    do
                    {
                      v205 = __ldaxr(v204);
                      v206 = v205 - 1;
                    }
                    while (__stlxr(v206, v204));
                    if (v206)
                      goto LABEL_422;
                    v207 = *(unint64_t **)a2;
                    if (!*(_QWORD *)a2)
                      goto LABEL_421;
                    if (*((char *)v207 + 31) < 0)
                      operator delete((void *)v207[1]);
                    v191 = v207;
                    v192 = 0x1012C404EF22A49;
                    goto LABEL_420;
                  case 3:
                    v174 = a2[12];
                    if (v174 > 9)
                      goto LABEL_443;
                    if (v174 != 3)
                      goto LABEL_264;
                    v175 = *(unint64_t **)(*(_QWORD *)a2 + 8);
                    v176 = *(double **)(*(_QWORD *)v106 + 8);
                    v177 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v106 + 16) - (_QWORD)v176) >> 3;
                    v178 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v175) >> 3;
                    if (*(unint64_t **)(*(_QWORD *)a2 + 16) == v175)
                      goto LABEL_293;
                    if (v178 <= 1)
                      v179 = 1;
                    else
                      v179 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v175) >> 3;
                    v180 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v106 + 16) - (_QWORD)v176) >> 3;
                    break;
                  case 4:
                    v166 = a2[12];
                    if (v166 > 9)
                      goto LABEL_443;
                    if (v166 != 4)
                    {
LABEL_264:
                      turi::flexible_type_fail(0);
                      goto LABEL_265;
                    }
                    v167 = turi::flexible_type_impl::lt_operator::operator()(a3, (uint64_t)&v241, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(*(_QWORD *)v106 + 8));
                    if (v106 == (double *)a2 || !v167)
                      goto LABEL_265;
                    v165 = a2[12];
                    goto LABEL_330;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                    if (a2[12] < 0xAu)
                      goto LABEL_264;
                    goto LABEL_443;
                  case 6:
                    switch(a2[12])
                    {
                      case 0u:
                        if (*(_QWORD *)a2 >= (uint64_t)(*(_QWORD *)v106 << 8) >> 8)
                          goto LABEL_265;
                        goto LABEL_325;
                      case 1u:
                        a3.n128_u64[0] = *(_QWORD *)a2;
                        v181 = (double)*((int *)v105 + 6) / 1000000.0 + (double)(v105[2] << 8 >> 8) <= *(double *)a2;
LABEL_346:
                        if (!v181 && v106 != (double *)a2)
                          goto LABEL_422;
                        goto LABEL_265;
                      case 2u:
                      case 3u:
                      case 4u:
                      case 5u:
                      case 7u:
                      case 8u:
                      case 9u:
                        goto LABEL_264;
                      case 6u:
                        v185 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
                        if (v185 < (uint64_t)(*(_QWORD *)v106 << 8) >> 8)
                          goto LABEL_329;
                        if (v185 != (uint64_t)(*(_QWORD *)v106 << 8) >> 8
                          || *((_DWORD *)a2 + 2) >= *((_DWORD *)v105 + 6))
                        {
                          goto LABEL_265;
                        }
LABEL_325:
                        if (v106 == (double *)a2)
                          goto LABEL_265;
                        goto LABEL_422;
                      default:
                        goto LABEL_443;
                    }
                  default:
                    goto LABEL_443;
                }
                while (1)
                {
                  if (!v180)
                    goto LABEL_265;
                  a3.n128_u64[0] = *v175;
                  if (*(double *)v175 > *v176)
                    goto LABEL_265;
                  if (*(double *)v175 < *v176)
                    break;
                  --v180;
                  ++v175;
                  ++v176;
                  if (!--v179)
                  {
LABEL_293:
                    if (v178 >= v177 || v106 == (double *)a2)
                      goto LABEL_265;
LABEL_331:
                    v186 = *(unint64_t **)a2;
                    do
                    {
                      v187 = __ldaxr(v186);
                      v188 = v187 - 1;
                    }
                    while (__stlxr(v188, v186));
                    if (!v188)
                    {
                      v189 = *(unint64_t **)a2;
                      if (*(_QWORD *)a2)
                      {
                        v190 = (void *)v189[1];
                        if (v190)
                        {
                          v189[2] = (unint64_t)v190;
                          operator delete(v190);
                        }
                        v191 = v189;
                        v192 = 0x1080C409938AC02;
                        goto LABEL_420;
                      }
                      goto LABEL_421;
                    }
                    goto LABEL_422;
                  }
                }
LABEL_329:
                if (v106 == (double *)a2)
                  goto LABEL_265;
LABEL_330:
                switch(v165)
                {
                  case 2:
                    goto LABEL_385;
                  case 3:
                    goto LABEL_331;
                  case 4:
                    v208 = *(unint64_t **)a2;
                    do
                    {
                      v209 = __ldaxr(v208);
                      v210 = v209 - 1;
                    }
                    while (__stlxr(v210, v208));
                    if (v210)
                      goto LABEL_422;
                    v211 = *(unint64_t **)a2;
                    if (!*(_QWORD *)a2)
                      goto LABEL_421;
                    v241 = (void **)(v211 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v241);
                    goto LABEL_413;
                  case 5:
                    v219 = *(unint64_t **)a2;
                    do
                    {
                      v220 = __ldaxr(v219);
                      v221 = v220 - 1;
                    }
                    while (__stlxr(v221, v219));
                    if (v221)
                      goto LABEL_422;
                    v211 = *(unint64_t **)a2;
                    if (!*(_QWORD *)a2)
                      goto LABEL_421;
                    v241 = (void **)(v211 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v241);
LABEL_413:
                    v191 = v211;
                    v192 = 0x1020C405E66F15BLL;
                    break;
                  case 8:
                    v222 = *(unint64_t **)a2;
                    do
                    {
                      v223 = __ldaxr(v222);
                      v224 = v223 - 1;
                    }
                    while (__stlxr(v224, v222));
                    if (v224)
                      goto LABEL_422;
                    v225 = *(unint64_t **)a2;
                    if (!*(_QWORD *)a2)
                      goto LABEL_421;
                    boost::detail::shared_count::~shared_count((unsigned int **)v225 + 2);
                    v191 = v225;
                    v218 = -235920773;
                    goto LABEL_419;
                  case 9:
                    v212 = *(unint64_t **)a2;
                    do
                    {
                      v213 = __ldaxr(v212);
                      v214 = v213 - 1;
                    }
                    while (__stlxr(v214, v212));
                    if (v214)
                      goto LABEL_422;
                    v215 = *(unint64_t **)a2;
                    if (!*(_QWORD *)a2)
                      goto LABEL_421;
                    v216 = (void *)v215[6];
                    if (v216)
                    {
                      v215[7] = (unint64_t)v216;
                      operator delete(v216);
                    }
                    v217 = (void *)v215[3];
                    if (v217)
                    {
                      v215[4] = (unint64_t)v217;
                      operator delete(v217);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v215 + 1));
                    v191 = v215;
                    v218 = 2071181815;
LABEL_419:
                    v192 = v218 | 0x1030C4000000000;
                    break;
                  default:
                    goto LABEL_422;
                }
LABEL_420:
                MEMORY[0x219A19A08](v191, v192);
LABEL_421:
                *(_QWORD *)a2 = 0;
LABEL_422:
                v226 = *v106;
                *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)v105 + 21);
                *(double *)a2 = v226;
                LODWORD(v226) = *((unsigned __int8 *)v105 + 28);
                a2[12] = LOBYTE(v226);
                switch(LODWORD(v226))
                {
                  case 2:
                    v227 = *(unint64_t **)a2;
                    do
                      v228 = __ldaxr(v227);
                    while (__stlxr(v228 + 1, v227));
                    break;
                  case 3:
                    v233 = *(unint64_t **)a2;
                    do
                      v234 = __ldaxr(v233);
                    while (__stlxr(v234 + 1, v233));
                    break;
                  case 4:
                    v229 = *(unint64_t **)a2;
                    do
                      v230 = __ldaxr(v229);
                    while (__stlxr(v230 + 1, v229));
                    break;
                  case 5:
                    v235 = *(unint64_t **)a2;
                    do
                      v236 = __ldaxr(v235);
                    while (__stlxr(v236 + 1, v235));
                    break;
                  case 8:
                    v237 = *(unint64_t **)a2;
                    do
                      v238 = __ldaxr(v237);
                    while (__stlxr(v238 + 1, v237));
                    break;
                  case 9:
                    v231 = *(unint64_t **)a2;
                    do
                      v232 = __ldaxr(v231);
                    while (__stlxr(v232 + 1, v231));
                    break;
                  default:
                    goto LABEL_265;
                }
                goto LABEL_265;
              }
              goto LABEL_265;
            }
            v140 = v121;
            v141 = v121 - 1;
            if (v120 < 1)
            {
LABEL_218:
              if (v141 < 0 || !v140)
                goto LABEL_220;
              continue;
            }
            break;
          }
          v142 = v111[3];
          v143 = (unint64_t)v117[v122] + 1;
          v117[v122] = (void *)v143;
          v144 = (v120 & 0xFFFFFFFFFFFFFFF8) - 16;
          v141 = v121 - 1;
          if (v143 < *(_QWORD *)(v142 + 8 * v122))
          {
            v140 = 1;
            v141 = v121 - 1;
            goto LABEL_218;
          }
          while (1)
          {
            *(void **)((char *)v117 + v144 + 8) = 0;
            if (v141 <= 0)
              break;
            --v141;
            v145 = *(unint64_t *)((char *)v117 + v144) + 1;
            *(void **)((char *)v117 + v144) = (void *)v145;
            v146 = *(_QWORD *)(v142 + v144);
            v144 -= 8;
            if (v145 < v146)
            {
              v140 = 1;
              goto LABEL_218;
            }
          }
          v242 = v117;
          operator delete(v117);
LABEL_265:
          v105 = (uint64_t *)*v105;
          if (v105)
            continue;
          return;
        }
      case 3:
        v51 = *((unsigned __int8 *)v3 + 28);
        if (v51 == 3)
        {
          v52 = *(unint64_t **)(*(_QWORD *)v6 + 8);
          v53 = *(unint64_t **)(*(_QWORD *)v6 + 16);
          v54 = v53 - v52;
          v55 = *(double **)(turi::FLEX_UNDEFINED + 8);
          if (v54 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v55) >> 3)
            goto LABEL_106;
          if (v53 == v52)
            goto LABEL_100;
          if (v54 <= 1)
            v56 = 1;
          else
            v56 = v53 - v52;
          a3.n128_u64[0] = *v52;
          if (*(double *)v52 != *v55)
            goto LABEL_106;
          v57 = 1;
          do
          {
            v58 = v57;
            if (v56 == v57)
              break;
            a3.n128_u64[0] = v52[v57];
            v59 = v55[v57++];
          }
          while (a3.n128_f64[0] == v59);
          v8 = v58 >= v54;
LABEL_66:
          if ((v8 & 1) == 0)
            goto LABEL_106;
          goto LABEL_100;
        }
        if (v51 <= 9 && v51 != 3)
          goto LABEL_106;
        goto LABEL_443;
      case 4:
        v7 = *((unsigned __int8 *)v3 + 28);
        if (v7 != 4)
        {
          if (v7 <= 9 && v7 != 4)
            goto LABEL_106;
          goto LABEL_443;
        }
        v8 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v239, (uint64_t *)(*(_QWORD *)v6 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_66;
      case 5:
        v62 = *((unsigned __int8 *)v3 + 28);
        if (v62 != 5)
        {
          if (v62 <= 9 && v62 != 5)
            goto LABEL_106;
          goto LABEL_443;
        }
        v8 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v239, (uint64_t **)(*(_QWORD *)v6 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_66;
      case 6:
        switch(*((_BYTE *)v3 + 28))
        {
          case 0:
            if (*(_QWORD *)v6 != turi::FLEX_UNDEFINED << 8 >> 8 || dword_254FF4788)
              goto LABEL_106;
            goto LABEL_100;
          case 1:
            a3.n128_f64[0] = vabdd_f64(*v6, (double)dword_254FF4788 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_81:
            if (a3.n128_f64[0] >= 0.0000005)
              goto LABEL_106;
            goto LABEL_100;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_106;
          case 6:
            if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v6) & 0xFFFFFFFFFFFFFFLL) != 0
              || *((_DWORD *)v3 + 6) != dword_254FF4788)
            {
              goto LABEL_106;
            }
            goto LABEL_100;
          default:
            goto LABEL_443;
        }
      case 7:
        v60 = *((unsigned __int8 *)v3 + 28);
        if (v60 == 7)
          goto LABEL_100;
        if (v60 <= 9 && v60 != 7)
          goto LABEL_106;
        goto LABEL_443;
      case 8:
        v63 = *((unsigned __int8 *)v3 + 28);
        if (v63 != 8)
        {
          if (v63 <= 9 && v63 != 8)
            goto LABEL_106;
          goto LABEL_443;
        }
        v8 = turi::image_type::operator==(*(_QWORD *)v6 + 8, turi::FLEX_UNDEFINED + 8);
        goto LABEL_66;
      case 9:
        v9 = *((unsigned __int8 *)v3 + 28);
        if (v9 == 9)
        {
          v10 = turi::FLEX_UNDEFINED;
          v11 = *v6;
          if (turi::FLEX_UNDEFINED != *(_QWORD *)v6)
          {
            if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v11 + 8, turi::FLEX_UNDEFINED + 8))
              goto LABEL_106;
            v13 = *(char **)(*(_QWORD *)&v11 + 24);
            v12 = *(char **)(*(_QWORD *)&v11 + 32);
            v14 = v12 - v13;
            if (v12 != v13)
            {
              if (*(_QWORD *)(*(_QWORD *)&v11 + 8))
              {
                v15 = 1;
                do
                {
                  v16 = *(_QWORD *)v13;
                  v13 += 8;
                  v15 *= v16;
                }
                while (v13 != v12);
                if (v15)
                {
                  v240 = 0;
                  std::vector<unsigned long>::vector(&v241, v14 >> 3, &v240);
                  v17 = v241;
                  v18 = v242;
                  v19 = **(_QWORD **)(v10 + 8);
                  v20 = (char *)v242 - (char *)v241;
                  v21 = v242 - v241;
                  v22 = v21 - 1;
                  if (v21 <= 1)
                    v23 = 1;
                  else
                    v23 = v242 - v241;
                  do
                  {
                    if (v18 == v17)
                    {
                      v31 = 0;
                      v32 = *(double *)(**(_QWORD **)(*(_QWORD *)&v11 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v11 + 72));
                    }
                    else
                    {
                      v24 = 0;
                      v25 = *(uint64_t **)(*(_QWORD *)&v11 + 48);
                      v26 = v17;
                      v27 = v23;
                      do
                      {
                        v29 = (uint64_t)*v26++;
                        v28 = v29;
                        v30 = *v25++;
                        v24 += v30 * v28;
                        --v27;
                      }
                      while (v27);
                      v31 = 0;
                      v32 = *(double *)(**(_QWORD **)(*(_QWORD *)&v11 + 8)
                                      + 8 * (*(_QWORD *)(*(_QWORD *)&v11 + 72) + v24));
                      v33 = *(uint64_t **)(v10 + 48);
                      v34 = v17;
                      v35 = v23;
                      do
                      {
                        v37 = (uint64_t)*v34++;
                        v36 = v37;
                        v38 = *v33++;
                        v31 += v38 * v36;
                        --v35;
                      }
                      while (v35);
                    }
                    v39 = *(double *)(v19 + 8 * (*(_QWORD *)(v10 + 72) + v31));
                    if (v32 != v39)
                      break;
                    v40 = v21;
                    v41 = v21 - 1;
                    if (v20 < 1)
                      goto LABEL_30;
                    v42 = *(_QWORD *)(*(_QWORD *)&v11 + 24);
                    v43 = (unint64_t)v17[v22] + 1;
                    v17[v22] = (void *)v43;
                    v44 = (v20 & 0xFFFFFFFFFFFFFFF8) - 16;
                    v45 = v21 - 1;
                    if (v43 < *(_QWORD *)(v42 + 8 * v22))
                    {
                      v40 = 1;
                      v41 = v21 - 1;
LABEL_30:
                      if ((v41 & 0x8000000000000000) != 0)
                        break;
                      continue;
                    }
                    do
                    {
                      *(void **)((char *)v17 + v44 + 8) = 0;
                      if (v45 <= 0)
                      {
                        v242 = v17;
                        operator delete(v17);
                        goto LABEL_100;
                      }
                      --v45;
                      v46 = *(unint64_t *)((char *)v17 + v44) + 1;
                      *(void **)((char *)v17 + v44) = (void *)v46;
                      v47 = *(_QWORD *)(v42 + v44);
                      v44 -= 8;
                    }
                    while (v46 >= v47);
                    v40 = 1;
                    if (v45 < 0)
                      break;
                  }
                  while (v40);
                  if (v17)
                  {
                    v242 = v17;
                    operator delete(v17);
                  }
                  if (v32 != v39)
                    goto LABEL_106;
                }
              }
            }
          }
          goto LABEL_100;
        }
        if (v9 < 9)
          goto LABEL_106;
        goto LABEL_443;
      default:
        goto LABEL_443;
    }
  }
}

void sub_21848FB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14)
{
  unint64_t **v14;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;

  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v16 = *v14;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (v18)
        goto LABEL_40;
      v19 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v19 + 31) < 0)
        operator delete((void *)v19[1]);
      v20 = v19;
      v21 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v30 = *v14;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_40;
      v33 = *v14;
      if (!*v14)
        goto LABEL_39;
      v34 = (void *)v33[1];
      if (v34)
      {
        v33[2] = (unint64_t)v34;
        operator delete(v34);
      }
      v20 = v33;
      v21 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v22 = *v14;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (v24)
        goto LABEL_40;
      v25 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v25 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_31;
    case 5:
      v35 = *v14;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_40;
      v25 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = v25 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_31:
      v20 = v25;
      v21 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v38 = *v14;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (v40)
        goto LABEL_40;
      v41 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v41 + 2);
      v20 = v41;
      v29 = -235920773;
      goto LABEL_37;
    case 9:
      v26 = *v14;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v20 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v29 = 2071181815;
LABEL_37:
      v21 = v29 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v20, v21);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_40;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,double>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,double>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,double>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = operator new(0x28uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = 0;
  *((_DWORD *)v16 + 6) = 0;
  *((_BYTE *)v16 + 28) = 0;
  v18 = *v17;
  *(_QWORD *)((char *)v16 + 21) = *(uint64_t *)((char *)v17 + 5);
  v16[2] = v18;
  *((_BYTE *)v16 + 28) = *((_BYTE *)v17 + 12);
  *((_BYTE *)v17 + 12) = 0;
  v16[4] = 0;
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10)
          v26 %= v10;
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,double>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,double>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_21848FF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,double>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,double>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void turi::flexible_type_converter<std::unordered_map<turi::flexible_type,turi::flexible_type>>::set(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<9>::set<std::unordered_map<turi::flexible_type,turi::flexible_type>>((uint64_t *)a2, a1);
}

void sub_21848FFB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type_converter<std::unordered_map<turi::flexible_type,double>>::set((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type_converter<std::unordered_map<turi::flexible_type,double>>::set((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<9>::set<std::unordered_map<turi::flexible_type,turi::flexible_type>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  void **v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  void **v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void **v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  void **v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  void *v81;
  void *v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  _QWORD *v97;
  void **v98;
  _QWORD *v99;
  unint64_t *v100;
  std::string *v101;
  __int128 v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  _QWORD *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  __int128 v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  __int128 v133;
  unint64_t v134;
  void **v135;
  void **v136[2];
  _QWORD v137[2];
  _BYTE v138[13];
  _BYTE v139[13];
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v133 = 0uLL;
  v134 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v133, *(_QWORD *)(a2 + 24));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    memset(v137, 0, 13);
    turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v137, i + 2);
    memset(v136, 0, 13);
    turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v136, i + 4);
    *(_QWORD *)&v138[5] = *(_QWORD *)((char *)v137 + 5);
    *(_QWORD *)v138 = v137[0];
    v138[12] = BYTE4(v137[1]);
    BYTE4(v137[1]) = 0;
    *(void ***)&v139[5] = *(void ***)((char *)v136 + 5);
    *(void ***)v139 = v136[0];
    v139[12] = BYTE4(v136[1]);
    BYTE4(v136[1]) = 0;
    v5 = *((_QWORD *)&v133 + 1);
    if (*((_QWORD *)&v133 + 1) >= v134)
    {
      v8 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v133, (uint64_t *)v138);
    }
    else
    {
      **((_QWORD **)&v133 + 1) = 0;
      *(_DWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 12) = 0;
      v6 = *(_QWORD *)v138;
      *(_QWORD *)(v5 + 5) = *(_QWORD *)&v138[5];
      *(_QWORD *)v5 = v6;
      *(_BYTE *)(v5 + 12) = v138[12];
      v138[12] = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 28) = 0;
      v7 = *(_QWORD *)v139;
      *(_QWORD *)(v5 + 21) = *(_QWORD *)&v139[5];
      *(_QWORD *)(v5 + 16) = v7;
      *(_BYTE *)(v5 + 28) = v139[12];
      v139[12] = 0;
      v8 = v5 + 32;
    }
    *((_QWORD *)&v133 + 1) = v8;
    std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v138);
    switch(BYTE4(v136[1]))
    {
      case 2:
        v9 = (unint64_t *)v136[0];
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = v136[0];
          if (v136[0])
          {
            if (*((char *)v136[0] + 31) < 0)
              operator delete(v136[0][1]);
            v13 = v12;
            v14 = 0x1012C404EF22A49;
            goto LABEL_46;
          }
        }
        break;
      case 3:
        v26 = (unint64_t *)v136[0];
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v29 = v136[0];
          if (v136[0])
          {
            v30 = v136[0][1];
            if (v30)
            {
              v136[0][2] = v30;
              operator delete(v30);
            }
            v13 = v29;
            v14 = 0x1080C409938AC02;
            goto LABEL_46;
          }
        }
        break;
      case 4:
        v15 = (unint64_t *)v136[0];
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = v136[0];
          if (v136[0])
          {
            v135 = v136[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v135);
            goto LABEL_39;
          }
        }
        break;
      case 5:
        v31 = (unint64_t *)v136[0];
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v18 = v136[0];
          if (v136[0])
          {
            v135 = v136[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v135);
LABEL_39:
            v13 = v18;
            v14 = 0x1020C405E66F15BLL;
            goto LABEL_46;
          }
        }
        break;
      case 8:
        v34 = (unint64_t *)v136[0];
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v37 = v136[0];
          if (v136[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v136[0] + 2);
            v13 = v37;
            v25 = -235920773;
            goto LABEL_45;
          }
        }
        break;
      case 9:
        v19 = (unint64_t *)v136[0];
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = v136[0];
          if (v136[0])
          {
            v23 = v136[0][6];
            if (v23)
            {
              v136[0][7] = v23;
              operator delete(v23);
            }
            v24 = v22[3];
            if (v24)
            {
              v22[4] = v24;
              operator delete(v24);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v22 + 1));
            v13 = v22;
            v25 = 2071181815;
LABEL_45:
            v14 = v25 | 0x1030C4000000000;
LABEL_46:
            MEMORY[0x219A19A08](v13, v14);
          }
        }
        break;
      default:
        break;
    }
    switch(BYTE4(v137[1]))
    {
      case 2:
        v38 = (unint64_t *)v137[0];
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          v41 = v137[0];
          if (v137[0])
          {
            if (*(char *)(v137[0] + 31) < 0)
              operator delete(*(void **)(v137[0] + 8));
            v42 = v41;
            v43 = 0x1012C404EF22A49;
            goto LABEL_88;
          }
        }
        break;
      case 3:
        v55 = (unint64_t *)v137[0];
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          v58 = v137[0];
          if (v137[0])
          {
            v59 = *(void **)(v137[0] + 8);
            if (v59)
            {
              *(_QWORD *)(v137[0] + 16) = v59;
              operator delete(v59);
            }
            v42 = v58;
            v43 = 0x1080C409938AC02;
            goto LABEL_88;
          }
        }
        break;
      case 4:
        v44 = (unint64_t *)v137[0];
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          v47 = v137[0];
          if (v137[0])
          {
            v136[0] = (void **)(v137[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v136);
            goto LABEL_81;
          }
        }
        break;
      case 5:
        v60 = (unint64_t *)v137[0];
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          v47 = v137[0];
          if (v137[0])
          {
            v136[0] = (void **)(v137[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v136);
LABEL_81:
            v42 = v47;
            v43 = 0x1020C405E66F15BLL;
            goto LABEL_88;
          }
        }
        break;
      case 8:
        v63 = (unint64_t *)v137[0];
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          v66 = v137[0];
          if (v137[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v137[0] + 16));
            v42 = v66;
            v54 = -235920773;
            goto LABEL_87;
          }
        }
        break;
      case 9:
        v48 = (unint64_t *)v137[0];
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          v51 = v137[0];
          if (v137[0])
          {
            v52 = *(void **)(v137[0] + 48);
            if (v52)
            {
              *(_QWORD *)(v137[0] + 56) = v52;
              operator delete(v52);
            }
            v53 = *(void **)(v51 + 24);
            if (v53)
            {
              *(_QWORD *)(v51 + 32) = v53;
              operator delete(v53);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v51 + 8);
            v42 = v51;
            v54 = 2071181815;
LABEL_87:
            v43 = v54 | 0x1030C4000000000;
LABEL_88:
            MEMORY[0x219A19A08](v42, v43);
          }
        }
        break;
      default:
        continue;
    }
  }
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v67 = (unint64_t *)*a1;
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        v70 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        if (*((char *)v70 + 31) < 0)
          operator delete((void *)v70[1]);
        v71 = v70;
        v72 = 0x1012C404EF22A49;
        goto LABEL_131;
      }
      break;
    case 3:
      v84 = (unint64_t *)*a1;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        v88 = (void *)v87[1];
        if (v88)
        {
          v87[2] = (unint64_t)v88;
          operator delete(v88);
        }
        v71 = v87;
        v72 = 0x1080C409938AC02;
        goto LABEL_131;
      }
      break;
    case 4:
      v73 = (unint64_t *)*a1;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        v76 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        *(_QWORD *)v138 = v76 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
        goto LABEL_124;
      }
      break;
    case 5:
      v89 = (unint64_t *)*a1;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v76 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        *(_QWORD *)v138 = v76 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
LABEL_124:
        v71 = v76;
        v72 = 0x1020C405E66F15BLL;
        goto LABEL_131;
      }
      break;
    case 8:
      v92 = (unint64_t *)*a1;
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        boost::detail::shared_count::~shared_count((unsigned int **)v95 + 2);
        v71 = v95;
        v83 = -235920773;
        goto LABEL_130;
      }
      break;
    case 9:
      v77 = (unint64_t *)*a1;
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        v80 = (unint64_t *)*a1;
        if (*a1)
        {
          v81 = (void *)v80[6];
          if (v81)
          {
            v80[7] = (unint64_t)v81;
            operator delete(v81);
          }
          v82 = (void *)v80[3];
          if (v82)
          {
            v80[4] = (unint64_t)v82;
            operator delete(v82);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v80 + 1));
          v71 = v80;
          v83 = 2071181815;
LABEL_130:
          v72 = v83 | 0x1030C4000000000;
LABEL_131:
          MEMORY[0x219A19A08](v71, v72);
        }
LABEL_132:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 5;
  v96 = (_QWORD *)operator new();
  v97 = v96;
  *v96 = 0;
  v96[1] = 0;
  v98 = (void **)(v96 + 1);
  v96[2] = 0;
  v96[3] = 0;
  *a1 = (uint64_t)v96;
  *v96 = 1;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v96 != 1)
      {
        v99 = (_QWORD *)operator new();
        v100 = (unint64_t *)*a1;
        *v99 = *(_QWORD *)*a1;
        v101 = (std::string *)(v99 + 1);
        if (*((char *)v100 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v101, (const std::string::value_type *)v100[1], v100[2]);
        }
        else
        {
          v102 = *(_OWORD *)(v100 + 1);
          v99[3] = v100[3];
          *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v102;
        }
        *a1 = (uint64_t)v99;
        *v99 = 1;
        do
        {
          v130 = __ldaxr(v97);
          v131 = v130 - 1;
        }
        while (__stlxr(v131, v97));
        if (!v131)
        {
          v107 = 0x1012C404EF22A49;
          if ((*((char *)v97 + 31) & 0x80000000) == 0)
            goto LABEL_173;
          v108 = *v98;
          goto LABEL_172;
        }
      }
      break;
    case 3:
      if (*v96 != 1)
      {
        v103 = (_QWORD *)operator new();
        v104 = (unint64_t *)*a1;
        *v103 = *(_QWORD *)*a1;
        v103[2] = 0;
        v103[3] = 0;
        v103[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v103 + 1, (const void *)v104[1], v104[2], (uint64_t)(v104[2] - v104[1]) >> 3);
        *a1 = (uint64_t)v103;
        *v103 = 1;
        do
        {
          v105 = __ldaxr(v97);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, v97));
        if (!v106)
        {
          v107 = 0x1080C409938AC02;
          v108 = *v98;
          if (*v98)
          {
            v97[2] = v108;
LABEL_172:
            operator delete(v108);
          }
          goto LABEL_173;
        }
      }
      break;
    case 4:
      if (*v96 != 1)
      {
        v109 = (_QWORD *)operator new();
        v110 = (unint64_t *)*a1;
        *v109 = *(_QWORD *)*a1;
        v109[2] = 0;
        v109[3] = 0;
        v109[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v109 + 1, (uint64_t *)v110[1], (uint64_t *)v110[2], (uint64_t)(v110[2] - v110[1]) >> 4);
        *a1 = (uint64_t)v109;
        *v109 = 1;
        do
        {
          v111 = __ldaxr(v97);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v97));
        if (!v112)
        {
          v107 = 0x1020C405E66F15BLL;
          *(_QWORD *)v138 = v98;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
          goto LABEL_173;
        }
      }
      break;
    case 5:
      if (*v96 != 1)
      {
        v113 = (_QWORD *)operator new();
        v114 = (unint64_t *)*a1;
        *v113 = *(_QWORD *)*a1;
        v113[2] = 0;
        v113[3] = 0;
        v113[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v113 + 1, (uint64_t *)v114[1], (uint64_t *)v114[2], (uint64_t)(v114[2] - v114[1]) >> 5);
        *a1 = (uint64_t)v113;
        *v113 = 1;
        do
        {
          v115 = __ldaxr(v97);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, v97));
        if (!v116)
        {
          v107 = 0x1020C405E66F15BLL;
          *(_QWORD *)v138 = v98;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
          goto LABEL_173;
        }
      }
      break;
    case 8:
      if (*v96 != 1)
      {
        v117 = operator new();
        v118 = (unint64_t *)*a1;
        *(_QWORD *)v117 = *(_QWORD *)*a1;
        *(_QWORD *)(v117 + 8) = v118[1];
        v119 = v118[2];
        *(_QWORD *)(v117 + 16) = v119;
        if (v119)
        {
          v120 = (unsigned int *)(v119 + 8);
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
        }
        v122 = *(_OWORD *)(v118 + 3);
        v123 = *(_OWORD *)(v118 + 5);
        *(_OWORD *)(v117 + 56) = *(_OWORD *)(v118 + 7);
        *(_OWORD *)(v117 + 40) = v123;
        *(_OWORD *)(v117 + 24) = v122;
        *a1 = v117;
        *(_QWORD *)v117 = 1;
        do
        {
          v124 = __ldaxr(v97);
          v125 = v124 - 1;
        }
        while (__stlxr(v125, v97));
        if (!v125)
        {
          v107 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v97 + 2);
          goto LABEL_173;
        }
      }
      break;
    case 9:
      if (*v96 != 1)
      {
        v126 = (_QWORD *)operator new();
        v127 = *a1 + 8;
        *v126 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
        *a1 = (uint64_t)v126;
        *v126 = 1;
        do
        {
          v128 = __ldaxr(v97);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, v97));
        if (!v129)
        {
          v107 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v97);
LABEL_173:
          MEMORY[0x219A19A08](v97, v107);
        }
      }
      break;
    default:
      break;
  }
  v132 = (unint64_t *)*a1;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)v132 + 1);
  *(_OWORD *)(v132 + 1) = v133;
  v132[3] = v134;
  v133 = 0uLL;
  v134 = 0;
  *(_QWORD *)v138 = &v133;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
}

void sub_218490B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  MEMORY[0x219A19A08](v18, 0x1012C404EF22A49);
  a18 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::flexible_accuracy::flexible_accuracy(uint64_t a1, turi::evaluation *a2)
{
  const turi::flexible_type *v4;
  _QWORD **v6;
  _QWORD *v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v6 = v7;
  turi::evaluation::confusion_matrix::confusion_matrix(a1, (uint64_t)&v6);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v6, v7[0]);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_QWORD *)a1 = &unk_24D942E00;
  *(_BYTE *)(a1 + 184) = turi::evaluation::average_type_enum_from_name(a2, v4);
  return a1;
}

void sub_218490E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  turi::evaluation::flexible_accuracy *v11;

  turi::evaluation::flexible_accuracy::~flexible_accuracy(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::evaluation::precision>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::precision>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::precision>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::evaluation::precision::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "precision");
}

uint64_t turi::evaluation::precision::get_metric@<X0>(turi::evaluation::precision *this@<X0>, uint64_t a2@<X8>)
{
  __n128 v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  double v10;
  char v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unint64_t *v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  BOOL v69;
  _QWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  BOOL v73;
  unsigned int v74;
  unint64_t *v75;
  unint64_t v76;
  BOOL v77;
  _QWORD *v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  unint64_t *v83;
  unint64_t v84;
  BOOL v85;
  _QWORD *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  void *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  turi::evaluation::precision_recall_base *v133;
  _BYTE v134[40];
  _OWORD v135[2];
  int v136;
  void **v137;
  void *v138[2];
  void **v139[4];

  v139[2] = *(void ***)MEMORY[0x24BDAC8D0];
  turi::evaluation::precision_recall_base::gather_global_metrics(this);
  v3 = 0uLL;
  memset(v135, 0, sizeof(v135));
  v136 = 1065353216;
  v133 = this;
  v4 = (uint64_t *)*((_QWORD *)this + 7);
  if (v4)
  {
    v5 = (char *)this + 192;
    v6 = (char *)this + 272;
    do
    {
      v139[0] = (void **)(v4 + 2);
      v7 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v139)+ 4);
      v139[0] = (void **)(v4 + 2);
      v8 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v139)+ 4)+ v7;
      if (v8)
      {
        v9 = 0;
        v10 = (double)v7 / (double)v8;
        v11 = 1;
      }
      else
      {
        v10 = *(double *)&turi::FLEX_UNDEFINED;
        v9 = dword_254FF4788;
        v11 = byte_254FF478C;
        switch(byte_254FF478C)
        {
          case 2:
            do
              v20 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v20 + 1, *(unint64_t **)&v10));
            v11 = 2;
            break;
          case 3:
            do
              v23 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v23 + 1, *(unint64_t **)&v10));
            v11 = 3;
            break;
          case 4:
            do
              v21 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v21 + 1, *(unint64_t **)&v10));
            v11 = 4;
            break;
          case 5:
            do
              v24 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v24 + 1, *(unint64_t **)&v10));
            v11 = 5;
            break;
          case 8:
            do
              v25 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v25 + 1, *(unint64_t **)&v10));
            v11 = 8;
            break;
          case 9:
            do
              v22 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v22 + 1, *(unint64_t **)&v10));
            v11 = 9;
            break;
          default:
            break;
        }
      }
      v138[0] = v4 + 2;
      v12 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v135, (unsigned __int8 *)v4 + 16, (uint64_t)&std::piecewise_construct, v138);
      v13 = v12;
      switch(v12[44])
      {
        case 2u:
          v14 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            v17 = *((_QWORD *)v12 + 4);
            if (!v17)
              goto LABEL_60;
            if (*(char *)(v17 + 31) < 0)
              operator delete(*(void **)(v17 + 8));
            v18 = (_QWORD *)v17;
            v19 = 0x1012C404EF22A49;
            goto LABEL_59;
          }
          break;
        case 3u:
          v37 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            v40 = (_QWORD *)*((_QWORD *)v12 + 4);
            if (!v40)
              goto LABEL_60;
            v41 = (void *)v40[1];
            if (v41)
            {
              v40[2] = v41;
              operator delete(v41);
            }
            v18 = v40;
            v19 = 0x1080C409938AC02;
            goto LABEL_59;
          }
          break;
        case 4u:
          v26 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            v29 = *((_QWORD *)v12 + 4);
            if (!v29)
              goto LABEL_60;
            v139[0] = (void **)(v29 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v139);
            goto LABEL_52;
          }
          break;
        case 5u:
          v42 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            v29 = *((_QWORD *)v12 + 4);
            if (!v29)
              goto LABEL_60;
            v139[0] = (void **)(v29 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v139);
LABEL_52:
            v18 = (_QWORD *)v29;
            v19 = 0x1020C405E66F15BLL;
            goto LABEL_59;
          }
          break;
        case 8u:
          v45 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            v48 = *((_QWORD *)v12 + 4);
            if (!v48)
              goto LABEL_60;
            boost::detail::shared_count::~shared_count((unsigned int **)(v48 + 16));
            v18 = (_QWORD *)v48;
            v36 = -235920773;
            goto LABEL_58;
          }
          break;
        case 9u:
          v30 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            v33 = (_QWORD *)*((_QWORD *)v12 + 4);
            if (v33)
            {
              v34 = (void *)v33[6];
              if (v34)
              {
                v33[7] = v34;
                operator delete(v34);
              }
              v35 = (void *)v33[3];
              if (v35)
              {
                v33[4] = v35;
                operator delete(v35);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
              v18 = v33;
              v36 = 2071181815;
LABEL_58:
              v19 = v36 | 0x1030C4000000000;
LABEL_59:
              MEMORY[0x219A19A08](v18, v19);
            }
LABEL_60:
            *((_QWORD *)v13 + 4) = 0;
          }
          break;
        default:
          break;
      }
      *((double *)v13 + 4) = v10;
      *((_DWORD *)v13 + 10) = v9;
      v13[44] = v11;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  if (*((_QWORD *)v133 + 8) == 2)
  {
    turi::evaluation::precision_recall_base::get_reference_label(v133, (unsigned __int8 *)v138, v3);
    v137 = v138;
    v49 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>((uint64_t)v135, (unsigned __int8 *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v137);
    memset(v139, 0, 13);
    turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v139, (uint64_t *)v49 + 4);
    *(void ***)(a2 + 13) = *(void ***)((char *)v139 + 5);
    *(void ***)(a2 + 8) = v139[0];
    *(_BYTE *)(a2 + 20) = BYTE4(v139[1]);
    *(_DWORD *)a2 = 0;
    switch(BYTE4(v138[1]))
    {
      case 2:
        v50 = (unint64_t *)v138[0];
        do
        {
          v51 = __ldaxr(v50);
          v52 = --v51 == 0;
        }
        while (__stlxr(v51, v50));
        goto LABEL_66;
      case 3:
        v75 = (unint64_t *)v138[0];
        do
        {
          v76 = __ldaxr(v75);
          v77 = --v76 == 0;
        }
        while (__stlxr(v76, v75));
        goto LABEL_102;
      case 4:
        v67 = (unint64_t *)v138[0];
        do
        {
          v68 = __ldaxr(v67);
          v69 = --v68 == 0;
        }
        while (__stlxr(v68, v67));
        goto LABEL_90;
      case 5:
        v80 = (unint64_t *)v138[0];
        do
        {
          v81 = __ldaxr(v80);
          v82 = --v81 == 0;
        }
        while (__stlxr(v81, v80));
        goto LABEL_110;
      case 8:
        v83 = (unint64_t *)v138[0];
        do
        {
          v84 = __ldaxr(v83);
          v85 = --v84 == 0;
        }
        while (__stlxr(v84, v83));
        goto LABEL_117;
      case 9:
        v71 = (unint64_t *)v138[0];
        do
        {
          v72 = __ldaxr(v71);
          v73 = --v72 == 0;
        }
        while (__stlxr(v72, v71));
        goto LABEL_96;
      default:
        return std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v135);
    }
  }
  else
  {
    v56 = *((unsigned __int8 *)v133 + 184);
    if ((v56 - 2) < 2)
    {
      std::unordered_map<turi::flexible_type,turi::flexible_type>::unordered_map((uint64_t)v134, (uint64_t)v135);
      turi::evaluation::average_with_none_skip((uint64_t)v134, (uint64_t)v138);
      memset(v139, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v139, (uint64_t *)v138);
      *(void ***)(a2 + 13) = *(void ***)((char *)v139 + 5);
      *(void ***)(a2 + 8) = v139[0];
      *(_BYTE *)(a2 + 20) = BYTE4(v139[1]);
      *(_DWORD *)a2 = 0;
      switch(BYTE4(v138[1]))
      {
        case 2:
          v61 = (unint64_t *)v138[0];
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
          {
            v64 = v138[0];
            if (v138[0])
            {
              if (*((char *)v138[0] + 31) < 0)
                operator delete(*((void **)v138[0] + 1));
              v65 = v64;
              v66 = 0x1012C404EF22A49;
              goto LABEL_163;
            }
          }
          break;
        case 3:
          v99 = (unint64_t *)v138[0];
          do
          {
            v100 = __ldaxr(v99);
            v101 = v100 - 1;
          }
          while (__stlxr(v101, v99));
          if (!v101)
          {
            v102 = v138[0];
            if (v138[0])
            {
              v103 = (void *)*((_QWORD *)v138[0] + 1);
              if (v103)
              {
                *((_QWORD *)v138[0] + 2) = v103;
                operator delete(v103);
              }
              v65 = v102;
              v66 = 0x1080C409938AC02;
              goto LABEL_163;
            }
          }
          break;
        case 4:
          v91 = (unint64_t *)v138[0];
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
          {
            v94 = v138[0];
            if (v138[0])
            {
              v139[0] = (void **)((char *)v138[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v139);
              goto LABEL_156;
            }
          }
          break;
        case 5:
          v104 = (unint64_t *)v138[0];
          do
          {
            v105 = __ldaxr(v104);
            v106 = v105 - 1;
          }
          while (__stlxr(v106, v104));
          if (!v106)
          {
            v94 = v138[0];
            if (v138[0])
            {
              v139[0] = (void **)((char *)v138[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v139);
LABEL_156:
              v65 = v94;
              v66 = 0x1020C405E66F15BLL;
              goto LABEL_163;
            }
          }
          break;
        case 8:
          v107 = (unint64_t *)v138[0];
          do
          {
            v108 = __ldaxr(v107);
            v109 = v108 - 1;
          }
          while (__stlxr(v109, v107));
          if (!v109)
          {
            v110 = v138[0];
            if (v138[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v138[0] + 2);
              v65 = v110;
              v98 = -235920773;
              goto LABEL_162;
            }
          }
          break;
        case 9:
          v95 = (unint64_t *)v138[0];
          do
          {
            v96 = __ldaxr(v95);
            v97 = v96 - 1;
          }
          while (__stlxr(v97, v95));
          if (!v97 && v138[0])
          {
            v65 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v138[0]);
            v98 = 2071181815;
LABEL_162:
            v66 = v98 | 0x1030C4000000000;
LABEL_163:
            MEMORY[0x219A19A08](v65, v66);
          }
          break;
        default:
          break;
      }
      memset(v138, 0, 13);
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v134);
    }
    else if (*((_BYTE *)v133 + 184))
    {
      if (v56 != 1)
        turi::evaluation::precision::get_metric(void)::{lambda(void)#1}::operator()();
      v57 = (uint64_t *)*((_QWORD *)v133 + 7);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        do
        {
          v139[0] = (void **)(v57 + 2);
          v60 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v133 + 192, (unsigned __int8 *)v57 + 16, (uint64_t)&std::piecewise_construct, (void **)v139)+ 4);
          v139[0] = (void **)(v57 + 2);
          v59 += v60;
          v58 += *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v133 + 272, (unsigned __int8 *)v57 + 16, (uint64_t)&std::piecewise_construct, (void **)v139)+ 4);
          v57 = (uint64_t *)*v57;
        }
        while (v57);
      }
      else
      {
        v59 = 0;
        v58 = 0;
      }
      if (v58 + v59)
      {
        LODWORD(v138[1]) = 0;
        BYTE4(v138[1]) = 1;
        *(double *)v138 = (double)v59 / (double)(v58 + v59);
      }
      else
      {
        *(void **)((char *)v138 + 5) = *(void **)((char *)&turi::FLEX_UNDEFINED + 5);
        v138[0] = (void *)turi::FLEX_UNDEFINED;
        BYTE4(v138[1]) = byte_254FF478C;
        switch(byte_254FF478C)
        {
          case 2:
            v89 = (unint64_t *)v138[0];
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 + 1, v89));
            break;
          case 3:
            v126 = (unint64_t *)v138[0];
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 + 1, v126));
            break;
          case 4:
            v122 = (unint64_t *)v138[0];
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 + 1, v122));
            break;
          case 5:
            v128 = (unint64_t *)v138[0];
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 + 1, v128));
            break;
          case 8:
            v130 = (unint64_t *)v138[0];
            do
              v131 = __ldaxr(v130);
            while (__stlxr(v131 + 1, v130));
            break;
          case 9:
            v124 = (unint64_t *)v138[0];
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 + 1, v124));
            break;
          default:
            break;
        }
      }
      memset(v139, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v139, (uint64_t *)v138);
      *(void ***)(a2 + 13) = *(void ***)((char *)v139 + 5);
      *(void ***)(a2 + 8) = v139[0];
      *(_BYTE *)(a2 + 20) = BYTE4(v139[1]);
      *(_DWORD *)a2 = 0;
      switch(BYTE4(v138[1]))
      {
        case 2:
          v87 = (unint64_t *)v138[0];
          do
          {
            v88 = __ldaxr(v87);
            v52 = --v88 == 0;
          }
          while (__stlxr(v88, v87));
LABEL_66:
          if (v52)
          {
            v53 = v138[0];
            if (v138[0])
            {
              if (*((char *)v138[0] + 31) < 0)
                operator delete(*((void **)v138[0] + 1));
              v54 = v53;
              v55 = 0x1012C404EF22A49;
              goto LABEL_122;
            }
          }
          break;
        case 3:
          v116 = (unint64_t *)v138[0];
          do
          {
            v117 = __ldaxr(v116);
            v77 = --v117 == 0;
          }
          while (__stlxr(v117, v116));
LABEL_102:
          if (v77)
          {
            v78 = v138[0];
            if (v138[0])
            {
              v79 = (void *)*((_QWORD *)v138[0] + 1);
              if (v79)
              {
                *((_QWORD *)v138[0] + 2) = v79;
                operator delete(v79);
              }
              v54 = v78;
              v55 = 0x1080C409938AC02;
              goto LABEL_122;
            }
          }
          break;
        case 4:
          v112 = (unint64_t *)v138[0];
          do
          {
            v113 = __ldaxr(v112);
            v69 = --v113 == 0;
          }
          while (__stlxr(v113, v112));
LABEL_90:
          if (v69)
          {
            v70 = v138[0];
            if (v138[0])
            {
              v139[0] = (void **)((char *)v138[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v139);
              goto LABEL_114;
            }
          }
          break;
        case 5:
          v118 = (unint64_t *)v138[0];
          do
          {
            v119 = __ldaxr(v118);
            v82 = --v119 == 0;
          }
          while (__stlxr(v119, v118));
LABEL_110:
          if (v82)
          {
            v70 = v138[0];
            if (v138[0])
            {
              v139[0] = (void **)((char *)v138[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v139);
LABEL_114:
              v54 = v70;
              v55 = 0x1020C405E66F15BLL;
              goto LABEL_122;
            }
          }
          break;
        case 8:
          v120 = (unint64_t *)v138[0];
          do
          {
            v121 = __ldaxr(v120);
            v85 = --v121 == 0;
          }
          while (__stlxr(v121, v120));
LABEL_117:
          if (v85)
          {
            v86 = v138[0];
            if (v138[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v138[0] + 2);
              v54 = v86;
              v74 = -235920773;
              goto LABEL_121;
            }
          }
          break;
        case 9:
          v114 = (unint64_t *)v138[0];
          do
          {
            v115 = __ldaxr(v114);
            v73 = --v115 == 0;
          }
          while (__stlxr(v115, v114));
LABEL_96:
          if (v73 && v138[0])
          {
            v54 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v138[0]);
            v74 = 2071181815;
LABEL_121:
            v55 = v74 | 0x1030C4000000000;
LABEL_122:
            MEMORY[0x219A19A08](v54, v55);
          }
          break;
        default:
          return std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v135);
      }
    }
    else
    {
      turi::flexible_type_converter<std::unordered_map<turi::flexible_type,turi::flexible_type>>::set((uint64_t)v135, (uint64_t)v139);
      *(void ***)(a2 + 13) = *(void ***)((char *)v139 + 5);
      *(void ***)(a2 + 8) = v139[0];
      *(_BYTE *)(a2 + 20) = BYTE4(v139[1]);
      *(_DWORD *)a2 = 0;
    }
  }
  return std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v135);
}

void sub_2184919B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::evaluation::average_with_none_skip(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v3;
  unint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  double *v13;
  double *v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  double v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  int v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;

  v3 = *(double **)(a1 + 16);
  if (!v3)
    goto LABEL_124;
  v4 = 0;
  v5 = 0.0;
  do
  {
    switch(byte_254FF478C)
    {
      case 0:
        switch(*((_BYTE *)v3 + 44))
        {
          case 0:
            if (*((_QWORD *)v3 + 4) == turi::FLEX_UNDEFINED)
              goto LABEL_55;
            goto LABEL_54;
          case 1:
            v6 = v3[4];
            v7 = turi::FLEX_UNDEFINED;
            goto LABEL_90;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_54;
          case 6:
            if (turi::FLEX_UNDEFINED == (uint64_t)(*((_QWORD *)v3 + 4) << 8) >> 8 && !*((_DWORD *)v3 + 10))
              goto LABEL_55;
            goto LABEL_54;
          default:
            turi::apply_binary_op_ff();
        }
      case 1:
        switch(*((_BYTE *)v3 + 44))
        {
          case 0:
            v6 = *(double *)&turi::FLEX_UNDEFINED;
            v7 = *((_QWORD *)v3 + 4);
LABEL_90:
            v66 = (double)v7;
            goto LABEL_91;
          case 1:
            v6 = v3[4];
            v66 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_91:
            if (v6 != v66)
              goto LABEL_54;
            goto LABEL_55;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_54;
          case 6:
            v67 = vabdd_f64((double)*((int *)v3 + 10) / 1000000.0 + (double)((uint64_t)(*((_QWORD *)v3 + 4) << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
            goto LABEL_99;
          default:
            turi::apply_binary_op_ff();
        }
      case 2:
        v8 = *((unsigned __int8 *)v3 + 44);
        if (v8 - 3 < 7 || v8 < 2)
          goto LABEL_54;
        if (v8 != 2)
          turi::apply_binary_op_ff();
        v10 = *((_QWORD *)v3 + 4);
        v11 = *(char *)(v10 + 31) < 0 ? *(_QWORD *)(v10 + 16) : *(unsigned __int8 *)(v10 + 31);
        v68 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
            ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
            : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
        if (v11 != v68)
          goto LABEL_54;
        v69 = (unsigned __int8 *)(v10 + 8);
        if ((*(_BYTE *)(v10 + 31) & 0x80) != 0)
          v69 = *(unsigned __int8 **)v69;
        v70 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
        if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
          v70 = *(unsigned __int8 **)v70;
        if ((*(_BYTE *)(v10 + 31) & 0x80) != 0)
        {
          if (memcmp(v69, v70, v11))
            goto LABEL_54;
        }
        else
        {
          if (!v11)
            goto LABEL_55;
          do
          {
            if (*v69 != *v70)
              goto LABEL_54;
            ++v69;
            ++v70;
            --v11;
          }
          while (v11);
        }
        goto LABEL_55;
      case 3:
        v12 = *((unsigned __int8 *)v3 + 44);
        if (v12 > 9)
          turi::apply_binary_op_ff();
        if (v12 == 3)
        {
          v13 = *(double **)(*((_QWORD *)v3 + 4) + 8);
          v14 = *(double **)(*((_QWORD *)v3 + 4) + 16);
          v15 = v14 - v13;
          v16 = *(double **)(turi::FLEX_UNDEFINED + 8);
          if (v15 == (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v16) >> 3)
          {
            if (v14 == v13)
              goto LABEL_55;
            v17 = v15 <= 1 ? 1 : v14 - v13;
            if (*v13 == *v16)
            {
              v18 = 1;
              do
              {
                v19 = v18;
                if (v17 == v18)
                  break;
                v20 = v13[v18];
                v21 = v16[v18++];
              }
              while (v20 == v21);
              if (v19 >= v15)
                goto LABEL_55;
            }
          }
        }
        goto LABEL_54;
      case 4:
        v22 = *((unsigned __int8 *)v3 + 44);
        if (v22 > 9)
          turi::apply_binary_op_ff();
        if (v22 != 4)
          goto LABEL_54;
        v23 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v84, (uint64_t *)(*((_QWORD *)v3 + 4) + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_36;
      case 5:
        v24 = *((unsigned __int8 *)v3 + 44);
        if (v24 > 9)
          turi::apply_binary_op_ff();
        if (v24 != 5)
          goto LABEL_54;
        v23 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v84, (uint64_t **)(*((_QWORD *)v3 + 4) + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
LABEL_36:
        if ((v23 & 1) != 0)
          goto LABEL_55;
        goto LABEL_54;
      case 6:
        switch(*((_BYTE *)v3 + 44))
        {
          case 0:
            if (*((_QWORD *)v3 + 4) == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF4788)
              goto LABEL_55;
            goto LABEL_54;
          case 1:
            v67 = vabdd_f64(v3[4], (double)dword_254FF4788 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_99:
            if (v67 < 0.0000005)
              goto LABEL_55;
            goto LABEL_54;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_54;
          case 6:
            if (((turi::FLEX_UNDEFINED ^ *((_QWORD *)v3 + 4)) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v3 + 10) == dword_254FF4788)
            {
              goto LABEL_55;
            }
            goto LABEL_54;
          default:
            turi::apply_binary_op_ff();
        }
      case 7:
        v25 = *((unsigned __int8 *)v3 + 44);
        if (v25 < 7 || v25 - 8 < 2)
          goto LABEL_54;
        if (v25 != 7)
          turi::apply_binary_op_ff();
        goto LABEL_55;
      case 8:
        v26 = *((unsigned __int8 *)v3 + 44);
        if (v26 >= 8 && v26 != 9)
        {
          if (v26 != 8)
            turi::apply_binary_op_ff();
          if (turi::image_type::operator==(*((_QWORD *)v3 + 4) + 8, turi::FLEX_UNDEFINED + 8))
            goto LABEL_55;
        }
        goto LABEL_54;
      case 9:
        v28 = *((unsigned __int8 *)v3 + 44);
        if (v28 < 9)
          goto LABEL_54;
        if (v28 != 9)
          turi::apply_binary_op_ff();
        v29 = turi::FLEX_UNDEFINED;
        v30 = (_QWORD *)*((_QWORD *)v3 + 4);
        if ((_QWORD *)turi::FLEX_UNDEFINED == v30)
          goto LABEL_55;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v30 + 1), turi::FLEX_UNDEFINED + 8))
          goto LABEL_54;
        v32 = (char *)v30[3];
        v31 = (char *)v30[4];
        v33 = v31 - v32;
        if (v31 == v32)
          goto LABEL_55;
        if (!v30[1])
          goto LABEL_55;
        v34 = 1;
        do
        {
          v35 = *(_QWORD *)v32;
          v32 += 8;
          v34 *= v35;
        }
        while (v32 != v31);
        if (!v34)
          goto LABEL_55;
        v85 = 0;
        std::vector<unsigned long>::vector(&v86, v33 >> 3, &v85);
        v36 = v86;
        v37 = v87;
        v38 = **(_QWORD **)(v29 + 8);
        v39 = (char *)v87 - (char *)v86;
        v40 = v87 - v86;
        v41 = v40 - 1;
        if (v40 <= 1)
          v42 = 1;
        else
          v42 = v87 - v86;
        break;
      default:
        turi::apply_binary_op_ff();
    }
    while (1)
    {
      if (v37 == v36)
      {
        v50 = 0;
        v51 = *(double *)(*(_QWORD *)v30[1] + 8 * v30[9]);
      }
      else
      {
        v43 = 0;
        v44 = (uint64_t *)v30[6];
        v45 = v36;
        v46 = v42;
        do
        {
          v48 = *v45++;
          v47 = v48;
          v49 = *v44++;
          v43 += v49 * v47;
          --v46;
        }
        while (v46);
        v50 = 0;
        v51 = *(double *)(*(_QWORD *)v30[1] + 8 * (v30[9] + v43));
        v52 = *(uint64_t **)(v29 + 48);
        v53 = v36;
        v54 = v42;
        do
        {
          v56 = *v53++;
          v55 = v56;
          v57 = *v52++;
          v50 += v57 * v55;
          --v54;
        }
        while (v54);
      }
      v58 = *(double *)(v38 + 8 * (*(_QWORD *)(v29 + 72) + v50));
      if (v51 != v58)
      {
LABEL_85:
        if (v36)
        {
          v87 = v36;
          operator delete(v36);
        }
        if (v51 != v58)
        {
LABEL_54:
          v5 = v5 + v3[4];
          ++v4;
        }
        goto LABEL_55;
      }
      v59 = v40;
      v60 = v40 - 1;
      if (v39 >= 1)
        break;
LABEL_83:
      if (v60 < 0 || !v59)
        goto LABEL_85;
    }
    v61 = v30[3];
    v62 = v36[v41] + 1;
    v36[v41] = v62;
    v63 = (v39 & 0xFFFFFFFFFFFFFFF8) - 16;
    v60 = v40 - 1;
    if (v62 < *(_QWORD *)(v61 + 8 * v41))
    {
      v59 = 1;
      v60 = v40 - 1;
      goto LABEL_83;
    }
    while (1)
    {
      *(uint64_t *)((char *)v36 + v63 + 8) = 0;
      if (v60 <= 0)
        break;
      --v60;
      v64 = *(uint64_t *)((char *)v36 + v63) + 1;
      *(uint64_t *)((char *)v36 + v63) = v64;
      v65 = *(_QWORD *)(v61 + v63);
      v63 -= 8;
      if (v64 < v65)
      {
        v59 = 1;
        goto LABEL_83;
      }
    }
    v87 = v36;
    operator delete(v36);
LABEL_55:
    v3 = *(double **)v3;
  }
  while (v3);
  if (v4)
  {
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 1;
    *(double *)a2 = v5 / (double)v4;
    return;
  }
LABEL_124:
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  if ((uint64_t *)a2 != &turi::FLEX_UNDEFINED)
  {
    *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
    *(_QWORD *)a2 = turi::FLEX_UNDEFINED;
    v71 = byte_254FF478C;
    *(_BYTE *)(a2 + 12) = byte_254FF478C;
    switch(v71)
    {
      case 2:
        v72 = *(unint64_t **)a2;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 + 1, v72));
        break;
      case 3:
        v74 = *(unint64_t **)a2;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 + 1, v74));
        break;
      case 4:
        v76 = *(unint64_t **)a2;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 + 1, v76));
        break;
      case 5:
        v78 = *(unint64_t **)a2;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 + 1, v78));
        break;
      case 8:
        v80 = *(unint64_t **)a2;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 + 1, v80));
        break;
      case 9:
        v82 = *(unint64_t **)a2;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 + 1, v82));
        break;
      default:
        return;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = operator new(0x30uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = 0;
  *((_DWORD *)v16 + 6) = 0;
  *((_BYTE *)v16 + 28) = 0;
  v18 = *v17;
  *(_QWORD *)((char *)v16 + 21) = *(uint64_t *)((char *)v17 + 5);
  v16[2] = v18;
  *((_BYTE *)v16 + 28) = *((_BYTE *)v17 + 12);
  *((_BYTE *)v17 + 12) = 0;
  v16[4] = 0;
  *((_DWORD *)v16 + 10) = 0;
  *((_BYTE *)v16 + 44) = 0;
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10)
          v26 %= v10;
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_218492658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<turi::flexible_type,turi::flexible_type>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flexible_type> const&>(a1, i + 16, (uint64_t *)i + 2);
  return a1;
}

void sub_2184926CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flexible_type> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x30uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]((uint64_t)(v15 + 2), a3);
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_218492948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::precision::precision(uint64_t a1, turi::evaluation *a2)
{
  const turi::flexible_type *v4;
  _QWORD **v6;
  _QWORD *v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v6 = v7;
  turi::evaluation::confusion_matrix::confusion_matrix(a1, (uint64_t)&v6);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v6, v7[0]);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_QWORD *)a1 = &unk_24D942F30;
  *(_BYTE *)(a1 + 184) = turi::evaluation::average_type_enum_from_name(a2, v4);
  return a1;
}

void sub_2184929FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  turi::evaluation::flexible_accuracy *v11;

  turi::evaluation::flexible_accuracy::~flexible_accuracy(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::evaluation::recall>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::recall>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D942FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::recall>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::evaluation::recall::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "recall");
}

uint64_t turi::evaluation::recall::get_metric@<X0>(turi::evaluation::recall *this@<X0>, uint64_t a2@<X8>)
{
  __n128 v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  double v10;
  char v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unint64_t *v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  BOOL v69;
  _QWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  BOOL v73;
  unsigned int v74;
  unint64_t *v75;
  unint64_t v76;
  BOOL v77;
  _QWORD *v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  unint64_t *v83;
  unint64_t v84;
  BOOL v85;
  _QWORD *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  void *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  turi::evaluation::precision_recall_base *v133;
  _BYTE v134[40];
  _OWORD v135[2];
  int v136;
  void **v137;
  void *v138[2];
  void **v139[4];

  v139[2] = *(void ***)MEMORY[0x24BDAC8D0];
  turi::evaluation::precision_recall_base::gather_global_metrics(this);
  v3 = 0uLL;
  memset(v135, 0, sizeof(v135));
  v136 = 1065353216;
  v133 = this;
  v4 = (uint64_t *)*((_QWORD *)this + 7);
  if (v4)
  {
    v5 = (char *)this + 192;
    v6 = (char *)this + 312;
    do
    {
      v139[0] = (void **)(v4 + 2);
      v7 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v139)+ 4);
      v139[0] = (void **)(v4 + 2);
      v8 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)v4 + 16, (uint64_t)&std::piecewise_construct, (void **)v139)+ 4)+ v7;
      if (v8)
      {
        v9 = 0;
        v10 = (double)v7 / (double)v8;
        v11 = 1;
      }
      else
      {
        v10 = *(double *)&turi::FLEX_UNDEFINED;
        v9 = dword_254FF4788;
        v11 = byte_254FF478C;
        switch(byte_254FF478C)
        {
          case 2:
            do
              v20 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v20 + 1, *(unint64_t **)&v10));
            v11 = 2;
            break;
          case 3:
            do
              v23 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v23 + 1, *(unint64_t **)&v10));
            v11 = 3;
            break;
          case 4:
            do
              v21 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v21 + 1, *(unint64_t **)&v10));
            v11 = 4;
            break;
          case 5:
            do
              v24 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v24 + 1, *(unint64_t **)&v10));
            v11 = 5;
            break;
          case 8:
            do
              v25 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v25 + 1, *(unint64_t **)&v10));
            v11 = 8;
            break;
          case 9:
            do
              v22 = __ldaxr(*(unint64_t **)&v10);
            while (__stlxr(v22 + 1, *(unint64_t **)&v10));
            v11 = 9;
            break;
          default:
            break;
        }
      }
      v138[0] = v4 + 2;
      v12 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v135, (unsigned __int8 *)v4 + 16, (uint64_t)&std::piecewise_construct, v138);
      v13 = v12;
      switch(v12[44])
      {
        case 2u:
          v14 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            v17 = *((_QWORD *)v12 + 4);
            if (!v17)
              goto LABEL_60;
            if (*(char *)(v17 + 31) < 0)
              operator delete(*(void **)(v17 + 8));
            v18 = (_QWORD *)v17;
            v19 = 0x1012C404EF22A49;
            goto LABEL_59;
          }
          break;
        case 3u:
          v37 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            v40 = (_QWORD *)*((_QWORD *)v12 + 4);
            if (!v40)
              goto LABEL_60;
            v41 = (void *)v40[1];
            if (v41)
            {
              v40[2] = v41;
              operator delete(v41);
            }
            v18 = v40;
            v19 = 0x1080C409938AC02;
            goto LABEL_59;
          }
          break;
        case 4u:
          v26 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            v29 = *((_QWORD *)v12 + 4);
            if (!v29)
              goto LABEL_60;
            v139[0] = (void **)(v29 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v139);
            goto LABEL_52;
          }
          break;
        case 5u:
          v42 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            v29 = *((_QWORD *)v12 + 4);
            if (!v29)
              goto LABEL_60;
            v139[0] = (void **)(v29 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v139);
LABEL_52:
            v18 = (_QWORD *)v29;
            v19 = 0x1020C405E66F15BLL;
            goto LABEL_59;
          }
          break;
        case 8u:
          v45 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            v48 = *((_QWORD *)v12 + 4);
            if (!v48)
              goto LABEL_60;
            boost::detail::shared_count::~shared_count((unsigned int **)(v48 + 16));
            v18 = (_QWORD *)v48;
            v36 = -235920773;
            goto LABEL_58;
          }
          break;
        case 9u:
          v30 = (unint64_t *)*((_QWORD *)v12 + 4);
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            v33 = (_QWORD *)*((_QWORD *)v12 + 4);
            if (v33)
            {
              v34 = (void *)v33[6];
              if (v34)
              {
                v33[7] = v34;
                operator delete(v34);
              }
              v35 = (void *)v33[3];
              if (v35)
              {
                v33[4] = v35;
                operator delete(v35);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
              v18 = v33;
              v36 = 2071181815;
LABEL_58:
              v19 = v36 | 0x1030C4000000000;
LABEL_59:
              MEMORY[0x219A19A08](v18, v19);
            }
LABEL_60:
            *((_QWORD *)v13 + 4) = 0;
          }
          break;
        default:
          break;
      }
      *((double *)v13 + 4) = v10;
      *((_DWORD *)v13 + 10) = v9;
      v13[44] = v11;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  if (*((_QWORD *)v133 + 8) == 2)
  {
    turi::evaluation::precision_recall_base::get_reference_label(v133, (unsigned __int8 *)v138, v3);
    v137 = v138;
    v49 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>((uint64_t)v135, (unsigned __int8 *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v137);
    memset(v139, 0, 13);
    turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v139, (uint64_t *)v49 + 4);
    *(void ***)(a2 + 13) = *(void ***)((char *)v139 + 5);
    *(void ***)(a2 + 8) = v139[0];
    *(_BYTE *)(a2 + 20) = BYTE4(v139[1]);
    *(_DWORD *)a2 = 0;
    switch(BYTE4(v138[1]))
    {
      case 2:
        v50 = (unint64_t *)v138[0];
        do
        {
          v51 = __ldaxr(v50);
          v52 = --v51 == 0;
        }
        while (__stlxr(v51, v50));
        goto LABEL_66;
      case 3:
        v75 = (unint64_t *)v138[0];
        do
        {
          v76 = __ldaxr(v75);
          v77 = --v76 == 0;
        }
        while (__stlxr(v76, v75));
        goto LABEL_102;
      case 4:
        v67 = (unint64_t *)v138[0];
        do
        {
          v68 = __ldaxr(v67);
          v69 = --v68 == 0;
        }
        while (__stlxr(v68, v67));
        goto LABEL_90;
      case 5:
        v80 = (unint64_t *)v138[0];
        do
        {
          v81 = __ldaxr(v80);
          v82 = --v81 == 0;
        }
        while (__stlxr(v81, v80));
        goto LABEL_110;
      case 8:
        v83 = (unint64_t *)v138[0];
        do
        {
          v84 = __ldaxr(v83);
          v85 = --v84 == 0;
        }
        while (__stlxr(v84, v83));
        goto LABEL_117;
      case 9:
        v71 = (unint64_t *)v138[0];
        do
        {
          v72 = __ldaxr(v71);
          v73 = --v72 == 0;
        }
        while (__stlxr(v72, v71));
        goto LABEL_96;
      default:
        return std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v135);
    }
  }
  else
  {
    v56 = *((unsigned __int8 *)v133 + 184);
    if ((v56 - 2) < 2)
    {
      std::unordered_map<turi::flexible_type,turi::flexible_type>::unordered_map((uint64_t)v134, (uint64_t)v135);
      turi::evaluation::average_with_none_skip((uint64_t)v134, (uint64_t)v138);
      memset(v139, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v139, (uint64_t *)v138);
      *(void ***)(a2 + 13) = *(void ***)((char *)v139 + 5);
      *(void ***)(a2 + 8) = v139[0];
      *(_BYTE *)(a2 + 20) = BYTE4(v139[1]);
      *(_DWORD *)a2 = 0;
      switch(BYTE4(v138[1]))
      {
        case 2:
          v61 = (unint64_t *)v138[0];
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
          {
            v64 = v138[0];
            if (v138[0])
            {
              if (*((char *)v138[0] + 31) < 0)
                operator delete(*((void **)v138[0] + 1));
              v65 = v64;
              v66 = 0x1012C404EF22A49;
              goto LABEL_163;
            }
          }
          break;
        case 3:
          v99 = (unint64_t *)v138[0];
          do
          {
            v100 = __ldaxr(v99);
            v101 = v100 - 1;
          }
          while (__stlxr(v101, v99));
          if (!v101)
          {
            v102 = v138[0];
            if (v138[0])
            {
              v103 = (void *)*((_QWORD *)v138[0] + 1);
              if (v103)
              {
                *((_QWORD *)v138[0] + 2) = v103;
                operator delete(v103);
              }
              v65 = v102;
              v66 = 0x1080C409938AC02;
              goto LABEL_163;
            }
          }
          break;
        case 4:
          v91 = (unint64_t *)v138[0];
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
          {
            v94 = v138[0];
            if (v138[0])
            {
              v139[0] = (void **)((char *)v138[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v139);
              goto LABEL_156;
            }
          }
          break;
        case 5:
          v104 = (unint64_t *)v138[0];
          do
          {
            v105 = __ldaxr(v104);
            v106 = v105 - 1;
          }
          while (__stlxr(v106, v104));
          if (!v106)
          {
            v94 = v138[0];
            if (v138[0])
            {
              v139[0] = (void **)((char *)v138[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v139);
LABEL_156:
              v65 = v94;
              v66 = 0x1020C405E66F15BLL;
              goto LABEL_163;
            }
          }
          break;
        case 8:
          v107 = (unint64_t *)v138[0];
          do
          {
            v108 = __ldaxr(v107);
            v109 = v108 - 1;
          }
          while (__stlxr(v109, v107));
          if (!v109)
          {
            v110 = v138[0];
            if (v138[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v138[0] + 2);
              v65 = v110;
              v98 = -235920773;
              goto LABEL_162;
            }
          }
          break;
        case 9:
          v95 = (unint64_t *)v138[0];
          do
          {
            v96 = __ldaxr(v95);
            v97 = v96 - 1;
          }
          while (__stlxr(v97, v95));
          if (!v97 && v138[0])
          {
            v65 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v138[0]);
            v98 = 2071181815;
LABEL_162:
            v66 = v98 | 0x1030C4000000000;
LABEL_163:
            MEMORY[0x219A19A08](v65, v66);
          }
          break;
        default:
          break;
      }
      memset(v138, 0, 13);
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v134);
    }
    else if (*((_BYTE *)v133 + 184))
    {
      if (v56 != 1)
        turi::evaluation::recall::get_metric(void)::{lambda(void)#1}::operator()();
      v57 = (uint64_t *)*((_QWORD *)v133 + 7);
      if (v57)
      {
        v58 = 0;
        v59 = 0;
        do
        {
          v139[0] = (void **)(v57 + 2);
          v60 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v133 + 192, (unsigned __int8 *)v57 + 16, (uint64_t)&std::piecewise_construct, (void **)v139)+ 4);
          v139[0] = (void **)(v57 + 2);
          v59 += v60;
          v58 += *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v133 + 312, (unsigned __int8 *)v57 + 16, (uint64_t)&std::piecewise_construct, (void **)v139)+ 4);
          v57 = (uint64_t *)*v57;
        }
        while (v57);
      }
      else
      {
        v59 = 0;
        v58 = 0;
      }
      if (v58 + v59)
      {
        LODWORD(v138[1]) = 0;
        BYTE4(v138[1]) = 1;
        *(double *)v138 = (double)v59 / (double)(v58 + v59);
      }
      else
      {
        *(void **)((char *)v138 + 5) = *(void **)((char *)&turi::FLEX_UNDEFINED + 5);
        v138[0] = (void *)turi::FLEX_UNDEFINED;
        BYTE4(v138[1]) = byte_254FF478C;
        switch(byte_254FF478C)
        {
          case 2:
            v89 = (unint64_t *)v138[0];
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 + 1, v89));
            break;
          case 3:
            v126 = (unint64_t *)v138[0];
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 + 1, v126));
            break;
          case 4:
            v122 = (unint64_t *)v138[0];
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 + 1, v122));
            break;
          case 5:
            v128 = (unint64_t *)v138[0];
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 + 1, v128));
            break;
          case 8:
            v130 = (unint64_t *)v138[0];
            do
              v131 = __ldaxr(v130);
            while (__stlxr(v131 + 1, v130));
            break;
          case 9:
            v124 = (unint64_t *)v138[0];
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 + 1, v124));
            break;
          default:
            break;
        }
      }
      memset(v139, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v139, (uint64_t *)v138);
      *(void ***)(a2 + 13) = *(void ***)((char *)v139 + 5);
      *(void ***)(a2 + 8) = v139[0];
      *(_BYTE *)(a2 + 20) = BYTE4(v139[1]);
      *(_DWORD *)a2 = 0;
      switch(BYTE4(v138[1]))
      {
        case 2:
          v87 = (unint64_t *)v138[0];
          do
          {
            v88 = __ldaxr(v87);
            v52 = --v88 == 0;
          }
          while (__stlxr(v88, v87));
LABEL_66:
          if (v52)
          {
            v53 = v138[0];
            if (v138[0])
            {
              if (*((char *)v138[0] + 31) < 0)
                operator delete(*((void **)v138[0] + 1));
              v54 = v53;
              v55 = 0x1012C404EF22A49;
              goto LABEL_122;
            }
          }
          break;
        case 3:
          v116 = (unint64_t *)v138[0];
          do
          {
            v117 = __ldaxr(v116);
            v77 = --v117 == 0;
          }
          while (__stlxr(v117, v116));
LABEL_102:
          if (v77)
          {
            v78 = v138[0];
            if (v138[0])
            {
              v79 = (void *)*((_QWORD *)v138[0] + 1);
              if (v79)
              {
                *((_QWORD *)v138[0] + 2) = v79;
                operator delete(v79);
              }
              v54 = v78;
              v55 = 0x1080C409938AC02;
              goto LABEL_122;
            }
          }
          break;
        case 4:
          v112 = (unint64_t *)v138[0];
          do
          {
            v113 = __ldaxr(v112);
            v69 = --v113 == 0;
          }
          while (__stlxr(v113, v112));
LABEL_90:
          if (v69)
          {
            v70 = v138[0];
            if (v138[0])
            {
              v139[0] = (void **)((char *)v138[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v139);
              goto LABEL_114;
            }
          }
          break;
        case 5:
          v118 = (unint64_t *)v138[0];
          do
          {
            v119 = __ldaxr(v118);
            v82 = --v119 == 0;
          }
          while (__stlxr(v119, v118));
LABEL_110:
          if (v82)
          {
            v70 = v138[0];
            if (v138[0])
            {
              v139[0] = (void **)((char *)v138[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v139);
LABEL_114:
              v54 = v70;
              v55 = 0x1020C405E66F15BLL;
              goto LABEL_122;
            }
          }
          break;
        case 8:
          v120 = (unint64_t *)v138[0];
          do
          {
            v121 = __ldaxr(v120);
            v85 = --v121 == 0;
          }
          while (__stlxr(v121, v120));
LABEL_117:
          if (v85)
          {
            v86 = v138[0];
            if (v138[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v138[0] + 2);
              v54 = v86;
              v74 = -235920773;
              goto LABEL_121;
            }
          }
          break;
        case 9:
          v114 = (unint64_t *)v138[0];
          do
          {
            v115 = __ldaxr(v114);
            v73 = --v115 == 0;
          }
          while (__stlxr(v115, v114));
LABEL_96:
          if (v73 && v138[0])
          {
            v54 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v138[0]);
            v74 = 2071181815;
LABEL_121:
            v55 = v74 | 0x1030C4000000000;
LABEL_122:
            MEMORY[0x219A19A08](v54, v55);
          }
          break;
        default:
          return std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v135);
      }
    }
    else
    {
      turi::flexible_type_converter<std::unordered_map<turi::flexible_type,turi::flexible_type>>::set((uint64_t)v135, (uint64_t)v139);
      *(void ***)(a2 + 13) = *(void ***)((char *)v139 + 5);
      *(void ***)(a2 + 8) = v139[0];
      *(_BYTE *)(a2 + 20) = BYTE4(v139[1]);
      *(_DWORD *)a2 = 0;
    }
  }
  return std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v135);
}

void sub_21849355C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::recall::recall(uint64_t a1, turi::evaluation *a2)
{
  const turi::flexible_type *v4;
  _QWORD **v6;
  _QWORD *v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v6 = v7;
  turi::evaluation::confusion_matrix::confusion_matrix(a1, (uint64_t)&v6);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v6, v7[0]);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_QWORD *)a1 = &unk_24D942FF0;
  *(_BYTE *)(a1 + 184) = turi::evaluation::average_type_enum_from_name(a2, v4);
  return a1;
}

void sub_218493850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  turi::evaluation::flexible_accuracy *v11;

  turi::evaluation::flexible_accuracy::~flexible_accuracy(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::evaluation::fbeta_score>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D943060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::fbeta_score>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D943060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::fbeta_score>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void turi::evaluation::fbeta_score::~fbeta_score(turi::evaluation::fbeta_score *this)
{
  void **v2;

  *(_QWORD *)this = &unk_24D942E88;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 312);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 272);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 232);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 192);
  *(_QWORD *)this = &unk_24D942980;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 104);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 40);
  v2 = (void **)((char *)this + 8);
  std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C40B6F36C08);
}

_QWORD *turi::evaluation::fbeta_score::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "fbeta_score");
}

uint64_t turi::evaluation::fbeta_score::get_metric@<X0>(turi::evaluation::fbeta_score *this@<X0>, uint64_t a2@<X8>)
{
  __n128 v3;
  uint64_t *i;
  turi::evaluation *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  unsigned int v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unint64_t *v70;
  unint64_t v71;
  BOOL v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  turi::evaluation *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  unsigned int v96;
  unint64_t *v97;
  unint64_t v98;
  BOOL v99;
  uint64_t v100;
  void *v101;
  unint64_t *v102;
  unint64_t v103;
  BOOL v104;
  unint64_t *v105;
  unint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  _BYTE v143[40];
  _OWORD v144[2];
  int v145;
  uint64_t *v146;
  uint64_t v147[2];
  void **v148[4];

  v148[2] = *(void ***)MEMORY[0x24BDAC8D0];
  turi::evaluation::precision_recall_base::gather_global_metrics(this);
  v3 = 0uLL;
  memset(v144, 0, sizeof(v144));
  v145 = 1065353216;
  for (i = (uint64_t *)*((_QWORD *)this + 7); i; i = (uint64_t *)*i)
  {
    v148[0] = (void **)(i + 2);
    v5 = (turi::evaluation *)*((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)this + 192, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, (void **)v148)+ 4);
    v148[0] = (void **)(i + 2);
    v6 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)this + 272, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, (void **)v148)+ 4);
    v148[0] = (void **)(i + 2);
    v7 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)this + 312, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, (void **)v148);
    turi::evaluation::compute_fbeta_score(v5, *((double *)this + 44), v6, *((_QWORD *)v7 + 4), (uint64_t)v147);
    v146 = i + 2;
    v8 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v144, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, (void **)&v146);
    v9 = v8;
    v10 = v8 + 32;
    if (v147 == (uint64_t *)(v8 + 32))
    {
      switch(BYTE4(v147[1]))
      {
        case 2:
          v40 = (unint64_t *)v147[0];
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            v43 = v147[0];
            if (v147[0])
            {
              if (*(char *)(v147[0] + 31) < 0)
                operator delete(*(void **)(v147[0] + 8));
              v44 = v43;
              v45 = 0x1012C404EF22A49;
              goto LABEL_90;
            }
          }
          break;
        case 3:
          v57 = (unint64_t *)v147[0];
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = v147[0];
            if (v147[0])
            {
              v61 = *(void **)(v147[0] + 8);
              if (v61)
              {
                *(_QWORD *)(v147[0] + 16) = v61;
                operator delete(v61);
              }
              v44 = v60;
              v45 = 0x1080C409938AC02;
              goto LABEL_90;
            }
          }
          break;
        case 4:
          v46 = (unint64_t *)v147[0];
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            v49 = v147[0];
            if (v147[0])
            {
              v148[0] = (void **)(v147[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v148);
              goto LABEL_83;
            }
          }
          break;
        case 5:
          v62 = (unint64_t *)v147[0];
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v49 = v147[0];
            if (v147[0])
            {
              v148[0] = (void **)(v147[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v148);
LABEL_83:
              v44 = v49;
              v45 = 0x1020C405E66F15BLL;
              goto LABEL_90;
            }
          }
          break;
        case 8:
          v65 = (unint64_t *)v147[0];
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            v68 = v147[0];
            if (v147[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v147[0] + 16));
              v44 = v68;
              v56 = -235920773;
              goto LABEL_89;
            }
          }
          break;
        case 9:
          v50 = (unint64_t *)v147[0];
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = v147[0];
            if (v147[0])
            {
              v54 = *(void **)(v147[0] + 48);
              if (v54)
              {
                *(_QWORD *)(v147[0] + 56) = v54;
                operator delete(v54);
              }
              v55 = *(void **)(v53 + 24);
              if (v55)
              {
                *(_QWORD *)(v53 + 32) = v55;
                operator delete(v55);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v53 + 8);
              v44 = v53;
              v56 = 2071181815;
LABEL_89:
              v45 = v56 | 0x1030C4000000000;
LABEL_90:
              MEMORY[0x219A19A08](v44, v45);
            }
          }
          break;
        default:
          continue;
      }
    }
    else
    {
      switch(v8[44])
      {
        case 2u:
          v11 = *(unint64_t **)v10;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v14 = *(unint64_t **)v10;
            if (!*(_QWORD *)v10)
              goto LABEL_45;
            if (*((char *)v14 + 31) < 0)
              operator delete((void *)v14[1]);
            v15 = v14;
            v16 = 0x1012C404EF22A49;
            goto LABEL_44;
          }
          break;
        case 3u:
          v28 = *(unint64_t **)v10;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = *(unint64_t **)v10;
            if (!*(_QWORD *)v10)
              goto LABEL_45;
            v32 = (void *)v31[1];
            if (v32)
            {
              v31[2] = (unint64_t)v32;
              operator delete(v32);
            }
            v15 = v31;
            v16 = 0x1080C409938AC02;
            goto LABEL_44;
          }
          break;
        case 4u:
          v17 = *(unint64_t **)v10;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = *(unint64_t **)v10;
            if (!*(_QWORD *)v10)
              goto LABEL_45;
            v148[0] = (void **)(v20 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v148);
            goto LABEL_37;
          }
          break;
        case 5u:
          v33 = *(unint64_t **)v10;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v20 = *(unint64_t **)v10;
            if (!*(_QWORD *)v10)
              goto LABEL_45;
            v148[0] = (void **)(v20 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v148);
LABEL_37:
            v15 = v20;
            v16 = 0x1020C405E66F15BLL;
            goto LABEL_44;
          }
          break;
        case 8u:
          v36 = *(unint64_t **)v10;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = *(unint64_t **)v10;
            if (!*(_QWORD *)v10)
              goto LABEL_45;
            boost::detail::shared_count::~shared_count((unsigned int **)v39 + 2);
            v15 = v39;
            v27 = -235920773;
            goto LABEL_43;
          }
          break;
        case 9u:
          v21 = *(unint64_t **)v10;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v24 = *(unint64_t **)v10;
            if (*(_QWORD *)v10)
            {
              v25 = (void *)v24[6];
              if (v25)
              {
                v24[7] = (unint64_t)v25;
                operator delete(v25);
              }
              v26 = (void *)v24[3];
              if (v26)
              {
                v24[4] = (unint64_t)v26;
                operator delete(v26);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v24 + 1));
              v15 = v24;
              v27 = 2071181815;
LABEL_43:
              v16 = v27 | 0x1030C4000000000;
LABEL_44:
              MEMORY[0x219A19A08](v15, v16);
            }
LABEL_45:
            *(_QWORD *)v10 = 0;
          }
          break;
        default:
          break;
      }
      *(_QWORD *)v10 = v147[0];
      *(_QWORD *)(v10 + 5) = *(uint64_t *)((char *)v147 + 5);
      v9[44] = BYTE4(v147[1]);
    }
  }
  if (*((_QWORD *)this + 8) == 2)
  {
    turi::evaluation::precision_recall_base::get_reference_label(this, (unsigned __int8 *)v147, v3);
    v146 = v147;
    v69 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>((uint64_t)v144, (unsigned __int8 *)v147, (uint64_t)&std::piecewise_construct, &v146);
    memset(v148, 0, 13);
    turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v148, (uint64_t *)v69 + 4);
    *(void ***)(a2 + 13) = *(void ***)((char *)v148 + 5);
    *(void ***)(a2 + 8) = v148[0];
    *(_BYTE *)(a2 + 20) = BYTE4(v148[1]);
    *(_DWORD *)a2 = 0;
    switch(BYTE4(v147[1]))
    {
      case 2:
        v70 = (unint64_t *)v147[0];
        do
        {
          v71 = __ldaxr(v70);
          v72 = --v71 == 0;
        }
        while (__stlxr(v71, v70));
        goto LABEL_95;
      case 3:
        v97 = (unint64_t *)v147[0];
        do
        {
          v98 = __ldaxr(v97);
          v99 = --v98 == 0;
        }
        while (__stlxr(v98, v97));
        goto LABEL_131;
      case 4:
        v89 = (unint64_t *)v147[0];
        do
        {
          v90 = __ldaxr(v89);
          v91 = --v90 == 0;
        }
        while (__stlxr(v90, v89));
        goto LABEL_119;
      case 5:
        v102 = (unint64_t *)v147[0];
        do
        {
          v103 = __ldaxr(v102);
          v104 = --v103 == 0;
        }
        while (__stlxr(v103, v102));
        goto LABEL_139;
      case 8:
        v105 = (unint64_t *)v147[0];
        do
        {
          v106 = __ldaxr(v105);
          v107 = --v106 == 0;
        }
        while (__stlxr(v106, v105));
        goto LABEL_146;
      case 9:
        v93 = (unint64_t *)v147[0];
        do
        {
          v94 = __ldaxr(v93);
          v95 = --v94 == 0;
        }
        while (__stlxr(v94, v93));
        goto LABEL_125;
      default:
        return std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v144);
    }
  }
  else
  {
    v76 = *((unsigned __int8 *)this + 184);
    if ((v76 - 2) < 2)
    {
      std::unordered_map<turi::flexible_type,turi::flexible_type>::unordered_map((uint64_t)v143, (uint64_t)v144);
      turi::evaluation::average_with_none_skip((uint64_t)v143, (uint64_t)v147);
      memset(v148, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v148, v147);
      *(void ***)(a2 + 13) = *(void ***)((char *)v148 + 5);
      *(void ***)(a2 + 8) = v148[0];
      *(_BYTE *)(a2 + 20) = BYTE4(v148[1]);
      *(_DWORD *)a2 = 0;
      switch(BYTE4(v147[1]))
      {
        case 2:
          v83 = (unint64_t *)v147[0];
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
          {
            v86 = v147[0];
            if (v147[0])
            {
              if (*(char *)(v147[0] + 31) < 0)
                operator delete(*(void **)(v147[0] + 8));
              v87 = (_QWORD *)v86;
              v88 = 0x1012C404EF22A49;
              goto LABEL_186;
            }
          }
          break;
        case 3:
          v119 = (unint64_t *)v147[0];
          do
          {
            v120 = __ldaxr(v119);
            v121 = v120 - 1;
          }
          while (__stlxr(v121, v119));
          if (!v121)
          {
            v122 = v147[0];
            if (v147[0])
            {
              v123 = *(void **)(v147[0] + 8);
              if (v123)
              {
                *(_QWORD *)(v147[0] + 16) = v123;
                operator delete(v123);
              }
              v87 = (_QWORD *)v122;
              v88 = 0x1080C409938AC02;
              goto LABEL_186;
            }
          }
          break;
        case 4:
          v111 = (unint64_t *)v147[0];
          do
          {
            v112 = __ldaxr(v111);
            v113 = v112 - 1;
          }
          while (__stlxr(v113, v111));
          if (!v113)
          {
            v114 = v147[0];
            if (v147[0])
            {
              v148[0] = (void **)(v147[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v148);
              goto LABEL_179;
            }
          }
          break;
        case 5:
          v124 = (unint64_t *)v147[0];
          do
          {
            v125 = __ldaxr(v124);
            v126 = v125 - 1;
          }
          while (__stlxr(v126, v124));
          if (!v126)
          {
            v114 = v147[0];
            if (v147[0])
            {
              v148[0] = (void **)(v147[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v148);
LABEL_179:
              v87 = (_QWORD *)v114;
              v88 = 0x1020C405E66F15BLL;
              goto LABEL_186;
            }
          }
          break;
        case 8:
          v127 = (unint64_t *)v147[0];
          do
          {
            v128 = __ldaxr(v127);
            v129 = v128 - 1;
          }
          while (__stlxr(v129, v127));
          if (!v129)
          {
            v130 = v147[0];
            if (v147[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v147[0] + 16));
              v87 = (_QWORD *)v130;
              v118 = -235920773;
              goto LABEL_185;
            }
          }
          break;
        case 9:
          v115 = (unint64_t *)v147[0];
          do
          {
            v116 = __ldaxr(v115);
            v117 = v116 - 1;
          }
          while (__stlxr(v117, v115));
          if (!v117 && v147[0])
          {
            v87 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v147[0]);
            v118 = 2071181815;
LABEL_185:
            v88 = v118 | 0x1030C4000000000;
LABEL_186:
            MEMORY[0x219A19A08](v87, v88);
          }
          break;
        default:
          break;
      }
      memset(v147, 0, 13);
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v143);
    }
    else if (*((_BYTE *)this + 184))
    {
      if (v76 != 1)
        turi::evaluation::fbeta_score::get_metric(void)::{lambda(void)#1}::operator()();
      v77 = (uint64_t *)*((_QWORD *)this + 7);
      if (v77)
      {
        v78 = 0;
        v79 = 0;
        v80 = 0;
        do
        {
          v148[0] = (void **)(v77 + 2);
          v81 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)this + 192, (unsigned __int8 *)v77 + 16, (uint64_t)&std::piecewise_construct, (void **)v148)+ 4);
          v148[0] = (void **)(v77 + 2);
          v82 = *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)this + 272, (unsigned __int8 *)v77 + 16, (uint64_t)&std::piecewise_construct, (void **)v148)+ 4);
          v148[0] = (void **)(v77 + 2);
          v80 = (turi::evaluation *)((char *)v80 + v81);
          v79 += v82;
          v78 += *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)this + 312, (unsigned __int8 *)v77 + 16, (uint64_t)&std::piecewise_construct, (void **)v148)+ 4);
          v77 = (uint64_t *)*v77;
        }
        while (v77);
      }
      else
      {
        v80 = 0;
        v79 = 0;
        v78 = 0;
      }
      turi::evaluation::compute_fbeta_score(v80, *((double *)this + 44), v79, v78, (uint64_t)v147);
      memset(v148, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v148, v147);
      *(void ***)(a2 + 13) = *(void ***)((char *)v148 + 5);
      *(void ***)(a2 + 8) = v148[0];
      *(_BYTE *)(a2 + 20) = BYTE4(v148[1]);
      *(_DWORD *)a2 = 0;
      switch(BYTE4(v147[1]))
      {
        case 2:
          v109 = (unint64_t *)v147[0];
          do
          {
            v110 = __ldaxr(v109);
            v72 = --v110 == 0;
          }
          while (__stlxr(v110, v109));
LABEL_95:
          if (v72)
          {
            v73 = v147[0];
            if (v147[0])
            {
              if (*(char *)(v147[0] + 31) < 0)
                operator delete(*(void **)(v147[0] + 8));
              v74 = (_QWORD *)v73;
              v75 = 0x1012C404EF22A49;
              goto LABEL_151;
            }
          }
          break;
        case 3:
          v136 = (unint64_t *)v147[0];
          do
          {
            v137 = __ldaxr(v136);
            v99 = --v137 == 0;
          }
          while (__stlxr(v137, v136));
LABEL_131:
          if (v99)
          {
            v100 = v147[0];
            if (v147[0])
            {
              v101 = *(void **)(v147[0] + 8);
              if (v101)
              {
                *(_QWORD *)(v147[0] + 16) = v101;
                operator delete(v101);
              }
              v74 = (_QWORD *)v100;
              v75 = 0x1080C409938AC02;
              goto LABEL_151;
            }
          }
          break;
        case 4:
          v132 = (unint64_t *)v147[0];
          do
          {
            v133 = __ldaxr(v132);
            v91 = --v133 == 0;
          }
          while (__stlxr(v133, v132));
LABEL_119:
          if (v91)
          {
            v92 = v147[0];
            if (v147[0])
            {
              v148[0] = (void **)(v147[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v148);
              goto LABEL_143;
            }
          }
          break;
        case 5:
          v138 = (unint64_t *)v147[0];
          do
          {
            v139 = __ldaxr(v138);
            v104 = --v139 == 0;
          }
          while (__stlxr(v139, v138));
LABEL_139:
          if (v104)
          {
            v92 = v147[0];
            if (v147[0])
            {
              v148[0] = (void **)(v147[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v148);
LABEL_143:
              v74 = (_QWORD *)v92;
              v75 = 0x1020C405E66F15BLL;
              goto LABEL_151;
            }
          }
          break;
        case 8:
          v140 = (unint64_t *)v147[0];
          do
          {
            v141 = __ldaxr(v140);
            v107 = --v141 == 0;
          }
          while (__stlxr(v141, v140));
LABEL_146:
          if (v107)
          {
            v108 = v147[0];
            if (v147[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v147[0] + 16));
              v74 = (_QWORD *)v108;
              v96 = -235920773;
              goto LABEL_150;
            }
          }
          break;
        case 9:
          v134 = (unint64_t *)v147[0];
          do
          {
            v135 = __ldaxr(v134);
            v95 = --v135 == 0;
          }
          while (__stlxr(v135, v134));
LABEL_125:
          if (v95 && v147[0])
          {
            v74 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v147[0]);
            v96 = 2071181815;
LABEL_150:
            v75 = v96 | 0x1030C4000000000;
LABEL_151:
            MEMORY[0x219A19A08](v74, v75);
          }
          break;
        default:
          return std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v144);
      }
    }
    else
    {
      turi::flexible_type_converter<std::unordered_map<turi::flexible_type,turi::flexible_type>>::set((uint64_t)v144, (uint64_t)v148);
      *(void ***)(a2 + 13) = *(void ***)((char *)v148 + 5);
      *(void ***)(a2 + 8) = v148[0];
      *(_BYTE *)(a2 + 20) = BYTE4(v148[1]);
      *(_DWORD *)a2 = 0;
    }
  }
  return std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v144);
}

void sub_2184944E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::evaluation::compute_fbeta_score(turi::evaluation *this@<X0>, double a2@<D0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  int v7;
  double v8;
  unsigned int v9;
  int v10;
  double v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  double v63;
  size_t v64;
  double *v65;
  double *v66;
  unint64_t v67;
  double *v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  size_t v93;
  double *v94;
  double *v95;
  unint64_t v96;
  double *v97;
  unint64_t v98;
  double v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  void *v103;
  void *v104;
  unsigned int v105;
  unint64_t v106;
  void *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  double v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  void *v115;
  void *v116;
  unsigned int v117;
  unint64_t v118;
  void *v119;
  unint64_t v120;
  unint64_t v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  uint64_t v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  char v134;
  uint64_t v135;
  void *__p;
  uint64_t *v137;

  if ((turi::evaluation *)((char *)this + a3))
  {
    v7 = 0;
    v8 = (double)(unint64_t)this / (double)((unint64_t)this + a3);
    v9 = 1;
  }
  else
  {
    v8 = *(double *)&turi::FLEX_UNDEFINED;
    v7 = dword_254FF4788;
    v9 = byte_254FF478C;
    switch(byte_254FF478C)
    {
      case 2:
        do
          v14 = __ldaxr(*(unint64_t **)&v8);
        while (__stlxr(v14 + 1, *(unint64_t **)&v8));
        v9 = 2;
        break;
      case 3:
        do
          v17 = __ldaxr(*(unint64_t **)&v8);
        while (__stlxr(v17 + 1, *(unint64_t **)&v8));
        v9 = 3;
        break;
      case 4:
        do
          v15 = __ldaxr(*(unint64_t **)&v8);
        while (__stlxr(v15 + 1, *(unint64_t **)&v8));
        v9 = 4;
        break;
      case 5:
        do
          v18 = __ldaxr(*(unint64_t **)&v8);
        while (__stlxr(v18 + 1, *(unint64_t **)&v8));
        v9 = 5;
        break;
      case 8:
        do
          v19 = __ldaxr(*(unint64_t **)&v8);
        while (__stlxr(v19 + 1, *(unint64_t **)&v8));
        v9 = 8;
        break;
      case 9:
        do
          v16 = __ldaxr(*(unint64_t **)&v8);
        while (__stlxr(v16 + 1, *(unint64_t **)&v8));
        v9 = 9;
        break;
      default:
        break;
    }
  }
  if ((turi::evaluation *)((char *)this + a4))
  {
    v10 = 0;
    v11 = (double)(unint64_t)this / (double)((unint64_t)this + a4);
    v12 = 1;
LABEL_5:
    v13 = byte_254FF478C;
  }
  else
  {
    v11 = *(double *)&turi::FLEX_UNDEFINED;
    v10 = dword_254FF4788;
    v13 = byte_254FF478C;
    v12 = byte_254FF478C;
    switch(byte_254FF478C)
    {
      case 2:
        do
          v20 = __ldaxr(*(unint64_t **)&v11);
        while (__stlxr(v20 + 1, *(unint64_t **)&v11));
        v12 = 2;
        goto LABEL_5;
      case 3:
        do
          v23 = __ldaxr(*(unint64_t **)&v11);
        while (__stlxr(v23 + 1, *(unint64_t **)&v11));
        v12 = 3;
        goto LABEL_5;
      case 4:
        do
          v21 = __ldaxr(*(unint64_t **)&v11);
        while (__stlxr(v21 + 1, *(unint64_t **)&v11));
        v12 = 4;
        goto LABEL_5;
      case 5:
        do
          v24 = __ldaxr(*(unint64_t **)&v11);
        while (__stlxr(v24 + 1, *(unint64_t **)&v11));
        v12 = 5;
        goto LABEL_5;
      case 6:
      case 7:
        break;
      case 8:
        do
          v25 = __ldaxr(*(unint64_t **)&v11);
        while (__stlxr(v25 + 1, *(unint64_t **)&v11));
        v12 = 8;
        goto LABEL_5;
      case 9:
        do
          v22 = __ldaxr(*(unint64_t **)&v11);
        while (__stlxr(v22 + 1, *(unint64_t **)&v11));
        v12 = 9;
        goto LABEL_5;
      default:
        v12 = byte_254FF478C;
        break;
    }
  }
  switch(v13)
  {
    case 0:
      switch(v9)
      {
        case 0u:
          if (*(_QWORD *)&v8 == turi::FLEX_UNDEFINED)
            goto LABEL_259;
          goto LABEL_99;
        case 1u:
          v123 = v8;
          v124 = (double)turi::FLEX_UNDEFINED;
          goto LABEL_254;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_99;
        case 6u:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)&v8 << 8) >> 8 && !v7)
            goto LABEL_259;
          goto LABEL_99;
        default:
          goto LABEL_309;
      }
    case 1:
      switch(v9)
      {
        case 0u:
          if (*(double *)&turi::FLEX_UNDEFINED != (double)*(uint64_t *)&v8)
            goto LABEL_99;
          goto LABEL_259;
        case 1u:
          v123 = v8;
          v124 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_254:
          if (v124 != v123)
            goto LABEL_99;
          goto LABEL_259;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_99;
        case 6u:
          v122 = vabdd_f64((double)v7 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v8 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_258;
        default:
          goto LABEL_309;
      }
    case 2:
      if (v9 - 3 < 7 || v9 < 2)
        goto LABEL_99;
      if (v9 != 2)
        goto LABEL_309;
      if (*(char *)(*(_QWORD *)&v8 + 31) < 0)
        v64 = *(_QWORD *)(*(_QWORD *)&v8 + 16);
      else
        v64 = *(unsigned __int8 *)(*(_QWORD *)&v8 + 31);
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
        v128 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
      else
        v128 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v64 != v128)
        goto LABEL_99;
      v129 = (unsigned __int8 *)(*(_QWORD *)&v8 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v8 + 31) & 0x80) != 0)
        v129 = *(unsigned __int8 **)v129;
      v130 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v130 = *(unsigned __int8 **)v130;
      if ((*(_BYTE *)(*(_QWORD *)&v8 + 31) & 0x80) != 0)
      {
        if (memcmp(v129, v130, v64))
          goto LABEL_99;
      }
      else
      {
        if (!v64)
          goto LABEL_259;
        do
        {
          if (*v129 != *v130)
            goto LABEL_99;
          ++v129;
          ++v130;
          --v64;
        }
        while (v64);
      }
      goto LABEL_259;
    case 3:
      if (v9 > 9)
        goto LABEL_309;
      if (v9 != 3)
        goto LABEL_99;
      v65 = *(double **)(*(_QWORD *)&v8 + 8);
      v66 = *(double **)(*(_QWORD *)&v8 + 16);
      v67 = v66 - v65;
      v68 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v67 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v68) >> 3)
        goto LABEL_99;
      if (v66 == v65)
        goto LABEL_259;
      if (v67 <= 1)
        v67 = 1;
      break;
    case 4:
      if (v9 > 9)
        goto LABEL_309;
      if (v9 != 4)
        goto LABEL_99;
      v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v134, (uint64_t *)(*(_QWORD *)&v8 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_239;
    case 5:
      if (v9 > 9)
        goto LABEL_309;
      if (v9 != 5)
        goto LABEL_99;
      v26 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v134, (uint64_t **)(*(_QWORD *)&v8 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_239;
    case 6:
      switch(v9)
      {
        case 0u:
          if (*(_QWORD *)&v8 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF4788)
            goto LABEL_259;
          goto LABEL_99;
        case 1u:
          v122 = vabdd_f64(v8, (double)dword_254FF4788 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_258:
          if (v122 < 0.0000005)
            goto LABEL_259;
          goto LABEL_99;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_99;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)&v8) & 0xFFFFFFFFFFFFFFLL) == 0 && v7 == dword_254FF4788)
            goto LABEL_259;
          goto LABEL_99;
        default:
          goto LABEL_309;
      }
    case 7:
      if (v9 < 7 || v9 - 8 < 2)
        goto LABEL_99;
      if (v9 != 7)
        goto LABEL_309;
      goto LABEL_259;
    case 8:
      if (v9 < 8 || v9 == 9)
        goto LABEL_99;
      if (v9 != 8)
        goto LABEL_309;
      v26 = turi::image_type::operator==(*(_QWORD *)&v8 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_239:
      if (v26)
        goto LABEL_259;
      goto LABEL_99;
    case 9:
      if (v9 < 9)
        goto LABEL_99;
      if (v9 != 9)
      {
LABEL_309:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
      }
      v27 = turi::FLEX_UNDEFINED;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)&v8)
        goto LABEL_259;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v8 + 8, turi::FLEX_UNDEFINED + 8))
        goto LABEL_99;
      v29 = *(char **)(*(_QWORD *)&v8 + 24);
      v28 = *(char **)(*(_QWORD *)&v8 + 32);
      v30 = v28 - v29;
      if (v28 == v29)
        goto LABEL_259;
      if (!*(_QWORD *)(*(_QWORD *)&v8 + 8))
        goto LABEL_259;
      v31 = 1;
      do
      {
        v32 = *(_QWORD *)v29;
        v29 += 8;
        v31 *= v32;
      }
      while (v29 != v28);
      if (!v31)
        goto LABEL_259;
      v135 = 0;
      std::vector<unsigned long>::vector(&__p, v30 >> 3, &v135);
      v33 = (uint64_t *)__p;
      v34 = v137;
      v35 = **(_QWORD **)(v27 + 8);
      v36 = (char *)v137 - (_BYTE *)__p;
      v37 = ((char *)v137 - (_BYTE *)__p) >> 3;
      v38 = v37 - 1;
      if (v37 <= 1)
        v39 = 1;
      else
        v39 = ((char *)v137 - (_BYTE *)__p) >> 3;
      do
      {
        if (v34 == v33)
        {
          v47 = 0;
          v48 = *(double *)(**(_QWORD **)(*(_QWORD *)&v8 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v8 + 72));
        }
        else
        {
          v40 = 0;
          v41 = *(uint64_t **)(*(_QWORD *)&v8 + 48);
          v42 = v33;
          v43 = v39;
          do
          {
            v45 = *v42++;
            v44 = v45;
            v46 = *v41++;
            v40 += v46 * v44;
            --v43;
          }
          while (v43);
          v47 = 0;
          v48 = *(double *)(**(_QWORD **)(*(_QWORD *)&v8 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v8 + 72) + v40));
          v49 = *(uint64_t **)(v27 + 48);
          v50 = v33;
          v51 = v39;
          do
          {
            v53 = *v50++;
            v52 = v53;
            v54 = *v49++;
            v47 += v54 * v52;
            --v51;
          }
          while (v51);
        }
        v55 = *(double *)(v35 + 8 * (*(_QWORD *)(v27 + 72) + v47));
        if (v48 != v55)
          break;
        v56 = v37;
        v57 = v37 - 1;
        if (v36 >= 1)
        {
          v58 = *(_QWORD *)(*(_QWORD *)&v8 + 24);
          v59 = v33[v38] + 1;
          v33[v38] = v59;
          v60 = (v36 & 0xFFFFFFFFFFFFFFF8) - 16;
          v57 = v37 - 1;
          if (v59 >= *(_QWORD *)(v58 + 8 * v38))
          {
            do
            {
              *(uint64_t *)((char *)v33 + v60 + 8) = 0;
              if (v57 <= 0)
              {
                v137 = v33;
                operator delete(v33);
                goto LABEL_259;
              }
              --v57;
              v61 = *(uint64_t *)((char *)v33 + v60) + 1;
              *(uint64_t *)((char *)v33 + v60) = v61;
              v62 = *(_QWORD *)(v58 + v60);
              v60 -= 8;
            }
            while (v61 >= v62);
            v56 = 1;
          }
          else
          {
            v56 = 1;
            v57 = v37 - 1;
          }
        }
      }
      while ((v57 & 0x8000000000000000) == 0 && v56);
      if (v33)
      {
        v137 = v33;
        v63 = v48;
        operator delete(v33);
        if (v63 == v55)
          goto LABEL_259;
      }
      else if (v48 == v55)
      {
        goto LABEL_259;
      }
      goto LABEL_99;
    default:
      goto LABEL_309;
  }
  while (*v65 == *v68)
  {
    ++v68;
    ++v65;
    if (!--v67)
    {
LABEL_259:
      *(double *)a5 = v11;
      *(_DWORD *)(a5 + 8) = v10;
      *(_BYTE *)(a5 + 12) = v12;
      goto LABEL_198;
    }
  }
LABEL_99:
  switch(byte_254FF478C)
  {
    case 0:
      switch(v12)
      {
        case 0u:
          if (*(_QWORD *)&v11 == turi::FLEX_UNDEFINED)
            goto LABEL_273;
          goto LABEL_161;
        case 1u:
          v126 = v11;
          v127 = (double)turi::FLEX_UNDEFINED;
          goto LABEL_268;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_161;
        case 6u:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)&v11 << 8) >> 8 && !v10)
            goto LABEL_273;
          goto LABEL_161;
        default:
          goto LABEL_309;
      }
    case 1:
      switch(v12)
      {
        case 0u:
          if (*(double *)&turi::FLEX_UNDEFINED != (double)*(uint64_t *)&v11)
            goto LABEL_161;
          goto LABEL_273;
        case 1u:
          v126 = v11;
          v127 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_268:
          if (v127 != v126)
            goto LABEL_161;
          goto LABEL_273;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_161;
        case 6u:
          v125 = vabdd_f64((double)v10 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v11 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_272;
        default:
          goto LABEL_309;
      }
    case 2:
      if (v12 - 3 < 7 || v12 < 2)
        goto LABEL_161;
      if (v12 != 2)
        goto LABEL_309;
      if (*(char *)(*(_QWORD *)&v11 + 31) < 0)
        v93 = *(_QWORD *)(*(_QWORD *)&v11 + 16);
      else
        v93 = *(unsigned __int8 *)(*(_QWORD *)&v11 + 31);
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
        v131 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
      else
        v131 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v93 != v131)
        goto LABEL_161;
      v132 = (unsigned __int8 *)(*(_QWORD *)&v11 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v11 + 31) & 0x80) != 0)
        v132 = *(unsigned __int8 **)v132;
      v133 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v133 = *(unsigned __int8 **)v133;
      if ((*(_BYTE *)(*(_QWORD *)&v11 + 31) & 0x80) != 0)
      {
        if (memcmp(v132, v133, v93))
          goto LABEL_161;
      }
      else
      {
        if (!v93)
          goto LABEL_273;
        do
        {
          if (*v132 != *v133)
            goto LABEL_161;
          ++v132;
          ++v133;
          --v93;
        }
        while (v93);
      }
      goto LABEL_273;
    case 3:
      if (v12 > 9)
        goto LABEL_309;
      if (v12 != 3)
        goto LABEL_161;
      v94 = *(double **)(*(_QWORD *)&v11 + 8);
      v95 = *(double **)(*(_QWORD *)&v11 + 16);
      v96 = v95 - v94;
      v97 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v96 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v97) >> 3)
        goto LABEL_161;
      if (v95 == v94)
        goto LABEL_273;
      if (v96 <= 1)
        v96 = 1;
      while (*v94 == *v97)
      {
        ++v97;
        ++v94;
        if (!--v96)
          goto LABEL_273;
      }
      goto LABEL_161;
    case 4:
      if (v12 > 9)
        goto LABEL_309;
      if (v12 != 4)
        goto LABEL_161;
      v69 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v134, (uint64_t *)(*(_QWORD *)&v11 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_244;
    case 5:
      if (v12 > 9)
        goto LABEL_309;
      if (v12 != 5)
        goto LABEL_161;
      v69 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v134, (uint64_t **)(*(_QWORD *)&v11 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_244;
    case 6:
      switch(v12)
      {
        case 0u:
          if (*(_QWORD *)&v11 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF4788)
            goto LABEL_273;
          goto LABEL_161;
        case 1u:
          v125 = vabdd_f64(v11, (double)dword_254FF4788 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_272:
          if (v125 < 0.0000005)
            goto LABEL_273;
          goto LABEL_161;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_161;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)&v11) & 0xFFFFFFFFFFFFFFLL) == 0 && v10 == dword_254FF4788)
            goto LABEL_273;
          goto LABEL_161;
        default:
          goto LABEL_309;
      }
    case 7:
      if (v12 < 7 || v12 - 8 < 2)
        goto LABEL_161;
      if (v12 != 7)
        goto LABEL_309;
      goto LABEL_273;
    case 8:
      if (v12 < 8 || v12 == 9)
        goto LABEL_161;
      if (v12 != 8)
        goto LABEL_309;
      v69 = turi::image_type::operator==(*(_QWORD *)&v11 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_244:
      if (v69)
        goto LABEL_273;
      goto LABEL_161;
    case 9:
      if (v12 < 9)
        goto LABEL_161;
      if (v12 != 9)
        goto LABEL_309;
      v70 = turi::FLEX_UNDEFINED;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)&v11)
        goto LABEL_273;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v11 + 8, turi::FLEX_UNDEFINED + 8))
        goto LABEL_161;
      v72 = *(char **)(*(_QWORD *)&v11 + 24);
      v71 = *(char **)(*(_QWORD *)&v11 + 32);
      v73 = v71 - v72;
      if (v71 == v72)
        goto LABEL_273;
      if (!*(_QWORD *)(*(_QWORD *)&v11 + 8))
        goto LABEL_273;
      v74 = 1;
      do
      {
        v75 = *(_QWORD *)v72;
        v72 += 8;
        v74 *= v75;
      }
      while (v72 != v71);
      if (!v74)
        goto LABEL_273;
      v135 = 0;
      std::vector<unsigned long>::vector(&__p, v73 >> 3, &v135);
      break;
    default:
      goto LABEL_309;
  }
  while (1)
  {
    v76 = (uint64_t *)__p;
    if (v137 == __p)
    {
      v85 = 0;
      v86 = *(double *)(**(_QWORD **)(*(_QWORD *)&v11 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v11 + 72));
    }
    else
    {
      v77 = 0;
      v78 = ((char *)v137 - (_BYTE *)__p) >> 3;
      v79 = *(uint64_t **)(*(_QWORD *)&v11 + 48);
      if (v78 <= 1)
        v78 = 1;
      v80 = (uint64_t *)__p;
      v81 = v78;
      do
      {
        v83 = *v80++;
        v82 = v83;
        v84 = *v79++;
        v77 += v84 * v82;
        --v81;
      }
      while (v81);
      v85 = 0;
      v86 = *(double *)(**(_QWORD **)(*(_QWORD *)&v11 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v11 + 72) + v77));
      v87 = *(uint64_t **)(v70 + 48);
      v88 = (uint64_t *)__p;
      do
      {
        v90 = *v88++;
        v89 = v90;
        v91 = *v87++;
        v85 += v91 * v89;
        --v78;
      }
      while (v78);
    }
    v92 = *(double *)(**(_QWORD **)(v70 + 8) + 8 * (*(_QWORD *)(v70 + 72) + v85));
    if (v86 != v92)
      break;
    if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(_QWORD *)&v11 + 8, (uint64_t *)&__p))
    {
      v76 = (uint64_t *)__p;
      break;
    }
  }
  if (v76)
  {
    v137 = v76;
    operator delete(v76);
  }
  if (v86 == v92)
  {
LABEL_273:
    *(double *)a5 = v8;
    *(_DWORD *)(a5 + 8) = v7;
    *(_BYTE *)(a5 + 12) = v9;
    v9 = 0;
  }
  else
  {
LABEL_161:
    *(_DWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 12) = 1;
    *(double *)a5 = (a2 * a2 + 1.0) * (v8 * v11) / fmax(v11 + a2 * a2 * v8, 1.0e-20);
  }
  switch(v12)
  {
    case 2u:
      do
        v98 = __ldaxr(*(unint64_t **)&v11);
      while (__stlxr(v98 - 1, *(unint64_t **)&v11));
      if (v11 != 0.0 && v98 == 1)
      {
        if (*(char *)(*(_QWORD *)&v11 + 31) < 0)
          operator delete(*(void **)(*(_QWORD *)&v11 + 8));
        v99 = v11;
        v100 = 0x1012C404EF22A49;
        goto LABEL_197;
      }
      break;
    case 3u:
      do
        v106 = __ldaxr(*(unint64_t **)&v11);
      while (__stlxr(v106 - 1, *(unint64_t **)&v11));
      if (v11 != 0.0 && v106 == 1)
      {
        v107 = *(void **)(*(_QWORD *)&v11 + 8);
        if (v107)
        {
          *(_QWORD *)(*(_QWORD *)&v11 + 16) = v107;
          operator delete(v107);
        }
        v99 = v11;
        v100 = 0x1080C409938AC02;
        goto LABEL_197;
      }
      break;
    case 4u:
      do
        v101 = __ldaxr(*(unint64_t **)&v11);
      while (__stlxr(v101 - 1, *(unint64_t **)&v11));
      if (v11 != 0.0 && v101 == 1)
      {
        __p = (void *)(*(_QWORD *)&v11 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_191;
      }
      break;
    case 5u:
      do
        v108 = __ldaxr(*(unint64_t **)&v11);
      while (__stlxr(v108 - 1, *(unint64_t **)&v11));
      if (v11 != 0.0 && v108 == 1)
      {
        __p = (void *)(*(_QWORD *)&v11 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_191:
        v99 = v11;
        v100 = 0x1020C405E66F15BLL;
        goto LABEL_197;
      }
      break;
    case 8u:
      do
        v109 = __ldaxr(*(unint64_t **)&v11);
      while (__stlxr(v109 - 1, *(unint64_t **)&v11));
      if (v11 != 0.0 && v109 == 1)
      {
        boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v11 + 16));
        v99 = v11;
        v105 = -235920773;
        goto LABEL_196;
      }
      break;
    case 9u:
      do
        v102 = __ldaxr(*(unint64_t **)&v11);
      while (__stlxr(v102 - 1, *(unint64_t **)&v11));
      if (v11 != 0.0 && v102 == 1)
      {
        v103 = *(void **)(*(_QWORD *)&v11 + 48);
        if (v103)
        {
          *(_QWORD *)(*(_QWORD *)&v11 + 56) = v103;
          operator delete(v103);
        }
        v104 = *(void **)(*(_QWORD *)&v11 + 24);
        if (v104)
        {
          *(_QWORD *)(*(_QWORD *)&v11 + 32) = v104;
          operator delete(v104);
        }
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v11 + 8);
        v99 = v11;
        v105 = 2071181815;
LABEL_196:
        v100 = v105 | 0x1030C4000000000;
LABEL_197:
        MEMORY[0x219A19A08](*(_QWORD *)&v99, v100);
      }
      break;
    default:
      break;
  }
LABEL_198:
  switch(v9)
  {
    case 2u:
      do
        v110 = __ldaxr(*(unint64_t **)&v8);
      while (__stlxr(v110 - 1, *(unint64_t **)&v8));
      if (v8 != 0.0 && v110 == 1)
      {
        if (*(char *)(*(_QWORD *)&v8 + 31) < 0)
          operator delete(*(void **)(*(_QWORD *)&v8 + 8));
        v111 = v8;
        v112 = 0x1012C404EF22A49;
        goto LABEL_233;
      }
      break;
    case 3u:
      do
        v118 = __ldaxr(*(unint64_t **)&v8);
      while (__stlxr(v118 - 1, *(unint64_t **)&v8));
      if (v8 != 0.0 && v118 == 1)
      {
        v119 = *(void **)(*(_QWORD *)&v8 + 8);
        if (v119)
        {
          *(_QWORD *)(*(_QWORD *)&v8 + 16) = v119;
          operator delete(v119);
        }
        v111 = v8;
        v112 = 0x1080C409938AC02;
        goto LABEL_233;
      }
      break;
    case 4u:
      do
        v113 = __ldaxr(*(unint64_t **)&v8);
      while (__stlxr(v113 - 1, *(unint64_t **)&v8));
      if (v8 != 0.0 && v113 == 1)
      {
        __p = (void *)(*(_QWORD *)&v8 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_227;
      }
      break;
    case 5u:
      do
        v120 = __ldaxr(*(unint64_t **)&v8);
      while (__stlxr(v120 - 1, *(unint64_t **)&v8));
      if (v8 != 0.0 && v120 == 1)
      {
        __p = (void *)(*(_QWORD *)&v8 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_227:
        v111 = v8;
        v112 = 0x1020C405E66F15BLL;
        goto LABEL_233;
      }
      break;
    case 8u:
      do
        v121 = __ldaxr(*(unint64_t **)&v8);
      while (__stlxr(v121 - 1, *(unint64_t **)&v8));
      if (v8 != 0.0 && v121 == 1)
      {
        boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v8 + 16));
        v111 = v8;
        v117 = -235920773;
        goto LABEL_232;
      }
      break;
    case 9u:
      do
        v114 = __ldaxr(*(unint64_t **)&v8);
      while (__stlxr(v114 - 1, *(unint64_t **)&v8));
      if (v8 != 0.0 && v114 == 1)
      {
        v115 = *(void **)(*(_QWORD *)&v8 + 48);
        if (v115)
        {
          *(_QWORD *)(*(_QWORD *)&v8 + 56) = v115;
          operator delete(v115);
        }
        v116 = *(void **)(*(_QWORD *)&v8 + 24);
        if (v116)
        {
          *(_QWORD *)(*(_QWORD *)&v8 + 32) = v116;
          operator delete(v116);
        }
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v8 + 8);
        v111 = v8;
        v117 = 2071181815;
LABEL_232:
        v112 = v117 | 0x1030C4000000000;
LABEL_233:
        MEMORY[0x219A19A08](*(_QWORD *)&v111, v112);
      }
      break;
    default:
      return;
  }
}

void sub_21849570C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;

  if (__p)
    operator delete(__p);
  switch(v17)
  {
    case 2:
      do
        v19 = __ldaxr((unint64_t *)v15);
      while (__stlxr(v19 - 1, (unint64_t *)v15));
      if (!v15 || v19 != 1)
        goto LABEL_35;
      if (*(char *)(v15 + 31) < 0)
        operator delete(*(void **)(v15 + 8));
      v20 = (_QWORD *)v15;
      v21 = 0x1012C404EF22A49;
      goto LABEL_34;
    case 3:
      do
        v25 = __ldaxr((unint64_t *)v15);
      while (__stlxr(v25 - 1, (unint64_t *)v15));
      if (!v15 || v25 != 1)
        goto LABEL_35;
      v26 = *(void **)(v15 + 8);
      if (v26)
      {
        *(_QWORD *)(v15 + 16) = v26;
        operator delete(v26);
      }
      v20 = (_QWORD *)v15;
      v21 = 0x1080C409938AC02;
      goto LABEL_34;
    case 4:
      do
        v22 = __ldaxr((unint64_t *)v15);
      while (__stlxr(v22 - 1, (unint64_t *)v15));
      if (!v15 || v22 != 1)
        goto LABEL_35;
      a14 = v15 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_28;
    case 5:
      do
        v27 = __ldaxr((unint64_t *)v15);
      while (__stlxr(v27 - 1, (unint64_t *)v15));
      if (!v15 || v27 != 1)
        goto LABEL_35;
      a14 = v15 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_28:
      v20 = (_QWORD *)v15;
      v21 = 0x1020C405E66F15BLL;
      goto LABEL_34;
    case 8:
      do
        v28 = __ldaxr((unint64_t *)v15);
      while (__stlxr(v28 - 1, (unint64_t *)v15));
      if (!v15 || v28 != 1)
        goto LABEL_35;
      boost::detail::shared_count::~shared_count((unsigned int **)(v15 + 16));
      v20 = (_QWORD *)v15;
      v24 = -235920773;
      goto LABEL_33;
    case 9:
      do
        v23 = __ldaxr((unint64_t *)v15);
      while (__stlxr(v23 - 1, (unint64_t *)v15));
      if (!v15 || v23 != 1)
        goto LABEL_35;
      v20 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v15);
      v24 = 2071181815;
LABEL_33:
      v21 = v24 | 0x1030C4000000000;
LABEL_34:
      MEMORY[0x219A19A08](v20, v21);
LABEL_35:
      switch(v16)
      {
        case 2:
          do
            v29 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v29 - 1, (unint64_t *)v14));
          if (!v14 || v29 != 1)
            goto LABEL_67;
          if (*(char *)(v14 + 31) < 0)
            operator delete(*(void **)(v14 + 8));
          v30 = (_QWORD *)v14;
          v31 = 0x1012C404EF22A49;
          goto LABEL_66;
        case 3:
          do
            v35 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v35 - 1, (unint64_t *)v14));
          if (!v14 || v35 != 1)
            goto LABEL_67;
          v36 = *(void **)(v14 + 8);
          if (v36)
          {
            *(_QWORD *)(v14 + 16) = v36;
            operator delete(v36);
          }
          v30 = (_QWORD *)v14;
          v31 = 0x1080C409938AC02;
          goto LABEL_66;
        case 4:
          do
            v32 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v32 - 1, (unint64_t *)v14));
          if (!v14 || v32 != 1)
            goto LABEL_67;
          a14 = v14 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
          goto LABEL_60;
        case 5:
          do
            v37 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v37 - 1, (unint64_t *)v14));
          if (!v14 || v37 != 1)
            goto LABEL_67;
          a14 = v14 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_60:
          v30 = (_QWORD *)v14;
          v31 = 0x1020C405E66F15BLL;
          goto LABEL_66;
        case 8:
          do
            v38 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v38 - 1, (unint64_t *)v14));
          if (!v14 || v38 != 1)
            goto LABEL_67;
          boost::detail::shared_count::~shared_count((unsigned int **)(v14 + 16));
          v30 = (_QWORD *)v14;
          v34 = -235920773;
          goto LABEL_65;
        case 9:
          do
            v33 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v33 - 1, (unint64_t *)v14));
          if (!v14 || v33 != 1)
            goto LABEL_67;
          v30 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v14);
          v34 = 2071181815;
LABEL_65:
          v31 = v34 | 0x1030C4000000000;
LABEL_66:
          MEMORY[0x219A19A08](v30, v31);
LABEL_67:
          _Unwind_Resume(exception_object);
          return;
        default:
          goto LABEL_67;
      }
    default:
      goto LABEL_35;
  }
}

uint64_t turi::evaluation::fbeta_score::fbeta_score(uint64_t a1, turi::evaluation *a2, double a3)
{
  const turi::flexible_type *v6;
  _QWORD **v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  turi::evaluation::confusion_matrix::confusion_matrix(a1, (uint64_t)&v8);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v8, v9[0]);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_QWORD *)a1 = &unk_24D9430B0;
  if (a3 <= 0.0)
    turi::evaluation::fbeta_score::fbeta_score(double,turi::flexible_type)::{lambda(void)#1}::operator()();
  *(double *)(a1 + 352) = a3;
  *(_BYTE *)(a1 + 184) = turi::evaluation::average_type_enum_from_name(a2, v6);
  return a1;
}

void sub_218495B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  turi::evaluation::flexible_accuracy *v11;

  turi::evaluation::flexible_accuracy::~flexible_accuracy(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::unordered_map<turi::flexible_type,unsigned long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D943120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<turi::flexible_type,unsigned long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D943120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<turi::flexible_type,unsigned long>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(a1 + 24);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&,unsigned long &>(uint64_t a1, unsigned __int8 *a2, char *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v9 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<turi::flexible_type const&,unsigned long &>(a1, v10, a3, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_218495DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<turi::flexible_type const&,unsigned long &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *result;
  unint64_t **v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;

  v9 = a1 + 16;
  result = operator new(0x28uLL);
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *result = 0;
  result[1] = a2;
  result[2] = 0;
  v11 = (unint64_t **)(result + 2);
  *((_DWORD *)result + 6) = 0;
  *((_BYTE *)result + 28) = 0;
  if (result + 2 != (_QWORD *)a3)
  {
    *(_QWORD *)((char *)result + 21) = *(_QWORD *)(a3 + 5);
    *v11 = *(unint64_t **)a3;
    v12 = a3[12];
    *((_BYTE *)result + 28) = v12;
    if (v12 <= 9 && ((1 << v12) & 0x33C) != 0)
    {
      v13 = *v11;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  result[4] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

_QWORD *std::__function::__func<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0,std::allocator<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D943170;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0,std::allocator<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D943170;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0,std::allocator<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24D943170;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0,std::allocator<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24D943170;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0,std::allocator<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0,std::allocator<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0,std::allocator<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  const std::string *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  float v26;
  unsigned __int8 *v27;
  _QWORD *v28;
  void **v29;
  _QWORD *v30;
  const void *v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  std::runtime_error *exception;
  std::string *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *v49;
  void *v50;
  void *__p;
  void *v52;
  std::string v53;
  std::string v54;
  size_t __idx[2];

  v5 = *a2;
  std::vector<double>::vector(&v40, (uint64_t)(*(_QWORD *)(*a2 + 16) - *(_QWORD *)(*a2 + 8)) >> 5);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  if (v6 != v7)
  {
    while (2)
    {
      v8 = 0.0;
      switch(*(_BYTE *)(v6 + 28))
      {
        case 0:
          v8 = (double)*(uint64_t *)(v6 + 16);
          goto LABEL_32;
        case 1:
          v8 = *(double *)(v6 + 16);
          goto LABEL_32;
        case 2:
          v13 = *(_QWORD *)(v6 + 16);
          __idx[0] = 0;
          v14 = (char *)(v13 + 8);
          if (*(char *)(v13 + 31) < 0)
            v14 = *(char **)(v13 + 8);
          v15 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v54, v14);
          v16 = std::stod(v15, __idx);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(char *)(v13 + 31) < 0)
            v17 = *(_QWORD *)(v13 + 16);
          else
            v17 = *(unsigned __int8 *)(v13 + 31);
          if (__idx[0] != v17)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v38 = std::string::append(&v53, " cannot be interpreted as a float");
            v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
            v54.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v39;
            v38->__r_.__value_.__l.__size_ = 0;
            v38->__r_.__value_.__r.__words[2] = 0;
            v38->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &v54);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v26 = v16;
          v8 = v26;
          goto LABEL_32;
        case 3:
          v9 = *(_QWORD *)(v6 + 16);
          memset(&v54, 0, sizeof(v54));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v54, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (v54.__r_.__value_.__r.__words[0])
          {
            v54.__r_.__value_.__l.__size_ = v54.__r_.__value_.__r.__words[0];
            operator delete(v54.__r_.__value_.__l.__data_);
          }
          goto LABEL_32;
        case 4:
          v18 = *(_QWORD *)(v6 + 16);
          memset(&v54, 0, sizeof(v54));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v54, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
          goto LABEL_32;
        case 5:
          v19 = *(_QWORD *)(v6 + 16);
          memset(&v54, 0, sizeof(v54));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v54, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
          goto LABEL_32;
        case 6:
          v8 = (double)*(int *)(v6 + 24) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(v6 + 16) << 8) >> 8);
          goto LABEL_32;
        case 7:
          goto LABEL_32;
        case 8:
          v20 = *(_QWORD *)(v6 + 16);
          v21 = *(unsigned int **)(v20 + 16);
          v42 = *(_QWORD *)(v20 + 8);
          v43 = v21;
          if (v21)
          {
            v22 = v21 + 2;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v24 = *(_OWORD *)(v20 + 24);
          v25 = *(_OWORD *)(v20 + 56);
          v45 = *(_OWORD *)(v20 + 40);
          v46 = v25;
          v44 = v24;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v43);
          goto LABEL_32;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&v47, *(_QWORD *)(v6 + 16) + 8);
          turi::flexible_type_fail(0);
          if (__p)
          {
            v52 = __p;
            operator delete(__p);
          }
          if (v49)
          {
            v50 = v49;
            operator delete(v49);
          }
          v10 = v48;
          if (v48)
          {
            p_shared_owners = (unint64_t *)&v48->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
LABEL_32:
          v27 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(*(_QWORD **)(a1 + 8), (unsigned __int8 *)v6);
          if (!v27)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          *(double *)(v40 + 8 * *((_QWORD *)v27 + 4)) = v8;
          v6 += 32;
          if (v6 == v7)
            break;
          continue;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
      break;
    }
  }
  *(_QWORD *)(a3 + 5) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 12) = 3;
  v28 = (_QWORD *)operator new();
  *v28 = 0;
  v28[1] = 0;
  v29 = (void **)(v28 + 1);
  v28[2] = 0;
  v28[3] = 0;
  *(_QWORD *)a3 = v28;
  *v28 = 1;
  if (*v28 != 1)
  {
    v30 = (_QWORD *)operator new();
    v31 = (const void *)v28[1];
    *v30 = *v28;
    v30[2] = 0;
    v30[3] = 0;
    v30[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v30 + 1, v31, v28[2], (uint64_t)(v28[2] - (_QWORD)v31) >> 3);
    *(_QWORD *)a3 = v30;
    *v30 = 1;
    do
    {
      v32 = __ldaxr(v28);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v28));
    if (!v33)
    {
      v34 = *v29;
      if (*v29)
      {
        v28[2] = v34;
        operator delete(v34);
      }
      MEMORY[0x219A19A08](v28, 0x1080C409938AC02);
    }
  }
  v35 = *(_QWORD **)a3;
  v36 = (void *)v35[1];
  if (v36)
  {
    v35[2] = v36;
    operator delete(v36);
    v35[1] = 0;
    v35[2] = 0;
    v35[3] = 0;
  }
  *(_OWORD *)(v35 + 1) = v40;
  v35[3] = v41;
}

void sub_21849648C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  void *v31;
  int v32;
  uint64_t v33;

  if (*(char *)(v33 - 121) < 0)
    operator delete(*(void **)(v33 - 144));
  if (*(char *)(v33 - 145) < 0)
  {
    operator delete(*(void **)(v33 - 168));
    if ((v32 & 1) == 0)
    {
LABEL_8:
      if (__p)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0,std::allocator<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0,std::allocator<turi::evaluation::`anonymous namespace'::get_prediction_probability_vectors(turi::gl_sarray const&,std::vector<turi::flexible_type> const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::vector<turi::object_detection::average_precision_calculator::class_data>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<turi::object_detection::average_precision_calculator::class_data>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::object_detection::average_precision_calculator::class_data>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(a2 + 48);
  if (v3)
  {
    *(_QWORD *)(a2 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a2 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

void sub_2184968E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::flexible_type_converter<std::unordered_map<turi::flexible_type,unsigned long>>::set(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<9>::set<std::unordered_map<turi::flexible_type,unsigned long>>((uint64_t *)a2, a1);
}

void sub_2184969A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type_converter<std::unordered_map<turi::flexible_type,double>>::set((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type_converter<std::unordered_map<turi::flexible_type,double>>::set((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<9>::set<std::unordered_map<turi::flexible_type,unsigned long>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  void *v81;
  void *v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  _QWORD *v97;
  void **v98;
  _QWORD *v99;
  unint64_t *v100;
  std::string *v101;
  __int128 v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  _QWORD *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  __int128 v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  __int128 v133;
  unint64_t v134;
  void **v135[2];
  _QWORD v136[2];
  _QWORD v137[2];
  _BYTE v138[13];
  _BYTE v139[13];
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v133 = 0uLL;
  v134 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v133, *(_QWORD *)(a2 + 24));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    memset(v137, 0, 13);
    turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v137, i + 2);
    memset(v136, 0, 13);
    turi::flexible_type_internals::ft_resolver<3>::set<unsigned long const&>((uint64_t)v136, i + 4);
    *(_QWORD *)&v138[5] = *(_QWORD *)((char *)v137 + 5);
    *(_QWORD *)v138 = v137[0];
    v138[12] = BYTE4(v137[1]);
    BYTE4(v137[1]) = 0;
    *(_QWORD *)&v139[5] = *(_QWORD *)((char *)v136 + 5);
    *(_QWORD *)v139 = v136[0];
    v139[12] = BYTE4(v136[1]);
    BYTE4(v136[1]) = 0;
    v5 = *((_QWORD *)&v133 + 1);
    if (*((_QWORD *)&v133 + 1) >= v134)
    {
      v8 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v133, (uint64_t *)v138);
    }
    else
    {
      **((_QWORD **)&v133 + 1) = 0;
      *(_DWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 12) = 0;
      v6 = *(_QWORD *)v138;
      *(_QWORD *)(v5 + 5) = *(_QWORD *)&v138[5];
      *(_QWORD *)v5 = v6;
      *(_BYTE *)(v5 + 12) = v138[12];
      v138[12] = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 28) = 0;
      v7 = *(_QWORD *)v139;
      *(_QWORD *)(v5 + 21) = *(_QWORD *)&v139[5];
      *(_QWORD *)(v5 + 16) = v7;
      *(_BYTE *)(v5 + 28) = v139[12];
      v139[12] = 0;
      v8 = v5 + 32;
    }
    *((_QWORD *)&v133 + 1) = v8;
    std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v138);
    switch(BYTE4(v136[1]))
    {
      case 2:
        v9 = (unint64_t *)v136[0];
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = v136[0];
          if (v136[0])
          {
            if (*(char *)(v136[0] + 31) < 0)
              operator delete(*(void **)(v136[0] + 8));
            v13 = v12;
            v14 = 0x1012C404EF22A49;
            goto LABEL_46;
          }
        }
        break;
      case 3:
        v26 = (unint64_t *)v136[0];
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v29 = v136[0];
          if (v136[0])
          {
            v30 = *(void **)(v136[0] + 8);
            if (v30)
            {
              *(_QWORD *)(v136[0] + 16) = v30;
              operator delete(v30);
            }
            v13 = v29;
            v14 = 0x1080C409938AC02;
            goto LABEL_46;
          }
        }
        break;
      case 4:
        v15 = (unint64_t *)v136[0];
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = v136[0];
          if (v136[0])
          {
            v135[0] = (void **)(v136[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v135);
            goto LABEL_39;
          }
        }
        break;
      case 5:
        v31 = (unint64_t *)v136[0];
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v18 = v136[0];
          if (v136[0])
          {
            v135[0] = (void **)(v136[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v135);
LABEL_39:
            v13 = v18;
            v14 = 0x1020C405E66F15BLL;
            goto LABEL_46;
          }
        }
        break;
      case 8:
        v34 = (unint64_t *)v136[0];
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v37 = v136[0];
          if (v136[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v136[0] + 16));
            v13 = v37;
            v25 = -235920773;
            goto LABEL_45;
          }
        }
        break;
      case 9:
        v19 = (unint64_t *)v136[0];
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = v136[0];
          if (v136[0])
          {
            v23 = *(void **)(v136[0] + 48);
            if (v23)
            {
              *(_QWORD *)(v136[0] + 56) = v23;
              operator delete(v23);
            }
            v24 = *(void **)(v22 + 24);
            if (v24)
            {
              *(_QWORD *)(v22 + 32) = v24;
              operator delete(v24);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
            v13 = v22;
            v25 = 2071181815;
LABEL_45:
            v14 = v25 | 0x1030C4000000000;
LABEL_46:
            MEMORY[0x219A19A08](v13, v14);
          }
        }
        break;
      default:
        break;
    }
    switch(BYTE4(v137[1]))
    {
      case 2:
        v38 = (unint64_t *)v137[0];
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          v41 = v137[0];
          if (v137[0])
          {
            if (*(char *)(v137[0] + 31) < 0)
              operator delete(*(void **)(v137[0] + 8));
            v42 = v41;
            v43 = 0x1012C404EF22A49;
            goto LABEL_88;
          }
        }
        break;
      case 3:
        v55 = (unint64_t *)v137[0];
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          v58 = v137[0];
          if (v137[0])
          {
            v59 = *(void **)(v137[0] + 8);
            if (v59)
            {
              *(_QWORD *)(v137[0] + 16) = v59;
              operator delete(v59);
            }
            v42 = v58;
            v43 = 0x1080C409938AC02;
            goto LABEL_88;
          }
        }
        break;
      case 4:
        v44 = (unint64_t *)v137[0];
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          v47 = v137[0];
          if (v137[0])
          {
            v135[0] = (void **)(v137[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v135);
            goto LABEL_81;
          }
        }
        break;
      case 5:
        v60 = (unint64_t *)v137[0];
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          v47 = v137[0];
          if (v137[0])
          {
            v135[0] = (void **)(v137[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v135);
LABEL_81:
            v42 = v47;
            v43 = 0x1020C405E66F15BLL;
            goto LABEL_88;
          }
        }
        break;
      case 8:
        v63 = (unint64_t *)v137[0];
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          v66 = v137[0];
          if (v137[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v137[0] + 16));
            v42 = v66;
            v54 = -235920773;
            goto LABEL_87;
          }
        }
        break;
      case 9:
        v48 = (unint64_t *)v137[0];
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          v51 = v137[0];
          if (v137[0])
          {
            v52 = *(void **)(v137[0] + 48);
            if (v52)
            {
              *(_QWORD *)(v137[0] + 56) = v52;
              operator delete(v52);
            }
            v53 = *(void **)(v51 + 24);
            if (v53)
            {
              *(_QWORD *)(v51 + 32) = v53;
              operator delete(v53);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v51 + 8);
            v42 = v51;
            v54 = 2071181815;
LABEL_87:
            v43 = v54 | 0x1030C4000000000;
LABEL_88:
            MEMORY[0x219A19A08](v42, v43);
          }
        }
        break;
      default:
        continue;
    }
  }
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v67 = (unint64_t *)*a1;
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        v70 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        if (*((char *)v70 + 31) < 0)
          operator delete((void *)v70[1]);
        v71 = v70;
        v72 = 0x1012C404EF22A49;
        goto LABEL_131;
      }
      break;
    case 3:
      v84 = (unint64_t *)*a1;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        v88 = (void *)v87[1];
        if (v88)
        {
          v87[2] = (unint64_t)v88;
          operator delete(v88);
        }
        v71 = v87;
        v72 = 0x1080C409938AC02;
        goto LABEL_131;
      }
      break;
    case 4:
      v73 = (unint64_t *)*a1;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        v76 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        *(_QWORD *)v138 = v76 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
        goto LABEL_124;
      }
      break;
    case 5:
      v89 = (unint64_t *)*a1;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v76 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        *(_QWORD *)v138 = v76 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
LABEL_124:
        v71 = v76;
        v72 = 0x1020C405E66F15BLL;
        goto LABEL_131;
      }
      break;
    case 8:
      v92 = (unint64_t *)*a1;
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_132;
        boost::detail::shared_count::~shared_count((unsigned int **)v95 + 2);
        v71 = v95;
        v83 = -235920773;
        goto LABEL_130;
      }
      break;
    case 9:
      v77 = (unint64_t *)*a1;
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        v80 = (unint64_t *)*a1;
        if (*a1)
        {
          v81 = (void *)v80[6];
          if (v81)
          {
            v80[7] = (unint64_t)v81;
            operator delete(v81);
          }
          v82 = (void *)v80[3];
          if (v82)
          {
            v80[4] = (unint64_t)v82;
            operator delete(v82);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v80 + 1));
          v71 = v80;
          v83 = 2071181815;
LABEL_130:
          v72 = v83 | 0x1030C4000000000;
LABEL_131:
          MEMORY[0x219A19A08](v71, v72);
        }
LABEL_132:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 5;
  v96 = (_QWORD *)operator new();
  v97 = v96;
  *v96 = 0;
  v96[1] = 0;
  v98 = (void **)(v96 + 1);
  v96[2] = 0;
  v96[3] = 0;
  *a1 = (uint64_t)v96;
  *v96 = 1;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v96 != 1)
      {
        v99 = (_QWORD *)operator new();
        v100 = (unint64_t *)*a1;
        *v99 = *(_QWORD *)*a1;
        v101 = (std::string *)(v99 + 1);
        if (*((char *)v100 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v101, (const std::string::value_type *)v100[1], v100[2]);
        }
        else
        {
          v102 = *(_OWORD *)(v100 + 1);
          v99[3] = v100[3];
          *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v102;
        }
        *a1 = (uint64_t)v99;
        *v99 = 1;
        do
        {
          v130 = __ldaxr(v97);
          v131 = v130 - 1;
        }
        while (__stlxr(v131, v97));
        if (!v131)
        {
          v107 = 0x1012C404EF22A49;
          if ((*((char *)v97 + 31) & 0x80000000) == 0)
            goto LABEL_173;
          v108 = *v98;
          goto LABEL_172;
        }
      }
      break;
    case 3:
      if (*v96 != 1)
      {
        v103 = (_QWORD *)operator new();
        v104 = (unint64_t *)*a1;
        *v103 = *(_QWORD *)*a1;
        v103[2] = 0;
        v103[3] = 0;
        v103[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v103 + 1, (const void *)v104[1], v104[2], (uint64_t)(v104[2] - v104[1]) >> 3);
        *a1 = (uint64_t)v103;
        *v103 = 1;
        do
        {
          v105 = __ldaxr(v97);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, v97));
        if (!v106)
        {
          v107 = 0x1080C409938AC02;
          v108 = *v98;
          if (*v98)
          {
            v97[2] = v108;
LABEL_172:
            operator delete(v108);
          }
          goto LABEL_173;
        }
      }
      break;
    case 4:
      if (*v96 != 1)
      {
        v109 = (_QWORD *)operator new();
        v110 = (unint64_t *)*a1;
        *v109 = *(_QWORD *)*a1;
        v109[2] = 0;
        v109[3] = 0;
        v109[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v109 + 1, (uint64_t *)v110[1], (uint64_t *)v110[2], (uint64_t)(v110[2] - v110[1]) >> 4);
        *a1 = (uint64_t)v109;
        *v109 = 1;
        do
        {
          v111 = __ldaxr(v97);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v97));
        if (!v112)
        {
          v107 = 0x1020C405E66F15BLL;
          *(_QWORD *)v138 = v98;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
          goto LABEL_173;
        }
      }
      break;
    case 5:
      if (*v96 != 1)
      {
        v113 = (_QWORD *)operator new();
        v114 = (unint64_t *)*a1;
        *v113 = *(_QWORD *)*a1;
        v113[2] = 0;
        v113[3] = 0;
        v113[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v113 + 1, (uint64_t *)v114[1], (uint64_t *)v114[2], (uint64_t)(v114[2] - v114[1]) >> 5);
        *a1 = (uint64_t)v113;
        *v113 = 1;
        do
        {
          v115 = __ldaxr(v97);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, v97));
        if (!v116)
        {
          v107 = 0x1020C405E66F15BLL;
          *(_QWORD *)v138 = v98;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
          goto LABEL_173;
        }
      }
      break;
    case 8:
      if (*v96 != 1)
      {
        v117 = operator new();
        v118 = (unint64_t *)*a1;
        *(_QWORD *)v117 = *(_QWORD *)*a1;
        *(_QWORD *)(v117 + 8) = v118[1];
        v119 = v118[2];
        *(_QWORD *)(v117 + 16) = v119;
        if (v119)
        {
          v120 = (unsigned int *)(v119 + 8);
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
        }
        v122 = *(_OWORD *)(v118 + 3);
        v123 = *(_OWORD *)(v118 + 5);
        *(_OWORD *)(v117 + 56) = *(_OWORD *)(v118 + 7);
        *(_OWORD *)(v117 + 40) = v123;
        *(_OWORD *)(v117 + 24) = v122;
        *a1 = v117;
        *(_QWORD *)v117 = 1;
        do
        {
          v124 = __ldaxr(v97);
          v125 = v124 - 1;
        }
        while (__stlxr(v125, v97));
        if (!v125)
        {
          v107 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v97 + 2);
          goto LABEL_173;
        }
      }
      break;
    case 9:
      if (*v96 != 1)
      {
        v126 = (_QWORD *)operator new();
        v127 = *a1 + 8;
        *v126 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
        *a1 = (uint64_t)v126;
        *v126 = 1;
        do
        {
          v128 = __ldaxr(v97);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, v97));
        if (!v129)
        {
          v107 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v97);
LABEL_173:
          MEMORY[0x219A19A08](v97, v107);
        }
      }
      break;
    default:
      break;
  }
  v132 = (unint64_t *)*a1;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)v132 + 1);
  *(_OWORD *)(v132 + 1) = v133;
  v132[3] = v134;
  v133 = 0uLL;
  v134 = 0;
  *(_QWORD *)v138 = &v133;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
}

void sub_218497530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  MEMORY[0x219A19A08](v18, 0x1012C404EF22A49);
  a18 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D9431F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D9431F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double *v3;
  double *v4;
  double *v5;
  BOOL v6;
  double *v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  unint64_t *v18;
  unint64_t v19;

  v3 = *(double **)(*(_QWORD *)a2 + 8);
  v4 = *(double **)(*(_QWORD *)a2 + 16);
  v5 = v3 + 1;
  v6 = v3 == v4 || v5 == v4;
  v7 = *(double **)(*(_QWORD *)a2 + 8);
  if (!v6)
  {
    v8 = *v3;
    v7 = *(double **)(*(_QWORD *)a2 + 8);
    v9 = v3 + 1;
    do
    {
      v10 = *v9++;
      v11 = v10;
      if (v8 < v10)
      {
        v8 = v11;
        v7 = v5;
      }
      v5 = v9;
    }
    while (v9 != v4);
  }
  v12 = **(_QWORD **)(result + 8) + 2 * ((char *)v7 - (char *)v3);
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  if (v12 != a3)
  {
    v13 = *(_QWORD *)v12;
    *(_QWORD *)(a3 + 5) = *(_QWORD *)(v12 + 5);
    *(_QWORD *)a3 = v13;
    v14 = *(unsigned __int8 *)(v12 + 12);
    *(_BYTE *)(a3 + 12) = v14;
    v15 = v14 >= 9;
    v6 = v14 == 9;
    v16 = (1 << v14) & 0x33C;
    if ((v6 || !v15) && v16 != 0)
    {
      v18 = *(unint64_t **)a3;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [17],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::gl_sframe>(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v6 = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<turi::gl_sframe>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    turi::gl_sframe::operator std::shared_ptr<turi::unity_sframe_base>(a2, &v5);
    v7 = v5;
    LODWORD(v6) = 4;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v6);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v6);
  }
}

void sub_218497BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<turi::gl_sframe>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [16],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<char [6]>(unsigned int *a1, char *a2)
{
  char *v4;
  char **v5;
  _BYTE v6[13];
  _BYTE v7[13];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<char [6]>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    turi::flexible_type::flexible_type((turi::flexible_type *)v7, a2);
    *(_QWORD *)&v6[5] = *(_QWORD *)&v7[5];
    *(_QWORD *)v6 = *(_QWORD *)v7;
    v6[12] = v7[12];
    LODWORD(v5) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v5);
  }
}

void sub_218497D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<char [6]>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<char [8]>(unsigned int *a1, char *a2)
{
  char *v4;
  char **v5;
  _BYTE v6[13];
  _BYTE v7[13];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<char [8]>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    turi::flexible_type::flexible_type((turi::flexible_type *)v7, a2);
    *(_QWORD *)&v6[5] = *(_QWORD *)&v7[5];
    *(_QWORD *)v6 = *(_QWORD *)v7;
    v6[12] = v7[12];
    LODWORD(v5) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v5);
  }
}

void sub_218497EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<char [8]>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

void std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D943270;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D943270;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t *a2, turi::sframe_rows **a3)
{
  uint64_t v4;
  turi::sframe_rows *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;

  v4 = *a2;
  v5 = *a3;
  if (!*((_BYTE *)*a3 + 24))
  {
    turi::sframe_rows::ensure_unique(*a3);
    if (!*((_BYTE *)v5 + 24))
      turi::sframe_rows::ensure_unique(v5);
  }
  if (*(_QWORD *)v5 != *((_QWORD *)v5 + 1))
  {
    v6 = **(_QWORD ***)v5;
    if (v6)
    {
      v7 = *(_QWORD *)(**(_QWORD **)v5 + 8) - *v6;
      if (v7)
      {
        v8 = 0;
        v9 = v7 >> 4;
        do
        {
          v10 = *(_QWORD **)(a1 + 8);
          v13 = (_QWORD *)*v10;
          v11 = v10 + 1;
          v12 = v13;
          if (v13 != v11)
          {
            do
            {
              if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v12[7] + 32))(v12[7]))
                v14 = 16;
              else
                v14 = 32;
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[7] + 48))(v12[7], ***(_QWORD ***)v5 + 16 * v8, **(_QWORD **)(*(_QWORD *)v5 + v14) + 16 * v8, v4);
              v15 = (_QWORD *)v12[1];
              if (v15)
              {
                do
                {
                  v16 = v15;
                  v15 = (_QWORD *)*v15;
                }
                while (v15);
              }
              else
              {
                do
                {
                  v16 = (_QWORD *)v12[2];
                  v17 = *v16 == (_QWORD)v12;
                  v12 = v16;
                }
                while (!v17);
              }
              v12 = v16;
            }
            while (v16 != v11);
          }
          ++v8;
        }
        while (v8 != v9);
      }
    }
  }
  return 0;
}

uint64_t std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1,std::allocator<turi::evaluation::compute_classifier_metrics_from_probability_vectors(std::vector<std::string>,turi::gl_sframe,std::string,std::string,std::vector<turi::flexible_type>)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

_QWORD *std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray&,0>(_QWORD *a1, char *a2, const turi::gl_sarray *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(v5 + 3), a3);
  return a1;
}

void sub_218498114(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<turi::neural_net::labeled_image>::__vdeallocate(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 8;
        std::allocator<turi::neural_net::labeled_image>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::ml_data_internal::column_indexer,std::allocator<turi::ml_data_internal::column_indexer>,std::string const&,turi::ml_column_mode,turi::flex_type_enum,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0xC8uLL);
  result = std::__shared_ptr_emplace<turi::ml_data_internal::column_indexer>::__shared_ptr_emplace[abi:ne180100]<std::string const&,turi::ml_column_mode,turi::flex_type_enum,std::allocator<turi::ml_data_internal::column_indexer>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_2184981F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::ml_data_internal::column_indexer>::__shared_ptr_emplace[abi:ne180100]<std::string const&,turi::ml_column_mode,turi::flex_type_enum,std::allocator<turi::ml_data_internal::column_indexer>,0>(_QWORD *a1, uint64_t a2, unsigned int *a3, char *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_24D9432F0;
  a1[1] = 0;
  std::allocator<turi::ml_data_internal::column_indexer>::construct[abi:ne180100]<turi::ml_data_internal::column_indexer,std::string const&,turi::ml_column_mode,turi::flex_type_enum>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_218498260(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::ml_data_internal::column_indexer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9432F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::ml_data_internal::column_indexer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9432F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::ml_data_internal::column_indexer>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<turi::ml_data_internal::column_indexer>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<turi::ml_data_internal::column_indexer>::construct[abi:ne180100]<turi::ml_data_internal::column_indexer,std::string const&,turi::ml_column_mode,turi::flex_type_enum>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, char *a5)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::ml_data_internal::column_indexer::column_indexer(a2, &__p, *a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_218498364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<turi::ml_data_internal::column_indexer>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  turi::mutex::~mutex((pthread_mutex_t *)(a2 + 112));
  v3 = (void **)(a2 + 80);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 56);
  std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 32);
  std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_QWORD *std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D943340;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D943340;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24D943340;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24D943340;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

unint64_t std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(turi::thread *a1@<X0>, const turi::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  const turi::flexible_type **tls_data;
  unint64_t result;

  v5 = (void **)*((_QWORD *)a1 + 1);
  tls_data = (const turi::flexible_type **)turi::thread::get_tls_data(a1);
  result = turi::ml_data_internal::column_indexer::map_value_to_index(v5, *tls_data, a2);
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_QWORD *)a3 = result;
  return result;
}

uint64_t std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9433C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D9433C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24D9433C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24D9433C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

unint64_t std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(turi::thread *a1@<X0>, const turi::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  const turi::flexible_type **tls_data;
  unint64_t result;

  v5 = (void **)*((_QWORD *)a1 + 1);
  tls_data = (const turi::flexible_type **)turi::thread::get_tls_data(a1);
  result = turi::ml_data_internal::column_indexer::map_value_to_index(v5, *tls_data, a2);
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_QWORD *)a3 = result;
  return result;
}

uint64_t std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2,std::allocator<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

_QWORD *turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_3::operator()(uint64_t **a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  const void **v8;
  const void **v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *result;
  uint64_t v57;
  unint64_t v58;
  void *__p;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65[3];
  _QWORD v66[3];
  void **v67;
  void **v68[2];
  _QWORD v69[2];
  uint64_t v70;
  _QWORD v71[3];
  int v72;
  char v73;
  _BYTE v74[24];
  _BYTE *v75;
  _BYTE v76[24];
  _BYTE *v77;
  _BYTE v78[24];
  _BYTE *v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v4 = **a1;
  v5 = *a1[1];
  turi::sframe::get_output_iterator((size_t *)a1[2], a2, (uint64_t)v74);
  v6 = v4 * a2 / v5;
  memset(v66, 0, sizeof(v66));
  v58 = (v4 + v4 * a2) / v5;
  if (v6 < v58)
  {
    v7 = (uint64_t *)v74;
    do
    {
      v8 = (const void **)turi::indexed_column_groupby::dest_group(a1[3], v6);
      v9 = (const void **)turi::indexed_column_groupby::dest_group(a1[4], v6);
      v63 = 0;
      v64 = 0;
      v62 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v62, *v8, (uint64_t)v8[1], ((_BYTE *)v8[1] - (_BYTE *)*v8) >> 3);
      __p = 0;
      v60 = 0;
      v61 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *v9, (uint64_t)v9[1], ((_BYTE *)v9[1] - (_BYTE *)*v9) >> 3);
      turi::recsys::precision_and_recall((unint64_t **)&v62, (unint64_t **)&__p, a1[5], v65);
      if (__p)
      {
        v60 = __p;
        operator delete(__p);
      }
      if (v62)
      {
        v63 = v62;
        operator delete(v62);
      }
      if (a1[5][1] != *a1[5])
      {
        v10 = 0;
        do
        {
          v11 = *(_QWORD *)(*a1[6] + 80) + 16 * v6;
          memset(v68, 0, 13);
          if ((void ***)v11 != v68)
          {
            v12 = *(void ***)v11;
            *(void ***)((char *)v68 + 5) = *(void ***)(v11 + 5);
            v68[0] = v12;
            v13 = *(unsigned __int8 *)(v11 + 12);
            BYTE4(v68[1]) = v13;
            v14 = v13 > 9;
            v15 = (1 << v13) & 0x33C;
            if (!v14 && v15 != 0)
            {
              v17 = (unint64_t *)v68[0];
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 + 1, v17));
            }
          }
          v19 = *a1[5];
          v69[0] = 0;
          *(_QWORD *)((char *)v69 + 5) = 0;
          v69[0] = *(_QWORD *)(v19 + 8 * v10);
          turi::flexible_type::flexible_type<double>((uint64_t)&v70, (_QWORD *)v65[0] + 2 * v10);
          turi::flexible_type::flexible_type<double>((uint64_t)v71, (_QWORD *)v65[0] + 2 * v10 + 1);
          v20 = ((_BYTE *)v8[1] - (_BYTE *)*v8) >> 3;
          v73 = 0;
          v72 = 0;
          v71[2] = v20;
          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*>((uint64_t)v66, (uint64_t *)v68, v7, 5uLL);
          v21 = v7;
          do
          {
            v22 = v7;
            v7 -= 2;
            switch(*((_BYTE *)v22 - 4))
            {
              case 2:
                v23 = (unint64_t *)*v7;
                do
                {
                  v24 = __ldaxr(v23);
                  v25 = v24 - 1;
                }
                while (__stlxr(v25, v23));
                if (!v25)
                {
                  v26 = *v7;
                  if (!*v7)
                    goto LABEL_59;
                  if (*(char *)(v26 + 31) < 0)
                    operator delete(*(void **)(v26 + 8));
                  v27 = (_QWORD *)v26;
                  v28 = 0x1012C404EF22A49;
                  goto LABEL_58;
                }
                break;
              case 3:
                v40 = (unint64_t *)*v7;
                do
                {
                  v41 = __ldaxr(v40);
                  v42 = v41 - 1;
                }
                while (__stlxr(v42, v40));
                if (!v42)
                {
                  v43 = *v7;
                  if (!*v7)
                    goto LABEL_59;
                  v44 = *(void **)(v43 + 8);
                  if (v44)
                  {
                    *(_QWORD *)(v43 + 16) = v44;
                    operator delete(v44);
                  }
                  v27 = (_QWORD *)v43;
                  v28 = 0x1080C409938AC02;
                  goto LABEL_58;
                }
                break;
              case 4:
                v29 = (unint64_t *)*v7;
                do
                {
                  v30 = __ldaxr(v29);
                  v31 = v30 - 1;
                }
                while (__stlxr(v31, v29));
                if (!v31)
                {
                  v32 = *v7;
                  if (!*v7)
                    goto LABEL_59;
                  v67 = (void **)(v32 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v67);
                  goto LABEL_51;
                }
                break;
              case 5:
                v45 = (unint64_t *)*v7;
                do
                {
                  v46 = __ldaxr(v45);
                  v47 = v46 - 1;
                }
                while (__stlxr(v47, v45));
                if (!v47)
                {
                  v32 = *v7;
                  if (!*v7)
                    goto LABEL_59;
                  v67 = (void **)(v32 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v67);
LABEL_51:
                  v27 = (_QWORD *)v32;
                  v28 = 0x1020C405E66F15BLL;
                  goto LABEL_58;
                }
                break;
              case 8:
                v48 = (unint64_t *)*v7;
                do
                {
                  v49 = __ldaxr(v48);
                  v50 = v49 - 1;
                }
                while (__stlxr(v50, v48));
                if (!v50)
                {
                  v51 = *v7;
                  if (!*v7)
                    goto LABEL_59;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v51 + 16));
                  v27 = (_QWORD *)v51;
                  v39 = -235920773;
                  goto LABEL_57;
                }
                break;
              case 9:
                v33 = (unint64_t *)*v7;
                do
                {
                  v34 = __ldaxr(v33);
                  v35 = v34 - 1;
                }
                while (__stlxr(v35, v33));
                if (!v35)
                {
                  v36 = (_QWORD *)*v7;
                  if (*v7)
                  {
                    v37 = (void *)v36[6];
                    if (v37)
                    {
                      v36[7] = v37;
                      operator delete(v37);
                    }
                    v38 = (void *)v36[3];
                    if (v38)
                    {
                      v36[4] = v38;
                      operator delete(v38);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v36 + 1));
                    v27 = v36;
                    v39 = 2071181815;
LABEL_57:
                    v28 = v39 | 0x1030C4000000000;
LABEL_58:
                    MEMORY[0x219A19A08](v27, v28);
                  }
LABEL_59:
                  *v7 = 0;
                }
                break;
              default:
                break;
            }
            *(v22 - 2) = 0;
            *((_DWORD *)v22 - 2) = 0;
            *((_BYTE *)v22 - 4) = 0;
          }
          while (v7 != (uint64_t *)v68);
          if (!v75)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v75 + 48))(v75, v66);
          ++v10;
          v7 = v21;
        }
        while (v10 < (a1[5][1] - *a1[5]) >> 3);
      }
      if (v65[0])
      {
        v65[1] = v65[0];
        operator delete(v65[0]);
      }
      ++v6;
    }
    while (v6 != v58);
  }
  v68[0] = (void **)v66;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v68);
  v52 = v79;
  if (v79 == v78)
  {
    v53 = 4;
    v52 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_71;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_71:
  v54 = v77;
  if (v77 == v76)
  {
    v55 = 4;
    v54 = v76;
  }
  else
  {
    if (!v77)
      goto LABEL_76;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_76:
  result = v75;
  if (v75 == v74)
  {
    v57 = 4;
    result = v74;
  }
  else
  {
    if (!v75)
      return result;
    v57 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v57))();
}

void sub_218498CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char *a27)
{
  uint64_t v27;

  a27 = &a23;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v27 - 192));
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_3>(unsigned long,unsigned long,turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_3 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10evaluation24precision_recall_by_userERKNS_6sframeES4"
                                        "_RKNSt3__16vectorImNS5_9allocatorImEEEEE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10evaluation24precision_recall_by_userERKNS_6sframeES4_RKNSt3__16vectorImNS5_9allocatorImEEEEE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_3>(unsigned long,unsigned long,turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_3 const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1;
  uint64_t ***v2;

  v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    v2 = result;
    do
      result = (uint64_t ***)turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_3::operator()(*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

void OUTLINED_FUNCTION_30_3()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 16) = 0;
  *(_DWORD *)(v0 - 8) = 0;
  *(_BYTE *)(v0 - 4) = 0;
}

uint64_t OUTLINED_FUNCTION_39_2()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_43_3()
{
  unint64_t *v0;

  __ldaxr(v0);
}

void OUTLINED_FUNCTION_49_0()
{
  uint64_t v0;

  boost::detail::shared_count::~shared_count((unsigned int **)(v0 + 16));
}

void OUTLINED_FUNCTION_50_1(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_51()
{
  uint64_t v0;

  operator delete(*(void **)(v0 + 8));
}

void OUTLINED_FUNCTION_54()
{
  uint64_t v0;

  boost::detail::shared_count::~shared_count((unsigned int **)(v0 + 16));
}

void __cxx_global_var_init_35_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_metrics_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::evaluation::precision_recall_by_user(turi::evaluation *this@<X0>, uint64_t a2@<X8>)
{
  turi::unity_sframe *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  turi::unity_sframe *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  double *v53;
  double *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 *v66;
  __int128 *v67;
  __int128 v68;
  std::string::size_type size;
  std::string::size_type v70;
  std::string::size_type v71;
  char v72;
  std::string *v73;
  std::string *v74;
  uint64_t v75;
  const std::string::value_type *v76;
  uint64_t i;
  uint64_t j;
  turi::unity_sframe *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned int *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::string *v89;
  std::string *v90;
  const void **v91;
  std::string *v92;
  std::string *v93;
  const void **p_data;
  std::string v95;
  std::string v96;
  void *v97;
  unint64_t *v98;
  unint64_t *v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *__p[2];
  char v105;
  std::string **v106;
  char v107;
  std::string v108;
  std::string v109;
  uint64_t v110;
  __int128 v111;
  char v112;
  std::string v113;
  std::string v114;
  uint64_t v115;
  _OWORD v116[18];
  _OWORD v117[18];
  turi::sframe *v118;
  std::__shared_weak_count *v119;
  __int128 *v120;
  __int128 *v121;
  uint64_t v122[38];

  v122[37] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_QWORD *)(a2 + 48) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  turi::safe_varmap_get<std::shared_ptr<turi::unity_sframe_base>>((uint64_t)this, (const void **)__p, v116);
  v5 = *(turi::unity_sframe **)&v116[0];
  v117[0] = v116[0];
  if (*((_QWORD *)&v116[0] + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v116[0] + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  turi::unity_sframe::get_underlying_sframe(v5, &v118);
  turi::sframe::sframe((turi::sframe *)v122, v118);
  v8 = v119;
  if (v119)
  {
    p_shared_owners = (unint64_t *)&v119->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v117[0] + 1);
  if (*((_QWORD *)&v117[0] + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v117[0] + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v116[0] + 1);
  if (*((_QWORD *)&v116[0] + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v116[0] + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v105 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v102, "recommendations");
  turi::safe_varmap_get<std::shared_ptr<turi::unity_sframe_base>>((uint64_t)this, (const void **)v102, &v111);
  v17 = (turi::unity_sframe *)v111;
  v116[0] = v111;
  if (*((_QWORD *)&v111 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  turi::unity_sframe::get_underlying_sframe(v17, v117);
  turi::sframe::sframe((turi::sframe *)&v118, *(const turi::sframe **)&v117[0]);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v117[0] + 1);
  if (*((_QWORD *)&v117[0] + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v117[0] + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v116[0] + 1);
  if (*((_QWORD *)&v116[0] + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v116[0] + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v103 < 0)
    operator delete(v102[0]);
  std::string::basic_string[abi:ne180100]<0>(v100, "cutoffs");
  turi::safe_varmap_get<turi::flexible_type>((uint64_t)this, (const void **)v100, (uint64_t)v117);
  v29 = *(unint64_t **)&v117[0];
  switch(BYTE12(v117[0]))
  {
    case 2:
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = *(_QWORD *)&v117[0];
        if (*(_QWORD *)&v117[0])
        {
          if (*(char *)(*(_QWORD *)&v117[0] + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v117[0] + 8));
          v33 = v32;
          v34 = 0x1012C404EF22A49;
          goto LABEL_76;
        }
      }
      break;
    case 3:
      do
      {
        v44 = __ldaxr(v29);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v29));
      if (!v45)
      {
        v46 = *(_QWORD *)&v117[0];
        if (*(_QWORD *)&v117[0])
        {
          v47 = *(void **)(*(_QWORD *)&v117[0] + 8);
          if (v47)
          {
            *(_QWORD *)(*(_QWORD *)&v117[0] + 16) = v47;
            operator delete(v47);
          }
          v33 = v46;
          v34 = 0x1080C409938AC02;
          goto LABEL_76;
        }
      }
      break;
    case 4:
      do
      {
        v35 = __ldaxr(v29);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v29));
      if (!v36)
      {
        v37 = *(_QWORD *)&v117[0];
        if (*(_QWORD *)&v117[0])
        {
          *(_QWORD *)&v116[0] = *(_QWORD *)&v117[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v116);
          goto LABEL_70;
        }
      }
      break;
    case 5:
      do
      {
        v48 = __ldaxr(v29);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v29));
      if (!v49)
      {
        v37 = *(_QWORD *)&v117[0];
        if (*(_QWORD *)&v117[0])
        {
          *(_QWORD *)&v116[0] = *(_QWORD *)&v117[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v116);
LABEL_70:
          v33 = v37;
          v34 = 0x1020C405E66F15BLL;
          goto LABEL_76;
        }
      }
      break;
    case 8:
      do
      {
        v50 = __ldaxr(v29);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v29));
      if (!v51)
      {
        v52 = *(_QWORD *)&v117[0];
        if (*(_QWORD *)&v117[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v117[0] + 16));
          v33 = v52;
          v43 = -235920773;
          goto LABEL_75;
        }
      }
      break;
    case 9:
      do
      {
        v38 = __ldaxr(v29);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v29));
      if (!v39)
      {
        v40 = *(_QWORD *)&v117[0];
        if (*(_QWORD *)&v117[0])
        {
          v41 = *(void **)(*(_QWORD *)&v117[0] + 48);
          if (v41)
          {
            *(_QWORD *)(*(_QWORD *)&v117[0] + 56) = v41;
            operator delete(v41);
          }
          v42 = *(void **)(v40 + 24);
          if (v42)
          {
            *(_QWORD *)(v40 + 32) = v42;
            operator delete(v42);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v40 + 8);
          v33 = v40;
          v43 = 2071181815;
LABEL_75:
          v34 = v43 | 0x1030C4000000000;
LABEL_76:
          MEMORY[0x219A19A08](v33, v34);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)&v117[0] = 0;
  DWORD2(v117[0]) = 0;
  BYTE12(v117[0]) = 0;
  if (v101 < 0)
    operator delete(v100[0]);
  v98 = 0;
  v99 = 0;
  v97 = 0;
  std::vector<unsigned long>::reserve(&v97, (uint64_t)(v29[2] - v29[1]) >> 3);
  v54 = (double *)v29[1];
  v53 = (double *)v29[2];
  if (v54 != v53)
  {
    v55 = v98;
    do
    {
      v56 = (unint64_t)*v54;
      if (v55 >= v99)
      {
        v58 = (unint64_t *)v97;
        v59 = ((char *)v55 - (_BYTE *)v97) >> 3;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v61 = (char *)v99 - (_BYTE *)v97;
        if (((char *)v99 - (_BYTE *)v97) >> 2 > v60)
          v60 = v61 >> 2;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
          v62 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
        {
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v99, v62);
          v58 = (unint64_t *)v97;
          v55 = v98;
        }
        else
        {
          v63 = 0;
        }
        v64 = (unint64_t *)&v63[8 * v59];
        *v64 = v56;
        v57 = v64 + 1;
        while (v55 != v58)
        {
          v65 = *--v55;
          *--v64 = v65;
        }
        v97 = v64;
        v98 = v57;
        v99 = (unint64_t *)&v63[8 * v62];
        if (v58)
          operator delete(v58);
      }
      else
      {
        *v55 = v56;
        v57 = v55 + 1;
      }
      v98 = v57;
      ++v54;
      v55 = v57;
    }
    while (v54 != v53);
  }
  v66 = v121;
  v67 = v120;
  if (v121 == v120)
    turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
  if (*((char *)v120 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)v120, *((_QWORD *)v120 + 1));
    v66 = v121;
    v67 = v120;
  }
  else
  {
    v68 = *v120;
    v96.__r_.__value_.__r.__words[2] = *((_QWORD *)v120 + 2);
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v68;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v67) >> 3) <= 1)
    turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
  if (*((char *)v67 + 47) < 0)
    std::string::__init_copy_ctor_external(&v95, *((const std::string::value_type **)v67 + 3), *((_QWORD *)v67 + 4));
  else
    v95 = *(std::string *)((_BYTE *)v67 + 1);
  size = v96.__r_.__value_.__l.__size_;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v70 = v96.__r_.__value_.__l.__size_;
  v71 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  v72 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v71 = v95.__r_.__value_.__l.__size_;
  if (v70 != v71)
    goto LABEL_121;
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = &v95;
  else
    v73 = (std::string *)v95.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v96.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v76 = (const std::string::value_type *)v96.__r_.__value_.__r.__words[0];
    if (memcmp(v96.__r_.__value_.__l.__data_, v73, v96.__r_.__value_.__l.__size_))
      goto LABEL_125;
LABEL_120:
    turi::evaluation::precision_recall_by_user(turi::toolkit_function_invocation &)::$_0::operator()();
  }
  if (!*((_BYTE *)&v96.__r_.__value_.__s + 23))
    goto LABEL_120;
  v74 = &v96;
  v75 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  while (v74->__r_.__value_.__s.__data_[0] == v73->__r_.__value_.__s.__data_[0])
  {
    v74 = (std::string *)((char *)v74 + 1);
    v73 = (std::string *)((char *)v73 + 1);
    if (!--v75)
      goto LABEL_120;
  }
LABEL_121:
  if ((*((_BYTE *)&v96.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v76 = (const std::string::value_type *)v96.__r_.__value_.__r.__words[0];
LABEL_125:
    std::string::__init_copy_ctor_external(&v113, v76, size);
    v72 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
    goto LABEL_126;
  }
  v113 = v96;
LABEL_126:
  if (v72 < 0)
    std::string::__init_copy_ctor_external(&v114, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v114 = v95;
  v92 = 0;
  v93 = 0;
  p_data = 0;
  *(_QWORD *)&v111 = &v92;
  BYTE8(v111) = 0;
  v92 = (std::string *)operator new(0x30uLL);
  v93 = v92;
  p_data = (const void **)&v92[2].__r_.__value_.__l.__data_;
  v93 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v113, (__int128 *)&v115, v92);
  turi::sframe::select_columns(v122, (const void ***)&v92, (uint64_t)v116);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v108, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  else
    v108 = v96;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v109, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v109 = v95;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v106 = &v89;
  v107 = 0;
  v89 = (std::string *)operator new(0x30uLL);
  v90 = v89;
  v91 = (const void **)&v89[2].__r_.__value_.__l.__data_;
  v90 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v91, (__int128 *)&v108, (__int128 *)&v110, v89);
  turi::sframe::select_columns((uint64_t *)&v118, (const void ***)&v89, (uint64_t)&v111);
  turi::evaluation::precision_recall_by_user((const turi::sframe *)v116, (uint64_t *)&v111, (uint64_t)&v97, (uint64_t)v117);
  turi::sframe::~sframe((turi::sframe *)&v111);
  v106 = &v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v109.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v108 + i * 8 + 24));
  }
  turi::sframe::~sframe((turi::sframe *)v116);
  *(_QWORD *)&v111 = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v114.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v113 + j * 8 + 24));
  }
  v79 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v79);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)&v113, (uint64_t)v79);
  turi::unity_sframe::construct_from_sframe((turi::unity_sframe *)v113.__r_.__value_.__l.__data_, (const turi::sframe *)v117);
  v111 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
  if (v113.__r_.__value_.__l.__size_)
  {
    v80 = (unint64_t *)(v113.__r_.__value_.__l.__size_ + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&v111, (uint64_t)v116);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v111, "pr");
  v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
  v85 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a2 + 32), (const void **)&v111, (uint64_t)&std::piecewise_construct, &v108);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v85 + 14, (unsigned int *)v116);
  if (v112 < 0)
    operator delete((void *)v111);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v116);
  *(_BYTE *)a2 = 1;
  v86 = (std::__shared_weak_count *)v113.__r_.__value_.__l.__size_;
  if (v113.__r_.__value_.__l.__size_)
  {
    v87 = (unint64_t *)(v113.__r_.__value_.__l.__size_ + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v117);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (v97)
  {
    v98 = (unint64_t *)v97;
    operator delete(v97);
  }
  turi::sframe::~sframe((turi::sframe *)&v118);
  turi::sframe::~sframe((turi::sframe *)v122);
}

void sub_2184999E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  turi::toolkit_function_response_type *v53;
  uint64_t v55;

  if (a48 < 0)
    operator delete(__p);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x278]);
  a53 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  v55 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x240] + v55 + 47) < 0)
      operator delete(*(void **)((char *)&STACK[0x240] + v55 + 24));
    v55 -= 24;
    if (v55 == -48)
    {
      if (a20 < 0)
        operator delete(a15);
      if (a27 < 0)
        operator delete(a22);
      if (a29)
      {
        a30 = (uint64_t)a29;
        operator delete(a29);
      }
      turi::sframe::~sframe((turi::sframe *)&STACK[0x4C8]);
      turi::sframe::~sframe((turi::sframe *)&STACK[0x5F0]);
      turi::toolkit_function_response_type::~toolkit_function_response_type(v53);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *turi::safe_varmap_get<std::shared_ptr<turi::unity_sframe_base>>@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  int *v6;

  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1, a2))
    turi::safe_varmap_get<turi::flexible_type>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,std::string)::{lambda(void)#1}::operator()();
  v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1, a2);
  return turi::variant_converter<std::shared_ptr<turi::unity_sframe_base>,void>::get(v6, a3);
}

void turi::evaluation::get_toolkit_function_registration(uint64_t *a1@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *__p[2];
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  void *v43[2];
  uint64_t v44;
  char **v45;
  char *v46[2];
  _QWORD **v47;
  _QWORD *v48[2];
  _QWORD v49[3];
  _QWORD *v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v43[0] = 0;
  v43[1] = 0;
  v46[0] = 0;
  v46[1] = 0;
  v44 = 0;
  v45 = v46;
  v47 = v48;
  v48[0] = 0;
  v48[1] = 0;
  v50 = 0;
  v52 = 0;
  MEMORY[0x219A19390](v43, "evaluation_precision_recall_by_user");
  __p[0] = turi::evaluation::precision_recall_by_user;
  std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &),void>(v49, (uint64_t *)__p);
  v3 = a1[1];
  if (v3 >= a1[2])
  {
    v4 = std::vector<turi::toolkit_function_specification>::__push_back_slow_path<turi::toolkit_function_specification const&>(a1, (const turi::toolkit_function_specification *)v43);
  }
  else
  {
    turi::toolkit_function_specification::toolkit_function_specification((std::string *)a1[1], (const turi::toolkit_function_specification *)v43);
    v4 = v3 + 136;
    a1[1] = v3 + 136;
  }
  a1[1] = v4;
  std::string::basic_string[abi:ne180100]<0>(v31, "_supervised_streaming_evaluator");
  turi::toolkit_function_wrapper_impl::make_spec_indirect<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*>("unity_targets", (uint64_t)turi::evaluation::_supervised_streaming_evaluator, (uint64_t)v31, "unity_predictions", "metric", "kwargs", (uint64_t)__p);
  v5 = a1[1];
  if (v5 >= a1[2])
  {
    v6 = std::vector<turi::toolkit_function_specification>::__push_back_slow_path<turi::toolkit_function_specification>(a1, (__int128 *)__p);
  }
  else
  {
    std::allocator<turi::toolkit_function_specification>::construct[abi:ne180100]<turi::toolkit_function_specification,turi::toolkit_function_specification>((uint64_t)(a1 + 2), a1[1], (__int128 *)__p);
    v6 = v5 + 136;
  }
  a1[1] = v6;
  v7 = v42;
  if (v42 == v41)
  {
    v8 = 4;
    v7 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_12;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_12:
  v9 = v40;
  if (v40 == v39)
  {
    v10 = 4;
    v9 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_17;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_17:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v37, v38);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v35, v36);
  if (v34 < 0)
    operator delete(__p[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  std::string::basic_string[abi:ne180100]<0>(v29, "compute_classifier_metrics");
  turi::toolkit_function_wrapper_impl::make_spec_indirect<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*,char const*>("data", (uint64_t)turi::evaluation::compute_classifier_metrics, (uint64_t)v29, "target", "metric", "prediction", "options", (uint64_t)__p);
  v11 = a1[1];
  if (v11 >= a1[2])
  {
    v12 = std::vector<turi::toolkit_function_specification>::__push_back_slow_path<turi::toolkit_function_specification>(a1, (__int128 *)__p);
  }
  else
  {
    std::allocator<turi::toolkit_function_specification>::construct[abi:ne180100]<turi::toolkit_function_specification,turi::toolkit_function_specification>((uint64_t)(a1 + 2), a1[1], (__int128 *)__p);
    v12 = v11 + 136;
  }
  a1[1] = v12;
  v13 = v42;
  if (v42 == v41)
  {
    v14 = 4;
    v13 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_29;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_29:
  v15 = v40;
  if (v40 == v39)
  {
    v16 = 4;
    v15 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_34;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_34:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v37, v38);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v35, v36);
  if (v34 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  std::string::basic_string[abi:ne180100]<0>(v27, "compute_object_detection_metrics");
  turi::toolkit_function_wrapper_impl::make_spec_indirect<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*,char const*>("data", (uint64_t)turi::evaluation::compute_object_detection_metrics, (uint64_t)v27, "annotations_column_name", "image_column_name", "prediction", "options", (uint64_t)__p);
  v17 = a1[1];
  if (v17 >= a1[2])
  {
    v18 = std::vector<turi::toolkit_function_specification>::__push_back_slow_path<turi::toolkit_function_specification>(a1, (__int128 *)__p);
  }
  else
  {
    std::allocator<turi::toolkit_function_specification>::construct[abi:ne180100]<turi::toolkit_function_specification,turi::toolkit_function_specification>((uint64_t)(a1 + 2), a1[1], (__int128 *)__p);
    v18 = v17 + 136;
  }
  a1[1] = v18;
  v19 = v42;
  if (v42 == v41)
  {
    v20 = 4;
    v19 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_46;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_46:
  v21 = v40;
  if (v40 == v39)
  {
    v22 = 4;
    v21 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_51;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_51:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v37, v38);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v35, v36);
  if (v34 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  v23 = v52;
  if (v52 == v51)
  {
    v24 = 4;
    v23 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_60;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_60:
  v25 = v50;
  if (v50 == v49)
  {
    v26 = 4;
    v25 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_65;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_65:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v47, v48[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v45, v46[0]);
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
}

void sub_21849A1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  void ***v30;

  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a27);
  if (a14 < 0)
    operator delete(__p);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)(v28 - 192));
  *(_QWORD *)(v28 - 192) = v27;
  std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

_QWORD *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &),void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v8 = 0;
  if (v3)
  {
    v7[0] = &unk_24D943460;
    v7[1] = v3;
    v8 = v7;
  }
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v7, a1);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_7;
  }
  if (v8)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void turi::toolkit_function_wrapper_impl::make_spec_indirect<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*>(char *__s@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t i;
  std::string *v14;
  std::string *v15;
  __int128 *v16;
  std::string v17;
  std::string **v18;
  char v19;
  __int128 v20;
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  __int128 v24;

  *(_QWORD *)&v24 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v17 = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(&v20, __s);
  std::string::basic_string[abi:ne180100]<0>(v21, a4);
  std::string::basic_string[abi:ne180100]<0>(v22, a5);
  std::string::basic_string[abi:ne180100]<0>(v23, a6);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v18 = &v14;
  v19 = 0;
  v14 = (std::string *)operator new(0x60uLL);
  v15 = v14;
  v16 = (__int128 *)&v14[4];
  v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, &v20, &v24, v14);
  turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(a2, &v17, (__int128 **)&v14, a7);
  v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v23[i + 2]) < 0)
      operator delete((void *)v23[i]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_21849A4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::make_spec_indirect<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*,char const*>(char *__s@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t i;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string v19;
  std::string **v20;
  char v21;
  __int128 v22;
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  __int128 v27;

  *(_QWORD *)&v27 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v19 = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(&v22, __s);
  std::string::basic_string[abi:ne180100]<0>(v23, a4);
  std::string::basic_string[abi:ne180100]<0>(v24, a5);
  std::string::basic_string[abi:ne180100]<0>(v25, a6);
  std::string::basic_string[abi:ne180100]<0>(v26, a7);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v20 = &v16;
  v21 = 0;
  v16 = (std::string *)operator new(0x78uLL);
  v17 = v16;
  v18 = v16 + 5;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v22, &v27, v16);
  turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(a2, &v19, (__int128 **)&v16, a8);
  v20 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v26[i + 2]) < 0)
      operator delete((void *)v26[i]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_21849A6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  _Unwind_Resume(exception_object);
}

void sub_21849A934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *turi::variant_converter<std::shared_ptr<turi::unity_sframe_base>,void>::get@<X0>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  char v7;
  char *v8;

  v8 = &v7;
  result = (_QWORD *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sframe_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v8, (uint64_t)(a1 + 2));
  if (!result)
  {
    v8 = (char *)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  v4 = result[1];
  *a2 = *result;
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_21849AA54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::unity_sframe_base>>(v10);
}

void sub_21849AA78(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &),std::allocator<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &)>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D943460;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &),std::allocator<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &)>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D943460;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &),std::allocator<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &)>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &),std::allocator<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &)>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &),std::allocator<turi::toolkit_function_response_type (*)(turi::toolkit_function_invocation &)>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target_type()
{
}

uint64_t std::vector<turi::toolkit_function_specification>::__push_back_slow_path<turi::toolkit_function_specification const&>(uint64_t *a1, const turi::toolkit_function_specification *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1E1E1E1E1E1E1E1)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xF0F0F0F0F0F0F0)
    v9 = 0x1E1E1E1E1E1E1E1;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[136 * v4];
  v16 = &v10[136 * v9];
  turi::toolkit_function_specification::toolkit_function_specification(v14, a2);
  v15 = &v14[5].__r_.__value_.__s.__data_[16];
  std::vector<turi::toolkit_function_specification>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<turi::toolkit_function_specification>::~__split_buffer(&v13);
  return v11;
}

void sub_21849AC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::toolkit_function_specification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t **v8;
  uint64_t v9;
  std::string::size_type size;
  const std::string *v11;
  uint64_t v12;
  int v13;
  _OWORD *v14;
  _OWORD *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  void *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  void *v96;
  void *v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void ***v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *result;
  uint64_t v111;
  std::string v112;
  std::string v113;
  std::string *v114;
  _BYTE v115[13];
  void **v116[3];
  void ***v117;
  std::string v118;
  _QWORD v119[3];
  _QWORD *v120;
  _QWORD v121[3];
  _QWORD *v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = a4 + 32;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 56;
  v8 = (uint64_t **)(a4 + 48);
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  memset(&v113, 0, sizeof(v113));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v113, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(a1, (__int128 **)&v113, (uint64_t)v121);
  v116[0] = (void **)&v113;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v116);
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(a1, v119);
  v9 = (uint64_t)v122;
  if (v122)
  {
    if (v122 == v121)
    {
      v117 = v116;
      (*(void (**)(_QWORD *, void ***))(v121[0] + 24))(v121, v116);
      goto LABEL_6;
    }
    v9 = (*(uint64_t (**)(_QWORD *))(*v122 + 16))(v122);
  }
  v117 = (void ***)v9;
LABEL_6:
  memset(&v118, 0, sizeof(v118));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v118, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v11 = a2;
  }
  v12 = (uint64_t)&v11[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
      goto LABEL_16;
    v13 = *(unsigned __int8 *)(v12 + size--);
  }
  while (v13 != 58);
  if (size == -1)
  {
LABEL_16:
    std::string::operator=((std::string *)a4, a2);
    goto LABEL_17;
  }
  std::string::basic_string(&v112, a2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v115);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v112;
LABEL_17:
  std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>((_QWORD *)(a4 + 72), (uint64_t)v116);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=((_QWORD *)(a4 + 104), (uint64_t)v119);
  turi::flexible_type_converter<std::vector<std::string>>::set(a3, (uint64_t)v115);
  std::string::basic_string[abi:ne180100]<0>(&v112, "arguments");
  v114 = &v112;
  v14 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (const void **)&v112.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v114);
  v15 = v14;
  v16 = (char *)v14 + 56;
  if (v115 != (char *)v14 + 56)
  {
    switch(*((_BYTE *)v14 + 68))
    {
      case 2:
        v17 = *(unint64_t **)v16;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          if (*((char *)v20 + 31) < 0)
            operator delete((void *)v20[1]);
          v21 = v20;
          v22 = 0x1012C404EF22A49;
          goto LABEL_59;
        }
        break;
      case 3:
        v23 = *(unint64_t **)v16;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          v27 = (void *)v26[1];
          if (v27)
          {
            v26[2] = (unint64_t)v27;
            operator delete(v27);
          }
          v21 = v26;
          v22 = 0x1080C409938AC02;
          goto LABEL_59;
        }
        break;
      case 4:
        v28 = *(unint64_t **)v16;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          v114 = (std::string *)(v31 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
          goto LABEL_43;
        }
        break;
      case 5:
        v32 = *(unint64_t **)v16;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v31 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          v114 = (std::string *)(v31 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
LABEL_43:
          v21 = v31;
          v22 = 0x1020C405E66F15BLL;
          goto LABEL_59;
        }
        break;
      case 8:
        v35 = *(unint64_t **)v16;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          boost::detail::shared_count::~shared_count((unsigned int **)v38 + 2);
          v21 = v38;
          v39 = -235920773;
          goto LABEL_58;
        }
        break;
      case 9:
        v40 = *(unint64_t **)v16;
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          v43 = *(unint64_t **)v16;
          if (*(_QWORD *)v16)
          {
            v44 = (void *)v43[6];
            if (v44)
            {
              v43[7] = (unint64_t)v44;
              operator delete(v44);
            }
            v45 = (void *)v43[3];
            if (v45)
            {
              v43[4] = (unint64_t)v45;
              operator delete(v45);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v43 + 1));
            v21 = v43;
            v39 = 2071181815;
LABEL_58:
            v22 = v39 | 0x1030C4000000000;
LABEL_59:
            MEMORY[0x219A19A08](v21, v22);
          }
LABEL_60:
          *(_QWORD *)v16 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v16 = *(_QWORD *)v115;
    *(_QWORD *)(v16 + 5) = *(_QWORD *)&v115[5];
    *((_BYTE *)v15 + 68) = v115[12];
    v115[12] = 0;
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  switch(v115[12])
  {
    case 2:
      v46 = *(unint64_t **)v115;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          if (*(char *)(*(_QWORD *)v115 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v115 + 8));
          v50 = v49;
          v51 = 0x1012C404EF22A49;
          goto LABEL_105;
        }
      }
      break;
    case 3:
      v63 = *(unint64_t **)v115;
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        v66 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v67 = *(void **)(*(_QWORD *)v115 + 8);
          if (v67)
          {
            *(_QWORD *)(*(_QWORD *)v115 + 16) = v67;
            operator delete(v67);
          }
          v50 = v66;
          v51 = 0x1080C409938AC02;
          goto LABEL_105;
        }
      }
      break;
    case 4:
      v52 = *(unint64_t **)v115;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        v55 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v112.__r_.__value_.__r.__words[0] = *(_QWORD *)v115 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
          goto LABEL_98;
        }
      }
      break;
    case 5:
      v68 = *(unint64_t **)v115;
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        v55 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v112.__r_.__value_.__r.__words[0] = *(_QWORD *)v115 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
LABEL_98:
          v50 = v55;
          v51 = 0x1020C405E66F15BLL;
          goto LABEL_105;
        }
      }
      break;
    case 8:
      v71 = *(unint64_t **)v115;
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        v74 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v115 + 16));
          v50 = v74;
          v62 = -235920773;
          goto LABEL_104;
        }
      }
      break;
    case 9:
      v56 = *(unint64_t **)v115;
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        v59 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v60 = *(void **)(*(_QWORD *)v115 + 48);
          if (v60)
          {
            *(_QWORD *)(*(_QWORD *)v115 + 56) = v60;
            operator delete(v60);
          }
          v61 = *(void **)(v59 + 24);
          if (v61)
          {
            *(_QWORD *)(v59 + 32) = v61;
            operator delete(v61);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v59 + 8);
          v50 = v59;
          v62 = 2071181815;
LABEL_104:
          v51 = v62 | 0x1030C4000000000;
LABEL_105:
          MEMORY[0x219A19A08](v50, v51);
        }
      }
      break;
    default:
      break;
  }
  std::string::basic_string[abi:ne180100]<0>(&v112, "_raw_fn_pointer_");
  *(_QWORD *)v115 = &v112;
  v75 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (const void **)&v112.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v115);
  v76 = v75;
  switch(*((_BYTE *)v75 + 68))
  {
    case 2:
      v77 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        v80 = *((_QWORD *)v75 + 7);
        if (!v80)
          goto LABEL_148;
        if (*(char *)(v80 + 31) < 0)
          operator delete(*(void **)(v80 + 8));
        v81 = (_QWORD *)v80;
        v82 = 0x1012C404EF22A49;
        goto LABEL_147;
      }
      break;
    case 3:
      v83 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
      {
        v86 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (!v86)
          goto LABEL_148;
        v87 = (void *)v86[1];
        if (v87)
        {
          v86[2] = v87;
          operator delete(v87);
        }
        v81 = v86;
        v82 = 0x1080C409938AC02;
        goto LABEL_147;
      }
      break;
    case 4:
      v88 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        v91 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (!v91)
          goto LABEL_148;
        *(_QWORD *)v115 = v91 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v115);
        goto LABEL_140;
      }
      break;
    case 5:
      v99 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        v91 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (!v91)
          goto LABEL_148;
        *(_QWORD *)v115 = v91 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v115);
LABEL_140:
        v81 = v91;
        v82 = 0x1020C405E66F15BLL;
        goto LABEL_147;
      }
      break;
    case 8:
      v102 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        v105 = *((_QWORD *)v75 + 7);
        if (!v105)
          goto LABEL_148;
        boost::detail::shared_count::~shared_count((unsigned int **)(v105 + 16));
        v81 = (_QWORD *)v105;
        v98 = -235920773;
        goto LABEL_146;
      }
      break;
    case 9:
      v92 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (v95)
        {
          v96 = (void *)v95[6];
          if (v96)
          {
            v95[7] = v96;
            operator delete(v96);
          }
          v97 = (void *)v95[3];
          if (v97)
          {
            v95[4] = v97;
            operator delete(v97);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v95 + 1));
          v81 = v95;
          v98 = 2071181815;
LABEL_146:
          v82 = v98 | 0x1030C4000000000;
LABEL_147:
          MEMORY[0x219A19A08](v81, v82);
        }
LABEL_148:
        *((_QWORD *)v76 + 7) = 0;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)v76 + 16) = 0;
  *((_BYTE *)v76 + 68) = 0;
  *((_QWORD *)v76 + 7) = a1;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  v106 = v117;
  if (v117 == v116)
  {
    v107 = 4;
    v106 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_156;
    v107 = 5;
  }
  ((void (*)(void))(*v106)[v107])();
LABEL_156:
  v108 = v120;
  if (v120 == v119)
  {
    v109 = 4;
    v108 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_161;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_161:
  result = v122;
  if (v122 == v121)
  {
    v111 = 4;
    result = v121;
  }
  else
  {
    if (!v122)
      return result;
    v111 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v111))();
}

void sub_21849B530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  turi::toolkit_function_specification *v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::~$_0((uint64_t)&a25);
  v36 = *(char **)(v33 + 80);
  if (v36 == &a32)
  {
    v37 = 4;
    v36 = &a32;
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_6:
  v38 = *(_QWORD **)(v33 + 112);
  if (v38 == (_QWORD *)(v34 - 120))
  {
    v39 = 4;
    v38 = (_QWORD *)(v34 - 120);
  }
  else
  {
    if (!v38)
      goto LABEL_11;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_11:
  turi::toolkit_function_specification::~toolkit_function_specification(v32);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::string::size_type v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  std::string v14;
  std::string *v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  char *v20[2];
  _QWORD **v21;
  _QWORD *v22[2];
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v17 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v18 = 0;
  v19 = v20;
  v21 = v22;
  v22[0] = 0;
  v22[1] = 0;
  v24 = 0;
  v26 = 0;
  v13 = a1;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v4 = v13;
  v6 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
  v5 = v14.__r_.__value_.__r.__words[2];
  memset(&v14, 0, sizeof(v14));
  *(_QWORD *)(a3 + 24) = 0;
  v7 = operator new(0x28uLL);
  *v7 = &unk_24D943500;
  v7[1] = v4;
  *((_OWORD *)v7 + 1) = v6;
  v7[4] = v5;
  memset(v12, 0, sizeof(v12));
  *(_QWORD *)(a3 + 24) = v7;
  v15 = (std::string *)v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v8 = v26;
  if (v26 == v25)
  {
    v9 = 4;
    v8 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v24;
  if (v24 == v23)
  {
    v11 = 4;
    v10 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v21, v22[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v19, v20[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
}

void sub_21849B9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void **v11;
  va_list va;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, void **);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char **v2;
  char *v3[2];
  _QWORD *v4;
  _QWORD v5[11];

  v5[10] = *MEMORY[0x24BDAC8D0];
  v3[0] = 0;
  v3[1] = 0;
  v2 = v3;
  v4 = v5;
  v5[0] = 0;
  v5[1] = 0;
  v5[5] = 0;
  v5[9] = 0;
  *a2 = &unk_24D943580;
  a2[1] = a1;
  a2[3] = a2;
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v4, 0);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v2, v3[0]);
}

_QWORD *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::string *v10;
  _BYTE v11[24];
  _BYTE *v12;
  std::string v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &unk_24D943600;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 8), (uint64_t)v11);
  *(std::string *)(v4 + 40) = v13;
  memset(&v13, 0, sizeof(v13));
  v15 = v4;
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v14, a1);
  v5 = v15;
  if (v15 == v14)
  {
    v6 = 4;
    v5 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v10 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
    goto LABEL_10;
  }
  if (v12)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_21849BC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::~$_0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D943500;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D943500;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E0E799);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;
  __int128 *v3;
  uint64_t v4;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(__int128 **)(a1 + 16);
  *(_QWORD *)v2 = &unk_24D943500;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 16), v3, *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v3) >> 3));
  return v2;
}

void sub_21849BD68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24D943500;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(__int128 **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  char **v5;
  char *v6;

  v3 = a2 + 1;
  v4 = a2[1];
  v5 = (char **)*a2;
  v6 = (char *)v4;
  if (a2[2])
  {
    *(_QWORD *)(v4 + 16) = &v6;
    *a2 = v3;
    *v3 = 0;
    a2[2] = 0;
  }
  else
  {
    v5 = &v6;
  }
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, (uint64_t)&v5, a3);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v5, v6);
}

void sub_21849BEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 *v13;
  std::string v14;
  uint64_t v15;
  __int128 *v16;
  std::vector<std::string> v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  void *__p[2];
  uint64_t v22;
  _QWORD **v23;
  _QWORD *v24[3];
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  char *v30[2];
  std::string *v31;
  std::string *v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v25 = 1;
  v26 = 0;
  v27 = 0;
  v30[0] = 0;
  v30[1] = 0;
  v28 = 0;
  v29 = v30;
  v24[0] = 0;
  v24[1] = 0;
  v19 = 0u;
  v20 = 0u;
  *(_OWORD *)__p = 0u;
  v22 = 0;
  v23 = v24;
  memset(&v17, 0, sizeof(v17));
  v18 = a2;
  if (&v16 == (__int128 **)a1)
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *(std::string **)(a1 + 8), *(__int128 **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
    begin = (__int128 *)v17.__begin_;
    end = (__int128 *)v17.__end_;
  }
  v16 = &v19;
  v13 = &v19;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v15 = v18;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>>((uint64_t)&v31, (uint64_t *)&v13);
  v32 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  LODWORD(v32) = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((unsigned int *)&v32, (void (**)(uint64_t *, uint64_t *, std::string *, uint64_t *))a1, (uint64_t *)&v19);
  v31 = (std::string *)(a3 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v32, v32 ^ ((int)v32 >> 31), &v31, (uint64_t)&v33);
  *(_DWORD *)a3 = v32 ^ ((int)v32 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v32);
  v32 = (std::string *)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v23, v24[0]);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v29, v30[0]);
  if (SHIBYTE(v28) < 0)
    operator delete(v26);
}

void sub_21849C148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v31 - 152) = v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 152));
  boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>::~vector((uint64_t)&a19);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a30);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(unsigned int *a1, void (**a2)(uint64_t *, uint64_t *, std::string *, uint64_t *), uint64_t *a3)
{
  void (*v4)(uint64_t *, uint64_t *, std::string *, uint64_t *);
  unsigned int v5[20];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  boost::fusion::detail::invoke_fn_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>,4,true>::call<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(&v4, a3);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, v5);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v5);
}

void sub_21849C214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>::~vector(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 16);
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1);
}

void boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>>(uint64_t a1, uint64_t *a2)
{
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<0>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<1>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<2>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<3>(a2);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<0>(uint64_t *a1)
{
  const void **v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v1 = (const void **)a1[1];
  if ((const void **)a1[2] != v1)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], v1);
    if (a1[4] + 8 == v3)
    {
      *(_QWORD *)&v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<0>(mpl_::integral_c<int,0>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::get((int *)(v3 + 56), &v7);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*a1, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<1>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      *(_QWORD *)&v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::get((int *)(v3 + 56), &v7);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*a1 + 16, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void boost::fusion::detail::invoke_fn_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>,4,true>::call<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(void (**a1)(uint64_t *, uint64_t *, std::string *, uint64_t *), uint64_t *a2)
{
  void (*v3)(uint64_t *, uint64_t *, std::string *, uint64_t *);
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16[3];
  std::string v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a2[1];
  v20 = *a2;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a2[3];
  v18 = a2[2];
  v19 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (*((char *)a2 + 55) < 0)
    std::string::__init_copy_ctor_external(&v17, (const std::string::value_type *)a2[4], a2[5]);
  else
    v17 = *(std::string *)(a2 + 4);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v16, (uint64_t)(a2 + 7));
  v3(&v20, &v18, &v17, v16);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v16, (_QWORD *)v16[1]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_21849C568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v20 - 48);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D943580;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D943580;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()((void (**)(uint64_t *, uint64_t *, std::string *, uint64_t *))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()(void (**a1)(uint64_t *, uint64_t *, std::string *, uint64_t *)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *exception;
  __int128 v12;
  __int128 v13;
  void *__p[2];
  uint64_t v15;
  _QWORD **v16;
  _QWORD *v17[2];
  std::string *v18;
  __int128 *v19;
  _QWORD *v20;
  int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 320)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Insufficient arguments");
  }
  v17[0] = 0;
  v17[1] = 0;
  v12 = 0u;
  v13 = 0u;
  *(_OWORD *)__p = 0u;
  v15 = 0;
  v16 = v17;
  v19 = &v12;
  v20 = a2;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>>((uint64_t)&v18, (uint64_t *)&v19);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  LODWORD(v19) = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((unsigned int *)&v19, a1, (uint64_t *)&v12);
  v18 = (std::string *)(a3 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v19, v19 ^ ((int)v19 >> 31), &v18, (uint64_t)&v20);
  *(_DWORD *)a3 = v19 ^ ((int)v19 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v19);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v16, v17[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21849C80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>>(uint64_t a1, uint64_t *a2)
{
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<0>(a2);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<1>((uint64_t)a2);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<2>((_QWORD **)a2);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<3>((_QWORD **)a2);
}

void turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<0>(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v1 = a1[1];
  if (*(_QWORD *)(v1 + 8) != *(_QWORD *)v1)
  {
    turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::get(*(int **)v1, &v6);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*a1, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<1>(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v1 = **(_QWORD **)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v1) >> 4) >= 2)
  {
    turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::get((int *)(v1 + 80), &v6);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*(_QWORD *)a1 + 16, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

double turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<2>(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v3;
  void **v4;
  double result;
  std::string v6;

  v1 = *a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1][1] - v1) >> 4) >= 3)
  {
    turi::variant_converter<std::string,void>::get((int *)(v1 + 160), &v6);
    v3 = (uint64_t)*a1;
    v4 = (void **)(*a1 + 4);
    if (*(char *)(v3 + 55) < 0)
      operator delete(*v4);
    result = *(double *)&v6.__r_.__value_.__l.__data_;
    *(std::string *)v4 = v6;
  }
  return result;
}

void turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<3>(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = *a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1][1] - v1) >> 4) >= 4)
  {
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v1 + 240), (uint64_t)&v7);
    v3 = (uint64_t)(*a1 + 8);
    v4 = *a1 + 7;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v4, *(_QWORD **)v3);
    v5 = v8;
    *(_QWORD *)(v3 - 8) = v7;
    *(_QWORD *)v3 = v5;
    v6 = v9;
    *(_QWORD *)(v3 + 8) = v9;
    if (v6)
    {
      v5[2] = v3;
      v7 = &v8;
      v8 = 0;
      v9 = 0;
      v5 = 0;
    }
    else
    {
      *v4 = v3;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v7, v5);
  }
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = &unk_24D943600;
  v2 = (_QWORD *)(a1 + 8);
  v6 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = &unk_24D943600;
  v2 = (_QWORD *)(a1 + 8);
  v6 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return MEMORY[0x219A19A08](a1, 0x10A1C409BB2071CLL);
}

_QWORD *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &unk_24D943600;
  std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21849CC14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D943600;
  return std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::operator()(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int *v6;
  void *__p[2];
  char v8;
  uint64_t v9[3];
  void **v10;
  uint64_t v11[12];

  v11[11] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  *(_QWORD *)(a3 + 48) = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v9, a2);
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v11, v5, v9);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v9, (char *)v9[1]);
  std::string::basic_string[abi:ne180100]<0>(__p, "return_value");
  v10 = __p;
  v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a3 + 32), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v6 + 14, v11);
  if (v8 < 0)
    operator delete(__p[0]);
  *(_BYTE *)a3 = 1;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v11);
}

void sub_21849CDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int128 __str,uint64_t __str_16)
{
  _BYTE *v21;
  std::string *v22;
  char *exception_ptr;
  __int128 v26;
  void *v27;
  void *v28;
  uint64_t v29;

  if (a2)
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__str);
    if (a2 == 4)
    {
      exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
      if (exception_ptr[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)exception_ptr, *((_QWORD *)exception_ptr + 1));
      }
      else
      {
        v26 = *(_OWORD *)exception_ptr;
        __str_16 = *((_QWORD *)exception_ptr + 2);
        __str = v26;
      }
      __cxa_begin_catch(exception_object);
      std::string::operator=(v22, (const std::string *)&__str);
      *v21 = 0;
      if (SHIBYTE(__str_16) < 0)
        operator delete((void *)__str);
      __cxa_end_catch();
    }
    else if (a2 == 3)
    {
      v27 = __cxa_begin_catch(exception_object);
      MEMORY[0x219A19390](v22, v27);
      *v21 = 0;
      __cxa_end_catch();
    }
    else
    {
      v28 = __cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        MEMORY[0x219A19390](v22, v29);
      }
      else
      {
        MEMORY[0x219A19390](v22, "Unknown Exception");
      }
      *v21 = 0;
      __cxa_end_catch();
    }
    JUMPOUT(0x21849CDACLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_21849CF7C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x21849CF74);
}

_QWORD *turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t **v8;
  uint64_t v9;
  std::string::size_type size;
  const std::string *v11;
  uint64_t v12;
  int v13;
  _OWORD *v14;
  _OWORD *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  void *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  void *v96;
  void *v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void ***v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *result;
  uint64_t v111;
  std::string v112;
  std::string v113;
  std::string *v114;
  _BYTE v115[13];
  void **v116[3];
  void ***v117;
  std::string v118;
  _QWORD v119[3];
  _QWORD *v120;
  _QWORD v121[3];
  _QWORD *v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = a4 + 32;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 56;
  v8 = (uint64_t **)(a4 + 48);
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  memset(&v113, 0, sizeof(v113));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v113, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(a1, (__int128 **)&v113, (uint64_t)v121);
  v116[0] = (void **)&v113;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v116);
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(a1, v119);
  v9 = (uint64_t)v122;
  if (v122)
  {
    if (v122 == v121)
    {
      v117 = v116;
      (*(void (**)(_QWORD *, void ***))(v121[0] + 24))(v121, v116);
      goto LABEL_6;
    }
    v9 = (*(uint64_t (**)(_QWORD *))(*v122 + 16))(v122);
  }
  v117 = (void ***)v9;
LABEL_6:
  memset(&v118, 0, sizeof(v118));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v118, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v11 = a2;
  }
  v12 = (uint64_t)&v11[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
      goto LABEL_16;
    v13 = *(unsigned __int8 *)(v12 + size--);
  }
  while (v13 != 58);
  if (size == -1)
  {
LABEL_16:
    std::string::operator=((std::string *)a4, a2);
    goto LABEL_17;
  }
  std::string::basic_string(&v112, a2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v115);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v112;
LABEL_17:
  std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>((_QWORD *)(a4 + 72), (uint64_t)v116);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=((_QWORD *)(a4 + 104), (uint64_t)v119);
  turi::flexible_type_converter<std::vector<std::string>>::set(a3, (uint64_t)v115);
  std::string::basic_string[abi:ne180100]<0>(&v112, "arguments");
  v114 = &v112;
  v14 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (const void **)&v112.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v114);
  v15 = v14;
  v16 = (char *)v14 + 56;
  if (v115 != (char *)v14 + 56)
  {
    switch(*((_BYTE *)v14 + 68))
    {
      case 2:
        v17 = *(unint64_t **)v16;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          if (*((char *)v20 + 31) < 0)
            operator delete((void *)v20[1]);
          v21 = v20;
          v22 = 0x1012C404EF22A49;
          goto LABEL_59;
        }
        break;
      case 3:
        v23 = *(unint64_t **)v16;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          v27 = (void *)v26[1];
          if (v27)
          {
            v26[2] = (unint64_t)v27;
            operator delete(v27);
          }
          v21 = v26;
          v22 = 0x1080C409938AC02;
          goto LABEL_59;
        }
        break;
      case 4:
        v28 = *(unint64_t **)v16;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          v114 = (std::string *)(v31 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
          goto LABEL_43;
        }
        break;
      case 5:
        v32 = *(unint64_t **)v16;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v31 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          v114 = (std::string *)(v31 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
LABEL_43:
          v21 = v31;
          v22 = 0x1020C405E66F15BLL;
          goto LABEL_59;
        }
        break;
      case 8:
        v35 = *(unint64_t **)v16;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          boost::detail::shared_count::~shared_count((unsigned int **)v38 + 2);
          v21 = v38;
          v39 = -235920773;
          goto LABEL_58;
        }
        break;
      case 9:
        v40 = *(unint64_t **)v16;
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          v43 = *(unint64_t **)v16;
          if (*(_QWORD *)v16)
          {
            v44 = (void *)v43[6];
            if (v44)
            {
              v43[7] = (unint64_t)v44;
              operator delete(v44);
            }
            v45 = (void *)v43[3];
            if (v45)
            {
              v43[4] = (unint64_t)v45;
              operator delete(v45);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v43 + 1));
            v21 = v43;
            v39 = 2071181815;
LABEL_58:
            v22 = v39 | 0x1030C4000000000;
LABEL_59:
            MEMORY[0x219A19A08](v21, v22);
          }
LABEL_60:
          *(_QWORD *)v16 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v16 = *(_QWORD *)v115;
    *(_QWORD *)(v16 + 5) = *(_QWORD *)&v115[5];
    *((_BYTE *)v15 + 68) = v115[12];
    v115[12] = 0;
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  switch(v115[12])
  {
    case 2:
      v46 = *(unint64_t **)v115;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          if (*(char *)(*(_QWORD *)v115 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v115 + 8));
          v50 = v49;
          v51 = 0x1012C404EF22A49;
          goto LABEL_105;
        }
      }
      break;
    case 3:
      v63 = *(unint64_t **)v115;
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        v66 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v67 = *(void **)(*(_QWORD *)v115 + 8);
          if (v67)
          {
            *(_QWORD *)(*(_QWORD *)v115 + 16) = v67;
            operator delete(v67);
          }
          v50 = v66;
          v51 = 0x1080C409938AC02;
          goto LABEL_105;
        }
      }
      break;
    case 4:
      v52 = *(unint64_t **)v115;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        v55 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v112.__r_.__value_.__r.__words[0] = *(_QWORD *)v115 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
          goto LABEL_98;
        }
      }
      break;
    case 5:
      v68 = *(unint64_t **)v115;
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        v55 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v112.__r_.__value_.__r.__words[0] = *(_QWORD *)v115 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
LABEL_98:
          v50 = v55;
          v51 = 0x1020C405E66F15BLL;
          goto LABEL_105;
        }
      }
      break;
    case 8:
      v71 = *(unint64_t **)v115;
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        v74 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v115 + 16));
          v50 = v74;
          v62 = -235920773;
          goto LABEL_104;
        }
      }
      break;
    case 9:
      v56 = *(unint64_t **)v115;
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        v59 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v60 = *(void **)(*(_QWORD *)v115 + 48);
          if (v60)
          {
            *(_QWORD *)(*(_QWORD *)v115 + 56) = v60;
            operator delete(v60);
          }
          v61 = *(void **)(v59 + 24);
          if (v61)
          {
            *(_QWORD *)(v59 + 32) = v61;
            operator delete(v61);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v59 + 8);
          v50 = v59;
          v62 = 2071181815;
LABEL_104:
          v51 = v62 | 0x1030C4000000000;
LABEL_105:
          MEMORY[0x219A19A08](v50, v51);
        }
      }
      break;
    default:
      break;
  }
  std::string::basic_string[abi:ne180100]<0>(&v112, "_raw_fn_pointer_");
  *(_QWORD *)v115 = &v112;
  v75 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (const void **)&v112.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v115);
  v76 = v75;
  switch(*((_BYTE *)v75 + 68))
  {
    case 2:
      v77 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        v80 = *((_QWORD *)v75 + 7);
        if (!v80)
          goto LABEL_148;
        if (*(char *)(v80 + 31) < 0)
          operator delete(*(void **)(v80 + 8));
        v81 = (_QWORD *)v80;
        v82 = 0x1012C404EF22A49;
        goto LABEL_147;
      }
      break;
    case 3:
      v83 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
      {
        v86 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (!v86)
          goto LABEL_148;
        v87 = (void *)v86[1];
        if (v87)
        {
          v86[2] = v87;
          operator delete(v87);
        }
        v81 = v86;
        v82 = 0x1080C409938AC02;
        goto LABEL_147;
      }
      break;
    case 4:
      v88 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        v91 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (!v91)
          goto LABEL_148;
        *(_QWORD *)v115 = v91 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v115);
        goto LABEL_140;
      }
      break;
    case 5:
      v99 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        v91 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (!v91)
          goto LABEL_148;
        *(_QWORD *)v115 = v91 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v115);
LABEL_140:
        v81 = v91;
        v82 = 0x1020C405E66F15BLL;
        goto LABEL_147;
      }
      break;
    case 8:
      v102 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        v105 = *((_QWORD *)v75 + 7);
        if (!v105)
          goto LABEL_148;
        boost::detail::shared_count::~shared_count((unsigned int **)(v105 + 16));
        v81 = (_QWORD *)v105;
        v98 = -235920773;
        goto LABEL_146;
      }
      break;
    case 9:
      v92 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (v95)
        {
          v96 = (void *)v95[6];
          if (v96)
          {
            v95[7] = v96;
            operator delete(v96);
          }
          v97 = (void *)v95[3];
          if (v97)
          {
            v95[4] = v97;
            operator delete(v97);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v95 + 1));
          v81 = v95;
          v98 = 2071181815;
LABEL_146:
          v82 = v98 | 0x1030C4000000000;
LABEL_147:
          MEMORY[0x219A19A08](v81, v82);
        }
LABEL_148:
        *((_QWORD *)v76 + 7) = 0;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)v76 + 16) = 0;
  *((_BYTE *)v76 + 68) = 0;
  *((_QWORD *)v76 + 7) = a1;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  v106 = v117;
  if (v117 == v116)
  {
    v107 = 4;
    v106 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_156;
    v107 = 5;
  }
  ((void (*)(void))(*v106)[v107])();
LABEL_156:
  v108 = v120;
  if (v120 == v119)
  {
    v109 = 4;
    v108 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_161;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_161:
  result = v122;
  if (v122 == v121)
  {
    v111 = 4;
    result = v121;
  }
  else
  {
    if (!v122)
      return result;
    v111 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v111))();
}

void sub_21849D87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  turi::toolkit_function_specification *v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::~$_0((uint64_t)&a25);
  v36 = *(char **)(v33 + 80);
  if (v36 == &a32)
  {
    v37 = 4;
    v36 = &a32;
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_6:
  v38 = *(_QWORD **)(v33 + 112);
  if (v38 == (_QWORD *)(v34 - 120))
  {
    v39 = 4;
    v38 = (_QWORD *)(v34 - 120);
  }
  else
  {
    if (!v38)
      goto LABEL_11;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_11:
  turi::toolkit_function_specification::~toolkit_function_specification(v32);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::string::size_type v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  std::string v14;
  std::string *v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  char *v20[2];
  _QWORD **v21;
  _QWORD *v22[2];
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v17 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v18 = 0;
  v19 = v20;
  v21 = v22;
  v22[0] = 0;
  v22[1] = 0;
  v24 = 0;
  v26 = 0;
  v13 = a1;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v4 = v13;
  v6 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
  v5 = v14.__r_.__value_.__r.__words[2];
  memset(&v14, 0, sizeof(v14));
  *(_QWORD *)(a3 + 24) = 0;
  v7 = operator new(0x28uLL);
  *v7 = &unk_24D943680;
  v7[1] = v4;
  *((_OWORD *)v7 + 1) = v6;
  v7[4] = v5;
  memset(v12, 0, sizeof(v12));
  *(_QWORD *)(a3 + 24) = v7;
  v15 = (std::string *)v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v8 = v26;
  if (v26 == v25)
  {
    v9 = 4;
    v8 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v24;
  if (v24 == v23)
  {
    v11 = 4;
    v10 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v21, v22[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v19, v20[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
}

void sub_21849DD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void **v11;
  va_list va;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, void **);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char **v2;
  char *v3[2];
  _QWORD *v4;
  _QWORD v5[11];

  v5[10] = *MEMORY[0x24BDAC8D0];
  v3[0] = 0;
  v3[1] = 0;
  v2 = v3;
  v4 = v5;
  v5[0] = 0;
  v5[1] = 0;
  v5[5] = 0;
  v5[9] = 0;
  *a2 = &unk_24D943700;
  a2[1] = a1;
  a2[3] = a2;
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v4, 0);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v2, v3[0]);
}

_QWORD *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::string *v10;
  _BYTE v11[24];
  _BYTE *v12;
  std::string v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &unk_24D943780;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 8), (uint64_t)v11);
  *(std::string *)(v4 + 40) = v13;
  memset(&v13, 0, sizeof(v13));
  v15 = v4;
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v14, a1);
  v5 = v15;
  if (v15 == v14)
  {
    v6 = 4;
    v5 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v10 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
    goto LABEL_10;
  }
  if (v12)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_21849DF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::~$_0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D943680;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D943680;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E0E799);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;
  __int128 *v3;
  uint64_t v4;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(__int128 **)(a1 + 16);
  *(_QWORD *)v2 = &unk_24D943680;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 16), v3, *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v3) >> 3));
  return v2;
}

void sub_21849E0B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24D943680;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(__int128 **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  char **v5;
  char *v6;

  v3 = a2 + 1;
  v4 = a2[1];
  v5 = (char **)*a2;
  v6 = (char *)v4;
  if (a2[2])
  {
    *(_QWORD *)(v4 + 16) = &v6;
    *a2 = v3;
    *v3 = 0;
    a2[2] = 0;
  }
  else
  {
    v5 = &v6;
  }
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, (uint64_t)&v5, a3);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v5, v6);
}

void sub_21849E228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string *v11;
  char *v12[2];
  _QWORD *v13;
  std::string v14;
  uint64_t v15;
  _QWORD *v16;
  std::vector<std::string> v17;
  uint64_t v18;
  _QWORD v19[2];
  std::__shared_weak_count *v20;
  void *v21;
  char v22;
  void *__p;
  char v24;
  uint64_t v25;
  _QWORD *v26[3];
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  char *v32[2];
  char v33;

  v27 = 1;
  v28 = 0;
  v29 = 0;
  v32[0] = 0;
  v32[1] = 0;
  v30 = 0;
  v31 = v32;
  boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul,4ul>,turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::vector_data((turi::gl_sframe *)v19);
  memset(&v17, 0, sizeof(v17));
  v18 = a2;
  if (&v16 == (_QWORD **)a1)
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *(std::string **)(a1 + 8), *(__int128 **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
    begin = (__int128 *)v17.__begin_;
    end = (__int128 *)v17.__end_;
  }
  v16 = v19;
  v13 = v19;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v15 = v18;
  boost::fusion::detail::for_each_unrolled<5>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>>((uint64_t)&v33, (uint64_t *)&v13);
  v11 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  v12[0] = 0;
  v12[1] = 0;
  v11 = (std::string *)v12;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v11, (void (**)(_QWORD *, std::string *, std::string *, _BYTE *, uint64_t *))a1, (uint64_t)v19);
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((uint64_t **)(a3 + 8), (const void ***)&v11);
  *(_DWORD *)a3 = 6;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v11, v12[0]);
  v11 = (std::string *)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v26, v26[1]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v25);
  if (v24 < 0)
    operator delete(__p);
  if (v22 < 0)
    operator delete(v21);
  v19[0] = off_24D91E9C0;
  v8 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v31, v32[0]);
  if (SHIBYTE(v30) < 0)
    operator delete(v28);
}

void sub_21849E428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::~vector((uint64_t)&a22);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v22 - 112));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, void (**a2)(_QWORD *, std::string *, std::string *, _BYTE *, uint64_t *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, std::string *, std::string *, _BYTE *, uint64_t *);

  v10 = *a2;
  boost::fusion::detail::invoke_fn_ptr<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>,5,true>::call<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(&v10, a3);
  v4 = a1 + 8;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(char **)(a1 + 8));
  v5 = v8;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v9;
  *(_QWORD *)(a1 + 16) = v9;
  if (v6)
  {
    *(_QWORD *)(v5 + 16) = v4;
    v7 = &v8;
    v8 = 0;
    v9 = 0;
    v5 = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, (char *)v5);
}

uint64_t boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::~vector(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 112, *(_QWORD **)(a1 + 120));
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  *(_QWORD *)a1 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

turi::gl_sframe *boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul,4ul>,turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::vector_data(turi::gl_sframe *a1)
{
  uint64_t v2;

  v2 = turi::gl_sframe::gl_sframe(a1);
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(v2 + 72));
  *((_QWORD *)a1 + 16) = 0;
  *((_QWORD *)a1 + 15) = 0;
  *((_QWORD *)a1 + 14) = (char *)a1 + 120;
  return a1;
}

void sub_21849E5D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*(void **)(v1 + 48));
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

void boost::fusion::detail::for_each_unrolled<5>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>>(uint64_t a1, uint64_t *a2)
{
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<0>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<4>(a2);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<0>(uint64_t *a1)
{
  const void **v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[2];
  std::__shared_weak_count *v8;

  v1 = (const void **)a1[1];
  if ((const void **)a1[2] != v1)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], v1);
    if (a1[4] + 8 == v3)
    {
      v7[0] = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<0>(mpl_::integral_c<int,0>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<turi::gl_sframe,void>::get((int *)(v3 + 56), (uint64_t)v7);
    turi::gl_sframe::operator=(*a1, (uint64_t)v7);
    v7[0] = off_24D91E9C0;
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

double turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  double result;
  std::string v7;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      v7.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::string,void>::get((int *)(v3 + 56), &v7);
    v4 = *a1;
    v5 = (void **)(*a1 + 24);
    if (*(char *)(v4 + 47) < 0)
      operator delete(*v5);
    result = *(double *)&v7.__r_.__value_.__l.__data_;
    *(std::string *)v5 = v7;
  }
  return result;
}

double turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  double result;
  std::string v7;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      v7.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::string,void>::get((int *)(v3 + 56), &v7);
    v4 = *a1;
    v5 = (void **)(*a1 + 48);
    if (*(char *)(v4 + 71) < 0)
      operator delete(*v5);
    result = *(double *)&v7.__r_.__value_.__l.__data_;
    *(std::string *)v5 = v7;
  }
  return result;
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[5];

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 4)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 72));
    if (a1[4] + 8 == v3)
    {
      v4[0] = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(mpl_::integral_c<int,3>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<turi::gl_sarray,void>::get((int *)(v3 + 56), (uint64_t)v4);
    turi::gl_sarray::operator=(*a1 + 72, (uint64_t)v4);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v4);
  }
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<4>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 5)
  {
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 96));
    if (a1[4] + 8 == v3)
    {
      v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<4>(mpl_::integral_c<int,4>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    v4 = *a1 + 120;
    v5 = (uint64_t *)(*a1 + 112);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(_QWORD **)v4);
    v6 = v9;
    *(_QWORD *)(v4 - 8) = v8;
    *(_QWORD *)v4 = v6;
    v7 = v10;
    *(_QWORD *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      v8 = &v9;
      v9 = 0;
      v10 = 0;
      v6 = 0;
    }
    else
    {
      *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void boost::fusion::detail::invoke_fn_ptr<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>,5,true>::call<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(void (**a1)(_QWORD *, std::string *, std::string *, _BYTE *, uint64_t *), uint64_t a2)
{
  void (*v3)(_QWORD *, std::string *, std::string *, _BYTE *, uint64_t *);
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7[3];
  _BYTE v8[40];
  std::string v9;
  std::string v10;
  _QWORD v11[2];
  std::__shared_weak_count *v12;

  v3 = *a1;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v11, (const turi::gl_sframe *)a2);
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v10 = *(std::string *)(a2 + 24);
  if (*(char *)(a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  else
    v9 = *(std::string *)(a2 + 48);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v8, (const turi::gl_sarray *)(a2 + 72));
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v7, a2 + 112);
  v3(v11, &v10, &v9, v8, v7);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v7, (_QWORD *)v7[1]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v11[0] = off_24D91E9C0;
  v4 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_21849EB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 57) < 0)
    operator delete(*(void **)(v22 - 80));
  *(_QWORD *)(v22 - 56) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 - 48);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D943700;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D943700;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()((void (**)(_QWORD *, std::string *, std::string *, _BYTE *, uint64_t *))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()(void (**a1)(_QWORD *, std::string *, std::string *, _BYTE *, uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *exception;
  char **v10;
  char *v11[2];
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  uint64_t v18;
  _QWORD *v19[3];
  char v20;

  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 400)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Insufficient arguments");
  }
  boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul,4ul>,turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::vector_data((turi::gl_sframe *)v12);
  v10 = (char **)v12;
  v11[0] = (char *)a2;
  boost::fusion::detail::for_each_unrolled<5>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>>((uint64_t)&v20, (uint64_t *)&v10);
  v11[0] = 0;
  v11[1] = 0;
  v10 = v11;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v10, a1, (uint64_t)v12);
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper((uint64_t **)(a3 + 8), (const void ***)&v10);
  *(_DWORD *)a3 = 6;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v10, v11[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v19, v19[1]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v18);
  if (v17 < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14);
  v12[0] = off_24D91E9C0;
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_21849EDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void boost::fusion::detail::for_each_unrolled<5>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>>(uint64_t a1, uint64_t *a2)
{
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<0>(a2);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>((_QWORD **)a2);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>((_QWORD **)a2);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>((uint64_t)a2);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<4>((_QWORD **)a2);
}

void turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<0>(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[2];
  std::__shared_weak_count *v7;

  v1 = a1[1];
  if (*(_QWORD *)(v1 + 8) != *(_QWORD *)v1)
  {
    turi::variant_converter<turi::gl_sframe,void>::get(*(int **)v1, (uint64_t)v6);
    turi::gl_sframe::operator=(*a1, (uint64_t)v6);
    v6[0] = off_24D91E9C0;
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_21849EEC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

double turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v3;
  void **v4;
  double result;
  std::string v6;

  v1 = *a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1][1] - v1) >> 4) >= 2)
  {
    turi::variant_converter<std::string,void>::get((int *)(v1 + 80), &v6);
    v3 = (uint64_t)*a1;
    v4 = (void **)(*a1 + 3);
    if (*(char *)(v3 + 47) < 0)
      operator delete(*v4);
    result = *(double *)&v6.__r_.__value_.__l.__data_;
    *(std::string *)v4 = v6;
  }
  return result;
}

double turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v3;
  void **v4;
  double result;
  std::string v6;

  v1 = *a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1][1] - v1) >> 4) >= 3)
  {
    turi::variant_converter<std::string,void>::get((int *)(v1 + 160), &v6);
    v3 = (uint64_t)*a1;
    v4 = (void **)(*a1 + 6);
    if (*(char *)(v3 + 71) < 0)
      operator delete(*v4);
    result = *(double *)&v6.__r_.__value_.__l.__data_;
    *(std::string *)v4 = v6;
  }
  return result;
}

void turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[47];

  v1 = **(_QWORD **)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v1) >> 4) >= 4)
  {
    turi::variant_converter<turi::gl_sarray,void>::get((int *)(v1 + 240), (uint64_t)v3);
    turi::gl_sarray::operator=(*(_QWORD *)a1 + 72, (uint64_t)v3);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v3);
  }
}

void sub_21849F05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a9);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<4>(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = *a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1][1] - v1) >> 4) >= 5)
  {
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v1 + 320), (uint64_t)&v7);
    v3 = (uint64_t)(*a1 + 15);
    v4 = *a1 + 14;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v4, *(_QWORD **)v3);
    v5 = v8;
    *(_QWORD *)(v3 - 8) = v7;
    *(_QWORD *)v3 = v5;
    v6 = v9;
    *(_QWORD *)(v3 + 8) = v9;
    if (v6)
    {
      v5[2] = v3;
      v7 = &v8;
      v8 = 0;
      v9 = 0;
      v5 = 0;
    }
    else
    {
      *v4 = v3;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v7, v5);
  }
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = &unk_24D943780;
  v2 = (_QWORD *)(a1 + 8);
  v6 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = &unk_24D943780;
  v2 = (_QWORD *)(a1 + 8);
  v6 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return MEMORY[0x219A19A08](a1, 0x10A1C409BB2071CLL);
}

_QWORD *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &unk_24D943780;
  std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21849F268(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D943780;
  return std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  turi::toolkit_function_wrapper_impl::make_spec<4ul,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>)>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> (*)(std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::operator()(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<5ul,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> (*)(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target_type()
{
}

void __cxx_global_var_init_20_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_evaluation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_21849F590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_5_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_factorization_model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_21849F8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_factorization_model_options_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_21849FBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_21_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_factorization_model_serialization_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_21849FEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_18_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_factorization_model_training_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184A01D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_basic_sgd_logistic_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184A04E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_23()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_basic_sgd_squared_error_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184A07F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ranking_logistic_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184A0B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ranking_squared_error_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_loss_model_profiles_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184A0E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_model_factory_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void **std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t *boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(uint64_t *a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = a2[1];
  if ((v4 & 0x80u) != 0)
  {
    a2 = (_QWORD *)*a2;
    v4 = v5;
  }
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::do_assign(a1, a2, (uint64_t)a2 + v4, a3);
  return a1;
}

void sub_2184A1044(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::transform_utils::$_0,std::allocator<turi::transform_utils::$_0>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::transform_utils::$_0,std::allocator<turi::transform_utils::$_0>,BOOL ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943800;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943910;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943A10;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943B10;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943C10;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943D10;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943E10;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943F10;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944010;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944110;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944210;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944310;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944410;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D9447D0;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D9448D0;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D9449D0;
  return result;
}

void std::__function::__func<turi::transform_utils::$_0,std::allocator<turi::transform_utils::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D943800;
}

{
  *a2 = &off_24D943910;
}

{
  *a2 = &off_24D943A10;
}

{
  *a2 = &off_24D943B10;
}

{
  *a2 = &off_24D943C10;
}

{
  *a2 = &off_24D943D10;
}

{
  *a2 = &off_24D943E10;
}

{
  *a2 = &off_24D943F10;
}

{
  *a2 = &off_24D944010;
}

{
  *a2 = &off_24D944110;
}

{
  *a2 = &off_24D944210;
}

{
  *a2 = &off_24D944310;
}

{
  *a2 = &off_24D944410;
}

{
  *a2 = &off_24D9447D0;
}

{
  *a2 = &off_24D9448D0;
}

{
  *a2 = &off_24D9449D0;
}

uint64_t std::__function::__func<turi::transform_utils::$_0,std::allocator<turi::transform_utils::$_0>,BOOL ()(std::string const&)>::operator()()
{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

uint64_t std::__function::__func<turi::transform_utils::$_0,std::allocator<turi::transform_utils::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::transform_utils::$_0,std::allocator<turi::transform_utils::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

void std::__function::__func<turi::transform_utils::$_1,std::allocator<turi::transform_utils::$_1>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::transform_utils::$_1,std::allocator<turi::transform_utils::$_1>,BOOL ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943890;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943990;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943A90;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943B90;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943C90;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943D90;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943E90;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D943F90;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944090;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944190;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944290;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944390;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944490;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944850;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944950;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D944A50;
  return result;
}

void std::__function::__func<turi::transform_utils::$_1,std::allocator<turi::transform_utils::$_1>,BOOL ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D943890;
}

{
  *a2 = &off_24D943990;
}

{
  *a2 = &off_24D943A90;
}

{
  *a2 = &off_24D943B90;
}

{
  *a2 = &off_24D943C90;
}

{
  *a2 = &off_24D943D90;
}

{
  *a2 = &off_24D943E90;
}

{
  *a2 = &off_24D943F90;
}

{
  *a2 = &off_24D944090;
}

{
  *a2 = &off_24D944190;
}

{
  *a2 = &off_24D944290;
}

{
  *a2 = &off_24D944390;
}

{
  *a2 = &off_24D944490;
}

{
  *a2 = &off_24D944850;
}

{
  *a2 = &off_24D944950;
}

{
  *a2 = &off_24D944A50;
}

BOOL std::__function::__func<turi::transform_utils::$_1,std::allocator<turi::transform_utils::$_1>,BOOL ()(std::string const&)>::operator()(uint64_t a1, char **a2)
{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

{
  char v2;
  int64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (int64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = &v4[v3];
  if (v3 >= 1)
  {
    v6 = v4;
    do
    {
      v7 = (char *)memchr(v6, 39, v3);
      if (!v7)
        break;
      if (*v7 == 39)
        return v7 != v5 && v7 - v4 != -1;
      v6 = v7 + 1;
      v3 = v5 - (_BYTE *)v6;
    }
    while (v5 - (_BYTE *)v6 > 0);
  }
  v7 = v5;
  return v7 != v5 && v7 - v4 != -1;
}

uint64_t std::__function::__func<turi::transform_utils::$_1,std::allocator<turi::transform_utils::$_1>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<turi::transform_utils::$_1,std::allocator<turi::transform_utils::$_1>,BOOL ()(std::string const&)>::target_type()
{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

{
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>::pair[abi:ne180100](v4, v6);
      v6 += 6;
      v4 = v11 + 6;
      v11 += 6;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2184A12A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>::pair[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void sub_2184A1308(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::reverse_iterator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>,std::reverse_iterator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::reverse_iterator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>,std::reverse_iterator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (a3 != a5)
  {
    v6 = a3;
    while (1)
    {
      v7 = *(_QWORD **)(v6 - 8);
      if ((_QWORD *)(v6 - 32) == v7)
        break;
      if (v7)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      boost::detail::shared_count::~shared_count((unsigned int **)(v6 - 40));
      v6 -= 48;
      if (v6 == a5)
        return;
    }
    v7 = (_QWORD *)(v6 - 32);
    v8 = 4;
    goto LABEL_7;
  }
}

void std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      v5 = *(_QWORD **)(v4 - 8);
      if ((_QWORD *)(v4 - 32) == v5)
        break;
      if (v5)
      {
        v6 = 5;
LABEL_6:
        (*(void (**)(void))(*v5 + 8 * v6))();
      }
      boost::detail::shared_count::~shared_count((unsigned int **)(v4 - 40));
      v4 -= 48;
      if (v4 == a2)
        goto LABEL_8;
    }
    v5 = (_QWORD *)(v4 - 32);
    v6 = 4;
    goto LABEL_6;
  }
LABEL_8:
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_2184A1630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_bm25_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D943800;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D943890;
  v59 = v58;
  qword_254FF4858 = 0;
  qword_254FF4860 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4858 = turi::transform_utils::ptb_filters;
  qword_254FF4860 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4858 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4860, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184A1BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4858 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184A1DDC()
{
  JUMPOUT(0x2184A1D38);
}

void sub_2184A1DEC()
{
  JUMPOUT(0x2184A1D48);
}

void sub_2184A1DFC()
{
  JUMPOUT(0x2184A1D58);
}

void sub_2184A1E0C()
{
  JUMPOUT(0x2184A1D68);
}

void sub_2184A1E1C()
{
  JUMPOUT(0x2184A1DD4);
}

void sub_2184A1FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<int>(unsigned int *a1, int *a2)
{
  int *v4;
  _QWORD v5[2];
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5[0] = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<int>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    v5[1] = *a2;
    v6 = 0;
    v7 = 0;
    LODWORD(v5[0]) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v5);
  }
}

void sub_2184A22AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<int>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[23],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_2184A233C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void __cxx_global_var_init_47()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_categorical_imputer_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D943910;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D943990;
  v59 = v58;
  qword_254FF4880 = 0;
  qword_254FF4888 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4880 = turi::transform_utils::ptb_filters;
  qword_254FF4888 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4880 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4888, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184A286C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4880 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184A2A70()
{
  JUMPOUT(0x2184A29CCLL);
}

void sub_2184A2A80()
{
  JUMPOUT(0x2184A29DCLL);
}

void sub_2184A2A90()
{
  JUMPOUT(0x2184A29ECLL);
}

void sub_2184A2AA0()
{
  JUMPOUT(0x2184A29FCLL);
}

void sub_2184A2AB0()
{
  JUMPOUT(0x2184A2A68);
}

void sub_2184A2C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_14_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_7()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D943A10;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D943A90;
  v59 = v58;
  qword_254FF48A8 = 0;
  qword_254FF48B0 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF48A8 = turi::transform_utils::ptb_filters;
  qword_254FF48B0 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF48A8 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF48B0, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184A33B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF48A8 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184A35B4()
{
  JUMPOUT(0x2184A3510);
}

void sub_2184A35C4()
{
  JUMPOUT(0x2184A3520);
}

void sub_2184A35D4()
{
  JUMPOUT(0x2184A3530);
}

void sub_2184A35E4()
{
  JUMPOUT(0x2184A3540);
}

void sub_2184A35F4()
{
  JUMPOUT(0x2184A35ACLL);
}

uint64_t _GLOBAL__sub_I_content_interpretation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_content_interpretation_extensions_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184A39C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_27()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_count_featurizer_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D943B10;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D943B90;
  v59 = v58;
  qword_254FF48F0 = 0;
  qword_254FF48F8 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF48F0 = turi::transform_utils::ptb_filters;
  qword_254FF48F8 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF48F0 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF48F8, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184A3F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF48F0 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184A4170()
{
  JUMPOUT(0x2184A40CCLL);
}

void sub_2184A4180()
{
  JUMPOUT(0x2184A40DCLL);
}

void sub_2184A4190()
{
  JUMPOUT(0x2184A40ECLL);
}

void sub_2184A41A0()
{
  JUMPOUT(0x2184A40FCLL);
}

void sub_2184A41B0()
{
  JUMPOUT(0x2184A4168);
}

void sub_2184A4508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_25_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_count_thresholder_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D943C10;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D943C90;
  v59 = v58;
  qword_254FF4918 = 0;
  qword_254FF4920 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4918 = turi::transform_utils::ptb_filters;
  qword_254FF4920 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4918 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4920, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184A4AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4918 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184A4CB4()
{
  JUMPOUT(0x2184A4C10);
}

void sub_2184A4CC4()
{
  JUMPOUT(0x2184A4C20);
}

void sub_2184A4CD4()
{
  JUMPOUT(0x2184A4C30);
}

void sub_2184A4CE4()
{
  JUMPOUT(0x2184A4C40);
}

void sub_2184A4CF4()
{
  JUMPOUT(0x2184A4CACLL);
}

uint64_t _GLOBAL__sub_I_dict_transform_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184A4ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_45()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_dimension_reduction_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D943D10;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D943D90;
  v59 = v58;
  qword_254FF4950 = 0;
  qword_254FF4958 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4950 = turi::transform_utils::ptb_filters;
  qword_254FF4958 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4950 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4958, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184A5630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4950 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184A5834()
{
  JUMPOUT(0x2184A5790);
}

void sub_2184A5844()
{
  JUMPOUT(0x2184A57A0);
}

void sub_2184A5854()
{
  JUMPOUT(0x2184A57B0);
}

void sub_2184A5864()
{
  JUMPOUT(0x2184A57C0);
}

void sub_2184A5874()
{
  JUMPOUT(0x2184A582CLL);
}

void CoreML::validate<(MLModelType)610>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  size_t v7;
  int v8;
  int v9;
  int v10;
  size_t v11;
  const void *v12;
  uint64_t v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  _BOOL4 v18;
  size_t v19;
  const void *v20;
  size_t v21;
  _BOOL4 v22;
  size_t v23;
  const void *v24;
  size_t v25;
  _BOOL4 v26;
  int v27;
  size_t v28;
  const void *v29;
  size_t v30;
  _BOOL4 v31;
  uint64_t v32;
  size_t v33;
  int v34;
  int v35;
  size_t v36;
  const void *v37;
  uint64_t v38;
  int v39;
  size_t v40;
  const void *v41;
  size_t v42;
  _BOOL4 v43;
  int v44;
  size_t v45;
  const void *v46;
  size_t v47;
  _BOOL4 v48;
  const void **v49;
  const void **v50;
  const void **v51;
  const void **v52;
  const void **v53;
  const void **v54;
  _BOOL8 v55;
  double v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  void *v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  int v78;
  uint64_t *v79;
  uint64_t *v80;
  int v81;
  uint64_t *v82;
  uint64_t *v83;
  int v84;
  uint64_t *v85;
  uint64_t *v86;
  _QWORD *v87;
  const CoreML::Specification::FeatureType *v88;
  std::string *v89;
  std::string::size_type v90;
  _QWORD *v91;
  _QWORD *v92;
  const CoreML::Specification::FeatureType *v93;
  std::string *v94;
  std::string::size_type v95;
  _QWORD *v96;
  _QWORD *v97;
  const CoreML::Specification::FeatureType *v98;
  std::string *v99;
  std::string::size_type v100;
  _QWORD *v101;
  _QWORD *v102;
  const CoreML::Specification::FeatureType *v103;
  std::string *v104;
  std::string::size_type v105;
  _QWORD *v106;
  _QWORD *v107;
  const CoreML::Specification::FeatureType *v108;
  std::string *v109;
  std::string::size_type size;
  _QWORD *v111;
  _QWORD *v112;
  const CoreML::Specification::FeatureType *v113;
  std::string *v114;
  std::string::size_type v115;
  _QWORD *v116;
  _QWORD *v117;
  const CoreML::Specification::FeatureType *v118;
  std::string *v119;
  std::string::size_type v120;
  _QWORD *v121;
  _QWORD *v122;
  const CoreML::Specification::FeatureType *v123;
  std::string *v124;
  std::string::size_type v125;
  _QWORD *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  int v130;
  uint64_t *v131;
  int v132;
  int *v133;
  _QWORD *v134;
  _QWORD *v135;
  const CoreML::Specification::FeatureType *v136;
  std::string *v137;
  std::string::size_type v138;
  _QWORD *v139;
  _QWORD *v140;
  const CoreML::Specification::FeatureType *v141;
  std::string *v142;
  std::string::size_type v143;
  _QWORD *v144;
  _QWORD *v145;
  const CoreML::Specification::FeatureType *v146;
  std::string *v147;
  std::string::size_type v148;
  _QWORD *v149;
  _QWORD *v150;
  const CoreML::Specification::FeatureType *v151;
  std::string *v152;
  std::string::size_type v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  BOOL v157;
  _BOOL4 v158;
  _BOOL4 v159;
  BOOL v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  int v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  unsigned int *v178;
  unint64_t v179;
  uint64_t *v181;
  uint64_t *v183;
  uint64_t *v184;
  std::string *v185;
  __int128 v186;
  std::string *v187;
  __int128 v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  unint64_t v193;
  std::string *v194;
  __int128 v195;
  std::string *v196;
  __int128 v197;
  std::string *v198;
  std::string::size_type v199;
  std::string *v200;
  __int128 v201;
  std::string *v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  size_t v211;
  size_t v212;
  size_t v213;
  uint64_t v214;
  uint64_t v215;
  const void **v216;
  size_t v217;
  const void **v218;
  uint64_t v219;
  const void **v220;
  const void **v221;
  const void **v222;
  const void **v223;
  int v224;
  int v225;
  int v226;
  std::string v227;
  std::string v228;
  std::string v229;
  std::string v230;
  _BYTE __p[24];
  uint64_t v232;
  std::string v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;

  if (*(_QWORD *)(a1 + 16))
    v4 = *(uint64_t **)(a1 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a1 + 44) == 610)
    v5 = *(uint64_t **)(a1 + 32);
  else
    v5 = CoreML::Specification::NonMaximumSuppression::default_instance((CoreML::Specification::NonMaximumSuppression *)a1);
  CoreML::Result::Result((CoreML::Result *)&v234);
  CoreML::validateModelDescription((CoreML *)v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)__p);
  v234 = *(_QWORD *)__p;
  if (SHIBYTE(v236) < 0)
    operator delete((void *)v235);
  v235 = *(_OWORD *)&__p[8];
  v236 = v232;
  if (!CoreML::Result::good((CoreML::Result *)&v234))
    goto LABEL_117;
  v208 = a1;
  v214 = *((unsigned int *)v4 + 6);
  if ((int)v214 < 1)
  {
LABEL_118:
    std::operator+<char>();
    v57 = std::string::append(&v233, "' (as defined by confidenceInputFeatureName) to the model is not present in the model description.");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v57->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result((_DWORD *)a2, 10);
  }
  else
  {
    v209 = a2;
    v6 = 0;
    v205 = (uint64_t)(v4 + 2);
    v204 = (uint64_t)(v4 + 5);
    v206 = v4;
    v207 = v5;
    v220 = (const void **)v5[3];
    v222 = (const void **)v5[2];
    v213 = *((unsigned __int8 *)v222 + 23);
    v212 = *((unsigned __int8 *)v220 + 23);
    v216 = (const void **)v5[5];
    v218 = (const void **)v5[4];
    v210 = v4[4] + 8;
    v211 = *((unsigned __int8 *)v218 + 23);
    v7 = *((unsigned __int8 *)v216 + 23);
    v8 = -1;
    v9 = -1;
    v226 = -1;
    v10 = -1;
    do
    {
      v11 = v213;
      v12 = v222;
      if ((v213 & 0x80) != 0)
      {
        v12 = *v222;
        v11 = (size_t)v222[1];
      }
      v13 = *(_QWORD *)(*(_QWORD *)(v210 + 8 * v6) + 16);
      v14 = *(char *)(v13 + 23);
      if (v14 >= 0)
        v15 = *(unsigned __int8 *)(v13 + 23);
      else
        v15 = *(_QWORD *)(v13 + 8);
      if (v14 >= 0)
        v16 = *(const void **)(*(_QWORD *)(v210 + 8 * v6) + 16);
      else
        v16 = *(const void **)v13;
      if (v15 >= v11)
        v17 = v11;
      else
        v17 = v15;
      v18 = memcmp(v12, v16, v17) == 0 && v15 == v11;
      if (v18)
        v8 = v6;
      v224 = v8;
      v19 = v212;
      v20 = v220;
      if ((v212 & 0x80) != 0)
      {
        v20 = *v220;
        v19 = (size_t)v220[1];
      }
      if (v15 >= v19)
        v21 = v19;
      else
        v21 = v15;
      v22 = memcmp(v20, v16, v21) == 0 && v15 == v19;
      if (v22)
        v9 = v6;
      v225 = v9;
      v23 = v211;
      v24 = v218;
      if ((v211 & 0x80) != 0)
      {
        v24 = *v218;
        v23 = (size_t)v218[1];
      }
      if (v15 >= v23)
        v25 = v23;
      else
        v25 = v15;
      v26 = memcmp(v24, v16, v25) == 0 && v15 == v23;
      v27 = v226;
      if (v26)
        v27 = v6;
      v226 = v27;
      v28 = v7;
      v29 = v216;
      if ((v7 & 0x80) != 0)
      {
        v29 = *v216;
        v28 = (size_t)v216[1];
      }
      if (v15 >= v28)
        v30 = v28;
      else
        v30 = v15;
      v31 = memcmp(v29, v16, v30) == 0;
      if (v15 != v28)
        v31 = 0;
      if (!v31 && !v26 && !v22 && !v18)
      {
        std::operator+<char>();
        v59 = std::string::append(&v233, "' was not requested by any of the input feature names (e.g. confidenceInputFeatureName).");
        v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v59->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result((_DWORD *)v209, 9);
        goto LABEL_120;
      }
      if (v31)
        v10 = v6;
      ++v6;
      v8 = v224;
      v9 = v225;
    }
    while (v214 != v6);
    a2 = v209;
    if (v224 == -1)
      goto LABEL_118;
    if (v225 == -1)
    {
      std::operator+<char>();
      v62 = std::string::append(&v233, "' (as defined by coordinatesInputFeatureName) to the model is not present in the model description.");
      v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v62->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result((_DWORD *)v209, 10);
    }
    else
    {
      v219 = *((unsigned int *)v206 + 12);
      if ((int)v219 < 1)
      {
LABEL_129:
        std::operator+<char>();
        v64 = std::string::append(&v233, "' (as defined by confidenceOutputFeatureName) from the model is not present in the model description.");
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v64->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result((_DWORD *)a2, 10);
      }
      else
      {
        v32 = 0;
        v221 = (const void **)v207[7];
        v223 = (const void **)v207[6];
        v33 = *((unsigned __int8 *)v221 + 23);
        v215 = v206[7] + 8;
        v217 = *((unsigned __int8 *)v223 + 23);
        v34 = -1;
        v35 = -1;
        do
        {
          v36 = v217;
          v37 = v223;
          if ((v217 & 0x80) != 0)
          {
            v37 = *v223;
            v36 = (size_t)v223[1];
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v215 + 8 * v32) + 16);
          v39 = *(char *)(v38 + 23);
          if (v39 >= 0)
            v40 = *(unsigned __int8 *)(v38 + 23);
          else
            v40 = *(_QWORD *)(v38 + 8);
          if (v39 >= 0)
            v41 = *(const void **)(*(_QWORD *)(v215 + 8 * v32) + 16);
          else
            v41 = *(const void **)v38;
          if (v40 >= v36)
            v42 = v36;
          else
            v42 = v40;
          v43 = memcmp(v37, v41, v42) == 0 && v40 == v36;
          if (v43)
            v44 = v32;
          else
            v44 = v34;
          v45 = v33;
          v46 = v221;
          if ((v33 & 0x80) != 0)
          {
            v46 = *v221;
            v45 = (size_t)v221[1];
          }
          if (v40 >= v45)
            v47 = v45;
          else
            v47 = v40;
          v48 = memcmp(v46, v41, v47) == 0;
          if (v40 != v45)
            v48 = 0;
          if (!v48 && !v43)
          {
            std::operator+<char>();
            v66 = std::string::append(&v233, "' was not requested by any of the output feature names (e.g. confidenceOutputFeatureName).");
            v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
            *(_QWORD *)&__p[16] = *((_QWORD *)&v66->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v67;
            v66->__r_.__value_.__l.__size_ = 0;
            v66->__r_.__value_.__r.__words[2] = 0;
            v66->__r_.__value_.__r.__words[0] = 0;
            CoreML::Result::Result((_DWORD *)v209, 9);
            goto LABEL_120;
          }
          if (v48)
            v35 = v32;
          ++v32;
          v34 = v44;
        }
        while (v219 != v32);
        a2 = v209;
        if (v44 == -1)
          goto LABEL_129;
        if (v35 != -1)
        {
          v49 = (const void **)v207[2];
          LODWORD(v230.__r_.__value_.__l.__data_) = 5;
          std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v233, &v230, 1uLL);
          CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v205, v49, (int **)&v233, (CoreML::Result *)__p);
          v234 = *(_QWORD *)__p;
          if (SHIBYTE(v236) < 0)
            operator delete((void *)v235);
          v235 = *(_OWORD *)&__p[8];
          v236 = v232;
          HIBYTE(v232) = 0;
          __p[8] = 0;
          if (v233.__r_.__value_.__r.__words[0])
          {
            v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
            operator delete(v233.__r_.__value_.__l.__data_);
          }
          if (CoreML::Result::good((CoreML::Result *)&v234))
          {
            v50 = (const void **)v207[3];
            LODWORD(v230.__r_.__value_.__l.__data_) = 5;
            std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v233, &v230, 1uLL);
            CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v205, v50, (int **)&v233, (CoreML::Result *)__p);
            v234 = *(_QWORD *)__p;
            if (SHIBYTE(v236) < 0)
              operator delete((void *)v235);
            v235 = *(_OWORD *)&__p[8];
            v236 = v232;
            HIBYTE(v232) = 0;
            __p[8] = 0;
            if (v233.__r_.__value_.__r.__words[0])
            {
              v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
              operator delete(v233.__r_.__value_.__l.__data_);
            }
            if (CoreML::Result::good((CoreML::Result *)&v234))
            {
              if (v226 < 0)
                goto LABEL_97;
              v51 = (const void **)v207[4];
              LODWORD(v230.__r_.__value_.__l.__data_) = 2;
              std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v233, &v230, 1uLL);
              CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v205, v51, (int **)&v233, (CoreML::Result *)__p);
              v234 = *(_QWORD *)__p;
              if (SHIBYTE(v236) < 0)
                operator delete((void *)v235);
              v235 = *(_OWORD *)&__p[8];
              v236 = v232;
              HIBYTE(v232) = 0;
              __p[8] = 0;
              if (v233.__r_.__value_.__r.__words[0])
              {
                v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
                operator delete(v233.__r_.__value_.__l.__data_);
              }
              if (CoreML::Result::good((CoreML::Result *)&v234))
              {
LABEL_97:
                if (v10 < 0)
                  goto LABEL_438;
                v52 = (const void **)v207[5];
                LODWORD(v230.__r_.__value_.__l.__data_) = 2;
                std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v233, &v230, 1uLL);
                CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v205, v52, (int **)&v233, (CoreML::Result *)__p);
                v234 = *(_QWORD *)__p;
                if (SHIBYTE(v236) < 0)
                  operator delete((void *)v235);
                v235 = *(_OWORD *)&__p[8];
                v236 = v232;
                HIBYTE(v232) = 0;
                __p[8] = 0;
                if (v233.__r_.__value_.__r.__words[0])
                {
                  v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
                  operator delete(v233.__r_.__value_.__l.__data_);
                }
                if (CoreML::Result::good((CoreML::Result *)&v234))
                {
LABEL_438:
                  v53 = (const void **)v207[6];
                  LODWORD(v230.__r_.__value_.__l.__data_) = 5;
                  std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v233, &v230, 1uLL);
                  CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v204, v53, (int **)&v233, (CoreML::Result *)__p);
                  v234 = *(_QWORD *)__p;
                  if (SHIBYTE(v236) < 0)
                    operator delete((void *)v235);
                  v235 = *(_OWORD *)&__p[8];
                  v236 = v232;
                  HIBYTE(v232) = 0;
                  __p[8] = 0;
                  if (v233.__r_.__value_.__r.__words[0])
                  {
                    v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
                    operator delete(v233.__r_.__value_.__l.__data_);
                  }
                  if (CoreML::Result::good((CoreML::Result *)&v234))
                  {
                    v54 = (const void **)v207[7];
                    LODWORD(v230.__r_.__value_.__l.__data_) = 5;
                    std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](&v233, &v230, 1uLL);
                    CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v204, v54, (int **)&v233, (CoreML::Result *)__p);
                    v234 = *(_QWORD *)__p;
                    if (SHIBYTE(v236) < 0)
                      operator delete((void *)v235);
                    v235 = *(_OWORD *)&__p[8];
                    v236 = v232;
                    HIBYTE(v232) = 0;
                    __p[8] = 0;
                    if (v233.__r_.__value_.__r.__words[0])
                    {
                      v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
                      operator delete(v233.__r_.__value_.__l.__data_);
                    }
                    v55 = CoreML::Result::good((CoreML::Result *)&v234);
                    if (v55)
                    {
                      v56 = *((double *)v207 + 8);
                      if (v56 < 0.0 || v56 > 1.0)
                      {
                        std::string::basic_string[abi:ne180100]<0>(__p, "iouThreshold must be a value between 0.0 and 1.0.");
                        CoreML::Result::Result((_DWORD *)v209, 13);
                        goto LABEL_133;
                      }
                      if (*((double *)v207 + 9) < 0.0)
                      {
                        std::string::basic_string[abi:ne180100]<0>(__p, "confidenceThreshold must be a non-negative value. If you do not want to eliminate any predictions based on confidence, set it to 0.0.");
                        CoreML::Result::Result((_DWORD *)v209, 13);
                        goto LABEL_133;
                      }
                      v70 = v206[4] + 8;
                      v71 = *(_QWORD *)(v70 + 8 * v224);
                      v72 = *(_QWORD *)(v70 + 8 * v225);
                      v73 = v206[7] + 8;
                      v74 = *(_QWORD *)(v73 + 8 * v44);
                      v75 = *(_QWORD *)(v73 + 8 * v35);
                      v76 = *(uint64_t **)(v71 + 32);
                      if (!v76)
                        v76 = &CoreML::Specification::_FeatureType_default_instance_;
                      if (*((_DWORD *)v76 + 9) == 5)
                        v77 = (uint64_t *)v76[3];
                      else
                        v77 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v55);
                      v78 = *((_DWORD *)v77 + 9);
                      v79 = *(uint64_t **)(v74 + 32);
                      if (!v79)
                        v79 = &CoreML::Specification::_FeatureType_default_instance_;
                      if (*((_DWORD *)v79 + 9) == 5)
                        v80 = (uint64_t *)v79[3];
                      else
                        v80 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v77);
                      v81 = *((_DWORD *)v80 + 9);
                      v82 = *(uint64_t **)(v72 + 32);
                      if (!v82)
                        v82 = &CoreML::Specification::_FeatureType_default_instance_;
                      if (*((_DWORD *)v82 + 9) == 5)
                        v83 = (uint64_t *)v82[3];
                      else
                        v83 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v80);
                      v84 = *((_DWORD *)v83 + 9);
                      v85 = *(uint64_t **)(v75 + 32);
                      if (!v85)
                        v85 = &CoreML::Specification::_FeatureType_default_instance_;
                      if (*((_DWORD *)v85 + 9) == 5)
                        v86 = (uint64_t *)v85[3];
                      else
                        v86 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v83);
                      if (v78 != v81 || v78 != v84 || v78 != *((_DWORD *)v86 + 9))
                      {
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'confidence' and 'coordinates' must use a same element type, but ", 65);
                        v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input confidence' is ", 22);
                        if (*(_QWORD *)(v71 + 32))
                          v108 = *(const CoreML::Specification::FeatureType **)(v71 + 32);
                        else
                          v108 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                        CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v108);
                        CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v109 = &v233;
                        else
                          v109 = (std::string *)v233.__r_.__value_.__r.__words[0];
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          size = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                        else
                          size = v233.__r_.__value_.__l.__size_;
                        v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)v109, size);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)", ", 2);
                        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v233.__r_.__value_.__l.__data_);
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
                        v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'output confidence' is ", 23);
                        if (*(_QWORD *)(v74 + 32))
                          v113 = *(const CoreML::Specification::FeatureType **)(v74 + 32);
                        else
                          v113 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                        CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v113);
                        CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v114 = &v233;
                        else
                          v114 = (std::string *)v233.__r_.__value_.__r.__words[0];
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v115 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                        else
                          v115 = v233.__r_.__value_.__l.__size_;
                        v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)v114, v115);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)", ", 2);
                        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v233.__r_.__value_.__l.__data_);
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
                        v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input coordinates' are ", 24);
                        if (*(_QWORD *)(v72 + 32))
                          v118 = *(const CoreML::Specification::FeatureType **)(v72 + 32);
                        else
                          v118 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                        CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v118);
                        CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v119 = &v233;
                        else
                          v119 = (std::string *)v233.__r_.__value_.__r.__words[0];
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v120 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                        else
                          v120 = v233.__r_.__value_.__l.__size_;
                        v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)v119, v120);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)", ", 2);
                        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v233.__r_.__value_.__l.__data_);
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
                        v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"and 'output coordinates' are ", 29);
                        if (*(_QWORD *)(v75 + 32))
                          v123 = *(const CoreML::Specification::FeatureType **)(v75 + 32);
                        else
                          v123 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                        CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v123);
                        CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v124 = &v233;
                        else
                          v124 = (std::string *)v233.__r_.__value_.__r.__words[0];
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v125 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                        else
                          v125 = v233.__r_.__value_.__l.__size_;
                        v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v124, v125);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)".", 1);
                        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v233.__r_.__value_.__l.__data_);
                        goto LABEL_250;
                      }
                      if (*(int *)(v208 + 24) < 5)
                      {
                        if (v78 != 65600)
                        {
                          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"The element data type of 'confidence' and 'coordinates' must be MultiArray<DOUBLE> for model specification version earlier than ", 128);
                          v134 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)", but ", 6);
                          v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input confidence' is ", 22);
                          if (*(_QWORD *)(v71 + 32))
                            v136 = *(const CoreML::Specification::FeatureType **)(v71 + 32);
                          else
                            v136 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v136);
                          CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                          if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v137 = &v233;
                          else
                            v137 = (std::string *)v233.__r_.__value_.__r.__words[0];
                          if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v138 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                          else
                            v138 = v233.__r_.__value_.__l.__size_;
                          v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v137, v138);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)", ", 2);
                          if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v233.__r_.__value_.__l.__data_);
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
                          v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'output confidence' is ", 23);
                          if (*(_QWORD *)(v74 + 32))
                            v141 = *(const CoreML::Specification::FeatureType **)(v74 + 32);
                          else
                            v141 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v141);
                          CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                          if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v142 = &v233;
                          else
                            v142 = (std::string *)v233.__r_.__value_.__r.__words[0];
                          if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v143 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                          else
                            v143 = v233.__r_.__value_.__l.__size_;
                          v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)v142, v143);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)", ", 2);
                          if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v233.__r_.__value_.__l.__data_);
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
                          v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input coordinates' are ", 24);
                          if (*(_QWORD *)(v72 + 32))
                            v146 = *(const CoreML::Specification::FeatureType **)(v72 + 32);
                          else
                            v146 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v146);
                          CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                          if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v147 = &v233;
                          else
                            v147 = (std::string *)v233.__r_.__value_.__r.__words[0];
                          if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v148 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                          else
                            v148 = v233.__r_.__value_.__l.__size_;
                          v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)v147, v148);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)", ", 2);
                          if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v233.__r_.__value_.__l.__data_);
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
                          v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"and 'output coordinates' are ", 29);
                          if (*(_QWORD *)(v75 + 32))
                            v151 = *(const CoreML::Specification::FeatureType **)(v75 + 32);
                          else
                            v151 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                          CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v151);
                          CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                          if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v152 = &v233;
                          else
                            v152 = (std::string *)v233.__r_.__value_.__r.__words[0];
                          if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v153 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                          else
                            v153 = v233.__r_.__value_.__l.__size_;
                          v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)v152, v153);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)". ", 2);
                          if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v233.__r_.__value_.__l.__data_);
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"To enable MultiArray<FLOAT32>, use the model specification version ", 67);
                          v155 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)" or later.", 10);
                          std::stringbuf::str();
                          CoreML::Result::Result((_DWORD *)v209, 13);
                          goto LABEL_251;
                        }
                      }
                      else if (v78 != 65568 && v78 != 65600)
                      {
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"The element data type of 'confidence' and 'coordinates' must be either MultiArray<DOUBLE> or MultiArray<FLOAT32>, but ", 118);
                        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input confidence' is ", 22);
                        if (*(_QWORD *)(v71 + 32))
                          v88 = *(const CoreML::Specification::FeatureType **)(v71 + 32);
                        else
                          v88 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                        CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v88);
                        CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v89 = &v233;
                        else
                          v89 = (std::string *)v233.__r_.__value_.__r.__words[0];
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v90 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                        else
                          v90 = v233.__r_.__value_.__l.__size_;
                        v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v89, v90);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)", ", 2);
                        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v233.__r_.__value_.__l.__data_);
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
                        v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'output confidence' is ", 23);
                        if (*(_QWORD *)(v74 + 32))
                          v93 = *(const CoreML::Specification::FeatureType **)(v74 + 32);
                        else
                          v93 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                        CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v93);
                        CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v94 = &v233;
                        else
                          v94 = (std::string *)v233.__r_.__value_.__r.__words[0];
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v95 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                        else
                          v95 = v233.__r_.__value_.__l.__size_;
                        v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v94, v95);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)", ", 2);
                        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v233.__r_.__value_.__l.__data_);
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
                        v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"'input coordinates' are ", 24);
                        if (*(_QWORD *)(v72 + 32))
                          v98 = *(const CoreML::Specification::FeatureType **)(v72 + 32);
                        else
                          v98 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                        CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v98);
                        CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v99 = &v233;
                        else
                          v99 = (std::string *)v233.__r_.__value_.__r.__words[0];
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v100 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                        else
                          v100 = v233.__r_.__value_.__l.__size_;
                        v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v99, v100);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)", ", 2);
                        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v233.__r_.__value_.__l.__data_);
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
                        v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"and 'output coordinates' are ", 29);
                        if (*(_QWORD *)(v75 + 32))
                          v103 = *(const CoreML::Specification::FeatureType **)(v75 + 32);
                        else
                          v103 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
                        CoreML::FeatureType::FeatureType((CoreML::FeatureType *)&v230, v103);
                        CoreML::FeatureType::toString((CoreML::FeatureType *)&v230, &v233);
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v104 = &v233;
                        else
                          v104 = (std::string *)v233.__r_.__value_.__r.__words[0];
                        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v105 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                        else
                          v105 = v233.__r_.__value_.__l.__size_;
                        v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)v104, v105);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)".", 1);
                        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v233.__r_.__value_.__l.__data_);
LABEL_250:
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
                        std::stringbuf::str();
                        CoreML::Result::Result((_DWORD *)v209, 13);
LABEL_251:
                        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v233.__r_.__value_.__l.__data_);
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
                        goto LABEL_125;
                      }
                      v127 = *(uint64_t **)(v74 + 32);
                      if (v127)
                        v128 = *(uint64_t **)(v74 + 32);
                      else
                        v128 = &CoreML::Specification::_FeatureType_default_instance_;
                      if (*((_DWORD *)v128 + 9) == 5)
                      {
                        v129 = (uint64_t *)v128[3];
                      }
                      else
                      {
                        v129 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v86);
                        v127 = *(uint64_t **)(v74 + 32);
                      }
                      v130 = *((_DWORD *)v129 + 4);
                      if (!v127)
                        v127 = &CoreML::Specification::_FeatureType_default_instance_;
                      if (*((_DWORD *)v127 + 9) == 5)
                        v131 = (uint64_t *)v127[3];
                      else
                        v131 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v129);
                      v132 = *((_DWORD *)v131 + 15);
                      if (v132 == 31)
                      {
                        v133 = (int *)(v131[5] + 24);
                      }
                      else
                      {
                        if (v132 != 21)
                        {
                          v156 = 0;
LABEL_317:
                          v157 = v130 == 0;
                          v158 = v156 == 2 && v130 == 0;
                          if (v130 == 2)
                            v157 = 1;
                          if (v156)
                            v159 = 0;
                          else
                            v159 = v130 == 2;
                          if (v156)
                            v160 = 0;
                          else
                            v160 = v157;
                          if (!v160 && !v158)
                          {
                            std::string::basic_string[abi:ne180100]<0>(__p, "If shape information is provided for confidence output, 2 dimensions must be specified using either shape (deprecated) or allowedShapes.");
                            CoreML::Result::Result((_DWORD *)v209, 13);
                            goto LABEL_133;
                          }
                          if (!v159)
                            goto LABEL_343;
                          v161 = *(uint64_t **)(v74 + 32);
                          if (!v161)
                            v161 = &CoreML::Specification::_FeatureType_default_instance_;
                          if (*((_DWORD *)v161 + 9) == 5)
                            v162 = (uint64_t *)v161[3];
                          else
                            v162 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v131);
                          v163 = *(_QWORD *)(v162[3] + 8);
                          v164 = *(uint64_t **)(v75 + 32);
                          if (!v164)
                            v164 = &CoreML::Specification::_FeatureType_default_instance_;
                          v131 = *((_DWORD *)v164 + 9) == 5
                               ? (uint64_t *)v164[3]
                               : CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v162);
                          if (v163 != *(_QWORD *)(v131[3] + 8))
                          {
                            std::string::basic_string[abi:ne180100]<0>(__p, "Confidence and coordinates output shapes must be consistent (must have the same size along dimension 0).");
                            CoreML::Result::Result((_DWORD *)v209, 13);
                          }
                          else
                          {
LABEL_343:
                            if (!v158)
                              goto LABEL_376;
                            v165 = *(uint64_t **)(v74 + 32);
                            if (!v165)
                              v165 = &CoreML::Specification::_FeatureType_default_instance_;
                            if (*((_DWORD *)v165 + 9) == 5)
                              v166 = (uint64_t *)v165[3];
                            else
                              v166 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v131);
                            v167 = *((_DWORD *)v166 + 15);
                            v168 = *(uint64_t **)(v75 + 32);
                            if (!v168)
                              v168 = &CoreML::Specification::_FeatureType_default_instance_;
                            if (*((_DWORD *)v168 + 9) == 5)
                              v169 = (uint64_t *)v168[3];
                            else
                              v169 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v166);
                            if (v167 == 31 && *((_DWORD *)v169 + 15) == 31)
                            {
                              v170 = *(uint64_t **)(v74 + 32);
                              if (!v170)
                                v170 = &CoreML::Specification::_FeatureType_default_instance_;
                              if (*((_DWORD *)v170 + 9) == 5)
                                v171 = (uint64_t *)v170[3];
                              else
                                v171 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v169);
                              if (*((_DWORD *)v171 + 15) == 31)
                              {
                                v172 = (uint64_t *)v171[5];
                              }
                              else
                              {
                                v171 = CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v171);
                                v172 = v171;
                              }
                              v173 = *(uint64_t **)(v74 + 32);
                              if (!v173)
                                v173 = &CoreML::Specification::_FeatureType_default_instance_;
                              if (*((_DWORD *)v173 + 9) == 5)
                                v174 = (uint64_t *)v173[3];
                              else
                                v174 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v171);
                              if (*((_DWORD *)v174 + 15) == 31)
                                v131 = (uint64_t *)v174[5];
                              else
                                v131 = CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v174);
                              v175 = *(_QWORD *)(v172[4] + 8);
                              v176 = *(_QWORD *)(v131[4] + 8);
                              if (*(_QWORD *)(v175 + 16) == *(_QWORD *)(v176 + 16)
                                && *(_QWORD *)(v175 + 24) == *(_QWORD *)(v176 + 24))
                              {
LABEL_376:
                                v177 = *((_DWORD *)v207 + 26);
                                if (v177 == 100)
                                {
                                  v178 = (unsigned int *)(v207[11] + 24);
                                }
                                else
                                {
                                  if (v177 != 101)
                                    goto LABEL_416;
                                  v178 = (unsigned int *)(v207[11] + 16);
                                }
                                v179 = *v178;
                                if ((int)v179 > 0 && v159)
                                {
                                  v181 = *(uint64_t **)(v74 + 32);
                                  if (!v181)
                                    v181 = &CoreML::Specification::_FeatureType_default_instance_;
                                  v131 = *((_DWORD *)v181 + 9) == 5
                                       ? (uint64_t *)v181[3]
                                       : CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v131);
                                  if (*(_QWORD *)(v131[3] + 16) != v179)
                                  {
                                    std::to_string(&v228, v179);
                                    v185 = std::string::insert(&v228, 0, "Number of classes is not consistent for class labels (");
                                    v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
                                    v229.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
                                    *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v186;
                                    v185->__r_.__value_.__l.__size_ = 0;
                                    v185->__r_.__value_.__r.__words[2] = 0;
                                    v185->__r_.__value_.__r.__words[0] = 0;
                                    v187 = std::string::append(&v229, ") and dimension 1 of output confidence shape (");
                                    v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
                                    v230.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
                                    *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v188;
                                    v187->__r_.__value_.__l.__size_ = 0;
                                    v187->__r_.__value_.__r.__words[2] = 0;
                                    v187->__r_.__value_.__r.__words[0] = 0;
                                    v189 = *(uint64_t **)(v74 + 32);
                                    if (!v189)
                                      v189 = &CoreML::Specification::_FeatureType_default_instance_;
                                    if (*((_DWORD *)v189 + 9) == 5)
                                      v190 = (uint64_t *)v189[3];
                                    else
                                      v190 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v187);
                                    std::to_string(&v227, *(_QWORD *)(v190[3] + 16));
                                    if ((v227.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v198 = &v227;
                                    else
                                      v198 = (std::string *)v227.__r_.__value_.__r.__words[0];
                                    if ((v227.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v199 = HIBYTE(v227.__r_.__value_.__r.__words[2]);
                                    else
                                      v199 = v227.__r_.__value_.__l.__size_;
                                    v200 = std::string::append(&v230, (const std::string::value_type *)v198, v199);
                                    v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
                                    v233.__r_.__value_.__r.__words[2] = v200->__r_.__value_.__r.__words[2];
                                    *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v201;
                                    v200->__r_.__value_.__l.__size_ = 0;
                                    v200->__r_.__value_.__r.__words[2] = 0;
                                    v200->__r_.__value_.__r.__words[0] = 0;
                                    v202 = std::string::append(&v233, ")");
                                    v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
                                    *(_QWORD *)&__p[16] = *((_QWORD *)&v202->__r_.__value_.__l + 2);
                                    *(_OWORD *)__p = v203;
                                    v202->__r_.__value_.__l.__size_ = 0;
                                    v202->__r_.__value_.__r.__words[2] = 0;
                                    v202->__r_.__value_.__r.__words[0] = 0;
                                    CoreML::Result::Result((_DWORD *)v209, 13);
                                    if ((__p[23] & 0x80000000) != 0)
                                      operator delete(*(void **)__p);
                                    if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v233.__r_.__value_.__l.__data_);
                                    if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v227.__r_.__value_.__l.__data_);
                                    if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v230.__r_.__value_.__l.__data_);
                                    if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v229.__r_.__value_.__l.__data_);
                                    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
                                    {
                                      v61 = (void *)v228.__r_.__value_.__r.__words[0];
                                      goto LABEL_124;
                                    }
                                    goto LABEL_125;
                                  }
                                }
                                if ((int)v179 > 0 && v158)
                                {
                                  v183 = *(uint64_t **)(v74 + 32);
                                  if (!v183)
                                    v183 = &CoreML::Specification::_FeatureType_default_instance_;
                                  v184 = *((_DWORD *)v183 + 9) == 5
                                       ? (uint64_t *)v183[3]
                                       : CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v131);
                                  v191 = *((_DWORD *)v184 + 15) == 31
                                       ? (uint64_t *)v184[5]
                                       : CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v184);
                                  v192 = *(_QWORD *)(v191[4] + 16);
                                  if (*(_QWORD *)(v192 + 16) > v179
                                    || (v193 = *(_QWORD *)(v192 + 24), (v193 & 0x8000000000000000) == 0)
                                    && v193 < v179)
                                  {
                                    std::to_string(&v230, v179);
                                    v194 = std::string::insert(&v230, 0, "Number of classes is not consistent for class labels (");
                                    v195 = *(_OWORD *)&v194->__r_.__value_.__l.__data_;
                                    v233.__r_.__value_.__r.__words[2] = v194->__r_.__value_.__r.__words[2];
                                    *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v195;
                                    v194->__r_.__value_.__l.__size_ = 0;
                                    v194->__r_.__value_.__r.__words[2] = 0;
                                    v194->__r_.__value_.__r.__words[0] = 0;
                                    v196 = std::string::append(&v233, ") and dimension 1 of output confidence shape range");
                                    v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
                                    *(_QWORD *)&__p[16] = *((_QWORD *)&v196->__r_.__value_.__l + 2);
                                    *(_OWORD *)__p = v197;
                                    v196->__r_.__value_.__l.__size_ = 0;
                                    v196->__r_.__value_.__r.__words[2] = 0;
                                    v196->__r_.__value_.__r.__words[0] = 0;
                                    CoreML::Result::Result((_DWORD *)v209, 13);
                                    if ((__p[23] & 0x80000000) != 0)
                                      operator delete(*(void **)__p);
                                    if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v233.__r_.__value_.__l.__data_);
                                    if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
                                    {
                                      v61 = (void *)v230.__r_.__value_.__r.__words[0];
                                      goto LABEL_124;
                                    }
                                    goto LABEL_125;
                                  }
                                }
LABEL_416:
                                *(_QWORD *)v209 = v234;
                                *(_OWORD *)(v209 + 8) = v235;
                                *(_QWORD *)(v209 + 24) = v236;
                                v235 = 0uLL;
                                v236 = 0;
                                goto LABEL_125;
                              }
                              std::string::basic_string[abi:ne180100]<0>(__p, "Confidence and coordinates output shapes must be consistent (must have the same range of sizes along dimension 0).");
                              CoreML::Result::Result((_DWORD *)v209, 13);
                            }
                            else
                            {
                              std::string::basic_string[abi:ne180100]<0>(__p, "Confidence and coordinates output shapes fexibility must both be ranges");
                              CoreML::Result::Result((_DWORD *)v209, 13);
                            }
                          }
LABEL_133:
                          if ((__p[23] & 0x80000000) != 0)
                          {
                            v61 = *(void **)__p;
                            goto LABEL_124;
                          }
                          goto LABEL_125;
                        }
                        v133 = (int *)(*(_QWORD *)(*(_QWORD *)(v131[5] + 32) + 8) + 16);
                      }
                      v156 = *v133;
                      goto LABEL_317;
                    }
                  }
                }
              }
            }
          }
LABEL_117:
          *(_QWORD *)a2 = v234;
          *(_OWORD *)(a2 + 8) = v235;
          *(_QWORD *)(a2 + 24) = v236;
          v235 = 0uLL;
          v236 = 0;
          goto LABEL_125;
        }
        std::operator+<char>();
        v68 = std::string::append(&v233, "' (as defined by coordinatesOutputFeatureName) from the model is not present in the model description.");
        v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v68->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v69;
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result((_DWORD *)v209, 10);
      }
    }
  }
LABEL_120:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
  {
    v61 = (void *)v233.__r_.__value_.__r.__words[0];
LABEL_124:
    operator delete(v61);
  }
LABEL_125:
  if (SHIBYTE(v236) < 0)
    operator delete((void *)v235);
}

void sub_2184A7038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a58 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 121) < 0)
    operator delete(*(void **)(v58 - 144));
  if (a32 < 0)
    operator delete(a27);
  if (a51 < 0)
    operator delete(a46);
  if (a44 < 0)
    operator delete(a39);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v58 - 89) < 0)
    operator delete(*(void **)(v58 - 112));
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<CoreML::Specification::FeatureType::TypeCase>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_2184A73BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_NonMaximumSuppressionValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184A7764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_29()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_feature_binner_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D943E10;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D943E90;
  v59 = v58;
  qword_254FF4988 = 0;
  qword_254FF4990 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4988 = turi::transform_utils::ptb_filters;
  qword_254FF4990 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4988 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4990, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184A7D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4988 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184A7F10()
{
  JUMPOUT(0x2184A7E6CLL);
}

void sub_2184A7F20()
{
  JUMPOUT(0x2184A7E7CLL);
}

void sub_2184A7F30()
{
  JUMPOUT(0x2184A7E8CLL);
}

void sub_2184A7F40()
{
  JUMPOUT(0x2184A7E9CLL);
}

void sub_2184A7F50()
{
  JUMPOUT(0x2184A7F08);
}

void sub_2184A8520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_22_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_mean_imputer_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D943F10;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D943F90;
  v59 = v58;
  qword_254FF49B0 = 0;
  qword_254FF49B8 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF49B0 = turi::transform_utils::ptb_filters;
  qword_254FF49B8 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF49B0 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF49B8, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184A8AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF49B0 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184A8CCC()
{
  JUMPOUT(0x2184A8C28);
}

void sub_2184A8CDC()
{
  JUMPOUT(0x2184A8C38);
}

void sub_2184A8CEC()
{
  JUMPOUT(0x2184A8C48);
}

void sub_2184A8CFC()
{
  JUMPOUT(0x2184A8C58);
}

void sub_2184A8D0C()
{
  JUMPOUT(0x2184A8CC4);
}

void sub_2184A8EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_68_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ngram_counter_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D944010;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D944090;
  v59 = v58;
  qword_254FF49D8 = 0;
  qword_254FF49E0 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF49D8 = turi::transform_utils::ptb_filters;
  qword_254FF49E0 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF49D8 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF49E0, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184A960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF49D8 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184A9810()
{
  JUMPOUT(0x2184A976CLL);
}

void sub_2184A9820()
{
  JUMPOUT(0x2184A977CLL);
}

void sub_2184A9830()
{
  JUMPOUT(0x2184A978CLL);
}

void sub_2184A9840()
{
  JUMPOUT(0x2184A979CLL);
}

void sub_2184A9850()
{
  JUMPOUT(0x2184A9808);
}

void sub_2184A9BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_23_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_one_hot_encoder_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D944110;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D944190;
  v59 = v58;
  qword_254FF4A00 = 0;
  qword_254FF4A08 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4A00 = turi::transform_utils::ptb_filters;
  qword_254FF4A08 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4A00 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4A08, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184AA150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4A00 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184AA354()
{
  JUMPOUT(0x2184AA2B0);
}

void sub_2184AA364()
{
  JUMPOUT(0x2184AA2C0);
}

void sub_2184AA374()
{
  JUMPOUT(0x2184AA2D0);
}

void sub_2184AA384()
{
  JUMPOUT(0x2184AA2E0);
}

void sub_2184AA394()
{
  JUMPOUT(0x2184AA34CLL);
}

void sub_2184AA530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,unsigned long>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,unsigned long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned long>,std::__tree_node<std::__value_type<std::string,unsigned long>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_2184AA7BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,unsigned long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned long>,std::__tree_node<std::__value_type<std::string,unsigned long>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MPSRNNMatrixId> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void __cxx_global_var_init_27_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_quadratic_features_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D944210;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D944290;
  v59 = v58;
  qword_254FF4A28 = 0;
  qword_254FF4A30 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4A28 = turi::transform_utils::ptb_filters;
  qword_254FF4A30 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4A28 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4A30, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184AAD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4A28 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184AAF70()
{
  JUMPOUT(0x2184AAECCLL);
}

void sub_2184AAF80()
{
  JUMPOUT(0x2184AAEDCLL);
}

void sub_2184AAF90()
{
  JUMPOUT(0x2184AAEECLL);
}

void sub_2184AAFA0()
{
  JUMPOUT(0x2184AAEFCLL);
}

void sub_2184AAFB0()
{
  JUMPOUT(0x2184AAF68);
}

void sub_2184AB14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sample_transformer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)404>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  _BOOL8 v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t *v17;
  _BOOL8 v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  void *v43[2];
  uint64_t v44;
  std::locale v45;
  char v46;
  void *__p;
  __int128 v48;
  uint64_t v49;
  void *v50;
  char v51;
  uint64_t v52;

  if (*(_DWORD *)(a1 + 44) == 404)
    v4 = *(uint64_t **)(a1 + 32);
  else
    v4 = CoreML::Specification::KNearestNeighborsClassifier::default_instance((CoreML::Specification::KNearestNeighborsClassifier *)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "numberOfNeighbors");
  if (v4[3])
    v5 = (uint64_t *)v4[3];
  else
    v5 = &CoreML::Specification::_Int64Parameter_default_instance_;
  CoreML::validateInt64Parameter((uint64_t)&__p, (uint64_t)v5, 1, (CoreML::Result *)&v42);
  if (SHIBYTE(v48) < 0)
    operator delete(__p);
  v6 = CoreML::Result::good((CoreML::Result *)&v42);
  if (!v6)
    goto LABEL_14;
  if (!*((_DWORD *)v4 + 17))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v48 + 1, (uint64_t)"KNearestNeighborsClassifier requires a weighting scheme to be set.", 66);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    v11 = std::locale::use_facet(&v45, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v45);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_63:
    if (v46 < 0)
      operator delete(v45.__locale_);
    __p = (void *)*MEMORY[0x24BEDB7F0];
    v40 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    *((_QWORD *)&v48 + 1) = v40;
    v49 = MEMORY[0x24BEDB848] + 16;
    if (v51 < 0)
      operator delete(v50);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x219A198F4](&v52);
    goto LABEL_68;
  }
  v7 = *((_DWORD *)v4 + 15);
  if (v7 == 100)
  {
    v9 = 0;
    v8 = *(_DWORD *)(v4[4] + 24);
  }
  else if (v7 == 101)
  {
    v8 = 0;
    v9 = *(_DWORD *)(v4[4] + 16);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  if ((int)v9 <= (int)v8)
    v12 = v8;
  else
    v12 = v9;
  v13 = *((_DWORD *)v4 + 16);
  if (!v13)
  {
    if (!(_DWORD)v12)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v48 + 1, (uint64_t)"KNearestNeighborsClassifier should specify default class labels when class labels are not specified.", 100);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
      v27 = std::locale::use_facet(&v45, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale(&v45);
      std::ostream::put();
      std::ostream::flush();
      std::stringbuf::str();
      CoreML::Result::Result((_DWORD *)a2, 13);
      goto LABEL_63;
    }
    goto LABEL_28;
  }
  if (v13 == 110)
  {
    v14 = 0;
    if (v7 && v7 != 100)
      goto LABEL_26;
    goto LABEL_29;
  }
  if (v13 != 111)
  {
LABEL_28:
    v14 = 0;
    goto LABEL_29;
  }
  v14 = 1;
  if (v7 && v7 != 101)
  {
LABEL_26:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v48 + 1, (uint64_t)"KNearestNeighborsClassifier's class label and default class label have different types.", 87);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v45, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v45);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_63;
  }
LABEL_29:
  if (*(_DWORD *)(a1 + 44) == 404)
    v17 = *(uint64_t **)(a1 + 32);
  else
    v17 = CoreML::Specification::KNearestNeighborsClassifier::default_instance((CoreML::Specification::KNearestNeighborsClassifier *)v6);
  CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::KNearestNeighborsClassifier>(a1, (uint64_t)v17, 1, v14, (uint64_t)&__p);
  v42 = __p;
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
  *(_OWORD *)v43 = v48;
  v44 = v49;
  v18 = CoreML::Result::good((CoreML::Result *)&v42);
  if (!v18)
  {
LABEL_14:
    *(_QWORD *)a2 = v42;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)v43;
    *(_QWORD *)(a2 + 24) = v44;
    v43[0] = 0;
    v43[1] = 0;
    v44 = 0;
    goto LABEL_68;
  }
  if (*(_DWORD *)(a1 + 44) == 404)
    v19 = *(uint64_t **)(a1 + 32);
  else
    v19 = CoreML::Specification::KNearestNeighborsClassifier::default_instance((CoreML::Specification::KNearestNeighborsClassifier *)v18);
  if (v19[2])
    v20 = (uint64_t *)v19[2];
  else
    v20 = &CoreML::Specification::_NearestNeighborsIndex_default_instance_;
  v21 = *((_DWORD *)v20 + 6);
  if ((_DWORD)v12 && !v21)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v48 + 1, (uint64_t)"KNearestNeighborsClassifier has no data points.", 47);
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
    v23 = std::locale::use_facet(&v45, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    std::locale::~locale(&v45);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_63;
  }
  if (v21 != (_DWORD)v12)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v48 + 1, (uint64_t)"Unexpected number of labels \"", 29);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\" for the given number of examples: \"", 37);
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)".", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
    v31 = std::locale::use_facet(&v45, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale(&v45);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_63;
  }
  if ((int)v12 >= 1)
  {
    v24 = v20[4] + 8;
    while (*(_DWORD *)(*(_QWORD *)v24 + 16) == *((_DWORD *)v20 + 10))
    {
      v24 += 8;
      if (!--v12)
        goto LABEL_53;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v48 + 1, (uint64_t)"Unexpected length \"", 19);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\" given the provided number of dimensions \"", 43);
    v33 = (_QWORD *)std::ostream::operator<<();
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)".", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
    v35 = std::locale::use_facet(&v45, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
    std::locale::~locale(&v45);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_63;
  }
LABEL_53:
  v25 = *((_DWORD *)v20 + 17);
  if (v25 == 100)
    goto LABEL_76;
  if (v25 != 110)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v48 + 1, (uint64_t)"KNearestNeighborsClassifier has no index type specified.", 56);
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
    v37 = std::locale::use_facet(&v45, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(&v45);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_63;
  }
  if (*(int *)(v20[6] + 16) > 0)
  {
LABEL_76:
    if (*((_DWORD *)v20 + 18))
    {
      CoreML::Result::Result((CoreML::Result *)a2);
      goto LABEL_68;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v48 + 1, (uint64_t)"KNearestNeighborsClassifier requires a distance function to be set.", 67);
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
    v39 = std::locale::use_facet(&v45, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
    std::locale::~locale(&v45);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_63;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v48 + 1, (uint64_t)"KNearestNeighborsClassifier requires leaf size to be a positive integer.", 72);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v41);
  std::stringbuf::str();
  CoreML::Result::Result((_DWORD *)a2, 13);
  if (v46 < 0)
    operator delete(v45.__locale_);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
LABEL_68:
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
}

void sub_2184ABC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_2184ABD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    JUMPOUT(0x2184ABD1CLL);
  JUMPOUT(0x2184ABD20);
}

void CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::KNearestNeighborsClassifier>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  CoreML *v9;
  void *v10;
  void *__p;
  __int128 v12;
  uint64_t v13;

  v7 = *(_DWORD *)(a2 + 60);
  if (!v7)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier models must provide class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
LABEL_15:
    if (*(_QWORD *)(a1 + 16))
      v9 = *(CoreML **)(a1 + 16);
    else
      v9 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
    CoreML::validateFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&__p);
    if (!CoreML::Result::good((CoreML::Result *)&__p))
    {
      *(_QWORD *)a5 = __p;
      *(_OWORD *)(a5 + 8) = v12;
      *(_QWORD *)(a5 + 24) = v13;
      return;
    }
    CoreML::validateClassifierFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)a4, a5);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
    v10 = (void *)v12;
    goto LABEL_27;
  }
  if (v7 == 100)
  {
    if ((a3 & 1) == 0 && !*(_DWORD *)(*(_QWORD *)(a2 + 32) + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have String class labels must provide labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    if (*((_DWORD *)CoreML::Specification::Int64Vector::default_instance((CoreML::Specification::Int64Vector *)a1) + 4))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with String class labels must provide exclusively String class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  if (v7 != 101)
  {
LABEL_14:
    a4 = 0;
    goto LABEL_15;
  }
  if ((a3 & 1) == 0 && !*(_DWORD *)(*(_QWORD *)(a2 + 32) + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have Int64 class labels must provide labels.");
    CoreML::Result::Result((_DWORD *)a5, 13);
    goto LABEL_25;
  }
  if (!*((_DWORD *)CoreML::Specification::StringVector::default_instance((CoreML::Specification::StringVector *)a1) + 6))
  {
    a4 = 1;
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
  CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_25:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return;
  v10 = __p;
LABEL_27:
  operator delete(v10);
}

void sub_2184ABEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_KNearestNeighborsClassifierValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184AC114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_statistics_tracker_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184AC428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_11_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_supervised_learning_tests_cpp_0()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_2184AC81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

void sub_2184ACC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_32()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_tfidf_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D944310;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D944390;
  v59 = v58;
  qword_254FF4AC0 = 0;
  qword_254FF4AC8 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4AC0 = turi::transform_utils::ptb_filters;
  qword_254FF4AC8 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4AC0 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4AC8, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184AD1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4AC0 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184AD3D8()
{
  JUMPOUT(0x2184AD334);
}

void sub_2184AD3E8()
{
  JUMPOUT(0x2184AD344);
}

void sub_2184AD3F8()
{
  JUMPOUT(0x2184AD354);
}

void sub_2184AD408()
{
  JUMPOUT(0x2184AD364);
}

void sub_2184AD418()
{
  JUMPOUT(0x2184AD3D0);
}

void sub_2184AD5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_29_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_tokenizer_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D944410;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D944490;
  v59 = v58;
  qword_254FF4AE8 = 0;
  qword_254FF4AF0 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4AE8 = turi::transform_utils::ptb_filters;
  qword_254FF4AF0 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4AE8 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4AF0, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184ADD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4AE8 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184ADF1C()
{
  JUMPOUT(0x2184ADE78);
}

void sub_2184ADF2C()
{
  JUMPOUT(0x2184ADE88);
}

void sub_2184ADF3C()
{
  JUMPOUT(0x2184ADE98);
}

void sub_2184ADF4C()
{
  JUMPOUT(0x2184ADEA8);
}

void sub_2184ADF5C()
{
  JUMPOUT(0x2184ADF14);
}

void sub_2184AE100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_topk_indexer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double CoreML::Specification::protobuf_Parameters_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Parameters_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Parameters.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  result = 0.0;
  qword_254FFB2C8 = 0;
  qword_254FFB2B0 = 0;
  unk_254FFB2B8 = 0;
  CoreML::Specification::_Int64Parameter_default_instance_ = (uint64_t)&off_24D944510;
  byte_254FFB2D0 = 1;
  qword_254FFB308 = 0;
  qword_254FFB2F0 = 0;
  unk_254FFB2F8 = 0;
  CoreML::Specification::_DoubleParameter_default_instance_ = (uint64_t)&off_24D9445A8;
  byte_254FFB310 = 1;
  CoreML::Specification::_StringParameter_default_instance_ = (uint64_t)&off_24D944640;
  *(_QWORD *)algn_254FFB328 = 0;
  qword_254FFB330 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FFB338 = 0;
  byte_254FFB340 = 1;
  CoreML::Specification::_BoolParameter_default_instance_ = (uint64_t)&off_24D9446D8;
  unk_254FFB350 = 0;
  byte_254FFB358 = 0;
  dword_254FFB35C = 0;
  byte_254FFB360 = 1;
  return result;
}

void CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(CoreML::Specification::protobuf_Parameters_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_Parameters_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2184AE3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Int64Parameter *CoreML::Specification::Int64Parameter::Int64Parameter(CoreML::Specification::Int64Parameter *this)
{
  *(_QWORD *)this = &off_24D944510;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Int64Parameter *)&CoreML::Specification::_Int64Parameter_default_instance_)
    CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_2184AE404(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Int64Parameter::~Int64Parameter(CoreML::Specification::Int64Parameter *this)
{
  *(_QWORD *)this = &off_24D944510;
  if (*((_DWORD *)this + 9))
    CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::Int64Parameter::~Int64Parameter(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::Int64Parameter *CoreML::Specification::Int64Parameter::New(CoreML::Specification::Int64Parameter *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Int64Parameter *v3;

  v3 = (CoreML::Specification::Int64Parameter *)operator new();
  CoreML::Specification::Int64Parameter::Int64Parameter(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Int64Parameter>(a2, v3);
  return v3;
}

void sub_2184AE4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64Parameter>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Parameter>);
  return result;
}

uint64_t CoreML::Specification::Int64Parameter::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor(this);
}

uint64_t CoreML::Specification::Int64Parameter::MergePartialFromCodedStream(CoreML::Specification::Int64Parameter *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int v9;
  char *v11;
  unint64_t Varint64Fallback;
  CoreML::Specification::Int64Set *v13;
  CoreML::Specification::Int64Range *v14;
  char *v16;
  int VarintSizeAsIntFallback;
  char *v18;
  int v19;
  char v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t result;
  unint64_t v25;
  unsigned int v26;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          v6 = 0;
LABEL_6:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_23;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_23;
LABEL_7:
        v9 = v7 >> 3;
        if (v7 >> 3 == 11)
        {
          if (v7 != 90)
            goto LABEL_23;
          if (*((_DWORD *)this + 9) == 11)
          {
            v13 = (CoreML::Specification::Int64Set *)*((_QWORD *)this + 3);
          }
          else
          {
            CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor((uint64_t)this);
            *((_DWORD *)this + 9) = 11;
            v13 = (CoreML::Specification::Int64Set *)operator new();
            CoreML::Specification::Int64Set::Int64Set(v13);
            *((_QWORD *)this + 3) = v13;
          }
          v16 = *a2;
          if (*a2 >= a2[1] || *v16 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v16;
            *a2 = v16 + 1;
          }
          v21 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v21 & 0x8000000000000000) != 0)
            return 0;
          v23 = v21;
          result = CoreML::Specification::Int64Set::MergePartialFromCodedStream(v13, a2, v22);
          if (!(_DWORD)result)
            return result;
          goto LABEL_46;
        }
        if (v9 != 10)
          break;
        if (v7 != 82)
          goto LABEL_23;
        if (*((_DWORD *)this + 9) == 10)
        {
          v14 = (CoreML::Specification::Int64Range *)*((_QWORD *)this + 3);
        }
        else
        {
          CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor((uint64_t)this);
          *((_DWORD *)this + 9) = 10;
          v14 = (CoreML::Specification::Int64Range *)operator new();
          CoreML::Specification::Int64Range::Int64Range(v14);
          *((_QWORD *)this + 3) = v14;
        }
        v18 = *a2;
        if (*a2 >= a2[1] || *v18 < 0)
        {
          v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v19 < 0)
            return 0;
        }
        else
        {
          v19 = *v18;
          *a2 = v18 + 1;
        }
        v25 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v19);
        if ((v25 & 0x8000000000000000) != 0)
          return 0;
        v23 = v25;
        result = CoreML::Specification::Int64Range::MergePartialFromCodedStream(v14, a2, v26);
        if (!(_DWORD)result)
          return result;
LABEL_46:
        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v23))return 0;
      }
      if (v9 != 1 || v7 != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v20 & 1) == 0)
          return 0;
      }
      else
      {
        Varint64Fallback = *v11;
        *a2 = v11 + 1;
      }
      *((_QWORD *)this + 2) = Varint64Fallback;
    }
LABEL_23:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_2184AE78C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64Parameter::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  int v7;

  v5 = this;
  v6 = *(_QWORD *)(this + 16);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = *(_DWORD *)(v5 + 36);
  if (v7 == 10)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, *(_QWORD *)(v5 + 24), a2, a4);
    v7 = *(_DWORD *)(v5 + 36);
  }
  if (v7 == 11)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xB, *(_QWORD *)(v5 + 24), a2, a4);
  return this;
}

unint64_t CoreML::Specification::Int64Parameter::ByteSizeLong(CoreML::Specification::Int64Parameter *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;

  v2 = *((_QWORD *)this + 2);
  v3 = (9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6;
  if (v2)
    v4 = v3 + 1;
  else
    v4 = 0;
  v5 = *((_DWORD *)this + 9);
  if (v5 == 11)
  {
    v6 = CoreML::Specification::Int64Set::ByteSizeLong(*((CoreML::Specification::Int64Set **)this + 3));
    goto LABEL_8;
  }
  if (v5 == 10)
  {
    v6 = CoreML::Specification::Int64Range::ByteSizeLong(*((CoreML::Specification::Int64Range **)this + 3));
LABEL_8:
    v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

std::string *CoreML::Specification::Int64Parameter::MergeFrom(std::string *this, const CoreML::Specification::Int64Parameter *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  CoreML::Specification::Int64Range *v7;
  CoreML::Specification::Int64Set *v8;
  CoreML::Specification::Int64Range *v9;
  uint64_t *v10;
  CoreML::Specification::Int64Set *v11;
  uint64_t *v12;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    *(_QWORD *)(v3 + 16) = v5;
  v6 = *((_DWORD *)a2 + 9);
  if (v6 == 11)
  {
    if (*(_DWORD *)(v3 + 36) == 11)
    {
      v8 = *(CoreML::Specification::Int64Set **)(v3 + 24);
    }
    else
    {
      CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor(v3);
      *(_DWORD *)(v3 + 36) = 11;
      v8 = (CoreML::Specification::Int64Set *)operator new();
      v11 = (CoreML::Specification::Int64Set *)CoreML::Specification::Int64Set::Int64Set(v8);
      *(_QWORD *)(v3 + 24) = v8;
      if (*((_DWORD *)a2 + 9) != 11)
      {
        v12 = CoreML::Specification::Int64Set::default_instance(v11);
        return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v8, (const CoreML::Specification::GLMRegressor_DoubleArray *)v12);
      }
    }
    v12 = (uint64_t *)*((_QWORD *)a2 + 3);
    return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v8, (const CoreML::Specification::GLMRegressor_DoubleArray *)v12);
  }
  if (v6 == 10)
  {
    if (*(_DWORD *)(v3 + 36) == 10)
    {
      v7 = *(CoreML::Specification::Int64Range **)(v3 + 24);
    }
    else
    {
      CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor(v3);
      *(_DWORD *)(v3 + 36) = 10;
      v7 = (CoreML::Specification::Int64Range *)operator new();
      v9 = (CoreML::Specification::Int64Range *)CoreML::Specification::Int64Range::Int64Range(v7);
      *(_QWORD *)(v3 + 24) = v7;
      if (*((_DWORD *)a2 + 9) != 10)
      {
        v10 = CoreML::Specification::Int64Range::default_instance(v9);
        return CoreML::Specification::ReverseSeqLayerParams::MergeFrom((std::string *)v7, (const CoreML::Specification::ReverseSeqLayerParams *)v10);
      }
    }
    v10 = (uint64_t *)*((_QWORD *)a2 + 3);
    return CoreML::Specification::ReverseSeqLayerParams::MergeFrom((std::string *)v7, (const CoreML::Specification::ReverseSeqLayerParams *)v10);
  }
  return this;
}

void sub_2184AEA24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64Parameter::IsInitialized(CoreML::Specification::Int64Parameter *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Int64Parameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64Parameter");
}

CoreML::Specification::DoubleParameter *CoreML::Specification::DoubleParameter::DoubleParameter(CoreML::Specification::DoubleParameter *this)
{
  *(_QWORD *)this = &off_24D9445A8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_)
    CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_2184AEACC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DoubleParameter::~DoubleParameter(CoreML::Specification::DoubleParameter *this)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D9445A8;
  v2 = *((_DWORD *)this + 9);
  if (v2)
  {
    if (v2 == 10)
    {
      v3 = *((_QWORD *)this + 3);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    *((_DWORD *)this + 9) = 0;
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::DoubleParameter::~DoubleParameter(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::DoubleParameter *CoreML::Specification::DoubleParameter::New(CoreML::Specification::DoubleParameter *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::DoubleParameter *v3;

  v3 = (CoreML::Specification::DoubleParameter *)operator new();
  CoreML::Specification::DoubleParameter::DoubleParameter(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::DoubleParameter>(a2, v3);
  return v3;
}

void sub_2184AEBB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DoubleParameter>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleParameter>);
  return result;
}

uint64_t CoreML::Specification::DoubleParameter::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  *(_QWORD *)(this + 16) = 0;
  if (*(_DWORD *)(this + 36) == 10)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::DoubleParameter::MergePartialFromCodedStream(CoreML::Specification::DoubleParameter *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t *v10;
  unint64_t v11;
  CoreML::Specification::DoubleRange *v12;
  BOOL v13;
  char *v14;
  int VarintSizeAsIntFallback;
  unint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t result;
  unint64_t v20;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 < a2[1])
          break;
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0)
          goto LABEL_7;
LABEL_19:
        if ((_DWORD)v7)
          v13 = (v7 & 7) == 4;
        else
          v13 = 1;
        if (v13)
          return 1;
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_19;
LABEL_7:
      if (v7 >> 3 == 10)
        break;
      if (v7 >> 3 != 1 || v7 != 9)
        goto LABEL_19;
      v20 = 0;
      v10 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v20);
        if (!(_DWORD)result)
          return result;
        v11 = v20;
      }
      else
      {
        v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_QWORD *)this + 2) = v11;
    }
    if (v7 != 82)
      goto LABEL_19;
    if (*((_DWORD *)this + 9) == 10)
    {
      v12 = (CoreML::Specification::DoubleRange *)*((_QWORD *)this + 3);
    }
    else
    {
      *((_DWORD *)this + 9) = 10;
      v12 = (CoreML::Specification::DoubleRange *)operator new();
      CoreML::Specification::DoubleRange::DoubleRange(v12);
      *((_QWORD *)this + 3) = v12;
    }
    v14 = *a2;
    if (*a2 >= a2[1] || *v14 < 0)
    {
      VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (VarintSizeAsIntFallback < 0)
        return 0;
    }
    else
    {
      VarintSizeAsIntFallback = *v14;
      *a2 = v14 + 1;
    }
    v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
    if ((v16 & 0x8000000000000000) != 0)
      break;
    v18 = v16;
    result = CoreML::Specification::DoubleRange::MergePartialFromCodedStream(v12, a2, v17);
    if (!(_DWORD)result)
      return result;
  }
  while (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18));
  return 0;
}

void sub_2184AEDFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DoubleParameter::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  double v6;

  v5 = this;
  v6 = *(double *)(this + 16);
  if (v6 != 0.0)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v6, a3);
  if (*(_DWORD *)(v5 + 36) == 10)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, *(_QWORD *)(v5 + 24), a2, a4);
  return this;
}

uint64_t CoreML::Specification::DoubleParameter::ByteSizeLong(CoreML::Specification::DoubleParameter *this)
{
  uint64_t v2;
  uint64_t v3;

  if (*((double *)this + 2) == 0.0)
    v2 = 0;
  else
    v2 = 9;
  if (*((_DWORD *)this + 9) == 10)
  {
    v3 = CoreML::Specification::DoubleRange::ByteSizeLong(*((CoreML::Specification::DoubleRange **)this + 3));
    v2 += v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 8) = v2;
  return v2;
}

std::string *CoreML::Specification::DoubleParameter::MergeFrom(std::string *this, const CoreML::Specification::DoubleParameter *a2)
{
  std::string *v3;
  uint64_t v4;
  double v5;
  CoreML::Specification::DoubleRange *data;
  CoreML::Specification::DoubleRange *v7;
  uint64_t *v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((double *)a2 + 2);
  if (v5 != 0.0)
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  if (*((_DWORD *)a2 + 9) == 10)
  {
    if (HIDWORD(v3[1].__r_.__value_.__r.__words[1]) == 10)
    {
      data = (CoreML::Specification::DoubleRange *)v3[1].__r_.__value_.__l.__data_;
    }
    else
    {
      HIDWORD(v3[1].__r_.__value_.__r.__words[1]) = 10;
      data = (CoreML::Specification::DoubleRange *)operator new();
      v7 = (CoreML::Specification::DoubleRange *)CoreML::Specification::DoubleRange::DoubleRange(data);
      v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      if (*((_DWORD *)a2 + 9) != 10)
      {
        v8 = CoreML::Specification::DoubleRange::default_instance(v7);
        return CoreML::Specification::SigmoidKernel::MergeFrom((std::string *)data, (const CoreML::Specification::SigmoidKernel *)v8);
      }
    }
    v8 = (uint64_t *)*((_QWORD *)a2 + 3);
    return CoreML::Specification::SigmoidKernel::MergeFrom((std::string *)data, (const CoreML::Specification::SigmoidKernel *)v8);
  }
  return this;
}

void sub_2184AEFB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DoubleParameter::IsInitialized(CoreML::Specification::DoubleParameter *this)
{
  return 1;
}

_QWORD *CoreML::Specification::DoubleParameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DoubleParameter");
}

CoreML::Specification::StringParameter *CoreML::Specification::StringParameter::StringParameter(CoreML::Specification::StringParameter *this)
{
  *(_QWORD *)this = &off_24D944640;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::StringParameter *)&CoreML::Specification::_StringParameter_default_instance_)
    CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_2184AF048(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::StringParameter *CoreML::Specification::StringParameter::StringParameter(CoreML::Specification::StringParameter *this, const CoreML::Specification::StringParameter *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24D944640;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  return this;
}

void sub_2184AF0F0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::StringParameter::~StringParameter(CoreML::Specification::StringParameter *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D944640;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::V5::Value_FileValue::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D944640;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::V5::Value_FileValue::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::StringParameter *CoreML::Specification::StringParameter::New(CoreML::Specification::StringParameter *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::StringParameter *v3;

  v3 = (CoreML::Specification::StringParameter *)operator new();
  CoreML::Specification::StringParameter::StringParameter(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::StringParameter>(a2, v3);
  return v3;
}

void sub_2184AF1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::StringParameter>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringParameter>);
  return result;
}

uint64_t CoreML::Specification::StringParameter::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  return this;
}

BOOL CoreML::Specification::StringParameter::MergePartialFromCodedStream(CoreML::Specification::StringParameter *this, char **a2, unsigned int a3)
{
  std::string **v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  std::string *v11;
  _BOOL8 result;
  std::string *v13;
  const char *size;

  v4 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *v4;
      if (*v4 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v11 = *v4;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v11);
      if (!result)
        return result;
      v13 = *v4;
      if (SHIBYTE((*v4)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = (std::string *)v13->__r_.__value_.__r.__words[0];
        size = (const char *)(*v4)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v4)->__r_.__value_.__r.__words[2]);
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v13, size, 0, (uint64_t)"CoreML.Specification.StringParameter.defaultValue"))return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::StringParameter::SerializeWithCachedSizes(CoreML::Specification::StringParameter *this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t result;
  const char *v5;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v5 = *(const char **)(result + 8);
    if (!v5)
      return result;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  v5 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v5, 1, (uint64_t)"CoreML.Specification.StringParameter.defaultValue");
    return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 2), a2);
  }
  return result;
}

uint64_t CoreML::Specification::StringParameter::ByteSizeLong(CoreML::Specification::StringParameter *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  *((_DWORD *)this + 6) = v4;
  return v4;
}

uint64_t CoreML::Specification::StringParameter::IsInitialized(CoreML::Specification::StringParameter *this)
{
  return 1;
}

_QWORD *CoreML::Specification::StringParameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringParameter");
}

CoreML::Specification::BoolParameter *CoreML::Specification::BoolParameter::BoolParameter(CoreML::Specification::BoolParameter *this)
{
  *(_QWORD *)this = &off_24D9446D8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::BoolParameter *)&CoreML::Specification::_BoolParameter_default_instance_)
    CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(this);
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  return this;
}

void sub_2184AF4A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BoolParameter::~BoolParameter(CoreML::Specification::BoolParameter *this)
{
  *(_QWORD *)this = &off_24D9446D8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D9446D8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::BoolParameter *CoreML::Specification::BoolParameter::New(CoreML::Specification::BoolParameter *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::BoolParameter *v3;

  v3 = (CoreML::Specification::BoolParameter *)operator new();
  CoreML::Specification::BoolParameter::BoolParameter(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::BoolParameter>(a2, v3);
  return v3;
}

void sub_2184AF580(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::BoolParameter>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BoolParameter>);
  return result;
}

uint64_t CoreML::Specification::BoolParameter::Clear(uint64_t this)
{
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::BoolParameter::MergePartialFromCodedStream(CoreML::Specification::BoolParameter *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  unint64_t Varint64Fallback;
  char v13;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v13 & 1) == 0)
          return 0;
      }
      else
      {
        Varint64Fallback = *v11;
        *a2 = v11 + 1;
      }
      *((_BYTE *)this + 16) = Varint64Fallback != 0;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::BoolParameter::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_BYTE *)(this + 16))
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(1, 1u, a2, a4);
  return this;
}

uint64_t CoreML::Specification::BoolParameter::ByteSizeLong(CoreML::Specification::BoolParameter *this)
{
  uint64_t v1;

  v1 = 2 * *((unsigned __int8 *)this + 16);
  *((_DWORD *)this + 5) = v1;
  return v1;
}

std::string *CoreML::Specification::BoolParameter::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    v3->__r_.__value_.__s.__data_[16] = 1;
  return this;
}

uint64_t CoreML::Specification::BoolParameter::IsInitialized(CoreML::Specification::BoolParameter *this)
{
  return 1;
}

_QWORD *CoreML::Specification::BoolParameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BoolParameter");
}

CoreML::Specification::Int64Parameter *CoreML::Specification::Int64Parameter::New(CoreML::Specification::Int64Parameter *this)
{
  return CoreML::Specification::Int64Parameter::New(this, 0);
}

CoreML::Specification::DoubleParameter *CoreML::Specification::DoubleParameter::New(CoreML::Specification::DoubleParameter *this)
{
  return CoreML::Specification::DoubleParameter::New(this, 0);
}

CoreML::Specification::StringParameter *CoreML::Specification::StringParameter::New(CoreML::Specification::StringParameter *this)
{
  return CoreML::Specification::StringParameter::New(this, 0);
}

CoreML::Specification::BoolParameter *CoreML::Specification::BoolParameter::New(CoreML::Specification::BoolParameter *this)
{
  return CoreML::Specification::BoolParameter::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Parameter>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleParameter>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringParameter>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BoolParameter>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_Parameters_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_transform_to_flat_dict_extensions_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184AFB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_22_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_transform_to_flat_dictionary_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D9447D0;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D944850;
  v59 = v58;
  qword_254FF4B48 = 0;
  qword_254FF4B50 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4B48 = turi::transform_utils::ptb_filters;
  qword_254FF4B50 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4B48 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4B50, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184B0120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4B48 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184B0324()
{
  JUMPOUT(0x2184B0280);
}

void sub_2184B0334()
{
  JUMPOUT(0x2184B0290);
}

void sub_2184B0344()
{
  JUMPOUT(0x2184B02A0);
}

void sub_2184B0354()
{
  JUMPOUT(0x2184B02B0);
}

void sub_2184B0364()
{
  JUMPOUT(0x2184B031CLL);
}

void sub_2184B0500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_26_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_word_counter_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D9448D0;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D944950;
  v59 = v58;
  qword_254FF4B70 = 0;
  qword_254FF4B78 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4B70 = turi::transform_utils::ptb_filters;
  qword_254FF4B78 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4B70 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4B78, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184B0C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4B70 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184B0E68()
{
  JUMPOUT(0x2184B0DC4);
}

void sub_2184B0E78()
{
  JUMPOUT(0x2184B0DD4);
}

void sub_2184B0E88()
{
  JUMPOUT(0x2184B0DE4);
}

void sub_2184B0E98()
{
  JUMPOUT(0x2184B0DF4);
}

void sub_2184B0EA8()
{
  JUMPOUT(0x2184B0E60);
}

void sub_2184B1200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_34_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_word_trimmer_cpp()
{
  void **v0;
  std::string::size_type v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  unsigned int *v32;
  unsigned int *v33[2];
  unsigned int *v34;
  void *v35[2];
  unsigned __int8 v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int *v50[2];
  unsigned int *v51[3];
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  _QWORD v55[4];
  unsigned int *v56;
  unsigned int *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v43, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v41, "([^\\w\\s])|");
  if ((v42 & 0x80u) == 0)
    v0 = v41;
  else
    v0 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v1 = v42;
  else
    v1 = (std::string::size_type)v41[1];
  v2 = std::string::append(&v43, (const std::string::value_type *)v0, v1);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, "(\\b[^\\w\\s]+)|");
  if ((v40 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = (std::string::size_type)v39[1];
  v6 = std::string::append(&v44, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v37, "([\\w]([^\\s]*[\\w])?)|");
  if ((v38 & 0x80u) == 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v9 = v38;
  else
    v9 = (std::string::size_type)v37[1];
  v10 = std::string::append(&v45, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "([^\\w\\s]+\\b)");
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v13 = v36;
  else
    v13 = (std::string::size_type)v35[1];
  v14 = std::string::append(&v46, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48 = v14->__r_.__value_.__r.__words[2];
  v47 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, &v47, 0);
  v16 = v49;
  v50[1] = v49;
  v51[0] = v50[0];
  if (v50[0])
  {
    v17 = v50[0] + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v53 = v16;
    v54 = v51[0];
    if (v51[0])
    {
      v19 = v51[0] + 2;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v53 = v49;
    v54 = 0;
  }
  v55[0] = &off_24D9449D0;
  v55[3] = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "([nN]?'\\w*)|([^\\s']*[^nN\\s'])");
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>((uint64_t *)&v32, __p, 0);
  v21 = v32;
  v33[1] = v32;
  v34 = v33[0];
  if (v33[0])
  {
    v22 = v33[0] + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v56 = v21;
    v57 = v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v56 = v32;
    v57 = 0;
  }
  v58[0] = &off_24D944A50;
  v59 = v58;
  qword_254FF4B98 = 0;
  qword_254FF4BA0 = 0;
  turi::transform_utils::ptb_filters = 0;
  v51[2] = (unsigned int *)&turi::transform_utils::ptb_filters;
  v52 = 0;
  turi::transform_utils::ptb_filters = (uint64_t)operator new(0x60uLL);
  qword_254FF4B98 = turi::transform_utils::ptb_filters;
  qword_254FF4BA0 = turi::transform_utils::ptb_filters + 96;
  v26 = 0;
  qword_254FF4B98 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>((uint64_t)&qword_254FF4BA0, &v53, &v60, (_QWORD *)turi::transform_utils::ptb_filters);
  do
  {
    v27 = (&v59)[v26];
    if (&v58[v26] == v27)
    {
      v27 = &v58[v26];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_47;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_47:
    boost::detail::shared_count::~shared_count((unsigned int **)&v58[v26 - 1]);
    v26 -= 6;
  }
  while (v26 != -12);
  boost::detail::shared_count::~shared_count(&v34);
  boost::detail::shared_count::~shared_count(v33);
  if (v31 < 0)
    operator delete(__p[0]);
  boost::detail::shared_count::~shared_count(v51);
  boost::detail::shared_count::~shared_count(v50);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if ((char)v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::~vector[abi:ne180100], &turi::transform_utils::ptb_filters, &dword_217E69000);
}

void sub_2184B17A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  unsigned int **v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;

  qword_254FF4B98 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  v80 = 0;
  v81 = v78 - 184;
  while (1)
  {
    v82 = *(_QWORD **)(v81 + v80 + 88);
    if ((_QWORD *)(v81 + v80 + 64) == v82)
      break;
    if (v82)
    {
      v83 = 5;
LABEL_6:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    boost::detail::shared_count::~shared_count((unsigned int **)(v81 + v80 + 56));
    v80 -= 48;
    if (v80 == -96)
    {
      boost::detail::shared_count::~shared_count(v76);
      boost::detail::shared_count::~shared_count(v75);
      if (a15 < 0)
        operator delete(__p);
      boost::detail::shared_count::~shared_count(v74);
      boost::detail::shared_count::~shared_count(v73);
      if (a73 < 0)
        operator delete(a72);
      if (a26 < 0)
        operator delete(a21);
      if (a70 < 0)
        operator delete(a65);
      if (a32 < 0)
        operator delete(a27);
      if (a63 < 0)
        operator delete(a58);
      if (a38 < 0)
        operator delete(a33);
      if (a56 < 0)
        operator delete(a51);
      if (a44 < 0)
        operator delete(a39);
      if (a50 < 0)
        operator delete(a45);
      _Unwind_Resume(a1);
    }
  }
  v82 = (_QWORD *)(v81 + v80 + 64);
  v83 = 4;
  goto LABEL_6;
}

void sub_2184B19AC()
{
  JUMPOUT(0x2184B1908);
}

void sub_2184B19BC()
{
  JUMPOUT(0x2184B1918);
}

void sub_2184B19CC()
{
  JUMPOUT(0x2184B1928);
}

void sub_2184B19DC()
{
  JUMPOUT(0x2184B1938);
}

void sub_2184B19EC()
{
  JUMPOUT(0x2184B19A4);
}

void std::vector<unsigned long>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void sub_2184B1C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::atomic<unsigned long>>::vector(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (_QWORD *)a1[1];
    v5 = &v4[a2];
    v6 = 8 * a2;
    do
    {
      *v4++ = 0;
      v6 -= 8;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_2184B1D24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void __cxx_global_var_init_22_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_connected_component_sgraph_cpp()
{
  uint64_t i;
  const void *v2[3];
  _QWORD v3[4];

  v3[3] = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0)
      operator delete((void *)v2[i + 3]);
  }
  __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::connected_component::COMPONENT_ID_COLUMN, "component_id");
  return __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::connected_component::COMPONENT_ID_COLUMN, &dword_217E69000);
}

void sub_2184B1F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0)
      operator delete(*(void **)(v15 + v17 + 24));
    v17 -= 24;
    if (v17 == -48)
      _Unwind_Resume(exception_object);
  }
}

double CoreML::Specification::protobuf_NearestNeighbors_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_NearestNeighbors_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;
  CoreML::Specification::protobuf_Parameters_2eproto *v6;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/NearestNeighbors.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(v6);
  qword_254FFB3A0 = 0;
  unk_254FFB3A8 = 0;
  CoreML::Specification::_KNearestNeighborsClassifier_default_instance_ = (uint64_t)&off_24D944AD0;
  unk_254FFB370 = 0;
  byte_254FFB3B0 = 1;
  CoreML::Specification::_NearestNeighborsIndex_default_instance_ = (uint64_t)&off_24D944B68;
  dword_254FFB430 = 0;
  qword_254FFB428 = 0;
  result = 0.0;
  unk_254FFB3F0 = 0u;
  unk_254FFB400 = 0u;
  dword_254FFB410 = 0;
  byte_254FFB438 = 1;
  CoreML::Specification::_UniformWeighting_default_instance_ = (uint64_t)&off_24D944C00;
  qword_254FFB460 = 0;
  dword_254FFB468 = 0;
  byte_254FFB470 = 1;
  CoreML::Specification::_InverseDistanceWeighting_default_instance_ = (uint64_t)&off_24D944C98;
  qword_254FFB480 = 0;
  dword_254FFB488 = 0;
  byte_254FFB490 = 1;
  CoreML::Specification::_LinearIndex_default_instance_ = (uint64_t)&off_24D944D30;
  qword_254FFB4A0 = 0;
  dword_254FFB4A8 = 0;
  byte_254FFB4B0 = 1;
  CoreML::Specification::_SingleKdTreeIndex_default_instance_ = (uint64_t)&off_24D944DC8;
  qword_254FFB4C0 = 0;
  qword_254FFB4C8 = 0;
  byte_254FFB4D0 = 1;
  CoreML::Specification::_SquaredEuclideanDistance_default_instance_ = (uint64_t)&off_24D944E60;
  qword_254FFB4E0 = 0;
  dword_254FFB4E8 = 0;
  byte_254FFB4F0 = 1;
  qword_254FFB378 = (uint64_t)&CoreML::Specification::_NearestNeighborsIndex_default_instance_;
  unk_254FFB380 = &CoreML::Specification::_Int64Parameter_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(CoreML::Specification::protobuf_NearestNeighbors_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_NearestNeighbors_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2184B20F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::KNearestNeighborsClassifier *CoreML::Specification::KNearestNeighborsClassifier::KNearestNeighborsClassifier(CoreML::Specification::KNearestNeighborsClassifier *this)
{
  *(_QWORD *)this = &off_24D944AD0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::KNearestNeighborsClassifier *)&CoreML::Specification::_KNearestNeighborsClassifier_default_instance_)
    CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_2184B2158(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::KNearestNeighborsClassifier::~KNearestNeighborsClassifier(CoreML::Specification::KNearestNeighborsClassifier *this)
{
  *(_QWORD *)this = &off_24D944AD0;
  CoreML::Specification::KNearestNeighborsClassifier::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::KNearestNeighborsClassifier::~KNearestNeighborsClassifier(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::KNearestNeighborsClassifier::SharedDtor(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)this;
  if (this != &CoreML::Specification::_KNearestNeighborsClassifier_default_instance_)
  {
    v2 = this[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    this = *(uint64_t **)(v1 + 24);
    if (this)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  if (*(_DWORD *)(v1 + 60))
    this = (uint64_t *)CoreML::Specification::KNearestNeighborsClassifier::clear_ClassLabels(v1);
  if (*(_DWORD *)(v1 + 64))
    this = (uint64_t *)CoreML::Specification::KNearestNeighborsClassifier::clear_DefaultClassLabel(v1);
  if (*(_DWORD *)(v1 + 68))
    return (uint64_t *)CoreML::Specification::KNearestNeighborsClassifier::clear_WeightingScheme(v1);
  return this;
}

uint64_t CoreML::Specification::KNearestNeighborsClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 60);
  if (v2 == 101 || v2 == 100)
  {
    this = *(_QWORD *)(this + 32);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 60) = 0;
  return this;
}

uint64_t CoreML::Specification::KNearestNeighborsClassifier::clear_DefaultClassLabel(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  if (*(_DWORD *)(this + 64) == 110)
  {
    v2 = *(_QWORD *)(this + 40);
    if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
    {
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      this = MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 64) = 0;
  return this;
}

uint64_t CoreML::Specification::KNearestNeighborsClassifier::clear_WeightingScheme(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 68);
  if (v2 == 210 || v2 == 200)
  {
    this = *(_QWORD *)(this + 48);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 68) = 0;
  return this;
}

uint64_t *CoreML::Specification::KNearestNeighborsClassifier::default_instance(CoreML::Specification::KNearestNeighborsClassifier *this)
{
  CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(this);
  return &CoreML::Specification::_KNearestNeighborsClassifier_default_instance_;
}

CoreML::Specification::KNearestNeighborsClassifier *CoreML::Specification::KNearestNeighborsClassifier::New(CoreML::Specification::KNearestNeighborsClassifier *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::KNearestNeighborsClassifier *v3;

  v3 = (CoreML::Specification::KNearestNeighborsClassifier *)operator new();
  CoreML::Specification::KNearestNeighborsClassifier::KNearestNeighborsClassifier(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::KNearestNeighborsClassifier>(a2, v3);
  return v3;
}

void sub_2184B23C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A3C40127B4136);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::KNearestNeighborsClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::KNearestNeighborsClassifier>);
  return result;
}

uint64_t CoreML::Specification::KNearestNeighborsClassifier::Clear(CoreML::Specification::KNearestNeighborsClassifier *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  CoreML::Specification::KNearestNeighborsClassifier::clear_ClassLabels((uint64_t)this);
  CoreML::Specification::KNearestNeighborsClassifier::clear_DefaultClassLabel((uint64_t)this);
  return CoreML::Specification::KNearestNeighborsClassifier::clear_WeightingScheme((uint64_t)this);
}

uint64_t CoreML::Specification::KNearestNeighborsClassifier::MergePartialFromCodedStream(CoreML::Specification::KNearestNeighborsClassifier *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int TagFallback;
  unsigned int v14;
  CoreML::Specification::Int64Parameter *v16;
  char *v17;
  int v18;
  char *v19;
  unint64_t Varint64Fallback;
  CoreML::Specification::Int64Vector *v21;
  CoreML::Specification::InverseDistanceWeighting *v22;
  char *v23;
  int v24;
  CoreML::Specification::NearestNeighborsIndex *v25;
  char *v26;
  int v27;
  std::string *v28;
  CoreML::Specification::StringVector *v29;
  CoreML::Specification::UniformWeighting *v30;
  char *v31;
  int VarintSizeAsIntFallback;
  char *v33;
  int v34;
  uint64_t result;
  int v36;
  std::string *v37;
  std::string *v38;
  const char *size;
  char *v40;
  int v41;
  char v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  _tc_google::protobuf::io::CodedInputStream *v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;

  v5 = (std::string **)((char *)this + 40);
  while (1)
  {
    while (1)
    {
      v6 = *(unsigned __int8 **)a2;
      v7 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v7)
      {
        v9 = 0;
      }
      else
      {
        v8 = v6 + 1;
        v9 = *v6;
        if ((char)*v6 >= 1)
        {
          *(_QWORD *)a2 = v8;
          v10 = v9 | 0x100000000;
          if ((v10 & 0x100000000) == 0)
            goto LABEL_9;
          goto LABEL_17;
        }
        if ((unint64_t)v8 < v7)
        {
          v11 = *v8;
          if ((v9 & ~v11) >= 0x80)
          {
            *(_QWORD *)a2 = v6 + 2;
            v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
            goto LABEL_17;
          }
        }
      }
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
      v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v10 & 0x100000000) == 0)
        goto LABEL_9;
LABEL_17:
      v14 = v10 >> 3;
      if (v10 >> 3 <= 0x6D)
        break;
      if (v10 >> 3 > 0xC7)
      {
        if (v14 == 200)
        {
          if (v10 != 66)
            goto LABEL_9;
          if (*((_DWORD *)this + 17) != 200)
          {
            CoreML::Specification::KNearestNeighborsClassifier::clear_WeightingScheme((uint64_t)this);
            *((_DWORD *)this + 17) = 200;
            v30 = (CoreML::Specification::UniformWeighting *)operator new();
            CoreML::Specification::UniformWeighting::UniformWeighting(v30);
            *((_QWORD *)this + 6) = v30;
          }
          v31 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v31 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v31;
            *(_QWORD *)a2 = v31 + 1;
          }
          v51 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v51 & 0x8000000000000000) != 0)
            return 0;
          v50 = v51;
          result = CoreML::Specification::UniformWeighting::MergePartialFromCodedStream((CoreML::Specification::UniformWeighting *)v51, (char **)a2, v52);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          if (v14 != 210 || v10 != 146)
            goto LABEL_9;
          if (*((_DWORD *)this + 17) != 210)
          {
            CoreML::Specification::KNearestNeighborsClassifier::clear_WeightingScheme((uint64_t)this);
            *((_DWORD *)this + 17) = 210;
            v22 = (CoreML::Specification::InverseDistanceWeighting *)operator new();
            CoreML::Specification::InverseDistanceWeighting::InverseDistanceWeighting(v22);
            *((_QWORD *)this + 6) = v22;
          }
          v23 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
          {
            v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v24 < 0)
              return 0;
          }
          else
          {
            v24 = *v23;
            *(_QWORD *)a2 = v23 + 1;
          }
          v48 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v24);
          if ((v48 & 0x8000000000000000) != 0)
            return 0;
          v50 = v48;
          result = CoreML::Specification::InverseDistanceWeighting::MergePartialFromCodedStream((CoreML::Specification::InverseDistanceWeighting *)v48, (char **)a2, v49);
          if (!(_DWORD)result)
            return result;
        }
        v53 = a2;
        v54 = v50;
LABEL_114:
        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v53, v54))
          return 0;
      }
      else if (v14 == 110)
      {
        if (v10 != 114)
          goto LABEL_9;
        if (*((_DWORD *)this + 16) != 110)
        {
          CoreML::Specification::KNearestNeighborsClassifier::clear_DefaultClassLabel((uint64_t)this);
          *((_DWORD *)this + 16) = 110;
          *((_QWORD *)this + 5) = &_tc_google::protobuf::internal::fixed_address_empty_string;
LABEL_74:
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v28 = *v5;
          goto LABEL_75;
        }
        v28 = *v5;
        if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_74;
LABEL_75:
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v28);
        if (!(_DWORD)result)
          return result;
        v36 = *((_DWORD *)this + 16);
        v37 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
        if (v36 == 110)
          v37 = *v5;
        if (SHIBYTE(v37->__r_.__value_.__r.__words[2]) < 0)
          v37 = (std::string *)v37->__r_.__value_.__r.__words[0];
        v38 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
        if (v36 == 110)
          v38 = *v5;
        if (SHIBYTE(v38->__r_.__value_.__r.__words[2]) < 0)
          size = (const char *)v38->__r_.__value_.__l.__size_;
        else
          size = (const char *)HIBYTE(v38->__r_.__value_.__r.__words[2]);
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v37, size, 0, (uint64_t)"CoreML.Specification.KNearestNeighborsClassifier.defaultStringLabel"))return 0;
      }
      else
      {
        if (v14 != 111 || v10 != 120)
          goto LABEL_9;
        CoreML::Specification::KNearestNeighborsClassifier::clear_DefaultClassLabel((uint64_t)this);
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
        {
          Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v42 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v19;
          *(_QWORD *)a2 = v19 + 1;
        }
        *((_QWORD *)this + 5) = Varint64Fallback;
        *((_DWORD *)this + 16) = 111;
      }
    }
    if (v10 >> 3 > 0x63)
    {
      if (v14 == 100)
      {
        if (v10 != 34)
          goto LABEL_9;
        if (*((_DWORD *)this + 15) == 100)
        {
          v29 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::KNearestNeighborsClassifier::clear_ClassLabels((uint64_t)this);
          *((_DWORD *)this + 15) = 100;
          v29 = (CoreML::Specification::StringVector *)operator new();
          CoreML::Specification::StringVector::StringVector(v29);
          *((_QWORD *)this + 4) = v29;
        }
        v40 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v40 < 0)
        {
          v41 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v41 < 0)
            return 0;
        }
        else
        {
          v41 = *v40;
          *(_QWORD *)a2 = v40 + 1;
        }
        v57 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v41);
        if ((v57 & 0x8000000000000000) != 0)
          return 0;
        v45 = v57;
        result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v29, (char **)a2, v58);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v14 != 101 || v10 != 42)
          goto LABEL_9;
        if (*((_DWORD *)this + 15) == 101)
        {
          v21 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::KNearestNeighborsClassifier::clear_ClassLabels((uint64_t)this);
          *((_DWORD *)this + 15) = 101;
          v21 = (CoreML::Specification::Int64Vector *)operator new();
          CoreML::Specification::Int64Vector::Int64Vector(v21);
          *((_QWORD *)this + 4) = v21;
        }
        v33 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v33 < 0)
        {
          v34 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v34 < 0)
            return 0;
        }
        else
        {
          v34 = *v33;
          *(_QWORD *)a2 = v33 + 1;
        }
        v55 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v34);
        if ((v55 & 0x8000000000000000) != 0)
          return 0;
        v45 = v55;
        result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v21, (char **)a2, v56);
        if (!(_DWORD)result)
          return result;
      }
      goto LABEL_113;
    }
    if (v14 == 1)
    {
      if (v10 != 10)
        goto LABEL_9;
      v25 = (CoreML::Specification::NearestNeighborsIndex *)*((_QWORD *)this + 2);
      if (!v25)
      {
        v25 = (CoreML::Specification::NearestNeighborsIndex *)operator new();
        CoreML::Specification::NearestNeighborsIndex::NearestNeighborsIndex(v25);
        *((_QWORD *)this + 2) = v25;
      }
      v26 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v26 < 0)
      {
        v27 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v27 < 0)
          return 0;
      }
      else
      {
        v27 = *v26;
        *(_QWORD *)a2 = v26 + 1;
      }
      v46 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v27);
      if ((v46 & 0x8000000000000000) != 0)
        return 0;
      v45 = v46;
      result = CoreML::Specification::NearestNeighborsIndex::MergePartialFromCodedStream(v25, a2, v47);
      if (!(_DWORD)result)
        return result;
      goto LABEL_113;
    }
    if (v14 == 3 && v10 == 26)
    {
      v16 = (CoreML::Specification::Int64Parameter *)*((_QWORD *)this + 3);
      if (!v16)
      {
        v16 = (CoreML::Specification::Int64Parameter *)operator new();
        CoreML::Specification::Int64Parameter::Int64Parameter(v16);
        *((_QWORD *)this + 3) = v16;
      }
      v17 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
      {
        v18 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v18 < 0)
          return 0;
      }
      else
      {
        v18 = *v17;
        *(_QWORD *)a2 = v17 + 1;
      }
      v43 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v18);
      if ((v43 & 0x8000000000000000) != 0)
        return 0;
      v45 = v43;
      result = CoreML::Specification::Int64Parameter::MergePartialFromCodedStream(v16, (char **)a2, v44);
      if (!(_DWORD)result)
        return result;
LABEL_113:
      v53 = a2;
      v54 = v45;
      goto LABEL_114;
    }
LABEL_9:
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)return 0;
  }
}

void sub_2184B2A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4050F267CCLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::KNearestNeighborsClassifier::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  const char *v11;
  uint64_t *v12;
  int v13;

  v5 = this;
  if (this != &CoreML::Specification::_KNearestNeighborsClassifier_default_instance_)
  {
    v6 = this[2];
    if (v6)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  }
  v8 = *((_DWORD *)v5 + 15);
  if (v8 == 100)
  {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, v5[4], a2, a4);
    v8 = *((_DWORD *)v5 + 15);
  }
  if (v8 == 101)
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, v5[4], a2, a4);
  v9 = *((_DWORD *)v5 + 16);
  if (v9 == 110)
  {
    v10 = (unsigned __int8 *)v5[5];
    if ((char)v10[23] < 0)
    {
      v10 = *(unsigned __int8 **)v10;
      v11 = *(const char **)(v5[5] + 8);
    }
    else
    {
      v11 = (const char *)v10[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v10, v11, 1, (uint64_t)"CoreML.Specification.KNearestNeighborsClassifier.defaultStringLabel");
    if (*((_DWORD *)v5 + 16) == 110)
      v12 = (uint64_t *)v5[5];
    else
      v12 = &_tc_google::protobuf::internal::fixed_address_empty_string;
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(110, (uint64_t)v12, a2);
    v9 = *((_DWORD *)v5 + 16);
  }
  if (v9 == 111)
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteInt64(111, v5[5], a2, a4);
  v13 = *((_DWORD *)v5 + 17);
  if (v13 == 200)
  {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC8, v5[6], a2, a4);
    v13 = *((_DWORD *)v5 + 17);
  }
  if (v13 == 210)
    return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xD2, v5[6], a2, a4);
  return this;
}

uint64_t CoreML::Specification::KNearestNeighborsClassifier::ByteSizeLong(CoreML::Specification::KNearestNeighborsClassifier *this)
{
  CoreML::Specification::NearestNeighborsIndex *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::Int64Parameter *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (this == (CoreML::Specification::KNearestNeighborsClassifier *)&CoreML::Specification::_KNearestNeighborsClassifier_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::NearestNeighborsIndex *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::NearestNeighborsIndex::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::Int64Parameter *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = CoreML::Specification::Int64Parameter::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v7 = *((_DWORD *)this + 15);
  if (v7 == 101)
  {
    v8 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 4));
  }
  else
  {
    if (v7 != 100)
      goto LABEL_13;
    v8 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 4));
  }
  v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  v9 = *((_DWORD *)this + 16);
  if (v9 == 111)
  {
    v13 = v4 + ((9 * (__clz(*((_QWORD *)this + 5) | 1) ^ 0x3F) + 73) >> 6);
LABEL_19:
    v4 = v13 + 2;
    goto LABEL_20;
  }
  if (v9 == 110)
  {
    v10 = *((_QWORD *)this + 5);
    v11 = *(unsigned __int8 *)(v10 + 23);
    v12 = *(_QWORD *)(v10 + 8);
    if ((v11 & 0x80u) == 0)
      v12 = v11;
    v13 = v4 + v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
    goto LABEL_19;
  }
LABEL_20:
  v14 = *((_DWORD *)this + 17);
  if (v14 == 210 || v14 == 200)
  {
    *(_DWORD *)(*((_QWORD *)this + 6) + 16) = 0;
    v4 += 3;
  }
  *((_DWORD *)this + 14) = v4;
  return v4;
}

void CoreML::Specification::KNearestNeighborsClassifier::MergeFrom(CoreML::Specification::KNearestNeighborsClassifier *this, const CoreML::Specification::KNearestNeighborsClassifier *a2)
{
  uint64_t v4;
  const CoreML::Specification::NearestNeighborsIndex *v5;
  CoreML::Specification::NearestNeighborsIndex *v6;
  const CoreML::Specification::NearestNeighborsIndex *v7;
  const CoreML::Specification::Int64Parameter *v8;
  CoreML::Specification::Int64Parameter *v9;
  const CoreML::Specification::Int64Parameter *v10;
  int v11;
  CoreML::Specification::StringVector *v12;
  CoreML::Specification::Int64Vector *v13;
  CoreML::Specification::StringVector *v14;
  uint64_t *v15;
  CoreML::Specification::Int64Vector *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  CoreML::Specification::protobuf_NearestNeighbors_2eproto *v24;
  uint64_t *v25;
  uint64_t v26;
  CoreML::Specification::protobuf_NearestNeighbors_2eproto *v27;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::KNearestNeighborsClassifier *)&CoreML::Specification::_KNearestNeighborsClassifier_default_instance_)
  {
    v5 = (const CoreML::Specification::NearestNeighborsIndex *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::NearestNeighborsIndex *)*((_QWORD *)this + 2);
      if (!v6)
      {
        v6 = (CoreML::Specification::NearestNeighborsIndex *)operator new();
        CoreML::Specification::NearestNeighborsIndex::NearestNeighborsIndex(v6);
        *((_QWORD *)this + 2) = v6;
        v5 = (const CoreML::Specification::NearestNeighborsIndex *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::NearestNeighborsIndex *)&CoreML::Specification::_NearestNeighborsIndex_default_instance_;
      CoreML::Specification::NearestNeighborsIndex::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::Int64Parameter *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (CoreML::Specification::Int64Parameter *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (CoreML::Specification::Int64Parameter *)operator new();
        CoreML::Specification::Int64Parameter::Int64Parameter(v9);
        *((_QWORD *)this + 3) = v9;
        v8 = (const CoreML::Specification::Int64Parameter *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::Int64Parameter *)&CoreML::Specification::_Int64Parameter_default_instance_;
      CoreML::Specification::Int64Parameter::MergeFrom((std::string *)v9, v10);
    }
  }
  v11 = *((_DWORD *)a2 + 15);
  if (v11 != 101)
  {
    if (v11 != 100)
      goto LABEL_32;
    if (*((_DWORD *)this + 15) == 100)
    {
      v12 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 4);
    }
    else
    {
      CoreML::Specification::KNearestNeighborsClassifier::clear_ClassLabels((uint64_t)this);
      *((_DWORD *)this + 15) = 100;
      v12 = (CoreML::Specification::StringVector *)operator new();
      v14 = (CoreML::Specification::StringVector *)CoreML::Specification::StringVector::StringVector(v12);
      *((_QWORD *)this + 4) = v12;
      if (*((_DWORD *)a2 + 15) != 100)
      {
        v15 = CoreML::Specification::StringVector::default_instance(v14);
        goto LABEL_29;
      }
    }
    v15 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_29:
    CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v12, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v15);
    goto LABEL_32;
  }
  if (*((_DWORD *)this + 15) == 101)
  {
    v13 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 4);
  }
  else
  {
    CoreML::Specification::KNearestNeighborsClassifier::clear_ClassLabels((uint64_t)this);
    *((_DWORD *)this + 15) = 101;
    v13 = (CoreML::Specification::Int64Vector *)operator new();
    v16 = (CoreML::Specification::Int64Vector *)CoreML::Specification::Int64Vector::Int64Vector(v13);
    *((_QWORD *)this + 4) = v13;
    if (*((_DWORD *)a2 + 15) != 101)
    {
      v17 = CoreML::Specification::Int64Vector::default_instance(v16);
      goto LABEL_31;
    }
  }
  v17 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_31:
  CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v13, (const CoreML::Specification::GLMRegressor_DoubleArray *)v17);
LABEL_32:
  v18 = *((_DWORD *)a2 + 16);
  if (v18 == 111)
  {
    v21 = *((_QWORD *)a2 + 5);
    if (*((_DWORD *)this + 16) != 111)
    {
      CoreML::Specification::KNearestNeighborsClassifier::clear_DefaultClassLabel((uint64_t)this);
      *((_DWORD *)this + 16) = 111;
    }
    *((_QWORD *)this + 5) = v21;
  }
  else
  {
    if (v18 != 110)
      goto LABEL_42;
    v19 = *((_QWORD *)a2 + 5);
    if (*((_DWORD *)this + 16) == 110)
    {
      v20 = (std::string *)*((_QWORD *)this + 5);
      if (v20 != (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        std::string::operator=(v20, *((const std::string **)a2 + 5));
        goto LABEL_42;
      }
    }
    else
    {
      CoreML::Specification::KNearestNeighborsClassifier::clear_DefaultClassLabel((uint64_t)this);
      *((_DWORD *)this + 16) = 110;
      *((_QWORD *)this + 5) = &_tc_google::protobuf::internal::fixed_address_empty_string;
    }
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v19);
  }
LABEL_42:
  v22 = *((_DWORD *)a2 + 17);
  if (v22 != 210)
  {
    if (v22 != 200)
      return;
    if (*((_DWORD *)this + 17) != 200)
    {
      CoreML::Specification::KNearestNeighborsClassifier::clear_WeightingScheme((uint64_t)this);
      *((_DWORD *)this + 17) = 200;
      v23 = (uint64_t *)operator new();
      v24 = CoreML::Specification::UniformWeighting::UniformWeighting((CoreML::Specification::UniformWeighting *)v23);
      *((_QWORD *)this + 6) = v23;
      if (*((_DWORD *)a2 + 17) != 200)
      {
        CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(v24);
        v25 = &CoreML::Specification::_UniformWeighting_default_instance_;
        goto LABEL_50;
      }
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (*((_DWORD *)this + 17) == 210)
  {
LABEL_48:
    v23 = (uint64_t *)*((_QWORD *)this + 6);
LABEL_49:
    v25 = (uint64_t *)*((_QWORD *)a2 + 6);
    goto LABEL_50;
  }
  CoreML::Specification::KNearestNeighborsClassifier::clear_WeightingScheme((uint64_t)this);
  *((_DWORD *)this + 17) = 210;
  v23 = (uint64_t *)operator new();
  v27 = CoreML::Specification::InverseDistanceWeighting::InverseDistanceWeighting((CoreML::Specification::InverseDistanceWeighting *)v23);
  *((_QWORD *)this + 6) = v23;
  if (*((_DWORD *)a2 + 17) == 210)
    goto LABEL_49;
  CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(v27);
  v25 = &CoreML::Specification::_InverseDistanceWeighting_default_instance_;
LABEL_50:
  v26 = v25[1];
  if ((v26 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v23 + 1, v26 & 0xFFFFFFFFFFFFFFFELL);
}

void sub_2184B312C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NearestNeighborsIndex::MergeFrom(CoreML::Specification::NearestNeighborsIndex *this, const CoreML::Specification::NearestNeighborsIndex *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::V5::TensorValue_RepeatedFloats **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  CoreML::Specification::protobuf_NearestNeighbors_2eproto *v14;
  uint64_t *v15;
  CoreML::Specification::protobuf_NearestNeighbors_2eproto *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  CoreML::Specification::protobuf_NearestNeighbors_2eproto *v22;
  uint64_t *v23;
  uint64_t v24;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::V5::TensorValue_RepeatedFloats **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::NearestNeighborsIndex *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FloatVector>::TypeHandler>((uint64_t *)this + 2, (CoreML::Specification::V5::TensorValue_RepeatedFloats **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 10);
  if (v10)
    *((_DWORD *)this + 10) = v10;
  v11 = *((_DWORD *)a2 + 17);
  if (v11 != 110)
  {
    if (v11 != 100)
      goto LABEL_26;
    if (*((_DWORD *)this + 17) == 100)
    {
      v12 = (uint64_t *)*((_QWORD *)this + 6);
    }
    else
    {
      CoreML::Specification::NearestNeighborsIndex::clear_IndexType((uint64_t)this);
      *((_DWORD *)this + 17) = 100;
      v12 = (uint64_t *)operator new();
      v14 = CoreML::Specification::LinearIndex::LinearIndex((CoreML::Specification::LinearIndex *)v12);
      *((_QWORD *)this + 6) = v12;
      if (*((_DWORD *)a2 + 17) != 100)
      {
        CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(v14);
        v15 = &CoreML::Specification::_LinearIndex_default_instance_;
LABEL_19:
        v18 = v15[1];
        if ((v18 & 1) != 0)
          _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v12 + 1, v18 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_26;
      }
    }
    v15 = (uint64_t *)*((_QWORD *)a2 + 6);
    goto LABEL_19;
  }
  if (*((_DWORD *)this + 17) == 110)
  {
    v13 = *((_QWORD *)this + 6);
  }
  else
  {
    CoreML::Specification::NearestNeighborsIndex::clear_IndexType((uint64_t)this);
    *((_DWORD *)this + 17) = 110;
    v13 = operator new();
    v16 = CoreML::Specification::SingleKdTreeIndex::SingleKdTreeIndex((CoreML::Specification::SingleKdTreeIndex *)v13);
    *((_QWORD *)this + 6) = v13;
    if (*((_DWORD *)a2 + 17) != 110)
    {
      CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(v16);
      v17 = &CoreML::Specification::_SingleKdTreeIndex_default_instance_;
      goto LABEL_22;
    }
  }
  v17 = (uint64_t *)*((_QWORD *)a2 + 6);
LABEL_22:
  v19 = v17[1];
  if ((v19 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v13 + 8), v19 & 0xFFFFFFFFFFFFFFFELL);
  v20 = *((_DWORD *)v17 + 4);
  if (v20)
    *(_DWORD *)(v13 + 16) = v20;
LABEL_26:
  if (*((_DWORD *)a2 + 18) != 200)
    return;
  if (*((_DWORD *)this + 18) == 200)
  {
    v21 = (uint64_t *)*((_QWORD *)this + 7);
LABEL_30:
    v23 = (uint64_t *)*((_QWORD *)a2 + 7);
    goto LABEL_32;
  }
  *((_DWORD *)this + 18) = 200;
  v21 = (uint64_t *)operator new();
  v22 = CoreML::Specification::SquaredEuclideanDistance::SquaredEuclideanDistance((CoreML::Specification::SquaredEuclideanDistance *)v21);
  *((_QWORD *)this + 7) = v21;
  if (*((_DWORD *)a2 + 18) == 200)
    goto LABEL_30;
  CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(v22);
  v23 = &CoreML::Specification::_SquaredEuclideanDistance_default_instance_;
LABEL_32:
  v24 = v23[1];
  if ((v24 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v21 + 1, v24 & 0xFFFFFFFFFFFFFFFELL);
}

void sub_2184B33FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::KNearestNeighborsClassifier::IsInitialized(CoreML::Specification::KNearestNeighborsClassifier *this)
{
  return 1;
}

_QWORD *CoreML::Specification::KNearestNeighborsClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.KNearestNeighborsClassifier");
}

CoreML::Specification::NearestNeighborsIndex *CoreML::Specification::NearestNeighborsIndex::NearestNeighborsIndex(CoreML::Specification::NearestNeighborsIndex *this)
{
  *(_QWORD *)this = &off_24D944B68;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::NearestNeighborsIndex *)&CoreML::Specification::_NearestNeighborsIndex_default_instance_)
    CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_2184B34B8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NearestNeighborsIndex::~NearestNeighborsIndex(CoreML::Specification::NearestNeighborsIndex *this)
{
  *(_QWORD *)this = &off_24D944B68;
  CoreML::Specification::NearestNeighborsIndex::SharedDtor(this);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::NearestNeighborsIndex::~NearestNeighborsIndex(this);
  JUMPOUT(0x219A19A08);
}

_DWORD *CoreML::Specification::NearestNeighborsIndex::SharedDtor(_DWORD *this)
{
  _DWORD *v1;
  int v2;

  v1 = this;
  if (this[17])
    this = (_DWORD *)CoreML::Specification::NearestNeighborsIndex::clear_IndexType((uint64_t)this);
  v2 = v1[18];
  if (v2)
  {
    if (v2 == 200)
    {
      this = (_DWORD *)*((_QWORD *)v1 + 7);
      if (this)
        this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
    }
    v1[18] = 0;
  }
  return this;
}

uint64_t CoreML::Specification::NearestNeighborsIndex::clear_IndexType(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 68);
  if (v2 == 110 || v2 == 100)
  {
    this = *(_QWORD *)(this + 48);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 68) = 0;
  return this;
}

CoreML::Specification::NearestNeighborsIndex *CoreML::Specification::NearestNeighborsIndex::New(CoreML::Specification::NearestNeighborsIndex *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::NearestNeighborsIndex *v3;

  v3 = (CoreML::Specification::NearestNeighborsIndex *)operator new();
  CoreML::Specification::NearestNeighborsIndex::NearestNeighborsIndex(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::NearestNeighborsIndex>(a2, v3);
  return v3;
}

void sub_2184B3634(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4050F267CCLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NearestNeighborsIndex>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NearestNeighborsIndex>);
  return result;
}

uint64_t CoreML::Specification::NearestNeighborsIndex::Clear(CoreML::Specification::NearestNeighborsIndex *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::FloatVector::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  *((_DWORD *)this + 10) = 0;
  result = CoreML::Specification::NearestNeighborsIndex::clear_IndexType((uint64_t)this);
  if (*((_DWORD *)this + 18) == 200)
  {
    result = *((_QWORD *)this + 7);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  *((_DWORD *)this + 18) = 0;
  return result;
}

uint64_t CoreML::Specification::NearestNeighborsIndex::MergePartialFromCodedStream(CoreML::Specification::NearestNeighborsIndex *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  CoreML::Specification::SquaredEuclideanDistance *v13;
  char *v14;
  int v15;
  CoreML::Specification::FloatVector *v17;
  char *v18;
  int VarintSizeAsIntFallback;
  CoreML::Specification::LinearIndex *v20;
  char *v21;
  int v22;
  CoreML::Specification::SingleKdTreeIndex *v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t result;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  _tc_google::protobuf::io::CodedInputStream *v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int TagFallback;
  BOOL v42;
  uint64_t Varint32Fallback;

  v5 = (CoreML::Specification::NearestNeighborsIndex *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(unsigned __int8 **)a2;
        v7 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v7)
        {
          v9 = 0;
        }
        else
        {
          v8 = v6 + 1;
          v9 = *v6;
          if ((char)*v6 >= 1)
          {
            *(_QWORD *)a2 = v8;
            v10 = v9 | 0x100000000;
            if ((v10 & 0x100000000) == 0)
              goto LABEL_65;
            goto LABEL_9;
          }
          if ((unint64_t)v8 < v7)
          {
            v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(_QWORD *)a2 = v6 + 2;
              v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_9;
            }
          }
        }
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
        v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v10 & 0x100000000) == 0)
          goto LABEL_65;
LABEL_9:
        v12 = v10 >> 3;
        if (v10 >> 3 > 0x63)
          break;
        if (v12 != 1)
        {
          if (v12 != 2 || v10 != 18)
            goto LABEL_65;
          v17 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FloatVector>::TypeHandler>(v5);
          v18 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v18;
            *(_QWORD *)a2 = v18 + 1;
          }
          v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v28 & 0x8000000000000000) != 0)
            return 0;
          v30 = v28;
          result = CoreML::Specification::FloatVector::MergePartialFromCodedStream(v17, (char **)a2, v29);
          if (!(_DWORD)result)
            return result;
          goto LABEL_60;
        }
        if (v10 != 8)
          goto LABEL_65;
        v24 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          v25 = 0;
        }
        else
        {
          v25 = *v24;
          if ((*v24 & 0x80000000) == 0)
          {
            *(_QWORD *)a2 = v24 + 1;
            goto LABEL_73;
          }
        }
        Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v25);
        v25 = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
LABEL_73:
        *((_DWORD *)this + 10) = v25;
      }
      if (v12 != 100)
        break;
      if (v10 == 34)
      {
        if (*((_DWORD *)this + 17) != 100)
        {
          CoreML::Specification::NearestNeighborsIndex::clear_IndexType((uint64_t)this);
          *((_DWORD *)this + 17) = 100;
          v20 = (CoreML::Specification::LinearIndex *)operator new();
          CoreML::Specification::LinearIndex::LinearIndex(v20);
          *((_QWORD *)this + 6) = v20;
        }
        v21 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
        {
          v22 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v22 < 0)
            return 0;
        }
        else
        {
          v22 = *v21;
          *(_QWORD *)a2 = v21 + 1;
        }
        v35 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v22);
        if ((v35 & 0x8000000000000000) != 0)
          return 0;
        v34 = v35;
        result = CoreML::Specification::LinearIndex::MergePartialFromCodedStream((CoreML::Specification::LinearIndex *)v35, (char **)a2, v36);
        if (!(_DWORD)result)
          return result;
        goto LABEL_56;
      }
LABEL_65:
      if ((_DWORD)v10)
        v42 = (v10 & 7) == 4;
      else
        v42 = 1;
      if (v42)
        return 1;
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)return 0;
    }
    if (v12 == 110)
      break;
    if (v12 != 200 || v10 != 66)
      goto LABEL_65;
    if (*((_DWORD *)this + 18) != 200)
    {
      *((_DWORD *)this + 18) = 200;
      v13 = (CoreML::Specification::SquaredEuclideanDistance *)operator new();
      CoreML::Specification::SquaredEuclideanDistance::SquaredEuclideanDistance(v13);
      *((_QWORD *)this + 7) = v13;
    }
    v14 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
    {
      v15 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (v15 < 0)
        return 0;
    }
    else
    {
      v15 = *v14;
      *(_QWORD *)a2 = v14 + 1;
    }
    v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v15);
    if ((v32 & 0x8000000000000000) != 0)
      return 0;
    v34 = v32;
    result = CoreML::Specification::SquaredEuclideanDistance::MergePartialFromCodedStream((CoreML::Specification::SquaredEuclideanDistance *)v32, (char **)a2, v33);
    if (!(_DWORD)result)
      return result;
LABEL_56:
    v37 = a2;
    v38 = v34;
LABEL_61:
    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v37, v38))
      return 0;
  }
  if (v10 != 114)
    goto LABEL_65;
  if (*((_DWORD *)this + 17) == 110)
  {
    v23 = (CoreML::Specification::SingleKdTreeIndex *)*((_QWORD *)this + 6);
  }
  else
  {
    CoreML::Specification::NearestNeighborsIndex::clear_IndexType((uint64_t)this);
    *((_DWORD *)this + 17) = 110;
    v23 = (CoreML::Specification::SingleKdTreeIndex *)operator new();
    CoreML::Specification::SingleKdTreeIndex::SingleKdTreeIndex(v23);
    *((_QWORD *)this + 6) = v23;
  }
  v26 = *(char **)a2;
  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v26 < 0)
  {
    v27 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v27 < 0)
      return 0;
  }
  else
  {
    v27 = *v26;
    *(_QWORD *)a2 = v26 + 1;
  }
  v39 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v27);
  if ((v39 & 0x8000000000000000) == 0)
  {
    v30 = v39;
    result = CoreML::Specification::SingleKdTreeIndex::MergePartialFromCodedStream(v23, (char **)a2, v40);
    if (!(_DWORD)result)
      return result;
LABEL_60:
    v37 = a2;
    v38 = v30;
    goto LABEL_61;
  }
  return 0;
}

void sub_2184B3ACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NearestNeighborsIndex::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  int v7;
  int i;
  int v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 40);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  v7 = *(_DWORD *)(v5 + 24);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v9 = *(_DWORD *)(v5 + 68);
  if (v9 == 100)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, *(_QWORD *)(v5 + 48), a2, a4);
    v9 = *(_DWORD *)(v5 + 68);
  }
  if (v9 == 110)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x6E, *(_QWORD *)(v5 + 48), a2, a4);
  if (*(_DWORD *)(v5 + 72) == 200)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC8, *(_QWORD *)(v5 + 56), a2, a4);
  return this;
}

uint64_t CoreML::Specification::NearestNeighborsIndex::ByteSizeLong(CoreML::Specification::NearestNeighborsIndex *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::FloatVector::ByteSizeLong(*(CoreML::Specification::FloatVector **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((_DWORD *)this + 10);
  if (v6)
  {
    if (v6 < 0)
      v7 = 11;
    else
      v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v4 += v7;
  }
  v8 = *((_DWORD *)this + 17);
  if (v8 == 110)
  {
    v9 = *((_QWORD *)this + 6);
    v10 = *(_DWORD *)(v9 + 16);
    if (v10)
    {
      if (v10 < 0)
        v11 = 11;
      else
        v11 = ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v11 = 0;
    }
    *(_DWORD *)(v9 + 20) = v11;
    v4 += v11 + 3;
  }
  else if (v8 == 100)
  {
    *(_DWORD *)(*((_QWORD *)this + 6) + 16) = 0;
    v4 += 3;
  }
  if (*((_DWORD *)this + 18) == 200)
  {
    *(_DWORD *)(*((_QWORD *)this + 7) + 16) = 0;
    v4 += 3;
  }
  *((_DWORD *)this + 16) = v4;
  return v4;
}

uint64_t CoreML::Specification::NearestNeighborsIndex::IsInitialized(CoreML::Specification::NearestNeighborsIndex *this)
{
  return 1;
}

_QWORD *CoreML::Specification::NearestNeighborsIndex::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NearestNeighborsIndex");
}

CoreML::Specification::UniformWeighting *CoreML::Specification::UniformWeighting::UniformWeighting(CoreML::Specification::UniformWeighting *this)
{
  *(_QWORD *)this = &off_24D944C00;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::UniformWeighting *)&CoreML::Specification::_UniformWeighting_default_instance_)
    CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_2184B3D74(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::UniformWeighting::~UniformWeighting(CoreML::Specification::UniformWeighting *this)
{
  *(_QWORD *)this = &off_24D944C00;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D944C00;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::UniformWeighting *CoreML::Specification::UniformWeighting::New(CoreML::Specification::UniformWeighting *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::UniformWeighting *v3;

  v3 = (CoreML::Specification::UniformWeighting *)operator new();
  CoreML::Specification::UniformWeighting::UniformWeighting(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::UniformWeighting>(a2, v3);
  return v3;
}

void sub_2184B3E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::UniformWeighting>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::UniformWeighting>);
  return result;
}

uint64_t CoreML::Specification::UniformWeighting::MergePartialFromCodedStream(CoreML::Specification::UniformWeighting *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::UniformWeighting::ByteSizeLong(CoreML::Specification::UniformWeighting *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::UniformWeighting::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::UniformWeighting::IsInitialized(CoreML::Specification::UniformWeighting *this)
{
  return 1;
}

_QWORD *CoreML::Specification::UniformWeighting::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.UniformWeighting");
}

CoreML::Specification::InverseDistanceWeighting *CoreML::Specification::InverseDistanceWeighting::InverseDistanceWeighting(CoreML::Specification::InverseDistanceWeighting *this)
{
  *(_QWORD *)this = &off_24D944C98;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::InverseDistanceWeighting *)&CoreML::Specification::_InverseDistanceWeighting_default_instance_)
    CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_2184B3F88(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::InverseDistanceWeighting::~InverseDistanceWeighting(CoreML::Specification::InverseDistanceWeighting *this)
{
  *(_QWORD *)this = &off_24D944C98;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D944C98;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::InverseDistanceWeighting *CoreML::Specification::InverseDistanceWeighting::New(CoreML::Specification::InverseDistanceWeighting *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::InverseDistanceWeighting *v3;

  v3 = (CoreML::Specification::InverseDistanceWeighting *)operator new();
  CoreML::Specification::InverseDistanceWeighting::InverseDistanceWeighting(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::InverseDistanceWeighting>(a2, v3);
  return v3;
}

void sub_2184B405C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::InverseDistanceWeighting>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::InverseDistanceWeighting>);
  return result;
}

uint64_t CoreML::Specification::InverseDistanceWeighting::MergePartialFromCodedStream(CoreML::Specification::InverseDistanceWeighting *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::InverseDistanceWeighting::ByteSizeLong(CoreML::Specification::InverseDistanceWeighting *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::InverseDistanceWeighting::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::InverseDistanceWeighting::IsInitialized(CoreML::Specification::InverseDistanceWeighting *this)
{
  return 1;
}

_QWORD *CoreML::Specification::InverseDistanceWeighting::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.InverseDistanceWeighting");
}

CoreML::Specification::LinearIndex *CoreML::Specification::LinearIndex::LinearIndex(CoreML::Specification::LinearIndex *this)
{
  *(_QWORD *)this = &off_24D944D30;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::LinearIndex *)&CoreML::Specification::_LinearIndex_default_instance_)
    CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_2184B419C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LinearIndex::~LinearIndex(CoreML::Specification::LinearIndex *this)
{
  *(_QWORD *)this = &off_24D944D30;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D944D30;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::LinearIndex *CoreML::Specification::LinearIndex::New(CoreML::Specification::LinearIndex *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::LinearIndex *v3;

  v3 = (CoreML::Specification::LinearIndex *)operator new();
  CoreML::Specification::LinearIndex::LinearIndex(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::LinearIndex>(a2, v3);
  return v3;
}

void sub_2184B4270(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::LinearIndex>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinearIndex>);
  return result;
}

uint64_t CoreML::Specification::LinearIndex::MergePartialFromCodedStream(CoreML::Specification::LinearIndex *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::LinearIndex::ByteSizeLong(CoreML::Specification::LinearIndex *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::LinearIndex::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::LinearIndex::IsInitialized(CoreML::Specification::LinearIndex *this)
{
  return 1;
}

_QWORD *CoreML::Specification::LinearIndex::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.LinearIndex");
}

CoreML::Specification::SingleKdTreeIndex *CoreML::Specification::SingleKdTreeIndex::SingleKdTreeIndex(CoreML::Specification::SingleKdTreeIndex *this)
{
  *(_QWORD *)this = &off_24D944DC8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SingleKdTreeIndex *)&CoreML::Specification::_SingleKdTreeIndex_default_instance_)
    CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_2184B43B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SingleKdTreeIndex::~SingleKdTreeIndex(CoreML::Specification::SingleKdTreeIndex *this)
{
  *(_QWORD *)this = &off_24D944DC8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D944DC8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::SingleKdTreeIndex *CoreML::Specification::SingleKdTreeIndex::New(CoreML::Specification::SingleKdTreeIndex *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::SingleKdTreeIndex *v3;

  v3 = (CoreML::Specification::SingleKdTreeIndex *)operator new();
  CoreML::Specification::SingleKdTreeIndex::SingleKdTreeIndex(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::SingleKdTreeIndex>(a2, v3);
  return v3;
}

void sub_2184B4484(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SingleKdTreeIndex>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SingleKdTreeIndex>);
  return result;
}

uint64_t CoreML::Specification::SingleKdTreeIndex::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::SingleKdTreeIndex::MergePartialFromCodedStream(CoreML::Specification::SingleKdTreeIndex *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  int v12;
  uint64_t Varint32Fallback;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
      }
      else
      {
        v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
      v12 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::SingleKdTreeIndex::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5;

  v5 = *(_DWORD *)(this + 16);
  if (v5)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v5, a2, a4);
  return this;
}

uint64_t CoreML::Specification::SingleKdTreeIndex::ByteSizeLong(CoreML::Specification::SingleKdTreeIndex *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

std::string *CoreML::Specification::SingleKdTreeIndex::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  return this;
}

uint64_t CoreML::Specification::SingleKdTreeIndex::IsInitialized(CoreML::Specification::SingleKdTreeIndex *this)
{
  return 1;
}

_QWORD *CoreML::Specification::SingleKdTreeIndex::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SingleKdTreeIndex");
}

CoreML::Specification::SquaredEuclideanDistance *CoreML::Specification::SquaredEuclideanDistance::SquaredEuclideanDistance(CoreML::Specification::SquaredEuclideanDistance *this)
{
  *(_QWORD *)this = &off_24D944E60;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SquaredEuclideanDistance *)&CoreML::Specification::_SquaredEuclideanDistance_default_instance_)
    CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_2184B46B8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SquaredEuclideanDistance::~SquaredEuclideanDistance(CoreML::Specification::SquaredEuclideanDistance *this)
{
  *(_QWORD *)this = &off_24D944E60;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D944E60;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::SquaredEuclideanDistance *CoreML::Specification::SquaredEuclideanDistance::New(CoreML::Specification::SquaredEuclideanDistance *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::SquaredEuclideanDistance *v3;

  v3 = (CoreML::Specification::SquaredEuclideanDistance *)operator new();
  CoreML::Specification::SquaredEuclideanDistance::SquaredEuclideanDistance(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::SquaredEuclideanDistance>(a2, v3);
  return v3;
}

void sub_2184B478C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SquaredEuclideanDistance>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SquaredEuclideanDistance>);
  return result;
}

uint64_t CoreML::Specification::SquaredEuclideanDistance::MergePartialFromCodedStream(CoreML::Specification::SquaredEuclideanDistance *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::SquaredEuclideanDistance::ByteSizeLong(CoreML::Specification::SquaredEuclideanDistance *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::SquaredEuclideanDistance::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::SquaredEuclideanDistance::IsInitialized(CoreML::Specification::SquaredEuclideanDistance *this)
{
  return 1;
}

_QWORD *CoreML::Specification::SquaredEuclideanDistance::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SquaredEuclideanDistance");
}

CoreML::Specification::KNearestNeighborsClassifier *CoreML::Specification::KNearestNeighborsClassifier::New(CoreML::Specification::KNearestNeighborsClassifier *this)
{
  return CoreML::Specification::KNearestNeighborsClassifier::New(this, 0);
}

CoreML::Specification::NearestNeighborsIndex *CoreML::Specification::NearestNeighborsIndex::New(CoreML::Specification::NearestNeighborsIndex *this)
{
  return CoreML::Specification::NearestNeighborsIndex::New(this, 0);
}

CoreML::Specification::UniformWeighting *CoreML::Specification::UniformWeighting::New(CoreML::Specification::UniformWeighting *this)
{
  return CoreML::Specification::UniformWeighting::New(this, 0);
}

CoreML::Specification::InverseDistanceWeighting *CoreML::Specification::InverseDistanceWeighting::New(CoreML::Specification::InverseDistanceWeighting *this)
{
  return CoreML::Specification::InverseDistanceWeighting::New(this, 0);
}

CoreML::Specification::LinearIndex *CoreML::Specification::LinearIndex::New(CoreML::Specification::LinearIndex *this)
{
  return CoreML::Specification::LinearIndex::New(this, 0);
}

CoreML::Specification::SingleKdTreeIndex *CoreML::Specification::SingleKdTreeIndex::New(CoreML::Specification::SingleKdTreeIndex *this)
{
  return CoreML::Specification::SingleKdTreeIndex::New(this, 0);
}

CoreML::Specification::SquaredEuclideanDistance *CoreML::Specification::SquaredEuclideanDistance::New(CoreML::Specification::SquaredEuclideanDistance *this)
{
  return CoreML::Specification::SquaredEuclideanDistance::New(this, 0);
}

CoreML::Specification::FloatVector *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FloatVector>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::FloatVector *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    v2 = (int *)*((_QWORD *)this + 2);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *((int *)this + 2);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::FloatVector **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::FloatVector::FloatVector(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FloatVector>);
  }
  else
  {
    Aligned = (CoreML::Specification::FloatVector *)operator new();
    CoreML::Specification::FloatVector::FloatVector(Aligned);
  }
  v7 = *((_QWORD *)this + 2);
  v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2184B49B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FloatVector>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::KNearestNeighborsClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NearestNeighborsIndex>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FloatVector>::TypeHandler>(uint64_t *result, CoreML::Specification::V5::TensorValue_RepeatedFloats **a2, CoreML::Specification::V5::TensorValue_RepeatedFloats **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::V5::TensorValue_RepeatedFloats **v11;
  CoreML::Specification::V5::TensorValue_RepeatedFloats **v12;
  CoreML::Specification::V5::TensorValue_RepeatedFloats *v13;
  CoreML::Specification::V5::TensorValue_RepeatedFloats *v14;
  CoreML::Specification::V5::TensorValue_RepeatedFloats *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::V5::TensorValue_RepeatedFloats **v18;
  CoreML::Specification::FloatVector **v19;
  CoreML::Specification::V5::TensorValue_RepeatedFloats *v20;
  CoreML::Specification::FloatVector *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FloatVector>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::FloatVector::FloatVector(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FloatVector>);
      }
      else
      {
        Aligned = (CoreML::Specification::FloatVector *)operator new();
        CoreML::Specification::FloatVector::FloatVector(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FloatVector>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_2184B4B0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FloatVector>::Merge(CoreML::Specification::V5::TensorValue_RepeatedFloats *a1, CoreML::Specification::V5::TensorValue_RepeatedFloats *this)
{
  return CoreML::Specification::V5::TensorValue_RepeatedFloats::MergeFrom((uint64_t *)this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::UniformWeighting>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::InverseDistanceWeighting>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinearIndex>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SingleKdTreeIndex>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SquaredEuclideanDistance>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_NearestNeighbors_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_SignpostHelper_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_2184B4DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_22_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_degree_count_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::degree_count::IN_DEGREE_COLUMN, "in_degree");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::degree_count::IN_DEGREE_COLUMN, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::degree_count::OUT_DEGREE_COLUMN, "out_degree");
  __cxa_atexit(v0, turi::degree_count::OUT_DEGREE_COLUMN, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::degree_count::ALL_DEGREE_COLUMN, "total_degree");
  __cxa_atexit(v0, turi::degree_count::ALL_DEGREE_COLUMN, &dword_217E69000);
  qword_254FF4C78 = 0;
  qword_254FF4C70 = 0;
  turi::degree_count::MODEL_FIELDS = (uint64_t)&qword_254FF4C70;
  return __cxa_atexit((void (*)(void *))std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~map[abi:ne180100], &turi::degree_count::MODEL_FIELDS, &dword_217E69000);
}

void sub_2184B51A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_20_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_graph_coloring_sgraph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::graph_coloring::COLOR_COLUMN, "color_id");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::graph_coloring::COLOR_COLUMN, &dword_217E69000);
  qword_254FF4CB8 = 0;
  qword_254FF4CB0 = 0;
  turi::graph_coloring::MODEL_FIELDS = (uint64_t)&qword_254FF4CB0;
  return __cxa_atexit((void (*)(void *))std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~map[abi:ne180100], &turi::graph_coloring::MODEL_FIELDS, &dword_217E69000);
}

void sub_2184B550C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<int>(unsigned int *a1, int *a2)
{
  int *v4;
  _QWORD v5[2];
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5[0] = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<int>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    v5[1] = *a2;
    v6 = 0;
    v7 = 0;
    LODWORD(v5[0]) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v5);
  }
}

void sub_2184B5644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<int>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9)
    boost::detail::variant::forced_return<void>(a1);
  return 0;
}

void __cxx_global_var_init_27_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_kcore_sgraph_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
}

void sub_2184B59AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_37_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_label_propagation_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::label_propagation::LABEL_COLUMN_PREFIX, "P");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::label_propagation::LABEL_COLUMN_PREFIX, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::label_propagation::PREDICTED_LABEL_COLUMN_NAME, "predicted_label");
  __cxa_atexit(v0, turi::label_propagation::PREDICTED_LABEL_COLUMN_NAME, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::label_propagation::label_field, "");
  __cxa_atexit(v0, turi::label_propagation::label_field, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::label_propagation::weight_field, "");
  return __cxa_atexit(v0, turi::label_propagation::weight_field, &dword_217E69000);
}

void sub_2184B5D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_31()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_pagerank_sgraph_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::pagerank::PAGERANK_COLUMN, "pagerank");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::pagerank::PAGERANK_COLUMN, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::pagerank::DELTA_COLUMN, "delta");
  return __cxa_atexit(v0, turi::pagerank::DELTA_COLUMN, &dword_217E69000);
}

void sub_2184B60EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_46()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sssp_sgraph_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::sssp::DISTANCE_COLUMN, "distance");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::sssp::DISTANCE_COLUMN, &dword_217E69000);
  turi::sssp::SOURCE_VID = 0;
  dword_254FFB530 = 0;
  byte_254FFB534 = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::sssp::SOURCE_VID, &dword_217E69000);
  qword_254FFB540 = 0;
  unk_254FFB548 = 0;
  turi::sssp::EDGE_WEIGHT_COLUMN = 0;
  return __cxa_atexit(v0, &turi::sssp::EDGE_WEIGHT_COLUMN, &dword_217E69000);
}

void CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/ArrayFeatureExtractor.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::_ArrayFeatureExtractor_default_instance_ = (uint64_t)&off_24D944FA0;
  *(_QWORD *)algn_254FFB558 = 0;
  qword_254FFB560 = 0;
  unk_254FFB568 = 0;
  dword_254FFB574 = 0;
  byte_254FFB578 = 1;
}

void CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2184B63A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::ArrayFeatureExtractor *CoreML::Specification::ArrayFeatureExtractor::ArrayFeatureExtractor(CoreML::Specification::ArrayFeatureExtractor *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D944FA0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::ArrayFeatureExtractor *)&CoreML::Specification::_ArrayFeatureExtractor_default_instance_)
    CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_2184B6410(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArrayFeatureExtractor::~ArrayFeatureExtractor(CoreML::Specification::ArrayFeatureExtractor *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D944FA0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ArrayFeatureExtractor::~ArrayFeatureExtractor(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::ArrayFeatureExtractor::default_instance(CoreML::Specification::ArrayFeatureExtractor *this)
{
  CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(this);
  return &CoreML::Specification::_ArrayFeatureExtractor_default_instance_;
}

CoreML::Specification::ArrayFeatureExtractor *CoreML::Specification::ArrayFeatureExtractor::New(CoreML::Specification::ArrayFeatureExtractor *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ArrayFeatureExtractor *v3;

  v3 = (CoreML::Specification::ArrayFeatureExtractor *)operator new();
  CoreML::Specification::ArrayFeatureExtractor::ArrayFeatureExtractor(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureExtractor>(a2, v3);
  return v3;
}

void sub_2184B6518(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureExtractor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureExtractor>);
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureExtractor::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureExtractor::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureExtractor *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  char *v14;
  unint64_t v15;
  unint64_t Varint64Fallback;
  char v17;
  signed int v18;
  uint64_t v19;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        v7 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v17 & 1) == 0)
                return 0;
              v15 = Varint64Fallback;
            }
            else
            {
              v15 = *v14;
              *a2 = v14 + 1;
            }
            v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v18 + 1);
              v18 = *v5;
            }
            v19 = *((_QWORD *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(_QWORD *)(v19 + 8 * v18 + 8) = v15;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ArrayFeatureExtractor::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureExtractor::ByteSizeLong(CoreML::Specification::ArrayFeatureExtractor *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    v2 = 0;
LABEL_8:
    v5 = 0;
    goto LABEL_10;
  }
  v2 = 0;
  v3 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
  do
  {
    v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2)
    goto LABEL_8;
  if ((v2 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_10:
  v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::ArrayFeatureExtractor::IsInitialized(CoreML::Specification::ArrayFeatureExtractor *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ArrayFeatureExtractor::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArrayFeatureExtractor");
}

CoreML::Specification::ArrayFeatureExtractor *CoreML::Specification::ArrayFeatureExtractor::New(CoreML::Specification::ArrayFeatureExtractor *this)
{
  return CoreML::Specification::ArrayFeatureExtractor::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureExtractor>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_ArrayFeatureExtractor_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184B6B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_31_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_triangle_counting_sgraph_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::triangle_counting::INT_VID_COLUMN, "__int_vid__");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::triangle_counting::INT_VID_COLUMN, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::triangle_counting::NEIGHBOR_ID_COLUMN, "__neighbor_ids__");
  __cxa_atexit(v0, turi::triangle_counting::NEIGHBOR_ID_COLUMN, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::triangle_counting::EDGE_DELETE_COLUMN, "__deleted__");
  __cxa_atexit(v0, turi::triangle_counting::EDGE_DELETE_COLUMN, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::triangle_counting::EDGE_COUNT_COLUMN, "__count__");
  __cxa_atexit(v0, turi::triangle_counting::EDGE_COUNT_COLUMN, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::triangle_counting::VERTEX_COUNT_COLUMN, "triangle_count");
  return __cxa_atexit(v0, turi::triangle_counting::VERTEX_COUNT_COLUMN, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_image_fn_export_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184B6F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_8()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184B726C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_5_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_image_deep_feature_extractor_toolkit_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

std::string *std::pair<std::string const,turi::image_deep_feature_extractor::`anonymous namespace'::neural_network_model_details const>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  std::string::size_type v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)a3;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a3 + 8);
  this[1].__r_.__value_.__r.__words[0] = v6;
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 16);
    this[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a3 + 32);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v7;
  }
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 40);
    this[3].__r_.__value_.__l.__size_ = *(_QWORD *)(a3 + 56);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v8;
  }
  v9 = (std::string *)((char *)this + 88);
  if (*(char *)(a3 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 64), *(_QWORD *)(a3 + 72));
  }
  else
  {
    v10 = *(_OWORD *)(a3 + 64);
    this[4].__r_.__value_.__l.__size_ = *(_QWORD *)(a3 + 80);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_2184B74D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string const,turi::image_deep_feature_extractor::`anonymous namespace'::neural_network_model_details const>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

const void ***std::__find_impl[abi:ne180100]<_tc_google::protobuf::internal::RepeatedPtrIterator<std::string const>,_tc_google::protobuf::internal::RepeatedPtrIterator<std::string const>,std::string,std::__identity>(const void ***a1, const void ***a2, unsigned __int8 **a3)
{
  const void ***v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  const void **v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *i;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *v3;
      v9 = *((unsigned __int8 *)*v3 + 23);
      if ((v9 & 0x80u) == 0)
        v10 = (unsigned __int8 *)*((unsigned __int8 *)*v3 + 23);
      else
        v10 = (unsigned __int8 *)(*v3)[1];
      if (v10 == v6)
      {
        if ((v9 & 0x80) != 0)
        {
          if (!memcmp(*v8, v7, (size_t)(*v3)[1]))
            return v3;
        }
        else
        {
          if (!*((_BYTE *)*v3 + 23))
            return v3;
          for (i = v7; *(unsigned __int8 *)v8 == *i; ++i)
          {
            v8 = (const void **)((char *)v8 + 1);
            if (!--v9)
              return v3;
          }
        }
      }
      ++v3;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void sub_2184B7798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<std::string const,turi::image_deep_feature_extractor::`anonymous namespace'::neural_network_model_details const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string const,turi::image_deep_feature_extractor::`anonymous namespace'::neural_network_model_details const>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    operator delete(v2);
  }
  return a1;
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string const,turi::image_deep_feature_extractor::`anonymous namespace'::neural_network_model_details const>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,turi::image_deep_feature_extractor::`anonymous namespace'::neural_network_model_details const>,void,void>(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string const,turi::image_deep_feature_extractor::`anonymous namespace'::neural_network_model_details const>,std::__map_value_compare<std::string const,std::__value_type<std::string const,turi::image_deep_feature_extractor::`anonymous namespace'::neural_network_model_details const>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,turi::image_deep_feature_extractor::`anonymous namespace'::neural_network_model_details const>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    operator delete(a2);
  }
}

uint64_t turi::table_printer::_track_progress<unsigned long,turi::progress_time,std::string>(uint64_t a1, char a2, uint64_t *a3, double *a4, uint64_t a5)
{
  pthread_mutex_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void **v77;
  _QWORD *v78;
  _QWORD *v79;
  std::string *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  void *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  void *v111;
  void *v112;
  _BYTE v114[24];
  uint64_t v115;
  void **v116;

  v10 = (pthread_mutex_t *)(a1 + 232);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 232));
  if (!*(_BYTE *)(a1 + 592))
  {
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 696), 3uLL);
    v11 = *(_QWORD *)(a1 + 720);
    v12 = *(_QWORD *)(a1 + 728) - v11;
    if (v12 > 2)
    {
      if (v12 != 3)
        *(_QWORD *)(a1 + 728) = v11 + 3;
    }
    else
    {
      std::vector<turi::table_internal::table_printer_element_base::style_type>::__append(a1 + 720, 3 - v12);
    }
  }
  v13 = *a3;
  v14 = *(_QWORD *)(a1 + 696);
  switch(*(_BYTE *)(v14 + 12))
  {
    case 2:
      v15 = *(unint64_t **)v14;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(unint64_t **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_48;
        if (*((char *)v18 + 31) < 0)
          operator delete((void *)v18[1]);
        v19 = v18;
        v20 = 0x1012C404EF22A49;
        goto LABEL_47;
      }
      break;
    case 3:
      v21 = *(unint64_t **)v14;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = *(unint64_t **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_48;
        v25 = (void *)v24[1];
        if (v25)
        {
          v24[2] = (unint64_t)v25;
          operator delete(v25);
        }
        v19 = v24;
        v20 = 0x1080C409938AC02;
        goto LABEL_47;
      }
      break;
    case 4:
      v26 = *(unint64_t **)v14;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = *(unint64_t **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_48;
        *(_QWORD *)v114 = v29 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v114);
        goto LABEL_31;
      }
      break;
    case 5:
      v30 = *(unint64_t **)v14;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v29 = *(unint64_t **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_48;
        *(_QWORD *)v114 = v29 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v114);
LABEL_31:
        v19 = v29;
        v20 = 0x1020C405E66F15BLL;
        goto LABEL_47;
      }
      break;
    case 8:
      v33 = *(unint64_t **)v14;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = *(unint64_t **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_48;
        boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
        v19 = v36;
        v37 = -235920773;
        goto LABEL_46;
      }
      break;
    case 9:
      v38 = *(unint64_t **)v14;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = *(unint64_t **)v14;
        if (*(_QWORD *)v14)
        {
          v42 = (void *)v41[6];
          if (v42)
          {
            v41[7] = (unint64_t)v42;
            operator delete(v42);
          }
          v43 = (void *)v41[3];
          if (v43)
          {
            v41[4] = (unint64_t)v43;
            operator delete(v43);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v41 + 1));
          v19 = v41;
          v37 = 2071181815;
LABEL_46:
          v20 = v37 | 0x1030C4000000000;
LABEL_47:
          MEMORY[0x219A19A08](v19, v20);
        }
LABEL_48:
        *(_QWORD *)v14 = 0;
      }
      break;
    default:
      break;
  }
  v44 = a1 + 696;
  *(_QWORD *)v14 = v13;
  *(_DWORD *)(v14 + 8) = 0;
  *(_BYTE *)(v14 + 12) = 0;
  **(_BYTE **)(a1 + 720) = 0;
  v45 = *a4;
  if (*a4 < 0.0)
  {
    gettimeofday((timeval *)v114, 0);
    v45 = (double)(*(_DWORD *)&v114[8] - *(_DWORD *)(a1 + 32)) / 1000000.0
        + (double)(uint64_t)(*(_QWORD *)v114 - *(_QWORD *)(a1 + 24));
  }
  v46 = *(_QWORD *)v44;
  switch(*(_BYTE *)(*(_QWORD *)v44 + 28))
  {
    case 2:
      v47 = *(unint64_t **)(v46 + 16);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        v50 = *(_QWORD *)(v46 + 16);
        if (!v50)
          goto LABEL_93;
        if (*(char *)(v50 + 31) < 0)
          operator delete(*(void **)(v50 + 8));
        v51 = (_QWORD *)v50;
        v52 = 0x1012C404EF22A49;
        goto LABEL_92;
      }
      break;
    case 3:
      v53 = *(unint64_t **)(v46 + 16);
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        v56 = *(_QWORD **)(v46 + 16);
        if (!v56)
          goto LABEL_93;
        v57 = (void *)v56[1];
        if (v57)
        {
          v56[2] = v57;
          operator delete(v57);
        }
        v51 = v56;
        v52 = 0x1080C409938AC02;
        goto LABEL_92;
      }
      break;
    case 4:
      v58 = *(unint64_t **)(v46 + 16);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        v61 = *(_QWORD **)(v46 + 16);
        if (!v61)
          goto LABEL_93;
        *(_QWORD *)v114 = v61 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v114);
        goto LABEL_76;
      }
      break;
    case 5:
      v62 = *(unint64_t **)(v46 + 16);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        v61 = *(_QWORD **)(v46 + 16);
        if (!v61)
          goto LABEL_93;
        *(_QWORD *)v114 = v61 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v114);
LABEL_76:
        v51 = v61;
        v52 = 0x1020C405E66F15BLL;
        goto LABEL_92;
      }
      break;
    case 8:
      v65 = *(unint64_t **)(v46 + 16);
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
      {
        v68 = *(_QWORD *)(v46 + 16);
        if (!v68)
          goto LABEL_93;
        boost::detail::shared_count::~shared_count((unsigned int **)(v68 + 16));
        v51 = (_QWORD *)v68;
        v69 = -235920773;
        goto LABEL_91;
      }
      break;
    case 9:
      v70 = *(unint64_t **)(v46 + 16);
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        v73 = *(_QWORD **)(v46 + 16);
        if (v73)
        {
          v74 = (void *)v73[6];
          if (v74)
          {
            v73[7] = v74;
            operator delete(v74);
          }
          v75 = (void *)v73[3];
          if (v75)
          {
            v73[4] = v75;
            operator delete(v75);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v73 + 1));
          v51 = v73;
          v69 = 2071181815;
LABEL_91:
          v52 = v69 | 0x1030C4000000000;
LABEL_92:
          MEMORY[0x219A19A08](v51, v52);
        }
LABEL_93:
        *(_QWORD *)(v46 + 16) = 0;
      }
      break;
    default:
      break;
  }
  *(double *)(v46 + 16) = v45;
  *(_DWORD *)(v46 + 24) = 0;
  *(_BYTE *)(v46 + 28) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 720) + 1) = 2;
  *(_QWORD *)v114 = &unk_24D940538;
  if (*(char *)(a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v114[8], *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)&v114[8] = *(_OWORD *)a5;
    v115 = *(_QWORD *)(a5 + 16);
  }
  v76 = operator new();
  *(_QWORD *)v76 = 0;
  *(_QWORD *)(v76 + 8) = 0;
  v77 = (void **)(v76 + 8);
  *(_QWORD *)(v76 + 16) = 0;
  *(_QWORD *)(v76 + 24) = 0;
  *(_QWORD *)v76 = 1;
  v78 = (_QWORD *)v76;
  if (*(_QWORD *)v76 != 1)
  {
    v79 = (_QWORD *)operator new();
    *v79 = *(_QWORD *)v76;
    v80 = (std::string *)(v79 + 1);
    if (*(char *)(v76 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v80, *(const std::string::value_type **)(v76 + 8), *(_QWORD *)(v76 + 16));
    }
    else
    {
      *(_OWORD *)&v80->__r_.__value_.__l.__data_ = *(_OWORD *)v77;
      v79[3] = *(_QWORD *)(v76 + 24);
    }
    *v79 = 1;
    do
    {
      v81 = __ldaxr((unint64_t *)v76);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, (unint64_t *)v76));
    v78 = v79;
    if (!v82)
    {
      if (*(char *)(v76 + 31) < 0)
        operator delete(*v77);
      MEMORY[0x219A19A08](v76, 0x1012C404EF22A49);
      v78 = v79;
    }
  }
  std::string::operator=((std::string *)(v78 + 1), (const std::string *)&v114[8]);
  v83 = *(_QWORD *)v44;
  switch(*(_BYTE *)(*(_QWORD *)v44 + 44))
  {
    case 2:
      v84 = *(unint64_t **)(v83 + 32);
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = *(_QWORD *)(v83 + 32);
        if (!v87)
          goto LABEL_149;
        if (*(char *)(v87 + 31) < 0)
          operator delete(*(void **)(v87 + 8));
        v88 = (_QWORD *)v87;
        v89 = 0x1012C404EF22A49;
        goto LABEL_148;
      }
      break;
    case 3:
      v90 = *(unint64_t **)(v83 + 32);
      do
      {
        v91 = __ldaxr(v90);
        v92 = v91 - 1;
      }
      while (__stlxr(v92, v90));
      if (!v92)
      {
        v93 = *(_QWORD **)(v83 + 32);
        if (!v93)
          goto LABEL_149;
        v94 = (void *)v93[1];
        if (v94)
        {
          v93[2] = v94;
          operator delete(v94);
        }
        v88 = v93;
        v89 = 0x1080C409938AC02;
        goto LABEL_148;
      }
      break;
    case 4:
      v95 = *(unint64_t **)(v83 + 32);
      do
      {
        v96 = __ldaxr(v95);
        v97 = v96 - 1;
      }
      while (__stlxr(v97, v95));
      if (!v97)
      {
        v98 = *(_QWORD *)(v83 + 32);
        if (!v98)
          goto LABEL_149;
        v116 = (void **)(v98 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v116);
        goto LABEL_132;
      }
      break;
    case 5:
      v99 = *(unint64_t **)(v83 + 32);
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        v98 = *(_QWORD *)(v83 + 32);
        if (!v98)
          goto LABEL_149;
        v116 = (void **)(v98 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v116);
LABEL_132:
        v88 = (_QWORD *)v98;
        v89 = 0x1020C405E66F15BLL;
        goto LABEL_148;
      }
      break;
    case 8:
      v102 = *(unint64_t **)(v83 + 32);
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        v105 = *(_QWORD *)(v83 + 32);
        if (!v105)
          goto LABEL_149;
        boost::detail::shared_count::~shared_count((unsigned int **)(v105 + 16));
        v88 = (_QWORD *)v105;
        v106 = -235920773;
        goto LABEL_147;
      }
      break;
    case 9:
      v107 = *(unint64_t **)(v83 + 32);
      do
      {
        v108 = __ldaxr(v107);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v107));
      if (!v109)
      {
        v110 = *(_QWORD **)(v83 + 32);
        if (v110)
        {
          v111 = (void *)v110[6];
          if (v111)
          {
            v110[7] = v111;
            operator delete(v111);
          }
          v112 = (void *)v110[3];
          if (v112)
          {
            v110[4] = v112;
            operator delete(v112);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v110 + 1));
          v88 = v110;
          v106 = 2071181815;
LABEL_147:
          v89 = v106 | 0x1030C4000000000;
LABEL_148:
          MEMORY[0x219A19A08](v88, v89);
        }
LABEL_149:
        *(_QWORD *)(v83 + 32) = 0;
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(v83 + 32) = v78;
  *(_DWORD *)(v83 + 40) = 0;
  *(_BYTE *)(v83 + 44) = 2;
  *(_QWORD *)v114 = &unk_24D940538;
  if (SHIBYTE(v115) < 0)
    operator delete(*(void **)&v114[8]);
  *(_BYTE *)(*(_QWORD *)(a1 + 720) + 2) = 0;
  turi::table_printer::track_progress_row(a1, (uint64_t *)(a1 + 696));
  *(_BYTE *)(a1 + 593) = a2;
  return pthread_mutex_unlock(v10);
}

void sub_2184B8144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  pthread_mutex_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;

  MEMORY[0x219A19A08](v18, 0x1012C404EF22A49);
  do
  {
    v20 = __ldaxr((unint64_t *)v17);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, (unint64_t *)v17));
  if (v21)
    v22 = 1;
  else
    v22 = v17 == 0;
  if (!v22)
  {
    if (*(char *)(v17 + 31) < 0)
      operator delete(*(void **)(v17 + 8));
    MEMORY[0x219A19A08](v17, 0x1012C404EF22A49);
  }
  if (a16 < 0)
    operator delete(__p);
  pthread_mutex_unlock(v16);
  _Unwind_Resume(a1);
}

uint64_t turi::table_printer::print_row<unsigned long,turi::progress_time,std::string>(uint64_t a1, uint64_t *a2, double *a3, uint64_t a4)
{
  uint64_t v4;
  double v9;
  const turi::flexible_type *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD v41[11];
  char v42;
  uint64_t v43;
  void **v44;
  _BYTE v45[24];
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v41[0] = v4 >> 5;
  if (v4 != 96)
  {
    *(_QWORD *)v45 = v41;
    turi::table_printer::print_row<long long,float,turi::progress_time>(long long,float,turi::progress_time const&)const::{lambda(void)#1}::operator()();
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
  v45[0] = 124;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v45, 1);
  turi::table_printer::os_log_value(0, *a2);
  turi::table_internal::_print_long(v41, *(_QWORD *)(*(_QWORD *)a1 + 24), *a2);
  turi::table_printer::os_log_value(a1, 1, a3);
  v9 = *a3;
  if (*a3 < 0.0)
  {
    gettimeofday((timeval *)v45, 0);
    v9 = (double)(*(_DWORD *)&v45[8] - *(_DWORD *)(a1 + 32)) / 1000000.0
       + (double)(uint64_t)(*(_QWORD *)v45 - *(_QWORD *)(a1 + 24));
  }
  turi::table_internal::_print_time(v41, *(_QWORD *)(*(_QWORD *)a1 + 56), v9);
  *(_QWORD *)v45 = 0;
  *(_DWORD *)&v45[8] = 0;
  v45[12] = 0;
  turi::flexible_type::operator=<std::string>((uint64_t *)v45, (const std::string *)a4);
  turi::table_printer::os_log_value((turi::table_printer *)2, v45, v10);
  switch(v45[12])
  {
    case 2:
      v11 = *(unint64_t **)v45;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          if (*(char *)(*(_QWORD *)v45 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v45 + 8));
          v15 = v14;
          v16 = 0x1012C404EF22A49;
          goto LABEL_45;
        }
      }
      break;
    case 3:
      v28 = *(unint64_t **)v45;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v32 = *(void **)(*(_QWORD *)v45 + 8);
          if (v32)
          {
            *(_QWORD *)(*(_QWORD *)v45 + 16) = v32;
            operator delete(v32);
          }
          v15 = v31;
          v16 = 0x1080C409938AC02;
          goto LABEL_45;
        }
      }
      break;
    case 4:
      v17 = *(unint64_t **)v45;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v44 = (void **)(*(_QWORD *)v45 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v44);
          goto LABEL_38;
        }
      }
      break;
    case 5:
      v33 = *(unint64_t **)v45;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v20 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v44 = (void **)(*(_QWORD *)v45 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v44);
LABEL_38:
          v15 = v20;
          v16 = 0x1020C405E66F15BLL;
          goto LABEL_45;
        }
      }
      break;
    case 8:
      v36 = *(unint64_t **)v45;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v45 + 16));
          v15 = v39;
          v27 = -235920773;
          goto LABEL_44;
        }
      }
      break;
    case 9:
      v21 = *(unint64_t **)v45;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v25 = *(void **)(*(_QWORD *)v45 + 48);
          if (v25)
          {
            *(_QWORD *)(*(_QWORD *)v45 + 56) = v25;
            operator delete(v25);
          }
          v26 = *(void **)(v24 + 24);
          if (v26)
          {
            *(_QWORD *)(v24 + 32) = v26;
            operator delete(v26);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v24 + 8);
          v15 = v24;
          v27 = 2071181815;
LABEL_44:
          v16 = v27 | 0x1030C4000000000;
LABEL_45:
          MEMORY[0x219A19A08](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)v45 = &unk_24D940538;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v45[8], *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v45[8] = *(_OWORD *)a4;
    v46 = *(_QWORD *)(a4 + 16);
  }
  turi::table_internal::_print_string(v41, *(_QWORD *)(*(_QWORD *)a1 + 88), (uint64_t)&v45[8]);
  *(_QWORD *)v45 = &unk_24D940538;
  if (SHIBYTE(v46) < 0)
    operator delete(*(void **)&v45[8]);
  turi::table_printer::_p(a1);
  v41[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v41[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v41[1] = MEMORY[0x24BEDB848] + 16;
  if (v42 < 0)
    operator delete((void *)v41[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v43);
}

void sub_2184B85F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v3 - 88) = v2 + 16;
  if (*(char *)(v3 - 57) < 0)
    operator delete(*(void **)(v3 - 80));
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_26_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void _GLOBAL__sub_I_mlmodel_image_feature_extractor_mm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t *v9;
  const void **v10;
  char *v11;
  std::string *v12;
  char *v13;
  char *v14;
  const std::string::value_type **v15;
  std::string *v16;
  const std::string::value_type **v17;
  uint64_t *v18;
  unint64_t v19;
  void **v20;
  void **v21;
  void *v22;
  uint64_t v23;
  int v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *__p;
  char v30;
  void *v31[2];
  char v32;
  int32x2_t v33;
  int v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41[2];
  char v42;
  uint64_t v43;
  int v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51[2];
  char v52;
  _QWORD v53[2];
  char v54;
  std::string v55;
  std::string v56[4];
  std::string v57[4];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v0 = MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(v51, "resnet-50");
  v43 = 0xE0000000E0;
  v44 = 2048;
  std::string::basic_string[abi:ne180100]<0>(&v45, "flatten0");
  std::string::basic_string[abi:ne180100]<0>(&v47, "data");
  std::string::basic_string[abi:ne180100]<0>(&v49, "https://docs-assets.developer.apple.com/turicreate/models/resnet-50-TuriCreate-6.0.mlmodel");
  std::string::basic_string[abi:ne180100]<0>(v41, "VisionFeaturePrint_Scene");
  v33 = vdup_n_s32(0x12Bu);
  v34 = 2048;
  std::string::basic_string[abi:ne180100]<0>(&v35, "output");
  std::string::basic_string[abi:ne180100]<0>(&v37, "image_input");
  std::string::basic_string[abi:ne180100]<0>(&v39, "");
  std::string::basic_string[abi:ne180100]<0>(v31, "squeezenet_v1.1");
  v23 = 0xE3000000E3;
  v24 = 1000;
  std::string::basic_string[abi:ne180100]<0>(&v25, "pool10");
  std::string::basic_string[abi:ne180100]<0>(&v27, "image");
  std::string::basic_string[abi:ne180100]<0>(&__p, "https://docs-assets.developer.apple.com/coreml/models/SqueezeNet.mlmodel");
  v22 = (void *)v0;
  v1 = 0;
  v2 = 0;
  qword_254FF4EB0 = 0;
  qword_254FF4EA8 = 0;
  v3 = &qword_254FF4EA8;
  while (1)
  {
    v4 = (char *)&v55 + 112 * v2;
    if (v3 == &qword_254FF4EA8)
    {
      v5 = &qword_254FF4EA8;
LABEL_10:
      if (v1)
      {
        v9 = v5 + 1;
        goto LABEL_12;
      }
      goto LABEL_22;
    }
    if (v1)
    {
      do
      {
        v5 = (uint64_t *)v1;
        v1 = *(_QWORD *)(v1 + 8);
      }
      while (v1);
    }
    else
    {
      v6 = &qword_254FF4EA8;
      do
      {
        v5 = (uint64_t *)v6[2];
        v7 = *v5 == (_QWORD)v6;
        v6 = v5;
      }
      while (v7);
    }
    v8 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FF4EB0, (const void **)v5 + 4, (const void **)&v55.__r_.__value_.__l.__data_ + 14 * v2);
    v1 = qword_254FF4EA8;
    if (v8)
      goto LABEL_10;
    if (qword_254FF4EA8)
    {
      v9 = &qword_254FF4EA8;
      while (1)
      {
        while (1)
        {
          v5 = (uint64_t *)v1;
          v10 = (const void **)(v1 + 32);
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FF4EB0, (const void **)&v55.__r_.__value_.__l.__data_ + 14 * v2, (const void **)(v1 + 32)))break;
          v1 = *v5;
          v9 = v5;
          if (!*v5)
            goto LABEL_23;
        }
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_254FF4EB0, v10, (const void **)&v55.__r_.__value_.__l.__data_ + 14 * v2))break;
        v9 = v5 + 1;
        v1 = v5[1];
        if (!v1)
          goto LABEL_23;
      }
LABEL_12:
      if (*v9)
        goto LABEL_38;
      goto LABEL_23;
    }
LABEL_22:
    v5 = &qword_254FF4EA8;
    v9 = &qword_254FF4EA8;
LABEL_23:
    v11 = (char *)operator new(0x90uLL);
    v12 = (std::string *)v11;
    v53[0] = v11;
    v53[1] = &qword_254FF4EA8;
    v54 = 0;
    if (v4[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v11 + 32), *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *((_OWORD *)v11 + 2) = *(_OWORD *)v4;
      *((_QWORD *)v11 + 6) = *((_QWORD *)v4 + 2);
    }
    v13 = (char *)&v55 + 112 * v2;
    v12[2].__r_.__value_.__l.__size_ = *((_QWORD *)v13 + 3);
    LODWORD(v12[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)v13 + 8);
    v14 = v13 + 40;
    if (v4[63] < 0)
    {
      std::string::__init_copy_ctor_external(v12 + 3, *(const std::string::value_type **)v14, *((_QWORD *)&v55 + 14 * v2 + 6));
    }
    else
    {
      *(_OWORD *)&v12[3].__r_.__value_.__l.__data_ = *(_OWORD *)v14;
      v12[3].__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
    }
    v15 = (const std::string::value_type **)((char *)&v55 + 112 * v2 + 64);
    if (v4[87] < 0)
    {
      std::string::__init_copy_ctor_external(v12 + 4, *v15, *((_QWORD *)&v55 + 14 * v2 + 9));
    }
    else
    {
      *(_OWORD *)&v12[4].__r_.__value_.__l.__data_ = *(_OWORD *)v15;
      v12[4].__r_.__value_.__r.__words[2] = *((_QWORD *)&v55 + 14 * v2 + 10);
    }
    v16 = v12 + 5;
    v17 = (const std::string::value_type **)((char *)&v55 + 112 * v2 + 88);
    if (v4[111] < 0)
    {
      std::string::__init_copy_ctor_external(v16, *v17, *((_QWORD *)&v55 + 14 * v2 + 12));
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v17;
      v12[5].__r_.__value_.__r.__words[2] = *((_QWORD *)&v55 + 14 * v2 + 13);
    }
    v54 = 1;
    v18 = (uint64_t *)v53[0];
    *(_QWORD *)v53[0] = 0;
    v18[1] = 0;
    v18[2] = (uint64_t)v5;
    *v9 = (uint64_t)v18;
    {
      v18 = (uint64_t *)*v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_254FF4EA8, v18);
    ++qword_254FF4EB0;
    v53[0] = 0;
LABEL_38:
    if (++v2 == 3)
      break;
    v1 = qword_254FF4EA8;
  }
  v19 = 336;
  do
  {
    v20 = (void **)((char *)&v55.__r_.__value_.__l.__data_ + v19);
    if (v55.__r_.__value_.__s.__data_[v19 - 1] < 0)
      operator delete(*(v20 - 3));
    if (*((char *)v20 - 25) < 0)
      operator delete(v51[v19 / 8]);
    v21 = (void **)((char *)&v55.__r_.__value_.__l.__data_ + v19);
    if (*(&v50 + v19) < 0)
      operator delete(*(v21 - 9));
    if (*((char *)v21 - 89) < 0)
      operator delete(*(v20 - 14));
    v19 -= 112;
  }
  while (v19);
  if (v30 < 0)
    operator delete(__p);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v25);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47);
  if (v46 < 0)
    operator delete(v45);
  if (v52 < 0)
    operator delete(v51[0]);
  objc_autoreleasePoolPop(v22);
}

void sub_2184B8DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a66;
  char a71;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  char a78;
  char *v78;

  if (a31 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a19 < 0)
    operator delete(a14);
  if (a37 < 0)
    operator delete(a32);
  if (a57 < 0)
    operator delete(a52);
  if (a51 < 0)
    operator delete(a46);
  if (a45 < 0)
    operator delete(a40);
  if (a63 < 0)
    operator delete(a58);
  if (a75 < 0)
    operator delete(a74);
  if (a73 < 0)
    operator delete(a72);
  if (a71 < 0)
    operator delete(a66);
  if (a77 < 0)
    operator delete(a76);
  for (; v78 != &a78; v78 -= 112)
  {
    if (*(v78 - 1) < 0)
      operator delete(*((void **)v78 - 3));
    if (*(v78 - 25) < 0)
      operator delete(*((void **)v78 - 6));
    if (*(v78 - 49) < 0)
      operator delete(*((void **)v78 - 9));
    if (*(v78 - 89) < 0)
      operator delete(*((void **)v78 - 14));
  }
  _Unwind_Resume(a1);
}

void sub_2184B9228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_21_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_internal_metadata_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184B9538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_5_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::v2::ml_data_internal::row_data_block>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD4C90 = 0;
    unk_254FD4C80 = 0u;
    unk_254FD4C70 = 0u;
    unk_254FD4C60 = 0u;
    unk_254FD4C50 = 0u;
    qword_254FD4C48 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::v2::ml_data_internal::row_data_block>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_block_manager_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184B98FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_5_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void _GLOBAL__sub_I_ml_data_row_format_cpp_0()
{
  _QWORD *v0;
  uint64_t v1;
  void *__p[2];
  char v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_ML_DATA_TARGET_ROW_BYTE_MINIMUM");
  v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::v2::ml_data_internal::__ML_DATA_TARGET_ROW_BYTE_MINIMUM__register__instance, __p, &turi::v2::ml_data_internal::ML_DATA_TARGET_ROW_BYTE_MINIMUM, 1, v4);
  v0 = v5;
  if (v5 == v4)
  {
    v1 = 4;
    v0 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_6:
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_2184B9B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _GLOBAL__sub_I_ml_data_row_format_cpp_cold_1_0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2184B9D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_27()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_row_translation_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184BA018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_util_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184BA320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_12_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_column_indexer_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184BA630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_5_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_column_unique_indexer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184BA940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_composite_row_type_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184BB44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_29()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_block_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184BB764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_5_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_iterator_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

CoreML::Model *CoreML::OneHotEncoder::OneHotEncoder(CoreML::Model *a1, const std::string *a2)
{
  CoreML::Model *v3;
  uint64_t v4;
  CoreML::Specification::OneHotEncoder *v5;

  v3 = CoreML::Model::Model(a1, a2);
  *(_QWORD *)v3 = &off_24D945050;
  v4 = *((_QWORD *)v3 + 1);
  if (*(_DWORD *)(v4 + 44) != 600)
  {
    CoreML::Specification::Model::clear_Type(*((_QWORD *)v3 + 1));
    *(_DWORD *)(v4 + 44) = 600;
    v5 = (CoreML::Specification::OneHotEncoder *)operator new();
    CoreML::Specification::OneHotEncoder::OneHotEncoder(v5);
    *(_QWORD *)(v4 + 32) = v5;
  }
  return a1;
}

void sub_2184BB954(_Unwind_Exception *a1)
{
  CoreML::Model *v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C405CEF57A5);
  CoreML::Model::~Model(v1);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::OneHotEncoder::addInput@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, const CoreML::Specification::FeatureType **a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t i;
  CoreML::Result *result;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const CoreML::Specification::FeatureType *v29;
  std::__shared_weak_count *v30;
  const CoreML::Specification::FeatureType *v31;
  std::__shared_weak_count *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void **v36;
  char v37;
  uint64_t v38[2];
  uint64_t v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  CoreML::FeatureType::Int64(v38);
  CoreML::FeatureType::String(v39);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = (void **)&v33;
  v37 = 0;
  v8 = operator new(0x20uLL);
  v9 = 0;
  v33 = v8;
  v34 = v8;
  v35 = v8 + 4;
  do
  {
    v10 = &v38[2 * v9];
    v12 = *v10;
    v11 = v10[1];
    *v8 = v12;
    v8[1] = v11;
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ++v9;
    v8 += 2;
  }
  while (v9 != 2);
  v34 = v8;
  v15 = (std::__shared_weak_count *)a3[1];
  v31 = *a3;
  v32 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  CoreML::Model::enforceTypeInvariant((uint64_t *)&v33, (CoreML::FeatureType *)&v31, (CoreML::Result *)a4);
  v18 = v32;
  if (v32)
  {
    v19 = (unint64_t *)&v32->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v36 = (void **)&v33;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v36);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v38[i]);
  result = (CoreML::Result *)CoreML::Result::good((CoreML::Result *)a4);
  if ((_DWORD)result)
  {
    if (*(char *)(a4 + 31) < 0)
      operator delete(*(void **)(a4 + 8));
    v23 = (std::__shared_weak_count *)a3[1];
    v29 = *a3;
    v30 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    CoreML::Model::addInput(a1, a2, &v29, (CoreML::Result *)a4);
    v26 = v30;
    if (v30)
    {
      v27 = (unint64_t *)&v30->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    result = (CoreML::Result *)CoreML::Result::good((CoreML::Result *)a4);
    if ((_DWORD)result)
    {
      if (*(char *)(a4 + 31) < 0)
        operator delete(*(void **)(a4 + 8));
      return CoreML::Result::Result((CoreML::Result *)a4);
    }
  }
  return result;
}

void sub_2184BBBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::OneHotEncoder::setHandleUnknown@<X0>(uint64_t a1@<X0>, int a2@<W1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5;
  CoreML::Specification::OneHotEncoder *v6;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 44) == 600)
  {
    v6 = *(CoreML::Specification::OneHotEncoder **)(v5 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v5 + 44) = 600;
    v6 = (CoreML::Specification::OneHotEncoder *)operator new();
    CoreML::Specification::OneHotEncoder::OneHotEncoder(v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  *((_DWORD *)v6 + 5) = a2;
  return CoreML::Result::Result(a3);
}

void sub_2184BBCB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C405CEF57A5);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::OneHotEncoder::setUseSparse@<X0>(CoreML::OneHotEncoder *this@<X0>, char a2@<W1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5;
  CoreML::Specification::OneHotEncoder *v6;

  v5 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v5 + 44) == 600)
  {
    v6 = *(CoreML::Specification::OneHotEncoder **)(v5 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*((_QWORD *)this + 1));
    *(_DWORD *)(v5 + 44) = 600;
    v6 = (CoreML::Specification::OneHotEncoder *)operator new();
    CoreML::Specification::OneHotEncoder::OneHotEncoder(v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  *((_BYTE *)v6 + 16) = a2;
  return CoreML::Result::Result(a3);
}

void sub_2184BBD58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C405CEF57A5);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::OneHotEncoder::setFeatureEncoding@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 44) == 600)
  {
    v6 = *(_QWORD *)(v5 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v5 + 44) = 600;
    v6 = operator new();
    CoreML::Specification::OneHotEncoder::OneHotEncoder((CoreML::Specification::OneHotEncoder *)v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  if (*(_DWORD *)(v6 + 36) == 2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    *(_DWORD *)(v6 + 36) = 0;
  }
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      v10 = *v8;
      if (*(_DWORD *)(v6 + 36) == 2)
      {
        v11 = *(_QWORD *)(v6 + 24);
      }
      else
      {
        CoreML::Specification::OneHotEncoder::clear_CategoryType(v6);
        *(_DWORD *)(v6 + 36) = 2;
        v11 = operator new();
        CoreML::Specification::Int64Vector::Int64Vector((CoreML::Specification::Int64Vector *)v11);
        *(_QWORD *)(v6 + 24) = v11;
      }
      v12 = *(_DWORD *)(v11 + 16);
      if (v12 == *(_DWORD *)(v11 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v11 + 16), v12 + 1);
        v12 = *(_DWORD *)(v11 + 16);
      }
      v13 = *(_QWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 16) = v12 + 1;
      *(_QWORD *)(v13 + 8 * v12 + 8) = v10;
      ++v8;
    }
    while (v8 != v9);
  }
  return CoreML::Result::Result(a3);
}

void sub_2184BBEC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C405CEF57A5);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::OneHotEncoder::setFeatureEncoding@<X0>(uint64_t a1@<X0>, __int128 **a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  _tc_google::protobuf::Arena **v12;
  int *v13;
  uint64_t v14;
  int v15;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v17;
  uint64_t v18;
  uint64_t v19;
  std::string __p;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 44) == 600)
  {
    v6 = *(_QWORD *)(v5 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v5 + 44) = 600;
    v6 = operator new();
    CoreML::Specification::OneHotEncoder::OneHotEncoder((CoreML::Specification::OneHotEncoder *)v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  if (*(_DWORD *)(v6 + 36) == 1)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    *(_DWORD *)(v6 + 36) = 0;
  }
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    while (1)
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v10 = *v8;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      if (*(_DWORD *)(v6 + 36) == 1)
      {
        v11 = *(_QWORD *)(v6 + 24);
      }
      else
      {
        CoreML::Specification::OneHotEncoder::clear_CategoryType(v6);
        *(_DWORD *)(v6 + 36) = 1;
        v11 = operator new();
        CoreML::Specification::StringVector::StringVector((CoreML::Specification::StringVector *)v11);
        *(_QWORD *)(v6 + 24) = v11;
      }
      v12 = (_tc_google::protobuf::Arena **)(v11 + 16);
      v13 = *(int **)(v11 + 32);
      if (!v13)
        break;
      v14 = *(int *)(v11 + 24);
      v15 = *v13;
      if ((int)v14 < *v13)
      {
        *(_DWORD *)(v11 + 24) = v14 + 1;
        Aligned = *(std::string **)&v13[2 * v14 + 2];
        goto LABEL_25;
      }
      if (v15 == *(_DWORD *)(v11 + 28))
        goto LABEL_20;
LABEL_21:
      *v13 = v15 + 1;
      v17 = *v12;
      if (*v12)
      {
        Aligned->__r_.__value_.__r.__words[0] = 0;
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        Aligned = (std::string *)operator new();
        Aligned->__r_.__value_.__r.__words[0] = 0;
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
      }
      v18 = *(_QWORD *)(v11 + 32);
      v19 = *(int *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v19 + 1;
      *(_QWORD *)(v18 + 8 * v19 + 8) = Aligned;
LABEL_25:
      std::string::operator=(Aligned, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 = (__int128 *)((char *)v8 + 24);
      if (v8 == v9)
        return CoreML::Result::Result(a3);
    }
    v15 = *(_DWORD *)(v11 + 28);
LABEL_20:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v11 + 16), v15 + 1);
    v13 = *(int **)(v11 + 32);
    v15 = *v13;
    goto LABEL_21;
  }
  return CoreML::Result::Result(a3);
}

void sub_2184BC140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x219A19A08](v14, 0x10A1C405CEF57A5);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_OneHotEncoder_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184BC36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_11_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_metadata_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/CategoricalMapping.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_CategoricalMapping_default_instance_ = (uint64_t)&off_24D945098;
  *(_QWORD *)algn_254FFB588 = 0;
  dword_254FFB5A8 = 0;
  qword_254FFB5A0 = 0;
  byte_254FFB5B0 = 1;
}

void CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(CoreML::Specification::protobuf_CategoricalMapping_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2184BC5A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CategoricalMapping *CoreML::Specification::CategoricalMapping::CategoricalMapping(CoreML::Specification::CategoricalMapping *this)
{
  *(_QWORD *)this = &off_24D945098;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CategoricalMapping *)&CoreML::Specification::_CategoricalMapping_default_instance_)
    CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_2184BC60C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CategoricalMapping::~CategoricalMapping(CoreML::Specification::CategoricalMapping *this)
{
  *(_QWORD *)this = &off_24D945098;
  CoreML::Specification::CategoricalMapping::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::CategoricalMapping::~CategoricalMapping(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::CategoricalMapping::SharedDtor(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_DWORD *)(this + 36))
    this = CoreML::Specification::CategoricalMapping::clear_MappingType(this);
  if (*(_DWORD *)(v1 + 40))
    return CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown(v1);
  return this;
}

uint64_t CoreML::Specification::CategoricalMapping::clear_MappingType(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 36);
  if (v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  if (*(_DWORD *)(this + 40) == 101)
  {
    v2 = *(_QWORD *)(this + 24);
    if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
    {
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      this = MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

uint64_t *CoreML::Specification::CategoricalMapping::default_instance(CoreML::Specification::CategoricalMapping *this)
{
  CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(this);
  return &CoreML::Specification::_CategoricalMapping_default_instance_;
}

CoreML::Specification::CategoricalMapping *CoreML::Specification::CategoricalMapping::New(CoreML::Specification::CategoricalMapping *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::CategoricalMapping *v3;

  v3 = (CoreML::Specification::CategoricalMapping *)operator new();
  CoreML::Specification::CategoricalMapping::CategoricalMapping(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::CategoricalMapping>(a2, v3);
  return v3;
}

void sub_2184BC7EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A3C40EEBF8A51);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CategoricalMapping>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CategoricalMapping>);
  return result;
}

uint64_t CoreML::Specification::CategoricalMapping::Clear(CoreML::Specification::CategoricalMapping *this)
{
  CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
  return CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
}

uint64_t CoreML::Specification::CategoricalMapping::MergePartialFromCodedStream(CoreML::Specification::CategoricalMapping *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  CoreML::Specification::Int64ToStringMap *v14;
  char *v15;
  unint64_t Varint64Fallback;
  CoreML::Specification::StringToInt64Map *v17;
  std::string *v18;
  char *v19;
  int v20;
  char *v21;
  int VarintSizeAsIntFallback;
  uint64_t result;
  int v24;
  std::string *v25;
  std::string *v26;
  const char *size;
  char v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int TagFallback;

  v5 = (std::string **)((char *)this + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(unsigned __int8 **)a2;
        v7 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v7)
        {
          v9 = 0;
LABEL_65:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
          v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v10 & 0x100000000) == 0)
            goto LABEL_66;
          goto LABEL_9;
        }
        v8 = v6 + 1;
        v9 = *v6;
        if ((char)*v6 < 1)
        {
          if ((unint64_t)v8 < v7)
          {
            v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(_QWORD *)a2 = v6 + 2;
              v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_9;
            }
          }
          goto LABEL_65;
        }
        *(_QWORD *)a2 = v8;
        v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0)
          goto LABEL_66;
LABEL_9:
        v12 = v10 >> 3;
        if (v10 >> 3 <= 0x64)
          break;
        if (v12 == 101)
        {
          if (v10 != 42)
            goto LABEL_66;
          if (*((_DWORD *)this + 10) != 101)
          {
            CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
            *((_DWORD *)this + 10) = 101;
            *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
LABEL_40:
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v18 = *v5;
            goto LABEL_41;
          }
          v18 = *v5;
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_40;
LABEL_41:
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v18);
          if (!(_DWORD)result)
            return result;
          v24 = *((_DWORD *)this + 10);
          v25 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
          if (v24 == 101)
            v25 = *v5;
          if (SHIBYTE(v25->__r_.__value_.__r.__words[2]) < 0)
            v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
          v26 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
          if (v24 == 101)
            v26 = *v5;
          if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0)
            size = (const char *)v26->__r_.__value_.__l.__size_;
          else
            size = (const char *)HIBYTE(v26->__r_.__value_.__r.__words[2]);
          if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v25, size, 0, (uint64_t)"CoreML.Specification.CategoricalMapping.strValue"))return 0;
        }
        else
        {
          if (v12 != 102 || v10 != 48)
            goto LABEL_66;
          CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
          v15 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
          {
            Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v28 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v15;
            *(_QWORD *)a2 = v15 + 1;
          }
          *((_QWORD *)this + 3) = Varint64Fallback;
          *((_DWORD *)this + 10) = 102;
        }
      }
      if (v12 != 1)
        break;
      if (v10 != 10)
        goto LABEL_66;
      if (*((_DWORD *)this + 9) == 1)
      {
        v17 = (CoreML::Specification::StringToInt64Map *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        v17 = (CoreML::Specification::StringToInt64Map *)operator new();
        CoreML::Specification::StringToInt64Map::StringToInt64Map(v17);
        *((_QWORD *)this + 2) = v17;
      }
      v21 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v21;
        *(_QWORD *)a2 = v21 + 1;
      }
      v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v32 & 0x8000000000000000) != 0)
        return 0;
      v31 = v32;
      result = CoreML::Specification::StringToInt64Map::MergePartialFromCodedStream(v17, (char **)a2, v33);
      if (!(_DWORD)result)
        return result;
LABEL_59:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v31))
        return 0;
    }
    if (v12 == 2 && v10 == 18)
    {
      if (*((_DWORD *)this + 9) == 2)
      {
        v14 = (CoreML::Specification::Int64ToStringMap *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        v14 = (CoreML::Specification::Int64ToStringMap *)operator new();
        CoreML::Specification::Int64ToStringMap::Int64ToStringMap(v14);
        *((_QWORD *)this + 2) = v14;
      }
      v19 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
      {
        v20 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v20 < 0)
          return 0;
      }
      else
      {
        v20 = *v19;
        *(_QWORD *)a2 = v19 + 1;
      }
      v29 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v20);
      if ((v29 & 0x8000000000000000) != 0)
        return 0;
      v31 = v29;
      result = CoreML::Specification::Int64ToStringMap::MergePartialFromCodedStream(v14, (char **)a2, v30);
      if (!(_DWORD)result)
        return result;
      goto LABEL_59;
    }
LABEL_66:
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)return 0;
  }
}

void sub_2184BCBE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CategoricalMapping::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  const char *v9;
  uint64_t *v10;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  v7 = *(_DWORD *)(v5 + 40);
  if (v7 == 101)
  {
    v8 = *(unsigned __int8 **)(v5 + 24);
    if ((char)v8[23] < 0)
    {
      v8 = *(unsigned __int8 **)v8;
      v9 = *(const char **)(*(_QWORD *)(v5 + 24) + 8);
    }
    else
    {
      v9 = (const char *)v8[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v8, v9, 1, (uint64_t)"CoreML.Specification.CategoricalMapping.strValue");
    if (*(_DWORD *)(v5 + 40) == 101)
      v10 = *(uint64_t **)(v5 + 24);
    else
      v10 = &_tc_google::protobuf::internal::fixed_address_empty_string;
    this = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(101, (uint64_t)v10, a2);
    v7 = *(_DWORD *)(v5 + 40);
  }
  if (v7 == 102)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(102, *(_QWORD *)(v5 + 24), a2, a4);
  return this;
}

uint64_t CoreML::Specification::CategoricalMapping::ByteSizeLong(CoreML::Specification::CategoricalMapping *this)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_DWORD *)this + 9);
  if (v2 == 2)
  {
    v3 = CoreML::Specification::Int64ToStringMap::ByteSizeLong(*((_tc_google::protobuf::Arena ***)this + 2));
    goto LABEL_5;
  }
  if (v2 == 1)
  {
    v3 = CoreML::Specification::StringToInt64Map::ByteSizeLong(*((_tc_google::protobuf::Arena ***)this + 2));
LABEL_5:
    result = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_7;
  }
  result = 0;
LABEL_7:
  v5 = *((_DWORD *)this + 10);
  if (v5 == 102)
  {
    v9 = result + ((9 * (__clz(*((_QWORD *)this + 3) | 1) ^ 0x3F) + 73) >> 6);
LABEL_13:
    result = v9 + 2;
    goto LABEL_14;
  }
  if (v5 == 101)
  {
    v6 = *((_QWORD *)this + 3);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v9 = result + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
    goto LABEL_13;
  }
LABEL_14:
  *((_DWORD *)this + 8) = result;
  return result;
}

void CoreML::Specification::CategoricalMapping::MergeFrom(CoreML::Specification::CategoricalMapping *this, const CoreML::Specification::CategoricalMapping *a2)
{
  uint64_t v4;
  int v5;
  CoreML::Specification::StringToInt64Map *v6;
  CoreML::Specification::Int64ToStringMap *v7;
  CoreML::Specification::StringToInt64Map *v8;
  const CoreML::Specification::StringToInt64Map *v9;
  CoreML::Specification::Int64ToStringMap *v10;
  const CoreML::Specification::Int64ToStringMap *v11;
  int v12;
  const std::string *v13;
  std::string *v14;
  uint64_t v15;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 9);
  if (v5 != 2)
  {
    if (v5 != 1)
      goto LABEL_17;
    if (*((_DWORD *)this + 9) == 1)
    {
      v6 = (CoreML::Specification::StringToInt64Map *)*((_QWORD *)this + 2);
    }
    else
    {
      CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      v6 = (CoreML::Specification::StringToInt64Map *)operator new();
      v8 = (CoreML::Specification::StringToInt64Map *)CoreML::Specification::StringToInt64Map::StringToInt64Map(v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        v9 = (const CoreML::Specification::StringToInt64Map *)CoreML::Specification::StringToInt64Map::default_instance(v8);
        goto LABEL_14;
      }
    }
    v9 = (const CoreML::Specification::StringToInt64Map *)*((_QWORD *)a2 + 2);
LABEL_14:
    CoreML::Specification::StringToInt64Map::MergeFrom(v6, v9);
    goto LABEL_17;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
    v7 = (CoreML::Specification::Int64ToStringMap *)*((_QWORD *)this + 2);
  }
  else
  {
    CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    v7 = (CoreML::Specification::Int64ToStringMap *)operator new();
    v10 = (CoreML::Specification::Int64ToStringMap *)CoreML::Specification::Int64ToStringMap::Int64ToStringMap(v7);
    *((_QWORD *)this + 2) = v7;
    if (*((_DWORD *)a2 + 9) != 2)
    {
      v11 = (const CoreML::Specification::Int64ToStringMap *)CoreML::Specification::Int64ToStringMap::default_instance(v10);
      goto LABEL_16;
    }
  }
  v11 = (const CoreML::Specification::Int64ToStringMap *)*((_QWORD *)a2 + 2);
LABEL_16:
  CoreML::Specification::Int64ToStringMap::MergeFrom(v7, v11);
LABEL_17:
  v12 = *((_DWORD *)a2 + 10);
  if (v12 == 102)
  {
    v15 = *((_QWORD *)a2 + 3);
    if (*((_DWORD *)this + 10) != 102)
    {
      CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
      *((_DWORD *)this + 10) = 102;
    }
    *((_QWORD *)this + 3) = v15;
  }
  else if (v12 == 101)
  {
    v13 = (const std::string *)*((_QWORD *)a2 + 3);
    if (*((_DWORD *)this + 10) == 101)
    {
      v14 = (std::string *)*((_QWORD *)this + 3);
      if (v14 != (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        std::string::operator=(v14, v13);
        return;
      }
    }
    else
    {
      CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
      *((_DWORD *)this + 10) = 101;
      *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
    }
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v13);
  }
}

void sub_2184BCF94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CategoricalMapping::IsInitialized(CoreML::Specification::CategoricalMapping *this)
{
  return 1;
}

_QWORD *CoreML::Specification::CategoricalMapping::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CategoricalMapping");
}

CoreML::Specification::CategoricalMapping *CoreML::Specification::CategoricalMapping::New(CoreML::Specification::CategoricalMapping *this)
{
  return CoreML::Specification::CategoricalMapping::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CategoricalMapping>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_CategoricalMapping_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184BD1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_39_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184BD4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_20_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_column_modes_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_ml_data_missing_values_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184BD81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_17_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_setup_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184BDB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_sorting_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

CoreML::Specification::CustomModel *CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::CustomModel *result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/CustomModel.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::_CustomModel_CustomModelParamValue_default_instance_ = (uint64_t)&off_24D945148;
  unk_254FFB5E0 = 0;
  qword_254FFB5F0 = 0;
  byte_254FFB5F8 = 1;
  qword_254FFB648 = 0;
  unk_254FFB650 = 0;
  qword_254FFB640 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FFB658 = 0;
  CoreML::Specification::_CustomModel_ParametersEntry_default_instance_ = (uint64_t)&unk_24D9452A8;
  qword_254FFB638 = 0;
  byte_254FFB660 = 1;
  result = CoreML::Specification::CustomModel::CustomModel((CoreML::Specification::CustomModel *)&CoreML::Specification::_CustomModel_default_instance_);
  *((_BYTE *)result + 72) = 1;
  qword_254FFB638 = (uint64_t)&CoreML::Specification::_CustomModel_ParametersEntry_default_instance_;
  qword_254FFB648 = (uint64_t)&CoreML::Specification::_CustomModel_CustomModelParamValue_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(CoreML::Specification::protobuf_CustomModel_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2184BDDB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CustomModel_CustomModelParamValue *CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  *(_QWORD *)this = &off_24D945148;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CustomModel_CustomModelParamValue *)&CoreML::Specification::_CustomModel_CustomModelParamValue_default_instance_)
    CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_2184BDE18(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CustomModel_CustomModelParamValue::~CustomModel_CustomModelParamValue(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  *(_QWORD *)this = &off_24D945148;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::CustomModel_CustomModelParamValue::~CustomModel_CustomModelParamValue(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::clear_value(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 60 || v2 == 20)
  {
    v3 = *(_QWORD *)(this + 16);
    if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x219A19A08](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::CustomModel_CustomModelParamValue *CoreML::Specification::CustomModel_CustomModelParamValue::New(CoreML::Specification::CustomModel_CustomModelParamValue *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::CustomModel_CustomModelParamValue *v3;

  v3 = (CoreML::Specification::CustomModel_CustomModelParamValue *)operator new();
  CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::CustomModel_CustomModelParamValue>(a2, v3);
  return v3;
}

void sub_2184BDF5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CustomModel_CustomModelParamValue>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel_CustomModelParamValue>);
  return result;
}

BOOL CoreML::Specification::CustomModel_CustomModelParamValue::MergePartialFromCodedStream(CoreML::Specification::CustomModel_CustomModelParamValue *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  unsigned int TagFallback;
  unsigned int v14;
  char *v15;
  int v16;
  std::string *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  char *v21;
  unint64_t Varint64Fallback;
  char *v23;
  unint64_t v24;
  _BOOL8 result;
  int v26;
  std::string *v27;
  std::string *v28;
  const char *size;
  char v30;
  char v31;
  uint64_t Varint32Fallback;
  unint64_t v33;

  v5 = (std::string **)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = *(unsigned __int8 **)a2;
        v7 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v7)
        {
          v9 = 0;
        }
        else
        {
          v8 = v6 + 1;
          v9 = *v6;
          if ((char)*v6 >= 1)
          {
            *(_QWORD *)a2 = v8;
            v10 = v9 | 0x100000000;
            if ((v10 & 0x100000000) == 0)
              goto LABEL_9;
            goto LABEL_17;
          }
          if ((unint64_t)v8 < v7)
          {
            v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(_QWORD *)a2 = v6 + 2;
              v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_17;
            }
          }
        }
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
        v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v10 & 0x100000000) == 0)
          goto LABEL_9;
LABEL_17:
        v14 = v10 >> 3;
        if (v10 >> 3 <= 0x27)
          break;
        if (v14 == 40)
        {
          if (v10 != 64)
            goto LABEL_9;
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          v21 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
          {
            Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v30 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v21;
            *(_QWORD *)a2 = v21 + 1;
          }
          *v5 = (std::string *)Varint64Fallback;
          goto LABEL_73;
        }
        if (v14 == 50)
        {
          if (v10 != 144)
            goto LABEL_9;
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          v23 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
          {
            v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v31 & 1) == 0)
              return 0;
          }
          else
          {
            v24 = *v23;
            *(_QWORD *)a2 = v23 + 1;
          }
          *(_BYTE *)v5 = v24 != 0;
LABEL_73:
          *((_DWORD *)this + 7) = v14;
        }
        else
        {
          if (v14 != 60 || v10 != 226)
            goto LABEL_9;
          if (*((_DWORD *)this + 7) != 60)
          {
            CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
            *((_DWORD *)this + 7) = 60;
            *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
LABEL_49:
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v17 = *v5;
            goto LABEL_50;
          }
          v17 = *v5;
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_49;
LABEL_50:
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v17))
            return 0;
        }
      }
      if (v14 == 10)
      {
        if (v10 != 81)
          goto LABEL_9;
        CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
        v33 = 0;
        v18 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
        {
          result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v33);
          if (!result)
            return result;
          v19 = v33;
        }
        else
        {
          v19 = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        *v5 = (std::string *)v19;
        goto LABEL_73;
      }
      if (v14 != 20)
        break;
      if (v10 != 162)
        goto LABEL_9;
      if (*((_DWORD *)this + 7) != 20)
      {
        CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 20;
        *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
LABEL_53:
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v20 = *v5;
        goto LABEL_54;
      }
      v20 = *v5;
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_53;
LABEL_54:
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v20);
      if (!result)
        return result;
      v26 = *((_DWORD *)this + 7);
      v27 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
      if (v26 == 20)
        v27 = *v5;
      if (SHIBYTE(v27->__r_.__value_.__r.__words[2]) < 0)
        v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
      v28 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
      if (v26 == 20)
        v28 = *v5;
      if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
        size = (const char *)v28->__r_.__value_.__l.__size_;
      else
        size = (const char *)HIBYTE(v28->__r_.__value_.__r.__words[2]);
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v27, size, 0, (uint64_t)"CoreML.Specification.CustomModel.CustomModelParamValue.stringValue"))return 0;
    }
    if (v14 == 30 && v10 == 240)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v16 = 0;
      }
      else
      {
        v16 = *v15;
        if ((*v15 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v15 + 1;
LABEL_72:
          *(_DWORD *)v5 = v16;
          goto LABEL_73;
        }
      }
      Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v16);
      v16 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
      goto LABEL_72;
    }
LABEL_9:
    if ((_DWORD)v10)
      v12 = (v10 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v10, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  const char *v8;
  uint64_t *v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 10)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0xA, a2, *(double *)(this + 16), a3);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 20)
  {
    v7 = *(unsigned __int8 **)(v5 + 16);
    if ((char)v7[23] < 0)
    {
      v7 = *(unsigned __int8 **)v7;
      v8 = *(const char **)(*(_QWORD *)(v5 + 16) + 8);
    }
    else
    {
      v8 = (const char *)v7[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v7, v8, 1, (uint64_t)"CoreML.Specification.CustomModel.CustomModelParamValue.stringValue");
    if (*(_DWORD *)(v5 + 28) == 20)
      v9 = *(uint64_t **)(v5 + 16);
    else
      v9 = &_tc_google::protobuf::internal::fixed_address_empty_string;
    this = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(20, (uint64_t)v9, a2);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 30)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(30, *(_DWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 40)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(40, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 50)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(50, *(unsigned __int8 *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 60)
    return _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(60, *(_QWORD *)(v5 + 16), a2);
  return this;
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::ByteSizeLong(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = 0;
  v2 = *((_DWORD *)this + 7);
  if (v2 <= 39)
  {
    if (v2 == 10)
    {
      v1 = 9;
      goto LABEL_18;
    }
    if (v2 != 20)
    {
      if (v2 == 30)
      {
        v3 = *((_DWORD *)this + 4);
        v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 2;
        if (v3 >= 0)
          v1 = v4;
        else
          v1 = 12;
      }
      goto LABEL_18;
    }
    goto LABEL_11;
  }
  switch(v2)
  {
    case '(':
      v8 = (9 * (__clz(*((_QWORD *)this + 2) | 1) ^ 0x3F) + 73) >> 6;
LABEL_16:
      v1 = v8 + 2;
      break;
    case '2':
      v1 = 3;
      break;
    case '<':
LABEL_11:
      v5 = *((_QWORD *)this + 2);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v7 = v6;
      v8 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_16;
  }
LABEL_18:
  *((_DWORD *)this + 6) = v1;
  return v1;
}

void CoreML::Specification::CustomModel_CustomModelParamValue::MergeFrom(CoreML::Specification::CustomModel_CustomModelParamValue *this, const CoreML::Specification::CustomModel_CustomModelParamValue *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  const std::string *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  char v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 > 39)
  {
    switch(v5)
    {
      case '(':
        v10 = *((_QWORD *)a2 + 2);
        if (*((_DWORD *)this + 7) != 40)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 40;
        }
        *((_QWORD *)this + 2) = v10;
        break;
      case '2':
        v12 = *((_BYTE *)a2 + 16);
        if (*((_DWORD *)this + 7) != 50)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 50;
        }
        *((_BYTE *)this + 16) = v12;
        break;
      case '<':
        v7 = (const std::string *)*((_QWORD *)a2 + 2);
        if (*((_DWORD *)this + 7) == 60)
        {
LABEL_22:
          v11 = (std::string *)*((_QWORD *)this + 2);
          if (v11 != (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            std::string::operator=(v11, v7);
            return;
          }
          goto LABEL_30;
        }
        CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
        v8 = 60;
LABEL_29:
        *((_DWORD *)this + 7) = v8;
        *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
LABEL_30:
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, (uint64_t)v7);
        return;
      default:
        return;
    }
  }
  else
  {
    if (v5 != 10)
    {
      if (v5 != 20)
      {
        if (v5 == 30)
        {
          v6 = *((_DWORD *)a2 + 4);
          if (*((_DWORD *)this + 7) != 30)
          {
            CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
            *((_DWORD *)this + 7) = 30;
          }
          *((_DWORD *)this + 4) = v6;
        }
        return;
      }
      v7 = (const std::string *)*((_QWORD *)a2 + 2);
      if (*((_DWORD *)this + 7) == 20)
        goto LABEL_22;
      CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
      v8 = 20;
      goto LABEL_29;
    }
    v9 = *((_QWORD *)a2 + 2);
    if (*((_DWORD *)this + 7) != 10)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 10;
    }
    *((_QWORD *)this + 2) = v9;
  }
}

uint64_t CoreML::Specification::CustomModel_CustomModelParamValue::IsInitialized(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  return 1;
}

_QWORD *CoreML::Specification::CustomModel_CustomModelParamValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CustomModel.CustomModelParamValue");
}

CoreML::Specification::CustomModel *CoreML::Specification::CustomModel::CustomModel(CoreML::Specification::CustomModel *this)
{
  CoreML::Specification::protobuf_CustomModel_2eproto *v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D9451E0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (CoreML::Specification::protobuf_CustomModel_2eproto *)_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::CustomModel *)&CoreML::Specification::_CustomModel_default_instance_)
    CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_2184BE768(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  const CoreML::Specification::CustomModel_CustomModelParamValue *v7;
  std::string *v8;
  CoreML::Specification::CustomModel_CustomModelParamValue *v9;
  _QWORD v10[3];

  result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v10);
  v4 = v10[0];
  if (v10[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *(std::string **)(v4 + 24);
      v7 = (const CoreML::Specification::CustomModel_CustomModelParamValue *)&v6[1];
      v8 = _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[](v5, v6);
      if (v7 != (const CoreML::Specification::CustomModel_CustomModelParamValue *)v8)
      {
        v9 = (CoreML::Specification::CustomModel_CustomModelParamValue *)v8;
        CoreML::Specification::CustomModel_CustomModelParamValue::clear_value((uint64_t)v8);
        CoreML::Specification::CustomModel_CustomModelParamValue::MergeFrom(v9, v7);
      }
      result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v10);
      v4 = v10[0];
    }
    while (v10[0]);
  }
  return result;
}

void CoreML::Specification::CustomModel::~CustomModel(CoreML::Specification::CustomModel *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D9451E0;
  v2 = (_QWORD *)((char *)this + 24);
  CoreML::Specification::CustomModel::SharedDtor((uint64_t)this);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::CustomModel::~CustomModel(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::CustomModel::SharedDtor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 48);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  v4 = *(_QWORD *)(v1 + 56);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    JUMPOUT(0x219A19A08);
  }
  return this;
}

void *CoreML::Specification::CustomModel::default_instance(CoreML::Specification::CustomModel *this)
{
  CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(this);
  return &CoreML::Specification::_CustomModel_default_instance_;
}

CoreML::Specification::CustomModel *CoreML::Specification::CustomModel::New(CoreML::Specification::CustomModel *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::CustomModel *v3;

  v3 = (CoreML::Specification::CustomModel *)operator new();
  CoreML::Specification::CustomModel::CustomModel(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::CustomModel>(a2, v3);
  return v3;
}

void sub_2184BE990(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C405C383CC1);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CustomModel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel>);
  return result;
}

void CoreML::Specification::CustomModel::Clear(CoreML::Specification::CustomModel *this)
{
  uint64_t v2;
  uint64_t v3;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::clear((uint64_t)this + 24);
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 7);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::CustomModel::MergePartialFromCodedStream(CoreML::Specification::CustomModel *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v4;
  char *v5;
  char *v6;
  std::string **v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  std::string *v15;
  std::string *v16;
  const char *size;
  std::string *v18;
  char *v19;
  int VarintSizeAsIntFallback;
  unint64_t v21;
  int v22;
  _tc_google::protobuf::internal *p_p;
  unint64_t v24;
  _BOOL4 v25;
  BOOL v26;
  int v27;
  const char *v28;
  unsigned int TagFallback;
  _QWORD v32[2];
  void *__p;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = (std::string **)((char *)this + 56);
  v5 = (char *)this + 16;
  v6 = (char *)this + 24;
  v7 = (std::string **)((char *)this + 48);
  while (1)
  {
    while (1)
    {
      v8 = *(unsigned __int8 **)a2;
      v9 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v9)
      {
        v11 = 0;
LABEL_55:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v11);
        v12 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v12 & 0x100000000) == 0)
          goto LABEL_56;
        goto LABEL_9;
      }
      v10 = v8 + 1;
      v11 = *v8;
      if ((char)*v8 >= 1)
        break;
      if ((unint64_t)v10 >= v9)
        goto LABEL_55;
      v13 = *v10;
      if ((v11 & ~v13) < 0x80)
        goto LABEL_55;
      *(_QWORD *)a2 = v8 + 2;
      v12 = (v11 + (v13 << 7) - 128) | 0x100000000;
LABEL_9:
      v14 = v12 >> 3;
      if (v12 >> 3 == 40)
      {
        if (v12 != 66)
          goto LABEL_56;
        v18 = *v4;
        if (*v4 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v18 = *v4;
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v18))
          return 0;
        v16 = *v4;
        if (SHIBYTE((*v4)->__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
          size = (const char *)(*v4)->__r_.__value_.__l.__size_;
        }
        else
        {
          size = (const char *)HIBYTE((*v4)->__r_.__value_.__r.__words[2]);
        }
        v28 = "CoreML.Specification.CustomModel.description";
LABEL_52:
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v16, size, 0, (uint64_t)v28))return 0;
      }
      else
      {
        if (v14 != 30)
        {
          if (v14 != 10 || v12 != 82)
            goto LABEL_56;
          v15 = *v7;
          if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v15 = *v7;
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v15))
            return 0;
          v16 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
            size = (const char *)(*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          v28 = "CoreML.Specification.CustomModel.className";
          goto LABEL_52;
        }
        if (v12 != 242)
          goto LABEL_56;
        v32[0] = v5;
        v32[1] = v6;
        v34 = 0;
        v35 = 0;
        __p = 0;
        v36 = 0;
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_62;
        }
        else
        {
          VarintSizeAsIntFallback = *v19;
          *(_QWORD *)a2 = v19 + 1;
        }
        v21 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
        v22 = v21;
        if ((v21 & 0x8000000000000000) == 0
          && _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::MergePartialFromCodedStream((uint64_t)v32, a2)&& _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v22))
        {
          if (v35 >= 0)
            p_p = (_tc_google::protobuf::internal *)&__p;
          else
            p_p = (_tc_google::protobuf::internal *)__p;
          if (v35 >= 0)
            v24 = HIBYTE(v35);
          else
            v24 = v34;
          v25 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, (const char *)v24, 0, (uint64_t)"CoreML.Specification.CustomModel.ParametersEntry.key");
          v26 = v25;
          if (v25)
            v27 = 0;
          else
            v27 = 6;
          goto LABEL_41;
        }
LABEL_62:
        v26 = 0;
        v27 = 6;
LABEL_41:
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        if (SHIBYTE(v35) < 0)
          operator delete(__p);
        if (!v26 && v27)
          return 0;
      }
    }
    *(_QWORD *)a2 = v10;
    v12 = v11 | 0x100000000;
    if ((v12 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_56:
    if (!(_DWORD)v12 || (v12 & 7) == 4)
      return 1;
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v12, a3))return 0;
  }
}

void sub_2184BED4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::CustomModel::SerializeWithCachedSizes(CoreML::Specification::CustomModel *this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  _tc_google::protobuf::internal *v4;
  const char *v5;
  unint64_t v6;
  uint64_t v8;
  _tc_google::protobuf::io::CodedOutputStream *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  const char *v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _tc_google::protobuf::io::CodedOutputStream *v21;
  uint64_t v22;
  _tc_google::protobuf::internal *v23;
  const char *v24;
  uint64_t result;
  const char *v26;
  _QWORD v27[3];

  v4 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 6);
  if (*((char *)v4 + 23) < 0)
  {
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      goto LABEL_7;
    v4 = *(_tc_google::protobuf::internal **)v4;
    goto LABEL_6;
  }
  v5 = (const char *)*((unsigned __int8 *)v4 + 23);
  if (*((_BYTE *)v4 + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v4, v5, 1, (uint64_t)"CoreML.Specification.CustomModel.className");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(10, *((_QWORD *)this + 6), a2);
  }
LABEL_7:
  v6 = **((_QWORD **)this + 5);
  if (!v6)
    goto LABEL_50;
  if (*((_BYTE *)a2 + 26))
  {
    if (v6 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_30:
      v14 = operator new[]();
      _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v27);
      v15 = v27[0];
      if (v27[0])
      {
        v16 = 0;
        do
        {
          *(_QWORD *)(v14 + 8 * v16) = *(_QWORD *)(v15 + 24);
          _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v27);
          ++v16;
          v15 = v27[0];
        }
        while (v27[0]);
      }
      else
      {
        v16 = 0;
      }
      v17 = 126 - 2 * __clz(v16);
      if (v16)
        v18 = v17;
      else
        v18 = 0;
      std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**,false>(v14, (const void ***)(v14 + 8 * v16), (uint64_t)v27, v18, 1);
      if (v16)
      {
        v19 = 0;
        v20 = (uint64_t *)v14;
        do
        {
          v22 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*v20, *v20 + 24, *((_tc_google::protobuf::Arena **)this + 2));
          if (v19 != v22)
          {
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            v19 = v22;
          }
          _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1E, v19, a2, v21);
          v23 = (_tc_google::protobuf::internal *)*v20;
          if (*(char *)(*v20 + 23) < 0)
          {
            v23 = *(_tc_google::protobuf::internal **)v23;
            v24 = *(const char **)(*v20 + 8);
          }
          else
          {
            v24 = (const char *)*(unsigned __int8 *)(*v20 + 23);
          }
          _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v23, v24, 1, (uint64_t)"CoreML.Specification.CustomModel.ParametersEntry.key");
          ++v20;
          --v16;
        }
        while (v16);
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      MEMORY[0x219A199F0](v14, 0x60C8044C4A2DFLL);
      goto LABEL_50;
    }
  }
  else if (v6 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_30;
  }
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v27);
  v8 = 0;
  while (v27[0])
  {
    v10 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v27[0] + 24), *(_QWORD *)(v27[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 2));
    if (v8 != v10)
    {
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v8 = v10;
    }
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1E, v8, a2, v9);
    v11 = *(unsigned __int8 **)(v27[0] + 24);
    if ((char)v11[23] < 0)
    {
      v11 = *(unsigned __int8 **)v11;
      v12 = *(const char **)(*(_QWORD *)(v27[0] + 24) + 8);
    }
    else
    {
      v12 = (const char *)v11[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v11, v12, 1, (uint64_t)"CoreML.Specification.CustomModel.ParametersEntry.key");
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v27);
  }
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
LABEL_50:
  result = *((_QWORD *)this + 7);
  if (*(char *)(result + 23) < 0)
  {
    v26 = *(const char **)(result + 8);
    if (!v26)
      return result;
    result = *(_QWORD *)result;
    goto LABEL_55;
  }
  v26 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_55:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v26, 1, (uint64_t)"CoreML.Specification.CustomModel.description");
    return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(40, *((_QWORD *)this + 7), a2);
  }
  return result;
}

void sub_2184BF070(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CustomModel::ByteSizeLong(CoreML::Specification::CustomModel *this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];

  v2 = **((_QWORD **)this + 5);
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v14);
  v3 = 0;
  v4 = 2 * v2;
  while (v14[0])
  {
    v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v14[0] + 24), *(_QWORD *)(v14[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 2));
    if (v3 != (_DWORD *)v5)
    {
      if (v3)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v3 = (_DWORD *)v5;
    }
    v6 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v3);
    v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v14);
  }
  if (v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v7 = *((_QWORD *)this + 6);
  v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_15;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_15;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if ((v8 & 0x80u) == 0)
    v9 = v8;
  v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_15:
  v10 = *((_QWORD *)this + 7);
  v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(v10 + 8);
  if ((v11 & 0x80u) == 0)
    v12 = v11;
  v4 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_20:
  *((_DWORD *)this + 16) = v4;
  return v4;
}

void sub_2184BF258(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void CoreML::Specification::CustomModel::MergeFrom(CoreML::Specification::CustomModel *this, const CoreML::Specification::CustomModel *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::string *v8;
  std::string **v9;
  std::string *v10;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
  v5 = *((_QWORD *)a2 + 6);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 6);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v5);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 7);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      return;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    return;
  }
  v10 = (std::string *)*((_QWORD *)this + 7);
  v9 = (std::string **)((char *)this + 56);
  v8 = v10;
  if (v10 != (std::string *)v7)
  {
    if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, v7);
    else
      std::string::operator=(v8, (const std::string *)v7);
  }
}

uint64_t CoreML::Specification::CustomModel::IsInitialized(CoreML::Specification::CustomModel *this)
{
  return 1;
}

_QWORD *CoreML::Specification::CustomModel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CustomModel");
}

CoreML::Specification::CustomModel_CustomModelParamValue *CoreML::Specification::CustomModel_CustomModelParamValue::New(CoreML::Specification::CustomModel_CustomModelParamValue *this)
{
  return CoreML::Specification::CustomModel_CustomModelParamValue::New(this, 0);
}

CoreML::Specification::CustomModel *CoreML::Specification::CustomModel::New(CoreML::Specification::CustomModel *this)
{
  return CoreML::Specification::CustomModel::New(this, 0);
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x219A19A08](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(a1, &v5, (uint64_t)&v7);
    result = *(double *)&v7;
    v3 = v7;
    v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  if (!*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6)
    {
      v7 = _tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~MapPair(v6);
      MEMORY[0x219A19A08](v7, 0x10B2C4015637A22);
    }
  }
  v9 = *(_OWORD *)a2;
  v10 = a2[2];
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::erase(*(_QWORD **)(a1 + 16), (uint64_t)&v9);
  result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = a2[2];
  return result;
}

uint64_t _tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~MapPair(uint64_t a1)
{
  CoreML::Specification::CustomModel_CustomModelParamValue::~CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D9452A8;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, _tc_google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = this;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D9452A8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = CoreML::Specification::CustomModel_CustomModelParamValue::clear_value(result);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, char **this, unsigned int a3)
{
  std::string **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  _BOOL8 result;
  int v10;
  char *v11;
  CoreML::Specification::CustomModel_CustomModelParamValue *Aligned;
  _tc_google::protobuf::Arena *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  unint64_t v16;
  unsigned int v17;
  int v18;

  v5 = (std::string **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *this;
        if (*this >= this[1])
        {
          TagFallback = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *this = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)this, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(std::string **)(a1 + 16);
        if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v8 = *(std::string **)(a1 + 16);
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(this, v8);
        if (!result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = *this;
        if (*this < this[1] && *v11 == 18)
        {
          *this = v11 + 1;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::CustomModel_CustomModelParamValue **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(_tc_google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
          _tc_google::protobuf::Arena::AddListNode(v13, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>);
        }
        else
        {
          Aligned = (CoreML::Specification::CustomModel_CustomModelParamValue *)operator new();
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v14 = *this;
      if (*this >= this[1] || *v14 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)this);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v14;
        *this = v14 + 1;
      }
      v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)this, VarintSizeAsIntFallback);
      if ((v16 & 0x8000000000000000) != 0)
        return 0;
      v18 = v16;
      result = CoreML::Specification::CustomModel_CustomModelParamValue::MergePartialFromCodedStream(Aligned, (_tc_google::protobuf::io::CodedInputStream *)this, v17);
      if (!result)
        return result;
      result = _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)this, v18);
      if (!result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*this == this[1] && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_2184BF8B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::CustomModel_CustomModelParamValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::CustomModel_CustomModelParamValue *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::CustomModel_CustomModelParamValue::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24D945380;
  if (*(_QWORD *)(a1 + 8) != a1 && !*(_QWORD *)(a1 + 32))
  {
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  _tc_google::protobuf::Arena *v7;
  CoreML::Specification::CustomModel_CustomModelParamValue *Aligned;
  const CoreML::Specification::CustomModel_CustomModelParamValue *v9;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(_tc_google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
          _tc_google::protobuf::Arena::AddListNode(v7, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>);
        }
        else
        {
          Aligned = (CoreML::Specification::CustomModel_CustomModelParamValue *)operator new();
          CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v9 = (const CoreML::Specification::CustomModel_CustomModelParamValue *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::CustomModel_CustomModelParamValue::MergeFrom(*(CoreML::Specification::CustomModel_CustomModelParamValue **)(a1 + 24), v9);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_2184BFB34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel_CustomModelParamValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::Init(uint64_t a1)
{
  _tc_google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;

  v2 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
    result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap>);
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_2184BFC0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[](uint64_t a1, std::string *a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_2184BFD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, std::string *a2)
{
  _tc_google::protobuf::Arena *v4;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v6;
  _tc_google::protobuf::Arena *v7;

  v4 = *a1;
  if (v4)
  {
    Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 56);
    v6 = *a1;
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
    v7 = *a1;
    CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)&Aligned[1]);
    _tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::CustomModel_CustomModelParamValue>(v7, &Aligned[1]);
    std::string::operator=(Aligned, a2);
  }
  else
  {
    Aligned = (std::string *)operator new();
    _tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::MapPair(Aligned, (__int128 *)a2);
  }
  return Aligned;
}

void sub_2184BFDC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B2C4015637A22);
  _Unwind_Resume(a1);
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _tc_google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x24BEDB790], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _tc_google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (_tc_google::protobuf::Arena *)a1[5];
  v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_2184C0338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_2184C0394(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::MapPair(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)&this[1]);
  return this;
}

void sub_2184C0400(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::CustomModel_CustomModelParamValue>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CustomModel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  CoreML::Specification::CustomModel_CustomModelParamValue *v7;
  char *v8;
  int VarintSizeAsIntFallback;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  unsigned int v17;
  int v18;

  v4 = *(_BYTE **)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1) || *v4 != 10)
  {
    v10 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v10);
    *v10 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(_QWORD *)this = v4 + 1;
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, (std::string *)(a1 + 16)))
    return 0;
  if ((int)(*((_DWORD *)this + 2) - *(_QWORD *)this) < 1
    || **(_BYTE **)this != 18
    || (v5 = *(_QWORD *)(a1 + 8),
        v6 = **(_QWORD **)(v5 + 16),
        *(_QWORD *)(a1 + 40) = _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[](v5, (std::string *)(a1 + 16)), v6 == **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16)))
  {
LABEL_13:
    v11 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    v12 = *(_QWORD *)(a1 + 48);
    if (v12 != v11)
    {
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *(_QWORD *)(a1 + 48) = v11;
    }
    v13 = *(std::string **)(v11 + 16);
    *(_DWORD *)(v11 + 40) |= 1u;
    if (v13 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v11 + 16), *(_tc_google::protobuf::Arena **)(v11 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v13 = *(std::string **)(v11 + 16);
    }
    std::string::operator=(v13, (const std::string *)(a1 + 16));
    v14 = (*(uint64_t (**)(_QWORD, _tc_google::protobuf::io::CodedInputStream *))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), this);
    if ((_DWORD)v14)
      v15.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::UseKeyAndValueFromEntry(a1);
    if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v15))
      *(_QWORD *)(a1 + 48) = 0;
    return v14;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip(this, 1u);
  v7 = *(CoreML::Specification::CustomModel_CustomModelParamValue **)(a1 + 40);
  v8 = *(char **)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1) || *v8 < 0)
  {
    VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(this);
    if (VarintSizeAsIntFallback < 0)
    {
LABEL_29:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
      return 0;
    }
  }
  else
  {
    VarintSizeAsIntFallback = *v8;
    *(_QWORD *)this = v8 + 1;
  }
  v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(this, VarintSizeAsIntFallback);
  if ((v16 & 0x8000000000000000) != 0)
    goto LABEL_29;
  v18 = v16;
  if (!CoreML::Specification::CustomModel_CustomModelParamValue::MergePartialFromCodedStream(v7, this, v17)
    || !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(this, v18))
  {
    goto LABEL_29;
  }
  if (*(_QWORD *)this != *((_QWORD *)this + 1)
    || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
  {
    return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::ReadBeyondKeyValuePair(a1, (uint64_t)this);
  }
  *((_DWORD *)this + 8) = 0;
  v14 = 1;
  *((_BYTE *)this + 36) = 1;
  return v14;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(uint64_t a1, unsigned __int8 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(_QWORD *)(a1 + 16), a2, 0, &v6);
  if (!(_QWORD)v6)
    return 0;
  v4 = v6;
  v5 = v7;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Aligned;
  _tc_google::protobuf::Arena *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __n128 v16;

  v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(_QWORD *)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(_tc_google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
      _tc_google::protobuf::Arena::AddListNode(v8, (void *)Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>);
    }
    else
    {
      Aligned = operator new();
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  if (v6 != Aligned)
  {
    v9 = *(_QWORD *)(Aligned + 16);
    *(_QWORD *)(Aligned + 16) = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = v9;
    v10 = *(_DWORD *)(Aligned + 28);
    *(_DWORD *)(Aligned + 28) = *(_DWORD *)(v6 + 28);
    *(_DWORD *)(v6 + 28) = v10;
    v11 = *(_DWORD *)(Aligned + 24);
    *(_DWORD *)(Aligned + 24) = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v11;
  }
  _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  if ((uint64_t *)v13 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v12 + 16), *(_tc_google::protobuf::Arena **)(v12 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v13 = *(_QWORD *)(v12 + 16);
  }
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  v14 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v15)
    v16.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v16))
    *(_QWORD *)(a1 + 48) = 0;
  return v15;
}

void sub_2184C08C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  _tc_google::protobuf::Arena *v1;
  uint64_t result;

  v1 = *a1;
  if (*a1)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D9452A8;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

double _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  std::string *v3;
  double result;
  uint64_t v5;
  uint64_t Aligned;
  _tc_google::protobuf::Arena *v7;
  int v8;
  int data;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[](*(_QWORD *)(a1 + 8), (std::string *)(a1 + 16));
  *(_QWORD *)(a1 + 40) = v3;
  v5 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v5 + 40) |= 2u;
  Aligned = *(_QWORD *)(v5 + 24);
  if (!Aligned)
  {
    v7 = *(_tc_google::protobuf::Arena **)(v5 + 32);
    if (v7)
    {
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
      _tc_google::protobuf::Arena::AddListNode(v7, (void *)Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>);
    }
    else
    {
      Aligned = operator new();
      CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)Aligned);
    }
    *(_QWORD *)(v5 + 24) = Aligned;
    v3 = *(std::string **)(a1 + 40);
  }
  if ((std::string *)Aligned != v3)
  {
    result = *(double *)&v3->__r_.__value_.__r.__words[2];
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(Aligned + 16);
    *(double *)(Aligned + 16) = result;
    v8 = HIDWORD(v3[1].__r_.__value_.__r.__words[0]);
    HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(Aligned + 28);
    *(_DWORD *)(Aligned + 28) = v8;
    data = (int)v3[1].__r_.__value_.__l.__data_;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = *(_DWORD *)(Aligned + 24);
    *(_DWORD *)(Aligned + 24) = data;
  }
  return result;
}

void sub_2184C0A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A3C40EED1C14FLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  const void ***v8;
  const void ***v9;
  const void ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void ***v16;
  const void **v17;
  const void ***v18;
  char v19;
  BOOL v20;
  const void **v21;

  v8 = (const void ***)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v10 - 1, v10))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
            v10 = (const void ***)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  const void ***v8;
  const void **v9;
  const void ***v10;
  const void ***v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void ***v15;
  const void ***v16;
  const void **v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = this;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &unk_24D945450;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::CustomModel_CustomModelParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _GLOBAL__sub_I_CustomModel_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C1204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>(_QWORD *a1, double *a2, double *a3, unint64_t a4)
{
  double *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  double v16;
  char *v17;
  char *v18;
  unint64_t v19;
  double *v20;
  uint64_t v21;
  double v22;
  char *v23;
  char *v24;
  double v25;
  char *v26;
  char *v27;
  double v28;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 2)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 2;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6++;
          *(_DWORD *)v27 = (int)v28;
          v27 += 4;
          v26 += 4;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 8 * v19;
        do
        {
          v22 = *v6++;
          *(_DWORD *)result = (int)v22;
          result += 4;
          v21 -= 8;
        }
        while (v21);
      }
      v23 = v12;
      if (v20 != a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_DWORD *)v24 = (int)v25;
          v24 += 4;
          v23 += 4;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_DWORD *)v15 = (int)v16;
        v15 += 4;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void std::vector<int>::__assign_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(_QWORD *a1, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  char v16;

  v8 = a1[2];
  v9 = (_DWORD *)*a1;
  if (a4 <= (v8 - *a1) >> 2)
  {
    v12 = (uint64_t)(a1[1] - (_QWORD)v9) >> 2;
    if (v12 >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,int *>((uint64_t)&v16, a2, a3, v9);
      a1[1] = v14;
    }
    else
    {
      v13 = &a2[16 * v12];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,int *>((uint64_t)&v15, a2, v13, v9);
      std::vector<int>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t)a1, v13, a3);
    }
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<float>::__vallocate[abi:ne180100](a1, v11);
    std::vector<int>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t)a1, a2, a3);
  }
}

void std::vector<int>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v5;
  _DWORD *v6;

  if (a2 == a3)
  {
    v6 = *(_DWORD **)(a1 + 8);
  }
  else
  {
    v5 = a2;
    v6 = *(_DWORD **)(a1 + 8);
    do
    {
      std::allocator<int>::construct[abi:ne180100]<int,turi::flexible_type const&>(a1 + 16, v6, v5);
      v5 += 16;
      ++v6;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(a1 + 8) = v6;
}

void sub_2184C1594(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::allocator<int>::construct[abi:ne180100]<int,turi::flexible_type const&>(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  std::runtime_error *exception;
  std::string *v21;
  __int128 v22;
  void *__p[2];
  void *v24[2];
  __int128 v25;
  __int128 v26;
  std::string v27;
  size_t __idx;

  LODWORD(v4) = 0;
  switch(a3[12])
  {
    case 0:
      v4 = *(_QWORD *)a3;
      goto LABEL_29;
    case 1:
      v4 = (uint64_t)*(double *)a3;
      goto LABEL_29;
    case 2:
      v8 = *(_QWORD *)a3;
      v9 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v10 = (char *)v9;
      if (*(char *)(v8 + 31) < 0)
        v10 = *v9;
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      LODWORD(v4) = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v24[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v8 + 31) < 0)
        v11 = *(_QWORD *)(v8 + 16);
      else
        v11 = *(unsigned __int8 *)(v8 + 31);
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v21 = std::string::append(&v27, " cannot be interpreted as an integer");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v24[0] = (void *)v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v5 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(_QWORD *)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v12 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
      goto LABEL_28;
    case 5:
      v13 = *(_QWORD *)a3;
      __p[1] = 0;
      v24[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
      goto LABEL_28;
    case 6:
      v4 = (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v14 = *(_QWORD *)a3;
      v15 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v15;
      if (v15)
      {
        v16 = v15 + 2;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(_OWORD *)(v14 + 24);
      v19 = *(_OWORD *)(v14 + 56);
      v25 = *(_OWORD *)(v14 + 40);
      v26 = v19;
      *(_OWORD *)v24 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v25 + 1))
      {
        *(_QWORD *)&v26 = *((_QWORD *)&v25 + 1);
        operator delete(*((void **)&v25 + 1));
      }
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      v4 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_29;
      v6 = (unint64_t *)((char *)__p[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
LABEL_28:
      LODWORD(v4) = 0;
LABEL_29:
      *a2 = v4;
      return;
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_2184C1874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    if ((v15 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

_BYTE *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,int *>(uint64_t a1, _BYTE *a2, _BYTE *a3, _DWORD *a4)
{
  _BYTE *v5;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  std::runtime_error *exception;
  std::string *v25;
  __int128 v26;
  unsigned int *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::string __p;
  std::string::size_type v33;
  void *v34;
  void *v35;
  std::string v36;
  size_t __idx[2];

  v5 = a2;
  if (a2 != a3)
  {
    while (2)
    {
      LODWORD(v7) = 0;
      switch(v5[12])
      {
        case 0:
          v7 = *(_QWORD *)v5;
          goto LABEL_30;
        case 1:
          v7 = (uint64_t)*(double *)v5;
          goto LABEL_30;
        case 2:
          v12 = *(_QWORD *)v5;
          v13 = (char **)(*(_QWORD *)v5 + 8);
          __idx[0] = 0;
          v14 = (char *)v13;
          if (*(char *)(v12 + 31) < 0)
            v14 = *v13;
          std::string::basic_string[abi:ne180100]<0>(&__p, v14);
          LODWORD(v7) = std::stoll(&__p, __idx, 10);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (*(char *)(v12 + 31) < 0)
            v15 = *(_QWORD *)(v12 + 16);
          else
            v15 = *(unsigned __int8 *)(v12 + 31);
          if (__idx[0] != v15)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v25 = std::string::append(&v36, " cannot be interpreted as an integer");
            v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__p);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_30;
        case 3:
          v8 = *(_QWORD *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v8 + 8), *(_QWORD *)(v8 + 16), (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_29;
        case 4:
          v16 = *(_QWORD *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
          goto LABEL_29;
        case 5:
          v17 = *(_QWORD *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
          goto LABEL_29;
        case 6:
          v7 = (uint64_t)(*(_QWORD *)v5 << 8) >> 8;
          goto LABEL_30;
        case 7:
          goto LABEL_30;
        case 8:
          v18 = *(_QWORD *)v5;
          v19 = *(unsigned int **)(*(_QWORD *)v5 + 16);
          v28 = v19;
          if (v19)
          {
            v20 = v19 + 2;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = *(_OWORD *)(v18 + 24);
          v23 = *(_OWORD *)(v18 + 56);
          v30 = *(_OWORD *)(v18 + 40);
          v31 = v23;
          v29 = v22;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v28);
          goto LABEL_29;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v5 + 8);
          turi::flexible_type_fail(0);
          if (v34)
          {
            v35 = v34;
            operator delete(v34);
          }
          if (__p.__r_.__value_.__r.__words[2])
          {
            v33 = __p.__r_.__value_.__r.__words[2];
            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
          }
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
LABEL_29:
          LODWORD(v7) = 0;
LABEL_30:
          *a4++ = v7;
          v5 += 16;
          if (v5 != a3)
            continue;
          v5 = a3;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      break;
    }
  }
  return v5;
}

void sub_2184C1C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;
  uint64_t v24;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v24 - 97) < 0)
  {
    operator delete(*(void **)(v24 - 120));
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void __cxx_global_var_init_16_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_row_slicing_utilities_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C1FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_11_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sframe_index_mapping_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C22CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_27_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_side_features_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C25DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_9_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void _GLOBAL__sub_I_basic_column_statistics_cpp()
{
  _QWORD *v0;
  uint64_t v1;
  void *__p[2];
  char v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD");
  v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::v2::ml_data_internal::__ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD__register__instance, __p, &turi::v2::ml_data_internal::ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD, 1, v4);
  v0 = v5;
  if (v5 == v4)
  {
    v1 = 4;
    v0 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_6:
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_2184C2808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _GLOBAL__sub_I_basic_column_statistics_cpp_cold_1((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2184C29E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_12_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_column_statistics_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C2CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_14_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_testing_utils_cpp_2()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_python_model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;

  if (*(_BYTE *)(a3 + 248))
    v3 = *(_BYTE *)(a3 + 249) == 0;
  else
    v3 = 1;
  if (v3)
    turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
  turi::sframe_impl::do_copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &>(a1, a2, (uint64_t *)a3);
}

void sub_2184C307C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::sframe_impl::do_copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6[5];
  double v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a1;
  v8 = (*(uint64_t (**)(uint64_t *))(*a3 + 24))(a3);
  v7 = (double)(unint64_t)((a2 - a1) >> 3) / (double)v8;
  v6[0] = &v10;
  v6[1] = (uint64_t *)&v7;
  v6[2] = (uint64_t *)&v8;
  v6[3] = &v9;
  v6[4] = a3;
  turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(0, v8, v6);
}

void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<unsigned long *> const&)::{lambda(void)#1}>(std::__wrap_iter<unsigned long *>)::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::sframe_impl::do_copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2184C32F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::sframe_impl::do_copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *i;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *result;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  int v44;
  char v45;
  _QWORD v46[3];
  _QWORD *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _BYTE v50[24];
  _BYTE *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *(double *)a1[1];
  v4 = **a1;
  if (*a1[2] - 1 == a2)
    v5 = (uint64_t *)*a1[3];
  else
    v5 = (uint64_t *)(v4 + 8 * (uint64_t)(v3 * (double)(a2 + 1)));
  (*(void (**)(_QWORD *__return_ptr, uint64_t *, unint64_t))(*a1[4] + 32))(v46, a1[4], a2);
  for (i = (uint64_t *)(v4 + 8 * (uint64_t)(v3 * (double)a2)); i != v5; ++i)
  {
    v45 = 0;
    v44 = 0;
    v43 = *i;
    if (!v49)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v49 + 48))(v49, &v43);
    switch(v45)
    {
      case 2:
        v7 = (unint64_t *)v43;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          v10 = v43;
          if (v43)
          {
            if (*(char *)(v43 + 31) < 0)
              operator delete(*(void **)(v43 + 8));
            v11 = v10;
            v12 = 0x1012C404EF22A49;
            goto LABEL_47;
          }
        }
        break;
      case 3:
        v24 = (unint64_t *)v43;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = v43;
          if (v43)
          {
            v28 = *(void **)(v43 + 8);
            if (v28)
            {
              *(_QWORD *)(v43 + 16) = v28;
              operator delete(v28);
            }
            v11 = v27;
            v12 = 0x1080C409938AC02;
            goto LABEL_47;
          }
        }
        break;
      case 4:
        v13 = (unint64_t *)v43;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = v43;
          if (v43)
          {
            v42 = (void **)(v43 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
            goto LABEL_40;
          }
        }
        break;
      case 5:
        v29 = (unint64_t *)v43;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v16 = v43;
          if (v43)
          {
            v42 = (void **)(v43 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_40:
            v11 = v16;
            v12 = 0x1020C405E66F15BLL;
            goto LABEL_47;
          }
        }
        break;
      case 8:
        v32 = (unint64_t *)v43;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v35 = v43;
          if (v43)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v43 + 16));
            v11 = v35;
            v23 = -235920773;
            goto LABEL_46;
          }
        }
        break;
      case 9:
        v17 = (unint64_t *)v43;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = v43;
          if (v43)
          {
            v21 = *(void **)(v43 + 48);
            if (v21)
            {
              *(_QWORD *)(v43 + 56) = v21;
              operator delete(v21);
            }
            v22 = *(void **)(v20 + 24);
            if (v22)
            {
              *(_QWORD *)(v20 + 32) = v22;
              operator delete(v22);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v20 + 8);
            v11 = v20;
            v23 = 2071181815;
LABEL_46:
            v12 = v23 | 0x1030C4000000000;
LABEL_47:
            MEMORY[0x219A19A08](v11, v12);
          }
        }
        break;
      default:
        continue;
    }
  }
  v36 = v51;
  if (v51 == v50)
  {
    v37 = 4;
    v36 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_54;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_54:
  v38 = v49;
  if (v49 == v48)
  {
    v39 = 4;
    v38 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_59;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_59:
  result = v47;
  if (v47 == v46)
  {
    v41 = 4;
    result = v46;
  }
  else
  {
    if (!v47)
      return result;
    v41 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v41))();
}

void sub_2184C369C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<unsigned long *> const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000218712780 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x8000000218712780 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<unsigned long *> const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1;
  uint64_t ***v2;

  v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    v2 = result;
    do
      result = (uint64_t ***)turi::sframe_impl::do_copy<std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

void __cxx_global_var_init_36()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ball_tree_neighbors_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C3BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_39_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_brute_force_neighbors_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C3EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_9()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t *Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,1,long>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  BOOL v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  int v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;

  if ((v4 & 1) == 0)
  {
    v39 = result;
    v36 = a3;
    v37 = a2;
    v38 = a4;
    a2 = v37;
    a4 = v38;
    a3 = v36;
    v35 = v34;
    result = v39;
    if (v35)
    {
      Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes = xmmword_2186F1960;
      qword_254FD4068 = 0x80000;
      a2 = v37;
      a4 = v38;
      result = v39;
      a3 = v36;
    }
  }
  v5 = *((_QWORD *)&Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes + 1);
  v6 = Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes;
  v7 = qword_254FD4068;
  v8 = *result;
  if (a4 < 2)
  {
    v23 = *a2;
    v24 = *a3;
    if (*a2 > *a3)
      v24 = *a2;
    if (v8 > v24)
      v24 = *result;
    if (v24 >= 48)
    {
      if ((uint64_t)((((uint64_t)Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes
                     - 192)
                    / 80) & 0xFFFFFFFFFFFFFFF8) <= 1)
        v25 = 1;
      else
        v25 = (((uint64_t)Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes - 192)
             / 80) & 0xFFFFFFFFFFFFFFF8;
      if (v8 <= v25)
      {
        v26 = *result;
      }
      else
      {
        v26 = v25;
        if (v8 % v25)
          v26 = v25 - 8 * ((v25 + ~(v8 % v25)) / (8 * (v8 / v25) + 8));
        *result = v26;
        v23 = *a2;
      }
      v27 = v6 - 192 - 8 * v23 * v26;
      if (v27 >= 32 * v26)
        v28 = v27 / (unint64_t)(8 * v26);
      else
        v28 = 0x480000uLL / (32 * v25);
      if (v28 >= (uint64_t)(0x180000uLL / (16 * v26)))
        v28 = 0x180000uLL / (16 * v26);
      v29 = v28 & 0xFFFFFFFFFFFFFFFCLL;
      v30 = *a3;
      if (*a3 <= v29)
      {
        if (v8 != v26)
          return result;
        v31 = 8 * v8 * v30;
        v32 = v23;
        if (v31 >= 1025)
        {
          v33 = v7 != 0;
          v32 = 576;
          if (v23 < 576)
            v32 = v23;
          if (v33 && (unint64_t)v31 <= 0x8000)
          {
            v6 = v5;
          }
          else
          {
            v32 = v23;
            v6 = 1572864;
          }
        }
        v21 = v6 / (24 * v8);
        if (v32 < v21)
          v21 = v32;
        if (v21 < 7)
        {
          if (!v21)
            return result;
        }
        else
        {
          v21 = 6 * (v21 / 6uLL);
        }
        if (v23 % v21)
          v21 -= 6 * ((v21 - v23 % v21) / (6 * (v23 / v21) + 6));
        goto LABEL_64;
      }
      if (v30 % v29)
        v29 -= 4 * ((v29 - v30 % v29) / (4 * (v30 / v29) + 4));
      *a3 = v29;
    }
  }
  else
  {
    v9 = ((uint64_t)Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes - 192) / 80;
    if (v9 >= 320)
      v9 = 320;
    if (v9 < v8)
    {
      if (v9 <= 0)
        v10 = -(-v9 & 7);
      else
        v10 = v9 & 7;
      v8 = v9 - v10;
      *result = v8;
    }
    v11 = (v5 - v6) / (32 * v8);
    v12 = *a3;
    v13 = (a4 - 1 + *a3) / a4;
    if (v13 + 3 <= 0)
      v14 = -(-(v13 + 3) & 3);
    else
      v14 = (v13 + 3) & 3;
    if (v13 + 3 - v14 < v12)
      v12 = v13 + 3 - v14;
    if (v11 <= 0)
      v15 = -(-v11 & 3);
    else
      v15 = v11 & 3;
    v16 = v11 - v15;
    if (v11 <= v13)
      v17 = v16;
    else
      v17 = v12;
    *a3 = v17;
    v18 = __OFSUB__(v7, v5);
    v19 = v7 - v5;
    if (!((v19 < 0) ^ v18 | (v19 == 0)))
    {
      v20 = v19 / (unint64_t)(8 * a4 * *result);
      v21 = *a2;
      v22 = (a4 - 1 + *a2) / a4;
      if (v20 < 6 || v20 >= v22)
      {
        if (6 * ((v22 + 5) / 6) < v21)
          v21 = 6 * ((v22 + 5) / 6);
      }
      else
      {
        v21 = 6 * (v20 / 6uLL);
      }
LABEL_64:
      *a2 = v21;
    }
  }
  return result;
}

void Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,6,2,0,false,false>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int64_t i;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v5 = 6 * (a5 / 6);
  v6 = v5 + 4 * ((int)(((a5 % 6) + (((a5 % 6) >> 13) & 3)) << 24) >> 26);
  if (a5 >= 0)
    v7 = a5;
  else
    v7 = a5 + 1;
  if (v5 < 1)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if (a4 >= 1)
      {
        v10 = 0;
        v11 = (_OWORD *)(a2 + 32 + 8 * v9);
        v9 += 6 * a4;
        do
        {
          v12 = a3[1] * v10;
          v13 = *(_OWORD *)(*a3 + 8 * (v8 + 2 + v12));
          v14 = *(_OWORD *)(*a3 + 8 * (v8 + 4 + v12));
          *(v11 - 2) = *(_OWORD *)(*a3 + 8 * (v12 + v8));
          *(v11 - 1) = v13;
          *v11 = v14;
          v11 += 3;
          ++v10;
        }
        while (a4 != v10);
      }
      v8 += 6;
    }
    while (v8 < v5);
  }
  for (i = v7 & 0xFFFFFFFFFFFFFFFELL; v8 < v6; v8 += 4)
  {
    if (a4 >= 1)
    {
      v16 = 0;
      v17 = (_OWORD *)(a2 + 16 + 8 * v9);
      v9 += 4 * a4;
      do
      {
        v18 = a3[1] * v16;
        v19 = *(_OWORD *)(*a3 + 8 * (v8 + 2 + v18));
        *(v17 - 1) = *(_OWORD *)(*a3 + 8 * (v18 + v8));
        *v17 = v19;
        ++v16;
        v17 += 2;
      }
      while (a4 != v16);
    }
  }
  for (; v8 < i; v8 += 2)
  {
    if (a4 >= 1)
    {
      v20 = 0;
      v21 = a2 + 8 * v9;
      v9 += 2 * a4;
      do
      {
        *(_OWORD *)(v21 + 16 * v20) = *(_OWORD *)(*a3 + 8 * (v8 + a3[1] * v20));
        ++v20;
      }
      while (a4 != v20);
    }
  }
  if (v8 < a5)
  {
    v22 = *a3 + 8 * v8;
    v23 = 8 * a3[1];
    do
    {
      v24 = (_QWORD *)v22;
      v25 = a4;
      if (a4 >= 1)
      {
        do
        {
          *(_QWORD *)(a2 + 8 * v9++) = *v24;
          v24 = (_QWORD *)((char *)v24 + v23);
          --v25;
        }
        while (v25);
      }
      ++v8;
      v22 += 8;
    }
    while (v8 != a5);
  }
}

uint64_t Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v29;
  uint64_t v36;
  int64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  double v70;
  double v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  double v84;
  double v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  double v91;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  double v105;
  double v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  double v112;
  double v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  double v126;
  double v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  double v133;
  double v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  double v147;
  double v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  double v154;
  double v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  double v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  double v175;
  double v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  double v189;
  double v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  double v196;
  double v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  double v210;
  double v211;
  double v212;
  double v213;
  uint64_t v215;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  double v220;
  double v221;
  double v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  int64_t v231;
  uint64_t v232;
  int64_t v237;
  float64x2_t v238;
  double *v239;
  float64x2_t v240;
  float64x2_t v241;
  double v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  double v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  double v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  double v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  double v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  double v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  double v266;
  uint64_t v267;
  double v268;
  float64x2_t v269;
  float64x2_t v270;
  uint64_t result;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int64_t v276;
  uint64_t v278;
  uint64_t v281;
  float64x2_t *v282;
  float64x2_t *v283;
  float64x2_t *v284;
  float64x2_t *v285;
  int64_t v295;
  float64x2_t v296;
  float64x2_t v297;
  double *v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v307;
  double v308;
  double v309;
  double v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  double v320;
  double v321;
  double v322;
  double v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  double v334;
  double v335;
  double v336;
  double v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  double v348;
  double v349;
  double v350;
  double v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v362;
  float64x2_t v363;
  double v364;
  double v365;
  double v366;
  double v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  double v378;
  double v379;
  double v380;
  double v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  double v392;
  double v393;
  double v394;
  double v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  double v406;
  double v407;
  double v408;
  double v409;
  uint64_t v410;
  float64x2_t v411;
  float64x2_t v412;
  double v413;
  double v414;
  double v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  int64_t v422;
  uint64_t v423;
  float64x2_t *v426;
  int64_t v429;
  float64x2_t v430;
  double *v431;
  float64x2_t v432;
  double v433;
  float64x2_t v434;
  float64x2_t v435;
  double v436;
  float64x2_t v437;
  float64x2_t v438;
  double v439;
  float64x2_t v440;
  float64x2_t v441;
  double v442;
  float64x2_t v443;
  float64x2_t v444;
  double v445;
  float64x2_t v446;
  float64x2_t v447;
  double v448;
  float64x2_t v449;
  float64x2_t v450;
  double v451;
  uint64_t v452;
  double v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  int64_t v460;
  uint64_t v462;
  uint64_t v464;
  float64x2_t *v465;
  float64x2_t *v466;
  float64x2_t *v467;
  float64x2_t *v468;
  uint64_t v479;
  int64_t v480;
  float64x2_t v481;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t *v486;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t *v521;
  uint64_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  uint64_t v527;
  int64_t v528;
  float64_t *v530;
  int64_t v531;
  float64x2_t v532;
  float64x2_t *v533;
  float64x2_t *v534;
  float64_t *v535;
  double *v536;
  float64x2_t *v537;
  float64x2_t *v538;
  uint64_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t *v542;
  uint64_t v543;
  uint64_t v544;
  int64_t v545;
  double *v546;
  unint64_t v547;
  double v550;
  double *v551;
  uint64_t v552;
  double *v553;
  double v554;
  double v555;
  double v556;
  double v557;
  uint64_t v558;
  uint64_t v559;
  double *v560;
  uint64_t v561;
  double *v562;
  double *v563;
  unint64_t v564;
  double v567;
  double *v568;
  double *v569;
  double v570;
  double v571;
  double v572;
  unint64_t v573;
  unint64_t v574;
  int v575;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  int64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;

  v12 = a11;
  v13 = a12;
  if (a9 == -1)
    v14 = a7;
  else
    v14 = a9;
  if (a10 == -1)
    v15 = a7;
  else
    v15 = a10;
  v16 = a8 + 3;
  if (a8 >= 0)
    v16 = a8;
  v578 = v16;
  v17 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  v18 = 6 * (a6 / 6);
  v19 = a6 % 6;
  v580 = (char)v19;
  v575 = (int)((v19 + (((char)v19 >> 13) & 3)) << 24) >> 26;
  if (a6 >= 0)
    v20 = a6;
  else
    v20 = a6 + 1;
  v577 = v20;
  v21 = a7 & 0xFFFFFFFFFFFFFFF8;
  v574 = 32 * a7;
  v573 = 16192 - 32 * a7;
  v22 = v573 / (48 * a7);
  if (v22 <= 1)
    v22 = 1;
  if (v18 >= 1)
  {
    v23 = 0;
    v583 = 6 * v22;
    v24 = 6 * a11;
    do
    {
      v25 = v23 + v583;
      if (v18 >= v23 + v583)
        v26 = v23 + v583;
      else
        v26 = v18;
      if (a8 >= 4)
      {
        v27 = 0;
        do
        {
          if (v23 < v26)
          {
            v585 = 4 * a12;
            _X17 = a5 + 8 * (4 * a12 + v27 * v15);
            v29 = v23;
            do
            {
              _X24 = (float64x2_t *)(a4 + 8 * (v24 + v29 * v14));
              __asm { PRFM            #0, [X24] }
              v36 = a3[1];
              _X0 = (float64x2_t *)(*a3 + 8 * (v29 + v36 * v27));
              _X20 = (float64x2_t *)(*a3 + 8 * (v29 + v36 * (v27 | 1)));
              _X7 = (float64x2_t *)(*a3 + 8 * (v29 + v36 * (v27 | 2)));
              _X19 = (float64x2_t *)(*a3 + 8 * (v29 + v36 * (v27 | 3)));
              __asm
              {
                PRFM            #0, [X0]
                PRFM            #0, [X20]
                PRFM            #0, [X7]
                PRFM            #0, [X19]
                PRFM            #0, [X17]
              }
              if (v21 < 1)
              {
                v59 = 0uLL;
                v58 = 0uLL;
                v57 = 0uLL;
                v56 = 0uLL;
                v55 = 0uLL;
                v54 = 0uLL;
                v53 = 0uLL;
                v52 = 0uLL;
                v51 = 0uLL;
                v50 = 0uLL;
                v48 = 0uLL;
                _X15 = (double *)(a5 + 8 * (v585 + v27 * v15));
                v47 = 0uLL;
              }
              else
              {
                v46 = 0;
                v47 = 0uLL;
                v48 = 0uLL;
                _X15 = (double *)(a5 + 8 * (v585 + v27 * v15));
                v50 = 0uLL;
                v51 = 0uLL;
                v52 = 0uLL;
                v53 = 0uLL;
                v54 = 0uLL;
                v55 = 0uLL;
                v56 = 0uLL;
                v57 = 0uLL;
                v58 = 0uLL;
                v59 = 0uLL;
                do
                {
                  __asm { PRFM            #0, [X15] }
                  _X11 = _X24 + 16;
                  __asm { PRFM            #0, [X11] }
                  v63 = _X24[1];
                  v64 = _X24[2];
                  v65 = _X15[1];
                  v66 = vmlaq_n_f64(v52, v63, *_X15);
                  v67 = vmlaq_n_f64(v56, v64, *_X15);
                  v68 = vmlaq_n_f64(v48, *_X24, v65);
                  v69 = vmlaq_n_f64(v53, v63, v65);
                  v70 = _X15[2];
                  v71 = _X15[3];
                  v72 = vmlaq_n_f64(v57, v64, v65);
                  v73 = vmlaq_n_f64(v50, *_X24, v70);
                  v74 = vmlaq_n_f64(v54, v63, v70);
                  v75 = vmlaq_n_f64(v58, v64, v70);
                  v76 = vmlaq_n_f64(v51, *_X24, v71);
                  v77 = vmlaq_n_f64(v55, v63, v71);
                  v78 = vmlaq_n_f64(v59, v64, v71);
                  _X11 = _X24 + 19;
                  __asm { PRFM            #0, [X11] }
                  v81 = _X24[3];
                  v82 = _X24[4];
                  v83 = _X24[5];
                  v84 = _X15[4];
                  v85 = _X15[5];
                  v86 = vmlaq_n_f64(vmlaq_n_f64(v47, *_X24, *_X15), v81, v84);
                  v87 = vmlaq_n_f64(v66, v82, v84);
                  v88 = vmlaq_n_f64(v67, v83, v84);
                  v89 = vmlaq_n_f64(v68, v81, v85);
                  v90 = vmlaq_n_f64(v69, v82, v85);
                  v91 = _X15[6];
                  v92 = _X15[7];
                  v93 = vmlaq_n_f64(v72, v83, v85);
                  v94 = vmlaq_n_f64(v73, v81, v91);
                  v95 = vmlaq_n_f64(v74, v82, v91);
                  v96 = vmlaq_n_f64(v75, v83, v91);
                  v97 = vmlaq_n_f64(v76, v81, v92);
                  v98 = vmlaq_n_f64(v77, v82, v92);
                  v99 = vmlaq_n_f64(v78, v83, v92);
                  _X11 = _X24 + 22;
                  __asm { PRFM            #0, [X11] }
                  v102 = _X24[6];
                  v103 = _X24[7];
                  v104 = _X24[8];
                  v105 = _X15[8];
                  v106 = _X15[9];
                  v107 = vmlaq_n_f64(v86, v102, v105);
                  v108 = vmlaq_n_f64(v87, v103, v105);
                  v109 = vmlaq_n_f64(v88, v104, v105);
                  v110 = vmlaq_n_f64(v89, v102, v106);
                  v111 = vmlaq_n_f64(v90, v103, v106);
                  v112 = _X15[10];
                  v113 = _X15[11];
                  v114 = vmlaq_n_f64(v93, v104, v106);
                  v115 = vmlaq_n_f64(v94, v102, v112);
                  v116 = vmlaq_n_f64(v95, v103, v112);
                  v117 = vmlaq_n_f64(v96, v104, v112);
                  v118 = vmlaq_n_f64(v97, v102, v113);
                  v119 = vmlaq_n_f64(v98, v103, v113);
                  v120 = vmlaq_n_f64(v99, v104, v113);
                  _X11 = _X24 + 25;
                  __asm { PRFM            #0, [X11] }
                  v123 = _X24[9];
                  v124 = _X24[10];
                  v125 = _X24[11];
                  v126 = _X15[12];
                  v127 = _X15[13];
                  v128 = vmlaq_n_f64(v107, v123, v126);
                  v129 = vmlaq_n_f64(v108, v124, v126);
                  v130 = vmlaq_n_f64(v109, v125, v126);
                  v131 = vmlaq_n_f64(v110, v123, v127);
                  v132 = vmlaq_n_f64(v111, v124, v127);
                  v133 = _X15[14];
                  v134 = _X15[15];
                  v135 = vmlaq_n_f64(v114, v125, v127);
                  v136 = vmlaq_n_f64(v115, v123, v133);
                  v137 = vmlaq_n_f64(v116, v124, v133);
                  v138 = vmlaq_n_f64(v117, v125, v133);
                  v139 = vmlaq_n_f64(v118, v123, v134);
                  v140 = vmlaq_n_f64(v119, v124, v134);
                  v141 = vmlaq_n_f64(v120, v125, v134);
                  _X11 = _X24 + 28;
                  __asm { PRFM            #0, [X11] }
                  v144 = _X24[12];
                  v145 = _X24[13];
                  v146 = _X24[14];
                  v147 = _X15[16];
                  v148 = _X15[17];
                  v149 = vmlaq_n_f64(v128, v144, v147);
                  v150 = vmlaq_n_f64(v129, v145, v147);
                  v151 = vmlaq_n_f64(v130, v146, v147);
                  v152 = vmlaq_n_f64(v131, v144, v148);
                  v153 = vmlaq_n_f64(v132, v145, v148);
                  v154 = _X15[18];
                  v155 = _X15[19];
                  v156 = vmlaq_n_f64(v135, v146, v148);
                  v157 = vmlaq_n_f64(v136, v144, v154);
                  v158 = vmlaq_n_f64(v137, v145, v154);
                  v159 = vmlaq_n_f64(v138, v146, v154);
                  v160 = vmlaq_n_f64(v139, v144, v155);
                  v161 = vmlaq_n_f64(v140, v145, v155);
                  v162 = vmlaq_n_f64(v141, v146, v155);
                  _X11 = _X24 + 31;
                  __asm { PRFM            #0, [X11] }
                  v165 = _X24[15];
                  v166 = _X24[16];
                  v167 = _X24[17];
                  v168 = _X15[20];
                  v169 = _X15[21];
                  v170 = vmlaq_n_f64(v149, v165, v168);
                  v171 = vmlaq_n_f64(v150, v166, v168);
                  v172 = vmlaq_n_f64(v151, v167, v168);
                  v173 = vmlaq_n_f64(v152, v165, v169);
                  v174 = vmlaq_n_f64(v153, v166, v169);
                  v175 = _X15[22];
                  v176 = _X15[23];
                  v177 = vmlaq_n_f64(v156, v167, v169);
                  v178 = vmlaq_n_f64(v157, v165, v175);
                  v179 = vmlaq_n_f64(v158, v166, v175);
                  v180 = vmlaq_n_f64(v159, v167, v175);
                  v181 = vmlaq_n_f64(v160, v165, v176);
                  v182 = vmlaq_n_f64(v161, v166, v176);
                  v183 = vmlaq_n_f64(v162, v167, v176);
                  _X11 = _X24 + 34;
                  __asm { PRFM            #0, [X11] }
                  v186 = _X24[18];
                  v187 = _X24[19];
                  v188 = _X24[20];
                  v189 = _X15[24];
                  v190 = _X15[25];
                  v191 = vmlaq_n_f64(v170, v186, v189);
                  v192 = vmlaq_n_f64(v171, v187, v189);
                  v193 = vmlaq_n_f64(v172, v188, v189);
                  v194 = vmlaq_n_f64(v173, v186, v190);
                  v195 = vmlaq_n_f64(v174, v187, v190);
                  v196 = _X15[26];
                  v197 = _X15[27];
                  v198 = vmlaq_n_f64(v177, v188, v190);
                  v199 = vmlaq_n_f64(v178, v186, v196);
                  v200 = vmlaq_n_f64(v179, v187, v196);
                  v201 = vmlaq_n_f64(v180, v188, v196);
                  v202 = vmlaq_n_f64(v181, v186, v197);
                  v203 = vmlaq_n_f64(v182, v187, v197);
                  v204 = vmlaq_n_f64(v183, v188, v197);
                  _X11 = _X24 + 37;
                  __asm { PRFM            #0, [X11] }
                  v207 = _X24[21];
                  v208 = _X24[22];
                  v209 = _X24[23];
                  v210 = _X15[28];
                  v211 = _X15[29];
                  v47 = vmlaq_n_f64(v191, v207, v210);
                  v52 = vmlaq_n_f64(v192, v208, v210);
                  v56 = vmlaq_n_f64(v193, v209, v210);
                  v48 = vmlaq_n_f64(v194, v207, v211);
                  v53 = vmlaq_n_f64(v195, v208, v211);
                  v212 = _X15[30];
                  v213 = _X15[31];
                  v57 = vmlaq_n_f64(v198, v209, v211);
                  v50 = vmlaq_n_f64(v199, v207, v212);
                  v54 = vmlaq_n_f64(v200, v208, v212);
                  v58 = vmlaq_n_f64(v201, v209, v212);
                  _X15 += 32;
                  v51 = vmlaq_n_f64(v202, v207, v213);
                  v55 = vmlaq_n_f64(v203, v208, v213);
                  _X24 += 24;
                  v46 += 8;
                  v59 = vmlaq_n_f64(v204, v209, v213);
                }
                while (v46 < v21);
              }
              if (a7 > v21)
              {
                _X8 = _X24 + 16;
                v215 = a7 - v21;
                do
                {
                  __asm { PRFM            #0, [X8] }
                  v217 = _X8[-16];
                  v218 = _X8[-15];
                  v219 = _X8[-14];
                  v220 = _X15[1];
                  v47 = vmlaq_n_f64(v47, v217, *_X15);
                  v52 = vmlaq_n_f64(v52, v218, *_X15);
                  v56 = vmlaq_n_f64(v56, v219, *_X15);
                  v48 = vmlaq_n_f64(v48, v217, v220);
                  v53 = vmlaq_n_f64(v53, v218, v220);
                  v57 = vmlaq_n_f64(v57, v219, v220);
                  v221 = _X15[2];
                  v222 = _X15[3];
                  v50 = vmlaq_n_f64(v50, v217, v221);
                  v54 = vmlaq_n_f64(v54, v218, v221);
                  v58 = vmlaq_n_f64(v58, v219, v221);
                  v51 = vmlaq_n_f64(v51, v217, v222);
                  v55 = vmlaq_n_f64(v55, v218, v222);
                  _X8 += 3;
                  _X15 += 4;
                  v59 = vmlaq_n_f64(v59, v219, v222);
                  --v215;
                }
                while (v215);
              }
              v223 = vmlaq_n_f64(_X0[1], v52, a1);
              v224 = vmlaq_n_f64(_X0[2], v56, a1);
              *_X0 = vmlaq_n_f64(*_X0, v47, a1);
              _X0[1] = v223;
              _X0[2] = v224;
              v225 = vmlaq_n_f64(_X20[1], v53, a1);
              v226 = vmlaq_n_f64(_X20[2], v57, a1);
              *_X20 = vmlaq_n_f64(*_X20, v48, a1);
              _X20[1] = v225;
              _X20[2] = v226;
              v227 = vmlaq_n_f64(_X7[1], v54, a1);
              v228 = vmlaq_n_f64(_X7[2], v58, a1);
              *_X7 = vmlaq_n_f64(*_X7, v50, a1);
              _X7[1] = v227;
              _X7[2] = v228;
              v229 = vmlaq_n_f64(_X19[1], v55, a1);
              v230 = vmlaq_n_f64(_X19[2], v59, a1);
              *_X19 = vmlaq_n_f64(*_X19, v51, a1);
              _X19[1] = v229;
              _X19[2] = v230;
              v29 += 6;
            }
            while (v29 < v26);
          }
          v27 += 4;
        }
        while (v27 < v17);
      }
      v231 = v17;
      v12 = a11;
      v13 = a12;
      if (v17 < a8)
      {
        do
        {
          if (v23 < v26)
          {
            v232 = v23;
            do
            {
              _X0 = (float64x2_t *)(a4 + 8 * (v24 + v232 * v14));
              __asm { PRFM            #0, [X0] }
              _X17 = (float64x2_t *)(*a3 + 8 * (v232 + a3[1] * v231));
              __asm { PRFM            #0, [X17] }
              if (v21 < 1)
              {
                v241 = 0uLL;
                v240 = 0uLL;
                v238 = 0uLL;
                v239 = (double *)(a5 + 8 * (a12 + v231 * v15));
              }
              else
              {
                v237 = 0;
                v238 = 0uLL;
                v239 = (double *)(a5 + 8 * (a12 + v231 * v15));
                v240 = 0uLL;
                v241 = 0uLL;
                do
                {
                  v242 = v239[1];
                  v243 = vmlaq_n_f64(vmlaq_n_f64(v238, *_X0, *v239), _X0[3], v242);
                  v244 = vmlaq_n_f64(vmlaq_n_f64(v240, _X0[1], *v239), _X0[4], v242);
                  v245 = vmlaq_n_f64(vmlaq_n_f64(v241, _X0[2], *v239), _X0[5], v242);
                  v246 = v239[2];
                  v247 = vmlaq_n_f64(v243, _X0[6], v246);
                  v248 = vmlaq_n_f64(v244, _X0[7], v246);
                  v249 = vmlaq_n_f64(v245, _X0[8], v246);
                  v250 = v239[3];
                  v251 = vmlaq_n_f64(v247, _X0[9], v250);
                  v252 = vmlaq_n_f64(v248, _X0[10], v250);
                  v253 = vmlaq_n_f64(v249, _X0[11], v250);
                  v254 = v239[4];
                  v255 = vmlaq_n_f64(v251, _X0[12], v254);
                  v256 = vmlaq_n_f64(v252, _X0[13], v254);
                  v257 = vmlaq_n_f64(v253, _X0[14], v254);
                  v258 = v239[5];
                  v259 = vmlaq_n_f64(v255, _X0[15], v258);
                  v260 = vmlaq_n_f64(v256, _X0[16], v258);
                  v261 = vmlaq_n_f64(v257, _X0[17], v258);
                  v262 = v239[6];
                  v263 = vmlaq_n_f64(v259, _X0[18], v262);
                  v264 = vmlaq_n_f64(v260, _X0[19], v262);
                  v265 = vmlaq_n_f64(v261, _X0[20], v262);
                  v266 = v239[7];
                  v238 = vmlaq_n_f64(v263, _X0[21], v266);
                  v240 = vmlaq_n_f64(v264, _X0[22], v266);
                  v241 = vmlaq_n_f64(v265, _X0[23], v266);
                  v239 += 8;
                  _X0 += 24;
                  v237 += 8;
                }
                while (v237 < v21);
              }
              v267 = a7 - v21;
              if (a7 > v21)
              {
                do
                {
                  v268 = *v239++;
                  v238 = vmlaq_n_f64(v238, *_X0, v268);
                  v240 = vmlaq_n_f64(v240, _X0[1], v268);
                  v241 = vmlaq_n_f64(v241, _X0[2], v268);
                  _X0 += 3;
                  --v267;
                }
                while (v267);
              }
              v269 = vmlaq_n_f64(_X17[1], v240, a1);
              v270 = vmlaq_n_f64(_X17[2], v241, a1);
              *_X17 = vmlaq_n_f64(*_X17, v238, a1);
              _X17[1] = v269;
              _X17[2] = v270;
              v232 += 6;
            }
            while (v232 < v26);
          }
          ++v231;
        }
        while (v231 != a8);
      }
      v23 += v583;
    }
    while (v25 < v18);
  }
  result = v18 + 4 * v575;
  v584 = v577 & 0xFFFFFFFFFFFFFFFELL;
  v272 = v573 / v574;
  if ((uint64_t)(v573 / v574) <= 1)
    v272 = 1;
  if (v580 >= 4)
  {
    v581 = 4 * v272;
    v273 = 4 * v12;
    v586 = 4 * v13;
    do
    {
      v274 = v18 + v581;
      if (result >= v18 + v581)
        v275 = v18 + v581;
      else
        v275 = result;
      if (a8 >= 4)
      {
        v276 = 0;
        do
        {
          if (v18 < v275)
          {
            _X26 = a5 + 8 * (v586 + v276 * v15);
            v278 = v18;
            do
            {
              _X22 = (float64x2_t *)(a4 + 8 * (v273 + v278 * v14));
              __asm { PRFM            #0, [X22] }
              v281 = a3[1];
              v282 = (float64x2_t *)(*a3 + 8 * (v278 + v281 * v276));
              v283 = (float64x2_t *)(*a3 + 8 * (v278 + v281 * (v276 | 1)));
              v284 = (float64x2_t *)(*a3 + 8 * (v278 + v281 * (v276 | 2)));
              v285 = (float64x2_t *)(*a3 + 8 * (v278 + v281 * (v276 | 3)));
              _X8 = v282 + 2;
              __asm { PRFM            #0, [X8] }
              _X8 = v283 + 2;
              __asm { PRFM            #0, [X8] }
              _X8 = v284 + 2;
              __asm { PRFM            #0, [X8] }
              _X8 = v285 + 2;
              __asm
              {
                PRFM            #0, [X8]
                PRFM            #0, [X26]
              }
              if (v21 < 1)
              {
                v304 = 0uLL;
                v303 = 0uLL;
                v302 = 0uLL;
                v301 = 0uLL;
                v300 = 0uLL;
                v299 = 0uLL;
                v297 = 0uLL;
                v298 = (double *)(a5 + 8 * (v586 + v276 * v15));
                v296 = 0uLL;
              }
              else
              {
                v295 = 0;
                v296 = 0uLL;
                v297 = 0uLL;
                v298 = (double *)(a5 + 8 * (v586 + v276 * v15));
                v299 = 0uLL;
                v300 = 0uLL;
                v301 = 0uLL;
                v302 = 0uLL;
                v303 = 0uLL;
                v304 = 0uLL;
                do
                {
                  _X11 = v298 + 48;
                  __asm { PRFM            #0, [X11] }
                  v307 = _X22[1];
                  v308 = v298[1];
                  v309 = v298[2];
                  v310 = v298[3];
                  v311 = vmlaq_n_f64(v301, v307, *v298);
                  v312 = vmlaq_n_f64(v297, *_X22, v308);
                  v313 = vmlaq_n_f64(v302, v307, v308);
                  v314 = vmlaq_n_f64(v299, *_X22, v309);
                  v315 = vmlaq_n_f64(v303, v307, v309);
                  v316 = vmlaq_n_f64(v300, *_X22, v310);
                  v317 = vmlaq_n_f64(v304, v307, v310);
                  v318 = _X22[2];
                  v319 = _X22[3];
                  v320 = v298[4];
                  v321 = v298[5];
                  v322 = v298[6];
                  v323 = v298[7];
                  v324 = vmlaq_n_f64(vmlaq_n_f64(v296, *_X22, *v298), v318, v320);
                  v325 = vmlaq_n_f64(v311, v319, v320);
                  v326 = vmlaq_n_f64(v312, v318, v321);
                  v327 = vmlaq_n_f64(v313, v319, v321);
                  v328 = vmlaq_n_f64(v314, v318, v322);
                  v329 = vmlaq_n_f64(v315, v319, v322);
                  v330 = vmlaq_n_f64(v316, v318, v323);
                  v331 = vmlaq_n_f64(v317, v319, v323);
                  v332 = _X22[4];
                  v333 = _X22[5];
                  v334 = v298[8];
                  v335 = v298[9];
                  v336 = v298[10];
                  v337 = v298[11];
                  v338 = vmlaq_n_f64(v324, v332, v334);
                  v339 = vmlaq_n_f64(v325, v333, v334);
                  v340 = vmlaq_n_f64(v326, v332, v335);
                  v341 = vmlaq_n_f64(v327, v333, v335);
                  v342 = vmlaq_n_f64(v328, v332, v336);
                  v343 = vmlaq_n_f64(v329, v333, v336);
                  v344 = vmlaq_n_f64(v330, v332, v337);
                  v345 = vmlaq_n_f64(v331, v333, v337);
                  v346 = _X22[6];
                  v347 = _X22[7];
                  v348 = v298[12];
                  v349 = v298[13];
                  v350 = v298[14];
                  v351 = v298[15];
                  v352 = vmlaq_n_f64(v338, v346, v348);
                  v353 = vmlaq_n_f64(v339, v347, v348);
                  v354 = vmlaq_n_f64(v340, v346, v349);
                  v355 = vmlaq_n_f64(v341, v347, v349);
                  v356 = vmlaq_n_f64(v342, v346, v350);
                  v357 = vmlaq_n_f64(v343, v347, v350);
                  v358 = vmlaq_n_f64(v344, v346, v351);
                  v359 = vmlaq_n_f64(v345, v347, v351);
                  _X11 = v298 + 64;
                  __asm { PRFM            #0, [X11] }
                  v362 = _X22[8];
                  v363 = _X22[9];
                  v364 = v298[16];
                  v365 = v298[17];
                  v366 = v298[18];
                  v367 = v298[19];
                  v368 = vmlaq_n_f64(v352, v362, v364);
                  v369 = vmlaq_n_f64(v353, v363, v364);
                  v370 = vmlaq_n_f64(v354, v362, v365);
                  v371 = vmlaq_n_f64(v355, v363, v365);
                  v372 = vmlaq_n_f64(v356, v362, v366);
                  v373 = vmlaq_n_f64(v357, v363, v366);
                  v374 = vmlaq_n_f64(v358, v362, v367);
                  v375 = vmlaq_n_f64(v359, v363, v367);
                  v376 = _X22[10];
                  v377 = _X22[11];
                  v378 = v298[20];
                  v379 = v298[21];
                  v380 = v298[22];
                  v381 = v298[23];
                  v382 = vmlaq_n_f64(v368, v376, v378);
                  v383 = vmlaq_n_f64(v369, v377, v378);
                  v384 = vmlaq_n_f64(v370, v376, v379);
                  v385 = vmlaq_n_f64(v371, v377, v379);
                  v386 = vmlaq_n_f64(v372, v376, v380);
                  v387 = vmlaq_n_f64(v373, v377, v380);
                  v388 = vmlaq_n_f64(v374, v376, v381);
                  v389 = vmlaq_n_f64(v375, v377, v381);
                  v390 = _X22[12];
                  v391 = _X22[13];
                  v392 = v298[24];
                  v393 = v298[25];
                  v394 = v298[26];
                  v395 = v298[27];
                  v396 = vmlaq_n_f64(v382, v390, v392);
                  v397 = vmlaq_n_f64(v383, v391, v392);
                  v398 = vmlaq_n_f64(v384, v390, v393);
                  v399 = vmlaq_n_f64(v385, v391, v393);
                  v400 = vmlaq_n_f64(v386, v390, v394);
                  v401 = vmlaq_n_f64(v387, v391, v394);
                  v402 = vmlaq_n_f64(v388, v390, v395);
                  v403 = vmlaq_n_f64(v389, v391, v395);
                  v404 = _X22[14];
                  v405 = _X22[15];
                  v406 = v298[28];
                  v407 = v298[29];
                  v408 = v298[30];
                  v409 = v298[31];
                  v296 = vmlaq_n_f64(v396, v404, v406);
                  v301 = vmlaq_n_f64(v397, v405, v406);
                  v297 = vmlaq_n_f64(v398, v404, v407);
                  v302 = vmlaq_n_f64(v399, v405, v407);
                  v299 = vmlaq_n_f64(v400, v404, v408);
                  v303 = vmlaq_n_f64(v401, v405, v408);
                  v300 = vmlaq_n_f64(v402, v404, v409);
                  v304 = vmlaq_n_f64(v403, v405, v409);
                  v298 += 32;
                  _X22 += 16;
                  v295 += 8;
                }
                while (v295 < v21);
              }
              v410 = a7 - v21;
              if (a7 > v21)
              {
                do
                {
                  v411 = *_X22;
                  v412 = _X22[1];
                  _X22 += 2;
                  v413 = v298[1];
                  v414 = v298[2];
                  v415 = v298[3];
                  v296 = vmlaq_n_f64(v296, v411, *v298);
                  v301 = vmlaq_n_f64(v301, v412, *v298);
                  v297 = vmlaq_n_f64(v297, v411, v413);
                  v302 = vmlaq_n_f64(v302, v412, v413);
                  v299 = vmlaq_n_f64(v299, v411, v414);
                  v303 = vmlaq_n_f64(v303, v412, v414);
                  v300 = vmlaq_n_f64(v300, v411, v415);
                  v304 = vmlaq_n_f64(v304, v412, v415);
                  v298 += 4;
                  --v410;
                }
                while (v410);
              }
              v416 = vmlaq_n_f64(v282[1], v301, a1);
              v417 = vmlaq_n_f64(*v283, v297, a1);
              v418 = vmlaq_n_f64(v283[1], v302, a1);
              *v282 = vmlaq_n_f64(*v282, v296, a1);
              v282[1] = v416;
              *v283 = v417;
              v283[1] = v418;
              v419 = vmlaq_n_f64(v284[1], v303, a1);
              v420 = vmlaq_n_f64(*v285, v300, a1);
              v421 = vmlaq_n_f64(v285[1], v304, a1);
              *v284 = vmlaq_n_f64(*v284, v299, a1);
              v284[1] = v419;
              *v285 = v420;
              v285[1] = v421;
              v278 += 4;
            }
            while (v278 < v275);
          }
          v276 += 4;
        }
        while (v276 < v17);
      }
      v422 = v17;
      v13 = a12;
      if (v17 < a8)
      {
        do
        {
          if (v18 < v275)
          {
            v423 = v18;
            do
            {
              _X7 = (float64x2_t *)(a4 + 8 * (v273 + v423 * v14));
              __asm { PRFM            #0, [X7] }
              v426 = (float64x2_t *)(*a3 + 8 * (v423 + a3[1] * v422));
              _X11 = v426 + 2;
              __asm { PRFM            #0, [X11] }
              if (v21 < 1)
              {
                v432 = 0uLL;
                v430 = 0uLL;
                v431 = (double *)(a5 + 8 * (a12 + v422 * v15));
              }
              else
              {
                v429 = 0;
                v430 = 0uLL;
                v431 = (double *)(a5 + 8 * (a12 + v422 * v15));
                v432 = 0uLL;
                do
                {
                  v433 = v431[1];
                  v434 = vmlaq_n_f64(vmlaq_n_f64(v430, *_X7, *v431), _X7[2], v433);
                  v435 = vmlaq_n_f64(vmlaq_n_f64(v432, _X7[1], *v431), _X7[3], v433);
                  v436 = v431[2];
                  v437 = vmlaq_n_f64(v434, _X7[4], v436);
                  v438 = vmlaq_n_f64(v435, _X7[5], v436);
                  v439 = v431[3];
                  v440 = vmlaq_n_f64(v437, _X7[6], v439);
                  v441 = vmlaq_n_f64(v438, _X7[7], v439);
                  v442 = v431[4];
                  v443 = vmlaq_n_f64(v440, _X7[8], v442);
                  v444 = vmlaq_n_f64(v441, _X7[9], v442);
                  v445 = v431[5];
                  v446 = vmlaq_n_f64(v443, _X7[10], v445);
                  v447 = vmlaq_n_f64(v444, _X7[11], v445);
                  v448 = v431[6];
                  v449 = vmlaq_n_f64(v446, _X7[12], v448);
                  v450 = vmlaq_n_f64(v447, _X7[13], v448);
                  v451 = v431[7];
                  v430 = vmlaq_n_f64(v449, _X7[14], v451);
                  v432 = vmlaq_n_f64(v450, _X7[15], v451);
                  v431 += 8;
                  _X7 += 16;
                  v429 += 8;
                }
                while (v429 < v21);
              }
              v452 = a7 - v21;
              if (a7 > v21)
              {
                do
                {
                  v453 = *v431++;
                  v454 = *_X7;
                  v455 = _X7[1];
                  _X7 += 2;
                  v430 = vmlaq_n_f64(v430, v454, v453);
                  v432 = vmlaq_n_f64(v432, v455, v453);
                  --v452;
                }
                while (v452);
              }
              v456 = vmlaq_n_f64(v426[1], v432, a1);
              *v426 = vmlaq_n_f64(*v426, v430, a1);
              v426[1] = v456;
              v423 += 4;
            }
            while (v423 < v275);
          }
          ++v422;
        }
        while (v422 != a8);
      }
      v18 += v581;
    }
    while (v274 < result);
  }
  v457 = v578 >> 2;
  if (result < v584)
  {
    v587 = 2 * a11;
    v458 = 4 * v13;
    v582 = a5 + 32 * v13 + 384;
    v459 = a4 + 8 * v14 * result + 16 * a11;
    v579 = a5 + 32 * v15 * v457 + 8 * v13;
    do
    {
      if (a8 >= 4)
      {
        v460 = 0;
        _X17 = a4 + 8 * (v587 + result * v14);
        v462 = v582;
        do
        {
          __asm { PRFM            #0, [X17] }
          v464 = a3[1];
          v465 = (float64x2_t *)(*a3 + 8 * (result + v464 * v460));
          v466 = (float64x2_t *)(*a3 + 8 * (result + v464 * (v460 | 1)));
          v467 = (float64x2_t *)(*a3 + 8 * (result + v464 * (v460 | 2)));
          v468 = (float64x2_t *)(*a3 + 8 * (result + v464 * (v460 | 3)));
          _X11 = v465 + 2;
          __asm { PRFM            #0, [X11] }
          _X11 = v466 + 2;
          __asm { PRFM            #0, [X11] }
          _X11 = v467 + 2;
          __asm { PRFM            #0, [X11] }
          _X11 = v468 + 2;
          __asm { PRFM            #0, [X11] }
          _X13 = (double *)(a5 + 8 * (v458 + v460 * v15));
          __asm { PRFM            #0, [X13] }
          if (v21 < 1)
          {
            v485 = 0uLL;
            v484 = 0uLL;
            v483 = 0uLL;
            v521 = (float64x2_t *)(a4 + 8 * (v587 + result * v14));
            v481 = 0uLL;
          }
          else
          {
            v479 = 0;
            v480 = 0;
            v481 = 0uLL;
            _X25 = v462;
            v483 = 0uLL;
            v484 = 0uLL;
            v485 = 0uLL;
            do
            {
              v486 = (float64x2_t *)(v459 + 16 * v480);
              __asm { PRFM            #0, [X25] }
              v488 = v486[1];
              v489 = vmlaq_n_f64(vmlaq_n_f64(v485, *v486, *(double *)(_X25 - 384)), v488, *(double *)(_X25 - 352));
              v490 = vmlaq_n_f64(vmlaq_n_f64(v484, *v486, *(double *)(_X25 - 376)), v488, *(double *)(_X25 - 344));
              v491 = vmlaq_n_f64(vmlaq_n_f64(v483, *v486, *(double *)(_X25 - 368)), v488, *(double *)(_X25 - 336));
              v492 = vmlaq_n_f64(vmlaq_n_f64(v481, *v486, *(double *)(_X25 - 360)), v488, *(double *)(_X25 - 328));
              v493 = v486[2];
              v494 = vmlaq_n_f64(v489, v493, *(double *)(_X25 - 320));
              v495 = vmlaq_n_f64(v490, v493, *(double *)(_X25 - 312));
              v496 = vmlaq_n_f64(v491, v493, *(double *)(_X25 - 304));
              v497 = vmlaq_n_f64(v492, v493, *(double *)(_X25 - 296));
              v498 = v486[3];
              v499 = vmlaq_n_f64(v494, v498, *(double *)(_X25 - 288));
              v500 = vmlaq_n_f64(v495, v498, *(double *)(_X25 - 280));
              v501 = vmlaq_n_f64(v496, v498, *(double *)(_X25 - 272));
              v502 = vmlaq_n_f64(v497, v498, *(double *)(_X25 - 264));
              _X11 = _X25 + 128;
              __asm { PRFM            #0, [X11] }
              v505 = v486[4];
              v506 = vmlaq_n_f64(v499, v505, *(double *)(_X25 - 256));
              v507 = vmlaq_n_f64(v500, v505, *(double *)(_X25 - 248));
              v508 = vmlaq_n_f64(v501, v505, *(double *)(_X25 - 240));
              v509 = vmlaq_n_f64(v502, v505, *(double *)(_X25 - 232));
              v510 = v486[5];
              v511 = vmlaq_n_f64(v506, v510, *(double *)(_X25 - 224));
              v512 = vmlaq_n_f64(v507, v510, *(double *)(_X25 - 216));
              v513 = vmlaq_n_f64(v508, v510, *(double *)(_X25 - 208));
              v514 = vmlaq_n_f64(v509, v510, *(double *)(_X25 - 200));
              v515 = v486[6];
              v516 = vmlaq_n_f64(v511, v515, *(double *)(_X25 - 192));
              v517 = vmlaq_n_f64(v512, v515, *(double *)(_X25 - 184));
              v518 = vmlaq_n_f64(v513, v515, *(double *)(_X25 - 176));
              v519 = vmlaq_n_f64(v514, v515, *(double *)(_X25 - 168));
              v520 = v486[7];
              v485 = vmlaq_n_f64(v516, v520, *(double *)(_X25 - 160));
              v484 = vmlaq_n_f64(v517, v520, *(double *)(_X25 - 152));
              v483 = vmlaq_n_f64(v518, v520, *(double *)(_X25 - 144));
              v481 = vmlaq_n_f64(v519, v520, *(double *)(_X25 - 136));
              v480 += 8;
              _X25 += 256;
              v479 += 128;
            }
            while (v480 < v21);
            v521 = (float64x2_t *)(v459 + v479);
            _X13 = (double *)(_X25 - 384);
          }
          v522 = a7 - v21;
          if (a7 > v21)
          {
            do
            {
              v523 = *v521++;
              v485 = vmlaq_n_f64(v485, v523, *_X13);
              v484 = vmlaq_n_f64(v484, v523, _X13[1]);
              v483 = vmlaq_n_f64(v483, v523, _X13[2]);
              v481 = vmlaq_n_f64(v481, v523, _X13[3]);
              _X13 += 4;
              --v522;
            }
            while (v522);
          }
          v524 = vmlaq_n_f64(*v466, v484, a1);
          *v465 = vmlaq_n_f64(*v465, v485, a1);
          *v466 = v524;
          v525 = vmlaq_n_f64(*v468, v481, a1);
          *v467 = vmlaq_n_f64(*v467, v483, a1);
          *v468 = v525;
          v460 += 4;
          v462 += 32 * v15;
        }
        while (v460 < v17);
      }
      v13 = a12;
      if (v17 < a8)
      {
        _X8 = a4 + 8 * (v587 + result * v14);
        v527 = v579;
        v528 = v17;
        do
        {
          __asm { PRFM            #0, [X8] }
          v530 = (float64_t *)(a5 + 8 * (a12 + v528 * v15));
          if (v21 < 1)
          {
            v532 = 0uLL;
            v538 = (float64x2_t *)(a4 + 8 * (v587 + result * v14));
          }
          else
          {
            v531 = 0;
            v532 = 0uLL;
            v533 = (float64x2_t *)(a4 + 8 * (v587 + result * v14));
            do
            {
              v534 = v533;
              v535 = v530;
              v536 = (double *)(v527 + 8 * v531);
              v537 = (float64x2_t *)(v459 + 16 * v531);
              v532 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v532, *v537, *v536), v537[1], v536[1]), v537[2], v536[2]), v537[3], v536[3]), v537[4], v536[4]), v537[5], v536[5]), v537[6], v536[6]), v537[7], v536[7]);
              v531 += 8;
              v533 = v537 + 8;
              v530 = v536 + 8;
            }
            while (v531 < v21);
            v530 = v535 + 8;
            v538 = v534 + 8;
          }
          v539 = a7 - v21;
          if (a7 > v21)
          {
            do
            {
              v540 = *v538++;
              v541 = v540;
              v540.f64[0] = *v530++;
              v532 = vmlaq_n_f64(v532, v541, v540.f64[0]);
              --v539;
            }
            while (v539);
          }
          v542 = (float64x2_t *)(*a3 + 8 * (result + a3[1] * v528));
          *v542 = vmlaq_n_f64(*v542, v532, a1);
          ++v528;
          v527 += 8 * v15;
        }
        while (v528 != a8);
      }
      result += 2;
      v459 += 16 * v14;
    }
    while (result < v584);
  }
  if (v584 < a6)
  {
    v543 = v14 * (v577 >> 1);
    v544 = 8 * v14;
    if (a8 >= 4)
    {
      v545 = 0;
      do
      {
        result = v545 | 1;
        v546 = (double *)(a4 + 16 * v543 + 8 * a11);
        v547 = v577 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          _X11 = a4 + 8 * (a11 + v547 * v14);
          __asm { PRFM            #0, [X11] }
          if (a7 < 1)
          {
            v556 = 0.0;
            v555 = 0.0;
            v554 = 0.0;
            v550 = 0.0;
          }
          else
          {
            v550 = 0.0;
            v551 = v546;
            v552 = a7;
            v553 = (double *)(a5 + 8 * (4 * v13 + v545 * v15));
            v554 = 0.0;
            v555 = 0.0;
            v556 = 0.0;
            do
            {
              v557 = *v551++;
              v556 = v556 + v557 * *v553;
              v555 = v555 + v557 * v553[1];
              v554 = v554 + v557 * v553[2];
              v550 = v550 + v557 * v553[3];
              v553 += 4;
              --v552;
            }
            while (v552);
          }
          v558 = *a3;
          v559 = a3[1];
          *(double *)(*a3 + 8 * (v547 + v559 * v545)) = *(double *)(*a3 + 8 * (v547 + v559 * v545)) + a1 * v556;
          *(double *)(v558 + 8 * (v547 + v559 * result)) = *(double *)(v558 + 8 * (v547 + v559 * result)) + a1 * v555;
          *(double *)(v558 + 8 * (v547 + v559 * (v545 | 2))) = *(double *)(v558 + 8 * (v547 + v559 * (v545 | 2)))
                                                             + a1 * v554;
          *(double *)(v558 + 8 * (v547 + v559 * (v545 | 3))) = *(double *)(v558 + 8 * (v547 + v559 * (v545 | 3)))
                                                             + a1 * v550;
          ++v547;
          v546 = (double *)((char *)v546 + v544);
        }
        while (v547 != a6);
        v545 += 4;
      }
      while (v545 < v17);
    }
    if (v17 < a8)
    {
      v560 = (double *)(a5 + 32 * v15 * v457 + 8 * v13);
      v561 = 8 * v15;
      v562 = (double *)(a4 + 16 * v543 + 8 * a11);
      do
      {
        v563 = v562;
        v564 = v577 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          _X16 = a4 + 8 * (a11 + v564 * v14);
          __asm { PRFM            #0, [X16] }
          v567 = 0.0;
          if (a7 >= 1)
          {
            v568 = v563;
            v569 = v560;
            result = a7;
            do
            {
              v570 = *v568++;
              v571 = v570;
              v572 = *v569++;
              v567 = v567 + v571 * v572;
              --result;
            }
            while (result);
          }
          *(double *)(*a3 + 8 * (v564 + a3[1] * v17)) = *(double *)(*a3 + 8 * (v564 + a3[1] * v17)) + a1 * v567;
          ++v564;
          v563 = (double *)((char *)v563 + v544);
        }
        while (v564 != a6);
        ++v17;
        v560 = (double *)((char *)v560 + v561);
      }
      while (v17 != a8);
    }
  }
  return result;
}

void sub_2184C5904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,7,Eigen::DenseShape,Eigen::DenseShape,double,double>::product_evaluator(_QWORD *a1, uint64_t **a2)
{
  uint64_t v4;
  double **v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17[2];

  *a1 = 0;
  v4 = (*a2)[1];
  a1[2] = 0;
  v5 = (double **)(a1 + 2);
  a1[3] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1 + 2, v4, 1);
  v6 = (char *)a1[2];
  v7 = a1[3];
  *a1 = v6;
  v9 = *a2;
  v8 = a2[1];
  if (v7 >= 0)
    v10 = v7;
  else
    v10 = v7 + 1;
  v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
  if (v7 >= 2)
  {
    v12 = 2;
    if (v11 > 2)
      v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    bzero(v6, ((8 * v12 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v11 < v7)
    bzero(&v6[16 * (v10 >> 1)], 8 * v7 - 16 * (v10 >> 1));
  v13 = v9[1];
  v14 = v9[2];
  v17[0] = *v9;
  v17[1] = v13;
  v16[0] = *v8;
  v16[1] = 1;
  Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,0>,0,false,double,Eigen::internal::const_blas_data_mapper<double,long,1>,false,0>::run(v13, v14, v17, v16, *v5, 1.0);
  return a1;
}

void sub_2184C5A90(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

uint64_t Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,0>,0,false,double,Eigen::internal::const_blas_data_mapper<double,long,1>,false,0>::run(uint64_t result, uint64_t a2, uint64_t *a3, _QWORD *a4, double *a5, double a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  double *v36;
  double *v37;
  double *v38;
  uint64_t v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t *v50;
  float64x2_t *v51;
  uint64_t v52;
  float64x2_t *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t *v62;
  float64x2_t *v63;
  float64x2_t *v64;
  float64x2_t *v65;
  uint64_t v66;
  float64x2_t *v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t *v78;
  float64x2_t *v79;
  uint64_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  double *v104;
  double *v105;
  uint64_t v106;
  double v107;
  float64x2_t *v108;
  float64x2_t *v109;
  uint64_t v110;
  float64x2_t v111;
  float64x2_t *v112;
  float64x2_t *v113;
  uint64_t v114;
  float64x2_t v115;
  double *v116;
  double *v117;
  uint64_t v118;
  double v119;
  float64x2_t *v120;
  uint64_t v121;

  v7 = 0;
  v8 = ((unint64_t)a5 >> 3) & 1;
  if (v8 >= result)
    v8 = result;
  if ((a5 & 7) != 0)
    v8 = result;
  v9 = ((unint64_t)*a3 >> 3) & 1;
  if (v9 >= result)
    v9 = result;
  if ((*a3 & 7) != 0)
    v9 = -1;
  v10 = 3;
  if ((a5 & 7) != 0 || v9 < 0)
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    if (v9 != result)
    {
      v13 = 0;
      v10 = a3[1] & 1;
      v14 = 1;
      while (1)
      {
        v15 = v14;
        v16 = v9 + v13 * v10;
        v17 = v16 >= 0 ? v16 & 1 : -(v16 & 1);
        if (v8 == v17)
          break;
        v14 = 0;
        v13 = 1;
        if ((v15 & 1) == 0)
        {
          v7 = 0;
          v11 = v8;
          v12 = ((result - v8) & 0xFFFFFFFFFFFFFFFELL) + v8;
          v10 = 3;
          goto LABEL_24;
        }
      }
      if (v13 >= a2)
        v7 = a2;
      else
        v7 = v13;
      v11 = v8;
      v12 = ((result - v8) & 0xFFFFFFFFFFFFFFFELL) + v8;
    }
  }
LABEL_24:
  v121 = v10;
  v18 = a2 - v7 + 3;
  if (a2 >= v7)
    v18 = a2 - v7;
  v19 = (v18 & 0xFFFFFFFFFFFFFFFCLL) + v7;
  v20 = 8 * v11;
  v21 = 8 * v12;
  if (a2 - v7 >= 4)
  {
    v22 = 8 * v7;
    v23 = 8 * v7 + 24;
    v24 = 8 * v7 + 16;
    v25 = 8 * v7 + 8;
    v26 = v7;
    v120 = (float64x2_t *)&a5[v11];
    v27 = &a5[v12];
    do
    {
      v28 = a4[1];
      v29 = *(double *)(*a4 + 8 * v28 * v26) * a6;
      v30 = *(double *)(*a4 + 8 * v28 * (v26 + 1)) * a6;
      v31 = *(double *)(*a4 + 8 * v28 * (v26 + 2)) * a6;
      v32 = *(double *)(*a4 + 8 * v28 * (v26 + 3)) * a6;
      v33 = *a3;
      v34 = a3[1];
      if (v11 >= 1)
      {
        v35 = (double *)(v33 + v34 * v23);
        v36 = (double *)(v33 + v34 * v24);
        v37 = (double *)(v33 + v34 * v25);
        v38 = a5;
        v39 = v11;
        v40 = (double *)(v33 + v34 * v22);
        do
        {
          v41 = *v40++;
          v42 = v29 * v41 + *v38;
          *v38 = v42;
          v43 = *v37++;
          v44 = v42 + v30 * v43;
          *v38 = v44;
          v45 = *v36++;
          v46 = v44 + v31 * v45;
          *v38 = v46;
          v47 = *v35++;
          *v38++ = v46 + v32 * v47;
          --v39;
        }
        while (v39);
      }
      if (v12 > v11)
      {
        if (v121)
        {
          if (v121 == 1)
          {
            v48 = (float64x2_t *)(v33 + v20 + v34 * v24);
            v49 = (float64x2_t *)(v33 + v20 + v34 * v22);
            v50 = (float64x2_t *)(v33 + v20 + v34 * v23);
            v51 = v120;
            v52 = v11;
            v53 = (float64x2_t *)(v33 + v20 + v34 * v25);
            do
            {
              v54 = *v49++;
              v55 = vmulq_n_f64(v54, v29);
              v56 = *v53++;
              v57 = vmulq_n_f64(v56, v30);
              v58 = *v48++;
              v59 = vaddq_f64(v55, v57);
              v60 = vmulq_n_f64(v58, v31);
              v61 = *v50++;
              *v51 = vaddq_f64(*v51, vaddq_f64(v59, vaddq_f64(v60, vmulq_n_f64(v61, v32))));
              ++v51;
              v52 += 2;
            }
            while (v52 < v12);
          }
          else
          {
            v76 = (float64x2_t *)(v33 + v20 + v34 * v23);
            v77 = (float64x2_t *)(v33 + v20 + v34 * v24);
            v78 = (float64x2_t *)(v33 + v20 + v34 * v25);
            v79 = v120;
            v80 = v11;
            v81 = (float64x2_t *)(v33 + v20 + v34 * v22);
            do
            {
              v82 = *v81++;
              v83 = vmulq_n_f64(v82, v29);
              v84 = *v78++;
              v85 = vmulq_n_f64(v84, v30);
              v86 = *v77++;
              v87 = vaddq_f64(v83, v85);
              v88 = vmulq_n_f64(v86, v31);
              v89 = *v76++;
              *v79 = vaddq_f64(*v79, vaddq_f64(v87, vaddq_f64(v88, vmulq_n_f64(v89, v32))));
              ++v79;
              v80 += 2;
            }
            while (v80 < v12);
          }
        }
        else
        {
          v62 = (float64x2_t *)(v33 + v20 + v34 * v23);
          v63 = (float64x2_t *)(v33 + v20 + v34 * v24);
          v64 = (float64x2_t *)(v33 + v20 + v34 * v25);
          v65 = v120;
          v66 = v11;
          v67 = (float64x2_t *)(v33 + v20 + v34 * v22);
          do
          {
            v68 = *v67++;
            v69 = vmulq_n_f64(v68, v29);
            v70 = *v64++;
            v71 = vmulq_n_f64(v70, v30);
            v72 = *v63++;
            v73 = vaddq_f64(v69, v71);
            v74 = vmulq_n_f64(v72, v31);
            v75 = *v62++;
            *v65 = vaddq_f64(*v65, vaddq_f64(v73, vaddq_f64(v74, vmulq_n_f64(v75, v32))));
            ++v65;
            v66 += 2;
          }
          while (v66 < v12);
        }
      }
      if (result > v12)
      {
        v90 = 0;
        v91 = v33 + v21;
        v92 = v33 + v21 + v34 * v23;
        v93 = v91 + v34 * v24;
        v94 = v91 + v34 * v25;
        v95 = v91 + v34 * v22;
        do
        {
          v96 = v29 * *(double *)(v95 + 8 * v90) + v27[v90];
          v27[v90] = v96;
          v97 = v96 + v30 * *(double *)(v94 + 8 * v90);
          v27[v90] = v97;
          v98 = v97 + v31 * *(double *)(v93 + 8 * v90);
          v27[v90] = v98;
          v27[v90] = v98 + v32 * *(double *)(v92 + 8 * v90);
          ++v90;
        }
        while (result - v12 != v90);
      }
      v26 += 4;
      v23 += 32;
      v24 += 32;
      v25 += 32;
      v22 += 32;
    }
    while (v26 < v19);
  }
  do
  {
    v99 = v7;
    if (v19 < a2)
    {
      v100 = 8 * v19;
      do
      {
        v101 = *(double *)(*a4 + 8 * a4[1] * v19) * a6;
        v102 = *a3;
        v103 = a3[1];
        if (v11 >= 1)
        {
          v104 = (double *)(v102 + v103 * v100);
          v105 = a5;
          v106 = v11;
          do
          {
            v107 = *v104++;
            *v105 = *v105 + v101 * v107;
            ++v105;
            --v106;
          }
          while (v106);
        }
        if ((((_BYTE)v102 + 8 * (_BYTE)v103 * (_BYTE)v19 + 8 * (_BYTE)v11) & 0xF) != 0)
        {
          if (v11 < v12)
          {
            v108 = (float64x2_t *)(v102 + v20 + v103 * v100);
            v109 = (float64x2_t *)&a5[v11];
            v110 = v11;
            do
            {
              v111 = *v108++;
              *v109 = vmlaq_n_f64(*v109, v111, v101);
              ++v109;
              v110 += 2;
            }
            while (v110 < v12);
          }
        }
        else if (v11 < v12)
        {
          v112 = (float64x2_t *)(v102 + v20 + v103 * v100);
          v113 = (float64x2_t *)&a5[v11];
          v114 = v11;
          do
          {
            v115 = *v112++;
            *v113 = vmlaq_n_f64(*v113, v115, v101);
            ++v113;
            v114 += 2;
          }
          while (v114 < v12);
        }
        if (result > v12)
        {
          v116 = (double *)(v102 + v21 + v103 * v100);
          v117 = &a5[v12];
          v118 = result - v12;
          do
          {
            v119 = *v116++;
            *v117 = *v117 + v101 * v119;
            ++v117;
            --v118;
          }
          while (v118);
        }
        ++v19;
        v100 += 8;
      }
      while (v19 != a2);
    }
    v7 = 0;
    v19 = 0;
    a2 = v99;
  }
  while (v99);
  return result;
}

void __cxx_global_var_init_5_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_lsh_family_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C63D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_29_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_lsh_neighbors_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C66E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_56()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_nearest_neighbors_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C69F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_nearest_neighbors_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C6D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_31()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_10()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C701C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_32()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_object_detector_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)2003>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _DWORD *v5;
  _DWORD *v6;
  _BOOL8 v7;
  uint64_t *v8;
  void *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  const CoreML::Specification::FeatureType *v14;
  CoreML::Specification::ArrayFeatureType *v15;
  uint64_t *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  CoreML::Specification::ArrayFeatureType *v23;
  CoreML::Specification::ArrayFeatureType *v24;
  uint64_t *v25;
  const CoreML::Specification::FeatureType *v26;
  CoreML::Specification::ArrayFeatureType *v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  const char *v33;
  size_t v34;
  _QWORD *v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  CoreML::Specification::ArrayFeatureType *v43;
  CoreML::Specification::ArrayFeatureType *v44;
  uint64_t *v45;
  int v46;
  const char *v47;
  size_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void **v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57[2];
  unsigned __int8 v58;
  void *v59[2];
  unsigned __int8 v60;
  uint64_t *v61;
  int v62;
  int v63;
  void *v64;
  void *__p;
  void *v66;
  _DWORD *v67;
  uint64_t *v68;
  int v69;
  void *v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  void *v78;
  __int128 v79;
  uint64_t v80;

  if (*(_QWORD *)(a1 + 16))
    v3 = *(uint64_t **)(a1 + 16);
  else
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a1 + 44) != 2003)
  {
    std::string::basic_string[abi:ne180100]<0>(&v70, "Model not a sound analysis preprocessing.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      return;
    v9 = v70;
    goto LABEL_49;
  }
  CoreML::Result::Result((CoreML::Result *)&v78);
  v5 = operator new(4uLL);
  __p = v5;
  *v5 = 5;
  v66 = v5 + 1;
  v67 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 2), 1, (int **)&__p, (uint64_t)&v70);
  v78 = v70;
  if (SHIBYTE(v80) < 0)
    operator delete((void *)v79);
  v79 = v71;
  v80 = v72;
  HIBYTE(v72) = 0;
  LOBYTE(v71) = 0;
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v78))
    goto LABEL_46;
  v6 = operator new(4uLL);
  __p = v6;
  *v6 = 5;
  v66 = v6 + 1;
  v67 = v6 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 5), 1, (int **)&__p, (uint64_t)&v70);
  v78 = v70;
  if (SHIBYTE(v80) < 0)
    operator delete((void *)v79);
  v79 = v71;
  v80 = v72;
  HIBYTE(v72) = 0;
  LOBYTE(v71) = 0;
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  v7 = CoreML::Result::good((CoreML::Result *)&v78);
  if (!v7)
    goto LABEL_46;
  if (*(_DWORD *)(a1 + 44) == 2003)
    v8 = *(uint64_t **)(a1 + 32);
  else
    v8 = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::default_instance((CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)v7);
  v10 = *((_DWORD *)v8 + 7);
  if (!v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v70, "Type for sound analysis preprocessing not set");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if (SHIBYTE(v71) < 0)
      operator delete(v70);
    goto LABEL_47;
  }
  if (v10 != 20)
    goto LABEL_46;
  v11 = *(uint64_t **)(*(_QWORD *)(v3[4] + 8) + 32);
  if (!v11)
    v11 = &CoreML::Specification::_FeatureType_default_instance_;
  v12 = *((_DWORD *)v11 + 9) == 5
      ? (uint64_t *)v11[3]
      : CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v8);
  v76 = 0;
  v77 = 0;
  v13 = *((_DWORD *)v12 + 4);
  if (v13
    && (_tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v76, v13),
        memcpy(v77 + 1, (const void *)(v12[3] + 8), 8 * *((int *)v12 + 4)),
        LODWORD(v76) = *((_DWORD *)v12 + 4),
        (_DWORD)v76 == 1)
    && v77[1] == 15600)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v3[4] + 8) + 32)
        ? *(const CoreML::Specification::FeatureType **)(*(_QWORD *)(v3[4] + 8) + 32)
        : (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
    v15 = (CoreML::Specification::ArrayFeatureType *)CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)&__p, v14);
    v16 = v69 == 5 ? v68 : CoreML::Specification::ArrayFeatureType::default_instance(v15);
    if (*((_DWORD *)v16 + 9) == 65568)
    {
      v21 = *(uint64_t **)(*(_QWORD *)(v3[7] + 8) + 32);
      if (!v21)
        v21 = &CoreML::Specification::_FeatureType_default_instance_;
      v22 = *((_DWORD *)v21 + 9) == 5
          ? (uint64_t *)v21[3]
          : CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v16);
      _tc_google::protobuf::RepeatedField<long long>::RepeatedField((uint64_t)&v63, (int *)v22 + 4);
      if (v63 == 3 && *((_QWORD *)v64 + 1) == 1 && *((_QWORD *)v64 + 2) == 96 && *((_QWORD *)v64 + 3) == 64)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v3[7] + 8) + 32)
            ? *(const CoreML::Specification::FeatureType **)(*(_QWORD *)(v3[7] + 8) + 32)
            : (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
        v27 = (CoreML::Specification::ArrayFeatureType *)CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)v59, v26);
        v28 = v62 == 5 ? v61 : CoreML::Specification::ArrayFeatureType::default_instance(v27);
        if (*((_DWORD *)v28 + 9) == 65568)
        {
          v20 = 2;
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v70);
          v43 = (CoreML::Specification::ArrayFeatureType *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v71 + 1, (uint64_t)"Unsupported array type \"", 24);
          v44 = v43;
          if (v62 == 5)
            v45 = v61;
          else
            v45 = CoreML::Specification::ArrayFeatureType::default_instance(v43);
          v46 = *((_DWORD *)v45 + 9);
          switch(v46)
          {
            case 131104:
              v47 = "MLArrayDataTypeINT32";
              break;
            case 65600:
              v47 = "MLArrayDataTypeDOUBLE";
              break;
            case 65568:
              v47 = "MLArrayDataTypeFLOAT32";
              break;
            default:
              v47 = "INVALID";
              break;
          }
          v48 = strlen(v47);
          v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v47, v48);
          v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\" for feature \"", 15);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\". ", *(const void ***)(*(_QWORD *)(v3[4] + 8) + 16), v57);
          if ((v58 & 0x80u) == 0)
            v51 = v57;
          else
            v51 = (void **)v57[0];
          if ((v58 & 0x80u) == 0)
            v52 = v58;
          else
            v52 = (uint64_t)v57[1];
          v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Should be of: ", 14);
          v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"MLArrayDataTypeFLOAT32", 22);
          v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)".", 1);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v56);
          if ((char)v58 < 0)
            operator delete(v57[0]);
          std::stringbuf::str();
          CoreML::Result::Result((_DWORD *)a2, 8);
          if ((char)v58 < 0)
            operator delete(v57[0]);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v70);
          v20 = 1;
        }
        CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)v59);
      }
      else
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v71 + 1, (uint64_t)"Incorrect output shape, should be 3-dimension, of size: ", 56);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"x", 1);
        v30 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"x", 1);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v31);
        std::stringbuf::str();
        CoreML::Result::Result((_DWORD *)a2, 8);
        if ((char)v60 < 0)
          operator delete(v59[0]);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v70);
        v20 = 1;
      }
      if (v64 && !*(_QWORD *)v64)
        operator delete(v64);
    }
    else
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v70);
      v23 = (CoreML::Specification::ArrayFeatureType *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v71 + 1, (uint64_t)"Unsupported array type \"", 24);
      v24 = v23;
      if (v69 == 5)
        v25 = v68;
      else
        v25 = CoreML::Specification::ArrayFeatureType::default_instance(v23);
      v32 = *((_DWORD *)v25 + 9);
      switch(v32)
      {
        case 131104:
          v33 = "MLArrayDataTypeINT32";
          break;
        case 65600:
          v33 = "MLArrayDataTypeDOUBLE";
          break;
        case 65568:
          v33 = "MLArrayDataTypeFLOAT32";
          break;
        default:
          v33 = "INVALID";
          break;
      }
      v34 = strlen(v33);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v33, v34);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\" for feature \"", 15);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\". ", *(const void ***)(*(_QWORD *)(v3[4] + 8) + 16), v59);
      if ((v60 & 0x80u) == 0)
        v37 = v59;
      else
        v37 = (void **)v59[0];
      if ((v60 & 0x80u) == 0)
        v38 = v60;
      else
        v38 = (uint64_t)v59[1];
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Should be of: ", 14);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"MLArrayDataTypeFLOAT32", 22);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)".", 1);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v42);
      if ((char)v60 < 0)
        operator delete(v59[0]);
      std::stringbuf::str();
      CoreML::Result::Result((_DWORD *)a2, 8);
      if ((char)v60 < 0)
        operator delete(v59[0]);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v70);
      v20 = 1;
    }
    CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)&__p);
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v71 + 1, (uint64_t)"Incorrect input shape, should be 1-dimension, of length: ", 57);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    CoreML::Result::Result((_DWORD *)a2, 8);
    if (SHIBYTE(v67) < 0)
      operator delete(__p);
    v70 = (void *)*MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)&v70 + *((_QWORD *)v70 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    *((_QWORD *)&v71 + 1) = v19;
    v72 = MEMORY[0x24BEDB848] + 16;
    if (v74 < 0)
      operator delete(v73);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x219A198F4](&v75);
    v20 = 1;
  }
  if (v77)
  {
    if (!*v77)
      operator delete(v77);
  }
  if (v20 == 2)
  {
LABEL_46:
    *(_QWORD *)a2 = v78;
    *(_OWORD *)(a2 + 8) = v79;
    *(_QWORD *)(a2 + 24) = v80;
    v79 = 0uLL;
    v80 = 0;
  }
LABEL_47:
  if ((SHIBYTE(v80) & 0x80000000) == 0)
    return;
  v9 = (void *)v79;
LABEL_49:
  operator delete(v9);
}

void sub_2184C7A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,std::locale a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  _QWORD *v40;

  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
  CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)&a15);
  if (a24 && !*a24)
    operator delete(a24);
  CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)&a25);
  v40 = *(_QWORD **)(v38 - 88);
  if (v40 && !*v40)
    operator delete(v40);
  if (*(char *)(v38 - 49) < 0)
    operator delete(*(void **)(v38 - 72));
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::RepeatedField<long long>::RepeatedField(uint64_t a1, int *a2)
{
  int v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *a2;
  if (v4)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a1, v4);
    memcpy((void *)(*(_QWORD *)(a1 + 8) + 8), (const void *)(*((_QWORD *)a2 + 1) + 8), 8 * *a2);
    *(_DWORD *)a1 = *a2;
  }
  return a1;
}

uint64_t _GLOBAL__sub_I_SoundAnalysisPreprocessingValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184C7E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_33()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_od_darknet_yolo_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::object_detection::simple_data_iterator::compute_properties(uint64_t a1@<X0>, const turi::gl_sarray *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BYTE *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::string::size_type v53;
  turi::flexible_type_impl *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  const void **v58;
  __int128 v59;
  const void **v60;
  int v61;
  uint64_t v62;
  int *v63;
  file_logger *v64;
  file_logger *started;
  std::string *v66;
  __int128 v67;
  uint64_t v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  std::vector<std::string>::size_type v71;
  char *v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char **v77;
  BOOL v78;
  _QWORD *exception;
  uint64_t v81;
  void *v83[2];
  std::string::size_type v84;
  _BYTE v85[40];
  std::string v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  void *v90;
  void *v91;
  _BYTE *v92;
  _QWORD v93[2];
  std::__shared_weak_count *v94;
  void *v95;
  char *v96;
  std::__shared_weak_count *v97;
  void **v98;
  char v99;
  std::locale v100;
  uint64_t v101;
  std::string __p;
  uint64_t v103;
  int v104;
  void *v105;
  char v106;
  void *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 56) = 1065353216;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v85);
  if (turi::gl_sarray::size(a2))
  {
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)v93);
    if (turi::gl_sarray::dtype(a2) == 4)
    {
      std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray&,0>(&__p, "annotations", a2);
      turi::gl_sframe::gl_sframe(&v95, &__p, 1);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v103);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v86, "annotations");
      std::string::basic_string[abi:ne180100]<0>(&v90, "bbox");
      turi::gl_sframe::stack((uint64_t)&v95, (uint64_t)&v86, (uint64_t)&v90, 1u, &__p);
      turi::gl_sframe::operator=((uint64_t)v93, (uint64_t)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
      v6 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v7 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (SHIBYTE(v92) < 0)
        operator delete(v90);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      v95 = off_24D91E9C0;
      v9 = v97;
      if (v97)
      {
        p_shared_owners = (unint64_t *)&v97->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v95, "bbox");
      turi::gl_sframe::operator[]((uint64_t)v93, (uint64_t)&v95, (turi::gl_sarray *)&__p);
      turi::gl_sarray_reference::operator=((uint64_t)&__p, (uint64_t)a2);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
      if (v106 < 0)
        operator delete(v105);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
      if (SHIBYTE(v97) < 0)
        operator delete(v95);
    }
    std::string::basic_string[abi:ne180100]<0>(&v95, "bbox");
    std::string::basic_string[abi:ne180100]<0>(&v86, "");
    v12 = operator new(1uLL);
    v90 = v12;
    *v12 = 2;
    v91 = v12 + 1;
    v92 = v12 + 1;
    turi::flexible_type::flexible_type((turi::flexible_type *)&v110, "label");
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v98 = (void **)&v87;
    v99 = 0;
    v87 = (uint64_t *)operator new(0x10uLL);
    v88 = v87;
    v89 = v87 + 2;
    v88 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v89, &v110, &v112, (uint64_t)v87);
    turi::gl_sframe::unpack((uint64_t)v93, (uint64_t)&v95, (uint64_t)&v86, (uint64_t)&v90, (uint64_t)&turi::FLEX_UNDEFINED, &v87, (turi::gl_sframe *)&__p);
    turi::gl_sframe::operator=((uint64_t)v93, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v13 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v14 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v98 = (void **)&v87;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v98);
    switch(v111)
    {
      case 2:
        v16 = (unint64_t *)v110;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          v19 = v110;
          if (v110)
          {
            if (*(char *)(v110 + 31) < 0)
              operator delete(*(void **)(v110 + 8));
            v20 = v19;
            v21 = 0x1012C404EF22A49;
            goto LABEL_70;
          }
        }
        break;
      case 3:
        v33 = (unint64_t *)v110;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          v36 = v110;
          if (v110)
          {
            v37 = *(void **)(v110 + 8);
            if (v37)
            {
              *(_QWORD *)(v110 + 16) = v37;
              operator delete(v37);
            }
            v20 = v36;
            v21 = 0x1080C409938AC02;
            goto LABEL_70;
          }
        }
        break;
      case 4:
        v22 = (unint64_t *)v110;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = v110;
          if (v110)
          {
            v98 = (void **)(v110 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v98);
            goto LABEL_63;
          }
        }
        break;
      case 5:
        v38 = (unint64_t *)v110;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          v25 = v110;
          if (v110)
          {
            v98 = (void **)(v110 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v98);
LABEL_63:
            v20 = v25;
            v21 = 0x1020C405E66F15BLL;
            goto LABEL_70;
          }
        }
        break;
      case 8:
        v41 = (unint64_t *)v110;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          v44 = v110;
          if (v110)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v110 + 16));
            v20 = v44;
            v32 = -235920773;
            goto LABEL_69;
          }
        }
        break;
      case 9:
        v26 = (unint64_t *)v110;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v29 = v110;
          if (v110)
          {
            v30 = *(void **)(v110 + 48);
            if (v30)
            {
              *(_QWORD *)(v110 + 56) = v30;
              operator delete(v30);
            }
            v31 = *(void **)(v29 + 24);
            if (v31)
            {
              *(_QWORD *)(v29 + 32) = v31;
              operator delete(v31);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29 + 8);
            v20 = v29;
            v32 = 2071181815;
LABEL_69:
            v21 = v32 | 0x1030C4000000000;
LABEL_70:
            MEMORY[0x219A19A08](v20, v21);
          }
        }
        break;
      default:
        break;
    }
    if (v90)
    {
      v91 = v90;
      operator delete(v90);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97) < 0)
      operator delete(v95);
    std::string::basic_string[abi:ne180100]<0>(&v90, "label");
    turi::gl_sframe::operator[]((uint64_t)v93, (uint64_t)&v90, (turi::gl_sarray *)&__p);
    turi::gl_sarray::unique((turi::gl_sarray *)&__p, (uint64_t)&v86);
    turi::gl_sarray::sort((turi::gl_sarray *)&v86, 1, (uint64_t)&v95);
    v45 = turi::gl_sframe::size((turi::gl_sframe *)v93);
    turi::gl_sarray::gl_sarray(&v100, &v95);
    v101 = v45;
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v95);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v86);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
    if (v106 < 0)
      operator delete(v105);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    if (SHIBYTE(v92) < 0)
      operator delete(v90);
    v93[0] = off_24D91E9C0;
    v46 = v94;
    if (v94)
    {
      v47 = (unint64_t *)&v94->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  else
  {
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)&v95);
    turi::gl_sarray::gl_sarray(&__p, &v95);
    v104 = 0;
    turi::gl_sarray::gl_sarray(&v100, &__p);
    v101 = v104;
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v95);
  }
  turi::gl_sarray::operator=((uint64_t)v85, (uint64_t)&v100);
  *(_QWORD *)(a4 + 64) = v101;
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v100);
  v96 = 0;
  v97 = 0;
  v95 = &v96;
  turi::gl_sarray::range_iterator((turi::gl_sarray *)v85, 0, 0xFFFFFFFFFFFFFFFFLL, &v100);
  v93[0] = turi::gl_sarray_range::begin((turi::gl_sarray_range *)&v100);
  v93[1] = v49;
  v50 = turi::gl_sarray_range::end((turi::gl_sarray_range *)&v100);
  v51 = *MEMORY[0x24BEDB7F0];
  v52 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v53 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v81 = MEMORY[0x24BEDB848] + 16;
  while (2)
  {
    if (v93[0] != v50)
    {
      v54 = (turi::flexible_type_impl *)turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)v93);
      switch(*((_BYTE *)v54 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          __p.__r_.__value_.__r.__words[0] = v51;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v51 - 24)) = v52;
          __p.__r_.__value_.__r.__words[2] = v53;
          v55 = v81;
          goto LABEL_97;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          __p.__r_.__value_.__r.__words[0] = v51;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v51 - 24)) = v52;
          v55 = MEMORY[0x24BEDB848] + 16;
          __p.__r_.__value_.__r.__words[2] = v53;
LABEL_97:
          v103 = v55;
          if (v108 < 0)
            operator delete(v107);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v109);
          goto LABEL_104;
        case 2:
          v56 = *(_QWORD *)v54;
          if (*(char *)(*(_QWORD *)v54 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v56 + 8), *(_QWORD *)(v56 + 16));
          }
          else
          {
            v57 = *(_OWORD *)(v56 + 8);
            v86.__r_.__value_.__r.__words[2] = *(_QWORD *)(v56 + 24);
            *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v57;
          }
          goto LABEL_104;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v54 + 8));
          goto LABEL_104;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v54 + 8));
          goto LABEL_104;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v54 + 8));
          goto LABEL_104;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v54, &v86);
          goto LABEL_104;
        case 7:
          memset(&v86, 0, sizeof(v86));
          goto LABEL_104;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_104;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v54 + 8));
LABEL_104:
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v95, (const void **)&v86.__r_.__value_.__l.__data_, (uint64_t)&v86);
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)v93);
          continue;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
    }
    break;
  }
  turi::gl_sarray_range::~gl_sarray_range((unint64_t **)&v100);
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
  {
    v71 = turi::gl_sarray::size((turi::gl_sarray *)v85);
    std::vector<std::string>::reserve((std::vector<std::string> *)a4, v71);
    v72 = (char *)v95;
    if (v95 != &v96)
    {
      v73 = 0;
      do
      {
        v74 = *(_QWORD *)(a4 + 8);
        if (v74 >= *(_QWORD *)(a4 + 16))
        {
          v75 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, (__int128 *)v72 + 2);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a4, (__int128 *)v72 + 2);
          v75 = v74 + 24;
        }
        *(_QWORD *)(a4 + 8) = v75;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v72 + 32);
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4 + 24, (unsigned __int8 *)v72 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 10) = v73;
        v76 = (char *)*((_QWORD *)v72 + 1);
        if (v76)
        {
          do
          {
            v77 = (char **)v76;
            v76 = *(char **)v76;
          }
          while (v76);
        }
        else
        {
          do
          {
            v77 = (char **)*((_QWORD *)v72 + 2);
            v78 = *v77 == v72;
            v72 = (char *)v77;
          }
          while (!v78);
        }
        ++v73;
        v72 = (char *)v77;
      }
      while (v77 != &v96);
    }
  }
  else
  {
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a4);
    v58 = *(const void ***)a3;
    *(_QWORD *)a4 = *(_QWORD *)a3;
    v59 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a4 + 8) = v59;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v60 = (const void **)v59;
    if (v58 != (const void **)v59)
    {
      v61 = 0;
      v62 = a4 + 24;
      do
      {
        if (*(_BYTE *)(a1 + 70))
        {
          if (&v96 == (char **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v95, v58))
          {
            v63 = (int *)global_logger();
            if (v63[169] <= 4)
            {
              if (cppipc::must_cancel((cppipc *)v63))
                log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
              v64 = (file_logger *)global_logger();
              started = file_logger::start_stream(v64, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/object_detection/od_data_iterator.cpp", "compute_properties", 316, 1);
              std::operator+<char>();
              v66 = std::string::append(&__p, "', which is not presented in the training dataset.\n");
              v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
              v84 = v66->__r_.__value_.__r.__words[2];
              *(_OWORD *)v83 = v67;
              v66->__r_.__value_.__l.__size_ = 0;
              v66->__r_.__value_.__r.__words[2] = 0;
              v66->__r_.__value_.__r.__words[0] = 0;
              v68 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)v83);
              v69 = pthread_getspecific(*(_QWORD *)(v68 + 592));
              if (v69)
              {
                if (*((_BYTE *)v69 + 280))
                {
                  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(v69[2] - 24) + 16));
                  v70 = std::locale::use_facet(&v100, MEMORY[0x24BEDB350]);
                  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
                  std::locale::~locale(&v100);
                  std::ostream::put();
                  std::ostream::flush();
                  file_logger::stream_flush((file_logger *)v68);
                  if (*(_DWORD *)(v68 + 600) == 7)
                  {
                    __print_back_trace();
                    exception = __cxa_allocate_exception(8uLL);
                    *exception = "LOG_FATAL encountered";
                    __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
                  }
                }
              }
              if (SHIBYTE(v84) < 0)
                operator delete(v83[0]);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v62, (unsigned __int8 *)v58, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 10) = v61++;
        v58 += 3;
      }
      while (v58 != v60);
    }
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v95, v96);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v85);
}

void sub_2184C8B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,std::locale a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  uint64_t v54;

  a54 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v54 + 8);
  if (a37 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  a41 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  a38 = (uint64_t)off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a16);
  turi::object_detection::simple_data_iterator::annotation_properties::~annotation_properties(a12);
  _Unwind_Resume(a1);
}

void turi::object_detection::simple_data_iterator::annotation_properties::~annotation_properties(void **this)
{
  void **v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 3));
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

turi::object_detection::simple_data_iterator *turi::object_detection::simple_data_iterator::simple_data_iterator(turi::object_detection::simple_data_iterator *this, const turi::object_detection::data_iterator::parameters *a2)
{
  turi::gl_sframe *v4;
  __int128 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  std::string v20;
  _BYTE v21[40];
  _QWORD v22[6];
  void *__p;
  char v24;
  void **v25[5];
  _QWORD v26[3];
  _QWORD *v27;
  std::string v28;
  uint64_t v29;
  void *v30;
  char v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = off_24D945530;
  v4 = (turi::object_detection::simple_data_iterator *)((char *)this + 8);
  v5 = (__int128 *)((char *)a2 + 72);
  turi::gl_sframe::operator[]((uint64_t)a2, (uint64_t)a2 + 72, (turi::gl_sarray *)&v28);
  turi::gl_sarray::gl_sarray(v25, &v28);
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA58;
  if (v31 < 0)
    operator delete(v30);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v28);
  if (turi::gl_sarray::dtype((turi::gl_sarray *)v25) == 8)
  {
    v26[0] = &unk_24D945598;
    v26[1] = turi::image_util::encode_image;
    v27 = v26;
    turi::gl_sarray::apply((uint64_t)v25, (uint64_t)v26, 8, 1, (uint64_t)&v28);
    turi::gl_sarray::operator=((uint64_t)v25, (uint64_t)&v28);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v28);
    v6 = v27;
    if (v27 == v26)
    {
      v7 = 4;
      v6 = v26;
    }
    else
    {
      if (!v27)
        goto LABEL_9;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
LABEL_9:
  std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<true,0>(&v28, v5, (turi::gl_sarray *)v25);
  turi::gl_sframe::gl_sframe(v4, &v28, 1);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v29);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v8 = *((unsigned __int8 *)a2 + 47);
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)a2 + 4);
  if (v8)
  {
    turi::gl_sframe::operator[]((uint64_t)a2, (uint64_t)a2 + 24, (turi::gl_sarray *)&v28);
    turi::gl_sframe::operator[]((uint64_t)v4, (uint64_t)a2 + 24, (turi::gl_sarray *)v22);
    turi::gl_sarray_reference::operator=((uint64_t)v22, (uint64_t)&v28);
    v22[0] = off_24D91EA30;
    if (v24 < 0)
      operator delete(__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v22);
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA58;
    if (v31 < 0)
      operator delete(v30);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v28);
  }
  if (turi::gl_sframe::contains_column((uint64_t)a2, (unsigned __int8 **)a2 + 3))
  {
    turi::gl_sframe::operator[]((uint64_t)v4, (uint64_t)a2 + 24, (turi::gl_sarray *)&v28);
    turi::gl_sarray::gl_sarray(v22, &v28);
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
    if (v31 < 0)
      operator delete(v30);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v28);
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)v21, (const turi::gl_sarray *)v22);
    v32[0] = &off_24D945638;
    v33 = v32;
    turi::gl_sarray::apply((uint64_t)v21, (uint64_t)v32, 4, 1, (uint64_t)&v28);
    v9 = v33;
    if (v33 == v32)
    {
      v10 = 4;
      v9 = v32;
    }
    else
    {
      if (!v33)
      {
LABEL_27:
        turi::gl_sframe::replace_add_column((uint64_t)v4, (uint64_t)&v28, (const void **)a2 + 3);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v28);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v21);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v22);
        goto LABEL_28;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_27;
  }
LABEL_28:
  v11 = *((unsigned __int8 *)a2 + 71);
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    turi::gl_sframe::operator[]((uint64_t)a2, (uint64_t)a2 + 48, (turi::gl_sarray *)&v28);
    turi::gl_sframe::operator[]((uint64_t)v4, (uint64_t)a2 + 48, (turi::gl_sarray *)v22);
    turi::gl_sarray_reference::operator=((uint64_t)v22, (uint64_t)&v28);
    v22[0] = off_24D91EA30;
    if (v24 < 0)
      operator delete(__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v22);
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA58;
    if (v31 < 0)
      operator delete(v30);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v28);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v25);
  v12 = *((unsigned __int8 *)a2 + 47);
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)a2 + 4);
  if (v12)
    v13 = turi::gl_sframe::column_index((uint64_t)v4, (uint64_t)a2 + 24);
  else
    v13 = -1;
  *((_QWORD *)this + 4) = v13;
  v14 = *((unsigned __int8 *)a2 + 71);
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)a2 + 7);
  if (v14)
    v15 = turi::gl_sframe::column_index((uint64_t)v4, (uint64_t)a2 + 48);
  else
    v15 = -1;
  *((_QWORD *)this + 5) = v15;
  *((_QWORD *)this + 6) = turi::gl_sframe::column_index((uint64_t)v4, (uint64_t)v5);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 15);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 32);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 132);
  *(_WORD *)((char *)this + 69) = *(_WORD *)((char *)a2 + 133);
  if (*((char *)a2 + 47) >= 0)
    v16 = *((unsigned __int8 *)a2 + 47);
  else
    v16 = *((_QWORD *)a2 + 4);
  if (v16)
  {
    turi::gl_sframe::operator[]((uint64_t)v4, (uint64_t)a2 + 24, (turi::gl_sarray *)&v28);
    turi::gl_sarray::gl_sarray(v22, &v28);
  }
  else
  {
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)v22);
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *((__int128 **)a2 + 12), *((__int128 **)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3));
  turi::object_detection::simple_data_iterator::compute_properties((uint64_t)this, (const turi::gl_sarray *)v22, (uint64_t)&v20, (uint64_t)this + 72);
  v25[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v25);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v22);
  if (v16)
  {
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
    if (v31 < 0)
      operator delete(v30);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v28);
  }
  turi::gl_sframe::range_iterator(v4, 0, 0xFFFFFFFFFFFFFFFFLL, (uint64_t ****)this + 18);
  *((_QWORD *)this + 20) = turi::gl_sarray_range::begin((turi::object_detection::simple_data_iterator *)((char *)this + 144));
  *((_QWORD *)this + 21) = v17;
  v18 = *((_DWORD *)a2 + 34) + ((*((_DWORD *)a2 + 34) / 0x7FFFFFFFu) | ((*((_DWORD *)a2 + 34) / 0x7FFFFFFFu) << 31));
  if (v18 <= 1)
    v18 = 1;
  *((_DWORD *)this + 44) = v18;
  return this;
}

void sub_2184C9560(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 16);
  _Unwind_Resume(a1);
}

void turi::object_detection::simple_data_iterator::next_batch(turi::object_detection::simple_data_iterator *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  int v15;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  void **v24;
  void **v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  void **v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  void **v34;
  void *v35;
  void *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  void **v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  void **v49;
  void **v50;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  unsigned int v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *size;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  void **v103;
  void **v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  void **v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  void **v113;
  void *v114;
  void *v115;
  unsigned int v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  void **v120;
  void *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  void **v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  unsigned int v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  void *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  const turi::image_type *v160;
  __int128 v161;
  _QWORD *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  char v167;
  uint64_t v168;
  double v169;
  _QWORD *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  int64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  BOOL v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  size_t v210;
  double *v211;
  double *v212;
  unint64_t v213;
  double *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  double v218;
  double v219;
  double v220;
  uint64_t v221;
  unint64_t *v223;
  unint64_t v224;
  BOOL v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  double v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t *v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t *v248;
  void *v249;
  void *v250;
  unsigned int v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t *v255;
  void *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  void **v268;
  void **v269;
  uint64_t v270;
  double v271;
  uint64_t v272;
  unsigned int *v273;
  unsigned int v274;
  __int128 v275;
  __int128 v276;
  unint64_t *v277;
  unint64_t v278;
  BOOL v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  BOOL v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  BOOL v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  BOOL v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  BOOL v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  unint64_t *v312;
  unint64_t v313;
  void **v314;
  unint64_t *v315;
  unint64_t v316;
  void **v317;
  void *v318;
  void *v319;
  unsigned int v320;
  unint64_t *v321;
  unint64_t v322;
  void **v323;
  void *v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  void **v329;
  unint64_t v330;
  unint64_t v331;
  _QWORD *v332;
  void *v333;
  _QWORD *v334;
  char v335;
  uint64_t v336;
  double v337;
  _QWORD *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  __int128 v344;
  uint64_t v345;
  int64_t v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  double v358;
  uint64_t *v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  double v365;
  BOOL v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  size_t v378;
  double *v379;
  double *v380;
  unint64_t v381;
  double *v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  double v386;
  double v387;
  double v388;
  uint64_t v389;
  unint64_t *v391;
  unint64_t v392;
  BOOL v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  double v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t *v406;
  unint64_t *v407;
  uint64_t v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t *v412;
  unint64_t *v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t *v416;
  void *v417;
  void *v418;
  unsigned int v419;
  unint64_t *v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t *v423;
  void *v424;
  unint64_t *v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t *v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t *v431;
  unint64_t *v432;
  unint64_t v433;
  unint64_t *v434;
  unint64_t v435;
  void **v436;
  void **v437;
  uint64_t v438;
  double v439;
  uint64_t v440;
  unsigned int *v441;
  unsigned int v442;
  __int128 v443;
  __int128 v444;
  unint64_t *v445;
  unint64_t v446;
  BOOL v447;
  unint64_t *v448;
  unint64_t v449;
  unint64_t *v450;
  unint64_t v451;
  BOOL v452;
  unint64_t *v453;
  unint64_t v454;
  unint64_t *v455;
  unint64_t v456;
  unint64_t *v457;
  unint64_t v458;
  unint64_t *v459;
  unint64_t v460;
  BOOL v461;
  unint64_t *v462;
  unint64_t v463;
  unint64_t *v464;
  unint64_t v465;
  BOOL v466;
  unint64_t *v467;
  unint64_t v468;
  unint64_t *v469;
  unint64_t v470;
  unint64_t *v471;
  unint64_t v472;
  BOOL v473;
  unint64_t *v474;
  unint64_t v475;
  unint64_t *v476;
  unint64_t v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t *v480;
  unint64_t v481;
  void **v482;
  unint64_t *v483;
  unint64_t v484;
  void **v485;
  void *v486;
  void *v487;
  unsigned int v488;
  unint64_t *v489;
  unint64_t v490;
  void **v491;
  void *v492;
  unint64_t *v493;
  unint64_t v494;
  unint64_t *v495;
  unint64_t v496;
  void **v497;
  unint64_t v498;
  unint64_t v499;
  _QWORD *v500;
  void *v501;
  _QWORD *v502;
  unint64_t *v503;
  unint64_t v504;
  unint64_t v505;
  double v506;
  double v507;
  uint64_t v508;
  unint64_t *v509;
  unint64_t v510;
  unint64_t v511;
  double v512;
  unint64_t *v513;
  unint64_t v514;
  unint64_t v515;
  double v516;
  void *v517;
  void *v518;
  unsigned int v519;
  unint64_t *v520;
  unint64_t v521;
  unint64_t v522;
  double v523;
  void *v524;
  unint64_t *v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t *v528;
  unint64_t v529;
  unint64_t v530;
  double v531;
  unint64_t *v532;
  unint64_t v533;
  unint64_t v534;
  double v535;
  double v536;
  uint64_t v537;
  unint64_t *v538;
  unint64_t v539;
  unint64_t v540;
  double v541;
  unint64_t *v542;
  unint64_t v543;
  unint64_t v544;
  double v545;
  void *v546;
  void *v547;
  unsigned int v548;
  unint64_t *v549;
  unint64_t v550;
  unint64_t v551;
  double v552;
  void *v553;
  unint64_t *v554;
  unint64_t v555;
  unint64_t v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t v559;
  double v560;
  unint64_t *v561;
  unint64_t v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unint64_t *v567;
  unint64_t v568;
  unint64_t v569;
  uint64_t v570;
  unint64_t *v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t v574;
  void *v575;
  void *v576;
  unsigned int v577;
  unint64_t *v578;
  unint64_t v579;
  unint64_t v580;
  uint64_t v581;
  void *v582;
  unint64_t *v583;
  unint64_t v584;
  unint64_t v585;
  unint64_t *v586;
  unint64_t v587;
  unint64_t v588;
  uint64_t v589;
  double v590;
  double v591;
  double v592;
  double v593;
  uint64_t v594;
  unsigned __int8 *v595;
  unsigned __int8 *v596;
  uint64_t v597;
  unsigned __int8 *v598;
  unsigned __int8 *v599;
  unint64_t v600;
  _QWORD *v601;
  void *__p[2];
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  std::string v611;
  std::string::size_type v612;
  void *v613;
  void *v614;
  __int128 v615;
  uint64_t v616;
  double v617;
  int v618;
  unsigned __int8 v619;
  double v620;
  int v621;
  unsigned __int8 v622;
  _QWORD v623[3];
  _QWORD *v624;
  __int128 v625;
  void **v626[2];
  uint64_t v627[3];

  v3 = a2;
  v627[0] = *MEMORY[0x24BDAC8D0];
  v604 = 0;
  v605 = 0;
  v606 = 0;
  std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::reserve(&v604, a2);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v605 - v604) >> 4);
  if (v6 < v3)
  {
    v7 = (_QWORD *)((char *)this + 160);
    v600 = v3;
    while (1)
    {
      if (*v7 == turi::gl_sframe_range::end((turi::object_detection::simple_data_iterator *)((char *)this + 144)))
      {
        v6 = 0xAAAAAAAAAAAAAAABLL * ((v605 - v604) >> 4);
        goto LABEL_232;
      }
      v8 = turi::gl_sframe_range::iterator::dereference((turi::object_detection::simple_data_iterator *)((char *)this + 160));
      v9 = v8;
      *(_QWORD *)((char *)&v615 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(_QWORD *)&v615 = turi::FLEX_UNDEFINED;
      v10 = byte_254FF5134;
      BYTE12(v615) = byte_254FF5134;
      if (byte_254FF5134 <= 9u && ((1 << byte_254FF5134) & 0x33C) != 0)
      {
        v12 = (unint64_t *)v615;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        v10 = byte_254FF5134;
      }
      *(void ***)((char *)v626 + 5) = *(void ***)((char *)&turi::FLEX_UNDEFINED + 5);
      v626[0] = (void **)turi::FLEX_UNDEFINED;
      BYTE4(v626[1]) = v10;
      v14 = v10 > 9;
      v15 = (1 << v10) & 0x33C;
      if (!v14 && v15 != 0)
      {
        v17 = (unint64_t *)v626[0];
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
      }
      v19 = *((_QWORD *)this + 4);
      if ((v19 & 0x8000000000000000) == 0)
      {
        v20 = **(_QWORD **)(**(_QWORD **)v8 + 16 * v19) + 16 * *(_QWORD *)(v8 + 8);
        if ((void ***)v20 != v626)
        {
          switch(BYTE4(v626[1]))
          {
            case 2:
              v21 = (unint64_t *)v626[0];
              do
              {
                v22 = __ldaxr(v21);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v21));
              if (!v23)
              {
                v24 = v626[0];
                if (!v626[0])
                  goto LABEL_61;
                if (*((char *)v626[0] + 31) < 0)
                  operator delete(v626[0][1]);
                v25 = v24;
                v26 = 0x1012C404EF22A49;
                goto LABEL_60;
              }
              break;
            case 3:
              v38 = (unint64_t *)v626[0];
              do
              {
                v39 = __ldaxr(v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, v38));
              if (!v40)
              {
                v41 = v626[0];
                if (!v626[0])
                  goto LABEL_61;
                v42 = v626[0][1];
                if (v42)
                {
                  v626[0][2] = v42;
                  operator delete(v42);
                }
                v25 = v41;
                v26 = 0x1080C409938AC02;
                goto LABEL_60;
              }
              break;
            case 4:
              v27 = (unint64_t *)v626[0];
              do
              {
                v28 = __ldaxr(v27);
                v29 = v28 - 1;
              }
              while (__stlxr(v29, v27));
              if (!v29)
              {
                v30 = v626[0];
                if (!v626[0])
                  goto LABEL_61;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v626[0] + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
                goto LABEL_53;
              }
              break;
            case 5:
              v43 = (unint64_t *)v626[0];
              do
              {
                v44 = __ldaxr(v43);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, v43));
              if (!v45)
              {
                v30 = v626[0];
                if (!v626[0])
                  goto LABEL_61;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v626[0] + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
LABEL_53:
                v25 = v30;
                v26 = 0x1020C405E66F15BLL;
                goto LABEL_60;
              }
              break;
            case 8:
              v46 = (unint64_t *)v626[0];
              do
              {
                v47 = __ldaxr(v46);
                v48 = v47 - 1;
              }
              while (__stlxr(v48, v46));
              if (!v48)
              {
                v49 = v626[0];
                if (!v626[0])
                  goto LABEL_61;
                boost::detail::shared_count::~shared_count((unsigned int **)v626[0] + 2);
                v25 = v49;
                v37 = -235920773;
                goto LABEL_59;
              }
              break;
            case 9:
              v31 = (unint64_t *)v626[0];
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                v34 = v626[0];
                if (v626[0])
                {
                  v35 = v626[0][6];
                  if (v35)
                  {
                    v626[0][7] = v35;
                    operator delete(v35);
                  }
                  v36 = v34[3];
                  if (v36)
                  {
                    v34[4] = v36;
                    operator delete(v36);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v34 + 1));
                  v25 = v34;
                  v37 = 2071181815;
LABEL_59:
                  v26 = v37 | 0x1030C4000000000;
LABEL_60:
                  MEMORY[0x219A19A08](v25, v26);
                }
LABEL_61:
                v626[0] = 0;
                v3 = v600;
              }
              break;
            default:
              break;
          }
          v50 = *(void ***)v20;
          *(void ***)((char *)v626 + 5) = *(void ***)(v20 + 5);
          v626[0] = v50;
          BYTE4(v626[1]) = *(_BYTE *)(v20 + 12);
          if (BYTE4(v626[1]) <= 9u && ((1 << SBYTE4(v626[1])) & 0x33C) != 0)
          {
            v52 = (unint64_t *)v626[0];
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 + 1, v52));
          }
        }
      }
      v54 = *((_QWORD *)this + 5);
      if ((v54 & 0x8000000000000000) == 0)
      {
        v55 = **(_QWORD **)(**(_QWORD **)v9 + 16 * v54) + 16 * *(_QWORD *)(v9 + 8);
        if ((__int128 *)v55 != &v615)
        {
          switch(BYTE12(v615))
          {
            case 2:
              v56 = (unint64_t *)v615;
              do
              {
                v57 = __ldaxr(v56);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, v56));
              if (!v58)
              {
                v59 = v615;
                if (!(_QWORD)v615)
                  goto LABEL_112;
                if (*(char *)(v615 + 31) < 0)
                  operator delete(*(void **)(v615 + 8));
                v60 = v59;
                v61 = 0x1012C404EF22A49;
                goto LABEL_111;
              }
              break;
            case 3:
              v73 = (unint64_t *)v615;
              do
              {
                v74 = __ldaxr(v73);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, v73));
              if (!v75)
              {
                v76 = v615;
                if (!(_QWORD)v615)
                  goto LABEL_112;
                v77 = *(void **)(v615 + 8);
                if (v77)
                {
                  *(_QWORD *)(v615 + 16) = v77;
                  operator delete(v77);
                }
                v60 = v76;
                v61 = 0x1080C409938AC02;
                goto LABEL_111;
              }
              break;
            case 4:
              v62 = (unint64_t *)v615;
              do
              {
                v63 = __ldaxr(v62);
                v64 = v63 - 1;
              }
              while (__stlxr(v64, v62));
              if (!v64)
              {
                v65 = v615;
                if (!(_QWORD)v615)
                  goto LABEL_112;
                v611.__r_.__value_.__r.__words[0] = v615 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
                goto LABEL_104;
              }
              break;
            case 5:
              v78 = (unint64_t *)v615;
              do
              {
                v79 = __ldaxr(v78);
                v80 = v79 - 1;
              }
              while (__stlxr(v80, v78));
              if (!v80)
              {
                v65 = v615;
                if (!(_QWORD)v615)
                  goto LABEL_112;
                v611.__r_.__value_.__r.__words[0] = v615 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
LABEL_104:
                v60 = v65;
                v61 = 0x1020C405E66F15BLL;
                goto LABEL_111;
              }
              break;
            case 8:
              v81 = (unint64_t *)v615;
              do
              {
                v82 = __ldaxr(v81);
                v83 = v82 - 1;
              }
              while (__stlxr(v83, v81));
              if (!v83)
              {
                v84 = v615;
                if (!(_QWORD)v615)
                  goto LABEL_112;
                boost::detail::shared_count::~shared_count((unsigned int **)(v615 + 16));
                v60 = v84;
                v72 = -235920773;
                goto LABEL_110;
              }
              break;
            case 9:
              v66 = (unint64_t *)v615;
              do
              {
                v67 = __ldaxr(v66);
                v68 = v67 - 1;
              }
              while (__stlxr(v68, v66));
              if (!v68)
              {
                v69 = v615;
                if ((_QWORD)v615)
                {
                  v70 = *(void **)(v615 + 48);
                  if (v70)
                  {
                    *(_QWORD *)(v615 + 56) = v70;
                    operator delete(v70);
                  }
                  v71 = *(void **)(v69 + 24);
                  if (v71)
                  {
                    *(_QWORD *)(v69 + 32) = v71;
                    operator delete(v71);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v69 + 8);
                  v60 = v69;
                  v72 = 2071181815;
LABEL_110:
                  v61 = v72 | 0x1030C4000000000;
LABEL_111:
                  MEMORY[0x219A19A08](v60, v61);
                }
LABEL_112:
                *(_QWORD *)&v615 = 0;
                v3 = v600;
              }
              break;
            default:
              break;
          }
          v85 = *(_QWORD *)v55;
          *(_QWORD *)((char *)&v615 + 5) = *(_QWORD *)(v55 + 5);
          *(_QWORD *)&v615 = v85;
          BYTE12(v615) = *(_BYTE *)(v55 + 12);
          if (BYTE12(v615) <= 9u && ((1 << SBYTE12(v615)) & 0x33C) != 0)
          {
            v87 = (unint64_t *)v615;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 + 1, v87));
          }
        }
      }
      std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::emplace_back<turi::flexible_type const&,turi::flexible_type&,turi::flexible_type&>(&v604, (uint64_t *)(**(_QWORD **)(**(_QWORD **)v9 + 16 * *((_QWORD *)this + 6)) + 16 * *(_QWORD *)(v9 + 8)), (uint64_t)v626, (uint64_t)&v615);
      turi::gl_sframe_range::iterator::increment((turi::object_detection::simple_data_iterator *)((char *)this + 160));
      if (*v7 == turi::gl_sframe_range::end((turi::object_detection::simple_data_iterator *)((char *)this + 144)))
      {
        if (*((_BYTE *)this + 68))
          break;
      }
LABEL_145:
      switch(BYTE4(v626[1]))
      {
        case 2:
          v100 = (unint64_t *)v626[0];
          do
          {
            v101 = __ldaxr(v100);
            v102 = v101 - 1;
          }
          while (__stlxr(v102, v100));
          if (!v102)
          {
            v103 = v626[0];
            if (v626[0])
            {
              if (*((char *)v626[0] + 31) < 0)
                operator delete(v626[0][1]);
              v104 = v103;
              v105 = 0x1012C404EF22A49;
              goto LABEL_186;
            }
          }
          break;
        case 3:
          v117 = (unint64_t *)v626[0];
          do
          {
            v118 = __ldaxr(v117);
            v119 = v118 - 1;
          }
          while (__stlxr(v119, v117));
          if (!v119)
          {
            v120 = v626[0];
            if (v626[0])
            {
              v121 = v626[0][1];
              if (v121)
              {
                v626[0][2] = v121;
                operator delete(v121);
              }
              v104 = v120;
              v105 = 0x1080C409938AC02;
              goto LABEL_186;
            }
          }
          break;
        case 4:
          v106 = (unint64_t *)v626[0];
          do
          {
            v107 = __ldaxr(v106);
            v108 = v107 - 1;
          }
          while (__stlxr(v108, v106));
          if (!v108)
          {
            v109 = v626[0];
            if (v626[0])
            {
              v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v626[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
              goto LABEL_179;
            }
          }
          break;
        case 5:
          v122 = (unint64_t *)v626[0];
          do
          {
            v123 = __ldaxr(v122);
            v124 = v123 - 1;
          }
          while (__stlxr(v124, v122));
          if (!v124)
          {
            v109 = v626[0];
            if (v626[0])
            {
              v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v626[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
LABEL_179:
              v104 = v109;
              v105 = 0x1020C405E66F15BLL;
              goto LABEL_186;
            }
          }
          break;
        case 8:
          v125 = (unint64_t *)v626[0];
          do
          {
            v126 = __ldaxr(v125);
            v127 = v126 - 1;
          }
          while (__stlxr(v127, v125));
          if (!v127)
          {
            v128 = v626[0];
            if (v626[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v626[0] + 2);
              v104 = v128;
              v116 = -235920773;
              goto LABEL_185;
            }
          }
          break;
        case 9:
          v110 = (unint64_t *)v626[0];
          do
          {
            v111 = __ldaxr(v110);
            v112 = v111 - 1;
          }
          while (__stlxr(v112, v110));
          if (!v112)
          {
            v113 = v626[0];
            if (v626[0])
            {
              v114 = v626[0][6];
              if (v114)
              {
                v626[0][7] = v114;
                operator delete(v114);
              }
              v115 = v113[3];
              if (v115)
              {
                v113[4] = v115;
                operator delete(v115);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v113 + 1));
              v104 = v113;
              v116 = 2071181815;
LABEL_185:
              v105 = v116 | 0x1030C4000000000;
LABEL_186:
              MEMORY[0x219A19A08](v104, v105);
            }
          }
          break;
        default:
          break;
      }
      switch(BYTE12(v615))
      {
        case 2:
          v129 = (unint64_t *)v615;
          do
          {
            v130 = __ldaxr(v129);
            v131 = v130 - 1;
          }
          while (__stlxr(v131, v129));
          if (!v131)
          {
            v132 = v615;
            if ((_QWORD)v615)
            {
              if (*(char *)(v615 + 31) < 0)
                operator delete(*(void **)(v615 + 8));
              v133 = v132;
              v134 = 0x1012C404EF22A49;
              goto LABEL_228;
            }
          }
          break;
        case 3:
          v146 = (unint64_t *)v615;
          do
          {
            v147 = __ldaxr(v146);
            v148 = v147 - 1;
          }
          while (__stlxr(v148, v146));
          if (!v148)
          {
            v149 = v615;
            if ((_QWORD)v615)
            {
              v150 = *(void **)(v615 + 8);
              if (v150)
              {
                *(_QWORD *)(v615 + 16) = v150;
                operator delete(v150);
              }
              v133 = v149;
              v134 = 0x1080C409938AC02;
              goto LABEL_228;
            }
          }
          break;
        case 4:
          v135 = (unint64_t *)v615;
          do
          {
            v136 = __ldaxr(v135);
            v137 = v136 - 1;
          }
          while (__stlxr(v137, v135));
          if (!v137)
          {
            v138 = v615;
            if ((_QWORD)v615)
            {
              v611.__r_.__value_.__r.__words[0] = v615 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
              goto LABEL_221;
            }
          }
          break;
        case 5:
          v151 = (unint64_t *)v615;
          do
          {
            v152 = __ldaxr(v151);
            v153 = v152 - 1;
          }
          while (__stlxr(v153, v151));
          if (!v153)
          {
            v138 = v615;
            if ((_QWORD)v615)
            {
              v611.__r_.__value_.__r.__words[0] = v615 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
LABEL_221:
              v133 = v138;
              v134 = 0x1020C405E66F15BLL;
              goto LABEL_228;
            }
          }
          break;
        case 8:
          v154 = (unint64_t *)v615;
          do
          {
            v155 = __ldaxr(v154);
            v156 = v155 - 1;
          }
          while (__stlxr(v156, v154));
          if (!v156)
          {
            v157 = v615;
            if ((_QWORD)v615)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v615 + 16));
              v133 = v157;
              v145 = -235920773;
              goto LABEL_227;
            }
          }
          break;
        case 9:
          v139 = (unint64_t *)v615;
          do
          {
            v140 = __ldaxr(v139);
            v141 = v140 - 1;
          }
          while (__stlxr(v141, v139));
          if (!v141)
          {
            v142 = v615;
            if ((_QWORD)v615)
            {
              v143 = *(void **)(v615 + 48);
              if (v143)
              {
                *(_QWORD *)(v615 + 56) = v143;
                operator delete(v143);
              }
              v144 = *(void **)(v142 + 24);
              if (v144)
              {
                *(_QWORD *)(v142 + 32) = v144;
                operator delete(v144);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v142 + 8);
              v133 = v142;
              v145 = 2071181815;
LABEL_227:
              v134 = v145 | 0x1030C4000000000;
LABEL_228:
              MEMORY[0x219A19A08](v133, v134);
            }
          }
          break;
        default:
          break;
      }
      v6 = 0xAAAAAAAAAAAAAAABLL * ((v605 - v604) >> 4);
      if (v6 >= v3)
        goto LABEL_232;
    }
    if (!*((_BYTE *)this + 69))
    {
LABEL_139:
      turi::gl_sframe::range_iterator((turi::object_detection::simple_data_iterator *)((char *)this + 8), 0, 0xFFFFFFFFFFFFFFFFLL, (uint64_t ****)&v611);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)this + 144, (__int128 *)&v611);
      size = (std::__shared_weak_count *)v611.__r_.__value_.__l.__size_;
      if (v611.__r_.__value_.__l.__size_)
      {
        v97 = (unint64_t *)(v611.__r_.__value_.__l.__size_ + 8);
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      *((_QWORD *)this + 20) = turi::gl_sarray_range::begin((turi::object_detection::simple_data_iterator *)((char *)this + 144));
      *((_QWORD *)this + 21) = v99;
      goto LABEL_145;
    }
    v89 = turi::gl_sframe::size((turi::object_detection::simple_data_iterator *)((char *)this + 8));
    turi::gl_sarray::from_sequence(0, v89, 0, (uint64_t)&v611);
    v625 = xmmword_2186D1680;
    v90 = std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v625, (uint64_t)this + 176, &v625);
    v623[0] = &off_24D945718;
    v623[1] = v90;
    v624 = v623;
    turi::gl_sarray::apply((uint64_t)&v611, (uint64_t)v623, 0, 0, (uint64_t)&v607);
    std::string::basic_string[abi:ne180100]<0>(__p, "_random_order");
    turi::gl_sframe::add_column((uint64_t)this + 8, (uint64_t)&v607, (uint64_t)__p);
    if (SHIBYTE(v603) < 0)
      operator delete(__p[0]);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v607);
    v91 = v624;
    if (v624 == v623)
    {
      v91 = v623;
      v92 = 4;
    }
    else
    {
      if (!v624)
        goto LABEL_129;
      v92 = 5;
    }
    (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_129:
    std::string::basic_string[abi:ne180100]<0>(__p, "_random_order");
    turi::gl_sframe::sort((uint64_t)this + 8, (uint64_t)__p, 1, &v607);
    turi::gl_sframe::operator=((uint64_t)this + 8, (uint64_t)&v607);
    *(_QWORD *)&v607 = off_24D91E9C0;
    v93 = (std::__shared_weak_count *)v608;
    if ((_QWORD)v608)
    {
      v94 = (unint64_t *)(v608 + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (SHIBYTE(v603) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(&v607, "_random_order");
    turi::gl_sframe::remove_column((uint64_t)this + 8, (unsigned __int8 **)&v607);
    if (SBYTE7(v608) < 0)
      operator delete((void *)v607);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v611);
    goto LABEL_139;
  }
LABEL_232:
  std::vector<turi::neural_net::labeled_image>::vector(a3, v6);
  v158 = v604;
  if (v605 != v604)
  {
    v159 = 0;
    v601 = (_QWORD *)((char *)this + 96);
    while (2)
    {
      *(_QWORD *)&v625 = 0;
      DWORD2(v625) = 0;
      BYTE12(v625) = 0;
      v620 = 0.0;
      v621 = 0;
      v622 = 0;
      v617 = 0.0;
      v618 = 0;
      v619 = 0;
      v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v625;
      v611.__r_.__value_.__l.__size_ = (std::string::size_type)&v620;
      v611.__r_.__value_.__r.__words[2] = (std::string::size_type)&v617;
      std::__memberwise_copy_assign[abi:ne180100]<std::tuple<turi::flexible_type &,turi::flexible_type &,turi::flexible_type &>,std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>,0ul,1ul,2ul>(&v611, (uint64_t *)(v158 + 48 * v159));
      if (BYTE12(v625) == 2)
      {
        if (*(char *)(v625 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v611, *(const std::string::value_type **)(v625 + 8), *(_QWORD *)(v625 + 16));
        }
        else
        {
          v161 = *(_OWORD *)(v625 + 8);
          v611.__r_.__value_.__r.__words[2] = *(_QWORD *)(v625 + 24);
          *(_OWORD *)&v611.__r_.__value_.__l.__data_ = v161;
        }
        turi::neural_net::Image::CreateFromPath((uint64_t)&v611, &v615);
        *(_QWORD *)&v607 = v615;
        v162 = (_QWORD *)operator new();
        v163 = v615;
        *v162 = &unk_24D9456B8;
        v162[1] = 0;
        v162[2] = 0;
        v162[3] = v163;
        *((_QWORD *)&v607 + 1) = v162;
        *(_QWORD *)&v615 = 0;
        if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v611.__r_.__value_.__l.__data_);
      }
      else
      {
        turi::wrap_image((turi *)(v625 + 8), v160, &v607);
      }
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*a3 + (v159 << 6), &v607);
      v164 = (std::__shared_weak_count *)*((_QWORD *)&v607 + 1);
      if (*((_QWORD *)&v607 + 1))
      {
        v165 = (unint64_t *)(*((_QWORD *)&v607 + 1) + 8);
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
      switch(byte_254FF5134)
      {
        case 0:
          switch(v622)
          {
            case 0u:
              if (*(_QWORD *)&v620 == turi::FLEX_UNDEFINED)
                goto LABEL_493;
              goto LABEL_321;
            case 1u:
              v220 = v620;
              v221 = turi::FLEX_UNDEFINED;
              goto LABEL_880;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_321;
            case 6u:
              if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)&v620 << 8) >> 8 && !v621)
                goto LABEL_493;
              goto LABEL_321;
            default:
              goto LABEL_949;
          }
        case 1:
          switch(v622)
          {
            case 0u:
              v220 = *(double *)&turi::FLEX_UNDEFINED;
              v221 = *(_QWORD *)&v620;
LABEL_880:
              v591 = (double)v221;
              goto LABEL_881;
            case 1u:
              v220 = v620;
              v591 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_881:
              if (v220 != v591)
                goto LABEL_321;
              goto LABEL_493;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_321;
            case 6u:
              v590 = vabdd_f64((double)v621 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v620 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
              goto LABEL_885;
            default:
              goto LABEL_949;
          }
        case 2:
          if (v622 - 3 < 7 || v622 < 2u)
            goto LABEL_321;
          if (v622 != 2)
            goto LABEL_949;
          if (*(char *)(*(_QWORD *)&v620 + 31) < 0)
            v210 = *(_QWORD *)(*(_QWORD *)&v620 + 16);
          else
            v210 = *(unsigned __int8 *)(*(_QWORD *)&v620 + 31);
          if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
            v594 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
          else
            v594 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
          if (v210 != v594)
            goto LABEL_321;
          v595 = (unsigned __int8 *)(*(_QWORD *)&v620 + 8);
          if ((*(_BYTE *)(*(_QWORD *)&v620 + 31) & 0x80) != 0)
            v595 = *(unsigned __int8 **)v595;
          v596 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
          if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
            v596 = *(unsigned __int8 **)v596;
          if ((*(_BYTE *)(*(_QWORD *)&v620 + 31) & 0x80) != 0)
          {
            if (memcmp(v595, v596, v210))
              goto LABEL_321;
          }
          else if (v210)
          {
            while (*v595 == *v596)
            {
              ++v595;
              ++v596;
              if (!--v210)
                goto LABEL_493;
            }
LABEL_321:
            switch(v622)
            {
              case 0u:
                BYTE4(v626[1]) = 0;
                LODWORD(v626[1]) = 0;
                v626[0] = *(void ***)&v620;
                v616 = 0;
                v615 = 0uLL;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v615;
                v611.__r_.__value_.__s.__data_[8] = 0;
                *(_QWORD *)&v615 = operator new(0x10uLL);
                *((_QWORD *)&v615 + 1) = v615;
                v616 = v615 + 16;
                *((_QWORD *)&v615 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v616, (uint64_t *)v626, v627, v615);
                switch(BYTE4(v626[1]))
                {
                  case 2:
                    v223 = (unint64_t *)v626[0];
                    do
                    {
                      v224 = __ldaxr(v223);
                      v225 = --v224 == 0;
                    }
                    while (__stlxr(v224, v223));
                    goto LABEL_396;
                  case 3:
                    v291 = (unint64_t *)v626[0];
                    do
                    {
                      v292 = __ldaxr(v291);
                      v293 = --v292 == 0;
                    }
                    while (__stlxr(v292, v291));
                    goto LABEL_469;
                  case 4:
                    v277 = (unint64_t *)v626[0];
                    do
                    {
                      v278 = __ldaxr(v277);
                      v279 = --v278 == 0;
                    }
                    while (__stlxr(v278, v277));
                    goto LABEL_453;
                  case 5:
                    v296 = (unint64_t *)v626[0];
                    do
                    {
                      v297 = __ldaxr(v296);
                      v298 = --v297 == 0;
                    }
                    while (__stlxr(v297, v296));
                    goto LABEL_477;
                  case 8:
                    v303 = (unint64_t *)v626[0];
                    do
                    {
                      v304 = __ldaxr(v303);
                      v305 = --v304 == 0;
                    }
                    while (__stlxr(v304, v303));
                    goto LABEL_484;
                  case 9:
                    v282 = (unint64_t *)v626[0];
                    do
                    {
                      v283 = __ldaxr(v282);
                      v284 = --v283 == 0;
                    }
                    while (__stlxr(v283, v282));
                    goto LABEL_459;
                  default:
                    goto LABEL_490;
                }
                goto LABEL_490;
              case 1u:
                LODWORD(v626[1]) = 0;
                BYTE4(v626[1]) = 1;
                v626[0] = *(void ***)&v620;
                v616 = 0;
                v615 = 0uLL;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v615;
                v611.__r_.__value_.__s.__data_[8] = 0;
                *(_QWORD *)&v615 = operator new(0x10uLL);
                *((_QWORD *)&v615 + 1) = v615;
                v616 = v615 + 16;
                *((_QWORD *)&v615 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v616, (uint64_t *)v626, v627, v615);
                switch(BYTE4(v626[1]))
                {
                  case 2:
                    v264 = (unint64_t *)v626[0];
                    do
                    {
                      v265 = __ldaxr(v264);
                      v225 = --v265 == 0;
                    }
                    while (__stlxr(v265, v264));
                    goto LABEL_396;
                  case 3:
                    v294 = (unint64_t *)v626[0];
                    do
                    {
                      v295 = __ldaxr(v294);
                      v293 = --v295 == 0;
                    }
                    while (__stlxr(v295, v294));
                    goto LABEL_469;
                  case 4:
                    v280 = (unint64_t *)v626[0];
                    do
                    {
                      v281 = __ldaxr(v280);
                      v279 = --v281 == 0;
                    }
                    while (__stlxr(v281, v280));
                    goto LABEL_453;
                  case 5:
                    v299 = (unint64_t *)v626[0];
                    do
                    {
                      v300 = __ldaxr(v299);
                      v298 = --v300 == 0;
                    }
                    while (__stlxr(v300, v299));
                    goto LABEL_477;
                  case 8:
                    v306 = (unint64_t *)v626[0];
                    do
                    {
                      v307 = __ldaxr(v306);
                      v305 = --v307 == 0;
                    }
                    while (__stlxr(v307, v306));
                    goto LABEL_484;
                  case 9:
                    v285 = (unint64_t *)v626[0];
                    do
                    {
                      v286 = __ldaxr(v285);
                      v284 = --v286 == 0;
                    }
                    while (__stlxr(v286, v285));
                    goto LABEL_459;
                  default:
                    goto LABEL_490;
                }
                goto LABEL_490;
              case 2u:
                memset(v626, 0, 13);
                turi::flexible_type::operator=<std::string>((uint64_t *)v626, (const std::string *)(*(_QWORD *)&v620 + 8));
                v615 = 0uLL;
                v616 = 0;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v615;
                v611.__r_.__value_.__s.__data_[8] = 0;
                *(_QWORD *)&v615 = operator new(0x10uLL);
                *((_QWORD *)&v615 + 1) = v615;
                v616 = v615 + 16;
                *((_QWORD *)&v615 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v616, (uint64_t *)v626, v627, v615);
                switch(BYTE4(v626[1]))
                {
                  case 2:
                    v229 = (unint64_t *)v626[0];
                    do
                    {
                      v230 = __ldaxr(v229);
                      v225 = --v230 == 0;
                    }
                    while (__stlxr(v230, v229));
                    goto LABEL_396;
                  case 3:
                    v321 = (unint64_t *)v626[0];
                    do
                    {
                      v322 = __ldaxr(v321);
                      v293 = --v322 == 0;
                    }
                    while (__stlxr(v322, v321));
                    goto LABEL_469;
                  case 4:
                    v312 = (unint64_t *)v626[0];
                    do
                    {
                      v313 = __ldaxr(v312);
                      v279 = --v313 == 0;
                    }
                    while (__stlxr(v313, v312));
                    goto LABEL_453;
                  case 5:
                    v325 = (unint64_t *)v626[0];
                    do
                    {
                      v326 = __ldaxr(v325);
                      v298 = --v326 == 0;
                    }
                    while (__stlxr(v326, v325));
                    goto LABEL_477;
                  case 8:
                    v327 = (unint64_t *)v626[0];
                    do
                    {
                      v328 = __ldaxr(v327);
                      v305 = --v328 == 0;
                    }
                    while (__stlxr(v328, v327));
                    goto LABEL_484;
                  case 9:
                    v315 = (unint64_t *)v626[0];
                    do
                    {
                      v316 = __ldaxr(v315);
                      v284 = --v316 == 0;
                    }
                    while (__stlxr(v316, v315));
                    goto LABEL_459;
                  default:
                    goto LABEL_490;
                }
                goto LABEL_490;
              case 3u:
                v231 = v620;
                std::vector<turi::flexible_type>::vector(&v615, (uint64_t)(*(_QWORD *)(*(_QWORD *)&v231 + 16) - *(_QWORD *)(*(_QWORD *)&v231 + 8)) >> 3);
                v232 = *(_QWORD *)(*(_QWORD *)&v231 + 8);
                if (*(_QWORD *)(*(_QWORD *)&v231 + 16) != v232)
                {
                  v233 = 0;
                  do
                  {
                    v234 = v615 + 16 * v233;
                    switch(*(_BYTE *)(v234 + 12))
                    {
                      case 2:
                        v235 = *(unint64_t **)v234;
                        do
                        {
                          v236 = __ldaxr(v235);
                          v237 = v236 - 1;
                        }
                        while (__stlxr(v237, v235));
                        if (!v237)
                        {
                          v238 = *(unint64_t **)v234;
                          if (!*(_QWORD *)v234)
                            goto LABEL_384;
                          if (*((char *)v238 + 31) < 0)
                            operator delete((void *)v238[1]);
                          v239 = v238;
                          v240 = 0x1012C404EF22A49;
                          goto LABEL_383;
                        }
                        break;
                      case 3:
                        v252 = *(unint64_t **)v234;
                        do
                        {
                          v253 = __ldaxr(v252);
                          v254 = v253 - 1;
                        }
                        while (__stlxr(v254, v252));
                        if (!v254)
                        {
                          v255 = *(unint64_t **)v234;
                          if (!*(_QWORD *)v234)
                            goto LABEL_384;
                          v256 = (void *)v255[1];
                          if (v256)
                          {
                            v255[2] = (unint64_t)v256;
                            operator delete(v256);
                          }
                          v239 = v255;
                          v240 = 0x1080C409938AC02;
                          goto LABEL_383;
                        }
                        break;
                      case 4:
                        v241 = *(unint64_t **)v234;
                        do
                        {
                          v242 = __ldaxr(v241);
                          v243 = v242 - 1;
                        }
                        while (__stlxr(v243, v241));
                        if (!v243)
                        {
                          v244 = *(unint64_t **)v234;
                          if (!*(_QWORD *)v234)
                            goto LABEL_384;
                          v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v244 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
                          goto LABEL_376;
                        }
                        break;
                      case 5:
                        v257 = *(unint64_t **)v234;
                        do
                        {
                          v258 = __ldaxr(v257);
                          v259 = v258 - 1;
                        }
                        while (__stlxr(v259, v257));
                        if (!v259)
                        {
                          v244 = *(unint64_t **)v234;
                          if (!*(_QWORD *)v234)
                            goto LABEL_384;
                          v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v244 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
LABEL_376:
                          v239 = v244;
                          v240 = 0x1020C405E66F15BLL;
                          goto LABEL_383;
                        }
                        break;
                      case 8:
                        v260 = *(unint64_t **)v234;
                        do
                        {
                          v261 = __ldaxr(v260);
                          v262 = v261 - 1;
                        }
                        while (__stlxr(v262, v260));
                        if (!v262)
                        {
                          v263 = *(unint64_t **)v234;
                          if (!*(_QWORD *)v234)
                            goto LABEL_384;
                          boost::detail::shared_count::~shared_count((unsigned int **)v263 + 2);
                          v239 = v263;
                          v251 = -235920773;
                          goto LABEL_382;
                        }
                        break;
                      case 9:
                        v245 = *(unint64_t **)v234;
                        do
                        {
                          v246 = __ldaxr(v245);
                          v247 = v246 - 1;
                        }
                        while (__stlxr(v247, v245));
                        if (!v247)
                        {
                          v248 = *(unint64_t **)v234;
                          if (*(_QWORD *)v234)
                          {
                            v249 = (void *)v248[6];
                            if (v249)
                            {
                              v248[7] = (unint64_t)v249;
                              operator delete(v249);
                            }
                            v250 = (void *)v248[3];
                            if (v250)
                            {
                              v248[4] = (unint64_t)v250;
                              operator delete(v250);
                            }
                            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v248 + 1));
                            v239 = v248;
                            v251 = 2071181815;
LABEL_382:
                            v240 = v251 | 0x1030C4000000000;
LABEL_383:
                            MEMORY[0x219A19A08](v239, v240);
                          }
LABEL_384:
                          *(_QWORD *)v234 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    *(_QWORD *)v234 = 0;
                    *(_DWORD *)(v234 + 8) = 0;
                    *(_BYTE *)(v234 + 12) = 1;
                    *(_QWORD *)v234 = *(_QWORD *)(v232 + 8 * v233++);
                    v232 = *(_QWORD *)(*(_QWORD *)&v231 + 8);
                  }
                  while (v233 < (*(_QWORD *)(*(_QWORD *)&v231 + 16) - v232) >> 3);
                }
                goto LABEL_490;
              case 4u:
                v616 = 0;
                v615 = 0uLL;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v615, *(uint64_t **)(*(_QWORD *)&v620 + 8), *(uint64_t **)(*(_QWORD *)&v620 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v620 + 16) - *(_QWORD *)(*(_QWORD *)&v620 + 8)) >> 4);
                goto LABEL_490;
              case 5u:
                memset(&v611, 0, sizeof(v611));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v611, *(uint64_t **)(*(_QWORD *)&v620 + 8), *(uint64_t **)(*(_QWORD *)&v620 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v620 + 16) - *(_QWORD *)(*(_QWORD *)&v620 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v615 = 0uLL;
                v616 = 0;
                v626[0] = (void **)&v611;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v626);
                goto LABEL_490;
              case 6u:
                LODWORD(v626[1]) = 0;
                BYTE4(v626[1]) = 1;
                *(double *)v626 = (double)v621 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v620 << 8) >> 8);
                v616 = 0;
                v615 = 0uLL;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v615;
                v611.__r_.__value_.__s.__data_[8] = 0;
                *(_QWORD *)&v615 = operator new(0x10uLL);
                *((_QWORD *)&v615 + 1) = v615;
                v616 = v615 + 16;
                *((_QWORD *)&v615 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v616, (uint64_t *)v626, v627, v615);
                switch(BYTE4(v626[1]))
                {
                  case 2:
                    v266 = (unint64_t *)v626[0];
                    do
                    {
                      v267 = __ldaxr(v266);
                      v225 = --v267 == 0;
                    }
                    while (__stlxr(v267, v266));
LABEL_396:
                    if (v225)
                    {
                      v268 = v626[0];
                      if (v626[0])
                      {
                        if (*((char *)v626[0] + 31) < 0)
                          operator delete(v626[0][1]);
                        v269 = v268;
                        v270 = 0x1012C404EF22A49;
                        goto LABEL_489;
                      }
                    }
                    break;
                  case 3:
                    v301 = (unint64_t *)v626[0];
                    do
                    {
                      v302 = __ldaxr(v301);
                      v293 = --v302 == 0;
                    }
                    while (__stlxr(v302, v301));
LABEL_469:
                    if (v293)
                    {
                      v323 = v626[0];
                      if (v626[0])
                      {
                        v324 = v626[0][1];
                        if (v324)
                        {
                          v626[0][2] = v324;
                          operator delete(v324);
                        }
                        v269 = v323;
                        v270 = 0x1080C409938AC02;
                        goto LABEL_489;
                      }
                    }
                    break;
                  case 4:
                    v287 = (unint64_t *)v626[0];
                    do
                    {
                      v288 = __ldaxr(v287);
                      v279 = --v288 == 0;
                    }
                    while (__stlxr(v288, v287));
LABEL_453:
                    if (v279)
                    {
                      v314 = v626[0];
                      if (v626[0])
                      {
                        v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v626[0] + 1);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
                        goto LABEL_481;
                      }
                    }
                    break;
                  case 5:
                    v308 = (unint64_t *)v626[0];
                    do
                    {
                      v309 = __ldaxr(v308);
                      v298 = --v309 == 0;
                    }
                    while (__stlxr(v309, v308));
LABEL_477:
                    if (v298)
                    {
                      v314 = v626[0];
                      if (v626[0])
                      {
                        v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v626[0] + 1);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
LABEL_481:
                        v269 = v314;
                        v270 = 0x1020C405E66F15BLL;
                        goto LABEL_489;
                      }
                    }
                    break;
                  case 8:
                    v310 = (unint64_t *)v626[0];
                    do
                    {
                      v311 = __ldaxr(v310);
                      v305 = --v311 == 0;
                    }
                    while (__stlxr(v311, v310));
LABEL_484:
                    if (v305)
                    {
                      v329 = v626[0];
                      if (v626[0])
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)v626[0] + 2);
                        v269 = v329;
                        v320 = -235920773;
                        goto LABEL_488;
                      }
                    }
                    break;
                  case 9:
                    v289 = (unint64_t *)v626[0];
                    do
                    {
                      v290 = __ldaxr(v289);
                      v284 = --v290 == 0;
                    }
                    while (__stlxr(v290, v289));
LABEL_459:
                    if (v284)
                    {
                      v317 = v626[0];
                      if (v626[0])
                      {
                        v318 = v626[0][6];
                        if (v318)
                        {
                          v626[0][7] = v318;
                          operator delete(v318);
                        }
                        v319 = v317[3];
                        if (v319)
                        {
                          v317[4] = v319;
                          operator delete(v319);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v317 + 1));
                        v269 = v317;
                        v320 = 2071181815;
LABEL_488:
                        v270 = v320 | 0x1030C4000000000;
LABEL_489:
                        MEMORY[0x219A19A08](v269, v270);
                      }
                    }
                    break;
                  default:
                    goto LABEL_490;
                }
                goto LABEL_490;
              case 7u:
                v615 = 0uLL;
                v616 = 0;
                goto LABEL_490;
              case 8u:
                v271 = v620;
                v272 = *(_QWORD *)(*(_QWORD *)&v620 + 16);
                *(_QWORD *)&v607 = *(_QWORD *)(*(_QWORD *)&v620 + 8);
                *((_QWORD *)&v607 + 1) = v272;
                if (v272)
                {
                  v273 = (unsigned int *)(v272 + 8);
                  do
                    v274 = __ldxr(v273);
                  while (__stxr(v274 + 1, v273));
                }
                v275 = *(_OWORD *)(*(_QWORD *)&v271 + 24);
                v276 = *(_OWORD *)(*(_QWORD *)&v271 + 56);
                v609 = *(_OWORD *)(*(_QWORD *)&v271 + 40);
                v610 = v276;
                v608 = v275;
                turi::flexible_type_fail(0);
                v615 = 0uLL;
                v616 = 0;
                boost::detail::shared_count::~shared_count((unsigned int **)&v607 + 1);
                goto LABEL_490;
              case 9u:
                turi::flexible_type_impl::ndarray<double>::ndarray(&v611, *(_QWORD *)&v620 + 8);
                turi::flexible_type_fail(0);
                v615 = 0uLL;
                v616 = 0;
                if (v613)
                {
                  v614 = v613;
                  operator delete(v613);
                }
                if (v611.__r_.__value_.__r.__words[2])
                {
                  v612 = v611.__r_.__value_.__r.__words[2];
                  operator delete((void *)v611.__r_.__value_.__r.__words[2]);
                }
                v226 = (std::__shared_weak_count *)v611.__r_.__value_.__l.__size_;
                if (v611.__r_.__value_.__l.__size_)
                {
                  v227 = (unint64_t *)(v611.__r_.__value_.__l.__size_ + 8);
                  do
                    v228 = __ldaxr(v227);
                  while (__stlxr(v228 - 1, v227));
                  if (!v228)
                  {
                    ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                    std::__shared_weak_count::__release_weak(v226);
                  }
                }
LABEL_490:
                v330 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + (v159 << 6)) + 24))(*(_QWORD *)(*a3 + (v159 << 6)));
                v331 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + (v159 << 6)) + 16))(*(_QWORD *)(*a3 + (v159 << 6)));
                v332 = (_QWORD *)(*a3 + (v159 << 6));
                v334 = v332 + 2;
                v333 = (void *)v332[2];
                if (v333)
                {
                  v332[3] = v333;
                  operator delete(v333);
                  *v334 = 0;
                  v332[3] = 0;
                  v332[4] = 0;
                }
                *(_OWORD *)v334 = *(_OWORD *)__p;
                v332[4] = v603;
                __p[0] = 0;
                __p[1] = 0;
                v603 = 0;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v615;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
                goto LABEL_493;
              default:
                goto LABEL_949;
            }
          }
          break;
        case 3:
          if (v622 > 9u)
            goto LABEL_949;
          if (v622 != 3)
            goto LABEL_321;
          v211 = *(double **)(*(_QWORD *)&v620 + 8);
          v212 = *(double **)(*(_QWORD *)&v620 + 16);
          v213 = v212 - v211;
          v214 = *(double **)(turi::FLEX_UNDEFINED + 8);
          if (v213 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v214) >> 3)
            goto LABEL_321;
          if (v212 == v211)
            break;
          if (v213 <= 1)
            v215 = 1;
          else
            v215 = v212 - v211;
          if (*v211 == *v214)
          {
            v216 = 1;
            do
            {
              v217 = v216;
              if (v215 == v216)
                break;
              v218 = v211[v216];
              v219 = v214[v216++];
            }
            while (v218 == v219);
            v167 = v217 >= v213;
LABEL_870:
            if ((v167 & 1) != 0)
              break;
          }
          goto LABEL_321;
        case 4:
          if (v622 > 9u)
            goto LABEL_949;
          if (v622 != 4)
            goto LABEL_321;
          v167 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v615, (uint64_t *)(*(_QWORD *)&v620 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
          goto LABEL_870;
        case 5:
          if (v622 > 9u)
            goto LABEL_949;
          if (v622 != 5)
            goto LABEL_321;
          v167 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v615, (uint64_t **)(*(_QWORD *)&v620 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
          goto LABEL_870;
        case 6:
          switch(v622)
          {
            case 0u:
              if (*(_QWORD *)&v620 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF5130)
                goto LABEL_493;
              goto LABEL_321;
            case 1u:
              v590 = vabdd_f64(v620, (double)dword_254FF5130 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_885:
              if (v590 < 0.0000005)
                goto LABEL_493;
              goto LABEL_321;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_321;
            case 6u:
              if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)&v620) & 0xFFFFFFFFFFFFFFLL) == 0 && v621 == dword_254FF5130)
                goto LABEL_493;
              goto LABEL_321;
            default:
              goto LABEL_949;
          }
        case 7:
          if (v622 < 7u || v622 - 8 < 2)
            goto LABEL_321;
          if (v622 != 7)
            goto LABEL_949;
          break;
        case 8:
          if (v622 < 8u || v622 == 9)
            goto LABEL_321;
          if (v622 != 8)
            goto LABEL_949;
          v167 = turi::image_type::operator==(*(_QWORD *)&v620 + 8, turi::FLEX_UNDEFINED + 8);
          goto LABEL_870;
        case 9:
          if (v622 < 9u)
            goto LABEL_321;
          if (v622 != 9)
          {
LABEL_949:
            turi::flexible_type_fail(0);
            __break(1u);
          }
          v168 = turi::FLEX_UNDEFINED;
          v169 = v620;
          if (turi::FLEX_UNDEFINED == *(_QWORD *)&v620)
            break;
          v170 = (_QWORD *)(*(_QWORD *)&v620 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v620 + 8, turi::FLEX_UNDEFINED + 8))
            goto LABEL_321;
          v172 = *(char **)(*(_QWORD *)&v169 + 24);
          v171 = *(char **)(*(_QWORD *)&v169 + 32);
          v173 = v171 - v172;
          if (v171 == v172)
            break;
          if (!*v170)
            break;
          v174 = 1;
          do
          {
            v175 = *(_QWORD *)v172;
            v172 += 8;
            v174 *= v175;
          }
          while (v172 != v171);
          if (!v174)
            break;
          *(_QWORD *)&v607 = 0;
          std::vector<unsigned long>::vector(&v611, v173 >> 3, &v607);
          v176 = *(_OWORD *)&v611.__r_.__value_.__l.__data_;
          v177 = **(_QWORD **)(v168 + 8);
          v178 = v611.__r_.__value_.__l.__size_ - v611.__r_.__value_.__r.__words[0];
          v179 = (uint64_t)(v611.__r_.__value_.__l.__size_ - v611.__r_.__value_.__r.__words[0]) >> 3;
          v180 = v179 - 1;
          if (v179 <= 1)
            v181 = 1;
          else
            v181 = (uint64_t)(v611.__r_.__value_.__l.__size_ - v611.__r_.__value_.__r.__words[0]) >> 3;
          while (2)
          {
            if (*((_QWORD *)&v176 + 1) == (_QWORD)v176)
            {
              v189 = 0;
              v190 = *(double *)(**(_QWORD **)(*(_QWORD *)&v169 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v169 + 72));
            }
            else
            {
              v182 = 0;
              v183 = *(uint64_t **)(*(_QWORD *)&v169 + 48);
              v184 = (uint64_t *)v176;
              v185 = v181;
              do
              {
                v187 = *v184++;
                v186 = v187;
                v188 = *v183++;
                v182 += v188 * v186;
                --v185;
              }
              while (v185);
              v189 = 0;
              v190 = *(double *)(**(_QWORD **)(*(_QWORD *)&v169 + 8)
                               + 8 * (*(_QWORD *)(*(_QWORD *)&v169 + 72) + v182));
              v191 = *(uint64_t **)(v168 + 48);
              v192 = (uint64_t *)v176;
              v193 = v181;
              do
              {
                v195 = *v192++;
                v194 = v195;
                v196 = *v191++;
                v189 += v196 * v194;
                --v193;
              }
              while (v193);
            }
            v197 = *(double *)(v177 + 8 * (*(_QWORD *)(v168 + 72) + v189));
            v198 = v190 == v197;
            if (v190 != v197)
              goto LABEL_939;
            v199 = v179;
            v200 = v179 - 1;
            if (v178 < 1)
              goto LABEL_280;
            v201 = *(_QWORD *)(*(_QWORD *)&v169 + 24);
            v202 = *(_QWORD *)(v176 + 8 * v180) + 1;
            *(_QWORD *)(v176 + 8 * v180) = v202;
            if (v202 < *(_QWORD *)(v201 + 8 * v180))
            {
              v199 = 1;
              v200 = v179 - 1;
LABEL_280:
              if ((v200 & 0x8000000000000000) != 0 || !v199)
                goto LABEL_939;
              continue;
            }
            break;
          }
          v203 = v201 - 16;
          v204 = v179;
          v205 = (unint64_t *)(v176 + (v178 & 0xFFFFFFFFFFFFFFF8) - 16);
          while (1)
          {
            v206 = v204 - 1;
            v205[1] = 0;
            if ((uint64_t)(v204 - 1) <= 0)
              break;
            v207 = *v205 + 1;
            *v205-- = v207;
            v208 = *(_QWORD *)(v203 + 8 * v204--);
            if (v207 < v208)
            {
              v200 = v206 - 1;
              v199 = 1;
              goto LABEL_280;
            }
          }
          v198 = 1;
LABEL_939:
          if ((_QWORD)v176)
          {
            v611.__r_.__value_.__l.__size_ = v176;
            operator delete((void *)v176);
          }
          if (v198)
            break;
          goto LABEL_321;
        default:
          goto LABEL_949;
      }
LABEL_493:
      switch(byte_254FF5134)
      {
        case 0:
          switch(v619)
          {
            case 0u:
              if (*(_QWORD *)&v617 == turi::FLEX_UNDEFINED)
                goto LABEL_740;
              goto LABEL_568;
            case 1u:
              v388 = v617;
              v389 = turi::FLEX_UNDEFINED;
              goto LABEL_899;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_568;
            case 6u:
              if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)&v617 << 8) >> 8 && !v618)
                goto LABEL_740;
              goto LABEL_568;
            default:
              goto LABEL_949;
          }
        case 1:
          switch(v619)
          {
            case 0u:
              v388 = *(double *)&turi::FLEX_UNDEFINED;
              v389 = *(_QWORD *)&v617;
LABEL_899:
              v593 = (double)v389;
              goto LABEL_900;
            case 1u:
              v388 = v617;
              v593 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_900:
              if (v388 != v593)
                goto LABEL_568;
              goto LABEL_740;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_568;
            case 6u:
              v592 = vabdd_f64((double)v618 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v617 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
              goto LABEL_904;
            default:
              goto LABEL_949;
          }
        case 2:
          if (v619 - 3 < 7 || v619 < 2u)
            goto LABEL_568;
          if (v619 != 2)
            goto LABEL_949;
          if (*(char *)(*(_QWORD *)&v617 + 31) < 0)
            v378 = *(_QWORD *)(*(_QWORD *)&v617 + 16);
          else
            v378 = *(unsigned __int8 *)(*(_QWORD *)&v617 + 31);
          if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
            v597 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
          else
            v597 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
          if (v378 != v597)
            goto LABEL_568;
          v598 = (unsigned __int8 *)(*(_QWORD *)&v617 + 8);
          if ((*(_BYTE *)(*(_QWORD *)&v617 + 31) & 0x80) != 0)
            v598 = *(unsigned __int8 **)v598;
          v599 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
          if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
            v599 = *(unsigned __int8 **)v599;
          if ((*(_BYTE *)(*(_QWORD *)&v617 + 31) & 0x80) != 0)
          {
            if (memcmp(v598, v599, v378))
              goto LABEL_568;
          }
          else if (v378)
          {
            while (*v598 == *v599)
            {
              ++v598;
              ++v599;
              if (!--v378)
                goto LABEL_740;
            }
LABEL_568:
            switch(v619)
            {
              case 0u:
                BYTE4(v626[1]) = 0;
                LODWORD(v626[1]) = 0;
                v626[0] = *(void ***)&v617;
                v616 = 0;
                v615 = 0uLL;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v615;
                v611.__r_.__value_.__s.__data_[8] = 0;
                *(_QWORD *)&v615 = operator new(0x10uLL);
                *((_QWORD *)&v615 + 1) = v615;
                v616 = v615 + 16;
                *((_QWORD *)&v615 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v616, (uint64_t *)v626, v627, v615);
                switch(BYTE4(v626[1]))
                {
                  case 2:
                    v391 = (unint64_t *)v626[0];
                    do
                    {
                      v392 = __ldaxr(v391);
                      v393 = --v392 == 0;
                    }
                    while (__stlxr(v392, v391));
                    goto LABEL_643;
                  case 3:
                    v459 = (unint64_t *)v626[0];
                    do
                    {
                      v460 = __ldaxr(v459);
                      v461 = --v460 == 0;
                    }
                    while (__stlxr(v460, v459));
                    goto LABEL_716;
                  case 4:
                    v445 = (unint64_t *)v626[0];
                    do
                    {
                      v446 = __ldaxr(v445);
                      v447 = --v446 == 0;
                    }
                    while (__stlxr(v446, v445));
                    goto LABEL_700;
                  case 5:
                    v464 = (unint64_t *)v626[0];
                    do
                    {
                      v465 = __ldaxr(v464);
                      v466 = --v465 == 0;
                    }
                    while (__stlxr(v465, v464));
                    goto LABEL_724;
                  case 8:
                    v471 = (unint64_t *)v626[0];
                    do
                    {
                      v472 = __ldaxr(v471);
                      v473 = --v472 == 0;
                    }
                    while (__stlxr(v472, v471));
                    goto LABEL_731;
                  case 9:
                    v450 = (unint64_t *)v626[0];
                    do
                    {
                      v451 = __ldaxr(v450);
                      v452 = --v451 == 0;
                    }
                    while (__stlxr(v451, v450));
                    goto LABEL_706;
                  default:
                    goto LABEL_737;
                }
                goto LABEL_737;
              case 1u:
                LODWORD(v626[1]) = 0;
                BYTE4(v626[1]) = 1;
                v626[0] = *(void ***)&v617;
                v616 = 0;
                v615 = 0uLL;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v615;
                v611.__r_.__value_.__s.__data_[8] = 0;
                *(_QWORD *)&v615 = operator new(0x10uLL);
                *((_QWORD *)&v615 + 1) = v615;
                v616 = v615 + 16;
                *((_QWORD *)&v615 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v616, (uint64_t *)v626, v627, v615);
                switch(BYTE4(v626[1]))
                {
                  case 2:
                    v432 = (unint64_t *)v626[0];
                    do
                    {
                      v433 = __ldaxr(v432);
                      v393 = --v433 == 0;
                    }
                    while (__stlxr(v433, v432));
                    goto LABEL_643;
                  case 3:
                    v462 = (unint64_t *)v626[0];
                    do
                    {
                      v463 = __ldaxr(v462);
                      v461 = --v463 == 0;
                    }
                    while (__stlxr(v463, v462));
                    goto LABEL_716;
                  case 4:
                    v448 = (unint64_t *)v626[0];
                    do
                    {
                      v449 = __ldaxr(v448);
                      v447 = --v449 == 0;
                    }
                    while (__stlxr(v449, v448));
                    goto LABEL_700;
                  case 5:
                    v467 = (unint64_t *)v626[0];
                    do
                    {
                      v468 = __ldaxr(v467);
                      v466 = --v468 == 0;
                    }
                    while (__stlxr(v468, v467));
                    goto LABEL_724;
                  case 8:
                    v474 = (unint64_t *)v626[0];
                    do
                    {
                      v475 = __ldaxr(v474);
                      v473 = --v475 == 0;
                    }
                    while (__stlxr(v475, v474));
                    goto LABEL_731;
                  case 9:
                    v453 = (unint64_t *)v626[0];
                    do
                    {
                      v454 = __ldaxr(v453);
                      v452 = --v454 == 0;
                    }
                    while (__stlxr(v454, v453));
                    goto LABEL_706;
                  default:
                    goto LABEL_737;
                }
                goto LABEL_737;
              case 2u:
                memset(v626, 0, 13);
                turi::flexible_type::operator=<std::string>((uint64_t *)v626, (const std::string *)(*(_QWORD *)&v617 + 8));
                v615 = 0uLL;
                v616 = 0;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v615;
                v611.__r_.__value_.__s.__data_[8] = 0;
                *(_QWORD *)&v615 = operator new(0x10uLL);
                *((_QWORD *)&v615 + 1) = v615;
                v616 = v615 + 16;
                *((_QWORD *)&v615 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v616, (uint64_t *)v626, v627, v615);
                switch(BYTE4(v626[1]))
                {
                  case 2:
                    v397 = (unint64_t *)v626[0];
                    do
                    {
                      v398 = __ldaxr(v397);
                      v393 = --v398 == 0;
                    }
                    while (__stlxr(v398, v397));
                    goto LABEL_643;
                  case 3:
                    v489 = (unint64_t *)v626[0];
                    do
                    {
                      v490 = __ldaxr(v489);
                      v461 = --v490 == 0;
                    }
                    while (__stlxr(v490, v489));
                    goto LABEL_716;
                  case 4:
                    v480 = (unint64_t *)v626[0];
                    do
                    {
                      v481 = __ldaxr(v480);
                      v447 = --v481 == 0;
                    }
                    while (__stlxr(v481, v480));
                    goto LABEL_700;
                  case 5:
                    v493 = (unint64_t *)v626[0];
                    do
                    {
                      v494 = __ldaxr(v493);
                      v466 = --v494 == 0;
                    }
                    while (__stlxr(v494, v493));
                    goto LABEL_724;
                  case 8:
                    v495 = (unint64_t *)v626[0];
                    do
                    {
                      v496 = __ldaxr(v495);
                      v473 = --v496 == 0;
                    }
                    while (__stlxr(v496, v495));
                    goto LABEL_731;
                  case 9:
                    v483 = (unint64_t *)v626[0];
                    do
                    {
                      v484 = __ldaxr(v483);
                      v452 = --v484 == 0;
                    }
                    while (__stlxr(v484, v483));
                    goto LABEL_706;
                  default:
                    goto LABEL_737;
                }
                goto LABEL_737;
              case 3u:
                v399 = v617;
                std::vector<turi::flexible_type>::vector(&v615, (uint64_t)(*(_QWORD *)(*(_QWORD *)&v399 + 16) - *(_QWORD *)(*(_QWORD *)&v399 + 8)) >> 3);
                v400 = *(_QWORD *)(*(_QWORD *)&v399 + 8);
                if (*(_QWORD *)(*(_QWORD *)&v399 + 16) != v400)
                {
                  v401 = 0;
                  do
                  {
                    v402 = v615 + 16 * v401;
                    switch(*(_BYTE *)(v402 + 12))
                    {
                      case 2:
                        v403 = *(unint64_t **)v402;
                        do
                        {
                          v404 = __ldaxr(v403);
                          v405 = v404 - 1;
                        }
                        while (__stlxr(v405, v403));
                        if (!v405)
                        {
                          v406 = *(unint64_t **)v402;
                          if (!*(_QWORD *)v402)
                            goto LABEL_631;
                          if (*((char *)v406 + 31) < 0)
                            operator delete((void *)v406[1]);
                          v407 = v406;
                          v408 = 0x1012C404EF22A49;
                          goto LABEL_630;
                        }
                        break;
                      case 3:
                        v420 = *(unint64_t **)v402;
                        do
                        {
                          v421 = __ldaxr(v420);
                          v422 = v421 - 1;
                        }
                        while (__stlxr(v422, v420));
                        if (!v422)
                        {
                          v423 = *(unint64_t **)v402;
                          if (!*(_QWORD *)v402)
                            goto LABEL_631;
                          v424 = (void *)v423[1];
                          if (v424)
                          {
                            v423[2] = (unint64_t)v424;
                            operator delete(v424);
                          }
                          v407 = v423;
                          v408 = 0x1080C409938AC02;
                          goto LABEL_630;
                        }
                        break;
                      case 4:
                        v409 = *(unint64_t **)v402;
                        do
                        {
                          v410 = __ldaxr(v409);
                          v411 = v410 - 1;
                        }
                        while (__stlxr(v411, v409));
                        if (!v411)
                        {
                          v412 = *(unint64_t **)v402;
                          if (!*(_QWORD *)v402)
                            goto LABEL_631;
                          v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v412 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
                          goto LABEL_623;
                        }
                        break;
                      case 5:
                        v425 = *(unint64_t **)v402;
                        do
                        {
                          v426 = __ldaxr(v425);
                          v427 = v426 - 1;
                        }
                        while (__stlxr(v427, v425));
                        if (!v427)
                        {
                          v412 = *(unint64_t **)v402;
                          if (!*(_QWORD *)v402)
                            goto LABEL_631;
                          v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v412 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
LABEL_623:
                          v407 = v412;
                          v408 = 0x1020C405E66F15BLL;
                          goto LABEL_630;
                        }
                        break;
                      case 8:
                        v428 = *(unint64_t **)v402;
                        do
                        {
                          v429 = __ldaxr(v428);
                          v430 = v429 - 1;
                        }
                        while (__stlxr(v430, v428));
                        if (!v430)
                        {
                          v431 = *(unint64_t **)v402;
                          if (!*(_QWORD *)v402)
                            goto LABEL_631;
                          boost::detail::shared_count::~shared_count((unsigned int **)v431 + 2);
                          v407 = v431;
                          v419 = -235920773;
                          goto LABEL_629;
                        }
                        break;
                      case 9:
                        v413 = *(unint64_t **)v402;
                        do
                        {
                          v414 = __ldaxr(v413);
                          v415 = v414 - 1;
                        }
                        while (__stlxr(v415, v413));
                        if (!v415)
                        {
                          v416 = *(unint64_t **)v402;
                          if (*(_QWORD *)v402)
                          {
                            v417 = (void *)v416[6];
                            if (v417)
                            {
                              v416[7] = (unint64_t)v417;
                              operator delete(v417);
                            }
                            v418 = (void *)v416[3];
                            if (v418)
                            {
                              v416[4] = (unint64_t)v418;
                              operator delete(v418);
                            }
                            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v416 + 1));
                            v407 = v416;
                            v419 = 2071181815;
LABEL_629:
                            v408 = v419 | 0x1030C4000000000;
LABEL_630:
                            MEMORY[0x219A19A08](v407, v408);
                          }
LABEL_631:
                          *(_QWORD *)v402 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    *(_QWORD *)v402 = 0;
                    *(_DWORD *)(v402 + 8) = 0;
                    *(_BYTE *)(v402 + 12) = 1;
                    *(_QWORD *)v402 = *(_QWORD *)(v400 + 8 * v401++);
                    v400 = *(_QWORD *)(*(_QWORD *)&v399 + 8);
                  }
                  while (v401 < (*(_QWORD *)(*(_QWORD *)&v399 + 16) - v400) >> 3);
                }
                goto LABEL_737;
              case 4u:
                v616 = 0;
                v615 = 0uLL;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v615, *(uint64_t **)(*(_QWORD *)&v617 + 8), *(uint64_t **)(*(_QWORD *)&v617 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v617 + 16) - *(_QWORD *)(*(_QWORD *)&v617 + 8)) >> 4);
                goto LABEL_737;
              case 5u:
                memset(&v611, 0, sizeof(v611));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v611, *(uint64_t **)(*(_QWORD *)&v617 + 8), *(uint64_t **)(*(_QWORD *)&v617 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v617 + 16) - *(_QWORD *)(*(_QWORD *)&v617 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v615 = 0uLL;
                v616 = 0;
                v626[0] = (void **)&v611;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v626);
                goto LABEL_737;
              case 6u:
                LODWORD(v626[1]) = 0;
                BYTE4(v626[1]) = 1;
                *(double *)v626 = (double)v618 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v617 << 8) >> 8);
                v616 = 0;
                v615 = 0uLL;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v615;
                v611.__r_.__value_.__s.__data_[8] = 0;
                *(_QWORD *)&v615 = operator new(0x10uLL);
                *((_QWORD *)&v615 + 1) = v615;
                v616 = v615 + 16;
                *((_QWORD *)&v615 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v616, (uint64_t *)v626, v627, v615);
                switch(BYTE4(v626[1]))
                {
                  case 2:
                    v434 = (unint64_t *)v626[0];
                    do
                    {
                      v435 = __ldaxr(v434);
                      v393 = --v435 == 0;
                    }
                    while (__stlxr(v435, v434));
LABEL_643:
                    if (v393)
                    {
                      v436 = v626[0];
                      if (v626[0])
                      {
                        if (*((char *)v626[0] + 31) < 0)
                          operator delete(v626[0][1]);
                        v437 = v436;
                        v438 = 0x1012C404EF22A49;
                        goto LABEL_736;
                      }
                    }
                    break;
                  case 3:
                    v469 = (unint64_t *)v626[0];
                    do
                    {
                      v470 = __ldaxr(v469);
                      v461 = --v470 == 0;
                    }
                    while (__stlxr(v470, v469));
LABEL_716:
                    if (v461)
                    {
                      v491 = v626[0];
                      if (v626[0])
                      {
                        v492 = v626[0][1];
                        if (v492)
                        {
                          v626[0][2] = v492;
                          operator delete(v492);
                        }
                        v437 = v491;
                        v438 = 0x1080C409938AC02;
                        goto LABEL_736;
                      }
                    }
                    break;
                  case 4:
                    v455 = (unint64_t *)v626[0];
                    do
                    {
                      v456 = __ldaxr(v455);
                      v447 = --v456 == 0;
                    }
                    while (__stlxr(v456, v455));
LABEL_700:
                    if (v447)
                    {
                      v482 = v626[0];
                      if (v626[0])
                      {
                        v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v626[0] + 1);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
                        goto LABEL_728;
                      }
                    }
                    break;
                  case 5:
                    v476 = (unint64_t *)v626[0];
                    do
                    {
                      v477 = __ldaxr(v476);
                      v466 = --v477 == 0;
                    }
                    while (__stlxr(v477, v476));
LABEL_724:
                    if (v466)
                    {
                      v482 = v626[0];
                      if (v626[0])
                      {
                        v611.__r_.__value_.__r.__words[0] = (std::string::size_type)(v626[0] + 1);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
LABEL_728:
                        v437 = v482;
                        v438 = 0x1020C405E66F15BLL;
                        goto LABEL_736;
                      }
                    }
                    break;
                  case 8:
                    v478 = (unint64_t *)v626[0];
                    do
                    {
                      v479 = __ldaxr(v478);
                      v473 = --v479 == 0;
                    }
                    while (__stlxr(v479, v478));
LABEL_731:
                    if (v473)
                    {
                      v497 = v626[0];
                      if (v626[0])
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)v626[0] + 2);
                        v437 = v497;
                        v488 = -235920773;
                        goto LABEL_735;
                      }
                    }
                    break;
                  case 9:
                    v457 = (unint64_t *)v626[0];
                    do
                    {
                      v458 = __ldaxr(v457);
                      v452 = --v458 == 0;
                    }
                    while (__stlxr(v458, v457));
LABEL_706:
                    if (v452)
                    {
                      v485 = v626[0];
                      if (v626[0])
                      {
                        v486 = v626[0][6];
                        if (v486)
                        {
                          v626[0][7] = v486;
                          operator delete(v486);
                        }
                        v487 = v485[3];
                        if (v487)
                        {
                          v485[4] = v487;
                          operator delete(v487);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v485 + 1));
                        v437 = v485;
                        v488 = 2071181815;
LABEL_735:
                        v438 = v488 | 0x1030C4000000000;
LABEL_736:
                        MEMORY[0x219A19A08](v437, v438);
                      }
                    }
                    break;
                  default:
                    goto LABEL_737;
                }
                goto LABEL_737;
              case 7u:
                v615 = 0uLL;
                v616 = 0;
                goto LABEL_737;
              case 8u:
                v439 = v617;
                v440 = *(_QWORD *)(*(_QWORD *)&v617 + 16);
                *(_QWORD *)&v607 = *(_QWORD *)(*(_QWORD *)&v617 + 8);
                *((_QWORD *)&v607 + 1) = v440;
                if (v440)
                {
                  v441 = (unsigned int *)(v440 + 8);
                  do
                    v442 = __ldxr(v441);
                  while (__stxr(v442 + 1, v441));
                }
                v443 = *(_OWORD *)(*(_QWORD *)&v439 + 24);
                v444 = *(_OWORD *)(*(_QWORD *)&v439 + 56);
                v609 = *(_OWORD *)(*(_QWORD *)&v439 + 40);
                v610 = v444;
                v608 = v443;
                turi::flexible_type_fail(0);
                v615 = 0uLL;
                v616 = 0;
                boost::detail::shared_count::~shared_count((unsigned int **)&v607 + 1);
                goto LABEL_737;
              case 9u:
                turi::flexible_type_impl::ndarray<double>::ndarray(&v611, *(_QWORD *)&v617 + 8);
                turi::flexible_type_fail(0);
                v615 = 0uLL;
                v616 = 0;
                if (v613)
                {
                  v614 = v613;
                  operator delete(v613);
                }
                if (v611.__r_.__value_.__r.__words[2])
                {
                  v612 = v611.__r_.__value_.__r.__words[2];
                  operator delete((void *)v611.__r_.__value_.__r.__words[2]);
                }
                v394 = (std::__shared_weak_count *)v611.__r_.__value_.__l.__size_;
                if (v611.__r_.__value_.__l.__size_)
                {
                  v395 = (unint64_t *)(v611.__r_.__value_.__l.__size_ + 8);
                  do
                    v396 = __ldaxr(v395);
                  while (__stlxr(v396 - 1, v395));
                  if (!v396)
                  {
                    ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
                    std::__shared_weak_count::__release_weak(v394);
                  }
                }
LABEL_737:
                v498 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + (v159 << 6)) + 24))(*(_QWORD *)(*a3 + (v159 << 6)));
                v499 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + (v159 << 6)) + 16))(*(_QWORD *)(*a3 + (v159 << 6)));
                v500 = (_QWORD *)(*a3 + (v159 << 6));
                v502 = v500 + 5;
                v501 = (void *)v500[5];
                if (v501)
                {
                  v500[6] = v501;
                  operator delete(v501);
                  *v502 = 0;
                  v500[6] = 0;
                  v500[7] = 0;
                }
                *(_OWORD *)v502 = *(_OWORD *)__p;
                v500[7] = v603;
                __p[0] = 0;
                __p[1] = 0;
                v603 = 0;
                v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v615;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
                break;
              default:
                goto LABEL_949;
            }
          }
LABEL_740:
          switch(v619)
          {
            case 2u:
              v503 = *(unint64_t **)&v617;
              do
              {
                v504 = __ldaxr(v503);
                v505 = v504 - 1;
              }
              while (__stlxr(v505, v503));
              if (!v505)
              {
                v506 = v617;
                if (v617 != 0.0)
                {
                  if (*(char *)(*(_QWORD *)&v617 + 31) < 0)
                    operator delete(*(void **)(*(_QWORD *)&v617 + 8));
                  v507 = v506;
                  v508 = 0x1012C404EF22A49;
                  goto LABEL_781;
                }
              }
              break;
            case 3u:
              v520 = *(unint64_t **)&v617;
              do
              {
                v521 = __ldaxr(v520);
                v522 = v521 - 1;
              }
              while (__stlxr(v522, v520));
              if (!v522)
              {
                v523 = v617;
                if (v617 != 0.0)
                {
                  v524 = *(void **)(*(_QWORD *)&v617 + 8);
                  if (v524)
                  {
                    *(_QWORD *)(*(_QWORD *)&v617 + 16) = v524;
                    operator delete(v524);
                  }
                  v507 = v523;
                  v508 = 0x1080C409938AC02;
                  goto LABEL_781;
                }
              }
              break;
            case 4u:
              v509 = *(unint64_t **)&v617;
              do
              {
                v510 = __ldaxr(v509);
                v511 = v510 - 1;
              }
              while (__stlxr(v511, v509));
              if (!v511)
              {
                v512 = v617;
                if (v617 != 0.0)
                {
                  v611.__r_.__value_.__r.__words[0] = *(_QWORD *)&v617 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
                  goto LABEL_774;
                }
              }
              break;
            case 5u:
              v525 = *(unint64_t **)&v617;
              do
              {
                v526 = __ldaxr(v525);
                v527 = v526 - 1;
              }
              while (__stlxr(v527, v525));
              if (!v527)
              {
                v512 = v617;
                if (v617 != 0.0)
                {
                  v611.__r_.__value_.__r.__words[0] = *(_QWORD *)&v617 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
LABEL_774:
                  v507 = v512;
                  v508 = 0x1020C405E66F15BLL;
                  goto LABEL_781;
                }
              }
              break;
            case 8u:
              v528 = *(unint64_t **)&v617;
              do
              {
                v529 = __ldaxr(v528);
                v530 = v529 - 1;
              }
              while (__stlxr(v530, v528));
              if (!v530)
              {
                v531 = v617;
                if (v617 != 0.0)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v617 + 16));
                  v507 = v531;
                  v519 = -235920773;
                  goto LABEL_780;
                }
              }
              break;
            case 9u:
              v513 = *(unint64_t **)&v617;
              do
              {
                v514 = __ldaxr(v513);
                v515 = v514 - 1;
              }
              while (__stlxr(v515, v513));
              if (!v515)
              {
                v516 = v617;
                if (v617 != 0.0)
                {
                  v517 = *(void **)(*(_QWORD *)&v617 + 48);
                  if (v517)
                  {
                    *(_QWORD *)(*(_QWORD *)&v617 + 56) = v517;
                    operator delete(v517);
                  }
                  v518 = *(void **)(*(_QWORD *)&v516 + 24);
                  if (v518)
                  {
                    *(_QWORD *)(*(_QWORD *)&v516 + 32) = v518;
                    operator delete(v518);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v516 + 8);
                  v507 = v516;
                  v519 = 2071181815;
LABEL_780:
                  v508 = v519 | 0x1030C4000000000;
LABEL_781:
                  MEMORY[0x219A19A08](*(_QWORD *)&v507, v508);
                }
              }
              break;
            default:
              break;
          }
          switch(v622)
          {
            case 2u:
              v532 = *(unint64_t **)&v620;
              do
              {
                v533 = __ldaxr(v532);
                v534 = v533 - 1;
              }
              while (__stlxr(v534, v532));
              if (!v534)
              {
                v535 = v620;
                if (v620 != 0.0)
                {
                  if (*(char *)(*(_QWORD *)&v620 + 31) < 0)
                    operator delete(*(void **)(*(_QWORD *)&v620 + 8));
                  v536 = v535;
                  v537 = 0x1012C404EF22A49;
                  goto LABEL_823;
                }
              }
              break;
            case 3u:
              v549 = *(unint64_t **)&v620;
              do
              {
                v550 = __ldaxr(v549);
                v551 = v550 - 1;
              }
              while (__stlxr(v551, v549));
              if (!v551)
              {
                v552 = v620;
                if (v620 != 0.0)
                {
                  v553 = *(void **)(*(_QWORD *)&v620 + 8);
                  if (v553)
                  {
                    *(_QWORD *)(*(_QWORD *)&v620 + 16) = v553;
                    operator delete(v553);
                  }
                  v536 = v552;
                  v537 = 0x1080C409938AC02;
                  goto LABEL_823;
                }
              }
              break;
            case 4u:
              v538 = *(unint64_t **)&v620;
              do
              {
                v539 = __ldaxr(v538);
                v540 = v539 - 1;
              }
              while (__stlxr(v540, v538));
              if (!v540)
              {
                v541 = v620;
                if (v620 != 0.0)
                {
                  v611.__r_.__value_.__r.__words[0] = *(_QWORD *)&v620 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
                  goto LABEL_816;
                }
              }
              break;
            case 5u:
              v554 = *(unint64_t **)&v620;
              do
              {
                v555 = __ldaxr(v554);
                v556 = v555 - 1;
              }
              while (__stlxr(v556, v554));
              if (!v556)
              {
                v541 = v620;
                if (v620 != 0.0)
                {
                  v611.__r_.__value_.__r.__words[0] = *(_QWORD *)&v620 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
LABEL_816:
                  v536 = v541;
                  v537 = 0x1020C405E66F15BLL;
                  goto LABEL_823;
                }
              }
              break;
            case 8u:
              v557 = *(unint64_t **)&v620;
              do
              {
                v558 = __ldaxr(v557);
                v559 = v558 - 1;
              }
              while (__stlxr(v559, v557));
              if (!v559)
              {
                v560 = v620;
                if (v620 != 0.0)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v620 + 16));
                  v536 = v560;
                  v548 = -235920773;
                  goto LABEL_822;
                }
              }
              break;
            case 9u:
              v542 = *(unint64_t **)&v620;
              do
              {
                v543 = __ldaxr(v542);
                v544 = v543 - 1;
              }
              while (__stlxr(v544, v542));
              if (!v544)
              {
                v545 = v620;
                if (v620 != 0.0)
                {
                  v546 = *(void **)(*(_QWORD *)&v620 + 48);
                  if (v546)
                  {
                    *(_QWORD *)(*(_QWORD *)&v620 + 56) = v546;
                    operator delete(v546);
                  }
                  v547 = *(void **)(*(_QWORD *)&v545 + 24);
                  if (v547)
                  {
                    *(_QWORD *)(*(_QWORD *)&v545 + 32) = v547;
                    operator delete(v547);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v545 + 8);
                  v536 = v545;
                  v548 = 2071181815;
LABEL_822:
                  v537 = v548 | 0x1030C4000000000;
LABEL_823:
                  MEMORY[0x219A19A08](*(_QWORD *)&v536, v537);
                }
              }
              break;
            default:
              break;
          }
          switch(BYTE12(v625))
          {
            case 2:
              v561 = (unint64_t *)v625;
              do
              {
                v562 = __ldaxr(v561);
                v563 = v562 - 1;
              }
              while (__stlxr(v563, v561));
              if (!v563)
              {
                v564 = v625;
                if ((_QWORD)v625)
                {
                  if (*(char *)(v625 + 31) < 0)
                    operator delete(*(void **)(v625 + 8));
                  v565 = v564;
                  v566 = 0x1012C404EF22A49;
                  goto LABEL_865;
                }
              }
              break;
            case 3:
              v578 = (unint64_t *)v625;
              do
              {
                v579 = __ldaxr(v578);
                v580 = v579 - 1;
              }
              while (__stlxr(v580, v578));
              if (!v580)
              {
                v581 = v625;
                if ((_QWORD)v625)
                {
                  v582 = *(void **)(v625 + 8);
                  if (v582)
                  {
                    *(_QWORD *)(v625 + 16) = v582;
                    operator delete(v582);
                  }
                  v565 = v581;
                  v566 = 0x1080C409938AC02;
                  goto LABEL_865;
                }
              }
              break;
            case 4:
              v567 = (unint64_t *)v625;
              do
              {
                v568 = __ldaxr(v567);
                v569 = v568 - 1;
              }
              while (__stlxr(v569, v567));
              if (!v569)
              {
                v570 = v625;
                if ((_QWORD)v625)
                {
                  v611.__r_.__value_.__r.__words[0] = v625 + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
                  goto LABEL_858;
                }
              }
              break;
            case 5:
              v583 = (unint64_t *)v625;
              do
              {
                v584 = __ldaxr(v583);
                v585 = v584 - 1;
              }
              while (__stlxr(v585, v583));
              if (!v585)
              {
                v570 = v625;
                if ((_QWORD)v625)
                {
                  v611.__r_.__value_.__r.__words[0] = v625 + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
LABEL_858:
                  v565 = v570;
                  v566 = 0x1020C405E66F15BLL;
                  goto LABEL_865;
                }
              }
              break;
            case 8:
              v586 = (unint64_t *)v625;
              do
              {
                v587 = __ldaxr(v586);
                v588 = v587 - 1;
              }
              while (__stlxr(v588, v586));
              if (!v588)
              {
                v589 = v625;
                if ((_QWORD)v625)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v625 + 16));
                  v565 = v589;
                  v577 = -235920773;
                  goto LABEL_864;
                }
              }
              break;
            case 9:
              v571 = (unint64_t *)v625;
              do
              {
                v572 = __ldaxr(v571);
                v573 = v572 - 1;
              }
              while (__stlxr(v573, v571));
              if (!v573)
              {
                v574 = v625;
                if ((_QWORD)v625)
                {
                  v575 = *(void **)(v625 + 48);
                  if (v575)
                  {
                    *(_QWORD *)(v625 + 56) = v575;
                    operator delete(v575);
                  }
                  v576 = *(void **)(v574 + 24);
                  if (v576)
                  {
                    *(_QWORD *)(v574 + 32) = v576;
                    operator delete(v576);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v574 + 8);
                  v565 = v574;
                  v577 = 2071181815;
LABEL_864:
                  v566 = v577 | 0x1030C4000000000;
LABEL_865:
                  MEMORY[0x219A19A08](v565, v566);
                }
              }
              break;
            default:
              break;
          }
          ++v159;
          v158 = v604;
          if (v159 >= 0xAAAAAAAAAAAAAAABLL * ((v605 - v604) >> 4))
            break;
          continue;
        case 3:
          if (v619 > 9u)
            goto LABEL_949;
          if (v619 != 3)
            goto LABEL_568;
          v379 = *(double **)(*(_QWORD *)&v617 + 8);
          v380 = *(double **)(*(_QWORD *)&v617 + 16);
          v381 = v380 - v379;
          v382 = *(double **)(turi::FLEX_UNDEFINED + 8);
          if (v381 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v382) >> 3)
            goto LABEL_568;
          if (v380 == v379)
            goto LABEL_740;
          if (v381 <= 1)
            v383 = 1;
          else
            v383 = v380 - v379;
          if (*v379 == *v382)
          {
            v384 = 1;
            do
            {
              v385 = v384;
              if (v383 == v384)
                break;
              v386 = v379[v384];
              v387 = v382[v384++];
            }
            while (v386 == v387);
            v335 = v385 >= v381;
LABEL_889:
            if ((v335 & 1) != 0)
              goto LABEL_740;
          }
          goto LABEL_568;
        case 4:
          if (v619 > 9u)
            goto LABEL_949;
          if (v619 != 4)
            goto LABEL_568;
          v335 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v615, (uint64_t *)(*(_QWORD *)&v617 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
          goto LABEL_889;
        case 5:
          if (v619 > 9u)
            goto LABEL_949;
          if (v619 != 5)
            goto LABEL_568;
          v335 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v615, (uint64_t **)(*(_QWORD *)&v617 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
          goto LABEL_889;
        case 6:
          switch(v619)
          {
            case 0u:
              if (*(_QWORD *)&v617 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF5130)
                goto LABEL_740;
              goto LABEL_568;
            case 1u:
              v592 = vabdd_f64(v617, (double)dword_254FF5130 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_904:
              if (v592 < 0.0000005)
                goto LABEL_740;
              goto LABEL_568;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_568;
            case 6u:
              if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)&v617) & 0xFFFFFFFFFFFFFFLL) == 0 && v618 == dword_254FF5130)
                goto LABEL_740;
              goto LABEL_568;
            default:
              goto LABEL_949;
          }
        case 7:
          if (v619 < 7u || v619 - 8 < 2)
            goto LABEL_568;
          if (v619 != 7)
            goto LABEL_949;
          goto LABEL_740;
        case 8:
          if (v619 < 8u || v619 == 9)
            goto LABEL_568;
          if (v619 != 8)
            goto LABEL_949;
          v335 = turi::image_type::operator==(*(_QWORD *)&v617 + 8, turi::FLEX_UNDEFINED + 8);
          goto LABEL_889;
        case 9:
          if (v619 < 9u)
            goto LABEL_568;
          if (v619 != 9)
            goto LABEL_949;
          v336 = turi::FLEX_UNDEFINED;
          v337 = v617;
          if (turi::FLEX_UNDEFINED == *(_QWORD *)&v617)
            goto LABEL_740;
          v338 = (_QWORD *)(*(_QWORD *)&v617 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v617 + 8, turi::FLEX_UNDEFINED + 8))
            goto LABEL_568;
          v340 = *(char **)(*(_QWORD *)&v337 + 24);
          v339 = *(char **)(*(_QWORD *)&v337 + 32);
          v341 = v339 - v340;
          if (v339 == v340)
            goto LABEL_740;
          if (!*v338)
            goto LABEL_740;
          v342 = 1;
          do
          {
            v343 = *(_QWORD *)v340;
            v340 += 8;
            v342 *= v343;
          }
          while (v340 != v339);
          if (!v342)
            goto LABEL_740;
          *(_QWORD *)&v607 = 0;
          std::vector<unsigned long>::vector(&v611, v341 >> 3, &v607);
          v344 = *(_OWORD *)&v611.__r_.__value_.__l.__data_;
          v345 = **(_QWORD **)(v336 + 8);
          v346 = v611.__r_.__value_.__l.__size_ - v611.__r_.__value_.__r.__words[0];
          v347 = (uint64_t)(v611.__r_.__value_.__l.__size_ - v611.__r_.__value_.__r.__words[0]) >> 3;
          v348 = v347 - 1;
          if (v347 <= 1)
            v349 = 1;
          else
            v349 = (uint64_t)(v611.__r_.__value_.__l.__size_ - v611.__r_.__value_.__r.__words[0]) >> 3;
          while (2)
          {
            if (*((_QWORD *)&v344 + 1) == (_QWORD)v344)
            {
              v357 = 0;
              v358 = *(double *)(**(_QWORD **)(*(_QWORD *)&v337 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v337 + 72));
            }
            else
            {
              v350 = 0;
              v351 = *(uint64_t **)(*(_QWORD *)&v337 + 48);
              v352 = (uint64_t *)v344;
              v353 = v349;
              do
              {
                v355 = *v352++;
                v354 = v355;
                v356 = *v351++;
                v350 += v356 * v354;
                --v353;
              }
              while (v353);
              v357 = 0;
              v358 = *(double *)(**(_QWORD **)(*(_QWORD *)&v337 + 8)
                               + 8 * (*(_QWORD *)(*(_QWORD *)&v337 + 72) + v350));
              v359 = *(uint64_t **)(v336 + 48);
              v360 = (uint64_t *)v344;
              v361 = v349;
              do
              {
                v363 = *v360++;
                v362 = v363;
                v364 = *v359++;
                v357 += v364 * v362;
                --v361;
              }
              while (v361);
            }
            v365 = *(double *)(v345 + 8 * (*(_QWORD *)(v336 + 72) + v357));
            v366 = v358 == v365;
            if (v358 != v365)
              goto LABEL_944;
            v367 = v347;
            v368 = v347 - 1;
            if (v346 < 1)
              goto LABEL_527;
            v369 = *(_QWORD *)(*(_QWORD *)&v337 + 24);
            v370 = *(_QWORD *)(v344 + 8 * v348) + 1;
            *(_QWORD *)(v344 + 8 * v348) = v370;
            if (v370 < *(_QWORD *)(v369 + 8 * v348))
            {
              v367 = 1;
              v368 = v347 - 1;
LABEL_527:
              if ((v368 & 0x8000000000000000) != 0 || !v367)
                goto LABEL_944;
              continue;
            }
            break;
          }
          v371 = v369 - 16;
          v372 = v347;
          v373 = (unint64_t *)(v344 + (v346 & 0xFFFFFFFFFFFFFFF8) - 16);
          while (1)
          {
            v374 = v372 - 1;
            v373[1] = 0;
            if ((uint64_t)(v372 - 1) <= 0)
              break;
            v375 = *v373 + 1;
            *v373-- = v375;
            v376 = *(_QWORD *)(v371 + 8 * v372--);
            if (v375 < v376)
            {
              v368 = v374 - 1;
              v367 = 1;
              goto LABEL_527;
            }
          }
          v366 = 1;
LABEL_944:
          if ((_QWORD)v344)
          {
            v611.__r_.__value_.__l.__size_ = v344;
            operator delete((void *)v344);
          }
          if (v366)
            goto LABEL_740;
          goto LABEL_568;
        default:
          goto LABEL_949;
      }
      break;
    }
  }
  v611.__r_.__value_.__r.__words[0] = (std::string::size_type)&v604;
  std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v611);
}

void sub_2184CC970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,char a51)
{
  uint64_t v51;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  unsigned int v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  unsigned int v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  void *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  unsigned int v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  void *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;

  switch(*(_BYTE *)(v51 - 212))
  {
    case 2:
      v53 = *(unint64_t **)(v51 - 224);
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (v55)
        goto LABEL_39;
      v56 = *(_QWORD *)(v51 - 224);
      if (!v56)
        goto LABEL_39;
      if (*(char *)(v56 + 31) < 0)
        operator delete(*(void **)(v56 + 8));
      v57 = (_QWORD *)v56;
      v58 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v68 = *(unint64_t **)(v51 - 224);
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (v70)
        goto LABEL_39;
      v71 = *(_QWORD **)(v51 - 224);
      if (!v71)
        goto LABEL_39;
      v72 = (void *)v71[1];
      if (v72)
      {
        v71[2] = v72;
        operator delete(v72);
      }
      v57 = v71;
      v58 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v59 = *(unint64_t **)(v51 - 224);
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (v61)
        goto LABEL_39;
      v62 = *(_QWORD *)(v51 - 224);
      if (!v62)
        goto LABEL_39;
      a17 = (char *)(v62 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
      goto LABEL_31;
    case 5:
      v73 = *(unint64_t **)(v51 - 224);
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (v75)
        goto LABEL_39;
      v62 = *(_QWORD *)(v51 - 224);
      if (!v62)
        goto LABEL_39;
      a17 = (char *)(v62 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
LABEL_31:
      v57 = (_QWORD *)v62;
      v58 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v76 = *(unint64_t **)(v51 - 224);
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (v78)
        goto LABEL_39;
      v79 = *(_QWORD *)(v51 - 224);
      if (!v79)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v79 + 16));
      v57 = (_QWORD *)v79;
      v67 = -235920773;
      goto LABEL_37;
    case 9:
      v63 = *(unint64_t **)(v51 - 224);
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (v65)
        goto LABEL_39;
      v66 = *(_QWORD **)(v51 - 224);
      if (!v66)
        goto LABEL_39;
      v57 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v66);
      v67 = 2071181815;
LABEL_37:
      v58 = v67 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v57, v58);
LABEL_39:
      switch(*(_BYTE *)(v51 - 196))
      {
        case 2:
          v80 = *(unint64_t **)(v51 - 208);
          do
          {
            v81 = __ldaxr(v80);
            v82 = v81 - 1;
          }
          while (__stlxr(v82, v80));
          if (v82)
            goto LABEL_77;
          v83 = *(_QWORD *)(v51 - 208);
          if (!v83)
            goto LABEL_77;
          if (*(char *)(v83 + 31) < 0)
            operator delete(*(void **)(v83 + 8));
          v84 = (_QWORD *)v83;
          v85 = 0x1012C404EF22A49;
          goto LABEL_76;
        case 3:
          v95 = *(unint64_t **)(v51 - 208);
          do
          {
            v96 = __ldaxr(v95);
            v97 = v96 - 1;
          }
          while (__stlxr(v97, v95));
          if (v97)
            goto LABEL_77;
          v98 = *(_QWORD **)(v51 - 208);
          if (!v98)
            goto LABEL_77;
          v99 = (void *)v98[1];
          if (v99)
          {
            v98[2] = v99;
            operator delete(v99);
          }
          v84 = v98;
          v85 = 0x1080C409938AC02;
          goto LABEL_76;
        case 4:
          v86 = *(unint64_t **)(v51 - 208);
          do
          {
            v87 = __ldaxr(v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v86));
          if (v88)
            goto LABEL_77;
          v89 = *(_QWORD *)(v51 - 208);
          if (!v89)
            goto LABEL_77;
          a17 = (char *)(v89 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
          goto LABEL_69;
        case 5:
          v100 = *(unint64_t **)(v51 - 208);
          do
          {
            v101 = __ldaxr(v100);
            v102 = v101 - 1;
          }
          while (__stlxr(v102, v100));
          if (v102)
            goto LABEL_77;
          v89 = *(_QWORD *)(v51 - 208);
          if (!v89)
            goto LABEL_77;
          a17 = (char *)(v89 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
LABEL_69:
          v84 = (_QWORD *)v89;
          v85 = 0x1020C405E66F15BLL;
          goto LABEL_76;
        case 8:
          v103 = *(unint64_t **)(v51 - 208);
          do
          {
            v104 = __ldaxr(v103);
            v105 = v104 - 1;
          }
          while (__stlxr(v105, v103));
          if (v105)
            goto LABEL_77;
          v106 = *(_QWORD *)(v51 - 208);
          if (!v106)
            goto LABEL_77;
          boost::detail::shared_count::~shared_count((unsigned int **)(v106 + 16));
          v84 = (_QWORD *)v106;
          v94 = -235920773;
          goto LABEL_75;
        case 9:
          v90 = *(unint64_t **)(v51 - 208);
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (v92)
            goto LABEL_77;
          v93 = *(_QWORD **)(v51 - 208);
          if (!v93)
            goto LABEL_77;
          v84 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v93);
          v94 = 2071181815;
LABEL_75:
          v85 = v94 | 0x1030C4000000000;
LABEL_76:
          MEMORY[0x219A19A08](v84, v85);
LABEL_77:
          switch(*(_BYTE *)(v51 - 148))
          {
            case 2:
              v107 = *(unint64_t **)(v51 - 160);
              do
              {
                v108 = __ldaxr(v107);
                v109 = v108 - 1;
              }
              while (__stlxr(v109, v107));
              if (v109)
                goto LABEL_115;
              v110 = *(_QWORD *)(v51 - 160);
              if (!v110)
                goto LABEL_115;
              if (*(char *)(v110 + 31) < 0)
                operator delete(*(void **)(v110 + 8));
              v111 = (_QWORD *)v110;
              v112 = 0x1012C404EF22A49;
              goto LABEL_114;
            case 3:
              v122 = *(unint64_t **)(v51 - 160);
              do
              {
                v123 = __ldaxr(v122);
                v124 = v123 - 1;
              }
              while (__stlxr(v124, v122));
              if (v124)
                goto LABEL_115;
              v125 = *(_QWORD **)(v51 - 160);
              if (!v125)
                goto LABEL_115;
              v126 = (void *)v125[1];
              if (v126)
              {
                v125[2] = v126;
                operator delete(v126);
              }
              v111 = v125;
              v112 = 0x1080C409938AC02;
              goto LABEL_114;
            case 4:
              v113 = *(unint64_t **)(v51 - 160);
              do
              {
                v114 = __ldaxr(v113);
                v115 = v114 - 1;
              }
              while (__stlxr(v115, v113));
              if (v115)
                goto LABEL_115;
              v116 = *(_QWORD *)(v51 - 160);
              if (!v116)
                goto LABEL_115;
              a17 = (char *)(v116 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
              goto LABEL_107;
            case 5:
              v127 = *(unint64_t **)(v51 - 160);
              do
              {
                v128 = __ldaxr(v127);
                v129 = v128 - 1;
              }
              while (__stlxr(v129, v127));
              if (v129)
                goto LABEL_115;
              v116 = *(_QWORD *)(v51 - 160);
              if (!v116)
                goto LABEL_115;
              a17 = (char *)(v116 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
LABEL_107:
              v111 = (_QWORD *)v116;
              v112 = 0x1020C405E66F15BLL;
              goto LABEL_114;
            case 8:
              v130 = *(unint64_t **)(v51 - 160);
              do
              {
                v131 = __ldaxr(v130);
                v132 = v131 - 1;
              }
              while (__stlxr(v132, v130));
              if (v132)
                goto LABEL_115;
              v133 = *(_QWORD *)(v51 - 160);
              if (!v133)
                goto LABEL_115;
              boost::detail::shared_count::~shared_count((unsigned int **)(v133 + 16));
              v111 = (_QWORD *)v133;
              v121 = -235920773;
              goto LABEL_113;
            case 9:
              v117 = *(unint64_t **)(v51 - 160);
              do
              {
                v118 = __ldaxr(v117);
                v119 = v118 - 1;
              }
              while (__stlxr(v119, v117));
              if (v119)
                goto LABEL_115;
              v120 = *(_QWORD **)(v51 - 160);
              if (!v120)
                goto LABEL_115;
              v111 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v120);
              v121 = 2071181815;
LABEL_113:
              v112 = v121 | 0x1030C4000000000;
LABEL_114:
              MEMORY[0x219A19A08](v111, v112);
LABEL_115:
              std::vector<turi::neural_net::labeled_image>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
              a17 = &a23;
              std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
              _Unwind_Resume(a1);
              return;
            default:
              goto LABEL_115;
          }
        default:
          goto LABEL_77;
      }
    default:
      goto LABEL_39;
  }
}

uint64_t std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_2184CDC74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::emplace_back<turi::flexible_type const&,turi::flexible_type&,turi::flexible_type&>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD *)(v8 - 8);
  if (v11 >= v10)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *a1) >> 4);
    if (v14 + 1 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 4);
    v16 = 2 * v15;
    if (2 * v15 <= v14 + 1)
      v16 = v14 + 1;
    if (v15 >= 0x2AAAAAAAAAAAAAALL)
      v17 = 0x555555555555555;
    else
      v17 = v16;
    v23 = v8;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v8, v17);
    else
      v18 = 0;
    v19 = v18;
    v20 = &v18[48 * v14];
    v22 = &v18[48 * v17];
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN4turi13flexible_typeES4_S4_EEC2B8ne180100IJLm0ELm1ELm2EEJS4_S4_S4_EJEJEJRKS4_RS4_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_((uint64_t)v20, a2, a3, a4);
    v21 = v20 + 48;
    std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(a1, &v19);
    v13 = a1[1];
    result = std::__split_buffer<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN4turi13flexible_typeES4_S4_EEC2B8ne180100IJLm0ELm1ELm2EEJS4_S4_S4_EJEJEJRKS4_RS4_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(*(_QWORD *)(v8 - 8), a2, a3, a4);
    v13 = v11 + 48;
    a1[1] = v11 + 48;
  }
  a1[1] = v13;
  return result;
}

void sub_2184CDDB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::object_detection::`anonymous namespace'::parse_annotations(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  __int128 v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned __int8 ***v31;
  float v32;
  int v33;
  int v34;
  unsigned __int8 **v35;
  float *v36;
  int v37;
  int v38;
  int v40;
  int v41;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  char v46;
  float v47;
  float v48;
  float v49;
  int v50;
  float v51;
  float v52;
  void **v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v70;
  uint64_t v71;
  char v72;
  __int128 v74;
  uint64_t v75;

  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  std::vector<turi::neural_net::image_annotation>::reserve((void **)a8, (a1[1] - *a1) >> 4);
  v12 = *a1;
  v70 = a1[1];
  if (*a1 != v70)
  {
    v13 = (float)a2;
LABEL_3:
    v74 = 0uLL;
    v75 = 0;
    v14 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    if (v14 == v15)
      goto LABEL_116;
    v71 = v12;
    v72 = 0;
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v18 = *(_QWORD *)v14 + 8;
      if (*(char *)(*(_QWORD *)v14 + 31) < 0)
        break;
      if (*(_BYTE *)(*(_QWORD *)v14 + 31) != 5)
      {
        if (*(_BYTE *)(*(_QWORD *)v14 + 31) != 11)
          goto LABEL_71;
LABEL_16:
        v21 = *(_DWORD **)v18;
        v22 = *(_QWORD *)(v18 + 3);
        if (v21 == (_DWORD *)0x616E6964726F6F63 && v22 == 0x736574616E696472)
        {
          if (*(_BYTE *)(v14 + 28) != 5)
          v24 = *(_QWORD *)(v14 + 16);
          v26 = *(_QWORD *)(v24 + 8);
          v25 = *(_QWORD *)(v24 + 16);
          if (v26 != v25)
          {
            v27 = v26 + 16;
            while (1)
            {
              v28 = v27 - 16;
              v29 = *(_QWORD *)(v27 - 16);
              v30 = *(unsigned __int8 *)(v27 + 12);
              if (v30 >= 2)
              if (v30 == 1)
                *(_QWORD *)&v11 = *(_QWORD *)v27;
              else
                *(double *)&v11 = (double)*(uint64_t *)v27;
              v31 = (unsigned __int8 ***)(v29 + 8);
              v32 = *(double *)&v11;
              v33 = *(unsigned __int8 *)(v29 + 31);
              if (*(char *)(v29 + 31) < 0)
              {
                if (*(_QWORD *)(v29 + 16) != 1)
                  goto LABEL_43;
                v34 = *(unsigned __int8 *)*v31;
              }
              else
              {
                if (v33 != 1)
                {
                  if (v33 != 5)
                  {
                    if (v33 == 6)
                      goto LABEL_54;
                    goto LABEL_60;
                  }
                  v35 = (unsigned __int8 **)(v29 + 8);
                  goto LABEL_45;
                }
                v34 = *(unsigned __int8 *)v31;
              }
              if (v34 == 120)
              {
                v16 = 1;
                v36 = (float *)&v74 + 1;
              }
              else
              {
                if (v34 != 121)
                  goto LABEL_42;
                v17 = 1;
                v36 = (float *)&v74 + 2;
              }
              *v36 = v32;
LABEL_42:
              if ((v33 & 0x80) == 0)
                goto LABEL_60;
LABEL_43:
              if (*(_QWORD *)(v29 + 16) == 5)
              {
                v35 = *v31;
LABEL_45:
                v37 = *(_DWORD *)v35;
                v38 = *((unsigned __int8 *)v35 + 4);
                if (v37 == 1952737655 && v38 == 104)
                {
                  *((float *)&v74 + 3) = v32;
                  if ((v33 & 0x80) == 0)
                    goto LABEL_60;
                }
                else if ((v33 & 0x80) == 0)
                {
                  goto LABEL_60;
                }
              }
              if (*(_QWORD *)(v29 + 16) == 6)
              {
                v31 = (unsigned __int8 ***)*v31;
LABEL_54:
                v40 = *(_DWORD *)v31;
                v41 = *((unsigned __int16 *)v31 + 2);
                if (v40 == 1734960488 && v41 == 29800)
                  *(float *)&v75 = v32;
              }
LABEL_60:
              v27 += 32;
              if (v28 + 32 == v25)
                goto LABEL_71;
            }
          }
        }
        goto LABEL_71;
      }
      if (*(_DWORD *)v18 == 1700946284 && *(_BYTE *)(*(_QWORD *)v14 + 12) == 108)
        goto LABEL_67;
LABEL_71:
      v14 += 32;
      if (v14 == v15)
      {
        v46 = v72 & v16 & v17;
        v12 = v71;
        if ((v46 & 1) != 0)
        {
          v47 = *((float *)&v74 + 3);
          if (*((float *)&v74 + 3) > 0.0)
          {
            v48 = *(float *)&v75;
            if (*(float *)&v75 > 0.0 && (float)(*((float *)&v74 + 3) * *(float *)&v75) > 0.0)
            {
              if (a6 == 1)
              {
                v49 = 1.0;
                LODWORD(v11) = 1.0;
                v50 = a7;
              }
              else
              {
                v49 = 0.0;
                LODWORD(v11) = 0;
                v50 = a7;
                if (!a6)
                {
                  v49 = (float)a3;
                  *(float *)&v11 = v13;
                }
              }
              if (a5 == 1)
              {
                if (v50 == 2)
                {
                  v51 = (float)(v49 - *(float *)&v75) - *((float *)&v74 + 2);
                  goto LABEL_93;
                }
                if (v50 == 1)
                {
                  v51 = v49 - *((float *)&v74 + 2);
                  goto LABEL_93;
                }
                if (v50)
                  goto LABEL_94;
                v52 = v49 - *((float *)&v74 + 2);
                *((float *)&v74 + 1) = *((float *)&v74 + 1) - (float)(*((float *)&v74 + 3) * 0.5);
                v48 = *(float *)&v75 * 0.5;
              }
              else
              {
                if (a5)
                  goto LABEL_94;
                if (v50 != 2)
                {
                  if (!v50)
                  {
                    *((float *)&v74 + 1) = *((float *)&v74 + 1) - (float)(*((float *)&v74 + 3) * 0.5);
                    v51 = *((float *)&v74 + 2) - (float)(*(float *)&v75 * 0.5);
LABEL_93:
                    *((float *)&v74 + 2) = v51;
                  }
LABEL_94:
                  if (!a6)
                  {
                    *(_QWORD *)&v11 = turi::neural_net::image_box::normalize((float32x4_t *)((char *)&v74 + 4), *(double *)&v11, v49).u64[0];
                    v47 = *((float *)&v74 + 3);
                  }
                  if (v47 > 0.0 && *(float *)&v75 > 0.0 && (float)(v47 * *(float *)&v75) > 0.0)
                  {
                    HIDWORD(v75) = 1065353216;
                    v53 = (void **)a8;
                    v55 = *(_QWORD *)(a8 + 8);
                    v54 = *(_QWORD *)(a8 + 16);
                    if (v55 >= v54)
                    {
                      v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *(_QWORD *)a8) >> 3);
                      v58 = v57 + 1;
                      if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - *(_QWORD *)a8) >> 3);
                      if (2 * v59 > v58)
                        v58 = 2 * v59;
                      if (v59 >= 0x555555555555555)
                        v60 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v60 = v58;
                      if (v60)
                      {
                        v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a8 + 16, v60);
                        v53 = (void **)a8;
                      }
                      else
                      {
                        v61 = 0;
                      }
                      v62 = &v61[24 * v57];
                      v11 = v74;
                      *((_QWORD *)v62 + 2) = v75;
                      *(_OWORD *)v62 = v11;
                      v64 = (char *)*v53;
                      v63 = (char *)v53[1];
                      v65 = v62;
                      if (v63 != *v53)
                      {
                        do
                        {
                          v11 = *(_OWORD *)(v63 - 24);
                          *((_QWORD *)v65 - 1) = *((_QWORD *)v63 - 1);
                          *(_OWORD *)(v65 - 24) = v11;
                          v65 -= 24;
                          v63 -= 24;
                        }
                        while (v63 != v64);
                        v63 = (char *)*v53;
                      }
                      v56 = v62 + 24;
                      *v53 = v65;
                      v53[1] = v62 + 24;
                      v53[2] = &v61[24 * v60];
                      if (v63)
                        operator delete(v63);
                    }
                    else
                    {
                      v11 = v74;
                      *(_QWORD *)(v55 + 16) = v75;
                      *(_OWORD *)v55 = v11;
                      v56 = (char *)(v55 + 24);
                    }
                    v53[1] = v56;
                  }
                  goto LABEL_116;
                }
                v52 = *((float *)&v74 + 2);
              }
              v51 = v52 - v48;
              goto LABEL_93;
            }
          }
        }
LABEL_116:
        v12 += 16;
        if (v12 == v70)
          return;
        goto LABEL_3;
      }
    }
    v19 = *(_QWORD *)(*(_QWORD *)v14 + 16);
    if (v19 != 5
      || (**(_DWORD **)v18 == 1700946284 ? (v20 = *(_BYTE *)(*(_QWORD *)v18 + 4) == 108) : (v20 = 0), !v20))
    {
      if (v19 != 11)
        goto LABEL_71;
      v18 = *(_QWORD *)v18;
      goto LABEL_16;
    }
LABEL_67:
    if (*(_BYTE *)(v14 + 28) == 7)
    v44 = (unsigned __int8 *)(*(_QWORD *)(v14 + 16) + 8);
    if (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(a4, v44))
    {
      v45 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(a4, v44);
      if (!v45)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      LODWORD(v74) = *((_DWORD *)v45 + 10);
      v72 = 1;
    }
    goto LABEL_71;
  }
}

void sub_2184CE398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

BOOL turi::object_detection::simple_data_iterator::has_next_batch(turi::object_detection::simple_data_iterator *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  v11 = *((_QWORD *)this + 18);
  v12 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = turi::gl_sframe_range::end((turi::gl_sframe_range *)&v11);
  v6 = *((_QWORD *)this + 20);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6 != v5;
}

void sub_2184CE4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::object_detection::simple_data_iterator::num_instances(turi::object_detection::simple_data_iterator *this)
{
  return *((_QWORD *)this + 17);
}

_QWORD *std::__function::__func<turi::flexible_type (*)(turi::flexible_type const&),std::allocator<turi::flexible_type (*)(turi::flexible_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D945598;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::flexible_type (*)(turi::flexible_type const&),std::allocator<turi::flexible_type (*)(turi::flexible_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D945598;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::flexible_type (*)(turi::flexible_type const&),std::allocator<turi::flexible_type (*)(turi::flexible_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<turi::flexible_type (*)(turi::flexible_type const&),std::allocator<turi::flexible_type (*)(turi::flexible_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::flexible_type (*)(turi::flexible_type const&),std::allocator<turi::flexible_type (*)(turi::flexible_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0,std::allocator<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0,std::allocator<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D945638;
  return result;
}

void std::__function::__func<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0,std::allocator<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D945638;
}

void std::__function::__func<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0,std::allocator<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void **v12;

  v10 = 0uLL;
  v11 = 0;
  v3 = *(unsigned __int8 *)(a1 + 12);
  if (v3 != 7)
  {
    if (v3 == 5)
    {
      *((_QWORD *)&v10 + 1) = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>((uint64_t *)&v10, (char *)a1);
    }
    else
    {
      if (v3 != 4)
      if ((__int128 *)(*(_QWORD *)a1 + 8) != &v10)
        std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)&v10, *(uint64_t **)(*(_QWORD *)a1 + 8), *(uint64_t **)(*(_QWORD *)a1 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - *(_QWORD *)(*(_QWORD *)a1 + 8)) >> 4);
    }
  }
  *(uint64_t *)((char *)a2 + 5) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 12) = 4;
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *a2 = v4;
  *(_QWORD *)v4 = 1;
  if (*(_QWORD *)v4 != 1)
  {
    v5 = (_QWORD *)operator new();
    v6 = *(uint64_t **)(v4 + 8);
    *v5 = *(_QWORD *)v4;
    v5[2] = 0;
    v5[3] = 0;
    v5[1] = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v5 + 1, v6, *(uint64_t **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - (_QWORD)v6) >> 4);
    *a2 = (uint64_t)v5;
    *v5 = 1;
    do
    {
      v7 = __ldaxr((unint64_t *)v4);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unint64_t *)v4));
    if (!v8)
    {
      v12 = (void **)(v4 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v12);
      MEMORY[0x219A19A08](v4, 0x1020C405E66F15BLL);
    }
  }
  v9 = *a2;
  std::vector<turi::flexible_type>::__vdeallocate((void **)(v9 + 8));
  *(_OWORD *)(v9 + 8) = v10;
  *(_QWORD *)(v9 + 24) = v11;
  v10 = 0uLL;
  v11 = 0;
  v12 = (void **)&v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_2184CE7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0,std::allocator<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0,std::allocator<turi::object_detection::`anonymous namespace'::canonicalize_annotations(turi::gl_sarray)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::__shared_ptr_pointer<turi::neural_net::Image  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::neural_net::Image  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_2184CEB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_2184CEC18(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 48)
  {
    std::__tuple_leaf<2ul,turi::flexible_type,false>::~__tuple_leaf(i - 16);
    std::__tuple_leaf<1ul,turi::flexible_type,false>::~__tuple_leaf(i - 32);
    result = std::__tuple_leaf<0ul,turi::flexible_type,false>::~__tuple_leaf(i - 48);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t std::__tuple_leaf<2ul,turi::flexible_type,false>::~__tuple_leaf(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::vector<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>,std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>,std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>,std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>,std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>,std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>,std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 48) = 0;
      *(_DWORD *)(v7 - 40) = 0;
      *(_BYTE *)(v7 - 36) = 0;
      v8 = *(_QWORD *)(a3 - 48);
      a3 -= 48;
      *(_QWORD *)(v7 - 43) = *(_QWORD *)(a3 + 5);
      *(_QWORD *)(v7 - 48) = v8;
      *(_BYTE *)(v7 - 36) = *(_BYTE *)(a3 + 12);
      *(_BYTE *)(a3 + 12) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_DWORD *)(v7 - 24) = 0;
      *(_BYTE *)(v7 - 20) = 0;
      v9 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 27) = *(_QWORD *)(a3 + 21);
      *(_QWORD *)(v7 - 32) = v9;
      *(_BYTE *)(v7 - 20) = *(_BYTE *)(a3 + 28);
      *(_BYTE *)(a3 + 28) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_DWORD *)(v7 - 8) = 0;
      *(_BYTE *)(v7 - 4) = 0;
      v10 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 + 37);
      *(_QWORD *)(v7 - 16) = v10;
      *(_BYTE *)(v7 - 4) = *(_BYTE *)(a3 + 44);
      *(_BYTE *)(a3 + 44) = 0;
      v7 = *((_QWORD *)&v16 + 1) - 48;
      *((_QWORD *)&v16 + 1) -= 48;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>,std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>,std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>,std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>,std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>,std::reverse_iterator<std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>>,std::reverse_iterator<std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>,std::reverse_iterator<std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>>,std::reverse_iterator<std::reverse_iterator<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t result;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    std::__tuple_leaf<2ul,turi::flexible_type,false>::~__tuple_leaf(i + 32);
    std::__tuple_leaf<1ul,turi::flexible_type,false>::~__tuple_leaf(i + 16);
    result = std::__tuple_leaf<0ul,turi::flexible_type,false>::~__tuple_leaf(i);
    i = *(_QWORD *)(a2 + 32) + 48;
  }
  return result;
}

uint64_t std::__split_buffer<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 48;
      std::__tuple_leaf<2ul,turi::flexible_type,false>::~__tuple_leaf(v2 - 16);
      std::__tuple_leaf<1ul,turi::flexible_type,false>::~__tuple_leaf(v2 - 32);
      result = std::__tuple_leaf<0ul,turi::flexible_type,false>::~__tuple_leaf(v2 - 48);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN4turi13flexible_typeES4_S4_EEC2B8ne180100IJLm0ELm1ELm2EEJS4_S4_S4_EJEJEJRKS4_RS4_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  int v6;
  unint64_t *v8;
  unint64_t v9;
  unint64_t **v10;
  unint64_t *v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t **v15;
  unint64_t *v16;
  unsigned int v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  if (a2 != (uint64_t *)result)
  {
    v4 = *a2;
    *(_QWORD *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)result = v4;
    LODWORD(v4) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(result + 12) = v4;
    v5 = v4 > 9;
    v6 = (1 << v4) & 0x33C;
    if (!v5 && v6 != 0)
    {
      v8 = *(unint64_t **)result;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  *(_QWORD *)(result + 16) = 0;
  v10 = (unint64_t **)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  if (result + 16 != a3)
  {
    v11 = *(unint64_t **)a3;
    *(_QWORD *)(result + 21) = *(_QWORD *)(a3 + 5);
    *v10 = v11;
    v12 = *(unsigned __int8 *)(a3 + 12);
    *(_BYTE *)(result + 28) = v12;
    if (v12 <= 9 && ((1 << v12) & 0x33C) != 0)
    {
      v13 = *v10;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  *(_QWORD *)(result + 32) = 0;
  v15 = (unint64_t **)(result + 32);
  *(_DWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 0;
  if (result + 32 != a4)
  {
    v16 = *(unint64_t **)a4;
    *(_QWORD *)(result + 37) = *(_QWORD *)(a4 + 5);
    *v15 = v16;
    v17 = *(unsigned __int8 *)(a4 + 12);
    *(_BYTE *)(result + 44) = v17;
    if (v17 <= 9 && ((1 << v17) & 0x33C) != 0)
    {
      v18 = *v15;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
  }
  return result;
}

void std::__function::__func<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0,std::allocator<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0,std::allocator<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D945718;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0,std::allocator<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D945718;
  a2[1] = v2;
  return result;
}

void std::__function::__func<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0,std::allocator<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  void *__p[2];
  void *v25[2];
  __int128 v26;
  __int128 v27;
  std::string v28;
  size_t __idx;

  v4 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  switch(a2[12])
  {
    case 0:
      v4 = *(_QWORD *)a2;
      goto LABEL_29;
    case 1:
      v4 = (uint64_t)*(double *)a2;
      goto LABEL_29;
    case 2:
      v9 = *(_QWORD *)a2;
      v10 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v11 = (char *)v10;
      if (*(char *)(v9 + 31) < 0)
        v11 = *v10;
      std::string::basic_string[abi:ne180100]<0>(__p, v11);
      v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v25[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v9 + 31) < 0)
        v12 = *(_QWORD *)(v9 + 16);
      else
        v12 = *(unsigned __int8 *)(v9 + 31);
      if (__idx != v12)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v22 = std::string::append(&v28, " cannot be interpreted as an integer");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v25[0] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v6 = *(_QWORD *)a2;
      __p[1] = 0;
      v25[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v13 = *(_QWORD *)a2;
      __p[1] = 0;
      v25[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
      goto LABEL_28;
    case 5:
      v14 = *(_QWORD *)a2;
      __p[1] = 0;
      v25[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
      goto LABEL_28;
    case 6:
      v4 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v15 = *(_QWORD *)a2;
      v16 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *(_OWORD *)(v15 + 24);
      v20 = *(_OWORD *)(v15 + 56);
      v26 = *(_OWORD *)(v15 + 40);
      v27 = v20;
      *(_OWORD *)v25 = v19;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v26 + 1))
      {
        *(_QWORD *)&v27 = *((_QWORD *)&v26 + 1);
        operator delete(*((void **)&v26 + 1));
      }
      if (v25[0])
      {
        v25[1] = v25[0];
        operator delete(v25[0]);
      }
      v4 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_29;
      v7 = (unint64_t *)((char *)__p[1] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
LABEL_28:
      v4 = 0;
LABEL_29:
      *(_BYTE *)(a3 + 12) = 0;
      *(_DWORD *)(a3 + 8) = 0;
      *(_QWORD *)a3 = 0xC6A4A7935BD1E995
                    * ((0xC6A4A7935BD1E995 * (v5 ^ v4 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                                   * (v5 ^ v4 ^ 0xC3A5C85C97CB3127)) >> 47));
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_2184CF68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0,std::allocator<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0,std::allocator<turi::object_detection::simple_data_iterator::next_batch(unsigned long)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

_QWORD *std::vector<turi::neural_net::labeled_image>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::mutex>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, a2 << 6);
    a1[1] = &v4[64 * a2];
  }
  return a1;
}

void sub_2184CF834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::neural_net::labeled_image>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__memberwise_copy_assign[abi:ne180100]<std::tuple<turi::flexible_type &,turi::flexible_type &,turi::flexible_type &>,std::tuple<turi::flexible_type,turi::flexible_type,turi::flexible_type>,0ul,1ul,2ul>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unsigned int v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  int v71;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  int v106;
  unint64_t *v108;
  unint64_t v109;
  void **v110;

  v3 = result;
  v4 = *result;
  if ((uint64_t *)*result != a2)
  {
    switch(*(_BYTE *)(v4 + 12))
    {
      case 2:
        v5 = *(unint64_t **)v4;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          if (*((char *)v8 + 31) < 0)
            operator delete((void *)v8[1]);
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v11 = *(unint64_t **)v4;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v14 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v15 = (void *)v14[1];
          if (v15)
          {
            v14[2] = (unint64_t)v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v16 = *(unint64_t **)v4;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          v19 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v110 = (void **)(v19 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v110);
          goto LABEL_27;
        }
        break;
      case 5:
        v20 = *(unint64_t **)v4;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v19 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v110 = (void **)(v19 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v110);
LABEL_27:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v23 = *(unint64_t **)v4;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
          v9 = v26;
          v27 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v28 = *(unint64_t **)v4;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *(unint64_t **)v4;
          if (*(_QWORD *)v4)
          {
            v32 = (void *)v31[6];
            if (v32)
            {
              v31[7] = (unint64_t)v32;
              operator delete(v32);
            }
            v33 = (void *)v31[3];
            if (v33)
            {
              v31[4] = (unint64_t)v33;
              operator delete(v33);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
            v9 = v31;
            v27 = 2071181815;
LABEL_42:
            v10 = v27 | 0x1030C4000000000;
LABEL_43:
            result = (_QWORD *)MEMORY[0x219A19A08](v9, v10);
          }
LABEL_44:
          *(_QWORD *)v4 = 0;
        }
        break;
      default:
        break;
    }
    v34 = *a2;
    *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)v4 = v34;
    LODWORD(v34) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(v4 + 12) = v34;
    v35 = v34 > 9;
    v36 = (1 << v34) & 0x33C;
    if (!v35 && v36 != 0)
    {
      v38 = *(unint64_t **)v4;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
    }
  }
  v40 = v3[1];
  if (a2 + 2 != (uint64_t *)v40)
  {
    switch(*(_BYTE *)(v40 + 12))
    {
      case 2:
        v41 = *(unint64_t **)v40;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          v44 = *(unint64_t **)v40;
          if (!*(_QWORD *)v40)
            goto LABEL_94;
          if (*((char *)v44 + 31) < 0)
            operator delete((void *)v44[1]);
          v45 = v44;
          v46 = 0x1012C404EF22A49;
          goto LABEL_93;
        }
        break;
      case 3:
        v47 = *(unint64_t **)v40;
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          v50 = *(unint64_t **)v40;
          if (!*(_QWORD *)v40)
            goto LABEL_94;
          v51 = (void *)v50[1];
          if (v51)
          {
            v50[2] = (unint64_t)v51;
            operator delete(v51);
          }
          v45 = v50;
          v46 = 0x1080C409938AC02;
          goto LABEL_93;
        }
        break;
      case 4:
        v52 = *(unint64_t **)v40;
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          v55 = *(unint64_t **)v40;
          if (!*(_QWORD *)v40)
            goto LABEL_94;
          v110 = (void **)(v55 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v110);
          goto LABEL_77;
        }
        break;
      case 5:
        v56 = *(unint64_t **)v40;
        do
        {
          v57 = __ldaxr(v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, v56));
        if (!v58)
        {
          v55 = *(unint64_t **)v40;
          if (!*(_QWORD *)v40)
            goto LABEL_94;
          v110 = (void **)(v55 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v110);
LABEL_77:
          v45 = v55;
          v46 = 0x1020C405E66F15BLL;
          goto LABEL_93;
        }
        break;
      case 8:
        v59 = *(unint64_t **)v40;
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          v62 = *(unint64_t **)v40;
          if (!*(_QWORD *)v40)
            goto LABEL_94;
          boost::detail::shared_count::~shared_count((unsigned int **)v62 + 2);
          v45 = v62;
          v63 = -235920773;
          goto LABEL_92;
        }
        break;
      case 9:
        v64 = *(unint64_t **)v40;
        do
        {
          v65 = __ldaxr(v64);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v64));
        if (!v66)
        {
          v67 = *(unint64_t **)v40;
          if (*(_QWORD *)v40)
          {
            v68 = (void *)v67[6];
            if (v68)
            {
              v67[7] = (unint64_t)v68;
              operator delete(v68);
            }
            v69 = (void *)v67[3];
            if (v69)
            {
              v67[4] = (unint64_t)v69;
              operator delete(v69);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v67 + 1));
            v45 = v67;
            v63 = 2071181815;
LABEL_92:
            v46 = v63 | 0x1030C4000000000;
LABEL_93:
            result = (_QWORD *)MEMORY[0x219A19A08](v45, v46);
          }
LABEL_94:
          *(_QWORD *)v40 = 0;
        }
        break;
      default:
        break;
    }
    v70 = a2[2];
    *(_QWORD *)(v40 + 5) = *(uint64_t *)((char *)a2 + 21);
    *(_QWORD *)v40 = v70;
    LODWORD(v70) = *((unsigned __int8 *)a2 + 28);
    *(_BYTE *)(v40 + 12) = v70;
    v35 = v70 > 9;
    v71 = (1 << v70) & 0x33C;
    if (!v35 && v71 != 0)
    {
      v73 = *(unint64_t **)v40;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 + 1, v73));
    }
  }
  v75 = v3[2];
  if (a2 + 4 != (uint64_t *)v75)
  {
    switch(*(_BYTE *)(v75 + 12))
    {
      case 2:
        v76 = *(unint64_t **)v75;
        do
        {
          v77 = __ldaxr(v76);
          v78 = v77 - 1;
        }
        while (__stlxr(v78, v76));
        if (!v78)
        {
          v79 = *(unint64_t **)v75;
          if (!*(_QWORD *)v75)
            goto LABEL_144;
          if (*((char *)v79 + 31) < 0)
            operator delete((void *)v79[1]);
          v80 = v79;
          v81 = 0x1012C404EF22A49;
          goto LABEL_143;
        }
        break;
      case 3:
        v82 = *(unint64_t **)v75;
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          v85 = *(unint64_t **)v75;
          if (!*(_QWORD *)v75)
            goto LABEL_144;
          v86 = (void *)v85[1];
          if (v86)
          {
            v85[2] = (unint64_t)v86;
            operator delete(v86);
          }
          v80 = v85;
          v81 = 0x1080C409938AC02;
          goto LABEL_143;
        }
        break;
      case 4:
        v87 = *(unint64_t **)v75;
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          v90 = *(unint64_t **)v75;
          if (!*(_QWORD *)v75)
            goto LABEL_144;
          v110 = (void **)(v90 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v110);
          goto LABEL_127;
        }
        break;
      case 5:
        v91 = *(unint64_t **)v75;
        do
        {
          v92 = __ldaxr(v91);
          v93 = v92 - 1;
        }
        while (__stlxr(v93, v91));
        if (!v93)
        {
          v90 = *(unint64_t **)v75;
          if (!*(_QWORD *)v75)
            goto LABEL_144;
          v110 = (void **)(v90 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v110);
LABEL_127:
          v80 = v90;
          v81 = 0x1020C405E66F15BLL;
          goto LABEL_143;
        }
        break;
      case 8:
        v94 = *(unint64_t **)v75;
        do
        {
          v95 = __ldaxr(v94);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, v94));
        if (!v96)
        {
          v97 = *(unint64_t **)v75;
          if (!*(_QWORD *)v75)
            goto LABEL_144;
          boost::detail::shared_count::~shared_count((unsigned int **)v97 + 2);
          v80 = v97;
          v98 = -235920773;
          goto LABEL_142;
        }
        break;
      case 9:
        v99 = *(unint64_t **)v75;
        do
        {
          v100 = __ldaxr(v99);
          v101 = v100 - 1;
        }
        while (__stlxr(v101, v99));
        if (!v101)
        {
          v102 = *(unint64_t **)v75;
          if (*(_QWORD *)v75)
          {
            v103 = (void *)v102[6];
            if (v103)
            {
              v102[7] = (unint64_t)v103;
              operator delete(v103);
            }
            v104 = (void *)v102[3];
            if (v104)
            {
              v102[4] = (unint64_t)v104;
              operator delete(v104);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v102 + 1));
            v80 = v102;
            v98 = 2071181815;
LABEL_142:
            v81 = v98 | 0x1030C4000000000;
LABEL_143:
            result = (_QWORD *)MEMORY[0x219A19A08](v80, v81);
          }
LABEL_144:
          *(_QWORD *)v75 = 0;
        }
        break;
      default:
        break;
    }
    v105 = a2[4];
    *(_QWORD *)(v75 + 5) = *(uint64_t *)((char *)a2 + 37);
    *(_QWORD *)v75 = v105;
    LODWORD(v105) = *((unsigned __int8 *)a2 + 44);
    *(_BYTE *)(v75 + 12) = v105;
    v35 = v105 > 9;
    v106 = (1 << v105) & 0x33C;
    if (!v35 && v106 != 0)
    {
      v108 = *(unint64_t **)v75;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 + 1, v108));
    }
  }
  return result;
}

uint64_t _GLOBAL__sub_I_od_data_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::object_detection::average_precision_calculator::average_precision_calculator(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<turi::object_detection::average_precision_calculator::class_data>::vector(a1 + 3, (uint64_t)(a1[1] - *a1) >> 4);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)a3;
  a1[8] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return a1;
}

void sub_2184CFFB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::object_detection::`anonymous namespace'::iou_thresholds_for_evaluation(float **a1@<X8>)
{
  float *v3;
  _QWORD *v4;
  int v5;
  float v6;
  float *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  float *v14;
  int v15;
  BOOL v16;

  v3 = 0;
  a1[2] = 0;
  v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  v5 = 50;
  do
  {
    v6 = (float)v5 / 100.0;
    if ((unint64_t)v3 >= *v4)
    {
      v8 = *a1;
      v9 = v3 - *a1;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v11 = *v4 - (_QWORD)v8;
      if (v11 >> 1 > v10)
        v10 = v11 >> 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v4, v12);
        v8 = *a1;
        v3 = a1[1];
      }
      else
      {
        v13 = 0;
      }
      v14 = (float *)&v13[4 * v9];
      *v14 = v6;
      v7 = v14 + 1;
      while (v3 != v8)
      {
        v15 = *((_DWORD *)v3-- - 1);
        *((_DWORD *)v14-- - 1) = v15;
      }
      *a1 = v14;
      a1[1] = v7;
      a1[2] = (float *)&v13[4 * v12];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v3 = v6;
      v7 = v3 + 1;
    }
    a1[1] = v7;
    v3 = v7;
    v16 = v5 >= 0x5F;
    v5 += 5;
  }
  while (!v16);
}

void sub_2184D00EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *turi::object_detection::average_precision_calculator::average_precision_calculator(_QWORD *a1, __int128 *a2)
{
  void *__p[3];
  __int128 v5;
  uint64_t v6;
  void **v7;

  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  turi::object_detection::average_precision_calculator::average_precision_calculator(a1, (uint64_t)&v5, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v7 = (void **)&v5;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v7);
  return a1;
}

void sub_2184D0184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v13 - 24) = &a13;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 24));
  _Unwind_Resume(a1);
}

void turi::object_detection::average_precision_calculator::add_row(uint64_t a1, int **a2, int **a3)
{
  unint64_t v6;
  int *v7;
  int *v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  int *v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _OWORD *v20;
  void **v21;
  _OWORD *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t *v43;
  void **v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void *__p;
  unint64_t v55;

  v6 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  LOBYTE(v53) = 0;
  std::vector<BOOL>::vector(&__p, v6, (unsigned __int8 *)&v53);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v10 = v7 + 1;
      v9 = *v7;
      *(_QWORD *)((char *)__p + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
      v11 = *(_QWORD *)(a1 + 24) + 72 * (int)v9;
      v53 = (uint64_t)(*(_QWORD *)(v11 + 56) - *(_QWORD *)(v11 + 48)) >> 3;
      std::vector<turi::object_detection::average_precision_calculator::prediction>::emplace_back<float const&,turi::neural_net::image_box const&,unsigned long>((void **)v11, v7 + 5, (__int128 *)(v7 + 1), &v53);
      v7 = v10 + 5;
    }
    while (v10 + 5 != v8);
  }
  v12 = *a3;
  v13 = a3[1];
  if (*a3 != v13)
  {
    do
    {
      v15 = v12 + 1;
      v14 = *v12;
      *(_QWORD *)((char *)__p + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v16 = *(_QWORD *)(a1 + 24) + 72 * (int)v14;
      v19 = *(_QWORD *)(v16 + 40);
      v18 = (_QWORD *)(v16 + 40);
      v17 = v19;
      v21 = (void **)(v18 - 1);
      v20 = (_OWORD *)*(v18 - 1);
      if ((unint64_t)v20 >= v19)
      {
        v23 = (void **)(v18 - 2);
        v24 = *(v18 - 2);
        v25 = ((uint64_t)v20 - v24) >> 4;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v27 = v17 - v24;
        if (v27 >> 3 > v26)
          v26 = v27 >> 3;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
          v28 = 0xFFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v18, v28);
        else
          v29 = 0;
        v30 = &v29[16 * v25];
        *(_OWORD *)v30 = *v15;
        v31 = (char *)*v21;
        v32 = (char *)*v23;
        v33 = v30;
        if (*v21 != *v23)
        {
          do
          {
            *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
            v33 -= 16;
            v31 -= 16;
          }
          while (v31 != v32);
          v31 = (char *)*v23;
        }
        *v23 = v33;
        v22 = v30 + 16;
        *v21 = v30 + 16;
        *v18 = &v29[16 * v28];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v20 = *v15;
        v22 = v20 + 1;
      }
      *v21 = v22;
      v12 += 6;
    }
    while (v12 != v13);
  }
  v34 = v55;
  if (v55)
  {
    v35 = 0;
    do
    {
      if (((*(_QWORD *)((char *)__p + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
      {
        v36 = *(_QWORD *)(a1 + 24) + 72 * v35;
        v39 = *(_QWORD *)(v36 + 64);
        v38 = (_QWORD *)(v36 + 64);
        v37 = v39;
        v40 = (uint64_t)(*(v38 - 4) - *(v38 - 5)) >> 4;
        v42 = (uint64_t **)(v38 - 1);
        v41 = (uint64_t *)*(v38 - 1);
        if ((unint64_t)v41 >= v39)
        {
          v44 = (void **)(v38 - 2);
          v45 = (uint64_t *)*(v38 - 2);
          v46 = v41 - v45;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v48 = v37 - (_QWORD)v45;
          if (v48 >> 2 > v47)
            v47 = v48 >> 2;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v38, v49);
            v41 = *v42;
            v45 = (uint64_t *)*v44;
          }
          else
          {
            v50 = 0;
          }
          v51 = (uint64_t *)&v50[8 * v46];
          *v51 = v40;
          v43 = v51 + 1;
          while (v41 != v45)
          {
            v52 = *--v41;
            *--v51 = v52;
          }
          *v44 = v51;
          *v42 = v43;
          *v38 = &v50[8 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *v41 = v40;
          v43 = v41 + 1;
        }
        *v42 = v43;
        v34 = v55;
      }
      ++v35;
    }
    while (v35 < v34);
  }
  if (__p)
    operator delete(__p);
}

void sub_2184D04EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<turi::object_detection::average_precision_calculator::prediction>::emplace_back<float const&,turi::neural_net::image_box const&,unsigned long>(void **a1, _DWORD *a2, __int128 *a3, uint64_t *a4)
{
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;

  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD *)(v8 - 8);
  if (v11 >= (unint64_t)v10)
  {
    v15 = (uint64_t)(v11 - (_QWORD)*a1) >> 5;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v17 = v9 - (_BYTE *)*a1;
    if (v17 >> 4 > v16)
      v16 = v17 >> 4;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v18 = 0x7FFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v8, v18);
    v20 = &v19[32 * v15];
    v22 = &v19[32 * v21];
    LODWORD(v23) = *a2;
    DWORD1(v23) = *(_DWORD *)a3;
    v24 = *((_DWORD *)a3 + 3);
    v25 = *a4;
    *((_QWORD *)&v23 + 1) = *(_QWORD *)((char *)a3 + 4);
    *(_OWORD *)v20 = v23;
    *((_DWORD *)v20 + 4) = v24;
    *((_QWORD *)v20 + 3) = v25;
    v14 = v20 + 32;
    v27 = (char *)*a1;
    v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        v28 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v20 - 1) = v28;
        v20 -= 32;
        v26 -= 32;
      }
      while (v26 != v27);
      v26 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v14;
    a1[2] = v22;
    if (v26)
      operator delete(v26);
  }
  else
  {
    v12 = *a4;
    v13 = *a3;
    *(_DWORD *)v11 = *a2;
    *(_OWORD *)(v11 + 4) = v13;
    *(_QWORD *)(v11 + 24) = v12;
    v14 = (char *)(v11 + 32);
  }
  a1[1] = v14;
}

void turi::object_detection::average_precision_calculator::evaluate(turi::object_detection::average_precision_calculator *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void **v12;
  void **v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  float v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  float *v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  BOOL v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  float *v45;
  uint64_t v46;
  int v47;
  unint64_t *v49;
  unint64_t v50;
  _BYTE *v51;
  char *v52;
  float v53;
  _QWORD *v54;
  float v55;
  _BYTE *v56;
  _BYTE *v57;
  float v58;
  float *v59;
  float v60;
  unint64_t v61;
  __n128 v63;
  unint64_t v64;
  __n128 v65;
  unint64_t v66;
  void *__p;
  _BYTE *v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  uint64_t v72;
  void **v73;
  unint64_t v74;
  __n128 *v75;
  void *v76[13];
  uint64_t v77[13];
  uint64_t v78[3];
  int v79;
  double v80;
  int v81;
  char v82;
  uint64_t v83[3];
  int v84;
  double v85;
  int v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v72 = 0;
  v73 = 0;
  v74 = 0;
  std::vector<std::map<float,float>>::reserve(&v72, 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3));
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 3))
  {
    v3 = 0;
    do
    {
      turi::object_detection::average_precision_calculator::evaluate_class(this, v3, (uint64_t)&v69);
      v4 = v73;
      if ((unint64_t)v73 >= v74)
      {
        v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v73 - v72) >> 3);
        v9 = v8 + 1;
        if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v74 - v72) >> 3) > v9)
          v9 = 0x5555555555555556 * ((uint64_t)(v74 - v72) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - v72) >> 3) >= 0x555555555555555)
          v10 = 0xAAAAAAAAAAAAAAALL;
        else
          v10 = v9;
        v76[4] = &v74;
        if (v10)
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v74, v10);
        else
          v11 = 0;
        v13 = (void **)&v11[24 * v8];
        v76[0] = v11;
        v76[1] = v13;
        v76[3] = &v11[24 * v10];
        *v13 = v69;
        v14 = v70;
        v13[1] = v70;
        v15 = v13 + 1;
        v16 = v71;
        v13[2] = v71;
        if (v16)
        {
          v14[2] = v15;
          v69 = &v70;
          v70 = 0;
          v71 = 0;
        }
        else
        {
          *v13 = v15;
        }
        v76[2] = v13 + 3;
        std::vector<std::map<float,float>>::__swap_out_circular_buffer(&v72, v76);
        v12 = v73;
        std::__split_buffer<std::map<float,float>>::~__split_buffer(v76);
      }
      else
      {
        *v73 = v69;
        v5 = v70;
        v4[1] = v70;
        v6 = v4 + 1;
        v7 = v71;
        v4[2] = v71;
        if (v7)
        {
          v5[2] = v6;
          v69 = &v70;
          v70 = 0;
          v71 = 0;
        }
        else
        {
          *v4 = v6;
        }
        v12 = v4 + 3;
      }
      v73 = v12;
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v69, v70);
      ++v3;
    }
    while (v3 < 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3));
  }
  std::vector<float>::vector(&v69, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  std::vector<float>::vector(&__p, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
  {
    v29 = 0;
  }
  else
  {
    v17 = 0;
    v18 = v72;
    do
    {
      LODWORD(v76[0]) = 1056964608;
      v19 = std::map<float,float>::at(v18 + 24 * v17, (float *)v76);
      *((_DWORD *)v69 + v17) = *(_DWORD *)v19;
      v18 = v72;
      v20 = (_QWORD *)(v72 + 24 * v17);
      v23 = (_QWORD *)*v20;
      v21 = v20 + 1;
      v22 = v23;
      v24 = 0.0;
      if (v23 != v21)
      {
        do
        {
          v25 = (_QWORD *)v22[1];
          v26 = v22;
          if (v25)
          {
            do
            {
              v27 = v25;
              v25 = (_QWORD *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v27 = (_QWORD *)v26[2];
              v38 = *v27 == (_QWORD)v26;
              v26 = v27;
            }
            while (!v38);
          }
          v24 = v24 + *((float *)v22 + 8);
          v22 = v27;
        }
        while (v27 != v21);
      }
      *((float *)__p + v17) = v24 / (float)*(unint64_t *)(v72 + 24 * v17 + 16);
      ++v17;
      v28 = *((_QWORD *)this + 1) - *(_QWORD *)this;
    }
    while (v17 < v28 >> 4);
    v29 = v28 >> 4;
  }
  v65 = 0uLL;
  v66 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v65, v29);
  v30 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v31 = 0;
    v32 = v65.n128_u64[1];
    do
    {
      v33 = (uint64_t *)(v30 + 16 * v31);
      v34 = (float *)((char *)__p + 4 * v31);
      if (v32 >= v66)
      {
        v32 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__emplace_back_slow_path<turi::flexible_type&,float const&>((uint64_t *)&v65, (char *)v33, v34);
      }
      else
      {
        *(_QWORD *)v32 = 0;
        *(_DWORD *)(v32 + 8) = 0;
        *(_BYTE *)(v32 + 12) = 0;
        if ((uint64_t *)v32 != v33)
        {
          v35 = *v33;
          *(_QWORD *)(v32 + 5) = *(uint64_t *)((char *)v33 + 5);
          *(_QWORD *)v32 = v35;
          LODWORD(v35) = *((unsigned __int8 *)v33 + 12);
          *(_BYTE *)(v32 + 12) = v35;
          v36 = v35 > 9;
          v37 = (1 << v35) & 0x33C;
          v38 = v36 || v37 == 0;
          if (!v38)
          {
            v39 = *(unint64_t **)v32;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 + 1, v39));
          }
        }
        *(_QWORD *)(v32 + 21) = 0;
        *(_QWORD *)(v32 + 16) = 0;
        *(_BYTE *)(v32 + 28) = 1;
        *(double *)(v32 + 16) = *v34;
        v32 += 32;
      }
      v65.n128_u64[1] = v32;
      ++v31;
      v30 = *(_QWORD *)this;
    }
    while (v31 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  }
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[18],std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,0>(v76, "average_precision", &v65);
  v63 = 0uLL;
  v64 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v63, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  v41 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v42 = 0;
    v43 = v63.n128_u64[1];
    do
    {
      v44 = (uint64_t *)(v41 + 16 * v42);
      v45 = (float *)((char *)v69 + 4 * v42);
      if (v43 >= v64)
      {
        v43 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__emplace_back_slow_path<turi::flexible_type&,float const&>((uint64_t *)&v63, (char *)v44, v45);
      }
      else
      {
        *(_QWORD *)v43 = 0;
        *(_DWORD *)(v43 + 8) = 0;
        *(_BYTE *)(v43 + 12) = 0;
        if ((uint64_t *)v43 != v44)
        {
          v46 = *v44;
          *(_QWORD *)(v43 + 5) = *(uint64_t *)((char *)v44 + 5);
          *(_QWORD *)v43 = v46;
          LODWORD(v46) = *((unsigned __int8 *)v44 + 12);
          *(_BYTE *)(v43 + 12) = v46;
          v36 = v46 > 9;
          v47 = (1 << v46) & 0x33C;
          if (!v36 && v47 != 0)
          {
            v49 = *(unint64_t **)v43;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 + 1, v49));
          }
        }
        *(_QWORD *)(v43 + 21) = 0;
        *(_QWORD *)(v43 + 16) = 0;
        *(_BYTE *)(v43 + 28) = 1;
        *(double *)(v43 + 16) = *v45;
        v43 += 32;
      }
      v63.n128_u64[1] = v43;
      ++v42;
      v41 = *(_QWORD *)this;
    }
    while (v42 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  }
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[18],std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,0>(v77, "average_precision_50", &v63);
  v51 = v69;
  v52 = (char *)v70;
  v53 = 0.0;
  if (v69 != v70)
  {
    v54 = v69;
    do
    {
      v55 = *(float *)v54;
      v54 = (_QWORD *)((char *)v54 + 4);
      v53 = v53 + v55;
    }
    while (v54 != v70);
  }
  std::string::basic_string[abi:ne180100]<0>(v78, "mean_average_precision_50");
  v80 = (float)(v53 / (float)(unint64_t)((v52 - v51) >> 2));
  v81 = 0;
  v82 = 1;
  v79 = 0;
  v56 = __p;
  v57 = v68;
  v58 = 0.0;
  if (__p != v68)
  {
    v59 = (float *)__p;
    do
    {
      v60 = *v59++;
      v58 = v58 + v60;
    }
    while (v59 != (float *)v68);
  }
  std::string::basic_string[abi:ne180100]<0>(v83, "mean_average_precision");
  v85 = (float)(v58 / (float)(unint64_t)((v57 - v56) >> 2));
  v86 = 0;
  v87 = 1;
  v84 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](a2, (const void **)v76, 4);
  v61 = 416;
  do
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)((char *)&__p + v61));
    if (*((char *)&v66 + v61 + 7) < 0)
      operator delete((void *)v65.n128_u64[v61 / 8]);
    v61 -= 104;
  }
  while (v61);
  v75 = &v63;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  v63.n128_u64[0] = (unint64_t)&v65;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  v76[0] = &v72;
  std::vector<std::map<float,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
}

void sub_2184D0CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char *a20,char *a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t *a26,char a27)
{
  uint64_t v27;
  uint64_t i;

  for (i = 312; i != -104; i -= 104)
    std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair(v27 + i);
  a26 = (uint64_t *)&a11;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a11 = &a14;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = a20;
    operator delete(a20);
  }
  a20 = &a23;
  std::vector<std::map<float,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void **std::vector<std::map<float,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::map<float,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::map<float,float>>::~__split_buffer(v7);
  }
  return result;
}

void sub_2184D0E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<float,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::object_detection::average_precision_calculator::evaluate_class(turi::object_detection::average_precision_calculator *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  char *v14;
  __n128 *v15;
  unint64_t v16;
  uint64_t v17;
  const turi::neural_net::image_box *v18;
  double v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  _QWORD *v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  float *v41;
  float **v42;
  float *v43;
  float *v44;
  float **v45;
  uint64_t v46;
  unint64_t v47;
  float v48;
  unint64_t v49;
  float *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  float *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t v67;
  void *v69[2];
  void *__p;
  _BYTE *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char v77;

  v5 = *((_QWORD *)this + 3);
  v6 = (uint64_t *)(v5 + 72 * a2);
  v8 = *((_QWORD *)this + 6);
  v7 = *((_QWORD *)this + 7);
  v9 = v6 + 3;
  v10 = (v6[4] - v6[3]) >> 4;
  v69[0] = 0;
  std::vector<BOOL>::vector(&v69[1], v10);
  __p = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = &v73;
  v77 = 0;
  v11 = v7 - v8;
  if (v7 != v8)
  {
    if ((unint64_t)v11 >= 0x1249249249249249)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 7 * (v11 >> 2);
    v13 = operator new(v12 * 8);
    v73 = v13;
    v74 = v13;
    v14 = (char *)&v13[v12];
    v75 = (char *)&v13[v12];
    do
    {
      *v13 = v69[0];
      std::vector<BOOL>::vector(v13 + 1, (uint64_t)&v69[1]);
      v13[4] = 0;
      v13[5] = 0;
      v13[6] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(v13 + 4, __p, (uint64_t)v71, (v71 - (_BYTE *)__p) >> 2);
      v13 += 7;
      v12 -= 7;
    }
    while (v12 * 8);
    v74 = v14;
    if (__p)
    {
      v71 = __p;
      operator delete(__p);
    }
  }
  if (v69[1])
    operator delete(v69[1]);
  v65 = a3;
  v15 = (__n128 *)v6[1];
  v16 = 126 - 2 * __clz(((uint64_t)v15 - *v6) >> 5);
  if (v15 == (__n128 *)*v6)
    v17 = 0;
  else
    v17 = v16;
  std::__introsort<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *,false>(*v6, v15, v17, 1);
  v21 = *v6;
  v67 = v6[1];
  if (*v6 == v67)
  {
    v30 = *((_QWORD *)this + 6);
    v31 = *((_QWORD *)this + 7);
  }
  else
  {
    v66 = (uint64_t **)(v5 + 72 * a2 + 48);
    do
    {
      v22 = *(_QWORD *)(v21 + 24);
      if (v22)
      {
        v23 = &(*v66)[v22];
        v24 = *(v23 - 1);
        v25 = *v23 - v24;
      }
      else
      {
        v24 = 0;
        v25 = **v66;
      }
      v26 = 0;
      if (v25)
      {
        v27 = 16 * v24;
        v28 = 0.0;
        do
        {
          *(_OWORD *)v69 = *(_OWORD *)(*v9 + v27);
          if (v28 < v29)
          {
            v28 = v29;
            v26 = v24;
          }
          v27 += 16;
          ++v24;
          --v25;
        }
        while (v25);
      }
      else
      {
        v28 = 0.0;
      }
      v30 = *((_QWORD *)this + 6);
      v31 = *((_QWORD *)this + 7);
      if (v31 == v30)
      {
        v30 = *((_QWORD *)this + 7);
      }
      else
      {
        v32 = 0;
        v33 = v26 >> 6;
        v34 = 1 << v26;
        do
        {
          v35 = *(float *)(v30 + 4 * v32);
          v36 = v73;
          v37 = &v73[7 * v32];
          ++*v37;
          if (v28 >= v35)
          {
            v38 = v36[7 * v32 + 1];
            v39 = *(_QWORD *)(v38 + 8 * v33);
            if ((v39 & v34) == 0)
            {
              *(_QWORD *)(v38 + 8 * v33) = v39 | v34;
              v40 = &v36[7 * v32];
              v43 = (float *)v40[4];
              v42 = (float **)(v40 + 4);
              v41 = v43;
              v45 = v42 + 1;
              v44 = v42[1];
              v46 = v44 - v43;
              v47 = v46 + 1;
              *(float *)&v19 = (float)*v37;
              v48 = (float)(unint64_t)(v46 + 1) / *(float *)&v19;
              v49 = (unint64_t)v42[2];
              if ((unint64_t)v44 >= v49)
              {
                if (v47 >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v51 = v49 - (_QWORD)v41;
                if (v51 >> 1 > v47)
                  v47 = v51 >> 1;
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                  v52 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v52 = v47;
                if (v52)
                {
                  v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v42 + 2), v52);
                  v44 = *v45;
                  v41 = *v42;
                }
                else
                {
                  v53 = 0;
                }
                v54 = (float *)&v53[4 * v46];
                *v54 = v48;
                v50 = v54 + 1;
                while (v44 != v41)
                {
                  v55 = *((_DWORD *)v44-- - 1);
                  *((_DWORD *)v54-- - 1) = v55;
                }
                *v42 = v54;
                *v45 = v50;
                v42[2] = (float *)&v53[4 * v52];
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *v44 = v48;
                v50 = v44 + 1;
              }
              *v45 = v50;
              v30 = *((_QWORD *)this + 6);
              v31 = *((_QWORD *)this + 7);
            }
          }
          ++v32;
        }
        while (v32 < (v31 - v30) >> 2);
      }
      v21 += 32;
    }
    while (v21 != v67);
  }
  *(_QWORD *)(v65 + 16) = 0;
  *(_QWORD *)(v65 + 8) = 0;
  *(_QWORD *)v65 = v65 + 8;
  if (v31 != v30)
  {
    v56 = 0;
    do
    {
      v57 = v73[7 * v56 + 2];
      if (v57)
      {
        v59 = v73[7 * v56 + 4];
        v58 = v73[7 * v56 + 5];
        v60 = 0.0;
        if (v58 != v59)
        {
          v61 = 0.0;
          do
          {
            v62 = *(float *)(v58 - 4);
            v58 -= 4;
            v63 = v62;
            if (v61 < v62)
              v61 = v63;
            v60 = v60 + v61;
          }
          while (v58 != v59);
        }
        v64 = v60 / (float)v57;
      }
      else
      {
        v64 = 0.0;
      }
      *(float *)v69 = v64;
      std::__tree<std::__value_type<float,float>,std::__map_value_compare<float,std::__value_type<float,float>,std::less<float>,true>,std::allocator<std::__value_type<float,float>>>::__emplace_unique_key_args<float,float &,float>((uint64_t **)v65, (float *)(v30 + 4 * v56), (_DWORD *)(v30 + 4 * v56), (int *)v69);
      ++v56;
      v30 = *((_QWORD *)this + 6);
    }
    while (v56 < (*((_QWORD *)this + 7) - v30) >> 2);
  }
  v69[0] = &v73;
}

void sub_2184D12E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Unwind_Resume(a1);
}

uint64_t *std::map<float,float>::at(uint64_t a1, float *a2)
{
  float *v2;
  float v3;
  float v4;

  v2 = *(float **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = v2[7];
      if (v3 >= v4)
        break;
      v2 = *(float **)v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return (uint64_t *)(v2 + 8);
    v2 = (float *)*((_QWORD *)v2 + 1);
    if (!v2)
      goto LABEL_8;
  }
}

void turi::object_detection::`anonymous namespace'::precision_recall_curve::~precision_recall_curve(turi::object_detection::_anonymous_namespace_::precision_recall_curve *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
    operator delete(v3);
}

float turi::object_detection::`anonymous namespace'::compute_iou(turi::object_detection::_anonymous_namespace_ *this, const turi::neural_net::image_box *a2, const turi::neural_net::image_box *a3, double a4, double a5, float32x2_t a6)
{
  float32x2_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  __int128 v17;

  v17 = *(_OWORD *)this;
  v8.i32[1] = DWORD1(v17);
  v8.i32[0] = *(_DWORD *)a2;
  a6.i32[0] = *((_DWORD *)a2 + 2);
  turi::neural_net::image_box::clip((float32x2_t *)&v17, v8, *((float32_t *)a2 + 1), a6, *((float32_t *)a2 + 3));
  v9 = 0.0;
  v10 = 0.0;
  if (*((float *)&v17 + 2) > 0.0)
  {
    v10 = *((float *)&v17 + 2) * *((float *)&v17 + 3);
    if (*((float *)&v17 + 3) <= 0.0)
      v10 = 0.0;
  }
  v11 = *((float *)this + 2);
  if (v11 > 0.0)
  {
    v12 = *((float *)this + 3);
    if (v12 > 0.0)
      v9 = v11 * v12;
  }
  v13 = *((float *)a2 + 2);
  v14 = 0.0;
  if (v13 > 0.0)
  {
    v15 = *((float *)a2 + 3);
    if (v15 > 0.0)
      v14 = v13 * v15;
  }
  return v10 / (float)((float)(v9 + v14) - v10);
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__emplace_back_slow_path<turi::flexible_type&,float const&>(uint64_t *a1, char *a2, float *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  char *v21;
  char *v22;
  uint64_t *v23;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v23 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v20[0] = v12;
  v20[1] = v13;
  v21 = v13;
  v22 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_DWORD *)v13 + 2) = 0;
  v13[12] = 0;
  if (v13 != a2)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)(v13 + 5) = *(_QWORD *)(a2 + 5);
    *(_QWORD *)v13 = v14;
    v15 = a2[12];
    v13[12] = v15;
    if (v15 <= 9 && ((1 << v15) & 0x33C) != 0)
    {
      v16 = *(unint64_t **)v13;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      a2 = v21;
    }
    else
    {
      a2 = &v12[32 * v5];
    }
  }
  *(_QWORD *)(v13 + 21) = 0;
  *((_QWORD *)v13 + 2) = 0;
  v13[28] = 1;
  *((double *)v13 + 2) = *a3;
  v21 = a2 + 32;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(a1, v20);
  v18 = a1[1];
  std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_2184D15E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::object_detection::average_precision_calculator::class_data>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::object_detection::average_precision_calculator::class_data>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2184D1688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::object_detection::average_precision_calculator::class_data>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::object_detection::average_precision_calculator::class_data>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void std::vector<std::map<float,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::map<float,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<float,float>>,std::reverse_iterator<std::map<float,float>*>,std::reverse_iterator<std::map<float,float>*>,std::reverse_iterator<std::map<float,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<float,float>>,std::reverse_iterator<std::map<float,float>*>,std::reverse_iterator<std::map<float,float>*>,std::reverse_iterator<std::map<float,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<float,float>>,std::reverse_iterator<std::map<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<float,float>>,std::reverse_iterator<std::map<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<float,float>>,std::reverse_iterator<std::map<float,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<float,float>>,std::reverse_iterator<std::map<float,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<float,float>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::map<float,float>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::map<float,float>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

_QWORD *std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[18],std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,0>(_QWORD *a1, char *a2, __n128 *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(v5 + 3), a3);
  return a1;
}

void sub_2184D19BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(uint64_t a1, __n128 *a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __n128 result;
  void **v12;

  v4 = (void **)operator new();
  v5 = v4;
  *v4 = 0;
  v4[1] = 0;
  v6 = v4 + 1;
  v4[2] = 0;
  v4[3] = 0;
  *v4 = (void *)1;
  if (*v4 == (void *)1)
  {
    v7 = v4;
  }
  else
  {
    v7 = (void **)operator new();
    v8 = (uint64_t *)v5[1];
    *v7 = *v5;
    v7[2] = 0;
    v7[3] = 0;
    v7[1] = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v7 + 1, v8, (uint64_t *)v5[2], ((_BYTE *)v5[2] - (_BYTE *)v8) >> 5);
    *v7 = (void *)1;
    do
    {
      v9 = __ldaxr((unint64_t *)v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unint64_t *)v5));
    if (!v10)
    {
      v12 = v6;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v12);
      MEMORY[0x219A19A08](v5, 0x1020C405E66F15BLL);
    }
  }
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate(v7 + 1);
  result = *a2;
  *(__n128 *)(v7 + 1) = *a2;
  v7[3] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 5;
  *(_DWORD *)a1 = 0;
  return result;
}

void sub_2184D1B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  MEMORY[0x219A19A08](v11, 0x1020C405E66F15BLL);
  do
    v13 = __ldaxr((unint64_t *)v10);
  while (__stlxr(v13 - 1, (unint64_t *)v10));
  if (v10)
  {
    if (v13 == 1)
    {
      a10 = (void **)(v10 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
      MEMORY[0x219A19A08](v10, 0x1020C405E66F15BLL);
    }
  }
  _Unwind_Resume(a1);
}

void std::vector<turi::object_detection::`anonymous namespace'::precision_recall_curve>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v7 = (void *)*((_QWORD *)v4 - 6);
        if (v7)
          operator delete(v7);
        v4 -= 56;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *,false>(uint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  float v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  __n128 *v18;
  float v19;
  float v20;
  __n128 *v21;
  __n128 v22;
  float v23;
  float v24;
  __int128 v25;
  BOOL v26;
  float v27;
  unint64_t v28;
  __n128 *v29;
  float v30;
  __n128 v31;
  float v32;
  float v33;
  __int128 v34;
  __n128 *v35;
  float v36;
  __n128 v37;
  __n128 *v38;
  __n128 *v39;
  __n128 *v40;
  __n128 *v41;
  float v42;
  __n128 v43;
  __n128 v44;
  __int128 v45;
  __n128 v46;
  __int128 v47;
  __int128 v48;
  __n128 v49;
  __int128 v50;
  __int128 v51;
  __n128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __n128 *v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  float v69;
  _OWORD *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 *v76;
  __n128 *v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  __n128 v81;
  uint64_t v82;
  unint64_t v83;
  __n128 *v84;
  float v85;
  __n128 *v86;
  __n128 v87;
  uint64_t v89;
  float v90;
  __n128 *v91;
  __n128 v92;
  float v93;
  _BYTE v94[28];
  _BYTE v95[28];
  _BYTE v96[28];
  __int128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  _BYTE v102[28];
  _BYTE v103[28];
  __n128 v104;
  _BYTE v105[28];
  __int128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __int128 v111;
  __n128 v112;

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = *a2;
  v4 = *a3;
  if (*a2 <= *result)
  {
    if (v4 > v3)
    {
      v9 = *(_OWORD *)a2;
      v8 = *((_OWORD *)a2 + 1);
      v10 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v10;
      *(_OWORD *)a3 = v9;
      *((_OWORD *)a3 + 1) = v8;
      if (*a2 > *result)
      {
        v12 = *(_OWORD *)result;
        v11 = *((_OWORD *)result + 1);
        v13 = *((_OWORD *)a2 + 1);
        *(_OWORD *)result = *(_OWORD *)a2;
        *((_OWORD *)result + 1) = v13;
        *(_OWORD *)a2 = v12;
        *((_OWORD *)a2 + 1) = v11;
      }
    }
  }
  else
  {
    if (v4 <= v3)
    {
      v15 = *(_OWORD *)result;
      v14 = *((_OWORD *)result + 1);
      v16 = *((_OWORD *)a2 + 1);
      *(_OWORD *)result = *(_OWORD *)a2;
      *((_OWORD *)result + 1) = v16;
      *(_OWORD *)a2 = v15;
      *((_OWORD *)a2 + 1) = v14;
      if (*a3 <= *a2)
        return result;
      v6 = *(_OWORD *)a2;
      v5 = *((_OWORD *)a2 + 1);
      v17 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v17;
    }
    else
    {
      v6 = *(_OWORD *)result;
      v5 = *((_OWORD *)result + 1);
      v7 = *((_OWORD *)a3 + 1);
      *(_OWORD *)result = *(_OWORD *)a3;
      *((_OWORD *)result + 1) = v7;
    }
    *(_OWORD *)a3 = v6;
    *((_OWORD *)a3 + 1) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  __int128 v7;
  __n128 v8;
  __int128 v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  float v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  __n128 v34;
  __int128 v35;
  _BYTE v36[28];

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__n128 *)(a2 - 32);
      if (*(float *)(a2 - 32) > *(float *)a1)
      {
        v8 = *(__n128 *)a1;
        v7 = *(_OWORD *)(a1 + 16);
        v9 = *(_OWORD *)(a2 - 16);
        *(__n128 *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_OWORD *)(a2 - 16) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((float *)a1, (float *)(a1 + 32), (float *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a2 - 32));
      return 1;
    case 5:
      v19 = (__n128 *)(a1 + 32);
      v20 = (__n128 *)(a1 + 64);
      v21 = (__n128 *)(a1 + 96);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96));
      v23 = *(float *)(a2 - 32);
      v22 = (__n128 *)(a2 - 32);
      if (v23 > *(float *)(a1 + 96))
      {
        v25 = *v21;
        v24 = *(__n128 *)(a1 + 112);
        v26 = v22[1];
        *v21 = *v22;
        *(__n128 *)(a1 + 112) = v26;
        *v22 = v25;
        v22[1] = v24;
        if (v21->n128_f32[0] > v20->n128_f32[0])
        {
          v28 = *v20;
          v27 = *(_OWORD *)(a1 + 80);
          v29 = *(_OWORD *)(a1 + 112);
          *v20 = *v21;
          *(_OWORD *)(a1 + 80) = v29;
          *v21 = v28;
          *(_OWORD *)(a1 + 112) = v27;
          if (v20->n128_f32[0] > v19->n128_f32[0])
          {
            v31 = *v19;
            v30 = *(_OWORD *)(a1 + 48);
            v32 = *(_OWORD *)(a1 + 80);
            *v19 = *v20;
            *(_OWORD *)(a1 + 48) = v32;
            *v20 = v31;
            *(_OWORD *)(a1 + 80) = v30;
            if (*(float *)(a1 + 32) > *(float *)a1)
            {
              v34 = *(__n128 *)a1;
              v33 = *(_OWORD *)(a1 + 16);
              v35 = *(_OWORD *)(a1 + 48);
              *(__n128 *)a1 = *v19;
              *(_OWORD *)(a1 + 16) = v35;
              *v19 = v34;
              *(_OWORD *)(a1 + 48) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (float *)(a1 + 64);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((float *)a1, (float *)(a1 + 32), (float *)(a1 + 64));
      v11 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(float *)v11;
    if (*(float *)v11 > *v10)
    {
      *(_OWORD *)v36 = *(_OWORD *)(v11 + 4);
      *(_OWORD *)&v36[12] = *(_OWORD *)(v11 + 16);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 80);
        *(_OWORD *)(v16 + 96) = *(_OWORD *)(a1 + v15 + 64);
        *(_OWORD *)(v16 + 112) = v17;
        if (v15 == -64)
          break;
        v15 -= 32;
        if (v14 <= *(float *)(v16 + 32))
        {
          v18 = a1 + v15 + 96;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(float *)v18 = v14;
      *(_OWORD *)(v18 + 4) = *(_OWORD *)v36;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)&v36[12];
      if (++v13 == 8)
        return v11 + 32 == a2;
    }
    v10 = (float *)v11;
    v12 += 32;
    v11 += 32;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  __n128 result;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::object_detection::average_precision_calculator::evaluate_class(unsigned long)::$_0 &,turi::object_detection::average_precision_calculator::prediction *>((float *)a1, (float *)a2, (float *)a3);
  result.n128_u32[0] = a4->n128_u32[0];
  if (a4->n128_f32[0] > a3->n128_f32[0])
  {
    v9 = *a3;
    result = a3[1];
    v10 = a4[1];
    *a3 = *a4;
    a3[1] = v10;
    *a4 = v9;
    a4[1] = result;
    result.n128_u32[0] = a3->n128_u32[0];
    if (a3->n128_f32[0] > a2->n128_f32[0])
    {
      v11 = *a2;
      result = a2[1];
      v12 = a3[1];
      *a2 = *a3;
      a2[1] = v12;
      *a3 = v11;
      a3[1] = result;
      result.n128_u32[0] = a2->n128_u32[0];
      if (a2->n128_f32[0] > a1->n128_f32[0])
      {
        v13 = *a1;
        result = a1[1];
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        *a2 = v13;
        a2[1] = result;
      }
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<float,float>,std::__map_value_compare<float,std::__value_type<float,float>,std::less<float>,true>,std::allocator<std::__value_type<float,float>>>::__emplace_unique_key_args<float,float &,float>(uint64_t **a1, float *a2, _DWORD *a3, int *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  float v9;
  uint64_t **v10;
  float v11;
  uint64_t *v12;
  int v13;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = *((float *)v7 + 7);
        if (v9 >= v11)
          break;
        v7 = (uint64_t *)*v7;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = (uint64_t *)v7[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)operator new(0x28uLL);
    v13 = *a4;
    *((_DWORD *)v12 + 7) = *a3;
    *((_DWORD *)v12 + 8) = v13;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t _GLOBAL__sub_I_od_evaluation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_od_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184D2A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_15_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_od_serialization_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_od_yolo_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184D2DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_11()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184D30C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_35()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_one_shot_object_detector_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_parameter_sampler_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double _GLOBAL__sub_I_superposition_cpp()
{
  double result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  RGB_WHITE = -1;
  byte_254FF51C0 = -1;
  result = 7.29111856e-304;
  RGBA_WHITE = 0xFFFFFF;
  return result;
}

CoreML::Model *CoreML::DictVectorizer::DictVectorizer(CoreML::Model *a1, const std::string *a2)
{
  CoreML::Model *v3;
  uint64_t v4;
  CoreML::Specification::DictVectorizer *v5;

  v3 = CoreML::Model::Model(a1, a2);
  *(_QWORD *)v3 = &off_24D945798;
  v4 = *((_QWORD *)v3 + 1);
  if (*(_DWORD *)(v4 + 44) != 603)
  {
    CoreML::Specification::Model::clear_Type(*((_QWORD *)v3 + 1));
    *(_DWORD *)(v4 + 44) = 603;
    v5 = (CoreML::Specification::DictVectorizer *)operator new();
    CoreML::Specification::DictVectorizer::DictVectorizer(v5);
    *(_QWORD *)(v4 + 32) = v5;
  }
  return a1;
}

void sub_2184D3354(_Unwind_Exception *a1)
{
  CoreML::Model *v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C406A65A86DLL);
  CoreML::Model::~Model(v1);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::DictVectorizer::addInput@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, const CoreML::Specification::FeatureType **a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t i;
  CoreML::Result *result;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const CoreML::Specification::FeatureType *v29;
  std::__shared_weak_count *v30;
  const CoreML::Specification::FeatureType *v31;
  std::__shared_weak_count *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void **v36;
  char v37;
  uint64_t v38[2];
  uint64_t v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  CoreML::FeatureType::Dictionary(2, v38);
  CoreML::FeatureType::Dictionary(1, v39);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = (void **)&v33;
  v37 = 0;
  v8 = operator new(0x20uLL);
  v9 = 0;
  v33 = v8;
  v34 = v8;
  v35 = v8 + 4;
  do
  {
    v10 = &v38[2 * v9];
    v12 = *v10;
    v11 = v10[1];
    *v8 = v12;
    v8[1] = v11;
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ++v9;
    v8 += 2;
  }
  while (v9 != 2);
  v34 = v8;
  v15 = (std::__shared_weak_count *)a3[1];
  v31 = *a3;
  v32 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  CoreML::Model::enforceTypeInvariant((uint64_t *)&v33, (CoreML::FeatureType *)&v31, (CoreML::Result *)a4);
  v18 = v32;
  if (v32)
  {
    v19 = (unint64_t *)&v32->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v36 = (void **)&v33;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v36);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v38[i]);
  result = (CoreML::Result *)CoreML::Result::good((CoreML::Result *)a4);
  if ((_DWORD)result)
  {
    if (*(char *)(a4 + 31) < 0)
      operator delete(*(void **)(a4 + 8));
    v23 = (std::__shared_weak_count *)a3[1];
    v29 = *a3;
    v30 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    CoreML::Model::addInput(a1, a2, &v29, (CoreML::Result *)a4);
    v26 = v30;
    if (v30)
    {
      v27 = (unint64_t *)&v30->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    result = (CoreML::Result *)CoreML::Result::good((CoreML::Result *)a4);
    if ((_DWORD)result)
    {
      if (*(char *)(a4 + 31) < 0)
        operator delete(*(void **)(a4 + 8));
      return CoreML::Result::Result((CoreML::Result *)a4);
    }
  }
  return result;
}

void sub_2184D35BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::DictVectorizer::setFeatureEncoding@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  CoreML::Specification::Int64Vector *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 44) == 603)
  {
    v6 = *(_QWORD *)(v5 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v5 + 44) = 603;
    v6 = operator new();
    CoreML::Specification::DictVectorizer::DictVectorizer((CoreML::Specification::DictVectorizer *)v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  if (*(_DWORD *)(v6 + 28) == 2)
  {
    v7 = *(CoreML::Specification::Int64Vector **)(v6 + 16);
  }
  else
  {
    CoreML::Specification::V5::Dimension::clear_dimension(v6);
    *(_DWORD *)(v6 + 28) = 2;
    v7 = (CoreML::Specification::Int64Vector *)operator new();
    CoreML::Specification::Int64Vector::Int64Vector(v7);
    *(_QWORD *)(v6 + 16) = v7;
  }
  *((_DWORD *)v7 + 4) = 0;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      v10 = *v8;
      if (*(_DWORD *)(v6 + 28) == 2)
      {
        v11 = *(_QWORD *)(v6 + 16);
      }
      else
      {
        CoreML::Specification::V5::Dimension::clear_dimension(v6);
        *(_DWORD *)(v6 + 28) = 2;
        v11 = operator new();
        CoreML::Specification::Int64Vector::Int64Vector((CoreML::Specification::Int64Vector *)v11);
        *(_QWORD *)(v6 + 16) = v11;
      }
      v12 = *(_DWORD *)(v11 + 16);
      if (v12 == *(_DWORD *)(v11 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v11 + 16), v12 + 1);
        v12 = *(_DWORD *)(v11 + 16);
      }
      v13 = *(_QWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 16) = v12 + 1;
      *(_QWORD *)(v13 + 8 * v12 + 8) = v10;
      ++v8;
    }
    while (v8 != v9);
  }
  return CoreML::Result::Result(a3);
}

void sub_2184D37B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::DictVectorizer::setFeatureEncoding@<X0>(uint64_t a1@<X0>, __int128 **a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  CoreML::Specification::StringVector *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  _tc_google::protobuf::Arena **v12;
  int *v13;
  uint64_t v14;
  int v15;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v17;
  uint64_t v18;
  uint64_t v19;
  std::string __p;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v5 + 44) == 603)
  {
    v6 = *(_QWORD *)(v5 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v5 + 44) = 603;
    v6 = operator new();
    CoreML::Specification::DictVectorizer::DictVectorizer((CoreML::Specification::DictVectorizer *)v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  if (*(_DWORD *)(v6 + 28) == 1)
  {
    v7 = *(CoreML::Specification::StringVector **)(v6 + 16);
  }
  else
  {
    CoreML::Specification::V5::Dimension::clear_dimension(v6);
    *(_DWORD *)(v6 + 28) = 1;
    v7 = (CoreML::Specification::StringVector *)operator new();
    CoreML::Specification::StringVector::StringVector(v7);
    *(_QWORD *)(v6 + 16) = v7;
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v7 + 16);
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    while (1)
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v10 = *v8;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      if (*(_DWORD *)(v6 + 28) == 1)
      {
        v11 = *(_QWORD *)(v6 + 16);
      }
      else
      {
        CoreML::Specification::V5::Dimension::clear_dimension(v6);
        *(_DWORD *)(v6 + 28) = 1;
        v11 = operator new();
        CoreML::Specification::StringVector::StringVector((CoreML::Specification::StringVector *)v11);
        *(_QWORD *)(v6 + 16) = v11;
      }
      v12 = (_tc_google::protobuf::Arena **)(v11 + 16);
      v13 = *(int **)(v11 + 32);
      if (!v13)
        break;
      v14 = *(int *)(v11 + 24);
      v15 = *v13;
      if ((int)v14 < *v13)
      {
        *(_DWORD *)(v11 + 24) = v14 + 1;
        Aligned = *(std::string **)&v13[2 * v14 + 2];
        goto LABEL_24;
      }
      if (v15 == *(_DWORD *)(v11 + 28))
        goto LABEL_19;
LABEL_20:
      *v13 = v15 + 1;
      v17 = *v12;
      if (*v12)
      {
        Aligned->__r_.__value_.__r.__words[0] = 0;
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        Aligned = (std::string *)operator new();
        Aligned->__r_.__value_.__r.__words[0] = 0;
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
      }
      v18 = *(_QWORD *)(v11 + 32);
      v19 = *(int *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v19 + 1;
      *(_QWORD *)(v18 + 8 * v19 + 8) = Aligned;
LABEL_24:
      std::string::operator=(Aligned, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 = (__int128 *)((char *)v8 + 24);
      if (v8 == v9)
        return CoreML::Result::Result(a3);
    }
    v15 = *(_DWORD *)(v11 + 28);
LABEL_19:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v11 + 16), v15 + 1);
    v13 = *(int **)(v11 + 32);
    v15 = *v13;
    goto LABEL_20;
  }
  return CoreML::Result::Result(a3);
}

void sub_2184D3A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x219A19A08](v14, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_DictVectorizer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184D3CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_14_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_12()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184D3FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_51()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_fp_growth_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::pattern_mining::INDEX_COLUMN, "__INTERNAL__INDEX__");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::pattern_mining::INDEX_COLUMN, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::pattern_mining::INTERNAL_COLUMN_PREFIX, "__INTERNAL__");
  return __cxa_atexit(v0, turi::pattern_mining::INTERNAL_COLUMN_PREFIX, &dword_217E69000);
}

void turi::save_float_array_map(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  const void **v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  const void **v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;

  v2 = a2;
  v26 = 0;
  v27 = 0;
  v25 = (const void **)&v26;
  v3 = a1 + 1;
  v4 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
  {
    v18 = 0;
    v17 = (const void **)&v26;
  }
  else
  {
    do
    {
      v6 = v4[8];
      v5 = v4[9];
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v20 = *((_OWORD *)v4 + 5);
      v21 = *((_OWORD *)v4 + 6);
      *(_QWORD *)&v22 = v6;
      *((_QWORD *)&v22 + 1) = v5;
      v23 = v20;
      v24 = v21;
      v28 = (__int128 *)(v4 + 4);
      v9 = std::__tree<std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::float_array_serialization_wrapper>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v25, (const void **)v4 + 4, (uint64_t)&std::piecewise_construct, &v28);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v9 + 8), &v22);
      v10 = v24;
      *((_OWORD *)v9 + 5) = v23;
      *((_OWORD *)v9 + 6) = v10;
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      if (*((_QWORD *)&v22 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = (_QWORD *)v4[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v4[2];
          v16 = *v15 == (_QWORD)v4;
          v4 = v15;
        }
        while (!v16);
      }
      v4 = v15;
    }
    while (v15 != v3);
    v17 = v25;
    v18 = v27;
    v2 = a2;
  }
  turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::__tree_node<std::__value_type<std::string,turi::float_array_serialization_wrapper>,void *> *,long>>>(v2, v17, (const void **)&v26, v18);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v25, v26);
}

void sub_2184D437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,_QWORD *a26)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

void turi::load_float_array_map(turi *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v5;
  uint64_t *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  _QWORD **v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 *v14;

  v12 = 0;
  v13 = 0;
  v11 = &v12;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v11, 0);
  v12 = 0;
  v13 = 0;
  v11 = &v12;
  turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::float_array_serialization_wrapper>,std::insert_iterator<std::map<std::string,turi::float_array_serialization_wrapper>>>(this, (uint64_t)&v11, (uint64_t)&v12);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v5 = v11;
  if (v11 != &v12)
  {
    do
    {
      v14 = (__int128 *)(v5 + 4);
      v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v5 + 4, (uint64_t)&std::piecewise_construct, &v14);
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v6 + 8, (uint64_t *)v5 + 8);
      v7 = *((_OWORD *)v5 + 6);
      *((_OWORD *)v6 + 5) = *((_OWORD *)v5 + 5);
      *((_OWORD *)v6 + 6) = v7;
      v8 = v5[1];
      if (v8)
      {
        do
        {
          v9 = (_QWORD **)v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD **)v5[2];
          v10 = *v9 == v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != &v12);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v11, v12);
}

void sub_2184D44BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::float_array_serialization_wrapper>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::float_array_serialization_wrapper>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::float_array_serialization_wrapper>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::float_array_serialization_wrapper>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2184D45E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::float_array_serialization_wrapper>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  this[3].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)&this[1]);
  return this;
}

void sub_2184D465C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::__tree_node<std::__value_type<std::string,turi::float_array_serialization_wrapper>,void *> *,long>>>(uint64_t a1, const void **a2, const void **a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  const void **v11;
  const void **v12;
  BOOL v13;
  size_t v14;
  uint64_t *v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;

  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v9)
    {
      v14 = 2 * v9 + 16;
      *(_QWORD *)(a1 + 40) = v14;
      v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        result = *v15;
        v16 = v15[1] - *v15;
        v17 = v14 >= v16;
        v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = result + v14;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = a4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, a2 + 4);
      result = turi::float_array_serialization_wrapper::save((turi::float_array_serialization_wrapper *)(a2 + 7), (turi::oarchive *)a1);
      v11 = (const void **)a2[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const void **)a2[2];
          v13 = *v12 == a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  return result;
}

uint64_t turi::float_array_serialization_wrapper::save(turi::float_array_serialization_wrapper *this, turi::oarchive *a2)
{
  _DWORD *v4;
  uint64_t v5;

  turi::serialize_iterator<turi::oarchive,unsigned long const*>((uint64_t)a2, *((_QWORD **)this + 4), (_QWORD *)(*((_QWORD *)this + 4) + 8 * *((_QWORD *)this + 5)), *((_QWORD *)this + 5));
  v4 = (_DWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1))
                + 4 * *((_QWORD *)this + 3));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  return turi::serialize_iterator<turi::oarchive,float const*>((uint64_t)a2, v4, (_DWORD *)(v5 + 4 * *((_QWORD *)this + 3) + 4 * *((_QWORD *)this + 6)), *((_QWORD *)this + 6));
}

uint64_t turi::serialize_iterator<turi::oarchive,unsigned long const*>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t *v13;
  size_t v14;
  BOOL v15;
  std::vector<char>::size_type v16;
  size_t v17;
  uint64_t *v18;
  size_t v19;
  BOOL v20;
  std::vector<char>::size_type v21;

  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v9)
    {
      v17 = 2 * v9 + 16;
      *(_QWORD *)(a1 + 40) = v17;
      v18 = *(uint64_t **)(a1 + 16);
      if (v18)
      {
        result = *v18;
        v19 = v18[1] - *v18;
        v20 = v17 >= v19;
        v21 = v17 - v19;
        if (v21 != 0 && v20)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v21);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v20)
        {
          v18[1] = result + v17;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v17, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = a4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      if (*(_QWORD *)a1)
      {
        result = std::ostream::write();
      }
      else
      {
        v11 = *(_QWORD *)(a1 + 40);
        if (*(_QWORD *)(a1 + 32) + 8 > v11)
        {
          v12 = 2 * v11 + 16;
          *(_QWORD *)(a1 + 40) = v12;
          v13 = *(uint64_t **)(a1 + 16);
          if (v13)
          {
            result = *v13;
            v14 = v13[1] - *v13;
            v15 = v12 >= v14;
            v16 = v12 - v14;
            if (v16 != 0 && v15)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v16);
              result = **(_QWORD **)(a1 + 16);
            }
            else if (!v15)
            {
              v13[1] = result + v12;
            }
          }
          else
          {
            result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v12, 0xF6EA6B1uLL);
          }
          *(_QWORD *)(a1 + 24) = result;
        }
        else
        {
          result = *(_QWORD *)(a1 + 24);
        }
        *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = *a2;
        *(_QWORD *)(a1 + 32) += 8;
      }
      ++v10;
      ++a2;
    }
    while (a2 != a3);
  }
  if (v10 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  return result;
}

uint64_t turi::serialize_iterator<turi::oarchive,float const*>(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t *v13;
  size_t v14;
  BOOL v15;
  std::vector<char>::size_type v16;
  size_t v17;
  uint64_t *v18;
  size_t v19;
  BOOL v20;
  std::vector<char>::size_type v21;

  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v9)
    {
      v17 = 2 * v9 + 16;
      *(_QWORD *)(a1 + 40) = v17;
      v18 = *(uint64_t **)(a1 + 16);
      if (v18)
      {
        result = *v18;
        v19 = v18[1] - *v18;
        v20 = v17 >= v19;
        v21 = v17 - v19;
        if (v21 != 0 && v20)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v21);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v20)
        {
          v18[1] = result + v17;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v17, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = a4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      if (*(_QWORD *)a1)
      {
        result = std::ostream::write();
      }
      else
      {
        v11 = *(_QWORD *)(a1 + 40);
        if (*(_QWORD *)(a1 + 32) + 4 > v11)
        {
          v12 = 2 * v11 + 8;
          *(_QWORD *)(a1 + 40) = v12;
          v13 = *(uint64_t **)(a1 + 16);
          if (v13)
          {
            result = *v13;
            v14 = v13[1] - *v13;
            v15 = v12 >= v14;
            v16 = v12 - v14;
            if (v16 != 0 && v15)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v16);
              result = **(_QWORD **)(a1 + 16);
            }
            else if (!v15)
            {
              v13[1] = result + v12;
            }
          }
          else
          {
            result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v12, 0xF6EA6B1uLL);
          }
          *(_QWORD *)(a1 + 24) = result;
        }
        else
        {
          result = *(_QWORD *)(a1 + 24);
        }
        *(_DWORD *)(result + *(_QWORD *)(a1 + 32)) = *a2;
        *(_QWORD *)(a1 + 32) += 4;
      }
      ++v10;
      ++a2;
    }
    while (a2 != a3);
  }
  if (v10 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  return result;
}

void turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::float_array_serialization_wrapper>,std::insert_iterator<std::map<std::string,turi::float_array_serialization_wrapper>>>(turi::iarchive *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string __p;
  void *v15;
  std::__shared_weak_count *v16;
  std::string v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  _QWORD v21[2];

  v21[0] = a2;
  v21[1] = a3;
  v20 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v6 = *(_QWORD *)(v4 + v5);
    v20 = v6;
    *((_QWORD *)a1 + 3) = v5 + 8;
    if (v6)
    {
      v7 = 0;
      do
      {
        std::pair<std::string,turi::float_array_serialization_wrapper>::pair[abi:ne180100]<true,0>(&v17);
        turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a1, &v17);
        turi::float_array_serialization_wrapper::load((turi::float_array_serialization_wrapper *)&v18, a1);
        std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100](&__p, (__int128 *)&v17);
        std::insert_iterator<std::map<std::string,turi::float_array_serialization_wrapper>>::operator=[abi:ne180100]((uint64_t)v21, (const void **)&__p.__r_.__value_.__l.__data_);
        v15 = &unk_24D9175B8;
        v8 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v18 = &unk_24D9175B8;
        v11 = v19;
        if (v19)
        {
          v12 = (unint64_t *)&v19->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        ++v7;
      }
      while (v7 < v20);
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_2184D4D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::pair<std::string const,turi::neural_net::shared_float_array>::~pair((uint64_t)va);
  std::pair<std::string const,turi::neural_net::shared_float_array>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::insert_iterator<std::map<std::string,turi::float_array_serialization_wrapper>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::float_array_serialization_wrapper>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::float_array_serialization_wrapper>>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (__int128 *)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

_OWORD *std::pair<std::string,turi::float_array_serialization_wrapper>::pair[abi:ne180100]<true,0>(_OWORD *a1)
{
  a1[4] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)((char *)a1 + 24));
  return a1;
}

void sub_2184D4E4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void turi::float_array_serialization_wrapper::load(turi::float_array_serialization_wrapper *this, turi::iarchive *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  void *__p[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  void *v11;
  __int128 v12[3];
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v15 = 0uLL;
  v16 = 0;
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,unsigned long,true>::exec((uint64_t)a2, &v15);
  v13 = 0uLL;
  v14 = 0;
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,float,true>::exec((uint64_t)a2, &v13);
  *(_OWORD *)v9 = v13;
  v10 = v14;
  v13 = 0uLL;
  v14 = 0;
  *(_OWORD *)__p = v15;
  v8 = v16;
  v15 = 0uLL;
  v16 = 0;
  turi::neural_net::shared_float_array::wrap((uint64_t)v9, (uint64_t)__p, (uint64_t)&v11);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)this + 8, v12);
  *(_OWORD *)((char *)this + 24) = v12[1];
  *(_OWORD *)((char *)this + 40) = v12[2];
  v11 = &unk_24D9175B8;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v12[0] + 1);
  if (*((_QWORD *)&v12[0] + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v12[0] + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  if ((_QWORD)v13)
  {
    *((_QWORD *)&v13 + 1) = v13;
    operator delete((void *)v13);
  }
  if ((_QWORD)v15)
  {
    *((_QWORD *)&v15 + 1) = v15;
    operator delete((void *)v15);
  }
}

void sub_2184D4FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;
  void *v17;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  v16 = *(void **)(v14 - 80);
  if (v16)
  {
    *(_QWORD *)(v14 - 72) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(v14 - 48);
  if (v17)
  {
    *(_QWORD *)(v14 - 40) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive,float,true>::exec(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  uint64_t v9;
  void *result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = 0;
  }
  a2[1] = *a2;
  std::vector<float>::resize((uint64_t)a2, v6);
  v7 = (void *)*a2;
  v8 = a2[1] - *a2;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return (void *)std::istream::read();
  result = memcpy(v7, (const void *)(v9 + *(_QWORD *)(a1 + 24)), v8);
  *(_QWORD *)(a1 + 24) += v8;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::float_array_serialization_wrapper>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::float_array_serialization_wrapper>>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::float_array_serialization_wrapper>>>::__construct_node<std::pair<std::string const,turi::float_array_serialization_wrapper>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::float_array_serialization_wrapper>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::float_array_serialization_wrapper>>>::__construct_node<std::pair<std::string const,turi::float_array_serialization_wrapper>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::float_array_serialization_wrapper>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2184D5194(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::float_array_serialization_wrapper>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D9175B8;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = a2[2];
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v5 = a2[4];
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v5;
  return this;
}

uint64_t _GLOBAL__sub_I_float_array_serialization_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_fp_node_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_fp_results_tree_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_fp_tree_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_fp_tree_header_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_rule_mining_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184D5520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_13()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t std::iota[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,int>(uint64_t result, uint64_t a2, int a3)
{
  void **v3;
  void **v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  void *v36;
  void **v37[9];

  if (result != a2)
  {
    v37[7] = v3;
    v37[8] = v4;
    v6 = result;
    v7 = a3;
    do
    {
      switch(*(_BYTE *)(v6 + 12))
      {
        case 2:
          v8 = *(unint64_t **)v6;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            v11 = *(unint64_t **)v6;
            if (*(_QWORD *)v6)
            {
              if (*((char *)v11 + 31) < 0)
                operator delete((void *)v11[1]);
              v12 = v11;
              v13 = 0x1012C404EF22A49;
              goto LABEL_44;
            }
          }
          break;
        case 3:
          v14 = *(unint64_t **)v6;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            v17 = *(unint64_t **)v6;
            if (*(_QWORD *)v6)
            {
              v18 = (void *)v17[1];
              if (v18)
              {
                v17[2] = (unint64_t)v18;
                operator delete(v18);
              }
              v12 = v17;
              v13 = 0x1080C409938AC02;
              goto LABEL_44;
            }
          }
          break;
        case 4:
          v19 = *(unint64_t **)v6;
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = *(unint64_t **)v6;
            if (*(_QWORD *)v6)
            {
              v37[0] = (void **)(v22 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v37);
              goto LABEL_28;
            }
          }
          break;
        case 5:
          v23 = *(unint64_t **)v6;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v22 = *(unint64_t **)v6;
            if (*(_QWORD *)v6)
            {
              v37[0] = (void **)(v22 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v37);
LABEL_28:
              v12 = v22;
              v13 = 0x1020C405E66F15BLL;
              goto LABEL_44;
            }
          }
          break;
        case 8:
          v26 = *(unint64_t **)v6;
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            v29 = *(unint64_t **)v6;
            if (*(_QWORD *)v6)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v29 + 2);
              v12 = v29;
              v30 = -235920773;
              goto LABEL_43;
            }
          }
          break;
        case 9:
          v31 = *(unint64_t **)v6;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v34 = *(unint64_t **)v6;
            if (*(_QWORD *)v6)
            {
              v35 = (void *)v34[6];
              if (v35)
              {
                v34[7] = (unint64_t)v35;
                operator delete(v35);
              }
              v36 = (void *)v34[3];
              if (v36)
              {
                v34[4] = (unint64_t)v36;
                operator delete(v36);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v34 + 1));
              v12 = v34;
              v30 = 2071181815;
LABEL_43:
              v13 = v30 | 0x1030C4000000000;
LABEL_44:
              result = MEMORY[0x219A19A08](v12, v13);
            }
          }
          break;
        default:
          break;
      }
      *(_DWORD *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 12) = 0;
      *(_QWORD *)v6 = v7;
      v6 += 16;
      ++v7;
    }
    while (v6 != a2);
  }
  return result;
}

void sub_2184D5A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_36()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sparse_nn_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184D5D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_14()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184D6070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  std::bad_alloc *exception;
  std::bad_alloc *v5;

  v3 = result;
  if (result[1] != a2)
  {
    free((void *)*result);
    if (a2)
    {
      if (a2 >> 62 || (result = malloc_type_malloc(4 * a2, 0x1E76AA36uLL)) == 0)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v5 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v5, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
    }
    else
    {
      result = 0;
    }
    *v3 = result;
  }
  v3[1] = a2;
  return result;
}

void __cxx_global_var_init_61()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_factorization_models_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184D6400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_51_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_52()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD4D38 = 0;
    unk_254FD4D28 = 0u;
    unk_254FD4D18 = 0u;
    unk_254FD4D08 = 0u;
    unk_254FD4CF8 = 0u;
    qword_254FD4CF0 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_itemcf_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184D67BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_17_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_18_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD4D38 = 0;
    unk_254FD4D28 = 0u;
    unk_254FD4D18 = 0u;
    unk_254FD4D08 = 0u;
    unk_254FD4CF8 = 0u;
    qword_254FD4CF0 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_popularity_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/ItemSimilarityRecommender.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_ItemSimilarityRecommender_ConnectedItem_default_instance_ = (uint64_t)&off_24D9457E0;
  unk_254FFB6C0 = 0;
  qword_254FFB6C8 = 0;
  unk_254FFB6D0 = 0;
  dword_254FFB6D8 = 0;
  byte_254FFB6E0 = 1;
  CoreML::Specification::_ItemSimilarityRecommender_SimilarItems_default_instance_ = (uint64_t)&off_24D945878;
  result = 0.0;
  unk_254FFB6F0 = 0u;
  unk_254FFB700 = 0u;
  unk_254FFB710 = 0u;
  dword_254FFB720 = 0;
  byte_254FFB728 = 1;
  CoreML::Specification::_ItemSimilarityRecommender_default_instance_ = (uint64_t)&off_24D945910;
  unk_254FFB738 = 0u;
  unk_254FFB748 = 0u;
  qword_254FFB758 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFB760 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FFB768 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFB770 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FFB778 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFB780 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FFB798 = 0;
  byte_254FFB7A0 = 1;
  qword_254FFB788 = (uint64_t)&CoreML::Specification::_StringVector_default_instance_;
  unk_254FFB790 = &CoreML::Specification::_Int64Vector_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2184D6B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::ItemSimilarityRecommender_ConnectedItem(CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *this)
{
  *(_QWORD *)this = &off_24D9457E0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *)&CoreML::Specification::_ItemSimilarityRecommender_ConnectedItem_default_instance_)
    CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_2184D6B80(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::~ItemSimilarityRecommender_ConnectedItem(CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *this)
{
  *(_QWORD *)this = &off_24D9457E0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D9457E0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::New(CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *v3;

  v3 = (CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *)operator new();
  CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::ItemSimilarityRecommender_ConnectedItem(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>(a2, v3);
  return v3;
}

void sub_2184D6C58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>);
  return result;
}

uint64_t CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

BOOL CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::MergePartialFromCodedStream(CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  BOOL v13;
  char v14;
  _BOOL8 result;
  unint64_t v16;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          v6 = 0;
LABEL_6:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 17)
          goto LABEL_20;
        v16 = 0;
        v11 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v16);
          if (!result)
            return result;
          v12 = v16;
        }
        else
        {
          v12 = *v11;
          *a2 = (char *)(v11 + 1);
        }
        *((_QWORD *)this + 3) = v12;
      }
      if (v7 >> 3 != 1 || v7 != 8)
        break;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        *((_QWORD *)this + 2) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v14 & 1) == 0)
          return 0;
      }
      else
      {
        *((_QWORD *)this + 2) = *v10;
        *a2 = v10 + 1;
      }
    }
LABEL_20:
    if ((_DWORD)v7)
      v13 = (v7 & 7) == 4;
    else
      v13 = 1;
    if (v13)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  double v7;

  v5 = this;
  v6 = *(_QWORD *)(this + 16);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = *(double *)(v5 + 24);
  if (v7 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v7, a3);
  return this;
}

unint64_t CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::ByteSizeLong(CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *((_QWORD *)this + 2);
  v2 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (*((double *)this + 3) != 0.0)
    v3 += 9;
  *((_DWORD *)this + 8) = v3;
  return v3;
}

uint64_t CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::IsInitialized(CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ItemSimilarityRecommender.ConnectedItem");
}

CoreML::Specification::ItemSimilarityRecommender_SimilarItems *CoreML::Specification::ItemSimilarityRecommender_SimilarItems::ItemSimilarityRecommender_SimilarItems(CoreML::Specification::ItemSimilarityRecommender_SimilarItems *this)
{
  *(_QWORD *)this = &off_24D945878;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ItemSimilarityRecommender_SimilarItems *)&CoreML::Specification::_ItemSimilarityRecommender_SimilarItems_default_instance_)
    CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(this);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  return this;
}

void sub_2184D6EF8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ItemSimilarityRecommender_SimilarItems::~ItemSimilarityRecommender_SimilarItems(CoreML::Specification::ItemSimilarityRecommender_SimilarItems *this)
{
  *(_QWORD *)this = &off_24D945878;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems::~ItemSimilarityRecommender_SimilarItems(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ItemSimilarityRecommender_SimilarItems *CoreML::Specification::ItemSimilarityRecommender_SimilarItems::New(CoreML::Specification::ItemSimilarityRecommender_SimilarItems *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems *v3;

  v3 = (CoreML::Specification::ItemSimilarityRecommender_SimilarItems *)operator new();
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems::ItemSimilarityRecommender_SimilarItems(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>(a2, v3);
  return v3;
}

void sub_2184D6FD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407C6D6C37);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>);
  return result;
}

uint64_t CoreML::Specification::ItemSimilarityRecommender_SimilarItems::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

BOOL CoreML::Specification::ItemSimilarityRecommender_SimilarItems::MergePartialFromCodedStream(CoreML::Specification::ItemSimilarityRecommender_SimilarItems *this, char **a2, unsigned int a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  unsigned int v10;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *v15;
  char *v16;
  int VarintSizeAsIntFallback;
  BOOL v18;
  char v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  _BOOL8 result;
  unint64_t v24;

  v5 = (char *)this + 16;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_26:
          if ((_DWORD)v8)
            v18 = (v8 & 7) == 4;
          else
            v18 = 1;
          if (v18)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_26;
LABEL_8:
        v10 = v8 >> 3;
        if (v8 >> 3 != 3)
          break;
        if (v8 != 25)
          goto LABEL_26;
        v24 = 0;
        v13 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v24);
          if (!result)
            return result;
          v14 = v24;
        }
        else
        {
          v14 = *v13;
          *a2 = (char *)(v13 + 1);
        }
        *((_QWORD *)this + 6) = v14;
      }
      if (v10 == 2)
        break;
      if (v10 != 1 || v8 != 8)
        goto LABEL_26;
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        *((_QWORD *)this + 5) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v19 & 1) == 0)
          return 0;
      }
      else
      {
        *((_QWORD *)this + 5) = *v12;
        *a2 = v12 + 1;
      }
    }
    if (v8 != 18)
      goto LABEL_26;
    v15 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>::TypeHandler>((uint64_t)v5);
    v16 = *a2;
    if (*a2 >= a2[1] || *v16 < 0)
    {
      VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (VarintSizeAsIntFallback < 0)
        return 0;
    }
    else
    {
      VarintSizeAsIntFallback = *v16;
      *a2 = v16 + 1;
    }
    v20 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
    if ((v20 & 0x8000000000000000) != 0)
      break;
    v22 = v20;
    result = CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::MergePartialFromCodedStream(v15, a2, v21);
    if (!result)
      return result;
  }
  while (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22));
  return 0;
}

uint64_t CoreML::Specification::ItemSimilarityRecommender_SimilarItems::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  int i;
  double v9;

  v5 = this;
  v6 = *(_QWORD *)(this + 40);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = *(_DWORD *)(v5 + 24);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v9 = *(double *)(v5 + 48);
  if (v9 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)3, a2, v9, a3);
  return this;
}

uint64_t CoreML::Specification::ItemSimilarityRecommender_SimilarItems::ByteSizeLong(CoreML::Specification::ItemSimilarityRecommender_SimilarItems *this)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_DWORD *)this + 6);
  if (v1)
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 4);
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v2 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = (9 * (__clz(v6 | 1) ^ 0x3F) + 73) >> 6;
      if (v6)
        v8 = v7 + 1;
      else
        v8 = 0;
      if (*(double *)(v5 + 24) != 0.0)
        v8 += 9;
      *(_DWORD *)(v5 + 32) = v8;
      v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v2;
    }
    while (v1 != v2);
  }
  else
  {
    v4 = 0;
  }
  v9 = *((_QWORD *)this + 5);
  v10 = v4 + ((9 * (__clz(v9 | 1) ^ 0x3F) + 73) >> 6);
  if (v9)
    v4 = v10 + 1;
  if (*((double *)this + 6) != 0.0)
    v4 += 9;
  *((_DWORD *)this + 14) = v4;
  return v4;
}

std::string *CoreML::Specification::ItemSimilarityRecommender_SimilarItems::MergeFrom(std::string *this, const CoreML::Specification::ItemSimilarityRecommender_SimilarItems *a2)
{
  std::string *v3;
  uint64_t v4;
  signed int v5;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **v6;
  unsigned int *v7;
  int v8;
  int *size;
  std::string::size_type v10;
  double v11;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 6));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  v10 = *((_QWORD *)a2 + 5);
  if (v10)
    v3[1].__r_.__value_.__r.__words[2] = v10;
  v11 = *((double *)a2 + 6);
  if (v11 != 0.0)
    *(double *)&v3[2].__r_.__value_.__l.__data_ = v11;
  return this;
}

uint64_t CoreML::Specification::ItemSimilarityRecommender_SimilarItems::IsInitialized(CoreML::Specification::ItemSimilarityRecommender_SimilarItems *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ItemSimilarityRecommender_SimilarItems::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ItemSimilarityRecommender.SimilarItems");
}

CoreML::Specification::ItemSimilarityRecommender *CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender(CoreML::Specification::ItemSimilarityRecommender *this)
{
  *(_QWORD *)this = &off_24D945910;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ItemSimilarityRecommender *)&CoreML::Specification::_ItemSimilarityRecommender_default_instance_)
    CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(this);
  *((_QWORD *)this + 5) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  return this;
}

void sub_2184D74D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::ItemSimilarityRecommender *CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender(CoreML::Specification::ItemSimilarityRecommender *this, const CoreML::Specification::ItemSimilarityRecommender *a2)
{
  uint64_t *v4;
  std::string *v5;
  signed int v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CoreML::Specification::StringVector *v25;
  CoreML::Specification::Int64Vector *v26;

  *(_QWORD *)this = &off_24D945910;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (std::string *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 4);
    v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ItemSimilarityRecommender *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>::TypeHandler>(v5, (std::string **)v8, (CoreML::Specification::ItemSimilarityRecommender_SimilarItems **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    v10 = (int *)*((_QWORD *)this + 4);
    if (*v10 < v9)
      *v10 = v9;
  }
  *((_DWORD *)this + 26) = 0;
  v11 = *((_QWORD *)a2 + 1);
  if ((v11 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v11 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 5) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v12 = *((_QWORD *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  if ((uint64_t *)v12 != &_tc_google::protobuf::internal::fixed_address_empty_string && v13 != 0)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v12);
  *((_QWORD *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v15 = *((_QWORD *)a2 + 6);
  if (*(char *)(v15 + 23) < 0)
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = *(unsigned __int8 *)(v15 + 23);
  if ((uint64_t *)v15 != &_tc_google::protobuf::internal::fixed_address_empty_string && v16)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v15);
  *((_QWORD *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v17 = *((_QWORD *)a2 + 7);
  if (*(char *)(v17 + 23) < 0)
    v18 = *(_QWORD *)(v17 + 8);
  else
    v18 = *(unsigned __int8 *)(v17 + 23);
  if ((uint64_t *)v17 != &_tc_google::protobuf::internal::fixed_address_empty_string && v18)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v17);
  *((_QWORD *)this + 8) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v19 = *((_QWORD *)a2 + 8);
  if (*(char *)(v19 + 23) < 0)
    v20 = *(_QWORD *)(v19 + 8);
  else
    v20 = *(unsigned __int8 *)(v19 + 23);
  if ((uint64_t *)v19 != &_tc_google::protobuf::internal::fixed_address_empty_string && v20)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, v19);
  *((_QWORD *)this + 9) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v21 = *((_QWORD *)a2 + 9);
  if (*(char *)(v21 + 23) < 0)
    v22 = *(_QWORD *)(v21 + 8);
  else
    v22 = *(unsigned __int8 *)(v21 + 23);
  if ((uint64_t *)v21 != &_tc_google::protobuf::internal::fixed_address_empty_string && v22)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, v21);
  *((_QWORD *)this + 10) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v23 = *((_QWORD *)a2 + 10);
  if (*(char *)(v23 + 23) < 0)
    v24 = *(_QWORD *)(v23 + 8);
  else
    v24 = *(unsigned __int8 *)(v23 + 23);
  if ((uint64_t *)v23 != &_tc_google::protobuf::internal::fixed_address_empty_string && v24)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, v23);
  if (a2 == (const CoreML::Specification::ItemSimilarityRecommender *)&CoreML::Specification::_ItemSimilarityRecommender_default_instance_)
  {
    v26 = 0;
    *((_QWORD *)this + 11) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 11))
    {
      v25 = (CoreML::Specification::StringVector *)operator new();
      CoreML::Specification::StringVector::StringVector(v25, *((const CoreML::Specification::StringVector **)a2 + 11));
    }
    else
    {
      v25 = 0;
    }
    *((_QWORD *)this + 11) = v25;
    if (*((_QWORD *)a2 + 12))
    {
      v26 = (CoreML::Specification::Int64Vector *)operator new();
      CoreML::Specification::Int64Vector::Int64Vector(v26, *((const CoreML::Specification::Int64Vector **)a2 + 12));
    }
    else
    {
      v26 = 0;
    }
  }
  *((_QWORD *)this + 12) = v26;
  return this;
}

void sub_2184D7774(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;

  MEMORY[0x219A19A08](v3, 0x10A1C406130BDD3);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ItemSimilarityRecommender::~ItemSimilarityRecommender(CoreML::Specification::ItemSimilarityRecommender *this)
{
  *(_QWORD *)this = &off_24D945910;
  CoreML::Specification::ItemSimilarityRecommender::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ItemSimilarityRecommender::~ItemSimilarityRecommender(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::ItemSimilarityRecommender::SharedDtor(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = this;
  v2 = this[5];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (uint64_t *)MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  v4 = v1[6];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (uint64_t *)MEMORY[0x219A19A08](v4, 0x1012C40EC159624);
  }
  v6 = v1[7];
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    this = (uint64_t *)MEMORY[0x219A19A08](v6, 0x1012C40EC159624);
  }
  v8 = v1[8];
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    this = (uint64_t *)MEMORY[0x219A19A08](v8, 0x1012C40EC159624);
  }
  v10 = v1[9];
  if ((uint64_t *)v10 != &_tc_google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    this = (uint64_t *)MEMORY[0x219A19A08](v10, 0x1012C40EC159624);
  }
  v11 = v1[10];
  if ((uint64_t *)v11 != &_tc_google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (uint64_t *)MEMORY[0x219A19A08](v11, 0x1012C40EC159624);
  }
  if (v1 != &CoreML::Specification::_ItemSimilarityRecommender_default_instance_)
  {
    v12 = v1[11];
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    this = (uint64_t *)v1[12];
    if (this)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  return this;
}

uint64_t *CoreML::Specification::ItemSimilarityRecommender::default_instance(CoreML::Specification::ItemSimilarityRecommender *this)
{
  CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(this);
  return &CoreML::Specification::_ItemSimilarityRecommender_default_instance_;
}

CoreML::Specification::ItemSimilarityRecommender *CoreML::Specification::ItemSimilarityRecommender::New(CoreML::Specification::ItemSimilarityRecommender *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ItemSimilarityRecommender *v3;

  v3 = (CoreML::Specification::ItemSimilarityRecommender *)operator new();
  CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ItemSimilarityRecommender>(a2, v3);
  return v3;
}

void sub_2184D7A70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40BDA5CB28);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ItemSimilarityRecommender>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ItemSimilarityRecommender>);
  return result;
}

uint64_t CoreML::Specification::ItemSimilarityRecommender::Clear(CoreML::Specification::ItemSimilarityRecommender *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 6);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  v5 = *((_QWORD *)this + 8);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
  v6 = *((_QWORD *)this + 9);
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v7 = *((_QWORD *)this + 10);
  if ((uint64_t *)v7 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
  }
  v8 = *((_QWORD *)this + 11);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 11) = 0;
  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t CoreML::Specification::ItemSimilarityRecommender::MergePartialFromCodedStream(CoreML::Specification::ItemSimilarityRecommender *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unsigned int TagFallback;
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems *v17;
  char *v18;
  int VarintSizeAsIntFallback;
  CoreML::Specification::StringVector *v20;
  char *v21;
  int v22;
  CoreML::Specification::Int64Vector *v23;
  char *v24;
  int v25;
  std::string *v26;
  uint64_t result;
  std::string *v28;
  const char *size;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  const char *v42;
  char *v43;
  std::string **v44;
  std::string **v45;

  v44 = (std::string **)((char *)this + 72);
  v45 = (std::string **)((char *)this + 80);
  v5 = (std::string **)((char *)this + 64);
  v6 = (std::string **)((char *)this + 56);
  v7 = (std::string **)((char *)this + 48);
  v8 = (std::string **)((char *)this + 40);
  v43 = (char *)this + 16;
  while (1)
  {
LABEL_2:
    v9 = *(unsigned __int8 **)a2;
    v10 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v10)
    {
      v12 = 0;
      goto LABEL_16;
    }
    v11 = v9 + 1;
    v12 = *v9;
    if ((char)*v9 >= 1)
    {
      *(_QWORD *)a2 = v11;
      v13 = v12 | 0x100000000;
      if ((v13 & 0x100000000) != 0)
        goto LABEL_17;
      goto LABEL_9;
    }
    if ((unint64_t)v11 < v10)
    {
      v14 = *v11;
      if ((v12 & ~v14) >= 0x80)
        break;
    }
LABEL_16:
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v12);
    v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v13 & 0x100000000) != 0)
      goto LABEL_17;
LABEL_9:
    if ((_DWORD)v13)
      v15 = (v13 & 7) == 4;
    else
      v15 = 1;
    if (v15)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v13, a3) & 1) == 0)goto LABEL_96;
  }
  *(_QWORD *)a2 = v9 + 2;
  v13 = (v12 + (v14 << 7) - 128) | 0x100000000;
LABEL_17:
  switch(v13 >> 3)
  {
    case 1u:
      if (v13 != 10)
        goto LABEL_9;
      v17 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>::TypeHandler>((uint64_t)v43);
      v18 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          goto LABEL_96;
      }
      else
      {
        VarintSizeAsIntFallback = *v18;
        *(_QWORD *)a2 = v18 + 1;
      }
      v35 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v35 & 0x8000000000000000) != 0)
        goto LABEL_96;
      v37 = v35;
      result = CoreML::Specification::ItemSimilarityRecommender_SimilarItems::MergePartialFromCodedStream(v17, (char **)a2, v36);
      if (!(_DWORD)result)
        return result;
      goto LABEL_81;
    case 2u:
      if (v13 != 18)
        goto LABEL_9;
      v20 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 11);
      if (!v20)
      {
        v20 = (CoreML::Specification::StringVector *)operator new();
        CoreML::Specification::StringVector::StringVector(v20);
        *((_QWORD *)this + 11) = v20;
      }
      v21 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
      {
        v22 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v22 < 0)
          goto LABEL_96;
      }
      else
      {
        v22 = *v21;
        *(_QWORD *)a2 = v21 + 1;
      }
      v38 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v22);
      if ((v38 & 0x8000000000000000) != 0)
        goto LABEL_96;
      v37 = v38;
      result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v20, (char **)a2, v39);
      if (!(_DWORD)result)
        return result;
      goto LABEL_81;
    case 3u:
      if (v13 != 26)
        goto LABEL_9;
      v23 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 12);
      if (!v23)
      {
        v23 = (CoreML::Specification::Int64Vector *)operator new();
        CoreML::Specification::Int64Vector::Int64Vector(v23);
        *((_QWORD *)this + 12) = v23;
      }
      v24 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v24 < 0)
      {
        v25 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v25 < 0)
          goto LABEL_96;
      }
      else
      {
        v25 = *v24;
        *(_QWORD *)a2 = v24 + 1;
      }
      v40 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v25);
      if ((v40 & 0x8000000000000000) != 0)
        goto LABEL_96;
      v37 = v40;
      result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v23, (char **)a2, v41);
      if (!(_DWORD)result)
        return result;
LABEL_81:
      if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v37))
        goto LABEL_2;
LABEL_96:
      result = 0;
      break;
    case 0xAu:
      if (v13 != 82)
        goto LABEL_9;
      v26 = *v8;
      if (*v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v26 = *v8;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v26);
      if (!(_DWORD)result)
        return result;
      v28 = *v8;
      if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
      {
        v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
        size = (const char *)(*v8)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
      }
      v42 = "CoreML.Specification.ItemSimilarityRecommender.itemInputFeatureName";
      goto LABEL_95;
    case 0xBu:
      if (v13 != 90)
        goto LABEL_9;
      v30 = *v7;
      if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v30 = *v7;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v30);
      if (!(_DWORD)result)
        return result;
      v28 = *v7;
      if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
      {
        v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
        size = (const char *)(*v7)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
      }
      v42 = "CoreML.Specification.ItemSimilarityRecommender.numRecommendationsInputFeatureName";
      goto LABEL_95;
    case 0xCu:
      if (v13 != 98)
        goto LABEL_9;
      v31 = *v6;
      if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v31 = *v6;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v31);
      if (!(_DWORD)result)
        return result;
      v28 = *v6;
      if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
      {
        v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
        size = (const char *)(*v6)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
      }
      v42 = "CoreML.Specification.ItemSimilarityRecommender.itemRestrictionInputFeatureName";
      goto LABEL_95;
    case 0xDu:
      if (v13 != 106)
        goto LABEL_9;
      v32 = *v5;
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v32 = *v5;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v32);
      if (!(_DWORD)result)
        return result;
      v28 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      v42 = "CoreML.Specification.ItemSimilarityRecommender.itemExclusionInputFeatureName";
      goto LABEL_95;
    case 0x14u:
      if (v13 != 162)
        goto LABEL_9;
      v33 = *v44;
      if (*v44 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v44, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v33 = *v44;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v33);
      if (!(_DWORD)result)
        return result;
      v28 = *v44;
      if (SHIBYTE((*v44)->__r_.__value_.__r.__words[2]) < 0)
      {
        v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
        size = (const char *)(*v44)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v44)->__r_.__value_.__r.__words[2]);
      }
      v42 = "CoreML.Specification.ItemSimilarityRecommender.recommendedItemListOutputFeatureName";
      goto LABEL_95;
    case 0x15u:
      if (v13 != 170)
        goto LABEL_9;
      v34 = *v45;
      if (*v45 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v45, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v34 = *v45;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v34);
      if (!(_DWORD)result)
        return result;
      v28 = *v45;
      if (SHIBYTE((*v45)->__r_.__value_.__r.__words[2]) < 0)
      {
        v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
        size = (const char *)(*v45)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v45)->__r_.__value_.__r.__words[2]);
      }
      v42 = "CoreML.Specification.ItemSimilarityRecommender.recommendedItemScoreOutputFeatureName";
LABEL_95:
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v28, size, 0, (uint64_t)v42))goto LABEL_96;
      goto LABEL_2;
    default:
      goto LABEL_9;
  }
  return result;
}

void sub_2184D8144(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ItemSimilarityRecommender::SerializeWithCachedSizes(CoreML::Specification::ItemSimilarityRecommender *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  _tc_google::protobuf::internal *v10;
  const char *v11;
  _tc_google::protobuf::internal *v12;
  const char *v13;
  _tc_google::protobuf::internal *v14;
  const char *v15;
  _tc_google::protobuf::internal *v16;
  const char *v17;
  _tc_google::protobuf::internal *v18;
  const char *v19;
  uint64_t result;
  const char *v21;

  v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  if (this != (CoreML::Specification::ItemSimilarityRecommender *)&CoreML::Specification::_ItemSimilarityRecommender_default_instance_)
  {
    v8 = *((_QWORD *)this + 11);
    if (v8)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
    v9 = *((_QWORD *)this + 12);
    if (v9)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  }
  v10 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v10 + 23) < 0)
  {
    v11 = (const char *)*((_QWORD *)v10 + 1);
    if (!v11)
      goto LABEL_15;
    v10 = *(_tc_google::protobuf::internal **)v10;
    goto LABEL_14;
  }
  v11 = (const char *)*((unsigned __int8 *)v10 + 23);
  if (*((_BYTE *)v10 + 23))
  {
LABEL_14:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.ItemSimilarityRecommender.itemInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(10, *((_QWORD *)this + 5), a2);
  }
LABEL_15:
  v12 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 6);
  if (*((char *)v12 + 23) < 0)
  {
    v13 = (const char *)*((_QWORD *)v12 + 1);
    if (!v13)
      goto LABEL_21;
    v12 = *(_tc_google::protobuf::internal **)v12;
    goto LABEL_20;
  }
  v13 = (const char *)*((unsigned __int8 *)v12 + 23);
  if (*((_BYTE *)v12 + 23))
  {
LABEL_20:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.ItemSimilarityRecommender.numRecommendationsInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(11, *((_QWORD *)this + 6), a2);
  }
LABEL_21:
  v14 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 7);
  if (*((char *)v14 + 23) < 0)
  {
    v15 = (const char *)*((_QWORD *)v14 + 1);
    if (!v15)
      goto LABEL_27;
    v14 = *(_tc_google::protobuf::internal **)v14;
    goto LABEL_26;
  }
  v15 = (const char *)*((unsigned __int8 *)v14 + 23);
  if (*((_BYTE *)v14 + 23))
  {
LABEL_26:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v14, v15, 1, (uint64_t)"CoreML.Specification.ItemSimilarityRecommender.itemRestrictionInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(12, *((_QWORD *)this + 7), a2);
  }
LABEL_27:
  v16 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 8);
  if (*((char *)v16 + 23) < 0)
  {
    v17 = (const char *)*((_QWORD *)v16 + 1);
    if (!v17)
      goto LABEL_33;
    v16 = *(_tc_google::protobuf::internal **)v16;
    goto LABEL_32;
  }
  v17 = (const char *)*((unsigned __int8 *)v16 + 23);
  if (*((_BYTE *)v16 + 23))
  {
LABEL_32:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, v17, 1, (uint64_t)"CoreML.Specification.ItemSimilarityRecommender.itemExclusionInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(13, *((_QWORD *)this + 8), a2);
  }
LABEL_33:
  v18 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 9);
  if (*((char *)v18 + 23) < 0)
  {
    v19 = (const char *)*((_QWORD *)v18 + 1);
    if (!v19)
      goto LABEL_39;
    v18 = *(_tc_google::protobuf::internal **)v18;
    goto LABEL_38;
  }
  v19 = (const char *)*((unsigned __int8 *)v18 + 23);
  if (*((_BYTE *)v18 + 23))
  {
LABEL_38:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v18, v19, 1, (uint64_t)"CoreML.Specification.ItemSimilarityRecommender.recommendedItemListOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(20, *((_QWORD *)this + 9), a2);
  }
LABEL_39:
  result = *((_QWORD *)this + 10);
  if (*(char *)(result + 23) < 0)
  {
    v21 = *(const char **)(result + 8);
    if (!v21)
      return result;
    result = *(_QWORD *)result;
    goto LABEL_44;
  }
  v21 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_44:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v21, 1, (uint64_t)"CoreML.Specification.ItemSimilarityRecommender.recommendedItemScoreOutputFeatureName");
    return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(21, *((_QWORD *)this + 10), a2);
  }
  return result;
}

uint64_t CoreML::Specification::ItemSimilarityRecommender::ByteSizeLong(CoreML::Specification::ItemSimilarityRecommender *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CoreML::Specification::StringVector *v24;
  uint64_t v25;
  CoreML::Specification::Int64Vector *v26;
  uint64_t v27;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::ItemSimilarityRecommender_SimilarItems::ByteSizeLong(*(CoreML::Specification::ItemSimilarityRecommender_SimilarItems **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((_QWORD *)this + 5);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_11:
  v9 = *((_QWORD *)this + 6);
  v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_16;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_16:
  v12 = *((_QWORD *)this + 7);
  v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_21;
  }
  v14 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v14 = v13;
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_21:
  v15 = *((_QWORD *)this + 8);
  v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      goto LABEL_26;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    goto LABEL_26;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if ((v16 & 0x80u) == 0)
    v17 = v16;
  v4 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_26:
  v18 = *((_QWORD *)this + 9);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(_QWORD *)(v18 + 8))
      goto LABEL_31;
  }
  else if (!*(_BYTE *)(v18 + 23))
  {
    goto LABEL_31;
  }
  v20 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v20 = v19;
  v4 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_31:
  v21 = *((_QWORD *)this + 10);
  v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0)
  {
    if (!*(_QWORD *)(v21 + 8))
      goto LABEL_36;
  }
  else if (!*(_BYTE *)(v21 + 23))
  {
    goto LABEL_36;
  }
  v23 = *(_QWORD *)(v21 + 8);
  if ((v22 & 0x80u) == 0)
    v23 = v22;
  v4 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_36:
  if (this != (CoreML::Specification::ItemSimilarityRecommender *)&CoreML::Specification::_ItemSimilarityRecommender_default_instance_)
  {
    v24 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 11);
    if (v24)
    {
      v25 = CoreML::Specification::StringVector::ByteSizeLong(v24);
      v4 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v26 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 12);
    if (v26)
    {
      v27 = CoreML::Specification::Int64Vector::ByteSizeLong(v26);
      v4 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 26) = v4;
  return v4;
}

void CoreML::Specification::ItemSimilarityRecommender::MergeFrom(CoreML::Specification::ItemSimilarityRecommender *this, const CoreML::Specification::ItemSimilarityRecommender *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  const CoreML::Specification::V5::TensorValue_RepeatedStrings *v22;
  CoreML::Specification::StringVector *v23;
  const CoreML::Specification::V5::TensorValue_RepeatedStrings *v24;
  const CoreML::Specification::GLMRegressor_DoubleArray *v25;
  CoreML::Specification::Int64Vector *v26;
  const CoreML::Specification::GLMRegressor_DoubleArray *v27;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::ItemSimilarityRecommender_SimilarItems **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ItemSimilarityRecommender *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>::TypeHandler>((std::string *)((char *)this + 16), (std::string **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_QWORD *)a2 + 5);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_14;
  }
  v11 = (uint64_t *)*((_QWORD *)this + 5);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v10);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v10);
  }
LABEL_14:
  v12 = *((_QWORD *)a2 + 6);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_22;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_22;
  }
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  if (v13 != (uint64_t *)v12)
  {
    if (v13 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v12);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v12);
  }
LABEL_22:
  v14 = *((_QWORD *)a2 + 7);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(_QWORD *)(v14 + 8))
      goto LABEL_30;
  }
  else if (!*(_BYTE *)(v14 + 23))
  {
    goto LABEL_30;
  }
  v15 = (uint64_t *)*((_QWORD *)this + 7);
  if (v15 != (uint64_t *)v14)
  {
    if (v15 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v14);
    else
      std::string::operator=(*((std::string **)this + 7), (const std::string *)v14);
  }
LABEL_30:
  v16 = *((_QWORD *)a2 + 8);
  if (*(char *)(v16 + 23) < 0)
  {
    if (!*(_QWORD *)(v16 + 8))
      goto LABEL_38;
  }
  else if (!*(_BYTE *)(v16 + 23))
  {
    goto LABEL_38;
  }
  v17 = (uint64_t *)*((_QWORD *)this + 8);
  if (v17 != (uint64_t *)v16)
  {
    if (v17 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, v16);
    else
      std::string::operator=(*((std::string **)this + 8), (const std::string *)v16);
  }
LABEL_38:
  v18 = *((_QWORD *)a2 + 9);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(_QWORD *)(v18 + 8))
      goto LABEL_46;
  }
  else if (!*(_BYTE *)(v18 + 23))
  {
    goto LABEL_46;
  }
  v19 = (uint64_t *)*((_QWORD *)this + 9);
  if (v19 != (uint64_t *)v18)
  {
    if (v19 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, v18);
    else
      std::string::operator=(*((std::string **)this + 9), (const std::string *)v18);
  }
LABEL_46:
  v20 = *((_QWORD *)a2 + 10);
  if (*(char *)(v20 + 23) < 0)
  {
    if (!*(_QWORD *)(v20 + 8))
      goto LABEL_54;
  }
  else if (!*(_BYTE *)(v20 + 23))
  {
    goto LABEL_54;
  }
  v21 = (uint64_t *)*((_QWORD *)this + 10);
  if (v21 != (uint64_t *)v20)
  {
    if (v21 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, v20);
    else
      std::string::operator=(*((std::string **)this + 10), (const std::string *)v20);
  }
LABEL_54:
  if (a2 != (const CoreML::Specification::ItemSimilarityRecommender *)&CoreML::Specification::_ItemSimilarityRecommender_default_instance_)
  {
    v22 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 11);
    if (v22)
    {
      v23 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 11);
      if (!v23)
      {
        v23 = (CoreML::Specification::StringVector *)operator new();
        CoreML::Specification::StringVector::StringVector(v23);
        *((_QWORD *)this + 11) = v23;
        v22 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 11);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)&CoreML::Specification::_StringVector_default_instance_;
      CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v23, v24);
    }
    v25 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((_QWORD *)a2 + 12);
    if (v25)
    {
      v26 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 12);
      if (!v26)
      {
        v26 = (CoreML::Specification::Int64Vector *)operator new();
        CoreML::Specification::Int64Vector::Int64Vector(v26);
        *((_QWORD *)this + 12) = v26;
        v25 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((_QWORD *)a2 + 12);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (const CoreML::Specification::GLMRegressor_DoubleArray *)&CoreML::Specification::_Int64Vector_default_instance_;
      CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v26, v27);
    }
  }
}

void sub_2184D89FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ItemSimilarityRecommender::IsInitialized(CoreML::Specification::ItemSimilarityRecommender *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ItemSimilarityRecommender::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ItemSimilarityRecommender");
}

CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::New(CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *this)
{
  return CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::New(this, 0);
}

CoreML::Specification::ItemSimilarityRecommender_SimilarItems *CoreML::Specification::ItemSimilarityRecommender_SimilarItems::New(CoreML::Specification::ItemSimilarityRecommender_SimilarItems *this)
{
  return CoreML::Specification::ItemSimilarityRecommender_SimilarItems::New(this, 0);
}

CoreML::Specification::ItemSimilarityRecommender *CoreML::Specification::ItemSimilarityRecommender::New(CoreML::Specification::ItemSimilarityRecommender *this)
{
  return CoreML::Specification::ItemSimilarityRecommender::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v4 = *(_QWORD *)(v3 + 8 * v2);
      v5 = *(unsigned int *)(v4 + 24);
      if ((int)v5 >= 1)
      {
        v6 = (uint64_t *)(*(_QWORD *)(v4 + 32) + 8);
        do
        {
          v7 = *v6++;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)(v7 + 24) = 0;
          --v5;
        }
        while (v5);
        *(_DWORD *)(v4 + 24) = 0;
      }
      ++v2;
      *(_QWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 48) = 0;
    }
    while (v2 != v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **v11;
  std::string **v12;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *v13;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **v18;
  CoreML::Specification::ItemSimilarityRecommender_ConnectedItem **v19;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *v20;
  CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = (CoreML::Specification::ItemSimilarityRecommender_ConnectedItem **)&a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::ItemSimilarityRecommender_ConnectedItem(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>);
      }
      else
      {
        Aligned = (CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *)operator new();
        CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::ItemSimilarityRecommender_ConnectedItem(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::Merge(v20, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_2184D8BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ItemSimilarityRecommender>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::ItemSimilarityRecommender_SimilarItems **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems **v11;
  std::string **v12;
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems *v13;
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems **v18;
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems **v19;
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems *v20;
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = (CoreML::Specification::ItemSimilarityRecommender_SimilarItems **)&a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::ItemSimilarityRecommender_SimilarItems::ItemSimilarityRecommender_SimilarItems(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>);
      }
      else
      {
        Aligned = (CoreML::Specification::ItemSimilarityRecommender_SimilarItems *)operator new();
        CoreML::Specification::ItemSimilarityRecommender_SimilarItems::ItemSimilarityRecommender_SimilarItems(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>::Merge(v20, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_2184D8D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407C6D6C37);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>::Merge(CoreML::Specification::ItemSimilarityRecommender_SimilarItems *a1, std::string *this)
{
  return CoreML::Specification::ItemSimilarityRecommender_SimilarItems::MergeFrom(this, a1);
}

uint64_t _GLOBAL__sub_I_ItemSimilarityRecommender_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184D8F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t turi::model_base::operator=(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  if (a1 != a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>((uint64_t **)(a1 + 32), *(__int128 **)(a2 + 32), (__int128 *)(a2 + 40));
    std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *> *,long>>((uint64_t **)(a1 + 56), *(__int128 **)(a2 + 56), (__int128 *)(a2 + 64));
    std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *> *,long>>((uint64_t **)(a1 + 80), *(__int128 **)(a2 + 80), (__int128 *)(a2 + 88));
    std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *> *,long>>((uint64_t **)(a1 + 104), *(__int128 **)(a2 + 104), (__int128 *)(a2 + 112));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 128), *(std::string **)(a2 + 128), *(__int128 **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
    std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *> *,long>>((uint64_t **)(a1 + 152), *(__int128 **)(a2 + 152), (__int128 *)(a2 + 160));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 176), *(std::string **)(a2 + 176), *(__int128 **)(a2 + 184), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 200), *(__int128 **)(a2 + 200), (__int128 *)(a2 + 208));
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::vector<std::string> &>::operator=[abi:ne180100]<std::string const,std::vector<std::string>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_multi<std::pair<std::string const,std::vector<std::string>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2184D920C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::vector<std::string> &>::operator=[abi:ne180100]<std::string const,std::vector<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::vector<std::string> *v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(std::vector<std::string> **)(a1 + 8);
  if (v4 != (std::vector<std::string> *)(a2 + 24))
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v4, *(std::string **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_multi<std::pair<std::string const,std::vector<std::string>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::pair<std::string const,std::vector<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_2184D9334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::pair<std::string const,std::vector<std::string>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2184D939C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_2184D9428(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &>::operator=[abi:ne180100]<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__emplace_multi<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2184D95BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &>::operator=[abi:ne180100]<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(uint64_t ***)(a1 + 8);
  if (v4 != (uint64_t **)(a2 + 24))
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>(v4, *(__int128 **)(a2 + 24), (__int128 *)(a2 + 32));
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__emplace_multi<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__construct_node<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_2184D96D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__construct_node<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2184D973C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  return this;
}

void sub_2184D97AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator=(v8 + 7, (uint64_t)v9 + 56);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_multi<std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2184D9940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2184D9B54(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_multi<std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__construct_node<std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_2184D9C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__construct_node<std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2184D9C84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_2184D9CF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned long>,std::__tree_node<std::__value_type<std::string,unsigned long>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v8[7] = v9[7];
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_multi<std::pair<std::string const,unsigned long> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2184D9E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void **std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_multi<std::pair<std::string const,unsigned long> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  const void **v6;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__construct_node<std::pair<std::string const,MPSRNNMatrixId> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void std::vector<turi::option_handling::option_info>::__assign_with_size[abi:ne180100]<turi::option_handling::option_info*,turi::option_handling::option_info*>(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;

  v6 = a2;
  v8 = (uint64_t)(a1 + 2);
  v9 = (char *)*a1;
  if (a4 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 7)
  {
    std::vector<turi::option_handling::option_info>::__vdeallocate(a1);
    if (a4 >> 57)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = (_BYTE *)a1[2] - (_BYTE *)*a1;
    v11 = v10 >> 6;
    if (v10 >> 6 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFF80)
      v12 = 0x1FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<turi::option_handling::option_info>::__vallocate[abi:ne180100](a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::option_handling::option_info>,turi::option_handling::option_info*,turi::option_handling::option_info*,turi::option_handling::option_info*>(v8, v6, a3, (uint64_t)a1[1]);
LABEL_15:
    a1[1] = (void *)v13;
    return;
  }
  v14 = (char *)a1[1];
  v15 = (v14 - v9) >> 7;
  if (v15 < a4)
  {
    v16 = a2 + (v15 << 7);
    if (v14 != v9)
    {
      v17 = v15 << 7;
      do
      {
        turi::option_handling::option_info::operator=((uint64_t)v9, v6);
        v6 += 128;
        v9 += 128;
        v17 -= 128;
      }
      while (v17);
      v9 = (char *)a1[1];
    }
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::option_handling::option_info>,turi::option_handling::option_info*,turi::option_handling::option_info*,turi::option_handling::option_info*>(v8, v16, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    v18 = v9;
  }
  else
  {
    v18 = v9;
    do
    {
      turi::option_handling::option_info::operator=((uint64_t)v9, v6);
      v6 += 128;
      v9 += 128;
      v18 += 128;
    }
    while (v6 != a3);
    v14 = (char *)a1[1];
  }
  while (v14 != v18)
    turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)(v14 - 128));
  a1[1] = v18;
}

void sub_2184DA058(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<turi::option_handling::option_info>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)(v3 - 128));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__equal_to &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1);
      v6 = *v4++;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    while (v4 != a2)
    {
      v8 = v5;
      v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

void __cxx_global_var_init_74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_75_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD4D38 = 0;
    unk_254FD4D28 = 0u;
    unk_254FD4D18 = 0u;
    unk_254FD4D08 = 0u;
    unk_254FD4CF8 = 0u;
    qword_254FD4CF0 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_76()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD4DD0 = 0;
    unk_254FD4DC0 = 0u;
    unk_254FD4DB0 = 0u;
    unk_254FD4DA0 = 0u;
    unk_254FD4D90 = 0u;
    qword_254FD4D88 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_recsys_model_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::supervised_2::supervised_learning_model_base::init_options(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  _QWORD *v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  void **v73;
  void **v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  void **v79;
  unsigned int *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  void **v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  void **v91;
  unsigned int v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  void **v96;
  unsigned int *v97;
  void *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  void *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  __int128 v128;
  uint64_t v129;
  std::string __p;
  std::string v131;
  uint64_t v132;
  int v133;
  char v134;
  _QWORD v135[2];
  unsigned int **v136;
  char v137;
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v131, "features");
  std::string::basic_string[abi:ne180100]<0>(&__p, "List of features that are considered during training and prediction for this model.");
  v128 = 0uLL;
  v129 = 0;
  *(_QWORD *)((char *)v135 + 5) = 0x400000000000000;
  v135[0] = 0;
  v4 = (_QWORD *)operator new();
  v5 = v4;
  *v4 = 0;
  v4[1] = 0;
  v6 = (void **)(v4 + 1);
  v4[2] = 0;
  v4[3] = 0;
  v135[0] = v4;
  *v4 = 1;
  switch(BYTE4(v135[1]))
  {
    case 2:
      if (*v4 != 1)
      {
        v7 = (_QWORD *)operator new();
        v8 = v135[0];
        *v7 = *(_QWORD *)v135[0];
        v9 = (std::string *)(v7 + 1);
        if (*(char *)(v8 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
        }
        else
        {
          v10 = *(_OWORD *)(v8 + 8);
          v7[3] = *(_QWORD *)(v8 + 24);
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
        }
        v135[0] = v7;
        *v7 = 1;
        do
        {
          v38 = __ldaxr(v5);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v5));
        if (!v39)
        {
          v15 = 0x1012C404EF22A49;
          if ((*((char *)v5 + 31) & 0x80000000) == 0)
            goto LABEL_41;
          v16 = *v6;
          goto LABEL_40;
        }
      }
      break;
    case 3:
      if (*v4 != 1)
      {
        v11 = (_QWORD *)operator new();
        v12 = v135[0];
        *v11 = *(_QWORD *)v135[0];
        v11[2] = 0;
        v11[3] = 0;
        v11[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11 + 1, *(const void **)(v12 + 8), *(_QWORD *)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 3);
        v135[0] = v11;
        *v11 = 1;
        do
        {
          v13 = __ldaxr(v5);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v5));
        if (!v14)
        {
          v15 = 0x1080C409938AC02;
          v16 = *v6;
          if (*v6)
          {
            v5[2] = v16;
LABEL_40:
            operator delete(v16);
          }
          goto LABEL_41;
        }
      }
      break;
    case 4:
      if (*v4 != 1)
      {
        v17 = (_QWORD *)operator new();
        v18 = v135[0];
        *v17 = *(_QWORD *)v135[0];
        v17[2] = 0;
        v17[3] = 0;
        v17[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v17 + 1, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 4);
        v135[0] = v17;
        *v17 = 1;
        do
        {
          v19 = __ldaxr(v5);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v5));
        if (!v20)
        {
          v15 = 0x1020C405E66F15BLL;
          v136 = (unsigned int **)v6;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
          goto LABEL_41;
        }
      }
      break;
    case 5:
      if (*v4 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = v135[0];
        *v21 = *(_QWORD *)v135[0];
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v21 + 1, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 5);
        v135[0] = v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v5);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v5));
        if (!v24)
        {
          v15 = 0x1020C405E66F15BLL;
          v136 = (unsigned int **)v6;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
          goto LABEL_41;
        }
      }
      break;
    case 8:
      if (*v4 != 1)
      {
        v25 = operator new();
        v26 = v135[0];
        *(_QWORD *)v25 = *(_QWORD *)v135[0];
        *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
        v27 = *(_QWORD *)(v26 + 16);
        *(_QWORD *)(v25 + 16) = v27;
        if (v27)
        {
          v28 = (unsigned int *)(v27 + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = *(_OWORD *)(v26 + 24);
        v31 = *(_OWORD *)(v26 + 40);
        *(_OWORD *)(v25 + 56) = *(_OWORD *)(v26 + 56);
        *(_OWORD *)(v25 + 40) = v31;
        *(_OWORD *)(v25 + 24) = v30;
        v135[0] = v25;
        *(_QWORD *)v25 = 1;
        do
        {
          v32 = __ldaxr(v5);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v5));
        if (!v33)
        {
          v15 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v5 + 2);
          goto LABEL_41;
        }
      }
      break;
    case 9:
      if (*v4 != 1)
      {
        v34 = (_QWORD *)operator new();
        v35 = v135[0] + 8;
        *v34 = *(_QWORD *)v135[0];
        turi::flexible_type_impl::ndarray<double>::ndarray(v34 + 1, v35);
        v135[0] = v34;
        *v34 = 1;
        do
        {
          v36 = __ldaxr(v5);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v5));
        if (!v37)
        {
          v15 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v5);
LABEL_41:
          MEMORY[0x219A19A08](v5, v15);
        }
      }
      break;
    default:
      break;
  }
  v40 = v135[0];
  std::vector<turi::flexible_type>::__vdeallocate((void **)(v135[0] + 8));
  *(_OWORD *)(v40 + 8) = v128;
  *(_QWORD *)(v40 + 24) = v129;
  v128 = 0uLL;
  v129 = 0;
  turi::option_manager::create_flexible_type_option((turi::option_manager *)(a1 + 224), &v131, &__p, (uint64_t)v135, 0);
  switch(BYTE4(v135[1]))
  {
    case 2:
      v41 = (unint64_t *)v135[0];
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        v44 = v135[0];
        if (v135[0])
        {
          if (*(char *)(v135[0] + 31) < 0)
            operator delete(*(void **)(v135[0] + 8));
          v45 = v44;
          v46 = 0x1012C404EF22A49;
          goto LABEL_83;
        }
      }
      break;
    case 3:
      v47 = (unint64_t *)v135[0];
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        v50 = v135[0];
        if (v135[0])
        {
          v51 = *(void **)(v135[0] + 8);
          if (v51)
          {
            *(_QWORD *)(v135[0] + 16) = v51;
            operator delete(v51);
          }
          v45 = v50;
          v46 = 0x1080C409938AC02;
          goto LABEL_83;
        }
      }
      break;
    case 4:
      v52 = (unint64_t *)v135[0];
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        v55 = v135[0];
        if (v135[0])
        {
          v136 = (unsigned int **)(v135[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
          goto LABEL_67;
        }
      }
      break;
    case 5:
      v56 = (unint64_t *)v135[0];
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        v55 = v135[0];
        if (v135[0])
        {
          v136 = (unsigned int **)(v135[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
LABEL_67:
          v45 = v55;
          v46 = 0x1020C405E66F15BLL;
          goto LABEL_83;
        }
      }
      break;
    case 8:
      v59 = (unint64_t *)v135[0];
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
      {
        v62 = v135[0];
        if (v135[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v135[0] + 16));
          v45 = v62;
          v63 = -235920773;
          goto LABEL_82;
        }
      }
      break;
    case 9:
      v64 = (unint64_t *)v135[0];
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        v67 = v135[0];
        if (v135[0])
        {
          v68 = *(void **)(v135[0] + 48);
          if (v68)
          {
            *(_QWORD *)(v135[0] + 56) = v68;
            operator delete(v68);
          }
          v69 = *(void **)(v67 + 24);
          if (v69)
          {
            *(_QWORD *)(v67 + 32) = v69;
            operator delete(v69);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v67 + 8);
          v45 = v67;
          v63 = 2071181815;
LABEL_82:
          v46 = v63 | 0x1030C4000000000;
LABEL_83:
          MEMORY[0x219A19A08](v45, v46);
        }
      }
      break;
    default:
      break;
  }
  memset(v135, 0, 13);
  v136 = (unsigned int **)&v128;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v131, "target");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Target column for training.");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v136, "");
  turi::option_manager::create_string_option((turi::option_manager *)(a1 + 224), &v131, &__p, (uint64_t)&v136, 0);
  switch(v137)
  {
    case 2:
      v70 = (unint64_t *)v136;
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        v73 = (void **)v136;
        if (v136)
        {
          if (*((char *)v136 + 31) < 0)
            operator delete(v136[1]);
          v74 = v73;
          v75 = 0x1012C404EF22A49;
          goto LABEL_129;
        }
      }
      break;
    case 3:
      v76 = (unint64_t *)v136;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        v79 = (void **)v136;
        if (v136)
        {
          v80 = v136[1];
          if (v80)
          {
            v136[2] = v80;
            operator delete(v80);
          }
          v74 = v79;
          v75 = 0x1080C409938AC02;
          goto LABEL_129;
        }
      }
      break;
    case 4:
      v81 = (unint64_t *)v136;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (!v83)
      {
        v84 = (void **)v136;
        if (v136)
        {
          *(_QWORD *)&v128 = v136 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
          goto LABEL_113;
        }
      }
      break;
    case 5:
      v85 = (unint64_t *)v136;
      do
      {
        v86 = __ldaxr(v85);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, v85));
      if (!v87)
      {
        v84 = (void **)v136;
        if (v136)
        {
          *(_QWORD *)&v128 = v136 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
LABEL_113:
          v74 = v84;
          v75 = 0x1020C405E66F15BLL;
          goto LABEL_129;
        }
      }
      break;
    case 8:
      v88 = (unint64_t *)v136;
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        v91 = (void **)v136;
        if (v136)
        {
          boost::detail::shared_count::~shared_count(v136 + 2);
          v74 = v91;
          v92 = -235920773;
          goto LABEL_128;
        }
      }
      break;
    case 9:
      v93 = (unint64_t *)v136;
      do
      {
        v94 = __ldaxr(v93);
        v95 = v94 - 1;
      }
      while (__stlxr(v95, v93));
      if (!v95)
      {
        v96 = (void **)v136;
        if (v136)
        {
          v97 = v136[6];
          if (v97)
          {
            v136[7] = v97;
            operator delete(v97);
          }
          v98 = v96[3];
          if (v98)
          {
            v96[4] = v98;
            operator delete(v98);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v96 + 1));
          v74 = v96;
          v92 = 2071181815;
LABEL_128:
          v75 = v92 | 0x1030C4000000000;
LABEL_129:
          MEMORY[0x219A19A08](v74, v75);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v131, "max_iterations");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Maximum number of iterations to perform during training");
  v134 = 0;
  v133 = 0;
  v132 = 10;
  turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v131, &__p, (uint64_t)&v132, 1, 0x7FFFFFFFLL, 0);
  switch(v134)
  {
    case 2:
      v99 = (unint64_t *)v132;
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        v102 = v132;
        if (v132)
        {
          if (*(char *)(v132 + 31) < 0)
            operator delete(*(void **)(v132 + 8));
          v103 = v102;
          v104 = 0x1012C404EF22A49;
          goto LABEL_175;
        }
      }
      break;
    case 3:
      v105 = (unint64_t *)v132;
      do
      {
        v106 = __ldaxr(v105);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v105));
      if (!v107)
      {
        v108 = v132;
        if (v132)
        {
          v109 = *(void **)(v132 + 8);
          if (v109)
          {
            *(_QWORD *)(v132 + 16) = v109;
            operator delete(v109);
          }
          v103 = v108;
          v104 = 0x1080C409938AC02;
          goto LABEL_175;
        }
      }
      break;
    case 4:
      v110 = (unint64_t *)v132;
      do
      {
        v111 = __ldaxr(v110);
        v112 = v111 - 1;
      }
      while (__stlxr(v112, v110));
      if (!v112)
      {
        v113 = v132;
        if (v132)
        {
          *(_QWORD *)&v128 = v132 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
          goto LABEL_159;
        }
      }
      break;
    case 5:
      v114 = (unint64_t *)v132;
      do
      {
        v115 = __ldaxr(v114);
        v116 = v115 - 1;
      }
      while (__stlxr(v116, v114));
      if (!v116)
      {
        v113 = v132;
        if (v132)
        {
          *(_QWORD *)&v128 = v132 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
LABEL_159:
          v103 = v113;
          v104 = 0x1020C405E66F15BLL;
          goto LABEL_175;
        }
      }
      break;
    case 8:
      v117 = (unint64_t *)v132;
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
      {
        v120 = v132;
        if (v132)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v132 + 16));
          v103 = v120;
          v121 = -235920773;
          goto LABEL_174;
        }
      }
      break;
    case 9:
      v122 = (unint64_t *)v132;
      do
      {
        v123 = __ldaxr(v122);
        v124 = v123 - 1;
      }
      while (__stlxr(v124, v122));
      if (!v124)
      {
        v125 = v132;
        if (v132)
        {
          v126 = *(void **)(v132 + 48);
          if (v126)
          {
            *(_QWORD *)(v132 + 56) = v126;
            operator delete(v126);
          }
          v127 = *(void **)(v125 + 24);
          if (v127)
          {
            *(_QWORD *)(v125 + 32) = v127;
            operator delete(v127);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v125 + 8);
          v103 = v125;
          v121 = 2071181815;
LABEL_174:
          v104 = v121 | 0x1030C4000000000;
LABEL_175:
          MEMORY[0x219A19A08](v103, v104);
        }
      }
      break;
    default:
      break;
  }
  v132 = 0;
  v133 = 0;
  v134 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v131, "feature_rescaling");
    std::string::basic_string[abi:ne180100]<0>(&__p, "Scale features to have unit L2-Norm.");
    turi::option_manager::create_BOOLean_option((turi::option_manager *)(a1 + 224), &v131, &__p, 1u, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v131, "class_weights");
    std::string::basic_string[abi:ne180100]<0>(&__p, "Weights (during training) assigned to each class.");
    turi::option_manager::create_flexible_type_option((turi::option_manager *)(a1 + 224), &v131, &__p, (uint64_t)&turi::FLEX_UNDEFINED, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  turi::option_manager::set_options(a1 + 224, a2);
}

void sub_2184DAF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,int a25,char a26,uint64_t a27,int a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;

  MEMORY[0x219A19A08](v29, 0x1012C404EF22A49);
  switch(a29)
  {
    case 2:
      v32 = (unint64_t *)a27;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = a27;
        if (a27)
        {
          if (*(char *)(a27 + 31) < 0)
            operator delete(*(void **)(a27 + 8));
          MEMORY[0x219A19A08](v35, 0x1012C404EF22A49);
        }
      }
      goto LABEL_40;
    case 3:
      v36 = (unint64_t *)a27;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v39 = a27;
      if (!a27)
        goto LABEL_39;
      v40 = *(void **)(a27 + 8);
      if (v40)
      {
        *(_QWORD *)(a27 + 16) = v40;
        operator delete(v40);
      }
      v41 = (_QWORD *)v39;
      v42 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v43 = (unint64_t *)a27;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_40;
      v46 = a27;
      if (!a27)
        goto LABEL_39;
      *(_QWORD *)(v30 - 72) = a27 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 72));
      goto LABEL_26;
    case 5:
      v47 = (unint64_t *)a27;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_40;
      v46 = a27;
      if (!a27)
        goto LABEL_39;
      *(_QWORD *)(v30 - 72) = a27 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 72));
LABEL_26:
      v41 = (_QWORD *)v46;
      v42 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v50 = (unint64_t *)a27;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (v52)
        goto LABEL_40;
      v53 = a27;
      if (!a27)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a27 + 16));
      v41 = (_QWORD *)v53;
      v54 = -235920773;
      goto LABEL_37;
    case 9:
      v55 = (unint64_t *)a27;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (v57)
        goto LABEL_40;
      if (!a27)
        goto LABEL_39;
      v41 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a27);
      v54 = 2071181815;
LABEL_37:
      v42 = v54 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v41, v42);
LABEL_39:
      a27 = 0;
LABEL_40:
      a27 = 0;
      a28 = 0;
      a29 = 0;
      *(_QWORD *)(v30 - 72) = &a9;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 72));
      if (a17 < 0)
        operator delete(__p);
      if (a23 < 0)
        operator delete(a18);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t turi::supervised_2::supervised_learning_model_base::setup_iterative_training(turi::supervised_2::supervised_learning_model_base *a1, turi::gl_sframe *a2, uint64_t a3, int *a4, uint64_t a5, int a6)
{
  uint64_t v10;
  unint64_t *locale;
  unint64_t v13;
  unint64_t v14;
  std::locale::__imp *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::locale::__imp *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::locale::__imp *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::locale::__imp *v37;
  int v38;
  int v39;
  std::__shared_weak_count *value;
  unint64_t *p_size;
  unint64_t v42;
  turi::flexible_type_impl *v43;
  uint64_t v44;
  __int128 v45;
  std::string *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string *begin;
  std::vector<std::string>::pointer end;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t *v66;
  std::string::__raw *v67;
  int64_t v68;
  std::string::size_type v69;
  std::string::size_type v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t *v74;
  std::string::__raw *v75;
  int64_t v76;
  std::string::size_type v77;
  std::string::size_type v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  double v88;
  unsigned int v89;
  double v90;
  size_t v91;
  unsigned int v92;
  double *v93;
  double *v94;
  unint64_t v95;
  double *v96;
  unsigned int v97;
  double v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  BOOL v110;
  double v111;
  double v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  void **v116;
  _QWORD *v117;
  uint64_t v118;
  std::string *v119;
  __int128 v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  void *v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  __int128 v144;
  __int128 v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  void *v165;
  void *v166;
  unsigned int v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  void *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  std::vector<std::string>::pointer v180;
  __int128 v181;
  std::string *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *p_shared_owners;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  int v198;
  char *v199;
  const void ***v200;
  int v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  int v211;
  turi::ml_metadata **v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  turi::ml_metadata *v216;
  unint64_t v217;
  uint64_t v218;
  turi::ml_metadata *v219;
  unint64_t v220;
  uint64_t *v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  std::vector<std::string>::pointer v241;
  __int128 v242;
  std::string *v243;
  uint64_t v244;
  unint64_t v245;
  _QWORD *v246;
  int v247;
  std::string *data;
  std::string::size_type size;
  _QWORD *v250;
  _QWORD *v251;
  int v252;
  std::vector<std::string>::pointer v253;
  std::string::size_type v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  int *v260;
  file_logger *v261;
  file_logger *started;
  uint64_t v263;
  _QWORD *v264;
  const std::locale::facet *v265;
  uint64_t v266;
  uint64_t result;
  uint64_t option_value;
  char v269;
  BOOL v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int64_t v274;
  unint64_t v275;
  uint64_t v276;
  unsigned __int8 *v277;
  unsigned __int8 *v278;
  _QWORD *exception;
  void *v280;
  char v281;
  char **v282;
  char *v283[2];
  const void **v284[3];
  const void **v285;
  _QWORD v286[2];
  __int128 v287;
  uint64_t v288;
  std::string v289;
  void **v290[2];
  std::vector<std::string> v291;
  int v292;
  std::vector<std::string> __p;
  _QWORD v294[2];
  int v295;
  char v296;
  void *v297;
  void *v298;
  void *v299;
  _BYTE v300[8];
  uint64_t v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  _BYTE v304[32];
  std::__shared_weak_count *v305;
  _QWORD v306[2];
  std::locale v307;
  char v308;
  std::__shared_weak_count *v309;
  uint64_t v310;

  v310 = *MEMORY[0x24BDAC8D0];
  v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "target");
    turi::flexible_type::flexible_type<std::string>((uint64_t)&v307, (const std::string *)a3);
    turi::option_manager::set_option((uint64_t)a1 + 224, (uint64_t)&__p, (uint64_t)&v307);
    switch(v308)
    {
      case 2:
        locale = (unint64_t *)v307.__locale_;
        do
        {
          v13 = __ldaxr(locale);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, locale));
        if (!v14)
        {
          v15 = v307.__locale_;
          if (v307.__locale_)
          {
            if (*((char *)v307.__locale_ + 31) < 0)
              operator delete(*((void **)v307.__locale_ + 1));
            v16 = v15;
            v17 = 0x1012C404EF22A49;
            goto LABEL_41;
          }
        }
        break;
      case 3:
        v26 = (unint64_t *)v307.__locale_;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v29 = v307.__locale_;
          if (v307.__locale_)
          {
            v30 = (void *)*((_QWORD *)v307.__locale_ + 1);
            if (v30)
            {
              *((_QWORD *)v307.__locale_ + 2) = v30;
              operator delete(v30);
            }
            v16 = v29;
            v17 = 0x1080C409938AC02;
            goto LABEL_41;
          }
        }
        break;
      case 4:
        v18 = (unint64_t *)v307.__locale_;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = v307.__locale_;
          if (v307.__locale_)
          {
            v291.__begin_ = (std::vector<std::string>::pointer)((char *)v307.__locale_ + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
            goto LABEL_34;
          }
        }
        break;
      case 5:
        v31 = (unint64_t *)v307.__locale_;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v21 = v307.__locale_;
          if (v307.__locale_)
          {
            v291.__begin_ = (std::vector<std::string>::pointer)((char *)v307.__locale_ + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
LABEL_34:
            v16 = v21;
            v17 = 0x1020C405E66F15BLL;
            goto LABEL_41;
          }
        }
        break;
      case 8:
        v34 = (unint64_t *)v307.__locale_;
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v37 = v307.__locale_;
          if (v307.__locale_)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v307.__locale_ + 2);
            v16 = v37;
            v25 = -235920773;
            goto LABEL_40;
          }
        }
        break;
      case 9:
        v22 = (unint64_t *)v307.__locale_;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24 && v307.__locale_)
        {
          v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v307.__locale_);
          v25 = 2071181815;
LABEL_40:
          v17 = v25 | 0x1030C4000000000;
LABEL_41:
          MEMORY[0x219A19A08](v16, v17);
        }
        break;
      default:
        break;
    }
    if (SHIBYTE(__p.__end_cap_.__value_) < 0)
      operator delete(__p.__begin_);
  }
  v38 = (*(uint64_t (**)(turi::supervised_2::supervised_learning_model_base *))(*(_QWORD *)a1 + 80))(a1);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v307);
  v39 = *a4 ^ (*a4 >> 31);
  if (v39)
  {
    if (v39 != 4)
      turi::supervised_2::supervised_learning_model_base::setup_iterative_training(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,BOOL)::$_0::operator()();
    turi::variant_converter<turi::gl_sframe,void>::get(a4, (uint64_t)&__p);
    turi::gl_sframe::operator=((uint64_t)&v307, (uint64_t)&__p);
    __p.__begin_ = (std::vector<std::string>::pointer)off_24D91E9C0;
    value = (std::__shared_weak_count *)__p.__end_cap_.__value_;
    if (__p.__end_cap_.__value_)
    {
      p_size = &__p.__end_cap_.__value_->__r_.__value_.__l.__size_;
      do
        v42 = __ldaxr(p_size);
      while (__stlxr(v42 - 1, p_size));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))value->__on_zero_shared)(value);
        std::__shared_weak_count::__release_weak(value);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v291, "target");
  v43 = (turi::flexible_type_impl *)turi::option_manager::value((uint64_t)a1 + 224, (const void **)&v291.__begin_);
  switch(*((_BYTE *)v43 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_60;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_60:
      __p.__begin_ = (std::vector<std::string>::pointer)*MEMORY[0x24BEDB7F0];
      v46 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
      *(std::vector<std::string>::pointer *)((char *)&__p.__begin_ + __p.__begin_[-1].__r_.__value_.__r.__words[0]) = *(std::vector<std::string>::pointer *)(MEMORY[0x24BEDB7F0] + 64);
      __p.__end_cap_.__value_ = v46;
      v294[0] = MEMORY[0x24BEDB848] + 16;
      if ((v300[7] & 0x80000000) != 0)
        operator delete(v299);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v302);
      goto LABEL_67;
    case 2:
      v44 = *(_QWORD *)v43;
      if (*(char *)(*(_QWORD *)v43 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)(v44 + 8), *(_QWORD *)(v44 + 16));
      }
      else
      {
        v45 = *(_OWORD *)(v44 + 8);
        v289.__r_.__value_.__r.__words[2] = *(_QWORD *)(v44 + 24);
        *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v45;
      }
      goto LABEL_67;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v43 + 8));
      goto LABEL_67;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v43 + 8));
      goto LABEL_67;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v43 + 8));
      goto LABEL_67;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v43, &v289);
      goto LABEL_67;
    case 7:
      memset(&v289, 0, sizeof(v289));
      goto LABEL_67;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_67;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v43 + 8));
LABEL_67:
      if (SHIBYTE(v291.__end_cap_.__value_) < 0)
        operator delete(v291.__begin_);
      if ((SHIBYTE(v289.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((_BYTE *)&v289.__r_.__value_.__s + 23))
          goto LABEL_71;
LABEL_78:
        turi::supervised_2::supervised_learning_model_base::setup_iterative_training(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,BOOL)::$_1::operator()();
      }
      if (!v289.__r_.__value_.__l.__size_)
        goto LABEL_78;
LABEL_71:
      memset(&v291, 0, sizeof(v291));
      std::string::basic_string[abi:ne180100]<0>(&__p, "features");
      v47 = (unsigned __int8 *)turi::option_manager::value((uint64_t)a1 + 224, (const void **)&__p.__begin_);
      if (SHIBYTE(__p.__end_cap_.__value_) < 0)
        operator delete(__p.__begin_);
      switch(byte_254FF531C)
      {
        case 0:
          switch(v47[12])
          {
            case 0u:
              if (*(_QWORD *)v47 == turi::FLEX_UNDEFINED)
                goto LABEL_168;
              goto LABEL_141;
            case 1u:
              v98 = *(double *)v47;
              v99 = turi::FLEX_UNDEFINED;
              goto LABEL_162;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_141;
            case 6u:
              if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v47 << 8) >> 8 && !*((_DWORD *)v47 + 2))
                goto LABEL_168;
              goto LABEL_141;
            default:
              goto LABEL_444;
          }
        case 1:
          switch(v47[12])
          {
            case 0u:
              v98 = *(double *)&turi::FLEX_UNDEFINED;
              v99 = *(_QWORD *)v47;
LABEL_162:
              v112 = (double)v99;
              break;
            case 1u:
              v98 = *(double *)v47;
              v112 = *(double *)&turi::FLEX_UNDEFINED;
              break;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_141;
            case 6u:
              v111 = vabdd_f64((double)*((int *)v47 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v47 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
              goto LABEL_167;
            default:
              goto LABEL_444;
          }
          if (v98 != v112)
            goto LABEL_141;
          goto LABEL_168;
        case 2:
          v89 = v47[12];
          if (v89 - 3 < 7 || v89 < 2)
            goto LABEL_141;
          if (v89 != 2)
            goto LABEL_444;
          v90 = *(double *)v47;
          if (*(char *)(*(_QWORD *)v47 + 31) < 0)
            v91 = *(_QWORD *)(*(_QWORD *)&v90 + 16);
          else
            v91 = *(unsigned __int8 *)(*(_QWORD *)v47 + 31);
          if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
            v276 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
          else
            v276 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
          if (v91 != v276)
            goto LABEL_141;
          v277 = (unsigned __int8 *)(*(_QWORD *)&v90 + 8);
          if ((*(_BYTE *)(*(_QWORD *)v47 + 31) & 0x80) != 0)
            v277 = *(unsigned __int8 **)v277;
          v278 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
          if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
            v278 = *(unsigned __int8 **)v278;
          if ((*(_BYTE *)(*(_QWORD *)v47 + 31) & 0x80) != 0)
          {
            if (memcmp(v277, v278, v91))
              goto LABEL_141;
          }
          else
          {
            if (!v91)
              goto LABEL_168;
            do
            {
              if (*v277 != *v278)
                goto LABEL_141;
              ++v277;
              ++v278;
              --v91;
            }
            while (v91);
          }
          goto LABEL_168;
        case 3:
          v92 = v47[12];
          if (v92 > 9)
            goto LABEL_444;
          if (v92 != 3)
            goto LABEL_141;
          v93 = *(double **)(*(_QWORD *)v47 + 8);
          v94 = *(double **)(*(_QWORD *)v47 + 16);
          v95 = v94 - v93;
          v96 = *(double **)(turi::FLEX_UNDEFINED + 8);
          if (v95 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v96) >> 3)
            goto LABEL_141;
          if (v94 == v93)
            goto LABEL_168;
          if (v95 <= 1)
            v95 = 1;
          break;
        case 4:
          v48 = v47[12];
          if (v48 > 9)
            goto LABEL_444;
          if (v48 != 4)
            goto LABEL_141;
          v49 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)v306, (uint64_t *)(*(_QWORD *)v47 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
          goto LABEL_152;
        case 5:
          v100 = v47[12];
          if (v100 > 9)
            goto LABEL_444;
          if (v100 != 5)
            goto LABEL_141;
          v49 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)v306, (uint64_t **)(*(_QWORD *)v47 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
          goto LABEL_152;
        case 6:
          switch(v47[12])
          {
            case 0u:
              if (*(_QWORD *)v47 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF5318)
                goto LABEL_168;
              goto LABEL_141;
            case 1u:
              v111 = vabdd_f64(*(double *)v47, (double)dword_254FF5318 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_167:
              if (v111 < 0.0000005)
                goto LABEL_168;
              goto LABEL_141;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              goto LABEL_141;
            case 6u:
              if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v47) & 0xFFFFFFFFFFFFFFLL) == 0
                && *((_DWORD *)v47 + 2) == dword_254FF5318)
              {
                goto LABEL_168;
              }
              goto LABEL_141;
            default:
              goto LABEL_444;
          }
        case 7:
          v97 = v47[12];
          if (v97 < 7 || v97 - 8 < 2)
            goto LABEL_141;
          if (v97 != 7)
            goto LABEL_444;
          goto LABEL_168;
        case 8:
          v101 = v47[12];
          if (v101 < 8 || v101 == 9)
            goto LABEL_141;
          if (v101 != 8)
            goto LABEL_444;
          v49 = turi::image_type::operator==(*(_QWORD *)v47 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_152:
          if ((v49 & 1) != 0)
            goto LABEL_168;
          goto LABEL_141;
        case 9:
          v50 = v47[12];
          if (v50 < 9)
            goto LABEL_141;
          if (v50 != 9)
          {
LABEL_444:
            result = turi::flexible_type_fail(0);
            goto LABEL_449;
          }
          v51 = turi::FLEX_UNDEFINED;
          v52 = *(_QWORD **)v47;
          if (turi::FLEX_UNDEFINED == *(_QWORD *)v47)
            goto LABEL_168;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v52 + 1), turi::FLEX_UNDEFINED + 8))
            goto LABEL_141;
          v54 = (char *)v52[3];
          v53 = (char *)v52[4];
          v55 = v53 - v54;
          if (v53 == v54)
            goto LABEL_168;
          if (!v52[1])
            goto LABEL_168;
          v56 = 1;
          do
          {
            v57 = *(_QWORD *)v54;
            v54 += 8;
            v56 *= v57;
          }
          while (v54 != v53);
          if (!v56)
            goto LABEL_168;
          v290[0] = 0;
          std::vector<unsigned long>::vector(&__p, v55 >> 3, v290);
          begin = __p.__begin_;
          end = __p.__end_;
          v60 = **(_QWORD **)(v51 + 8);
          v61 = (char *)__p.__end_ - (char *)__p.__begin_;
          v62 = ((char *)__p.__end_ - (char *)__p.__begin_) >> 3;
          v63 = v62 - 1;
          if (v62 <= 1)
            v64 = 1;
          else
            v64 = ((char *)__p.__end_ - (char *)__p.__begin_) >> 3;
          do
          {
            if (end == begin)
            {
              v72 = 0;
              v73 = *(double *)(*(_QWORD *)v52[1] + 8 * v52[9]);
            }
            else
            {
              v65 = 0;
              v66 = (uint64_t *)v52[6];
              v67 = (std::string::__raw *)begin;
              v68 = v64;
              do
              {
                v70 = v67->__words[0];
                v67 = (std::string::__raw *)((char *)v67 + 8);
                v69 = v70;
                v71 = *v66++;
                v65 += v71 * v69;
                --v68;
              }
              while (v68);
              v72 = 0;
              v73 = *(double *)(*(_QWORD *)v52[1] + 8 * (v52[9] + v65));
              v74 = *(uint64_t **)(v51 + 48);
              v75 = (std::string::__raw *)begin;
              v76 = v64;
              do
              {
                v78 = v75->__words[0];
                v75 = (std::string::__raw *)((char *)v75 + 8);
                v77 = v78;
                v79 = *v74++;
                v72 += v79 * v77;
                --v76;
              }
              while (v76);
            }
            v80 = *(double *)(v60 + 8 * (*(_QWORD *)(v51 + 72) + v72));
            if (v73 != v80)
              break;
            v81 = v62;
            v82 = v62 - 1;
            if (v61 >= 1)
            {
              v83 = v52[3];
              v84 = begin->__r_.__value_.__r.__words[v63] + 1;
              begin->__r_.__value_.__r.__words[v63] = v84;
              v85 = (v61 & 0xFFFFFFFFFFFFFFF8) - 16;
              v82 = v62 - 1;
              if (v84 >= *(_QWORD *)(v83 + 8 * v63))
              {
                do
                {
                  *(std::string::size_type *)((char *)&begin->__r_.__value_.__l.__size_ + v85) = 0;
                  if (v82 <= 0)
                  {
                    __p.__end_ = begin;
                    operator delete(begin);
                    goto LABEL_168;
                  }
                  --v82;
                  v86 = *(std::string::size_type *)((char *)begin->__r_.__value_.__r.__words + v85) + 1;
                  *(std::string::size_type *)((char *)begin->__r_.__value_.__r.__words + v85) = v86;
                  v87 = *(_QWORD *)(v83 + v85);
                  v85 -= 8;
                }
                while (v86 >= v87);
                v81 = 1;
              }
              else
              {
                v81 = 1;
                v82 = v62 - 1;
              }
            }
          }
          while ((v82 & 0x8000000000000000) == 0 && v81);
          if (begin)
          {
            __p.__end_ = begin;
            v88 = v80;
            operator delete(begin);
            if (v73 == v88)
              goto LABEL_168;
          }
          else if (v73 == v80)
          {
            goto LABEL_168;
          }
          goto LABEL_141;
        default:
          goto LABEL_444;
      }
      while (*v93 == *v96)
      {
        ++v96;
        ++v93;
        if (!--v95)
          goto LABEL_168;
      }
LABEL_141:
      if (v47[12] != 4)
        turi::supervised_2::supervised_learning_model_base::setup_iterative_training(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,BOOL)::$_2::operator()();
      v102 = *(double *)v47;
      v103 = *(_QWORD *)(*(_QWORD *)&v102 + 8);
      v104 = *(_QWORD *)(*(_QWORD *)&v102 + 16);
      if (v103 == v104)
      {
LABEL_168:
        turi::gl_sframe::column_names(a2);
        std::vector<std::string>::__vdeallocate(&v291);
        v291 = __p;
        memset(&__p, 0, sizeof(__p));
        *(_QWORD *)&v287 = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v287);
        goto LABEL_169;
      }
      std::vector<std::string>::resize(&v291, (v104 - v103) >> 4);
      __p.__begin_ = 0;
      v105 = *(_QWORD *)(*(_QWORD *)&v102 + 8);
      if (*(_QWORD *)(*(_QWORD *)&v102 + 16) != v105)
      {
        v106 = 0;
        v107 = 0;
        v108 = 1;
        do
        {
          v109 = (_BYTE *)(v105 + v107);
          if (v109[12] != 2)
          {
            *(_QWORD *)&v287 = &__p;
            turi::supervised_2::supervised_learning_model_base::setup_iterative_training(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,BOOL)::$_3::operator()((unint64_t **)&v287);
          }
          std::string::operator=(&v291.__begin_[v106], (const std::string *)(*(_QWORD *)v109 + 8));
          __p.__begin_ = (std::vector<std::string>::pointer)v108;
          v105 = *(_QWORD *)(*(_QWORD *)&v102 + 8);
          v110 = v108++ >= (*(_QWORD *)(*(_QWORD *)&v102 + 16) - v105) >> 4;
          v107 += 16;
          ++v106;
        }
        while (!v110);
      }
LABEL_169:
      v113 = std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>((uint64_t)v291.__begin_, (uint64_t)v291.__end_, (uint64_t)&v289);
      std::vector<std::string>::resize(&v291, 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v113 - (unint64_t)v291.__begin_) >> 3));
      std::string::basic_string[abi:ne180100]<0>(&__p, "features");
      v288 = 0;
      v287 = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>((uint64_t *)&v287, v291.__begin_, v291.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v291.__end_ - (char *)v291.__begin_) >> 3));
      *(_QWORD *)((char *)v306 + 5) = 0x400000000000000;
      v306[0] = 0;
      v114 = (_QWORD *)operator new();
      v115 = v114;
      *v114 = 0;
      v114[1] = 0;
      v116 = (void **)(v114 + 1);
      v114[2] = 0;
      v114[3] = 0;
      v306[0] = v114;
      *v114 = 1;
      switch(BYTE4(v306[1]))
      {
        case 2:
          if (*v114 != 1)
          {
            v117 = (_QWORD *)operator new();
            v118 = v306[0];
            *v117 = *(_QWORD *)v306[0];
            v119 = (std::string *)(v117 + 1);
            if (*(char *)(v118 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)(v118 + 8), *(_QWORD *)(v118 + 16));
            }
            else
            {
              v120 = *(_OWORD *)(v118 + 8);
              v117[3] = *(_QWORD *)(v118 + 24);
              *(_OWORD *)&v119->__r_.__value_.__l.__data_ = v120;
            }
            v306[0] = v117;
            *v117 = 1;
            do
            {
              v148 = __ldaxr(v115);
              v149 = v148 - 1;
            }
            while (__stlxr(v149, v115));
            if (!v149)
            {
              v125 = 0x1012C404EF22A49;
              if ((*((char *)v115 + 31) & 0x80000000) == 0)
                goto LABEL_209;
              v134 = *v116;
              goto LABEL_208;
            }
          }
          break;
        case 3:
          if (*v114 != 1)
          {
            v130 = (_QWORD *)operator new();
            v131 = v306[0];
            *v130 = *(_QWORD *)v306[0];
            v130[2] = 0;
            v130[3] = 0;
            v130[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v130 + 1, *(const void **)(v131 + 8), *(_QWORD *)(v131 + 16), (uint64_t)(*(_QWORD *)(v131 + 16) - *(_QWORD *)(v131 + 8)) >> 3);
            v306[0] = v130;
            *v130 = 1;
            do
            {
              v132 = __ldaxr(v115);
              v133 = v132 - 1;
            }
            while (__stlxr(v133, v115));
            if (!v133)
            {
              v125 = 0x1080C409938AC02;
              v134 = *v116;
              if (*v116)
              {
                v115[2] = v134;
LABEL_208:
                operator delete(v134);
              }
              goto LABEL_209;
            }
          }
          break;
        case 4:
          if (*v114 != 1)
          {
            v121 = (_QWORD *)operator new();
            v122 = v306[0];
            *v121 = *(_QWORD *)v306[0];
            v121[2] = 0;
            v121[3] = 0;
            v121[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v121 + 1, *(uint64_t **)(v122 + 8), *(uint64_t **)(v122 + 16), (uint64_t)(*(_QWORD *)(v122 + 16) - *(_QWORD *)(v122 + 8)) >> 4);
            v306[0] = v121;
            *v121 = 1;
            do
            {
              v123 = __ldaxr(v115);
              v124 = v123 - 1;
            }
            while (__stlxr(v124, v115));
            if (!v124)
            {
              v125 = 0x1020C405E66F15BLL;
              v290[0] = v116;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v290);
              goto LABEL_209;
            }
          }
          break;
        case 5:
          if (*v114 != 1)
          {
            v135 = (_QWORD *)operator new();
            v136 = v306[0];
            *v135 = *(_QWORD *)v306[0];
            v135[2] = 0;
            v135[3] = 0;
            v135[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v135 + 1, *(uint64_t **)(v136 + 8), *(uint64_t **)(v136 + 16), (uint64_t)(*(_QWORD *)(v136 + 16) - *(_QWORD *)(v136 + 8)) >> 5);
            v306[0] = v135;
            *v135 = 1;
            do
            {
              v137 = __ldaxr(v115);
              v138 = v137 - 1;
            }
            while (__stlxr(v138, v115));
            if (!v138)
            {
              v125 = 0x1020C405E66F15BLL;
              v290[0] = v116;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v290);
              goto LABEL_209;
            }
          }
          break;
        case 8:
          if (*v114 != 1)
          {
            v139 = operator new();
            v140 = v306[0];
            *(_QWORD *)v139 = *(_QWORD *)v306[0];
            *(_QWORD *)(v139 + 8) = *(_QWORD *)(v140 + 8);
            v141 = *(_QWORD *)(v140 + 16);
            *(_QWORD *)(v139 + 16) = v141;
            if (v141)
            {
              v142 = (unsigned int *)(v141 + 8);
              do
                v143 = __ldxr(v142);
              while (__stxr(v143 + 1, v142));
            }
            v144 = *(_OWORD *)(v140 + 24);
            v145 = *(_OWORD *)(v140 + 40);
            *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
            *(_OWORD *)(v139 + 40) = v145;
            *(_OWORD *)(v139 + 24) = v144;
            v306[0] = v139;
            *(_QWORD *)v139 = 1;
            do
            {
              v146 = __ldaxr(v115);
              v147 = v146 - 1;
            }
            while (__stlxr(v147, v115));
            if (!v147)
            {
              v125 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)v115 + 2);
              goto LABEL_209;
            }
          }
          break;
        case 9:
          if (*v114 != 1)
          {
            v126 = (_QWORD *)operator new();
            v127 = v306[0] + 8;
            *v126 = *(_QWORD *)v306[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
            v306[0] = v126;
            *v126 = 1;
            do
            {
              v128 = __ldaxr(v115);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v115));
            if (!v129)
            {
              v125 = 0x1030C407B73B9F7;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v115);
LABEL_209:
              MEMORY[0x219A19A08](v115, v125);
            }
          }
          break;
        default:
          break;
      }
      v150 = v306[0];
      std::vector<turi::flexible_type>::__vdeallocate((void **)(v306[0] + 8));
      *(_OWORD *)(v150 + 8) = v287;
      *(_QWORD *)(v150 + 24) = v288;
      v287 = 0uLL;
      v288 = 0;
      turi::option_manager::set_option((uint64_t)a1 + 224, (uint64_t)&__p, (uint64_t)v306);
      switch(BYTE4(v306[1]))
      {
        case 2:
          v151 = (unint64_t *)v306[0];
          do
          {
            v152 = __ldaxr(v151);
            v153 = v152 - 1;
          }
          while (__stlxr(v153, v151));
          if (!v153)
          {
            v154 = v306[0];
            if (v306[0])
            {
              if (*(char *)(v306[0] + 31) < 0)
                operator delete(*(void **)(v306[0] + 8));
              v155 = v154;
              v156 = 0x1012C404EF22A49;
              goto LABEL_251;
            }
          }
          break;
        case 3:
          v168 = (unint64_t *)v306[0];
          do
          {
            v169 = __ldaxr(v168);
            v170 = v169 - 1;
          }
          while (__stlxr(v170, v168));
          if (!v170)
          {
            v171 = v306[0];
            if (v306[0])
            {
              v172 = *(void **)(v306[0] + 8);
              if (v172)
              {
                *(_QWORD *)(v306[0] + 16) = v172;
                operator delete(v172);
              }
              v155 = v171;
              v156 = 0x1080C409938AC02;
              goto LABEL_251;
            }
          }
          break;
        case 4:
          v157 = (unint64_t *)v306[0];
          do
          {
            v158 = __ldaxr(v157);
            v159 = v158 - 1;
          }
          while (__stlxr(v159, v157));
          if (!v159)
          {
            v160 = v306[0];
            if (v306[0])
            {
              v290[0] = (void **)(v306[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v290);
              goto LABEL_244;
            }
          }
          break;
        case 5:
          v173 = (unint64_t *)v306[0];
          do
          {
            v174 = __ldaxr(v173);
            v175 = v174 - 1;
          }
          while (__stlxr(v175, v173));
          if (!v175)
          {
            v160 = v306[0];
            if (v306[0])
            {
              v290[0] = (void **)(v306[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v290);
LABEL_244:
              v155 = v160;
              v156 = 0x1020C405E66F15BLL;
              goto LABEL_251;
            }
          }
          break;
        case 8:
          v176 = (unint64_t *)v306[0];
          do
          {
            v177 = __ldaxr(v176);
            v178 = v177 - 1;
          }
          while (__stlxr(v178, v176));
          if (!v178)
          {
            v179 = v306[0];
            if (v306[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v306[0] + 16));
              v155 = v179;
              v167 = -235920773;
              goto LABEL_250;
            }
          }
          break;
        case 9:
          v161 = (unint64_t *)v306[0];
          do
          {
            v162 = __ldaxr(v161);
            v163 = v162 - 1;
          }
          while (__stlxr(v163, v161));
          if (!v163)
          {
            v164 = v306[0];
            if (v306[0])
            {
              v165 = *(void **)(v306[0] + 48);
              if (v165)
              {
                *(_QWORD *)(v306[0] + 56) = v165;
                operator delete(v165);
              }
              v166 = *(void **)(v164 + 24);
              if (v166)
              {
                *(_QWORD *)(v164 + 32) = v166;
                operator delete(v166);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v164 + 8);
              v155 = v164;
              v167 = 2071181815;
LABEL_250:
              v156 = v167 | 0x1030C4000000000;
LABEL_251:
              MEMORY[0x219A19A08](v155, v156);
            }
          }
          break;
        default:
          break;
      }
      memset(v306, 0, 13);
      v290[0] = (void **)&v287;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v290);
      if (SHIBYTE(__p.__end_cap_.__value_) < 0)
        operator delete(__p.__begin_);
      v180 = v291.__end_;
      if (v291.__end_ >= v291.__end_cap_.__value_)
      {
        v182 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v291, (__int128 *)&v289);
      }
      else
      {
        if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v291.__end_, v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
        }
        else
        {
          v181 = *(_OWORD *)&v289.__r_.__value_.__l.__data_;
          v291.__end_->__r_.__value_.__r.__words[2] = v289.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v180->__r_.__value_.__l.__data_ = v181;
        }
        v182 = v180 + 1;
      }
      v291.__end_ = v182;
      turi::gl_sframe::select_columns((uint64_t)a2, (uint64_t)&v291, &__p);
      turi::gl_sframe::operator=((uint64_t)a2, (uint64_t)&__p);
      __p.__begin_ = (std::vector<std::string>::pointer)off_24D91E9C0;
      v183 = (std::__shared_weak_count *)__p.__end_cap_.__value_;
      if (__p.__end_cap_.__value_)
      {
        v184 = &__p.__end_cap_.__value_->__r_.__value_.__l.__size_;
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
      if (!turi::gl_sframe::empty((turi::gl_sframe *)&v307))
      {
        turi::gl_sframe::select_columns((uint64_t)&v307, (uint64_t)&v291, &__p);
        turi::gl_sframe::operator=((uint64_t)&v307, (uint64_t)&__p);
        __p.__begin_ = (std::vector<std::string>::pointer)off_24D91E9C0;
        v186 = (std::__shared_weak_count *)__p.__end_cap_.__value_;
        if (__p.__end_cap_.__value_)
        {
          v187 = &__p.__end_cap_.__value_->__r_.__value_.__l.__size_;
          do
            v188 = __ldaxr(v187);
          while (__stlxr(v188 - 1, v187));
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
            std::__shared_weak_count::__release_weak(v186);
          }
        }
      }
      __p.__begin_ = (std::vector<std::string>::pointer)&v291;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (a6)
      {
        turi::ml_data::ml_data((uint64_t)&__p, (_QWORD *)a1 + 96);
        turi::ml_data::operator=((uint64_t)a1 + 384, (uint64_t)&__p);
        v189 = v305;
        if (v305)
        {
          p_shared_owners = (unint64_t *)&v305->__shared_owners_;
          do
            v191 = __ldaxr(p_shared_owners);
          while (__stlxr(v191 - 1, p_shared_owners));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
            std::__shared_weak_count::__release_weak(v189);
          }
        }
        v291.__begin_ = (std::vector<std::string>::pointer)v304;
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
        v192 = v303;
        if (v303)
        {
          v193 = (unint64_t *)&v303->__shared_owners_;
          do
            v194 = __ldaxr(v193);
          while (__stlxr(v194 - 1, v193));
          if (!v194)
          {
            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
            std::__shared_weak_count::__release_weak(v192);
          }
        }
        v291.__begin_ = (std::vector<std::string>::pointer)v300;
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
        if (v297)
        {
          v298 = v297;
          operator delete(v297);
        }
        v195 = (std::__shared_weak_count *)__p.__end_;
        if (__p.__end_)
        {
          v196 = &__p.__end_->__r_.__value_.__l.__size_;
          do
            v197 = __ldaxr(v196);
          while (__stlxr(v197 - 1, v196));
          if (!v197)
          {
            ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
            std::__shared_weak_count::__release_weak(v195);
          }
        }
        turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)&__p);
        std::string::basic_string[abi:ne180100]<0>(&v291, "");
        v286[0] = 0;
        v286[1] = 0;
        v285 = (const void **)v286;
        v198 = (*(uint64_t (**)(turi::supervised_2::supervised_learning_model_base *))(*(_QWORD *)a1 + 88))(a1);
        turi::ml_data::fill((uint64_t)a1 + 384, (uint64_t)&__p, (std::string::size_type)&v291, &v285, 0, v198);
        v199 = (char *)v286[0];
        v200 = &v285;
      }
      else
      {
        turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)&__p);
        if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)&v291, v289.__r_.__value_.__l.__data_, v289.__r_.__value_.__l.__size_);
        else
          v291 = (std::vector<std::string>)v289;
        v292 = v38;
        std::map<std::string,turi::ml_column_mode>::map[abi:ne180100]((uint64_t)v284, (const void **)&v291.__begin_, 1);
        v201 = (*(uint64_t (**)(turi::supervised_2::supervised_learning_model_base *))(*(_QWORD *)a1 + 88))(a1);
        turi::ml_data::fill((uint64_t)a1 + 384, (uint64_t)&__p, (std::string::size_type)&v289, v284, 0, v201);
        v199 = (char *)v284[1];
        v200 = v284;
      }
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v200, v199);
      if (SHIBYTE(v291.__end_cap_.__value_) < 0)
        operator delete(v291.__begin_);
      turi::sframe::~sframe((turi::sframe *)&__p);
      turi::ml_data::ml_data((uint64_t)&__p, (_QWORD *)a1 + 48);
      turi::ml_data::operator=((uint64_t)a1 + 576, (uint64_t)&__p);
      v202 = v305;
      if (v305)
      {
        v203 = (unint64_t *)&v305->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
        }
      }
      v291.__begin_ = (std::vector<std::string>::pointer)v304;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
      v205 = v303;
      if (v303)
      {
        v206 = (unint64_t *)&v303->__shared_owners_;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      v291.__begin_ = (std::vector<std::string>::pointer)v300;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v291);
      if (v297)
      {
        v298 = v297;
        operator delete(v297);
      }
      v208 = (std::__shared_weak_count *)__p.__end_;
      if (__p.__end_)
      {
        v209 = &__p.__end_->__r_.__value_.__l.__size_;
        do
          v210 = __ldaxr(v209);
        while (__stlxr(v210 - 1, v209));
        if (!v210)
        {
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
        }
      }
      turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)&v307, (turi::sframe *)&__p);
      std::string::basic_string[abi:ne180100]<0>(&v291, "");
      v283[0] = 0;
      v283[1] = 0;
      v282 = v283;
      v211 = (*(uint64_t (**)(turi::supervised_2::supervised_learning_model_base *))(*(_QWORD *)a1 + 96))(a1);
      turi::ml_data::fill((uint64_t)a1 + 576, (uint64_t)&__p, (std::string::size_type)&v291, (const void ***)&v282, 0, v211);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v282, v283[0]);
      if (SHIBYTE(v291.__end_cap_.__value_) < 0)
        operator delete(v291.__begin_);
      turi::sframe::~sframe((turi::sframe *)&__p);
      v212 = (turi::ml_metadata **)((char *)a1 + 768);
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)a1 + 96, (uint64_t *)a1 + 48);
      if ((a6 & 1) == 0)
        turi::ml_metadata::set_training_index_sizes_to_current_column_sizes(*v212);
      *((_QWORD *)a1 + 41) = *(_QWORD *)(*((_QWORD *)a1 + 96) + 64);
      if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v289.__r_.__value_.__l.__data_);
      v307.__locale_ = (std::locale::__imp *)off_24D91E9C0;
      v213 = v309;
      if (v309)
      {
        v214 = (unint64_t *)&v309->__shared_owners_;
        do
          v215 = __ldaxr(v214);
        while (__stlxr(v215 - 1, v214));
        if (!v215)
        {
          ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
          std::__shared_weak_count::__release_weak(v213);
        }
      }
      v216 = *v212;
      if (v38)
      {
        v217 = *(_QWORD *)(*((_QWORD *)v216 + 3) + 64);
        *((_QWORD *)a1 + 98) = v217;
        if (v217 <= 1)
          turi::supervised_2::supervised_learning_model_base::setup_iterative_training(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&,BOOL)::$_4::operator()();
        turi::supervised_2::supervised_learning_model_base::_setup_class_weights(a1);
        std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
        v294[1] = *((_QWORD *)a1 + 98);
        v295 = 0;
        v296 = 0;
        LODWORD(v294[0]) = 0;
        std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v291, (const void **)&__p.__begin_, 1);
        turi::ml_model_base::add_or_update_state((uint64_t)a1, &v291);
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v291, (char *)v291.__end_);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v294);
        if (SHIBYTE(__p.__end_cap_.__value_) < 0)
          operator delete(__p.__begin_);
        v216 = *v212;
      }
      memset(&v291, 0, sizeof(v291));
      v219 = v216;
      v218 = *(_QWORD *)v216;
      if (*((_QWORD *)v219 + 1) == v218)
        goto LABEL_392;
      v220 = 0;
      do
      {
        v221 = (uint64_t *)(v218 + 16 * v220);
        v223 = *v221;
        v222 = (std::__shared_weak_count *)v221[1];
        if (v222)
        {
          v224 = (unint64_t *)&v222->__shared_owners_;
          do
            v225 = __ldxr(v224);
          while (__stxr(v225 + 1, v224));
          do
            v226 = __ldaxr(v224);
          while (__stlxr(v226 - 1, v224));
          if (!v226)
          {
            ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
            std::__shared_weak_count::__release_weak(v222);
          }
        }
        v227 = (uint64_t *)(*(_QWORD *)*v212 + 16 * v220);
        v228 = *v227;
        v229 = (std::__shared_weak_count *)v227[1];
        if (v229)
        {
          v230 = (unint64_t *)&v229->__shared_owners_;
          do
            v231 = __ldxr(v230);
          while (__stxr(v231 + 1, v230));
          v232 = *(_QWORD *)(v228 + 64);
          do
            v233 = __ldaxr(v230);
          while (__stlxr(v233 - 1, v230));
          if (!v233)
          {
            ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
            std::__shared_weak_count::__release_weak(v229);
          }
          if (!v232)
            goto LABEL_364;
        }
        else
        {
          v232 = *(_QWORD *)(v228 + 64);
          if (!v232)
            goto LABEL_364;
        }
        v234 = 0;
        while (fabs(turi::ml_data_internal::column_statistics::stdev(*(turi::ml_data_internal::column_statistics **)(v223 + 48), v234)) >= 1.0e-20)
        {
          if (v232 == ++v234)
            goto LABEL_364;
        }
        v235 = (uint64_t *)(*(_QWORD *)*v212 + 16 * v220);
        v236 = *v235;
        v237 = (std::__shared_weak_count *)v235[1];
        if (v237)
        {
          v238 = (unint64_t *)&v237->__shared_owners_;
          do
            v239 = __ldxr(v238);
          while (__stxr(v239 + 1, v238));
          do
            v240 = __ldaxr(v238);
          while (__stlxr(v240 - 1, v238));
          if (!v240)
          {
            ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
            std::__shared_weak_count::__release_weak(v237);
          }
        }
        v241 = v291.__end_;
        if (v291.__end_ >= v291.__end_cap_.__value_)
        {
          v243 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v291, (__int128 *)v236);
        }
        else
        {
          if (*(char *)(v236 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v291.__end_, *(const std::string::value_type **)v236, *(_QWORD *)(v236 + 8));
          }
          else
          {
            v242 = *(_OWORD *)v236;
            v291.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v236 + 16);
            *(_OWORD *)&v241->__r_.__value_.__l.__data_ = v242;
          }
          v243 = v241 + 1;
        }
        v291.__end_ = v243;
LABEL_364:
        ++v220;
        v218 = *(_QWORD *)*v212;
      }
      while (v220 < (*((_QWORD *)*v212 + 1) - v218) >> 4);
      if (v291.__begin_ != v291.__end_ && *((_BYTE *)a1 + 320))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"WARNING: Detected extremely low variance for feature(s) ", 56);
        if ((std::vector<std::string>::pointer)((char *)v291.__end_ - (char *)v291.__begin_) != (std::vector<std::string>::pointer)24)
        {
          v244 = 0;
          v245 = 0;
          do
          {
            v246 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"'", 1);
            v247 = SHIBYTE(v291.__begin_[v244].__r_.__value_.__r.__words[2]);
            if (v247 >= 0)
              data = &v291.__begin_[v244];
            else
              data = (std::string *)v291.__begin_[v244].__r_.__value_.__l.__data_;
            if (v247 >= 0)
              size = HIBYTE(v291.__begin_[v244].__r_.__value_.__r.__words[2]);
            else
              size = v291.__begin_[v244].__r_.__value_.__l.__size_;
            v250 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v246, (uint64_t)data, size);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v250, (uint64_t)"', ", 3);
            ++v245;
            ++v244;
          }
          while (v245 < -1 - 0x5555555555555555 * (((char *)v291.__end_ - (char *)v291.__begin_) >> 3));
        }
        v251 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"'", 1);
        v252 = SHIBYTE(v291.__end_[-1].__r_.__value_.__r.__words[2]);
        if (v252 >= 0)
          v253 = v291.__end_ - 1;
        else
          v253 = (std::vector<std::string>::pointer)v291.__end_[-1].__r_.__value_.__l.__data_;
        if (v252 >= 0)
          v254 = HIBYTE(v291.__end_[-1].__r_.__value_.__r.__words[2]);
        else
          v254 = v291.__end_[-1].__r_.__value_.__l.__size_;
        v255 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v251, (uint64_t)v253, v254);
        v256 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v255, (uint64_t)"'", 1);
        v257 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v256, (uint64_t)" because all entries are nearly the same.\n", 42);
        v258 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)"Proceeding with model training using all features. ", 51);
        v259 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v258, (uint64_t)"If the model does not provide results of adequate quality, ", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v259, (uint64_t)"exclude the above mentioned feature(s) from the input dataset.", 62);
        v260 = (int *)global_logger();
        if (v260[169] <= 4)
        {
          if (cppipc::must_cancel((cppipc *)v260))
            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
          v261 = (file_logger *)global_logger();
          started = file_logger::start_stream(v261, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/supervised_learning_base.cpp", "setup_iterative_training", 224, 1);
          std::stringbuf::str();
          v263 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v280);
          v264 = pthread_getspecific(*(_QWORD *)(v263 + 592));
          if (v264)
          {
            if (*((_BYTE *)v264 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v264 + *(_QWORD *)(v264[2] - 24) + 16));
              v265 = std::locale::use_facet(&v307, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v265->__vftable[2].~facet_0)(v265, 10);
              std::locale::~locale(&v307);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v263);
              if (*(_DWORD *)(v263 + 600) == 7)
              {
                __print_back_trace();
                exception = __cxa_allocate_exception(8uLL);
                *exception = "LOG_FATAL encountered";
                __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
              }
            }
          }
          if (v281 < 0)
            operator delete(v280);
        }
        __p.__begin_ = (std::vector<std::string>::pointer)*MEMORY[0x24BEDB800];
        *(std::vector<std::string>::pointer *)((char *)&__p.__begin_ + __p.__begin_[-1].__r_.__value_.__r.__words[0]) = *(std::vector<std::string>::pointer *)(MEMORY[0x24BEDB800] + 24);
        __p.__end_ = (std::vector<std::string>::pointer)(MEMORY[0x24BEDB848] + 16);
        if (SHIBYTE(v299) < 0)
          operator delete(v298);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x219A198F4](&v301);
      }
LABEL_392:
      __p.__begin_ = (std::vector<std::string>::pointer)&v291;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v266 = *(_QWORD *)a1;
      if ((a6 & 1) != 0)
        return (*(uint64_t (**)(turi::supervised_2::supervised_learning_model_base *, uint64_t))(v266 + 128))(a1, 1);
      if ((*(unsigned int (**)(turi::supervised_2::supervised_learning_model_base *))(v266 + 112))(a1))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "feature_rescaling");
        option_value = turi::ml_model_base::get_option_value((uint64_t)a1, (const void **)&__p.__begin_);
        v269 = 0;
        switch(*(_BYTE *)(option_value + 12))
        {
          case 0:
            v270 = *(_QWORD *)option_value == 0;
            goto LABEL_402;
          case 1:
            v270 = *(double *)option_value == 0.0;
            goto LABEL_402;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_405;
          case 6:
            v270 = (*(_QWORD *)option_value & 0xFFFFFFFFFFFFFFLL) == 0 && *(_DWORD *)(option_value + 8) == 0;
LABEL_402:
            v269 = v270;
LABEL_405:
            *((_BYTE *)a1 + 360) = v269 ^ 1;
            if (SHIBYTE(__p.__end_cap_.__value_) < 0)
              operator delete(__p.__begin_);
            v271 = *((_QWORD *)a1 + 41);
            if (*((_QWORD *)a1 + 47) != v271)
            {
              Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)a1 + 46, *((_QWORD *)a1 + 41), 1);
              v271 = *((_QWORD *)a1 + 47);
            }
            v272 = *((_QWORD *)a1 + 46);
            if (v271 >= 0)
              v273 = v271;
            else
              v273 = v271 + 1;
            v274 = v273 & 0xFFFFFFFFFFFFFFFELL;
            if (v271 >= 2)
            {
              v275 = 2;
              if (v274 > 2)
                v275 = v273 & 0xFFFFFFFFFFFFFFFELL;
              memset_pattern16(*((void **)a1 + 46), &unk_218712770, ((8 * v275 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
            }
            if (v274 < v271)
              memset_pattern16((void *)(v272 + 16 * (v273 >> 1)), &unk_218712770, 8 * v271 - 16 * (v273 >> 1));
            break;
          default:
            result = turi::flexible_type_fail(0);
            goto LABEL_449;
        }
      }
      else
      {
        *((_BYTE *)a1 + 360) = 0;
      }
      if (v38)
        turi::supervised_2::supervised_learning_model_base::_setup_class_weights(a1);
      result = (*(uint64_t (**)(turi::supervised_2::supervised_learning_model_base *, _QWORD))(*(_QWORD *)a1 + 128))(a1, 0);
      *((_QWORD *)a1 + 99) = 0;
      return result;
    default:
      result = turi::flexible_type_fail(0);
LABEL_449:
      __break(1u);
      return result;
  }
}

void sub_2184DD2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::supervised_2::supervised_learning_model_base::_setup_class_weights(turi::supervised_2::supervised_learning_model_base *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  double v31;
  void *v32;
  double v33;
  double v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  turi::ml_data_internal::column_indexer *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  unsigned int v55;
  double v56;
  double v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  __int128 v72;
  __int128 v73;
  float v74;
  unint64_t v75;
  double v76;
  uint64_t *v77;
  double v78;
  unsigned int v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int v96;
  __int128 v97;
  __int128 v98;
  float v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  turi::flexible_type_impl *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  std::string *p_str;
  std::string::size_type v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  const std::locale::facet *v113;
  int *v114;
  file_logger *v115;
  file_logger *started;
  uint64_t i;
  std::__shared_weak_count *size;
  unint64_t *v119;
  unint64_t v120;
  int v121;
  double v122;
  double v123;
  _QWORD *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  size_t v147;
  double *v148;
  double *v149;
  unint64_t v150;
  double *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  double v155;
  double v156;
  double v157;
  double v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  size_t v162;
  int v163;
  int v164;
  int v165;
  int v166;
  BOOL v168;
  uint64_t v169;
  std::string::size_type v170;
  std::string::size_type v171;
  unint64_t *v172;
  unint64_t v173;
  __n128 v174;
  __n128 v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *p_shared_owners;
  unint64_t v183;
  unint64_t v184;
  std::string::size_type v185;
  std::string::size_type v186;
  uint64_t v187;
  int v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  double v198;
  double v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  double v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  double v208;
  void *v209;
  void *v210;
  unsigned int v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  double v215;
  void *v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  double v223;
  _QWORD *v224;
  std::runtime_error *exception;
  std::string *v226;
  __int128 v227;
  double v228;
  _QWORD *v229;
  const char *v230;
  std::runtime_error *v231;
  std::string *v232;
  __int128 v233;
  std::string::size_type v234;
  __int128 v235;
  std::string *v236;
  std::string::size_type v237;
  _QWORD *v238;
  size_t v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  unint64_t v243;
  turi::flexible_type_impl *v244;
  uint64_t v245;
  __int128 v246;
  std::string *v247;
  std::string::size_type v248;
  uint64_t v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  std::string::size_type v253;
  std::string::size_type v254;
  std::string::size_type v255;
  turi::supervised_2::supervised_learning_model_base *v256;
  void *v257;
  char v258;
  char *v259;
  char *v260;
  unint64_t v261;
  char v262[8];
  uint64_t v263;
  uint64_t v264;
  turi::ml_data_internal::column_indexer *v265;
  std::__shared_weak_count *v266;
  std::string __p;
  uint64_t v268;
  void *v269;
  void *v270;
  void *v271;
  char v272;
  uint64_t v273;
  _QWORD v274[3];
  size_t v275[3];
  size_t v276;
  size_t v277;
  uint64_t v278;
  std::string v279;
  size_t __idx;
  std::string __str;
  double v282;
  unsigned int *v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  void *v287;
  char v288;
  uint64_t v289;
  double v290[5];

  v290[2] = *(double *)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 96) + 24) + 64);
  std::string::basic_string[abi:ne180100]<0>(&__p, "class_weights");
  v3 = turi::option_manager::value((uint64_t)this + 224, (const void **)&__p.__r_.__value_.__l.__data_);
  memset(v290, 0, 13);
  if ((double *)v3 != v290)
  {
    v4 = *(double *)v3;
    *(double *)((char *)v290 + 5) = *(double *)(v3 + 5);
    v290[0] = v4;
    BYTE4(v290[1]) = *(_BYTE *)(v3 + 12);
    if (BYTE4(v290[1]) <= 9u && ((1 << SBYTE4(v290[1])) & 0x33C) != 0)
    {
      v6 = *(unint64_t **)&v290[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (BYTE4(v290[1]) != 7)
  {
    v282 = 0.0;
    LODWORD(v283) = 0;
    BYTE4(v283) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "auto");
    turi::flexible_type::operator=<std::string>((uint64_t *)&v282, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    switch(BYTE4(v283))
    {
      case 0:
        switch(BYTE4(v290[1]))
        {
          case 0:
            v12 = *(_QWORD *)&v290[0] == *(_QWORD *)&v282;
            goto LABEL_284;
          case 1:
            v33 = v290[0];
            v34 = v282;
            goto LABEL_283;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_92;
          case 6:
            v12 = *(_QWORD *)&v282 == (uint64_t)(*(_QWORD *)&v290[0] << 8) >> 8 && LODWORD(v290[1]) == 0;
            goto LABEL_284;
          default:
            goto LABEL_421;
        }
      case 1:
        switch(BYTE4(v290[1]))
        {
          case 0:
            v33 = v282;
            v34 = v290[0];
LABEL_283:
            v12 = v33 == (double)*(uint64_t *)&v34;
            goto LABEL_284;
          case 1:
            v13 = v290[0] == v282;
            goto LABEL_310;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_92;
          case 6:
            v157 = v282;
            v158 = (double)SLODWORD(v290[1]) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v290[0] << 8) >> 8);
            goto LABEL_289;
          default:
            goto LABEL_421;
        }
      case 2:
        if (BYTE4(v290[1]) - 3 < 7 || BYTE4(v290[1]) < 2u)
        {
          v13 = 0;
LABEL_46:
          v23 = *(unint64_t **)&v282;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = v282;
            if (v282 == 0.0)
              goto LABEL_91;
            if (*(char *)(*(_QWORD *)&v282 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v282 + 8));
            v21 = v26;
            v27 = 0x1012C404EF22A49;
            goto LABEL_90;
          }
LABEL_311:
          if (!v13)
            goto LABEL_92;
LABEL_312:
          v169 = *(_QWORD *)(*((_QWORD *)this + 96) + 24);
          v171 = *(_QWORD *)(v169 + 48);
          v170 = *(_QWORD *)(v169 + 56);
          __p.__r_.__value_.__r.__words[0] = v171;
          __p.__r_.__value_.__l.__size_ = v170;
          if (v170)
          {
            v172 = (unint64_t *)(v170 + 8);
            do
              v173 = __ldxr(v172);
            while (__stxr(v173 + 1, v172));
          }
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 43, v2);
          if (v2)
          {
            v176 = 0;
            v177 = 0;
            v174.n128_u64[0] = 0;
            v175.n128_u64[0] = 1.0;
            while (1)
            {
              v178 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 80);
              if ((*(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 24) | 2) != 2)
              {
                v180 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 32);
                if (v177 >= (*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 40) - v180) >> 3)
                {
                  v179 = 0;
                  goto LABEL_319;
                }
                v178 = (unint64_t *)(v180 + v176);
              }
              v179 = *v178;
LABEL_319:
              v174.n128_f64[0] = v174.n128_f64[0] + 1.0 / (double)v179;
              ++v177;
              v176 += 8;
              if (v2 == v177)
                goto LABEL_325;
            }
          }
          v174.n128_u64[0] = 0;
LABEL_325:
          v181 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)this + 96) + 24) + 40);
          if (v181)
          {
            p_shared_owners = (unint64_t *)&v181->__shared_owners_;
            do
              v183 = __ldxr(p_shared_owners);
            while (__stxr(v183 + 1, p_shared_owners));
          }
          if (!v2)
          {
LABEL_337:
            *((_BYTE *)this + 336) = 1;
            if (v181)
            {
              v192 = (unint64_t *)&v181->__shared_owners_;
              do
                v193 = __ldaxr(v192);
              while (__stlxr(v193 - 1, v192));
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *, __n128, __n128))v181->__on_zero_shared)(v181, v174, v175);
                std::__shared_weak_count::__release_weak(v181);
              }
            }
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_)
              goto LABEL_347;
            v194 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v120 = __ldaxr(v194);
            while (__stlxr(v120 - 1, v194));
LABEL_345:
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
            goto LABEL_347;
          }
          v184 = 0;
          v185 = __p.__r_.__value_.__r.__words[0];
          v186 = __p.__r_.__value_.__r.__words[0] + 80;
          v187 = *((_QWORD *)this + 43);
          v188 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 24) | 2;
          v175.n128_u64[0] = 1.0;
          while (1)
          {
            v189 = (unint64_t *)v186;
            if (v188 != 2)
            {
              v191 = *(_QWORD *)(v185 + 32);
              if (v184 >= (*(_QWORD *)(v185 + 40) - v191) >> 3)
              {
                v190 = 0;
                goto LABEL_332;
              }
              v189 = (unint64_t *)(v191 + 8 * v184);
            }
            v190 = *v189;
LABEL_332:
            *(double *)(v187 + 8 * v184++) = 1.0 / (v174.n128_f64[0] * (double)v190);
            if (v184 == v2)
              goto LABEL_337;
          }
        }
        if (BYTE4(v290[1]) != 2)
          goto LABEL_421;
        if (*(char *)(*(_QWORD *)&v290[0] + 31) < 0)
          v147 = *(_QWORD *)(*(_QWORD *)&v290[0] + 16);
        else
          v147 = *(unsigned __int8 *)(*(_QWORD *)&v290[0] + 31);
        if (*(char *)(*(_QWORD *)&v282 + 31) < 0)
          v159 = *(_QWORD *)(*(_QWORD *)&v282 + 16);
        else
          v159 = *(unsigned __int8 *)(*(_QWORD *)&v282 + 31);
        if (v147 != v159)
          goto LABEL_308;
        v160 = (_QWORD *)(*(_QWORD *)&v290[0] + 8);
        if ((*(_BYTE *)(*(_QWORD *)&v290[0] + 31) & 0x80) != 0)
          v160 = (_QWORD *)*v160;
        v161 = (_QWORD *)(*(_QWORD *)&v282 + 8);
        if ((*(_BYTE *)(*(_QWORD *)&v282 + 31) & 0x80) != 0)
          v161 = (_QWORD *)*v161;
        if ((*(_BYTE *)(*(_QWORD *)&v290[0] + 31) & 0x80) == 0)
        {
          if (v147)
          {
            v162 = v147 - 1;
            do
            {
              v164 = *(unsigned __int8 *)v160;
              v160 = (_QWORD *)((char *)v160 + 1);
              v163 = v164;
              v166 = *(unsigned __int8 *)v161;
              v161 = (_QWORD *)((char *)v161 + 1);
              v165 = v166;
              v168 = v162-- != 0;
              v13 = v163 == v165;
            }
            while (v163 == v165 && v168);
            goto LABEL_310;
          }
          goto LABEL_309;
        }
        v12 = memcmp(v160, v161, v147) == 0;
LABEL_284:
        v13 = v12;
        goto LABEL_310;
      case 3:
        if (BYTE4(v290[1]) > 9u)
          goto LABEL_421;
        if (BYTE4(v290[1]) != 3)
        {
          v13 = 0;
LABEL_56:
          v28 = *(unint64_t **)&v282;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = v282;
            if (v282 == 0.0)
              goto LABEL_91;
            v32 = *(void **)(*(_QWORD *)&v282 + 8);
            if (v32)
            {
              *(_QWORD *)(*(_QWORD *)&v282 + 16) = v32;
              operator delete(v32);
            }
            v21 = v31;
            v27 = 0x1080C409938AC02;
            goto LABEL_90;
          }
          goto LABEL_311;
        }
        v148 = *(double **)(*(_QWORD *)&v290[0] + 8);
        v149 = *(double **)(*(_QWORD *)&v290[0] + 16);
        v150 = v149 - v148;
        v151 = *(double **)(*(_QWORD *)&v282 + 8);
        if (v150 != (uint64_t)(*(_QWORD *)(*(_QWORD *)&v282 + 16) - (_QWORD)v151) >> 3)
          goto LABEL_308;
        if (v149 == v148)
          goto LABEL_309;
        if (v150 <= 1)
          v152 = 1;
        else
          v152 = v149 - v148;
        if (*v148 != *v151)
          goto LABEL_308;
        v153 = 1;
        do
        {
          v154 = v153;
          if (v152 == v153)
            break;
          v155 = v148[v153];
          v156 = v151[v153++];
        }
        while (v155 == v156);
        v13 = v154 >= v150;
        goto LABEL_310;
      case 4:
        if (BYTE4(v290[1]) > 9u)
          goto LABEL_421;
        if (BYTE4(v290[1]) != 4)
        {
          v13 = 0;
LABEL_31:
          v14 = *(unint64_t **)&v282;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (v16)
            goto LABEL_311;
          v17 = v282;
          if (v282 == 0.0)
            goto LABEL_91;
          __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v282 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_77:
          v21 = v17;
          v27 = 0x1020C405E66F15BLL;
LABEL_90:
          MEMORY[0x219A19A08](*(_QWORD *)&v21, v27);
LABEL_91:
          if (!v13)
          {
LABEL_92:
            if (BYTE4(v290[1]) != 5)
            {
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
              v229 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"The class_weights parameter cannot be of type ", 46);
              if ((unint64_t)SBYTE4(v290[1]) > 9)
                v230 = "undefined";
              else
                v230 = off_24D945D28[SBYTE4(v290[1])];
              v239 = strlen(v230);
              v240 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229, (uint64_t)v230, v239);
              v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v240, (uint64_t)".", 1);
              v242 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, (uint64_t)" Class weights must be a dictionary, None or 'auto'", 51);
              std::endl[abi:ne180100]<char,std::char_traits<char>>(v242);
              v282 = COERCE_DOUBLE(&__p);
              turi::supervised_2::supervised_learning_model_base::_setup_class_weights(void)::{lambda(void)#3}::operator()();
            }
            v42 = *(_QWORD *)(*((_QWORD *)this + 96) + 24);
            v44 = *(turi::ml_data_internal::column_indexer **)(v42 + 32);
            v43 = *(std::__shared_weak_count **)(v42 + 40);
            v265 = v44;
            v266 = v43;
            if (v43)
            {
              v45 = (unint64_t *)&v43->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
            turi::flex_dict_view::flex_dict_view((turi::flex_dict_view *)v262, (const turi::flexible_type *)v290);
            v47 = (_QWORD *)((char *)this + 344);
            Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 43, v2);
            v49 = *((_QWORD *)this + 43);
            v48 = *((_QWORD *)this + 44);
            if (v48 >= 0)
              v50 = *((_QWORD *)this + 44);
            else
              v50 = v48 + 1;
            v51 = v50 & 0xFFFFFFFFFFFFFFFELL;
            if (v48 >= 2)
            {
              v52 = 2;
              if (v51 > 2)
                v52 = v50 & 0xFFFFFFFFFFFFFFFELL;
              memset_pattern16(*((void **)this + 43), &unk_218712760, ((8 * v52 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
            }
            v256 = this;
            if (v51 < v48)
              memset_pattern16((void *)(v49 + 16 * (v50 >> 1)), &unk_218712760, 8 * v48 - 16 * (v50 >> 1));
            v260 = 0;
            v261 = 0;
            v259 = 0;
            v53 = *(uint64_t **)(*(_QWORD *)&v290[0] + 8);
            v54 = *(uint64_t **)(*(_QWORD *)&v290[0] + 16);
            if (v53 == v54)
              goto LABEL_225;
            while (2)
            {
              v55 = *((unsigned __int8 *)v53 + 28);
              if (v55 <= 1)
              {
                v56 = v55 == 1 ? *((double *)v53 + 2) : (double)v53[2];
                if ((*(_QWORD *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                {
                  switch(*((_BYTE *)v53 + 28))
                  {
                    case 0:
                      v57 = (double)v53[2];
                      goto LABEL_141;
                    case 1:
                      v57 = *((double *)v53 + 2);
                      goto LABEL_141;
                    case 2:
                      v62 = v53[2];
                      __idx = 0;
                      v63 = (char *)(v62 + 8);
                      if (*(char *)(v62 + 31) < 0)
                        v63 = *(char **)(v62 + 8);
                      std::string::basic_string[abi:ne180100]<0>(&__str, v63);
                      v64 = std::stod(&__str, &__idx);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                      if (*(char *)(v62 + 31) < 0)
                        v65 = *(_QWORD *)(v62 + 16);
                      else
                        v65 = *(unsigned __int8 *)(v62 + 31);
                      if (__idx != v65)
                      {
                        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::operator+<char>();
                        v226 = std::string::append(&v279, " cannot be interpreted as a float");
                        v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
                        __str.__r_.__value_.__r.__words[2] = v226->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v227;
                        v226->__r_.__value_.__l.__size_ = 0;
                        v226->__r_.__value_.__r.__words[2] = 0;
                        v226->__r_.__value_.__r.__words[0] = 0;
                        std::runtime_error::runtime_error(exception, &__str);
                        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                      }
                      v74 = v64;
                      v57 = v74;
                      goto LABEL_141;
                    case 3:
                      v58 = v53[2];
                      v278 = 0;
                      v277 = 0;
                      v276 = 0;
                      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v276, *(const void **)(v58 + 8), *(_QWORD *)(v58 + 16), (uint64_t)(*(_QWORD *)(v58 + 16) - *(_QWORD *)(v58 + 8)) >> 3);
                      turi::flexible_type_fail(0);
                      if (v276)
                      {
                        v277 = v276;
                        operator delete((void *)v276);
                      }
                      goto LABEL_142;
                    case 4:
                      v66 = v53[2];
                      memset(v275, 0, sizeof(v275));
                      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v275, *(uint64_t **)(v66 + 8), *(uint64_t **)(v66 + 16), (uint64_t)(*(_QWORD *)(v66 + 16) - *(_QWORD *)(v66 + 8)) >> 4);
                      turi::flexible_type_fail(0);
                      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v275;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                      goto LABEL_142;
                    case 5:
                      v67 = v53[2];
                      memset(v274, 0, sizeof(v274));
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v274, *(uint64_t **)(v67 + 8), *(uint64_t **)(v67 + 16), (uint64_t)(*(_QWORD *)(v67 + 16) - *(_QWORD *)(v67 + 8)) >> 5);
                      turi::flexible_type_fail(0);
                      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v274;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                      goto LABEL_142;
                    case 6:
                      v57 = (double)*((int *)v53 + 6) / 1000000.0 + (double)(v53[2] << 8 >> 8);
LABEL_141:
                      if (v57 >= 0.0)
                        goto LABEL_142;
                      goto LABEL_391;
                    case 7:
                      goto LABEL_142;
                    case 8:
                      v68 = v53[2];
                      v69 = *(unsigned int **)(v68 + 16);
                      v282 = *(double *)(v68 + 8);
                      v283 = v69;
                      if (v69)
                      {
                        v70 = v69 + 2;
                        do
                          v71 = __ldxr(v70);
                        while (__stxr(v71 + 1, v70));
                      }
                      v72 = *(_OWORD *)(v68 + 24);
                      v73 = *(_OWORD *)(v68 + 56);
                      v285 = *(_OWORD *)(v68 + 40);
                      v286 = v73;
                      v284 = v72;
                      turi::flexible_type_fail(0);
                      boost::detail::shared_count::~shared_count(&v283);
                      goto LABEL_142;
                    case 9:
                      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v53[2] + 8);
                      turi::flexible_type_fail(0);
                      if (v269)
                      {
                        v270 = v269;
                        operator delete(v269);
                      }
                      if (__p.__r_.__value_.__r.__words[2])
                      {
                        v268 = __p.__r_.__value_.__r.__words[2];
                        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                      }
                      v59 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                      if (__p.__r_.__value_.__l.__size_)
                      {
                        v60 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                        do
                          v61 = __ldaxr(v60);
                        while (__stlxr(v61 - 1, v60));
                        if (!v61)
                        {
                          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                          std::__shared_weak_count::__release_weak(v59);
                        }
                      }
LABEL_142:
                      v75 = turi::ml_data_internal::column_indexer::immutable_map_value_to_index((void **)v265, (const turi::flexible_type *)v53);
                      if (v75 < v2)
                      {
                        v76 = 0.0;
                        switch(*((_BYTE *)v53 + 28))
                        {
                          case 0:
                            v76 = (double)v53[2];
                            goto LABEL_182;
                          case 1:
                            v76 = *((double *)v53 + 2);
                            goto LABEL_182;
                          case 2:
                            v87 = v53[2];
                            v276 = 0;
                            v88 = (char *)(v87 + 8);
                            if (*(char *)(v87 + 31) < 0)
                              v88 = *(char **)(v87 + 8);
                            std::string::basic_string[abi:ne180100]<0>(&__p, v88);
                            v89 = std::stod(&__p, &v276);
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__p.__r_.__value_.__l.__data_);
                            if (*(char *)(v87 + 31) < 0)
                              v90 = *(_QWORD *)(v87 + 16);
                            else
                              v90 = *(unsigned __int8 *)(v87 + 31);
                            if (v276 != v90)
                            {
                              v231 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                              std::operator+<char>();
                              v232 = std::string::append(&__str, " cannot be interpreted as a float");
                              v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
                              __p.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
                              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v233;
                              v232->__r_.__value_.__l.__size_ = 0;
                              v232->__r_.__value_.__r.__words[2] = 0;
                              v232->__r_.__value_.__r.__words[0] = 0;
                              std::runtime_error::runtime_error(v231, &__p);
                              __cxa_throw(v231, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                            }
                            v99 = v89;
                            v76 = v99;
                            goto LABEL_182;
                          case 3:
                            v83 = v53[2];
                            memset(&__p, 0, sizeof(__p));
                            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v83 + 8), *(_QWORD *)(v83 + 16), (uint64_t)(*(_QWORD *)(v83 + 16) - *(_QWORD *)(v83 + 8)) >> 3);
                            turi::flexible_type_fail(0);
                            if (__p.__r_.__value_.__r.__words[0])
                            {
                              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                              operator delete(__p.__r_.__value_.__l.__data_);
                            }
                            goto LABEL_182;
                          case 4:
                            v91 = v53[2];
                            memset(&__p, 0, sizeof(__p));
                            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v91 + 8), *(uint64_t **)(v91 + 16), (uint64_t)(*(_QWORD *)(v91 + 16) - *(_QWORD *)(v91 + 8)) >> 4);
                            turi::flexible_type_fail(0);
                            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                            goto LABEL_182;
                          case 5:
                            v92 = v53[2];
                            memset(&__p, 0, sizeof(__p));
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v92 + 8), *(uint64_t **)(v92 + 16), (uint64_t)(*(_QWORD *)(v92 + 16) - *(_QWORD *)(v92 + 8)) >> 5);
                            turi::flexible_type_fail(0);
                            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                            goto LABEL_182;
                          case 6:
                            v76 = (double)*((int *)v53 + 6) / 1000000.0 + (double)(v53[2] << 8 >> 8);
                            goto LABEL_182;
                          case 7:
                            goto LABEL_182;
                          case 8:
                            v93 = v53[2];
                            v94 = *(unsigned int **)(v93 + 16);
                            v282 = *(double *)(v93 + 8);
                            v283 = v94;
                            if (v94)
                            {
                              v95 = v94 + 2;
                              do
                                v96 = __ldxr(v95);
                              while (__stxr(v96 + 1, v95));
                            }
                            v97 = *(_OWORD *)(v93 + 24);
                            v98 = *(_OWORD *)(v93 + 56);
                            v285 = *(_OWORD *)(v93 + 40);
                            v286 = v98;
                            v284 = v97;
                            turi::flexible_type_fail(0);
                            boost::detail::shared_count::~shared_count(&v283);
                            goto LABEL_182;
                          case 9:
                            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v53[2] + 8);
                            turi::flexible_type_fail(0);
                            if (v269)
                            {
                              v270 = v269;
                              operator delete(v269);
                            }
                            if (__p.__r_.__value_.__r.__words[2])
                            {
                              v268 = __p.__r_.__value_.__r.__words[2];
                              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                            }
                            v84 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                            if (__p.__r_.__value_.__l.__size_)
                            {
                              v85 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                              do
                                v86 = __ldaxr(v85);
                              while (__stlxr(v86 - 1, v85));
                              if (!v86)
                              {
                                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                                std::__shared_weak_count::__release_weak(v84);
                              }
                            }
LABEL_182:
                            *(double *)(*v47 + 8 * v75) = v76;
                            goto LABEL_183;
                          default:
                            goto LABEL_408;
                        }
                      }
                      v77 = (uint64_t *)v260;
                      if ((unint64_t)v260 >= v261)
                      {
                        v82 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>((uint64_t *)&v259, (char *)v53);
                      }
                      else
                      {
                        *(_QWORD *)v260 = 0;
                        *((_DWORD *)v77 + 2) = 0;
                        *((_BYTE *)v77 + 12) = 0;
                        if (v77 != v53)
                        {
                          v78 = *(double *)v53;
                          *(uint64_t *)((char *)v77 + 5) = *(uint64_t *)((char *)v53 + 5);
                          *(double *)v77 = v78;
                          v79 = *((unsigned __int8 *)v53 + 12);
                          *((_BYTE *)v77 + 12) = v79;
                          if (v79 <= 9 && ((1 << v79) & 0x33C) != 0)
                          {
                            v80 = (unint64_t *)*v77;
                            do
                              v81 = __ldaxr(v80);
                            while (__stlxr(v81 + 1, v80));
                          }
                        }
                        v82 = (uint64_t)(v77 + 2);
                      }
                      v260 = (char *)v82;
LABEL_183:
                      v53 += 4;
                      if (v53 != v54)
                        continue;
                      if (v259 != v260)
                      {
                        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v282);
                        v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v282, (uint64_t)"Warning: The following classes given as class weights were not ", 63);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"present in the training data: ", 30);
                        v101 = (uint64_t)v259;
                        if (v260 != v259)
                        {
                          v102 = 0;
                          v103 = 0;
                          v255 = *MEMORY[0x24BEDB7F0];
                          v253 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                          v254 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                          v252 = MEMORY[0x24BEDB848] + 16;
                          do
                          {
                            v104 = (turi::flexible_type_impl *)(v101 + v102);
                            switch(*(_BYTE *)(v101 + v102 + 12))
                            {
                              case 0:
                                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                                std::ostream::operator<<();
                                std::stringbuf::str();
                                __p.__r_.__value_.__r.__words[0] = v255;
                                *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                                          + *(_QWORD *)(v255 - 24)) = v254;
                                __p.__r_.__value_.__r.__words[2] = v253;
                                v105 = v252;
                                goto LABEL_196;
                              case 1:
                                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                                std::ostream::operator<<();
                                std::stringbuf::str();
                                __p.__r_.__value_.__r.__words[0] = v255;
                                *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                                          + *(_QWORD *)(v255 - 24)) = v254;
                                v105 = MEMORY[0x24BEDB848] + 16;
                                __p.__r_.__value_.__r.__words[2] = v253;
LABEL_196:
                                v268 = v105;
                                if (v272 < 0)
                                  operator delete(v271);
                                std::streambuf::~streambuf();
                                std::iostream::~basic_iostream();
                                MEMORY[0x219A198F4](&v273);
                                break;
                              case 2:
                                v106 = *(_QWORD *)v104;
                                if (*(char *)(*(_QWORD *)v104 + 31) < 0)
                                {
                                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v106 + 8), *(_QWORD *)(v106 + 16));
                                }
                                else
                                {
                                  v107 = *(_OWORD *)(v106 + 8);
                                  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v106 + 24);
                                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v107;
                                }
                                break;
                              case 3:
                                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v104 + 8));
                                break;
                              case 4:
                                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v104 + 8));
                                break;
                              case 5:
                                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v104 + 8));
                                break;
                              case 6:
                                turi::flexible_type_impl::get_string_visitor::operator()(v104, &__str);
                                break;
                              case 7:
                                memset(&__str, 0, sizeof(__str));
                                break;
                              case 8:
                                turi::flexible_type_impl::get_string_visitor::operator()();
                                break;
                              case 9:
                                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v104 + 8));
                                break;
                              default:
                                goto LABEL_408;
                            }
                            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              p_str = &__str;
                            else
                              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v109 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                            else
                              v109 = __str.__r_.__value_.__l.__size_;
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v282, (uint64_t)p_str, v109);
                            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__str.__r_.__value_.__l.__data_);
                            v110 = ((v260 - v259) >> 4) - 1;
                            if (v103 == v110)
                              v111 = ".";
                            else
                              v111 = ", ";
                            if (v103 == v110)
                              v112 = 1;
                            else
                              v112 = 2;
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v282, (uint64_t)v111, v112);
                            ++v103;
                            v101 = (uint64_t)v259;
                            v102 += 16;
                          }
                          while (v103 < (v260 - v259) >> 4);
                        }
                        std::ios_base::getloc((const std::ios_base *)((char *)&v282
                                                                    + *(_QWORD *)(*(_QWORD *)&v282 - 24)));
                        v113 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
                        ((void (*)(const std::locale::facet *, uint64_t))v113->__vftable[2].~facet_0)(v113, 10);
                        std::locale::~locale((std::locale *)&__p);
                        std::ostream::put();
                        std::ostream::flush();
                        v114 = (int *)global_logger();
                        if (v114[169] <= 5)
                        {
                          if (cppipc::must_cancel((cppipc *)v114))
                            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
                          v115 = (file_logger *)global_logger();
                          started = file_logger::start_stream(v115, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/supervised_learning_base.cpp", "_setup_class_weights", 535, 1);
                          std::stringbuf::str();
                          file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v257);
                          if (v258 < 0)
                            operator delete(v257);
                        }
                        v282 = *MEMORY[0x24BEDB800];
                        *(double *)((char *)&v282 + *(_QWORD *)(*(_QWORD *)&v282 - 24)) = *(double *)(MEMORY[0x24BEDB800] + 24);
                        v283 = (unsigned int *)(MEMORY[0x24BEDB848] + 16);
                        if (v288 < 0)
                          operator delete(v287);
                        std::streambuf::~streambuf();
                        std::ostream::~ostream();
                        MEMORY[0x219A198F4](&v289);
                      }
                      break;
                    default:
                      goto LABEL_408;
                  }
LABEL_225:
                  memset(&v279, 0, sizeof(v279));
                  if (v2)
                  {
                    for (i = 0; i != v2; ++i)
                      ;
                    if (v279.__r_.__value_.__r.__words[0])
                    {
                      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v282);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v282, (uint64_t)"The weights for the following classes were not specified: ", 58);
                      v234 = v279.__r_.__value_.__r.__words[0];
                      if (v279.__r_.__value_.__l.__size_ == v279.__r_.__value_.__r.__words[0])
                      {
LABEL_410:
                        std::endl[abi:ne180100]<char,std::char_traits<char>>(&v282);
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
                        turi::supervised_2::supervised_learning_model_base::_setup_class_weights(void)::{lambda(void)#2}::operator()();
                      }
                      v243 = 0;
                      while (2)
                      {
                        v244 = (turi::flexible_type_impl *)(*((_QWORD *)v265 + 10) + 16 * *(_QWORD *)(v234 + 8 * v243));
                        switch(*((_BYTE *)v244 + 12))
                        {
                          case 0:
                            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                            std::ostream::operator<<();
                            std::stringbuf::str();
                            goto LABEL_435;
                          case 1:
                            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                            std::ostream::operator<<();
                            std::stringbuf::str();
LABEL_435:
                            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
                            goto LABEL_440;
                          case 2:
                            v245 = *(_QWORD *)v244;
                            if (*(char *)(*(_QWORD *)v244 + 31) < 0)
                            {
                              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v245 + 8), *(_QWORD *)(v245 + 16));
                            }
                            else
                            {
                              v246 = *(_OWORD *)(v245 + 8);
                              __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v245 + 24);
                              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v246;
                            }
                            goto LABEL_440;
                          case 3:
                            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v244 + 8));
                            goto LABEL_440;
                          case 4:
                            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v244 + 8));
                            goto LABEL_440;
                          case 5:
                            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v244 + 8));
                            goto LABEL_440;
                          case 6:
                            turi::flexible_type_impl::get_string_visitor::operator()(v244, &__str);
                            goto LABEL_440;
                          case 7:
                            memset(&__str, 0, sizeof(__str));
                            goto LABEL_440;
                          case 8:
                            turi::flexible_type_impl::get_string_visitor::operator()();
                            goto LABEL_440;
                          case 9:
                            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v244 + 8));
LABEL_440:
                            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v247 = &__str;
                            else
                              v247 = (std::string *)__str.__r_.__value_.__r.__words[0];
                            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v248 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                            else
                              v248 = __str.__r_.__value_.__l.__size_;
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v282, (uint64_t)v247, v248);
                            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__str.__r_.__value_.__l.__data_);
                            v249 = ((uint64_t)(v279.__r_.__value_.__l.__size_ - v279.__r_.__value_.__r.__words[0]) >> 3)
                                 - 1;
                            if (v243 == v249)
                              v250 = ".";
                            else
                              v250 = ", ";
                            if (v243 == v249)
                              v251 = 1;
                            else
                              v251 = 2;
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v282, (uint64_t)v250, v251);
                            ++v243;
                            v234 = v279.__r_.__value_.__r.__words[0];
                            if (v243 >= (uint64_t)(v279.__r_.__value_.__l.__size_ - v279.__r_.__value_.__r.__words[0]) >> 3)
                              goto LABEL_410;
                            continue;
                          default:
                            turi::flexible_type_fail(0);
                            goto LABEL_457;
                        }
                      }
                    }
                  }
                  *((_BYTE *)v256 + 336) = 1;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v259;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v264;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  size = v266;
                  if (!v266)
                    goto LABEL_347;
                  v119 = (unint64_t *)&v266->__shared_owners_;
                  do
                    v120 = __ldaxr(v119);
                  while (__stlxr(v120 - 1, v119));
                  goto LABEL_345;
                }
              }
              break;
            }
LABEL_391:
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v282);
            v224 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v282, (uint64_t)"The class_weight parameter for the class ", 41);
            switch(*((_BYTE *)v53 + 12))
            {
              case 0:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                std::ostream::operator<<();
                std::stringbuf::str();
                goto LABEL_400;
              case 1:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                std::ostream::operator<<();
                std::stringbuf::str();
LABEL_400:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
                goto LABEL_412;
              case 2:
                v228 = *(double *)v53;
                if (*(char *)(*v53 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(*(_QWORD *)&v228 + 8), *(_QWORD *)(*(_QWORD *)&v228 + 16));
                }
                else
                {
                  v235 = *(_OWORD *)(*(_QWORD *)&v228 + 8);
                  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)&v228 + 24);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v235;
                }
                goto LABEL_412;
              case 3:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*v53 + 8));
                goto LABEL_412;
              case 4:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*v53 + 8));
                goto LABEL_412;
              case 5:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*v53 + 8));
                goto LABEL_412;
              case 6:
                turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v53, &__str);
                goto LABEL_412;
              case 7:
                memset(&__str, 0, sizeof(__str));
                goto LABEL_412;
              case 8:
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_412;
              case 9:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*v53 + 8));
LABEL_412:
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v236 = &__str;
                else
                  v236 = (std::string *)__str.__r_.__value_.__r.__words[0];
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v237 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                else
                  v237 = __str.__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)v236, v237);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                v238 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)" must be a positive numeric value.", 34);
                std::endl[abi:ne180100]<char,std::char_traits<char>>(v238);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
                turi::supervised_2::supervised_learning_model_base::_setup_class_weights(void)::{lambda(void)#1}::operator()();
              default:
                break;
            }
LABEL_408:
            turi::flexible_type_fail(0);
LABEL_457:
            __break(1u);
            return;
          }
          goto LABEL_312;
        }
        v121 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v279, (uint64_t *)(*(_QWORD *)&v290[0] + 8), (_QWORD *)(*(_QWORD *)&v282 + 8));
        goto LABEL_278;
      case 5:
        if (BYTE4(v290[1]) > 9u)
          goto LABEL_421;
        if (BYTE4(v290[1]) != 5)
        {
          v13 = 0;
LABEL_72:
          v35 = *(unint64_t **)&v282;
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (v37)
            goto LABEL_311;
          v17 = v282;
          if (v282 == 0.0)
            goto LABEL_91;
          __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v282 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_77;
        }
        v121 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v279, (uint64_t **)(*(_QWORD *)&v290[0] + 8), (uint64_t **)(*(_QWORD *)&v282 + 8));
        goto LABEL_278;
      case 6:
        switch(BYTE4(v290[1]))
        {
          case 0:
            v12 = *(_QWORD *)&v290[0] == (uint64_t)(*(_QWORD *)&v282 << 8) >> 8 && (_DWORD)v283 == 0;
            goto LABEL_284;
          case 1:
            v158 = v290[0];
            v157 = (double)(int)v283 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v282 << 8) >> 8);
LABEL_289:
            v13 = vabdd_f64(v158, v157) < 0.0000005;
            goto LABEL_310;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_92;
          case 6:
            v12 = ((*(_QWORD *)&v282 ^ *(_QWORD *)&v290[0]) & 0xFFFFFFFFFFFFFFLL) == 0
               && LODWORD(v290[1]) == (_DWORD)v283;
            goto LABEL_284;
          default:
            goto LABEL_421;
        }
      case 7:
        if (BYTE4(v290[1]) < 7u || BYTE4(v290[1]) - 8 < 2)
          goto LABEL_92;
        if (BYTE4(v290[1]) != 7)
          goto LABEL_421;
        goto LABEL_312;
      case 8:
        if (BYTE4(v290[1]) >= 8u && BYTE4(v290[1]) != 9)
        {
          if (BYTE4(v290[1]) == 8)
          {
            v121 = turi::image_type::operator==(*(_QWORD *)&v290[0] + 8, *(_QWORD *)&v282 + 8);
LABEL_278:
            v13 = v121;
            goto LABEL_310;
          }
          goto LABEL_421;
        }
        v13 = 0;
LABEL_84:
        v38 = *(unint64_t **)&v282;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (v40)
          goto LABEL_311;
        v41 = v282;
        if (v282 == 0.0)
          goto LABEL_91;
        boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v282 + 16));
        v21 = v41;
        v22 = -235920773;
        break;
      case 9:
        if (BYTE4(v290[1]) >= 9u)
        {
          if (BYTE4(v290[1]) == 9)
          {
            v122 = v282;
            v123 = v290[0];
            if (*(_QWORD *)&v282 == *(_QWORD *)&v290[0])
              goto LABEL_309;
            v124 = (_QWORD *)(*(_QWORD *)&v290[0] + 8);
            if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v290[0] + 8, *(_QWORD *)&v282 + 8))
            {
LABEL_308:
              v13 = 0;
              goto LABEL_310;
            }
            v126 = *(char **)(*(_QWORD *)&v123 + 24);
            v125 = *(char **)(*(_QWORD *)&v123 + 32);
            v127 = v125 - v126;
            if (v125 == v126)
              goto LABEL_309;
            if (!*v124)
              goto LABEL_309;
            v128 = 1;
            do
            {
              v129 = *(_QWORD *)v126;
              v126 += 8;
              v128 *= v129;
            }
            while (v126 != v125);
            if (!v128)
            {
LABEL_309:
              v13 = 1;
              goto LABEL_310;
            }
            __str.__r_.__value_.__r.__words[0] = 0;
            std::vector<unsigned long>::vector(&__p, v127 >> 3, &__str);
            do
            {
              v130 = (void *)__p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
              {
                v139 = 0;
                v140 = *(double *)(**(_QWORD **)(*(_QWORD *)&v123 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v123 + 72));
              }
              else
              {
                v131 = 0;
                v132 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                v133 = *(uint64_t **)(*(_QWORD *)&v123 + 48);
                if (v132 <= 1)
                  v132 = 1;
                v134 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                v135 = v132;
                do
                {
                  v137 = *v134++;
                  v136 = v137;
                  v138 = *v133++;
                  v131 += v138 * v136;
                  --v135;
                }
                while (v135);
                v139 = 0;
                v140 = *(double *)(**(_QWORD **)(*(_QWORD *)&v123 + 8)
                                 + 8 * (*(_QWORD *)(*(_QWORD *)&v123 + 72) + v131));
                v141 = *(uint64_t **)(*(_QWORD *)&v122 + 48);
                v142 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                do
                {
                  v144 = *v142++;
                  v143 = v144;
                  v145 = *v141++;
                  v139 += v145 * v143;
                  --v132;
                }
                while (v132);
              }
              v146 = *(double *)(**(_QWORD **)(*(_QWORD *)&v122 + 8)
                               + 8 * (*(_QWORD *)(*(_QWORD *)&v122 + 72) + v139));
              v13 = v140 == v146;
              if (v140 != v146)
                goto LABEL_257;
            }
            while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(_QWORD *)&v123 + 8, (uint64_t *)&__p));
            v130 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_257:
            if (v130)
            {
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v130;
              operator delete(v130);
            }
LABEL_310:
            switch(BYTE4(v283))
            {
              case 2:
                goto LABEL_46;
              case 3:
                goto LABEL_56;
              case 4:
                goto LABEL_31;
              case 5:
                goto LABEL_72;
              case 8:
                goto LABEL_84;
              case 9:
                goto LABEL_38;
              default:
                goto LABEL_311;
            }
          }
LABEL_421:
          turi::flexible_type_fail(0);
          goto LABEL_457;
        }
        v13 = 0;
LABEL_38:
        v18 = *(unint64_t **)&v282;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (v20)
          goto LABEL_311;
        if (v282 == 0.0)
          goto LABEL_91;
        v21 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v282));
        v22 = 2071181815;
        break;
      default:
        goto LABEL_421;
    }
    v27 = v22 | 0x1030C4000000000;
    goto LABEL_90;
  }
  if (*((_QWORD *)this + 44) != v2)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)this + 43, v2, 1);
    v2 = *((_QWORD *)this + 44);
  }
  v8 = *((_QWORD *)this + 43);
  if (v2 >= 0)
    v9 = v2;
  else
    v9 = v2 + 1;
  v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (v2 >= 2)
  {
    v11 = 2;
    if (v10 > 2)
      v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    memset_pattern16(*((void **)this + 43), &unk_218712770, ((8 * v11 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v10 < v2)
    memset_pattern16((void *)(v8 + 16 * (v9 >> 1)), &unk_218712770, 8 * v2 - 16 * (v9 >> 1));
  *((_BYTE *)this + 336) = 0;
LABEL_347:
  switch(BYTE4(v290[1]))
  {
    case 2:
      v195 = *(unint64_t **)&v290[0];
      do
      {
        v196 = __ldaxr(v195);
        v197 = v196 - 1;
      }
      while (__stlxr(v197, v195));
      if (!v197)
      {
        v198 = v290[0];
        if (*(_QWORD *)&v290[0])
        {
          if (*(char *)(*(_QWORD *)&v290[0] + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v290[0] + 8));
          v199 = v198;
          v200 = 0x1012C404EF22A49;
          goto LABEL_388;
        }
      }
      break;
    case 3:
      v212 = *(unint64_t **)&v290[0];
      do
      {
        v213 = __ldaxr(v212);
        v214 = v213 - 1;
      }
      while (__stlxr(v214, v212));
      if (!v214)
      {
        v215 = v290[0];
        if (*(_QWORD *)&v290[0])
        {
          v216 = *(void **)(*(_QWORD *)&v290[0] + 8);
          if (v216)
          {
            *(_QWORD *)(*(_QWORD *)&v290[0] + 16) = v216;
            operator delete(v216);
          }
          v199 = v215;
          v200 = 0x1080C409938AC02;
          goto LABEL_388;
        }
      }
      break;
    case 4:
      v201 = *(unint64_t **)&v290[0];
      do
      {
        v202 = __ldaxr(v201);
        v203 = v202 - 1;
      }
      while (__stlxr(v203, v201));
      if (!v203)
      {
        v204 = v290[0];
        if (*(_QWORD *)&v290[0])
        {
          __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v290[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_381;
        }
      }
      break;
    case 5:
      v217 = *(unint64_t **)&v290[0];
      do
      {
        v218 = __ldaxr(v217);
        v219 = v218 - 1;
      }
      while (__stlxr(v219, v217));
      if (!v219)
      {
        v204 = v290[0];
        if (*(_QWORD *)&v290[0])
        {
          __p.__r_.__value_.__r.__words[0] = *(_QWORD *)&v290[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_381:
          v199 = v204;
          v200 = 0x1020C405E66F15BLL;
          goto LABEL_388;
        }
      }
      break;
    case 8:
      v220 = *(unint64_t **)&v290[0];
      do
      {
        v221 = __ldaxr(v220);
        v222 = v221 - 1;
      }
      while (__stlxr(v222, v220));
      if (!v222)
      {
        v223 = v290[0];
        if (*(_QWORD *)&v290[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v290[0] + 16));
          v199 = v223;
          v211 = -235920773;
          goto LABEL_387;
        }
      }
      break;
    case 9:
      v205 = *(unint64_t **)&v290[0];
      do
      {
        v206 = __ldaxr(v205);
        v207 = v206 - 1;
      }
      while (__stlxr(v207, v205));
      if (!v207)
      {
        v208 = v290[0];
        if (*(_QWORD *)&v290[0])
        {
          v209 = *(void **)(*(_QWORD *)&v290[0] + 48);
          if (v209)
          {
            *(_QWORD *)(*(_QWORD *)&v290[0] + 56) = v209;
            operator delete(v209);
          }
          v210 = *(void **)(*(_QWORD *)&v208 + 24);
          if (v210)
          {
            *(_QWORD *)(*(_QWORD *)&v208 + 32) = v210;
            operator delete(v210);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v208 + 8);
          v199 = v208;
          v211 = 2071181815;
LABEL_387:
          v200 = v211 | 0x1030C4000000000;
LABEL_388:
          MEMORY[0x219A19A08](*(_QWORD *)&v199, v200);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2184DF830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, boost::detail::shared_count *a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;

  v33 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v33;
    operator delete(v33);
  }
  STACK[0x220] = (unint64_t)&a21;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  turi::flex_dict_view::~flex_dict_view((turi::flex_dict_view *)&a24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  switch(*(_BYTE *)(v31 - 124))
  {
    case 2:
      v34 = *(unint64_t **)(v31 - 136);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_41;
      v37 = *(_QWORD *)(v31 - 136);
      if (!v37)
        goto LABEL_41;
      if (*(char *)(v37 + 31) < 0)
        operator delete(*(void **)(v37 + 8));
      v38 = (_QWORD *)v37;
      v39 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v49 = *(unint64_t **)(v31 - 136);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (v51)
        goto LABEL_41;
      v52 = *(_QWORD **)(v31 - 136);
      if (!v52)
        goto LABEL_41;
      v53 = (void *)v52[1];
      if (v53)
      {
        v52[2] = v53;
        operator delete(v53);
      }
      v38 = v52;
      v39 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v40 = *(unint64_t **)(v31 - 136);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_41;
      v43 = *(_QWORD **)(v31 - 136);
      if (!v43)
        goto LABEL_41;
      a24 = (uint64_t)(v43 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
      goto LABEL_33;
    case 5:
      v54 = *(unint64_t **)(v31 - 136);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (v56)
        goto LABEL_41;
      v43 = *(_QWORD **)(v31 - 136);
      if (!v43)
        goto LABEL_41;
      a24 = (uint64_t)(v43 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
LABEL_33:
      v38 = v43;
      v39 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v57 = *(unint64_t **)(v31 - 136);
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (v59)
        goto LABEL_41;
      v60 = *(_QWORD *)(v31 - 136);
      if (!v60)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v60 + 16));
      v38 = (_QWORD *)v60;
      v48 = -235920773;
      goto LABEL_39;
    case 9:
      v44 = *(unint64_t **)(v31 - 136);
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (v46)
        goto LABEL_41;
      v47 = *(_QWORD **)(v31 - 136);
      if (!v47)
        goto LABEL_41;
      v38 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v47);
      v48 = 2071181815;
LABEL_39:
      v39 = v48 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v38, v39);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

double turi::ml_data_internal::column_statistics::stdev(turi::ml_data_internal::column_statistics *this, unint64_t a2)
{
  double v3;
  unint64_t v4;
  double result;
  uint64_t v6;

  if ((*((_DWORD *)this + 6) | 2) == 3)
  {
    v3 = turi::ml_data_internal::column_statistics::mean(this, a2);
    v4 = *((_QWORD *)this + 10);
    result = 0.0;
    if (v4 >= 2)
      return sqrt((1.0 - v3) * (v3 * (double)v4) / (double)(v4 - 1));
  }
  else
  {
    v6 = *((_QWORD *)this + 7);
    result = 0.0;
    if (a2 < (*((_QWORD *)this + 8) - v6) >> 4)
      return *(double *)(v6 + 16 * a2 + 8);
  }
  return result;
}

void turi::supervised_2::supervised_learning_model_base::next_training_iteration(turi::supervised_2::supervised_learning_model_base *this)
{
  char *v2;
  char *v3;
  char **v4;
  BOOL v5;
  void **v6;
  void **v7;
  void **v8;
  const void ***v9;
  const void **v10;
  char *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  void *v15[2];
  char v16;
  void *__p[2];
  char v18;
  void *v19;
  char *v20;
  char v21;
  char **v22;
  char *v23;
  uint64_t v24;

  (*(void (**)(char ***__return_ptr))(*(_QWORD *)this + 136))(&v22);
  std::string::basic_string[abi:ne180100]<0>(__p, "auto");
  turi::supervised_2::supervised_learning_model_base::_evaluate((uint64_t)this, (uint64_t)this + 384, (uint64_t *)__p, (uint64_t)&v19);
  if (v18 < 0)
    operator delete(__p[0]);
  v2 = (char *)v19;
  if (v19 != &v20)
  {
    do
    {
      std::operator+<char>();
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>((uint64_t **)&v22, (const void **)__p, (__int128 *)__p, (unsigned int *)v2 + 14);
      if (v18 < 0)
        operator delete(__p[0]);
      v3 = (char *)*((_QWORD *)v2 + 1);
      if (v3)
      {
        do
        {
          v4 = (char **)v3;
          v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (char **)*((_QWORD *)v2 + 2);
          v5 = *v4 == v2;
          v2 = (char *)v4;
        }
        while (!v5);
      }
      v2 = (char *)v4;
    }
    while (v4 != &v20);
  }
  if (*((_QWORD *)this + 74) != *((_QWORD *)this + 75))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "auto");
    turi::supervised_2::supervised_learning_model_base::_evaluate((uint64_t)this, (uint64_t)this + 576, (uint64_t *)v15, (uint64_t)__p);
    if (v16 < 0)
      operator delete(v15[0]);
    v6 = (void **)__p[0];
    if (__p[0] != &__p[1])
    {
      do
      {
        std::operator+<char>();
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>((uint64_t **)&v22, (const void **)v15, (__int128 *)v15, (unsigned int *)v6 + 14);
        if (v16 < 0)
          operator delete(v15[0]);
        v7 = (void **)v6[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (void **)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (void **)v6[2];
            v5 = *v8 == v6;
            v6 = v8;
          }
          while (!v5);
        }
        v6 = v8;
      }
      while (v8 != &__p[1]);
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)__p, (char *)__p[1]);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v19, v20);
  ++*((_QWORD *)this + 99);
  v9 = (const void ***)((char *)this + 800);
  v10 = (const void **)((char *)this + 808);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 800, *((char **)this + 101));
  v11 = v23;
  *((_QWORD *)this + 100) = v22;
  *((_QWORD *)this + 101) = v11;
  v12 = v24;
  *((_QWORD *)this + 102) = v24;
  if (v12)
  {
    *((_QWORD *)v11 + 2) = v10;
    v22 = &v23;
    v23 = 0;
    v24 = 0;
  }
  else
  {
    *v9 = v10;
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, "current_training_iteration");
  __p[0] = &v19;
  v13 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v19, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v13 + 14, (_QWORD *)this + 99);
  if (v21 < 0)
    operator delete(v19);
  turi::ml_model_base::add_or_update_state((uint64_t)this, (_QWORD *)this + 100);
  std::string::basic_string[abi:ne180100]<0>(&v19, "current_training_status");
  __p[0] = &v19;
  v14 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v19, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v14 + 14, v9);
  if (v21 < 0)
    operator delete(v19);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23);
}

void sub_2184E03BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char *a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a21, a22);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v26 - 56, *(char **)(v26 - 48));
  _Unwind_Resume(a1);
}

turi::gl_sarray_writer *turi::supervised_2::supervised_learning_model_base::_evaluate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  turi::gl_sarray *v14;
  turi::gl_sarray *v15;
  turi::thread *v16;
  turi::gl_sarray_writer *v17;
  turi::gl_sarray_writer *result;
  _BYTE v19[40];
  _BYTE v20[40];
  _BYTE v21[40];
  _BYTE v22[40];
  turi::gl_sarray_writer *v23;
  turi::gl_sarray_writer *v24;
  char v25;
  int v26;
  _BYTE v27[24];
  _BYTE *v28;
  std::mutex v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v9 = v8;
  if (v8)
    v10 = 5;
  else
    v10 = 0;
  v26 = v10;
  v25 = v8 ^ 1;
  v23 = 0;
  v24 = 0;
  memset(v29.__m_.__opaque, 0, sizeof(v29.__m_.__opaque));
  v29.__m_.__sig = 850045863;
  v11 = operator new(0x40uLL);
  *v11 = &off_24D945BB8;
  v11[1] = a2;
  v11[2] = a1;
  v11[3] = &v26;
  v11[4] = &v24;
  v11[5] = &v29;
  v11[6] = &v23;
  v11[7] = &v25;
  v28 = v11;
  turi::in_parallel((turi::thread_pool *)v27);
  v12 = v28;
  if (v28 == v27)
  {
    v13 = 4;
    v12 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_9;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_9:
  if (v9)
  {
    turi::gl_sarray_writer::close((turi::gl_sarray_writer_impl **)v24, (uint64_t)v22);
    turi::gl_sarray_writer::close((turi::gl_sarray_writer_impl **)v23, (uint64_t)v21);
    v14 = (turi::gl_sarray *)v22;
    v15 = (turi::gl_sarray *)v21;
    turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(a1, (const turi::gl_sarray *)v22, (const turi::gl_sarray *)v21, a3, a4);
  }
  else
  {
    turi::gl_sarray_writer::close((turi::gl_sarray_writer_impl **)v24, (uint64_t)v20);
    turi::gl_sarray_writer::close((turi::gl_sarray_writer_impl **)v23, (uint64_t)v19);
    v14 = (turi::gl_sarray *)v20;
    v15 = (turi::gl_sarray *)v19;
    turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(v16, (const turi::gl_sarray *)v20, (const turi::gl_sarray *)v19, (uint64_t **)a3, a4);
  }
  turi::gl_sarray::~gl_sarray(v15);
  turi::gl_sarray::~gl_sarray(v14);
  std::mutex::~mutex(&v29);
  v17 = v23;
  v23 = 0;
  if (v17)
  {
    turi::gl_sarray_writer::~gl_sarray_writer(v17);
    MEMORY[0x219A19A08]();
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    turi::gl_sarray_writer::~gl_sarray_writer(result);
    return (turi::gl_sarray_writer *)MEMORY[0x219A19A08]();
  }
  return result;
}

void sub_2184E0680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,turi::gl_sarray_writer *a29,turi::gl_sarray_writer *a30)
{
  uint64_t v30;

  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a9);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a14);
  std::mutex::~mutex((std::mutex *)(v30 - 136));
  std::unique_ptr<turi::gl_sarray_writer>::reset[abi:ne180100](&a29, 0);
  std::unique_ptr<turi::gl_sarray_writer>::reset[abi:ne180100](&a30, 0);
  _Unwind_Resume(a1);
}

void turi::supervised_2::supervised_learning_model_base::finalize_training(const void ***this)
{
  char **v2;
  char *v3;
  char **v4;
  BOOL v5;
  void **v6;
  void **v7;
  void **v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  char **v13;
  char *v14[2];
  uint64_t *v15[3];

  ((void (*)(const void ***))(*this)[18])(this);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t *)v15, this + 100);
  std::string::basic_string[abi:ne180100]<0>(__p, "full");
  turi::supervised_2::supervised_learning_model_base::_evaluate((uint64_t)this, (uint64_t)(this + 48), (uint64_t *)__p, (uint64_t)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  v2 = v13;
  if (v13 != v14)
  {
    do
    {
      std::operator+<char>();
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(v15, (const void **)__p, (__int128 *)__p, (unsigned int *)v2 + 14);
      if (v12 < 0)
        operator delete(__p[0]);
      v3 = v2[1];
      if (v3)
      {
        do
        {
          v4 = (char **)v3;
          v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (char **)v2[2];
          v5 = *v4 == (char *)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (v4 != v14);
  }
  if (this[74] != this[75])
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "full");
    turi::supervised_2::supervised_learning_model_base::_evaluate((uint64_t)this, (uint64_t)(this + 72), (uint64_t *)v9, (uint64_t)__p);
    if (v10 < 0)
      operator delete(v9[0]);
    v6 = (void **)__p[0];
    if (__p[0] != &__p[1])
    {
      do
      {
        std::operator+<char>();
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(v15, (const void **)v9, (__int128 *)v9, (unsigned int *)v6 + 14);
        if (v10 < 0)
          operator delete(v9[0]);
        v7 = (void **)v6[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (void **)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (void **)v6[2];
            v5 = *v8 == v6;
            v6 = v8;
          }
          while (!v5);
        }
        v6 = v8;
      }
      while (v8 != &__p[1]);
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)__p, (char *)__p[1]);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v13, v14[0]);
  turi::ml_model_base::add_or_update_state((uint64_t)this, v15);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v15, (char *)v15[1]);
}

void sub_2184E091C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,char *a22)
{
  uint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a21, a22);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v22 - 56, *(char **)(v22 - 48));
  _Unwind_Resume(a1);
}

void turi::supervised_2::supervised_learning_model_base::resume_training(turi::supervised_2::supervised_learning_model_base *a1, const turi::gl_sframe *a2, int *a3)
{
  uint64_t v6;
  turi::flexible_type_impl *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  void *v17[2];
  char v18;
  std::string v19;
  _QWORD **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  char v25;
  uint64_t v26;

  v6 = (uint64_t)a1 + 224;
  std::string::basic_string[abi:ne180100]<0>(v17, "target");
  v7 = (turi::flexible_type_impl *)turi::option_manager::value(v6, (const void **)v17);
  switch(*((_BYTE *)v7 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v20);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_10;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v20);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_10:
      v20 = (_QWORD **)*MEMORY[0x24BEDB7F0];
      v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD ***)((char *)&v20 + (_QWORD)*(v20 - 3)) = *(_QWORD ***)(MEMORY[0x24BEDB7F0] + 64);
      v22 = v10;
      v23 = MEMORY[0x24BEDB848] + 16;
      if (v25 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v26);
      goto LABEL_17;
    case 2:
      v8 = *(_QWORD *)v7;
      if (*(char *)(*(_QWORD *)v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v19.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
      }
      goto LABEL_17;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v20, (_QWORD *)(*(_QWORD *)v7 + 8));
      goto LABEL_17;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v20, (uint64_t *)(*(_QWORD *)v7 + 8));
      goto LABEL_17;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v20, (_QWORD *)(*(_QWORD *)v7 + 8));
      goto LABEL_17;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v7, &v19);
      goto LABEL_17;
    case 7:
      memset(&v19, 0, sizeof(v19));
      goto LABEL_17;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_17;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v20, (_QWORD *)(*(_QWORD *)v7 + 8));
LABEL_17:
      if (v18 < 0)
        operator delete(v17[0]);
      turi::gl_sframe::gl_sframe((turi::gl_sframe *)v15, a2);
      v21 = 0;
      v22 = 0;
      v20 = &v21;
      turi::supervised_2::supervised_learning_model_base::setup_iterative_training(a1, (turi::gl_sframe *)v15, (uint64_t)&v19, a3, v11, 1);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v20, v21);
      v15[0] = off_24D91E9C0;
      v12 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_2184E0C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a24);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::supervised_2::supervised_learning_model_base::train(turi::supervised_2::supervised_learning_model_base *a1, const turi::gl_sframe *a2, uint64_t a3, int *a4, uint64_t a5)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  std::runtime_error *exception;
  std::string *v30;
  __int128 v31;
  void *v32[2];
  char v33;
  _QWORD v34[2];
  std::__shared_weak_count *v35;
  void *__p[2];
  void *v37[2];
  __int128 v38;
  __int128 v39;
  std::string v40;
  size_t __idx;
  int v42;
  _QWORD v43[10];

  v43[9] = *MEMORY[0x24BDAC8D0];
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v34, a2);
  __p[0] = v43;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a4, *a4 ^ (*a4 >> 31), (std::string **)__p, (uint64_t)(a4 + 2));
  v42 = *a4 ^ (*a4 >> 31);
  turi::supervised_2::supervised_learning_model_base::init_training(a1, (const turi::gl_sframe *)v34, a3, &v42, a5);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v42);
  v34[0] = off_24D91E9C0;
  v9 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v32, "max_iterations");
  v12 = (_BYTE *)turi::option_manager::value((uint64_t)a1 + 224, (const void **)v32);
  v13 = 0;
  switch(v12[12])
  {
    case 0:
      v13 = *(_QWORD *)v12;
      goto LABEL_34;
    case 1:
      v13 = (uint64_t)*(double *)v12;
      goto LABEL_34;
    case 2:
      v17 = *(_QWORD *)v12;
      v18 = (char **)(*(_QWORD *)v12 + 8);
      __idx = 0;
      v19 = (char *)v18;
      if (*(char *)(v17 + 31) < 0)
        v19 = *v18;
      std::string::basic_string[abi:ne180100]<0>(__p, v19);
      v13 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v37[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v17 + 31) < 0)
        v20 = *(_QWORD *)(v17 + 16);
      else
        v20 = *(unsigned __int8 *)(v17 + 31);
      if (__idx != v20)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v30 = std::string::append(&v40, " cannot be interpreted as an integer");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v37[0] = (void *)v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_34;
    case 3:
      v14 = *(_QWORD *)v12;
      __p[1] = 0;
      v37[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v14 + 8), *(_QWORD *)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_33;
    case 4:
      v21 = *(_QWORD *)v12;
      __p[1] = 0;
      v37[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v21 + 8), *(uint64_t **)(v21 + 16), (uint64_t)(*(_QWORD *)(v21 + 16) - *(_QWORD *)(v21 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
      goto LABEL_33;
    case 5:
      v22 = *(_QWORD *)v12;
      __p[1] = 0;
      v37[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
      goto LABEL_33;
    case 6:
      v13 = (uint64_t)(*(_QWORD *)v12 << 8) >> 8;
      goto LABEL_34;
    case 7:
      goto LABEL_34;
    case 8:
      v23 = *(_QWORD *)v12;
      v24 = *(unsigned int **)(*(_QWORD *)v12 + 16);
      __p[0] = *(void **)(*(_QWORD *)v12 + 8);
      __p[1] = v24;
      if (v24)
      {
        v25 = v24 + 2;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = *(_OWORD *)(v23 + 24);
      v28 = *(_OWORD *)(v23 + 56);
      v38 = *(_OWORD *)(v23 + 40);
      v39 = v28;
      *(_OWORD *)v37 = v27;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_33;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v12 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v38 + 1))
      {
        *(_QWORD *)&v39 = *((_QWORD *)&v38 + 1);
        operator delete(*((void **)&v38 + 1));
      }
      if (v37[0])
      {
        v37[1] = v37[0];
        operator delete(v37[0]);
      }
      v13 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_34;
      v15 = (unint64_t *)((char *)__p[1] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
      }
LABEL_33:
      v13 = 0;
LABEL_34:
      if (v33 < 0)
      {
        operator delete(v32[0]);
        if (!v13)
          goto LABEL_37;
      }
      else if (!v13)
      {
        goto LABEL_37;
      }
      do
      {
        turi::supervised_2::supervised_learning_model_base::next_training_iteration(a1);
        --v13;
      }
      while (v13);
LABEL_37:
      turi::supervised_2::supervised_learning_model_base::finalize_training((const void ***)a1);
      return;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
}

void sub_2184E1110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;

  if (a23 < 0)
    operator delete(__p);
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v36 & 1) == 0)
    {
LABEL_8:
      if (a14 < 0)
        operator delete(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

void turi::supervised_2::supervised_learning_model_base::init_training(turi::supervised_2::supervised_learning_model_base *a1, const turi::gl_sframe *a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[2];
  std::__shared_weak_count *v14;

  (*(void (**)(turi::supervised_2::supervised_learning_model_base *, uint64_t))(*(_QWORD *)a1 + 64))(a1, a5);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v13, a2);
  turi::supervised_2::supervised_learning_model_base::setup_iterative_training(a1, (turi::gl_sframe *)v13, a3, a4, v9, 0);
  v13[0] = off_24D91E9C0;
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_2184E1300(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

void turi::supervised_2::supervised_learning_model_base::predict(_QWORD *a1@<X0>, const turi::gl_sframe *a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[2];
  std::__shared_weak_count *v20;
  _BYTE v21[8];
  std::__shared_weak_count *v22;
  void *__p;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void **v29;

  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v19, a2);
  turi::supervised_2::supervised_learning_model_base::_make_ml_data_for_inference(a1, (turi::gl_sframe *)v19, (uint64_t)v21);
  v19[0] = off_24D91E9C0;
  v7 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  turi::supervised_2::supervised_learning_model_base::_predict((uint64_t)a1, (uint64_t)v21, a3, a4);
  v10 = v28;
  if (v28)
  {
    v11 = (unint64_t *)&v28->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v29 = (void **)&v27;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v29);
  v13 = v26;
  if (v26)
  {
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v29 = (void **)&v25;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v29);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_2184E14B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  turi::ml_data::~ml_data((turi::ml_data *)va);
  _Unwind_Resume(a1);
}

void turi::supervised_2::supervised_learning_model_base::_make_ml_data_for_inference(_QWORD *a1@<X0>, turi::gl_sframe *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  char **v7;
  char *v8[2];
  void *__p[2];
  char v10;
  _BYTE v11[296];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  turi::ml_data::ml_data(a3, a1 + 96);
  turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v8[0] = 0;
  v8[1] = 0;
  v7 = v8;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 96))(a1);
  turi::ml_data::fill(a3, (uint64_t)v11, (std::string::size_type)__p, (const void ***)&v7, 1, v6);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v7, v8[0]);
  if (v10 < 0)
    operator delete(__p[0]);
  turi::sframe::~sframe((turi::sframe *)v11);
}

void sub_2184E15D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  turi::ml_data *v18;

  turi::sframe::~sframe((turi::sframe *)&a18);
  turi::ml_data::~ml_data(v18);
  _Unwind_Resume(a1);
}

turi::gl_sarray_writer *turi::supervised_2::supervised_learning_model_base::_predict@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  turi::gl_sarray_writer *result;
  _BYTE v11[12];
  _BYTE v12[24];
  _BYTE *v13;
  std::mutex v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)&v11[8] = 0;
  v14.__m_.__sig = 850045863;
  memset(v14.__m_.__opaque, 0, sizeof(v14.__m_.__opaque));
  *(_QWORD *)v11 = turi::supervised_2::supervised_learning_model_base::get_prediction_type(a1, a3);
  v7 = operator new(0x30uLL);
  *v7 = &off_24D945B38;
  v7[1] = a2;
  v7[2] = a1;
  v7[3] = v11;
  v7[4] = &v11[4];
  v7[5] = &v14;
  v13 = v7;
  turi::in_parallel((turi::thread_pool *)v12);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  turi::gl_sarray_writer::close(*(turi::gl_sarray_writer_impl ***)&v11[4], a4);
  std::mutex::~mutex(&v14);
  result = *(turi::gl_sarray_writer **)&v11[4];
  *(_QWORD *)&v11[4] = 0;
  if (result)
  {
    turi::gl_sarray_writer::~gl_sarray_writer(result);
    return (turi::gl_sarray_writer *)MEMORY[0x219A19A08]();
  }
  return result;
}

void sub_2184E1740(_Unwind_Exception *a1, uint64_t a2, char a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, turi::gl_sarray_writer *a11, char a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  std::mutex::~mutex((std::mutex *)&a16);
  std::unique_ptr<turi::gl_sarray_writer>::reset[abi:ne180100](&a11, 0);
  _Unwind_Resume(a1);
}

void turi::supervised_2::supervised_learning_model_base::predict_topk(_QWORD *a1@<X0>, const turi::gl_sframe *a2@<X1>, turi::gl_sframe *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;
  _BYTE v19[8];
  std::__shared_weak_count *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void **v27;

  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v17, a2);
  turi::supervised_2::supervised_learning_model_base::_make_ml_data_for_inference(a1, (turi::gl_sframe *)v17, (uint64_t)v19);
  v17[0] = off_24D91E9C0;
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  turi::gl_sframe::gl_sframe(a3);
  v8 = v26;
  if (v26)
  {
    v9 = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v27 = (void **)&v25;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v27);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v27 = (void **)&v23;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_2184E1910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  turi::ml_data::~ml_data((turi::ml_data *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised_2::supervised_learning_model_base::get_prediction_type(uint64_t a1, const void **a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v6;
  const void *v7[3];
  int v8;
  _QWORD v9[3];
  int v10;
  _QWORD v11[3];
  int v12;
  _QWORD v13[3];
  int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((v3 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "value");
    v8 = 0;
    std::string::basic_string[abi:ne180100]<0>(v9, "margin");
    v10 = 1;
    std::string::basic_string[abi:ne180100]<0>(v11, "probability");
    v12 = 2;
    std::string::basic_string[abi:ne180100]<0>(v13, "rank");
    v14 = 3;
    std::string::basic_string[abi:ne180100]<0>(v15, "probability_vector");
    v16 = 4;
    std::string::basic_string[abi:ne180100]<0>(v17, "class_index");
    v18 = 5;
    std::string::basic_string[abi:ne180100]<0>(v19, "class");
    v20 = 6;
    std::string::basic_string[abi:ne180100]<0>(v21, "max_probability");
    v22 = 7;
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    v24 = 6;
    std::string::basic_string[abi:ne180100]<0>(v25, "auto");
    v26 = 6;
    std::string::basic_string[abi:ne180100]<0>(v27, "na");
    v28 = 8;
    std::map<std::string,turi::supervised_2::supervised_learning_model_base::prediction_type_enum>::map[abi:ne180100]((uint64_t)&turi::supervised_2::supervised_learning_model_base::get_prediction_type(std::string const&)const::output_map, v7, 11);
    v6 = 44;
    do
    {
      if (*((char *)&v7[v6 - 1] - 1) < 0)
        operator delete((void *)v7[v6 - 4]);
      v6 -= 4;
    }
    while (v6 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,turi::supervised_2::supervised_learning_model_base::prediction_type_enum>::~map[abi:ne180100], &turi::supervised_2::supervised_learning_model_base::get_prediction_type(std::string const&)const::output_map, &dword_217E69000);
  }
  v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&turi::supervised_2::supervised_learning_model_base::get_prediction_type(std::string const&)const::output_map, a2);
  if ((_UNKNOWN *)v4 == &unk_254FF5358)
  {
    v7[0] = a2;
    turi::supervised_2::supervised_learning_model_base::get_prediction_type(std::string const&)const::$_0::operator()();
  }
  return *(unsigned int *)(v4 + 56);
}

void sub_2184E1BAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 352;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0)
      operator delete(*(void **)(v1 + v3 - 32));
    v3 -= 32;
    if (!v3)
    {
      _Unwind_Resume(a1);
    }
  }
}

void turi::supervised_2::supervised_learning_model_base::evaluate(_QWORD *a1@<X0>, const turi::gl_sframe *a2@<X1>, uint64_t *a3@<X2>, turi::gl_sarray *a4@<X3>, uint64_t a5@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _BYTE v29[40];
  _BYTE v30[40];
  void *v31[2];
  char v32;
  void **v33[6];
  void *__p;
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  _QWORD v40[2];
  std::__shared_weak_count *v41;
  void (**v42)(turi::gl_sarray_reference *__hidden);
  std::__shared_weak_count *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _QWORD v51[2];
  std::__shared_weak_count *v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v51);
  if (turi::gl_sarray::empty(a4))
  {
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)v40, a2);
    turi::supervised_2::supervised_learning_model_base::_make_ml_data_for_inference(a1, (turi::gl_sframe *)v40, (uint64_t)&v42);
    v40[0] = off_24D91E9C0;
    v10 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v36, "class_index");
    turi::supervised_2::supervised_learning_model_base::_predict((uint64_t)a1, (uint64_t)&v42, (const void **)v36, (uint64_t)v38);
    std::string::basic_string[abi:ne180100]<0>(v31, "predicted");
    turi::gl_sframe::operator[]((uint64_t)v51, (uint64_t)v31, (turi::gl_sarray *)v33);
    turi::gl_sarray_reference::operator=((uint64_t)v33, (uint64_t)v38);
    v33[0] = (void **)off_24D91EA30;
    if (v35 < 0)
      operator delete(__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v33);
    if (v32 < 0)
      operator delete(v31[0]);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v38);
    if (v37 < 0)
      operator delete(v36[0]);
    v13 = v50;
    if (v50)
    {
      v14 = (unint64_t *)&v50->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v33[0] = (void **)&v49;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v33);
    v16 = v48;
    if (v48)
    {
      v17 = (unint64_t *)&v48->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v33[0] = (void **)&v47;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v33);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    v19 = v43;
    if (v43)
    {
      v20 = (unint64_t *)&v43->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    v55[0] = &off_24D945AB8;
    v55[1] = a1;
    v56 = v55;
    turi::gl_sarray::apply((uint64_t)a4, (uint64_t)v55, 0, 1, (uint64_t)v33);
    std::string::basic_string[abi:ne180100]<0>(v38, "predicted");
    turi::gl_sframe::operator[]((uint64_t)v51, (uint64_t)v38, (turi::gl_sarray *)&v42);
    turi::gl_sarray_reference::operator=((uint64_t)&v42, (uint64_t)v33);
    v42 = off_24D91EA30;
    if (SHIBYTE(v45) < 0)
      operator delete(v44);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v42);
    if (v39 < 0)
      operator delete(v38[0]);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v33);
    v22 = v56;
    if (v56 == v55)
    {
      v23 = 4;
      v22 = v55;
    }
    else
    {
      if (!v56)
        goto LABEL_39;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
LABEL_39:
  turi::gl_sframe::operator[]((uint64_t)a2, *(_QWORD *)(a1[96] + 24), (turi::gl_sarray *)&v42);
  v53[0] = &off_24D945AB8;
  v53[1] = a1;
  v54 = v53;
  turi::gl_sarray::apply((uint64_t)&v42, (uint64_t)v53, 0, 1, (uint64_t)v38);
  std::string::basic_string[abi:ne180100]<0>(v36, "actual");
  turi::gl_sframe::operator[]((uint64_t)v51, (uint64_t)v36, (turi::gl_sarray *)v33);
  turi::gl_sarray_reference::operator=((uint64_t)v33, (uint64_t)v38);
  v33[0] = (void **)off_24D91EA30;
  if (v35 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v33);
  if (v37 < 0)
    operator delete(v36[0]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v38);
  v24 = v54;
  if (v54 == v53)
  {
    v25 = 4;
    v24 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_48;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_48:
  v42 = off_24D91EA30;
  if (SHIBYTE(v45) < 0)
    operator delete(v44);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v42);
  std::string::basic_string[abi:ne180100]<0>(v38, "predicted");
  turi::gl_sframe::operator[]((uint64_t)v51, (uint64_t)v38, (turi::gl_sarray *)&v42);
  turi::gl_sarray::gl_sarray(v30, &v42);
  std::string::basic_string[abi:ne180100]<0>(v36, "actual");
  turi::gl_sframe::operator[]((uint64_t)v51, (uint64_t)v36, (turi::gl_sarray *)v33);
  turi::gl_sarray::gl_sarray(v29, v33);
  turi::supervised_2::supervised_learning_model_base::_classifier_evaluation((uint64_t)a1, (const turi::gl_sarray *)v30, (const turi::gl_sarray *)v29, a3, a5);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v29);
  v33[0] = (void **)off_24D91EA30;
  if (v35 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v33);
  if (v37 < 0)
    operator delete(v36[0]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v30);
  v42 = off_24D91EA30;
  if (SHIBYTE(v45) < 0)
    operator delete(v44);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v42);
  if (v39 < 0)
    operator delete(v38[0]);
  v51[0] = off_24D91E9C0;
  v26 = v52;
  if (v52)
  {
    v27 = (unint64_t *)&v52->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_2184E2190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52)
{
  uint64_t v52;
  _QWORD *v54;
  uint64_t v55;

  turi::gl_sarray_reference::~gl_sarray_reference(&a52);
  if (a46 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a26);
  v54 = *(_QWORD **)(v52 - 96);
  if (v54 == (_QWORD *)(v52 - 120))
  {
    v55 = 4;
    v54 = (_QWORD *)(v52 - 120);
  }
  else
  {
    if (!v54)
      goto LABEL_8;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_8:
  *(_QWORD *)(v52 - 176) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v52 - 168);
  _Unwind_Resume(a1);
}

void sub_2184E239C()
{
  JUMPOUT(0x2184E2394);
}

void turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(uint64_t a1@<X0>, const turi::gl_sarray *a2@<X1>, const turi::gl_sarray *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t i;
  int v9;
  BOOL v10;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t j;
  unsigned int *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t k;
  void **v34;
  void **v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  void **v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int **v64;
  void **v65;
  void *v66;
  BOOL v67;
  int v68;
  unint64_t *v70;
  unint64_t v71;
  uint64_t m;
  char *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t n;
  _QWORD *v88;
  _QWORD *v89;
  void **v90;
  _QWORD *v91;
  uint64_t v92;
  std::string *v93;
  __int128 v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  void *v103;
  void *v104;
  unsigned int v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  __int128 v121;
  __int128 v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  unsigned int v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  void *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  __n128 v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unsigned int *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t ii;
  _QWORD *v170;
  _QWORD *v171;
  void **v172;
  _QWORD *v173;
  uint64_t v174;
  std::string *v175;
  __int128 v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  void *v185;
  void *v186;
  unsigned int v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  __int128 v203;
  __int128 v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  void *v223;
  void *v224;
  unsigned int v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  void *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  __n128 v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unsigned int *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v250;
  unint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  void *v256;
  uint64_t v257;
  void *v258[2];
  char v259;
  _QWORD v260[2];
  std::__shared_weak_count *v261;
  uint64_t *v262;
  uint64_t *v263;
  std::__shared_weak_count *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void **v268;
  char v269;
  uint64_t v270;
  void *v271[3];
  void *v272;
  void *v273;
  _QWORD *v274;
  unsigned __int8 v275;
  unint64_t v276;
  char v277;
  __int16 v278;
  _QWORD v279[2];
  std::__shared_weak_count *v280;
  _OWORD *v281[2];
  void *__p[2];
  char v283;
  uint64_t v284;
  _BYTE v285[16];
  __int128 v286;
  _QWORD v287[2];
  unint64_t v288;
  int v289;
  char v290;
  _QWORD v291[3];
  int v292;
  char v293;
  _QWORD v294[3];
  int v295;
  char v296;
  double v297[3];
  int v298;
  char v299;
  double v300[3];
  int v301;
  char v302;
  _BYTE v303[24];
  _BYTE *v304;
  __int128 v305;
  _QWORD v306[3];

  v306[1] = *MEMORY[0x24BDAC8D0];
  std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray&,0>(__p, "predicted", a2);
  std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray&,0>(v287, "actual", a3);
  turi::gl_sframe::gl_sframe(v279, __p, 2);
  for (i = 0; i != -16; i -= 8)
  {
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)((char *)&v289 + i * 8));
    if (*((char *)&v288 + i * 8 + 7) < 0)
      operator delete((void *)v287[i]);
  }
  v278 = 0;
  v277 = 0;
  v9 = *((unsigned __int8 *)a4 + 23);
  if ((v9 & 0x80) != 0)
  {
    v12 = a4[1];
    if (v12 != 4)
    {
      if (v12 != 19
        || (*(_QWORD *)*a4 == 0x6966697373616C63 ? (v13 = *(_QWORD *)(*a4 + 8) == 0x72756363615F7265) : (v13 = 0),
            v13 ? (v14 = *(_QWORD *)(*a4 + 11) == 0x7963617275636361) : (v14 = 0),
            !v14))
      {
LABEL_357:
        turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)const::$_0::operator()();
      }
      goto LABEL_30;
    }
    if (*(_DWORD *)*a4 == 1869903201)
      goto LABEL_30;
    if (a4[1] != 4)
      goto LABEL_357;
    a4 = (uint64_t *)*a4;
  }
  else
  {
    if (v9 != 4)
    {
      if (v9 != 19)
        goto LABEL_357;
      v10 = *a4 == 0x6966697373616C63 && a4[1] == 0x72756363615F7265;
      if (!v10 || *(uint64_t *)((char *)a4 + 11) != 0x7963617275636361)
        goto LABEL_357;
      goto LABEL_30;
    }
    if (*(_DWORD *)a4 == 1869903201)
    {
LABEL_30:
      HIBYTE(v278) = 1;
      goto LABEL_33;
    }
  }
  if (*(_DWORD *)a4 != 1819047270)
    goto LABEL_357;
  v278 = 257;
  v277 = 1;
LABEL_33:
  v276 = 0;
  v275 = 0;
  v15 = *(_QWORD *)(a1 + 784);
  v273 = 0;
  v274 = 0;
  v272 = 0;
  v16 = v15 + 1;
  if (v15 != -1)
  {
    if (v16 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v17 = operator new(24 * v16);
    v18 = &v17[3 * v16];
    v272 = v17;
    v274 = v18;
    do
    {
      *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
      v17 += 3;
    }
    while (v17 != v18);
    v273 = v18;
  }
  std::vector<turi::atomic<unsigned long>>::vector(v271, v16 * v16);
  v270 = *(_QWORD *)(a1 + 784);
  std::string::basic_string[abi:ne180100]<0>(__p, "predicted");
  std::string::basic_string[abi:ne180100]<0>(&v284, "actual");
  v305 = 0uLL;
  v306[0] = 0;
  v268 = (void **)&v305;
  v269 = 0;
  *(_QWORD *)&v305 = operator new(0x30uLL);
  *((_QWORD *)&v305 + 1) = v305;
  v306[0] = v305 + 48;
  *((_QWORD *)&v305 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v306, (__int128 *)__p, &v286, (std::string *)v305);
  turi::gl_sframe::select_columns((uint64_t)v279, (uint64_t)&v305, &v262);
  v304 = 0;
  v19 = operator new(0x50uLL);
  *v19 = &off_24D945C38;
  v19[1] = &v275;
  v19[2] = &v270;
  v19[3] = (char *)&v278 + 1;
  v19[4] = &v276;
  v19[5] = &v277;
  v19[6] = &v272;
  v19[7] = &v278;
  v19[8] = v271;
  v19[9] = a1;
  v304 = v19;
  turi::gl_sframe::materialize_to_callback((uint64_t)&v262, (uint64_t)v303, -1);
  v20 = v304;
  if (v304 == v303)
  {
    v21 = 4;
    v20 = v303;
    goto LABEL_42;
  }
  if (v304)
  {
    v21 = 5;
LABEL_42:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  v262 = (uint64_t *)off_24D91E9C0;
  v22 = v264;
  if (v264)
  {
    p_shared_owners = (unint64_t *)&v264->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v268 = (void **)&v305;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v268);
  for (j = 0; j != -48; j -= 24)
  {
    if ((char)v285[j + 15] < 0)
      operator delete(*(void **)&v285[j - 8]);
  }
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)&v305 = turi::gl_sframe::size((turi::gl_sframe *)v279);
  std::string::basic_string[abi:ne180100]<0>(__p, "number_of_examples");
  v262 = (uint64_t *)__p;
  v26 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a5, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v262);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(v26 + 14, &v305);
  if (v283 < 0)
    operator delete(__p[0]);
  if (HIBYTE(v278))
  {
    v27 = v276;
    v28 = turi::gl_sframe::size((turi::gl_sframe *)v279);
    v29 = v28 <= 1 ? 1 : v28;
    *(double *)&v305 = (double)v27 / (double)(unint64_t)v29;
    std::string::basic_string[abi:ne180100]<0>(__p, "accuracy");
    v262 = (uint64_t *)__p;
    v30 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a5, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v262);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<double>(v30 + 14, &v305);
    if (v283 < 0)
      operator delete(__p[0]);
  }
  if (v277)
  {
    v31 = *(_QWORD *)(a1 + 784) + v275;
    std::vector<turi::flexible_type>::vector(&v268, v31);
    v32 = *(_QWORD *)(a1 + 784);
    if (v32)
    {
      for (k = 0; k < v32; ++k)
      {
        v34 = *(void ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 768) + 24) + 32) + 80);
        if (v34 != v268)
        {
          v35 = &v268[2 * k];
          switch(*((_BYTE *)v35 + 12))
          {
            case 2:
              v36 = (unint64_t *)*v35;
              do
              {
                v37 = __ldaxr(v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, v36));
              if (!v38)
              {
                v39 = (void **)*v35;
                if (!*v35)
                  goto LABEL_106;
                if (*((char *)v39 + 31) < 0)
                  operator delete(v39[1]);
                v40 = v39;
                v41 = 0x1012C404EF22A49;
                goto LABEL_105;
              }
              break;
            case 3:
              v53 = (unint64_t *)*v35;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
              {
                v56 = *v35;
                if (!*v35)
                  goto LABEL_106;
                v57 = (void *)v56[1];
                if (v57)
                {
                  v56[2] = v57;
                  operator delete(v57);
                }
                v40 = v56;
                v41 = 0x1080C409938AC02;
                goto LABEL_105;
              }
              break;
            case 4:
              v42 = (unint64_t *)*v35;
              do
              {
                v43 = __ldaxr(v42);
                v44 = v43 - 1;
              }
              while (__stlxr(v44, v42));
              if (!v44)
              {
                v45 = *v35;
                if (!*v35)
                  goto LABEL_106;
                __p[0] = v45 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_98;
              }
              break;
            case 5:
              v58 = (unint64_t *)*v35;
              do
              {
                v59 = __ldaxr(v58);
                v60 = v59 - 1;
              }
              while (__stlxr(v60, v58));
              if (!v60)
              {
                v45 = *v35;
                if (!*v35)
                  goto LABEL_106;
                __p[0] = v45 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_98:
                v40 = v45;
                v41 = 0x1020C405E66F15BLL;
                goto LABEL_105;
              }
              break;
            case 8:
              v61 = (unint64_t *)*v35;
              do
              {
                v62 = __ldaxr(v61);
                v63 = v62 - 1;
              }
              while (__stlxr(v63, v61));
              if (!v63)
              {
                v64 = (unsigned int **)*v35;
                if (!*v35)
                  goto LABEL_106;
                boost::detail::shared_count::~shared_count(v64 + 2);
                v40 = v64;
                v52 = -235920773;
                goto LABEL_104;
              }
              break;
            case 9:
              v46 = (unint64_t *)*v35;
              do
              {
                v47 = __ldaxr(v46);
                v48 = v47 - 1;
              }
              while (__stlxr(v48, v46));
              if (!v48)
              {
                v49 = *v35;
                if (*v35)
                {
                  v50 = (void *)v49[6];
                  if (v50)
                  {
                    v49[7] = v50;
                    operator delete(v50);
                  }
                  v51 = (void *)v49[3];
                  if (v51)
                  {
                    v49[4] = v51;
                    operator delete(v51);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v49 + 1));
                  v40 = v49;
                  v52 = 2071181815;
LABEL_104:
                  v41 = v52 | 0x1030C4000000000;
LABEL_105:
                  MEMORY[0x219A19A08](v40, v41);
                }
LABEL_106:
                *v35 = 0;
              }
              break;
            default:
              break;
          }
          v65 = &v34[2 * k];
          v66 = *v65;
          *(void **)((char *)v35 + 5) = *(void **)((char *)v65 + 5);
          *v35 = v66;
          LODWORD(v65) = *((unsigned __int8 *)v65 + 12);
          *((_BYTE *)v35 + 12) = (_BYTE)v65;
          v67 = v65 > 9;
          v68 = (1 << (char)v65) & 0x33C;
          if (!v67 && v68 != 0)
          {
            v70 = (unint64_t *)*v35;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 + 1, v70));
          }
        }
        v32 = *(_QWORD *)(a1 + 784);
      }
    }
    if (v275)
    {
      turi::flexible_type::operator=((uint64_t *)&v268[2 * v32], "<unknown>");
      v32 = *(_QWORD *)(a1 + 784);
    }
    v250 = a1;
    v265 = 0;
    v266 = 0;
    v267 = 0;
    std::vector<turi::flexible_type>::reserve(&v265, v32 + 1);
    v251 = v31;
    if (v31)
    {
      for (m = 0; m != v31; ++m)
      {
        v73 = (char *)v272;
        std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],turi::flexible_type&,0>((turi::flexible_type *)__p, "class", (uint64_t)&v268[2 * m]);
        v74 = (unint64_t *)&v73[24 * m];
        v75 = *v74;
        v76 = v74[2];
        turi::flexible_type::flexible_type((turi::flexible_type *)v285, "actual_count");
        BYTE12(v286) = 0;
        DWORD2(v286) = 0;
        *(_QWORD *)&v286 = v76 + v75;
        v77 = *v74;
        turi::flexible_type::flexible_type((turi::flexible_type *)v287, "predicted_correctly");
        v290 = 0;
        v289 = 0;
        v288 = v77;
        v78 = v74[1];
        turi::flexible_type::flexible_type((turi::flexible_type *)v291, "predicted_this_incorrectly");
        v293 = 0;
        v292 = 0;
        v291[2] = v78;
        v79 = v74[2];
        turi::flexible_type::flexible_type((turi::flexible_type *)v294, "missed_predicting_this");
        v296 = 0;
        v295 = 0;
        v294[2] = v79;
        v80 = *v74;
        v81 = *v74;
        v82 = v74[1];
        turi::flexible_type::flexible_type((turi::flexible_type *)v297, "precision");
        v298 = 0;
        v299 = 1;
        v297[2] = (double)v80 / (double)(v82 + v81);
        v83 = *v74;
        v84 = v74[2];
        turi::flexible_type::flexible_type((turi::flexible_type *)v300, "recall");
        v301 = 0;
        v302 = 1;
        v300[2] = (double)v83 / (double)(v84 + v83);
        v263 = 0;
        v264 = 0;
        v262 = 0;
        *(_QWORD *)&v305 = &v262;
        BYTE8(v305) = 0;
        v85 = (uint64_t *)operator new(0xE0uLL);
        v86 = 0;
        v262 = v85;
        v263 = v85;
        v264 = (std::__shared_weak_count *)(v85 + 28);
        do
        {
          std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)&v85[v86], (uint64_t *)&__p[v86]);
          v86 += 4;
        }
        while (v86 != 28);
        v263 = v85 + 28;
        for (n = 24; n != -4; n -= 4)
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&__p[n]);
        *(_QWORD *)((char *)&v305 + 5) = 0x500000000000000;
        *(_QWORD *)&v305 = 0;
        v88 = (_QWORD *)operator new();
        v89 = v88;
        *v88 = 0;
        v88[1] = 0;
        v90 = (void **)(v88 + 1);
        v88[2] = 0;
        v88[3] = 0;
        *(_QWORD *)&v305 = v88;
        *v88 = 1;
        switch(BYTE12(v305))
        {
          case 2:
            if (*v88 != 1)
            {
              v91 = (_QWORD *)operator new();
              v92 = v305;
              *v91 = *(_QWORD *)v305;
              v93 = (std::string *)(v91 + 1);
              if (*(char *)(v92 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v93, *(const std::string::value_type **)(v92 + 8), *(_QWORD *)(v92 + 16));
              }
              else
              {
                v94 = *(_OWORD *)(v92 + 8);
                v91[3] = *(_QWORD *)(v92 + 24);
                *(_OWORD *)&v93->__r_.__value_.__l.__data_ = v94;
              }
              *(_QWORD *)&v305 = v91;
              *v91 = 1;
              do
              {
                v125 = __ldaxr(v89);
                v126 = v125 - 1;
              }
              while (__stlxr(v126, v89));
              if (!v126)
              {
                v111 = 0x1012C404EF22A49;
                if (*((char *)v89 + 31) < 0)
                {
                  operator delete(*v90);
                  v111 = 0x1012C404EF22A49;
                }
                goto LABEL_167;
              }
            }
            break;
          case 3:
            if (*v88 != 1)
            {
              v106 = (_QWORD *)operator new();
              v107 = v305;
              *v106 = *(_QWORD *)v305;
              v106[2] = 0;
              v106[3] = 0;
              v106[1] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v106 + 1, *(const void **)(v107 + 8), *(_QWORD *)(v107 + 16), (uint64_t)(*(_QWORD *)(v107 + 16) - *(_QWORD *)(v107 + 8)) >> 3);
              *(_QWORD *)&v305 = v106;
              *v106 = 1;
              do
              {
                v108 = __ldaxr(v89);
                v109 = v108 - 1;
              }
              while (__stlxr(v109, v89));
              if (!v109)
              {
                v110 = *v90;
                v111 = 0x1080C409938AC02;
                if (*v90)
                {
                  v89[2] = v110;
                  operator delete(v110);
                  v111 = 0x1080C409938AC02;
                }
                goto LABEL_167;
              }
            }
            break;
          case 4:
            if (*v88 != 1)
            {
              v95 = (_QWORD *)operator new();
              v96 = v305;
              *v95 = *(_QWORD *)v305;
              v95[2] = 0;
              v95[3] = 0;
              v95[1] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v95 + 1, *(uint64_t **)(v96 + 8), *(uint64_t **)(v96 + 16), (uint64_t)(*(_QWORD *)(v96 + 16) - *(_QWORD *)(v96 + 8)) >> 4);
              *(_QWORD *)&v305 = v95;
              *v95 = 1;
              do
              {
                v97 = __ldaxr(v89);
                v98 = v97 - 1;
              }
              while (__stlxr(v98, v89));
              if (!v98)
              {
                __p[0] = v90;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_151;
              }
            }
            break;
          case 5:
            if (*v88 != 1)
            {
              v112 = (_QWORD *)operator new();
              v113 = v305;
              *v112 = *(_QWORD *)v305;
              v112[2] = 0;
              v112[3] = 0;
              v112[1] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v112 + 1, *(uint64_t **)(v113 + 8), *(uint64_t **)(v113 + 16), (uint64_t)(*(_QWORD *)(v113 + 16) - *(_QWORD *)(v113 + 8)) >> 5);
              *(_QWORD *)&v305 = v112;
              *v112 = 1;
              do
              {
                v114 = __ldaxr(v89);
                v115 = v114 - 1;
              }
              while (__stlxr(v115, v89));
              if (!v115)
              {
                __p[0] = v90;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_151:
                v111 = 0x1020C405E66F15BLL;
                goto LABEL_167;
              }
            }
            break;
          case 8:
            if (*v88 != 1)
            {
              v116 = operator new();
              v117 = v305;
              *(_QWORD *)v116 = *(_QWORD *)v305;
              *(_QWORD *)(v116 + 8) = *(_QWORD *)(v117 + 8);
              v118 = *(_QWORD *)(v117 + 16);
              *(_QWORD *)(v116 + 16) = v118;
              if (v118)
              {
                v119 = (unsigned int *)(v118 + 8);
                do
                  v120 = __ldxr(v119);
                while (__stxr(v120 + 1, v119));
              }
              v121 = *(_OWORD *)(v117 + 24);
              v122 = *(_OWORD *)(v117 + 40);
              *(_OWORD *)(v116 + 56) = *(_OWORD *)(v117 + 56);
              *(_OWORD *)(v116 + 40) = v122;
              *(_OWORD *)(v116 + 24) = v121;
              *(_QWORD *)&v305 = v116;
              *(_QWORD *)v116 = 1;
              do
              {
                v123 = __ldaxr(v89);
                v124 = v123 - 1;
              }
              while (__stlxr(v124, v89));
              if (!v124)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v89 + 2);
                v105 = -235920773;
                goto LABEL_160;
              }
            }
            break;
          case 9:
            if (*v88 != 1)
            {
              v99 = (_QWORD *)operator new();
              v100 = v305 + 8;
              *v99 = *(_QWORD *)v305;
              turi::flexible_type_impl::ndarray<double>::ndarray(v99 + 1, v100);
              *(_QWORD *)&v305 = v99;
              *v99 = 1;
              do
              {
                v101 = __ldaxr(v89);
                v102 = v101 - 1;
              }
              while (__stlxr(v102, v89));
              if (!v102)
              {
                v103 = (void *)v89[6];
                if (v103)
                {
                  v89[7] = v103;
                  operator delete(v103);
                }
                v104 = (void *)v89[3];
                if (v104)
                {
                  v89[4] = v104;
                  operator delete(v104);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v90);
                v105 = 2071181815;
LABEL_160:
                v111 = v105 | 0x1030C4000000000;
LABEL_167:
                MEMORY[0x219A19A08](v89, v111);
              }
            }
            break;
          default:
            break;
        }
        if ((uint64_t **)(v305 + 8) != &v262)
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v305 + 8), v262, v263, ((char *)v263 - (char *)v262) >> 5);
        std::vector<turi::flexible_type>::push_back[abi:ne180100](&v265, (uint64_t *)&v305);
        switch(BYTE12(v305))
        {
          case 2:
            v127 = (unint64_t *)v305;
            do
            {
              v128 = __ldaxr(v127);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v127));
            if (!v129)
            {
              v130 = v305;
              if ((_QWORD)v305)
              {
                if (*(char *)(v305 + 31) < 0)
                  operator delete(*(void **)(v305 + 8));
                v131 = v130;
                v132 = 0x1012C404EF22A49;
                goto LABEL_211;
              }
            }
            break;
          case 3:
            v144 = (unint64_t *)v305;
            do
            {
              v145 = __ldaxr(v144);
              v146 = v145 - 1;
            }
            while (__stlxr(v146, v144));
            if (!v146)
            {
              v147 = v305;
              if ((_QWORD)v305)
              {
                v148 = *(void **)(v305 + 8);
                if (v148)
                {
                  *(_QWORD *)(v305 + 16) = v148;
                  operator delete(v148);
                }
                v131 = v147;
                v132 = 0x1080C409938AC02;
                goto LABEL_211;
              }
            }
            break;
          case 4:
            v133 = (unint64_t *)v305;
            do
            {
              v134 = __ldaxr(v133);
              v135 = v134 - 1;
            }
            while (__stlxr(v135, v133));
            if (!v135)
            {
              v136 = v305;
              if ((_QWORD)v305)
              {
                __p[0] = (void *)(v305 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_204;
              }
            }
            break;
          case 5:
            v149 = (unint64_t *)v305;
            do
            {
              v150 = __ldaxr(v149);
              v151 = v150 - 1;
            }
            while (__stlxr(v151, v149));
            if (!v151)
            {
              v136 = v305;
              if ((_QWORD)v305)
              {
                __p[0] = (void *)(v305 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_204:
                v131 = v136;
                v132 = 0x1020C405E66F15BLL;
                goto LABEL_211;
              }
            }
            break;
          case 8:
            v152 = (unint64_t *)v305;
            do
            {
              v153 = __ldaxr(v152);
              v154 = v153 - 1;
            }
            while (__stlxr(v154, v152));
            if (!v154)
            {
              v155 = v305;
              if ((_QWORD)v305)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v305 + 16));
                v131 = v155;
                v143 = -235920773;
                goto LABEL_210;
              }
            }
            break;
          case 9:
            v137 = (unint64_t *)v305;
            do
            {
              v138 = __ldaxr(v137);
              v139 = v138 - 1;
            }
            while (__stlxr(v139, v137));
            if (!v139)
            {
              v140 = v305;
              if ((_QWORD)v305)
              {
                v141 = *(void **)(v305 + 48);
                if (v141)
                {
                  *(_QWORD *)(v305 + 56) = v141;
                  operator delete(v141);
                }
                v142 = *(void **)(v140 + 24);
                if (v142)
                {
                  *(_QWORD *)(v140 + 32) = v142;
                  operator delete(v142);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v140 + 8);
                v131 = v140;
                v143 = 2071181815;
LABEL_210:
                v132 = v143 | 0x1030C4000000000;
LABEL_211:
                MEMORY[0x219A19A08](v131, v132);
              }
            }
            break;
          default:
            break;
        }
        __p[0] = &v262;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
    }
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)&v262);
    turi::gl_sarray::construct_from_vector((uint64_t)&v262, &v265, 5);
    std::string::basic_string[abi:ne180100]<0>(v258, "");
    v255 = 0;
    v256 = 0;
    v257 = 0;
    v252 = 0;
    v253 = 0;
    v254 = 0;
    turi::gl_sarray::unpack((turi::gl_sarray *)&v262, (uint64_t)v258, (uint64_t)&v255, (uint64_t)&turi::FLEX_UNDEFINED, &v252, (uint64_t)v260);
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v305, (const turi::gl_sframe *)v260);
    v156.n128_f64[0] = turi::variant_converter<turi::gl_sframe,void>::set((uint64_t)&v305, (uint64_t)__p);
    *(_QWORD *)&v305 = off_24D91E9C0;
    v157 = (std::__shared_weak_count *)v306[0];
    if (v306[0])
    {
      v158 = (unint64_t *)(v306[0] + 8);
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v157->__on_zero_shared)(v157, v156);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v305, "report_by_class");
    v281[0] = &v305;
    v160 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a5, (const void **)&v305, (uint64_t)&std::piecewise_construct, v281);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v160 + 14, (unsigned int *)__p);
    if (SHIBYTE(v306[0]) < 0)
      operator delete((void *)v305);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
    v260[0] = off_24D91E9C0;
    v161 = v261;
    if (v261)
    {
      v162 = (unint64_t *)&v261->__shared_owners_;
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 - 1, v162));
      if (!v163)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
    *(_QWORD *)&v305 = &v252;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v305);
    if (v255)
    {
      v256 = v255;
      operator delete(v255);
    }
    if (v259 < 0)
      operator delete(v258[0]);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v262);
    __p[0] = &v265;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v265 = 0;
    v266 = 0;
    v267 = 0;
    std::vector<turi::flexible_type>::reserve(&v265, v31 * v31);
    if (v31)
    {
      v164 = 0;
      do
      {
        v165 = 0;
        do
        {
          v166 = *((_QWORD *)v271[0] + v164 + v164 * *(_QWORD *)(a1 + 784) + v165);
          if (v166)
          {
            std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],turi::flexible_type&,0>((turi::flexible_type *)__p, "predicted_class", (uint64_t)&v268[2 * v164]);
            std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],turi::flexible_type&,0>((turi::flexible_type *)v285, "class", (uint64_t)&v268[2 * v165]);
            turi::flexible_type::flexible_type((turi::flexible_type *)v287, "count");
            v290 = 0;
            v289 = 0;
            v288 = v166;
            v263 = 0;
            v264 = 0;
            v262 = 0;
            *(_QWORD *)&v305 = &v262;
            BYTE8(v305) = 0;
            v167 = (uint64_t *)operator new(0x60uLL);
            v168 = 0;
            v262 = v167;
            v263 = v167;
            v264 = (std::__shared_weak_count *)(v167 + 12);
            do
            {
              std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)&v167[v168], (uint64_t *)&__p[v168]);
              v168 += 4;
            }
            while (v168 != 12);
            v263 = v167 + 12;
            for (ii = 8; ii != -4; ii -= 4)
              std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&__p[ii]);
            *(_QWORD *)((char *)&v305 + 5) = 0x500000000000000;
            *(_QWORD *)&v305 = 0;
            v170 = (_QWORD *)operator new();
            v171 = v170;
            *v170 = 0;
            v170[1] = 0;
            v172 = (void **)(v170 + 1);
            v170[2] = 0;
            v170[3] = 0;
            *(_QWORD *)&v305 = v170;
            *v170 = 1;
            switch(BYTE12(v305))
            {
              case 2:
                if (*v170 != 1)
                {
                  v173 = (_QWORD *)operator new();
                  v174 = v305;
                  *v173 = *(_QWORD *)v305;
                  v175 = (std::string *)(v173 + 1);
                  if (*(char *)(v174 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v175, *(const std::string::value_type **)(v174 + 8), *(_QWORD *)(v174 + 16));
                  }
                  else
                  {
                    v176 = *(_OWORD *)(v174 + 8);
                    v173[3] = *(_QWORD *)(v174 + 24);
                    *(_OWORD *)&v175->__r_.__value_.__l.__data_ = v176;
                  }
                  *(_QWORD *)&v305 = v173;
                  *v173 = 1;
                  do
                  {
                    v207 = __ldaxr(v171);
                    v208 = v207 - 1;
                  }
                  while (__stlxr(v208, v171));
                  if (!v208)
                  {
                    v193 = 0x1012C404EF22A49;
                    if (*((char *)v171 + 31) < 0)
                    {
                      operator delete(*v172);
                      v193 = 0x1012C404EF22A49;
                    }
                    goto LABEL_282;
                  }
                }
                break;
              case 3:
                if (*v170 != 1)
                {
                  v188 = (_QWORD *)operator new();
                  v189 = v305;
                  *v188 = *(_QWORD *)v305;
                  v188[2] = 0;
                  v188[3] = 0;
                  v188[1] = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v188 + 1, *(const void **)(v189 + 8), *(_QWORD *)(v189 + 16), (uint64_t)(*(_QWORD *)(v189 + 16) - *(_QWORD *)(v189 + 8)) >> 3);
                  *(_QWORD *)&v305 = v188;
                  *v188 = 1;
                  do
                  {
                    v190 = __ldaxr(v171);
                    v191 = v190 - 1;
                  }
                  while (__stlxr(v191, v171));
                  if (!v191)
                  {
                    v192 = *v172;
                    v193 = 0x1080C409938AC02;
                    if (*v172)
                    {
                      v171[2] = v192;
                      operator delete(v192);
                      v193 = 0x1080C409938AC02;
                    }
                    goto LABEL_282;
                  }
                }
                break;
              case 4:
                if (*v170 != 1)
                {
                  v177 = (_QWORD *)operator new();
                  v178 = v305;
                  *v177 = *(_QWORD *)v305;
                  v177[2] = 0;
                  v177[3] = 0;
                  v177[1] = 0;
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v177 + 1, *(uint64_t **)(v178 + 8), *(uint64_t **)(v178 + 16), (uint64_t)(*(_QWORD *)(v178 + 16) - *(_QWORD *)(v178 + 8)) >> 4);
                  *(_QWORD *)&v305 = v177;
                  *v177 = 1;
                  do
                  {
                    v179 = __ldaxr(v171);
                    v180 = v179 - 1;
                  }
                  while (__stlxr(v180, v171));
                  if (!v180)
                  {
                    __p[0] = v172;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                    goto LABEL_266;
                  }
                }
                break;
              case 5:
                if (*v170 != 1)
                {
                  v194 = (_QWORD *)operator new();
                  v195 = v305;
                  *v194 = *(_QWORD *)v305;
                  v194[2] = 0;
                  v194[3] = 0;
                  v194[1] = 0;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v194 + 1, *(uint64_t **)(v195 + 8), *(uint64_t **)(v195 + 16), (uint64_t)(*(_QWORD *)(v195 + 16) - *(_QWORD *)(v195 + 8)) >> 5);
                  *(_QWORD *)&v305 = v194;
                  *v194 = 1;
                  do
                  {
                    v196 = __ldaxr(v171);
                    v197 = v196 - 1;
                  }
                  while (__stlxr(v197, v171));
                  if (!v197)
                  {
                    __p[0] = v172;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_266:
                    v193 = 0x1020C405E66F15BLL;
                    goto LABEL_282;
                  }
                }
                break;
              case 8:
                if (*v170 != 1)
                {
                  v198 = operator new();
                  v199 = v305;
                  *(_QWORD *)v198 = *(_QWORD *)v305;
                  *(_QWORD *)(v198 + 8) = *(_QWORD *)(v199 + 8);
                  v200 = *(_QWORD *)(v199 + 16);
                  *(_QWORD *)(v198 + 16) = v200;
                  if (v200)
                  {
                    v201 = (unsigned int *)(v200 + 8);
                    do
                      v202 = __ldxr(v201);
                    while (__stxr(v202 + 1, v201));
                  }
                  v203 = *(_OWORD *)(v199 + 24);
                  v204 = *(_OWORD *)(v199 + 40);
                  *(_OWORD *)(v198 + 56) = *(_OWORD *)(v199 + 56);
                  *(_OWORD *)(v198 + 40) = v204;
                  *(_OWORD *)(v198 + 24) = v203;
                  *(_QWORD *)&v305 = v198;
                  *(_QWORD *)v198 = 1;
                  do
                  {
                    v205 = __ldaxr(v171);
                    v206 = v205 - 1;
                  }
                  while (__stlxr(v206, v171));
                  if (!v206)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)v171 + 2);
                    v187 = -235920773;
                    goto LABEL_275;
                  }
                }
                break;
              case 9:
                if (*v170 != 1)
                {
                  v181 = (_QWORD *)operator new();
                  v182 = v305 + 8;
                  *v181 = *(_QWORD *)v305;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v181 + 1, v182);
                  *(_QWORD *)&v305 = v181;
                  *v181 = 1;
                  do
                  {
                    v183 = __ldaxr(v171);
                    v184 = v183 - 1;
                  }
                  while (__stlxr(v184, v171));
                  if (!v184)
                  {
                    v185 = (void *)v171[6];
                    if (v185)
                    {
                      v171[7] = v185;
                      operator delete(v185);
                    }
                    v186 = (void *)v171[3];
                    if (v186)
                    {
                      v171[4] = v186;
                      operator delete(v186);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v172);
                    v187 = 2071181815;
LABEL_275:
                    v193 = v187 | 0x1030C4000000000;
LABEL_282:
                    MEMORY[0x219A19A08](v171, v193);
                  }
                }
                break;
              default:
                break;
            }
            if ((uint64_t **)(v305 + 8) != &v262)
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v305 + 8), v262, v263, ((char *)v263 - (char *)v262) >> 5);
            std::vector<turi::flexible_type>::push_back[abi:ne180100](&v265, (uint64_t *)&v305);
            switch(BYTE12(v305))
            {
              case 2:
                v209 = (unint64_t *)v305;
                do
                {
                  v210 = __ldaxr(v209);
                  v211 = v210 - 1;
                }
                while (__stlxr(v211, v209));
                if (!v211)
                {
                  v212 = v305;
                  if ((_QWORD)v305)
                  {
                    if (*(char *)(v305 + 31) < 0)
                      operator delete(*(void **)(v305 + 8));
                    v213 = v212;
                    v214 = 0x1012C404EF22A49;
                    goto LABEL_326;
                  }
                }
                break;
              case 3:
                v226 = (unint64_t *)v305;
                do
                {
                  v227 = __ldaxr(v226);
                  v228 = v227 - 1;
                }
                while (__stlxr(v228, v226));
                if (!v228)
                {
                  v229 = v305;
                  if ((_QWORD)v305)
                  {
                    v230 = *(void **)(v305 + 8);
                    if (v230)
                    {
                      *(_QWORD *)(v305 + 16) = v230;
                      operator delete(v230);
                    }
                    v213 = v229;
                    v214 = 0x1080C409938AC02;
                    goto LABEL_326;
                  }
                }
                break;
              case 4:
                v215 = (unint64_t *)v305;
                do
                {
                  v216 = __ldaxr(v215);
                  v217 = v216 - 1;
                }
                while (__stlxr(v217, v215));
                if (!v217)
                {
                  v218 = v305;
                  if ((_QWORD)v305)
                  {
                    __p[0] = (void *)(v305 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                    goto LABEL_319;
                  }
                }
                break;
              case 5:
                v231 = (unint64_t *)v305;
                do
                {
                  v232 = __ldaxr(v231);
                  v233 = v232 - 1;
                }
                while (__stlxr(v233, v231));
                if (!v233)
                {
                  v218 = v305;
                  if ((_QWORD)v305)
                  {
                    __p[0] = (void *)(v305 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_319:
                    v213 = v218;
                    v214 = 0x1020C405E66F15BLL;
                    goto LABEL_326;
                  }
                }
                break;
              case 8:
                v234 = (unint64_t *)v305;
                do
                {
                  v235 = __ldaxr(v234);
                  v236 = v235 - 1;
                }
                while (__stlxr(v236, v234));
                if (!v236)
                {
                  v237 = v305;
                  if ((_QWORD)v305)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(v305 + 16));
                    v213 = v237;
                    v225 = -235920773;
                    goto LABEL_325;
                  }
                }
                break;
              case 9:
                v219 = (unint64_t *)v305;
                do
                {
                  v220 = __ldaxr(v219);
                  v221 = v220 - 1;
                }
                while (__stlxr(v221, v219));
                if (!v221)
                {
                  v222 = v305;
                  if ((_QWORD)v305)
                  {
                    v223 = *(void **)(v305 + 48);
                    if (v223)
                    {
                      *(_QWORD *)(v305 + 56) = v223;
                      operator delete(v223);
                    }
                    v224 = *(void **)(v222 + 24);
                    if (v224)
                    {
                      *(_QWORD *)(v222 + 32) = v224;
                      operator delete(v224);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v222 + 8);
                    v213 = v222;
                    v225 = 2071181815;
LABEL_325:
                    v214 = v225 | 0x1030C4000000000;
LABEL_326:
                    MEMORY[0x219A19A08](v213, v214);
                  }
                }
                break;
              default:
                break;
            }
            __p[0] = &v262;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            a1 = v250;
          }
          ++v165;
        }
        while (v165 != v251);
        ++v164;
      }
      while (v164 != v251);
    }
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)&v262);
    turi::gl_sarray::construct_from_vector((uint64_t)&v262, &v265, 5);
    std::string::basic_string[abi:ne180100]<0>(v258, "");
    v255 = 0;
    v256 = 0;
    v257 = 0;
    v252 = 0;
    v253 = 0;
    v254 = 0;
    turi::gl_sarray::unpack((turi::gl_sarray *)&v262, (uint64_t)v258, (uint64_t)&v255, (uint64_t)&turi::FLEX_UNDEFINED, &v252, (uint64_t)v260);
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v305, (const turi::gl_sframe *)v260);
    v238.n128_f64[0] = turi::variant_converter<turi::gl_sframe,void>::set((uint64_t)&v305, (uint64_t)__p);
    *(_QWORD *)&v305 = off_24D91E9C0;
    v239 = (std::__shared_weak_count *)v306[0];
    if (v306[0])
    {
      v240 = (unint64_t *)(v306[0] + 8);
      do
        v241 = __ldaxr(v240);
      while (__stlxr(v241 - 1, v240));
      if (!v241)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v239->__on_zero_shared)(v239, v238);
        std::__shared_weak_count::__release_weak(v239);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v305, "confusion_matrix");
    v281[0] = &v305;
    v242 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a5, (const void **)&v305, (uint64_t)&std::piecewise_construct, v281);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v242 + 14, (unsigned int *)__p);
    if (SHIBYTE(v306[0]) < 0)
      operator delete((void *)v305);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
    v260[0] = off_24D91E9C0;
    v243 = v261;
    if (v261)
    {
      v244 = (unint64_t *)&v261->__shared_owners_;
      do
        v245 = __ldaxr(v244);
      while (__stlxr(v245 - 1, v244));
      if (!v245)
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
      }
    }
    *(_QWORD *)&v305 = &v252;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v305);
    if (v255)
    {
      v256 = v255;
      operator delete(v255);
    }
    if (v259 < 0)
      operator delete(v258[0]);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v262);
    __p[0] = &v265;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v268;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (v271[0])
  {
    v271[1] = v271[0];
    operator delete(v271[0]);
  }
  if (v272)
  {
    v273 = v272;
    operator delete(v272);
  }
  v279[0] = off_24D91E9C0;
  v246 = v280;
  if (v280)
  {
    v247 = (unint64_t *)&v280->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
}

void sub_2184E3E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  uint64_t v62;
  uint64_t v63;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  unsigned int v87;
  _QWORD *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;

  MEMORY[0x219A19A08](v62, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v63 - 108))
  {
    case 2:
      v65 = *(unint64_t **)(v63 - 120);
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
      {
        v83 = *(_QWORD *)(v63 - 120);
        if (v83)
        {
          if (*(char *)(v83 + 31) < 0)
            operator delete(*(void **)(v83 + 8));
          MEMORY[0x219A19A08](v83, 0x1012C404EF22A49);
        }
      }
      goto LABEL_46;
    case 3:
      v74 = *(unint64_t **)(v63 - 120);
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (v76)
        goto LABEL_46;
      v88 = *(_QWORD **)(v63 - 120);
      if (!v88)
        goto LABEL_45;
      v89 = (void *)v88[1];
      if (v89)
      {
        v88[2] = v89;
        operator delete(v89);
      }
      v86 = v88;
      v90 = 0x1080C409938AC02;
      goto LABEL_44;
    case 4:
      v68 = *(unint64_t **)(v63 - 120);
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (v70)
        goto LABEL_46;
      v84 = *(_QWORD **)(v63 - 120);
      if (!v84)
        goto LABEL_45;
      a62 = v84 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
      goto LABEL_39;
    case 5:
      v77 = *(unint64_t **)(v63 - 120);
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (v79)
        goto LABEL_46;
      v84 = *(_QWORD **)(v63 - 120);
      if (!v84)
        goto LABEL_45;
      a62 = v84 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
LABEL_39:
      v86 = v84;
      v90 = 0x1020C405E66F15BLL;
      goto LABEL_44;
    case 8:
      v80 = *(unint64_t **)(v63 - 120);
      do
      {
        v81 = __ldaxr(v80);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v80));
      if (v82)
        goto LABEL_46;
      v91 = *(_QWORD *)(v63 - 120);
      if (!v91)
        goto LABEL_45;
      boost::detail::shared_count::~shared_count((unsigned int **)(v91 + 16));
      v86 = (_QWORD *)v91;
      v87 = -235920773;
      goto LABEL_43;
    case 9:
      v71 = *(unint64_t **)(v63 - 120);
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (v73)
        goto LABEL_46;
      v85 = *(_QWORD **)(v63 - 120);
      if (!v85)
        goto LABEL_45;
      v86 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v85);
      v87 = 2071181815;
LABEL_43:
      v90 = v87 | 0x1030C4000000000;
LABEL_44:
      MEMORY[0x219A19A08](v86, v90);
LABEL_45:
      *(_QWORD *)(v63 - 120) = 0;
LABEL_46:
      a62 = &a35;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
      a62 = &a40;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
      a62 = &a43;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a10, *(char **)(a10 + 8));
      if (__p)
      {
        a48 = (uint64_t)__p;
        operator delete(__p);
      }
      if (a50)
      {
        a51 = (uint64_t)a50;
        operator delete(a50);
      }
      a56 = (uint64_t)off_24D91E9C0;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_46;
  }
}

void turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::thread *a1@<X0>, const turi::gl_sarray *a2@<X1>, const turi::gl_sarray *a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  int v10;
  char *v11;
  uint64_t i;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t j;
  unsigned int *v20;
  unsigned int *v21;
  _QWORD *v22;
  double *v23;
  double v24;
  double *v25;
  double v26;
  double v27;
  unsigned int *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  void *v38[2];
  std::__shared_weak_count *v39;
  _QWORD v40[2];
  std::__shared_weak_count *v41;
  void *v42;
  char *v43;
  char *v44;
  std::__shared_weak_count *v45;
  __int16 v46;
  std::string **v47;
  char v48;
  _BYTE v49[24];
  _BYTE *v50;
  void *__p[2];
  char v52;
  _QWORD v53[3];
  __int128 v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  v9 = turi::thread::cpu_count(a1);
  v46 = 0;
  v10 = *((char *)a4 + 23);
  if (v10 < 0)
  {
    if (a4[1] != (uint64_t *)4)
      goto LABEL_9;
    a4 = (uint64_t **)*a4;
  }
  else if (v10 != 4)
  {
    goto LABEL_9;
  }
  if (*(_DWORD *)a4 == 1869903201 || *(_DWORD *)a4 == 1819047270)
    v46 = 257;
LABEL_9:
  v11 = (char *)operator new(0x58uLL);
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &unk_24D9427A0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  v45 = (std::__shared_weak_count *)v11;
  *((_QWORD *)v11 + 3) = &unk_24D9427F0;
  v44 = v11 + 24;
  turi::evaluation::rmse::init((turi::evaluation::rmse *)(v11 + 24), v9);
  __p[0] = 0;
  std::vector<double>::vector(&v42, v9, __p);
  std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray&,0>(__p, "predicted", a2);
  std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray&,0>(v55, "actual", a3);
  turi::gl_sframe::gl_sframe(v40, __p, 2);
  for (i = 0; i != -16; i -= 8)
  {
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v55[i + 3]);
    if (SHIBYTE(v55[i + 2]) < 0)
      operator delete((void *)v55[i]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "predicted");
  std::string::basic_string[abi:ne180100]<0>(v53, "actual");
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v47 = &v35;
  v48 = 0;
  v35 = (std::string *)operator new(0x30uLL);
  v36 = v35;
  v37 = v35 + 2;
  v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v37, (__int128 *)__p, &v54, v35);
  turi::gl_sframe::select_columns((uint64_t)v40, (uint64_t)&v35, v38);
  v50 = 0;
  v13 = operator new(0x28uLL);
  *v13 = &off_24D945CB8;
  v13[1] = (char *)&v46 + 1;
  v13[2] = &v44;
  v13[3] = &v46;
  v13[4] = &v42;
  v50 = v13;
  turi::gl_sframe::materialize_to_callback((uint64_t)v38, (uint64_t)v49, -1);
  v14 = v50;
  if (v50 == v49)
  {
    v15 = 4;
    v14 = v49;
    goto LABEL_17;
  }
  if (v50)
  {
    v15 = 5;
LABEL_17:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v38[0] = off_24D91E9C0;
  v16 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v47 = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v53[j + 2]) < 0)
      operator delete((void *)v53[j]);
  }
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  v35 = (std::string *)turi::gl_sframe::size((turi::gl_sframe *)v40);
  std::string::basic_string[abi:ne180100]<0>(__p, "number_of_examples");
  v38[0] = __p;
  v20 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a5, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v38);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(v20 + 14, &v35);
  if (v52 < 0)
    operator delete(__p[0]);
  if (HIBYTE(v46))
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v44 + 64))(__p);
    std::string::basic_string[abi:ne180100]<0>(v38, "rmse");
    v35 = (std::string *)v38;
    v21 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a5, (const void **)v38, (uint64_t)&std::piecewise_construct, (_OWORD **)&v35);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v21 + 14, (unsigned int *)__p);
    if (SHIBYTE(v39) < 0)
      operator delete(v38[0]);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
  }
  if ((_BYTE)v46)
  {
    v22 = v42;
    if (v42 != v43)
    {
      v23 = (double *)((char *)v42 + 8);
      if ((char *)v42 + 8 != v43)
      {
        v24 = *(double *)v42;
        v25 = (double *)((char *)v42 + 8);
        do
        {
          v26 = *v25++;
          v27 = v26;
          if (v24 < v26)
          {
            v24 = v27;
            v22 = v23;
          }
          v23 = v25;
        }
        while (v25 != (double *)v43);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "max_error");
    v38[0] = __p;
    v28 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a5, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v38);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v28 + 14, v22);
    if (v52 < 0)
      operator delete(__p[0]);
  }
  v40[0] = off_24D91E9C0;
  v29 = v41;
  if (v41)
  {
    v30 = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v42)
  {
    v43 = (char *)v42;
    operator delete(v42);
  }
  v32 = v45;
  if (v45)
  {
    v33 = (unint64_t *)&v45->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_2184E4C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v38, *(char **)(v38 + 8));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,turi::supervised_2::supervised_learning_model_base::prediction_type_enum>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_2184E4FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,turi::ml_column_mode>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::unary_op> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_2184E50A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(uint64_t **a1, const void **a2, __int128 *a3, unsigned int *a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  uint64_t result;

  v7 = a1 + 8;
  v8 = operator new(0x88uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)v8 + 32, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2184E51B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>(uint64_t a1, __int128 *a2, unsigned int *a3)
{
  __int128 v5;
  __int128 **v7;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = (__int128 **)(a1 + 32);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((__int128 *)*a3, *a3 ^ ((int)*a3 >> 31), &v7, (__int128 **)a3 + 1);
  *(_DWORD *)(a1 + 24) = *a3 ^ ((int)*a3 >> 31);
  return a1;
}

void sub_2184E523C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(unsigned int *a1, const void ***a2)
{
  const void ***v4;
  const void ****v5;
  uint64_t *v6[10];

  v6[9] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ ((int)*a1 >> 31), (uint64_t **)&v5, (uint64_t ***)a1 + 1) & 1) == 0)
  {
    boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper(v6, a2);
    LODWORD(v5) = 6;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v5);
  }
}

void sub_2184E5300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, unsigned int a2, uint64_t **a3, uint64_t ***a4)
{
  uint64_t result;
  uint64_t v5;

  result = 0;
  if (a2 >= 6)
  {
    switch(a2)
    {
      case 6u:
        v5 = **a3;
        if ((uint64_t **)v5 != *a4)
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>(*a4, *(__int128 **)v5, (__int128 *)(v5 + 8));
        result = 1;
        break;
      case 7u:
      case 8u:
        return result;
      default:
        boost::detail::variant::forced_return<void>(0);
    }
  }
  return result;
}

void std::__function::__func<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D945AB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D945AB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()@<X0>(uint64_t a1@<X0>, const turi::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = turi::ml_data_internal::column_indexer::immutable_map_value_to_index(*(void ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 768) + 24) + 32), a2);
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_QWORD *)a3 = result;
  return result;
}

uint64_t std::__function::__func<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::evaluate(turi::gl_sframe,std::string const&,turi::gl_sarray,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

turi::gl_sarray_writer *std::unique_ptr<turi::gl_sarray_writer>::reset[abi:ne180100](turi::gl_sarray_writer **a1, turi::gl_sarray_writer *a2)
{
  turi::gl_sarray_writer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::gl_sarray_writer::~gl_sarray_writer(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void std::__function::__func<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D945B38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D945B38;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  turi::gl_sarray_writer_impl **v11;
  std::mutex *v12;
  turi::gl_sarray_writer **v13;
  turi::gl_sarray_writer *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v49;
  void **v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  __int16 v53;
  _BYTE v54[128];
  uint64_t v55;
  unsigned __int8 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  __int16 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  v49 = *a3;
  turi::ml_data::get_iterator(*(turi::ml_data **)(a1 + 8), *a2, *a3, (uint64_t)v54);
  if (v60 != v59)
  {
    do
    {
      v50 = (void **)v62;
      v51 = v63;
      if (v63)
      {
        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v52 = v64;
      v53 = v65;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void ***, _QWORD))(*(_QWORD *)v5 + 152))(&v66, v5, &v50, **(unsigned int **)(a1 + 24));
      v8 = v51;
      if (v51)
      {
        v9 = (unint64_t *)&v51->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = **(turi::gl_sarray_writer_impl ****)(a1 + 32);
      if (!v11)
      {
        v12 = *(std::mutex **)(a1 + 40);
        std::mutex::lock(v12);
        v13 = *(turi::gl_sarray_writer ***)(a1 + 32);
        if (!*v13)
        {
          v14 = (turi::gl_sarray_writer *)operator new();
          turi::gl_sarray_writer::gl_sarray_writer(v14, v67, v49);
          std::unique_ptr<turi::gl_sarray_writer>::reset[abi:ne180100](v13, v14);
        }
        std::mutex::unlock(v12);
        v11 = **(turi::gl_sarray_writer_impl ****)(a1 + 32);
      }
      turi::gl_sarray_writer::write(v11, (const turi::flexible_type *)&v66, v4);
      switch(v67)
      {
        case 2:
          v15 = (unint64_t *)v66;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            v18 = v66;
            if (v66)
            {
              if (*(char *)(v66 + 31) < 0)
                operator delete(*(void **)(v66 + 8));
              v19 = v18;
              v20 = 0x1012C404EF22A49;
              goto LABEL_55;
            }
          }
          break;
        case 3:
          v21 = (unint64_t *)v66;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v24 = v66;
            if (v66)
            {
              v25 = *(void **)(v66 + 8);
              if (v25)
              {
                *(_QWORD *)(v66 + 16) = v25;
                operator delete(v25);
              }
              v19 = v24;
              v20 = 0x1080C409938AC02;
              goto LABEL_55;
            }
          }
          break;
        case 4:
          v26 = (unint64_t *)v66;
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            v29 = v66;
            if (v66)
            {
              v50 = (void **)(v66 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
              goto LABEL_39;
            }
          }
          break;
        case 5:
          v30 = (unint64_t *)v66;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            v29 = v66;
            if (v66)
            {
              v50 = (void **)(v66 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_39:
              v19 = v29;
              v20 = 0x1020C405E66F15BLL;
              goto LABEL_55;
            }
          }
          break;
        case 8:
          v33 = (unint64_t *)v66;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v36 = v66;
            if (v66)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v66 + 16));
              v19 = v36;
              v37 = -235920773;
              goto LABEL_54;
            }
          }
          break;
        case 9:
          v38 = (unint64_t *)v66;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            v41 = v66;
            if (v66)
            {
              v42 = *(void **)(v66 + 48);
              if (v42)
              {
                *(_QWORD *)(v66 + 56) = v42;
                operator delete(v42);
              }
              v43 = *(void **)(v41 + 24);
              if (v43)
              {
                *(_QWORD *)(v41 + 32) = v43;
                operator delete(v43);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v41 + 8);
              v19 = v41;
              v37 = 2071181815;
LABEL_54:
              v20 = v37 | 0x1030C4000000000;
LABEL_55:
              MEMORY[0x219A19A08](v19, v20);
            }
          }
          break;
        default:
          break;
      }
      if (v65 | v56)
      {
        v44 = (uint64_t *)(*(_QWORD *)(v62 + 96) + 8 * v64);
        if (v57)
          v44 = &v58;
        *(_QWORD *)&v64 = *v44 + v64;
      }
      v45 = v60 + 1;
      v46 = v59;
      v47 = ++v60 - v55 * v61;
      *((_QWORD *)&v64 + 1) = v47;
      if (v47 == v55 && v45 != v59)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v54);
        v46 = v59;
        v45 = v60;
      }
    }
    while (v45 != v46);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v54);
}

void sub_2184E5924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void **v36;
  va_list va;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v36 = va_arg(va1, void **);
  v38 = va_arg(va1, _QWORD);
  v39 = va_arg(va1, _QWORD);
  v40 = va_arg(va1, _QWORD);
  v41 = va_arg(va1, _QWORD);
  MEMORY[0x219A19A08](v4, 0x20C4093837F09);
  std::mutex::unlock(v3);
  switch(*(_BYTE *)(v5 - 100))
  {
    case 2:
      v7 = *(unint64_t **)(v5 - 112);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (v9)
        goto LABEL_43;
      v10 = *(_QWORD *)(v5 - 112);
      if (!v10)
        goto LABEL_43;
      if (*(char *)(v10 + 31) < 0)
        operator delete(*(void **)(v10 + 8));
      v11 = (_QWORD *)v10;
      v12 = 0x1012C404EF22A49;
      goto LABEL_42;
    case 3:
      v24 = *(unint64_t **)(v5 - 112);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (v26)
        goto LABEL_43;
      v27 = *(_QWORD **)(v5 - 112);
      if (!v27)
        goto LABEL_43;
      v28 = (void *)v27[1];
      if (v28)
      {
        v27[2] = v28;
        operator delete(v28);
      }
      v11 = v27;
      v12 = 0x1080C409938AC02;
      goto LABEL_42;
    case 4:
      v13 = *(unint64_t **)(v5 - 112);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (v15)
        goto LABEL_43;
      v16 = *(_QWORD *)(v5 - 112);
      if (!v16)
        goto LABEL_43;
      v36 = (void **)(v16 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
      goto LABEL_35;
    case 5:
      v29 = *(unint64_t **)(v5 - 112);
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_43;
      v16 = *(_QWORD *)(v5 - 112);
      if (!v16)
        goto LABEL_43;
      v36 = (void **)(v16 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
LABEL_35:
      v11 = (_QWORD *)v16;
      v12 = 0x1020C405E66F15BLL;
      goto LABEL_42;
    case 8:
      v32 = *(unint64_t **)(v5 - 112);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_43;
      v35 = *(_QWORD *)(v5 - 112);
      if (!v35)
        goto LABEL_43;
      boost::detail::shared_count::~shared_count((unsigned int **)(v35 + 16));
      v11 = (_QWORD *)v35;
      v23 = -235920773;
      goto LABEL_41;
    case 9:
      v17 = *(unint64_t **)(v5 - 112);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_43;
      v20 = *(_QWORD **)(v5 - 112);
      if (!v20)
        goto LABEL_43;
      v21 = (void *)v20[6];
      if (v21)
      {
        v20[7] = v21;
        operator delete(v21);
      }
      v22 = (void *)v20[3];
      if (v22)
      {
        v20[4] = v22;
        operator delete(v22);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v20 + 1));
      v11 = v20;
      v23 = 2071181815;
LABEL_41:
      v12 = v23 | 0x1030C4000000000;
LABEL_42:
      MEMORY[0x219A19A08](v11, v12);
LABEL_43:
      turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)va1);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_43;
  }
}

void sub_2184E5B54()
{
  JUMPOUT(0x2184E5B4CLL);
}

uint64_t std::__function::__func<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_predict(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__function::__func<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24D945BB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24D945BB8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  turi::gl_sarray_writer_impl **v12;
  std::mutex *v13;
  uint64_t v14;
  turi::gl_sarray_writer **v15;
  turi::gl_sarray_writer *v16;
  turi::gl_sarray_writer **v17;
  turi::gl_sarray_writer *v18;
  BOOL v19;
  void **v20;
  _QWORD *v21;
  turi::gl_sarray_writer_impl **v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  void **v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void **v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  void **v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  void **v44;
  unsigned int v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  void **v49;
  void *v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v86;
  unint64_t v87;
  _BYTE v88[128];
  uint64_t v89;
  unsigned __int8 v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  __int128 v98;
  __int16 v99;
  void **v100;
  void **v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  __int16 v104;
  uint64_t v105;
  char v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 16);
  v87 = *a3;
  turi::ml_data::get_iterator(*(turi::ml_data **)(a1 + 8), *a2, *a3, (uint64_t)v88);
  if (v94 != v93)
  {
    v86 = v5;
    do
    {
      v101 = (void **)v96;
      v102 = v97;
      if (v97)
      {
        p_shared_owners = (unint64_t *)&v97->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v103 = v98;
      v104 = v99;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void ***, _QWORD))(*(_QWORD *)v6 + 152))(&v105, v6, &v101, **(unsigned int **)(a1 + 24));
      v9 = v102;
      if (v102)
      {
        v10 = (unint64_t *)&v102->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = **(turi::gl_sarray_writer_impl ****)(a1 + 32);
      if (!v12)
      {
        v13 = *(std::mutex **)(a1 + 40);
        std::mutex::lock(v13);
        if (!**(_QWORD **)(a1 + 32))
        {
          v14 = v3;
          v15 = *(turi::gl_sarray_writer ***)(a1 + 48);
          v16 = (turi::gl_sarray_writer *)operator new();
          turi::gl_sarray_writer::gl_sarray_writer(v16, **(char **)(a1 + 56), v87);
          std::unique_ptr<turi::gl_sarray_writer>::reset[abi:ne180100](v15, v16);
          v17 = *(turi::gl_sarray_writer ***)(a1 + 32);
          v18 = (turi::gl_sarray_writer *)operator new();
          turi::gl_sarray_writer::gl_sarray_writer(v18, **(char **)(a1 + 56), v87);
          std::unique_ptr<turi::gl_sarray_writer>::reset[abi:ne180100](v17, v18);
          v3 = v14;
          v5 = v86;
        }
        std::mutex::unlock(v13);
        v12 = **(turi::gl_sarray_writer_impl ****)(a1 + 32);
      }
      turi::gl_sarray_writer::write(v12, (const turi::flexible_type *)&v105, v5);
      if (*(_BYTE *)(v96 + 16))
        v19 = *(_BYTE *)(v96 + 17) == 0;
      else
        v19 = 1;
      if (v19)
      {
        v20 = 0;
      }
      else
      {
        v21 = (_QWORD *)(v96 + 24);
        if (!*(_BYTE *)(v96 + 18))
          v21 = (_QWORD *)(*(_QWORD *)(v96 + 96) + 8 * v98);
        v20 = *(void ***)(*(_QWORD *)(v96 + 96) + 8 * v98 + 8 * *v21 - 8);
      }
      v22 = **(turi::gl_sarray_writer_impl ****)(a1 + 48);
      BYTE4(v102) = 0;
      LODWORD(v102) = 0;
      v101 = v20;
      turi::gl_sarray_writer::write(v22, (const turi::flexible_type *)&v101, v5);
      switch(BYTE4(v102))
      {
        case 2:
          v23 = (unint64_t *)v101;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = v101;
            if (v101)
            {
              if (*((char *)v101 + 31) < 0)
                operator delete(v101[1]);
              v27 = v26;
              v28 = 0x1012C404EF22A49;
              goto LABEL_65;
            }
          }
          break;
        case 3:
          v29 = (unint64_t *)v101;
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            v32 = v101;
            if (v101)
            {
              v33 = v101[1];
              if (v33)
              {
                v101[2] = v33;
                operator delete(v33);
              }
              v27 = v32;
              v28 = 0x1080C409938AC02;
              goto LABEL_65;
            }
          }
          break;
        case 4:
          v34 = (unint64_t *)v101;
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            v37 = v101;
            if (v101)
            {
              v100 = v101 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v100);
              goto LABEL_49;
            }
          }
          break;
        case 5:
          v38 = (unint64_t *)v101;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            v37 = v101;
            if (v101)
            {
              v100 = v101 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v100);
LABEL_49:
              v27 = v37;
              v28 = 0x1020C405E66F15BLL;
              goto LABEL_65;
            }
          }
          break;
        case 8:
          v41 = (unint64_t *)v101;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            v44 = v101;
            if (v101)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v101 + 2);
              v27 = v44;
              v45 = -235920773;
              goto LABEL_64;
            }
          }
          break;
        case 9:
          v46 = (unint64_t *)v101;
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            v49 = v101;
            if (v101)
            {
              v50 = v101[6];
              if (v50)
              {
                v101[7] = v50;
                operator delete(v50);
              }
              v51 = v49[3];
              if (v51)
              {
                v49[4] = v51;
                operator delete(v51);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v49 + 1));
              v27 = v49;
              v45 = 2071181815;
LABEL_64:
              v28 = v45 | 0x1030C4000000000;
LABEL_65:
              MEMORY[0x219A19A08](v27, v28);
            }
          }
          break;
        default:
          break;
      }
      switch(v106)
      {
        case 2:
          v52 = (unint64_t *)v105;
          do
          {
            v53 = __ldaxr(v52);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v52));
          if (!v54)
          {
            v55 = v105;
            if (v105)
            {
              if (*(char *)(v105 + 31) < 0)
                operator delete(*(void **)(v105 + 8));
              v56 = v55;
              v57 = 0x1012C404EF22A49;
              goto LABEL_107;
            }
          }
          break;
        case 3:
          v58 = (unint64_t *)v105;
          do
          {
            v59 = __ldaxr(v58);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v58));
          if (!v60)
          {
            v61 = v105;
            if (v105)
            {
              v62 = *(void **)(v105 + 8);
              if (v62)
              {
                *(_QWORD *)(v105 + 16) = v62;
                operator delete(v62);
              }
              v56 = v61;
              v57 = 0x1080C409938AC02;
              goto LABEL_107;
            }
          }
          break;
        case 4:
          v63 = (unint64_t *)v105;
          do
          {
            v64 = __ldaxr(v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v63));
          if (!v65)
          {
            v66 = v105;
            if (v105)
            {
              v101 = (void **)(v105 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v101);
              goto LABEL_91;
            }
          }
          break;
        case 5:
          v67 = (unint64_t *)v105;
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            v66 = v105;
            if (v105)
            {
              v101 = (void **)(v105 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v101);
LABEL_91:
              v56 = v66;
              v57 = 0x1020C405E66F15BLL;
              goto LABEL_107;
            }
          }
          break;
        case 8:
          v70 = (unint64_t *)v105;
          do
          {
            v71 = __ldaxr(v70);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v70));
          if (!v72)
          {
            v73 = v105;
            if (v105)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v105 + 16));
              v56 = v73;
              v74 = -235920773;
              goto LABEL_106;
            }
          }
          break;
        case 9:
          v75 = (unint64_t *)v105;
          do
          {
            v76 = __ldaxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (!v77)
          {
            v78 = v105;
            if (v105)
            {
              v79 = *(void **)(v105 + 48);
              if (v79)
              {
                *(_QWORD *)(v105 + 56) = v79;
                operator delete(v79);
              }
              v80 = *(void **)(v78 + 24);
              if (v80)
              {
                *(_QWORD *)(v78 + 32) = v80;
                operator delete(v80);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v78 + 8);
              v56 = v78;
              v74 = 2071181815;
LABEL_106:
              v57 = v74 | 0x1030C4000000000;
LABEL_107:
              MEMORY[0x219A19A08](v56, v57);
            }
          }
          break;
        default:
          break;
      }
      if (v99 | v90)
      {
        v81 = (uint64_t *)(*(_QWORD *)(v96 + 96) + 8 * v98);
        if (v91)
          v81 = &v92;
        *(_QWORD *)&v98 = *v81 + v98;
      }
      v82 = v94 + 1;
      v83 = v93;
      v84 = ++v94 - v89 * v95;
      *((_QWORD *)&v98 + 1) = v84;
      if (v84 == v89 && v82 != v93)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v88);
        v83 = v93;
        v82 = v94;
      }
    }
    while (v82 != v83);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v88);
}

void sub_2184E62F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  va_list va;

  va_start(va, a6);
  MEMORY[0x219A19A08](v7, 0x20C4093837F09);
  std::mutex::unlock(v6);
  switch(*(_BYTE *)(v8 - 100))
  {
    case 2:
      v10 = *(unint64_t **)(v8 - 112);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (v12)
        goto LABEL_43;
      v13 = *(_QWORD *)(v8 - 112);
      if (!v13)
        goto LABEL_43;
      if (*(char *)(v13 + 31) < 0)
        operator delete(*(void **)(v13 + 8));
      v14 = (_QWORD *)v13;
      v15 = 0x1012C404EF22A49;
      goto LABEL_42;
    case 3:
      v27 = *(unint64_t **)(v8 - 112);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_43;
      v30 = *(_QWORD **)(v8 - 112);
      if (!v30)
        goto LABEL_43;
      v31 = (void *)v30[1];
      if (v31)
      {
        v30[2] = v31;
        operator delete(v31);
      }
      v14 = v30;
      v15 = 0x1080C409938AC02;
      goto LABEL_42;
    case 4:
      v16 = *(unint64_t **)(v8 - 112);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (v18)
        goto LABEL_43;
      v19 = *(_QWORD **)(v8 - 112);
      if (!v19)
        goto LABEL_43;
      *(_QWORD *)(v8 - 152) = v19 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 152));
      goto LABEL_35;
    case 5:
      v32 = *(unint64_t **)(v8 - 112);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_43;
      v19 = *(_QWORD **)(v8 - 112);
      if (!v19)
        goto LABEL_43;
      *(_QWORD *)(v8 - 152) = v19 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 152));
LABEL_35:
      v14 = v19;
      v15 = 0x1020C405E66F15BLL;
      goto LABEL_42;
    case 8:
      v35 = *(unint64_t **)(v8 - 112);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_43;
      v38 = *(_QWORD *)(v8 - 112);
      if (!v38)
        goto LABEL_43;
      boost::detail::shared_count::~shared_count((unsigned int **)(v38 + 16));
      v14 = (_QWORD *)v38;
      v26 = -235920773;
      goto LABEL_41;
    case 9:
      v20 = *(unint64_t **)(v8 - 112);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_43;
      v23 = *(_QWORD **)(v8 - 112);
      if (!v23)
        goto LABEL_43;
      v24 = (void *)v23[6];
      if (v24)
      {
        v23[7] = v24;
        operator delete(v24);
      }
      v25 = (void *)v23[3];
      if (v25)
      {
        v23[4] = v25;
        operator delete(v25);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v23 + 1));
      v14 = v23;
      v26 = 2071181815;
LABEL_41:
      v15 = v26 | 0x1030C4000000000;
LABEL_42:
      MEMORY[0x219A19A08](v14, v15);
LABEL_43:
      turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)va);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_43;
  }
}

void sub_2184E65A4()
{
  JUMPOUT(0x2184E659CLL);
}

uint64_t std::__function::__func<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_evaluate(turi::ml_data const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__function::__func<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1,std::allocator<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1,std::allocator<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24D945C38;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1,std::allocator<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24D945C38;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1,std::allocator<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t a2, turi::sframe_rows **a3)
{
  uint64_t v4;
  turi::sframe_rows *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *a3;
  if (!*((_BYTE *)*a3 + 24))
  {
    turi::sframe_rows::ensure_unique(*a3);
    if (!*((_BYTE *)v5 + 24))
      turi::sframe_rows::ensure_unique(v5);
  }
  if (*(_QWORD *)v5 != *((_QWORD *)v5 + 1))
  {
    v6 = **(_QWORD ***)v5;
    if (v6)
    {
      v7 = *(_QWORD *)(**(_QWORD **)v5 + 8) - *v6;
      if (v7)
      {
        v8 = 0;
        v9 = v7 >> 4;
        do
        {
          v10 = *(_QWORD *)(***(_QWORD ***)v5 + 16 * v8);
          v11 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v5 + 16) + 16 * v8);
          if (v10 == -1)
          {
            v12 = *(uint64_t **)(a1 + 16);
            **(_BYTE **)(a1 + 8) = 1;
            v10 = *v12;
          }
          if (v11 == -1)
          {
            v13 = *(uint64_t **)(a1 + 16);
            **(_BYTE **)(a1 + 8) = 1;
            v11 = *v13;
          }
          if (**(_BYTE **)(a1 + 24))
            v14 = v10 == v11;
          else
            v14 = 0;
          if (v14 && v10 != **(_QWORD **)(a1 + 16))
          {
            v15 = *(unint64_t **)(a1 + 32);
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 + 1, v15));
          }
          if (**(_BYTE **)(a1 + 40))
          {
            v17 = (unint64_t *)(**(_QWORD **)(a1 + 48) + 24 * v10);
            if (v10 != v11)
            {
              v18 = v17 + 1;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 + 1, v18));
              v17 = (unint64_t *)(**(_QWORD **)(a1 + 48) + 24 * v11 + 16);
            }
            do
              v20 = __ldaxr(v17);
            while (__stlxr(v20 + 1, v17));
          }
          if (**(_BYTE **)(a1 + 56))
          {
            v21 = (unint64_t *)(**(_QWORD **)(a1 + 64) + 8 * (v10 + v10 * *(_QWORD *)(v4 + 784) + v11));
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 + 1, v21));
          }
          ++v8;
        }
        while (v8 != v9);
      }
    }
  }
  return 0;
}

uint64_t std::__function::__func<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1,std::allocator<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1,std::allocator<turi::supervised_2::supervised_learning_model_base::_classifier_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_1>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

turi::flexible_type *std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],turi::flexible_type&,0>(turi::flexible_type *a1, char *a2, uint64_t a3)
{
  turi::flexible_type *result;
  unint64_t **v5;
  unint64_t *v6;
  BOOL v7;
  int v8;
  unint64_t *v10;
  unint64_t v11;

  result = turi::flexible_type::flexible_type(a1, a2);
  *((_QWORD *)result + 2) = 0;
  v5 = (unint64_t **)((char *)result + 16);
  *((_DWORD *)result + 6) = 0;
  *((_BYTE *)result + 28) = 0;
  if ((turi::flexible_type *)((char *)result + 16) != (turi::flexible_type *)a3)
  {
    v6 = *(unint64_t **)a3;
    *(_QWORD *)((char *)result + 21) = *(_QWORD *)(a3 + 5);
    *v5 = v6;
    LODWORD(v6) = *(unsigned __int8 *)(a3 + 12);
    *((_BYTE *)result + 28) = (_BYTE)v6;
    v7 = v6 > 9;
    v8 = (1 << (char)v6) & 0x33C;
    if (!v7 && v8 != 0)
    {
      v10 = *v5;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  return result;
}

void std::__function::__func<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D945CB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D945CB8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t *a2, turi::sframe_rows **a3)
{
  uint64_t v4;
  turi::sframe_rows *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v4 = *a2;
  v5 = *a3;
  if (!*((_BYTE *)*a3 + 24))
  {
    turi::sframe_rows::ensure_unique(*a3);
    if (!*((_BYTE *)v5 + 24))
      turi::sframe_rows::ensure_unique(v5);
  }
  if (*(_QWORD *)v5 != *((_QWORD *)v5 + 1))
  {
    v6 = **(_QWORD ***)v5;
    if (v6)
    {
      v7 = *(_QWORD *)(**(_QWORD **)v5 + 8) - *v6;
      if (v7)
      {
        v8 = 0;
        v9 = v7 >> 4;
        do
        {
          if (**(_BYTE **)(a1 + 8))
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 16) + 48))(**(_QWORD **)(a1 + 16), ***(_QWORD ***)v5 + v8, **(_QWORD **)(*(_QWORD *)v5 + 16) + v8, v4);
          if (**(_BYTE **)(a1 + 24))
          {
            v10 = **(_QWORD **)(a1 + 32);
            v11 = vabdd_f64(*(double *)(***(_QWORD ***)v5 + v8), *(double *)(**(_QWORD **)(*(_QWORD *)v5 + 16) + v8));
            if (*(double *)(v10 + 8 * v4) >= v11)
              v11 = *(double *)(v10 + 8 * v4);
            *(double *)(v10 + 8 * v4) = v11;
          }
          v8 += 16;
          --v9;
        }
        while (v9);
      }
    }
  }
  return 0;
}

uint64_t std::__function::__func<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0,std::allocator<turi::supervised_2::supervised_learning_model_base::_regressor_evaluation(turi::gl_sarray,turi::gl_sarray,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

uint64_t std::map<std::string,turi::supervised_2::supervised_learning_model_base::prediction_type_enum>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::unary_op> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_2184E6B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_63()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_supervised_learning_base_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_2184E6EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

void sub_2184E7108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_6_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_train_test_split_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184E7418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_11_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_12_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD4DD0 = 0;
    unk_254FD4DC0 = 0u;
    unk_254FD4DB0 = 0u;
    unk_254FD4DA0 = 0u;
    unk_254FD4D90 = 0u;
    qword_254FD4D88 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_user_item_graph_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::recsys::VERTEX_ID_COLUMN, "vertex_id");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::recsys::VERTEX_ID_COLUMN, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::recsys::VERTEX_DATA_COLUMN, "vertex_data");
  return __cxa_atexit(v0, turi::recsys::VERTEX_DATA_COLUMN, &dword_217E69000);
}

double CoreML::Specification::protobuf_FeatureVectorizer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_FeatureVectorizer_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/FeatureVectorizer.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::_FeatureVectorizer_InputColumn_default_instance_ = (uint64_t)&off_24D945D88;
  unk_254FFB7B0 = 0;
  qword_254FFB7B8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFB7C0 = 0;
  dword_254FFB7C8 = 0;
  byte_254FFB7D0 = 1;
  CoreML::Specification::_FeatureVectorizer_default_instance_ = (uint64_t)&off_24D945E20;
  result = 0.0;
  *(_OWORD *)algn_254FFB7E0 = 0u;
  *(_OWORD *)&algn_254FFB7E0[16] = 0u;
  dword_254FFB800 = 0;
  byte_254FFB808 = 1;
  return result;
}

void CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(CoreML::Specification::protobuf_FeatureVectorizer_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_FeatureVectorizer_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2184E7794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::FeatureVectorizer_InputColumn *CoreML::Specification::FeatureVectorizer_InputColumn::FeatureVectorizer_InputColumn(CoreML::Specification::FeatureVectorizer_InputColumn *this)
{
  *(_QWORD *)this = &off_24D945D88;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::FeatureVectorizer_InputColumn *)&CoreML::Specification::_FeatureVectorizer_InputColumn_default_instance_)
    CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_2184E7800(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::FeatureVectorizer_InputColumn::~FeatureVectorizer_InputColumn(CoreML::Specification::FeatureVectorizer_InputColumn *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D945D88;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::V5::Value_FileValue::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D945D88;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::V5::Value_FileValue::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::FeatureVectorizer_InputColumn *CoreML::Specification::FeatureVectorizer_InputColumn::New(CoreML::Specification::FeatureVectorizer_InputColumn *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::FeatureVectorizer_InputColumn *v3;

  v3 = (CoreML::Specification::FeatureVectorizer_InputColumn *)operator new();
  CoreML::Specification::FeatureVectorizer_InputColumn::FeatureVectorizer_InputColumn(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::FeatureVectorizer_InputColumn>(a2, v3);
  return v3;
}

void sub_2184E78F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureVectorizer_InputColumn::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  *(_QWORD *)(this + 24) = 0;
  return this;
}

BOOL CoreML::Specification::FeatureVectorizer_InputColumn::MergePartialFromCodedStream(CoreML::Specification::FeatureVectorizer_InputColumn *this, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  _BOOL8 result;
  std::string *v13;
  const char *size;
  char *v15;
  char v17;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_23;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_23;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 16)
          goto LABEL_23;
        v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          *((_QWORD *)this + 3) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v17 & 1) == 0)
            return 0;
        }
        else
        {
          *((_QWORD *)this + 3) = *v15;
          *a2 = v15 + 1;
        }
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      v11 = *v5;
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v11);
      if (!result)
        return result;
      v13 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = (std::string *)v13->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v13, size, 0, (uint64_t)"CoreML.Specification.FeatureVectorizer.InputColumn.inputColumn"))return 0;
    }
LABEL_23:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::FeatureVectorizer_InputColumn::SerializeWithCachedSizes(CoreML::Specification::FeatureVectorizer_InputColumn *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  const char *v7;
  unint64_t v8;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(const char **)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  v7 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v7, 1, (uint64_t)"CoreML.Specification.FeatureVectorizer.InputColumn.inputColumn");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  v8 = *((_QWORD *)this + 3);
  if (v8)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v8, a2, a4);
  return result;
}

uint64_t CoreML::Specification::FeatureVectorizer_InputColumn::ByteSizeLong(CoreML::Specification::FeatureVectorizer_InputColumn *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  if (v5)
    v4 += ((9 * (__clz(v5 | 1) ^ 0x3F) + 73) >> 6) + 1;
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::FeatureVectorizer_InputColumn::IsInitialized(CoreML::Specification::FeatureVectorizer_InputColumn *this)
{
  return 1;
}

_QWORD *CoreML::Specification::FeatureVectorizer_InputColumn::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FeatureVectorizer.InputColumn");
}

CoreML::Specification::FeatureVectorizer *CoreML::Specification::FeatureVectorizer::FeatureVectorizer(CoreML::Specification::FeatureVectorizer *this)
{
  *(_QWORD *)this = &off_24D945E20;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::FeatureVectorizer *)&CoreML::Specification::_FeatureVectorizer_default_instance_)
    CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_2184E7C4C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::FeatureVectorizer::~FeatureVectorizer(CoreML::Specification::FeatureVectorizer *this)
{
  *(_QWORD *)this = &off_24D945E20;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::FeatureVectorizer::~FeatureVectorizer(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::FeatureVectorizer::default_instance(CoreML::Specification::FeatureVectorizer *this)
{
  CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(this);
  return &CoreML::Specification::_FeatureVectorizer_default_instance_;
}

CoreML::Specification::FeatureVectorizer *CoreML::Specification::FeatureVectorizer::New(CoreML::Specification::FeatureVectorizer *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::FeatureVectorizer *v3;

  v3 = (CoreML::Specification::FeatureVectorizer *)operator new();
  CoreML::Specification::FeatureVectorizer::FeatureVectorizer(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::FeatureVectorizer>(a2, v3);
  return v3;
}

void sub_2184E7D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::FeatureVectorizer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureVectorizer>);
  return result;
}

uint64_t CoreML::Specification::FeatureVectorizer::Clear(CoreML::Specification::FeatureVectorizer *this)
{
  return _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>((uint64_t)this + 16);
}

BOOL CoreML::Specification::FeatureVectorizer::MergePartialFromCodedStream(CoreML::Specification::FeatureVectorizer *this, char **a2, unsigned int a3)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::FeatureVectorizer_InputColumn *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  _BOOL8 result;

  v4 = (CoreML::Specification::FeatureVectorizer *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::FeatureVectorizer_InputColumn::MergePartialFromCodedStream(v11, a2, v15);
        if (!result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::FeatureVectorizer::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::FeatureVectorizer::ByteSizeLong(CoreML::Specification::FeatureVectorizer *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::FeatureVectorizer_InputColumn::ByteSizeLong(*(CoreML::Specification::FeatureVectorizer_InputColumn **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

void CoreML::Specification::FeatureVectorizer::MergeFrom(CoreML::Specification::FeatureVectorizer *this, const CoreML::Specification::FeatureVectorizer *a2)
{
  uint64_t v4;
  int v5;
  const CoreML::Specification::V5::Value_FileValue **v6;
  unsigned int *v7;
  int v8;
  int *v9;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const CoreML::Specification::V5::Value_FileValue **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::FeatureVectorizer *)((char *)this + 16), v5);
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::V5::Value_FileValue **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
}

uint64_t CoreML::Specification::FeatureVectorizer::IsInitialized(CoreML::Specification::FeatureVectorizer *this)
{
  return 1;
}

_QWORD *CoreML::Specification::FeatureVectorizer::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FeatureVectorizer");
}

CoreML::Specification::FeatureVectorizer_InputColumn *CoreML::Specification::FeatureVectorizer_InputColumn::New(CoreML::Specification::FeatureVectorizer_InputColumn *this)
{
  return CoreML::Specification::FeatureVectorizer_InputColumn::New(this, 0);
}

CoreML::Specification::FeatureVectorizer *CoreML::Specification::FeatureVectorizer::New(CoreML::Specification::FeatureVectorizer *this)
{
  return CoreML::Specification::FeatureVectorizer::New(this, 0);
}

CoreML::Specification::FeatureVectorizer_InputColumn *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::FeatureVectorizer_InputColumn *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    v2 = (int *)*((_QWORD *)this + 2);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *((int *)this + 2);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::FeatureVectorizer_InputColumn **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::FeatureVectorizer_InputColumn::FeatureVectorizer_InputColumn(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureVectorizer_InputColumn>);
  }
  else
  {
    Aligned = (CoreML::Specification::FeatureVectorizer_InputColumn *)operator new();
    CoreML::Specification::FeatureVectorizer_InputColumn::FeatureVectorizer_InputColumn(Aligned);
  }
  v7 = *((_QWORD *)this + 2);
  v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2184E814C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      v4 = *(_QWORD *)(*(_QWORD *)v2 + 16);
      if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
      *(_QWORD *)(v3 + 24) = 0;
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureVectorizer>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_FeatureVectorizer_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184E83B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_37()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_user_item_lists_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184E86C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<std::pair<std::string,turi::fileio::file_status>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*,0>(__str, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*>(v8, (__int128 *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*,0>(__str, (std::string *)a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0)
        operator delete(*(void **)(v18 - 32));
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_2184E8890(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2184E8898(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*,0>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    this[1].__r_.__value_.__r.__words[0] = v4[1].__r_.__value_.__r.__words[0];
    this = (std::string *)((char *)this + 32);
    v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

void __cxx_global_var_init_101()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sgd_solver_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)603>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreML *v4;
  _DWORD *v5;
  _DWORD *v6;
  _BOOL8 v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  _DWORD *v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  __int128 __p;
  uint64_t v17;

  if (*(_QWORD *)(a1 + 16))
    v4 = *(CoreML **)(a1 + 16);
  else
    v4 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v15);
  CoreML::validateModelDescription(v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v12);
  v15 = v12;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  __p = v13;
  v17 = v14;
  if (!CoreML::Result::good((CoreML::Result *)&v15))
    goto LABEL_21;
  v5 = operator new(4uLL);
  v9 = v5;
  *v5 = 6;
  v10 = v5 + 1;
  v11 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 16, 1, (int **)&v9, (uint64_t)&v12);
  v15 = v12;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  __p = v13;
  v17 = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v15))
    goto LABEL_21;
  v6 = operator new(4uLL);
  v9 = v6;
  *v6 = 6;
  v10 = v6 + 1;
  v11 = v6 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 40, 1, (int **)&v9, (uint64_t)&v12);
  v15 = v12;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  __p = v13;
  v17 = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  v7 = CoreML::Result::good((CoreML::Result *)&v15);
  if (v7
    && (*(_DWORD *)(a1 + 44) != 603
      ? (v8 = CoreML::Specification::DictVectorizer::default_instance((CoreML::Specification::DictVectorizer *)v7))
      : (v8 = *(uint64_t **)(a1 + 32)),
        !*((_DWORD *)v8 + 7)))
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "DictVectorizerValidator parameter not set");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if (SHIBYTE(v13) < 0)
      operator delete(v12);
    if (SHIBYTE(v17) < 0)
      operator delete((void *)__p);
  }
  else
  {
LABEL_21:
    *(_QWORD *)a2 = v15;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v17;
  }
}

void sub_2184E8BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_DictVectorizerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_sliced_itemitem_matrix_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184E8E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_28_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_29_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD4D38 = 0;
    unk_254FD4D28 = 0u;
    unk_254FD4D18 = 0u;
    unk_254FD4D08 = 0u;
    unk_254FD4CF8 = 0u;
    qword_254FD4CF0 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sparse_similarity_lookup_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2184E9228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_15()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::style_transfer::process_output(turi::style_transfer *this@<X0>, const turi::neural_net::shared_float_array *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t *v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t i;
  float *v10;
  float v11;
  float v12;
  float v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void **p_p;
  unint64_t **v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;
  const turi::neural_net::shared_float_array *v33;
  char v34;
  unint64_t *v35[2];

  v33 = a2;
  p_p = (void **)(*(uint64_t (**)(turi::style_transfer *))(*(_QWORD *)this + 40))(this);
  if (p_p != (void **)4)
  {
    __p = &p_p;
    turi::style_transfer::process_output(turi::neural_net::shared_float_array const&,unsigned long)::$_0::operator()();
  }
  v5 = (unint64_t *)(*(uint64_t (**)(turi::style_transfer *))(*(_QWORD *)this + 32))(this);
  v6 = *v5;
  v22 = v5[2];
  v23 = v5[1];
  v21 = v5[3];
  v24 = (*(uint64_t (**)(turi::style_transfer *))(*(_QWORD *)this + 24))(this);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  std::vector<std::pair<long long,turi::image_type>>::reserve(a3, v6);
  v7 = v24 / v6;
  __p = (void *)(*(uint64_t (**)(turi::style_transfer *))(*(_QWORD *)this + 24))(this);
  v35[0] = (unint64_t *)(v24 / v6 * v6);
  if (__p != v35[0])
  {
    p_p = &__p;
    v26 = v35;
    turi::style_transfer::process_output(turi::neural_net::shared_float_array const&,unsigned long)::$_1::operator()();
  }
  v8 = (*(uint64_t (**)(turi::style_transfer *))(*(_QWORD *)this + 16))(this);
  for (i = 0; i != v6; ++i)
  {
    __p = 0;
    v31 = 0;
    v32 = 0;
    std::vector<turi::flex_type_enum>::reserve((unint64_t *)&__p, v7);
    v35[0] = (unint64_t *)&__p;
    if (v6 <= v24)
    {
      v10 = (float *)(v8 + 4 * i * v7);
      do
      {
        v11 = 255.0;
        v12 = roundf(*v10 * 255.0);
        if (v12 <= 255.0)
          v11 = v12;
        if (v12 >= 0.0)
          v13 = v11;
        else
          v13 = 0.0;
        v34 = (int)v13;
        std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](v35, &v34);
        ++v10;
      }
      while (v10 != (float *)(v8 + 4 * (i * v7 + v7)));
    }
    turi::image_type::image_type((turi::image_type *)&p_p, (const char *)__p, v23, v22, v21, v31 - (_BYTE *)__p, 0, 2);
    v14 = a3[1];
    if (v14 >= a3[2])
    {
      v20 = std::vector<std::pair<long long,turi::image_type>>::__emplace_back_slow_path<unsigned long &,turi::image_type&>(a3, &v33, (uint64_t)&p_p);
    }
    else
    {
      *(_QWORD *)v14 = v33;
      *(_QWORD *)(v14 + 8) = p_p;
      v15 = (unsigned int *)v26;
      *(_QWORD *)(v14 + 16) = v26;
      if (v15)
      {
        v16 = v15 + 2;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = v27;
      v19 = v28;
      *(_OWORD *)(v14 + 56) = v29;
      *(_OWORD *)(v14 + 40) = v19;
      *(_OWORD *)(v14 + 24) = v18;
      v20 = v14 + 72;
    }
    a3[1] = v20;
    boost::detail::shared_count::~shared_count((unsigned int **)&v26);
    if (__p)
    {
      v31 = __p;
      operator delete(__p);
    }
  }
}

void sub_2184E9600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::vector<std::pair<long long,turi::image_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

void turi::style_transfer::process_output(turi::neural_net::shared_float_array const&,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/style_transfer/style_transfer.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"image_dim", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/style_transfer/style_transfer.cpp", "operator()", 170, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::style_transfer::process_output(turi::neural_net::shared_float_array const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2184E97DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<long long,turi::image_type>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 72 * v6;
    std::vector<std::pair<long long,turi::image_type>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<long long,turi::image_type>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_2184E990C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<long long,turi::image_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::style_transfer::process_output(turi::neural_net::shared_float_array const&,unsigned long)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/style_transfer/style_transfer.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"contents.size()", 15);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"image_size * batch_size", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/style_transfer/style_transfer.cpp", "operator()", 186, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::style_transfer::process_output(turi::neural_net::shared_float_array const&,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2184E9AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::style_transfer::prepare_batch(uint64_t *a1@<X0>, const turi::flexible_type *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  _QWORD *v50;
  void *v51[2];
  uint64_t v52;
  void *v53;
  void *v54;
  _QWORD *v55;
  void *v56[2];
  uint64_t v57;
  void *__p[2];
  char v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  void *v63[3];
  void *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  void *v73;
  __int128 *v74[3];

  v11 = *a1;
  v10 = a1[1];
  v12 = 0xF0F0F0F0F0F0F0F1 * ((v10 - *a1) >> 3);
  v13 = 3 * (_QWORD)a2 * a3;
  std::vector<float>::vector(&v72, v12 * v13);
  std::vector<float>::vector(&v70, 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3) * v13);
  v47 = a5;
  std::vector<float>::vector(&v68, v12);
  if (v10 != v11)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    if (v12 <= 1)
      v17 = 1;
    else
      v17 = v12;
    do
    {
      v18 = *a1 + v15;
      *(float *)(v68 + 4 * v16) = (float)*(unint64_t *)(v18 + 128);
      if (a4)
      ++v16;
      v15 += 136;
      v14 += 12 * a3 * (_QWORD)a2;
    }
    while (v17 != v16);
  }
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  *(_QWORD *)v47 = v47 + 8;
  *(_OWORD *)v63 = v72;
  v63[2] = v73;
  v72 = 0uLL;
  v73 = 0;
  v19 = operator new(0x20uLL);
  v61 = v19 + 4;
  v62 = v19 + 4;
  *v19 = v12;
  v19[1] = a3;
  v19[2] = a2;
  v19[3] = 3;
  v60 = v19;
  turi::neural_net::shared_float_array::wrap((uint64_t)v63, (uint64_t)&v60, (uint64_t)&v64);
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  v74[0] = (__int128 *)__p;
  v20 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v47, (const void **)__p, (uint64_t)&std::piecewise_construct, v74);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v20 + 8), &v65);
  v21 = v67;
  *((_OWORD *)v20 + 5) = v66;
  *((_OWORD *)v20 + 6) = v21;
  if (v59 < 0)
    operator delete(__p[0]);
  v64 = &unk_24D9175B8;
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
  *(_OWORD *)v56 = v68;
  v57 = v69;
  v68 = 0uLL;
  v69 = 0;
  v25 = operator new(8uLL);
  v53 = v25;
  *v25 = v12;
  v54 = v25 + 1;
  v55 = v25 + 1;
  turi::neural_net::shared_float_array::wrap((uint64_t)v56, (uint64_t)&v53, (uint64_t)&v64);
  std::string::basic_string[abi:ne180100]<0>(__p, "index");
  v74[0] = (__int128 *)__p;
  v26 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v47, (const void **)__p, (uint64_t)&std::piecewise_construct, v74);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v26 + 8), &v65);
  v27 = v67;
  *((_OWORD *)v26 + 5) = v66;
  *((_OWORD *)v26 + 6) = v27;
  if (v59 < 0)
    operator delete(__p[0]);
  v64 = &unk_24D9175B8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v56[0])
  {
    v56[1] = v56[0];
    operator delete(v56[0]);
  }
  turi::neural_net::shared_float_array::wrap((float)(unint64_t)a2, (uint64_t)&v64);
  std::string::basic_string[abi:ne180100]<0>(__p, "width");
  v74[0] = (__int128 *)__p;
  v31 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v47, (const void **)__p, (uint64_t)&std::piecewise_construct, v74);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v31 + 8), &v65);
  v32 = v67;
  *((_OWORD *)v31 + 5) = v66;
  *((_OWORD *)v31 + 6) = v32;
  if (v59 < 0)
    operator delete(__p[0]);
  v64 = &unk_24D9175B8;
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  turi::neural_net::shared_float_array::wrap((float)(unint64_t)a3, (uint64_t)&v64);
  std::string::basic_string[abi:ne180100]<0>(__p, "height");
  v74[0] = (__int128 *)__p;
  v36 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v47, (const void **)__p, (uint64_t)&std::piecewise_construct, v74);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v36 + 8), &v65);
  v37 = v67;
  *((_OWORD *)v36 + 5) = v66;
  *((_OWORD *)v36 + 6) = v37;
  if (v59 < 0)
    operator delete(__p[0]);
  v64 = &unk_24D9175B8;
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (!*((_QWORD *)&v65 + 1))
    goto LABEL_43;
  v39 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if (!a4)
      goto LABEL_56;
  }
  else
  {
LABEL_43:
    if (!a4)
      goto LABEL_56;
  }
  *(_OWORD *)v51 = v70;
  v52 = v71;
  v70 = 0uLL;
  v71 = 0;
  v41 = operator new(0x20uLL);
  v49 = v41 + 4;
  v50 = v41 + 4;
  *v41 = v12;
  v41[1] = a3;
  v41[2] = a2;
  v41[3] = 3;
  v48 = v41;
  turi::neural_net::shared_float_array::wrap((uint64_t)v51, (uint64_t)&v48, (uint64_t)&v64);
  std::string::basic_string[abi:ne180100]<0>(__p, "labels");
  v74[0] = (__int128 *)__p;
  v42 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v47, (const void **)__p, (uint64_t)&std::piecewise_construct, v74);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v42 + 8), &v65);
  v43 = v67;
  *((_OWORD *)v42 + 5) = v66;
  *((_OWORD *)v42 + 6) = v43;
  if (v59 < 0)
    operator delete(__p[0]);
  v64 = &unk_24D9175B8;
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v51[0])
  {
    v51[1] = v51[0];
    operator delete(v51[0]);
  }
LABEL_56:
  if ((_QWORD)v68)
  {
    *((_QWORD *)&v68 + 1) = v68;
    operator delete((void *)v68);
  }
  if ((_QWORD)v70)
  {
    *((_QWORD *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
  if ((_QWORD)v72)
  {
    *((_QWORD *)&v72 + 1) = v72;
    operator delete((void *)v72);
  }
}

void sub_2184EA144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;

  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (a10)
    operator delete(a10);
  if (a13)
    operator delete(a13);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a9, *(_QWORD **)(a9 + 8));
  v38 = *(void **)(v36 - 208);
  if (v38)
  {
    *(_QWORD *)(v36 - 200) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 176);
  if (v39)
  {
    *(_QWORD *)(v36 - 168) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 144);
  if (v40)
  {
    *(_QWORD *)(v36 - 136) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

void turi::style_transfer::`anonymous namespace'::prepare_images(uint64_t a1, float *a2, const turi::flexible_type *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  unsigned int v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unsigned __int8 *image_data;
  uint64_t v87;
  unsigned int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  std::string v93;
  std::string *v94;
  _QWORD v95[2];
  uint64_t v96;
  int v97;
  char v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)((char *)v95 + 5) = 0x800000000000000;
  v8 = operator new();
  *(_QWORD *)v8 = 0;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 3;
  v95[0] = v8;
  *(_QWORD *)v8 = 1;
  if (*(_QWORD *)v8 != 1)
  {
    v9 = operator new();
    v10 = v95[0];
    *(_QWORD *)v9 = *(_QWORD *)v95[0];
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
    v11 = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v9 + 16) = v11;
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = *(_OWORD *)(v10 + 24);
    v15 = *(_OWORD *)(v10 + 40);
    *(_OWORD *)(v9 + 56) = *(_OWORD *)(v10 + 56);
    *(_OWORD *)(v9 + 40) = v15;
    *(_OWORD *)(v9 + 24) = v14;
    v95[0] = v9;
    *(_QWORD *)v9 = 1;
    do
    {
      v16 = __ldaxr((unint64_t *)v8);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unint64_t *)v8));
    if (!v17)
    {
      boost::detail::shared_count::~shared_count((unsigned int **)(v8 + 16));
      MEMORY[0x219A19A08](v8, 0x1030C40F1F0227BLL);
    }
  }
  v18 = v95[0];
  boost::shared_ptr<char []>::operator=((__int128 *)(v95[0] + 8), (uint64_t *)a1);
  v20 = *(_OWORD *)(a1 + 32);
  v19 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v95[0] + 24) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v18 + 40) = v20;
  *(_OWORD *)(v18 + 56) = v19;
  turi::image_util::resize_image((turi::image_util *)v95, a3, a4, 3, 1, 1, (uint64_t)&v96);
  switch(v98)
  {
    case 0:
    case 1:
    case 6:
      turi::flexible_type_fail(0);
      goto LABEL_16;
    case 2:
      if (*(char *)(v96 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(v96 + 8), *(_QWORD *)(v96 + 16));
      }
      else
      {
        v22 = *(_OWORD *)(v96 + 8);
        v93.__r_.__value_.__r.__words[2] = *(_QWORD *)(v96 + 24);
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v22;
      }
      turi::flexible_type_fail(0);
      v90 = 0u;
      v91 = 0u;
      v89 = 0u;
      *(_QWORD *)&v92 = 0;
      *((_QWORD *)&v92 + 1) = 3;
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
      v21 = (void *)v93.__r_.__value_.__r.__words[0];
      break;
    case 3:
      memset(&v93, 0, sizeof(v93));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v93, *(const void **)(v96 + 8), *(_QWORD *)(v96 + 16), (uint64_t)(*(_QWORD *)(v96 + 16) - *(_QWORD *)(v96 + 8)) >> 3);
      turi::flexible_type_fail(0);
      v90 = 0u;
      v91 = 0u;
      v89 = 0u;
      *(_QWORD *)&v92 = 0;
      *((_QWORD *)&v92 + 1) = 3;
      v21 = (void *)v93.__r_.__value_.__r.__words[0];
      if (!v93.__r_.__value_.__r.__words[0])
        goto LABEL_27;
      v93.__r_.__value_.__l.__size_ = v93.__r_.__value_.__r.__words[0];
      break;
    case 4:
      memset(&v93, 0, sizeof(v93));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v93, *(uint64_t **)(v96 + 8), *(uint64_t **)(v96 + 16), (uint64_t)(*(_QWORD *)(v96 + 16) - *(_QWORD *)(v96 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v90 = 0u;
      v91 = 0u;
      v89 = 0u;
      *(_QWORD *)&v92 = 0;
      *((_QWORD *)&v92 + 1) = 3;
      v94 = &v93;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
      goto LABEL_27;
    case 5:
      memset(&v93, 0, sizeof(v93));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v93, *(uint64_t **)(v96 + 8), *(uint64_t **)(v96 + 16), (uint64_t)(*(_QWORD *)(v96 + 16) - *(_QWORD *)(v96 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v90 = 0u;
      v91 = 0u;
      v89 = 0u;
      *(_QWORD *)&v92 = 0;
      *((_QWORD *)&v92 + 1) = 3;
      v94 = &v93;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
      goto LABEL_27;
    case 7:
LABEL_16:
      v90 = 0u;
      v91 = 0u;
      v89 = 0u;
      *(_QWORD *)&v92 = 0;
      *((_QWORD *)&v92 + 1) = 3;
      goto LABEL_27;
    case 8:
      v23 = v96;
      v24 = *(_QWORD *)(v96 + 16);
      *(_QWORD *)&v89 = *(_QWORD *)(v96 + 8);
      *((_QWORD *)&v89 + 1) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v24 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = *(_OWORD *)(v23 + 24);
      v28 = *(_OWORD *)(v23 + 56);
      v91 = *(_OWORD *)(v23 + 40);
      v92 = v28;
      v90 = v27;
      goto LABEL_27;
    case 9:
      turi::flexible_type_impl::get_img_visitor::operator()(v96 + 8, (turi::image_type *)&v89);
      goto LABEL_27;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  operator delete(v21);
LABEL_27:
  switch(v98)
  {
    case 2:
      v29 = (unint64_t *)v96;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = v96;
        if (v96)
        {
          if (*(char *)(v96 + 31) < 0)
            operator delete(*(void **)(v96 + 8));
          v33 = v32;
          v34 = 0x1012C404EF22A49;
          goto LABEL_62;
        }
      }
      break;
    case 3:
      v45 = (unint64_t *)v96;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        v48 = v96;
        if (v96)
        {
          v49 = *(void **)(v96 + 8);
          if (v49)
          {
            *(_QWORD *)(v96 + 16) = v49;
            operator delete(v49);
          }
          v33 = v48;
          v34 = 0x1080C409938AC02;
          goto LABEL_62;
        }
      }
      break;
    case 4:
      v35 = (unint64_t *)v96;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = v96;
        if (v96)
        {
          v93.__r_.__value_.__r.__words[0] = v96 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
          goto LABEL_61;
        }
      }
      break;
    case 5:
      v50 = (unint64_t *)v96;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        v38 = v96;
        if (v96)
        {
          v93.__r_.__value_.__r.__words[0] = v96 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
LABEL_61:
          v33 = v38;
          v34 = 0x1020C405E66F15BLL;
          goto LABEL_62;
        }
      }
      break;
    case 8:
      v53 = (unint64_t *)v96;
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        v56 = v96;
        if (v96)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v96 + 16));
          MEMORY[0x219A19A08](v56, 0x1030C40F1F0227BLL);
        }
        v96 = 0;
      }
      break;
    case 9:
      v39 = (unint64_t *)v96;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        v42 = v96;
        if (v96)
        {
          v43 = *(void **)(v96 + 48);
          if (v43)
          {
            *(_QWORD *)(v96 + 56) = v43;
            operator delete(v43);
          }
          v44 = *(void **)(v42 + 24);
          if (v44)
          {
            *(_QWORD *)(v42 + 32) = v44;
            operator delete(v44);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v42 + 8);
          v33 = v42;
          v34 = 0x1030C407B73B9F7;
LABEL_62:
          MEMORY[0x219A19A08](v33, v34);
        }
      }
      break;
    default:
      break;
  }
  v96 = 0;
  v97 = 0;
  v98 = 0;
  switch(BYTE4(v95[1]))
  {
    case 2:
      v57 = (unint64_t *)v95[0];
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        v60 = v95[0];
        if (v95[0])
        {
          if (*(char *)(v95[0] + 31) < 0)
            operator delete(*(void **)(v95[0] + 8));
          v61 = v60;
          v62 = 0x1012C404EF22A49;
          goto LABEL_110;
        }
      }
      break;
    case 3:
      v74 = (unint64_t *)v95[0];
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        v77 = v95[0];
        if (v95[0])
        {
          v78 = *(void **)(v95[0] + 8);
          if (v78)
          {
            *(_QWORD *)(v95[0] + 16) = v78;
            operator delete(v78);
          }
          v61 = v77;
          v62 = 0x1080C409938AC02;
          goto LABEL_110;
        }
      }
      break;
    case 4:
      v63 = (unint64_t *)v95[0];
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        v66 = v95[0];
        if (v95[0])
        {
          v93.__r_.__value_.__r.__words[0] = v95[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
          goto LABEL_103;
        }
      }
      break;
    case 5:
      v79 = (unint64_t *)v95[0];
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (!v81)
      {
        v66 = v95[0];
        if (v95[0])
        {
          v93.__r_.__value_.__r.__words[0] = v95[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
LABEL_103:
          v61 = v66;
          v62 = 0x1020C405E66F15BLL;
          goto LABEL_110;
        }
      }
      break;
    case 8:
      v82 = (unint64_t *)v95[0];
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        v85 = v95[0];
        if (v95[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v95[0] + 16));
          v61 = v85;
          v73 = -235920773;
          goto LABEL_109;
        }
      }
      break;
    case 9:
      v67 = (unint64_t *)v95[0];
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        v70 = v95[0];
        if (v95[0])
        {
          v71 = *(void **)(v95[0] + 48);
          if (v71)
          {
            *(_QWORD *)(v95[0] + 56) = v71;
            operator delete(v71);
          }
          v72 = *(void **)(v70 + 24);
          if (v72)
          {
            *(_QWORD *)(v70 + 32) = v72;
            operator delete(v72);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v70 + 8);
          v61 = v70;
          v73 = 2071181815;
LABEL_109:
          v62 = v73 | 0x1030C4000000000;
LABEL_110:
          MEMORY[0x219A19A08](v61, v62);
        }
      }
      break;
    default:
      break;
  }
  image_data = (unsigned __int8 *)turi::image_type::get_image_data((turi::image_type *)&v89);
  if (a4 * (_QWORD)a3)
  {
    v87 = 3 * a4 * (_QWORD)a3;
    do
    {
      v88 = *image_data++;
      *a2++ = (float)v88 / 255.0;
      --v87;
    }
    while (v87);
  }
  boost::detail::shared_count::~shared_count((unsigned int **)&v89 + 1);
}

void sub_2184EAAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void **p_p)
{
  uint64_t v24;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  unsigned int v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;

  p_p = &__p;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  switch(*(_BYTE *)(v24 - 60))
  {
    case 2:
      v26 = *(unint64_t **)(v24 - 72);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD *)(v24 - 72);
      if (!v29)
        goto LABEL_39;
      if (*(char *)(v29 + 31) < 0)
        operator delete(*(void **)(v29 + 8));
      v30 = (_QWORD *)v29;
      v31 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v41 = *(unint64_t **)(v24 - 72);
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (v43)
        goto LABEL_39;
      v44 = *(_QWORD **)(v24 - 72);
      if (!v44)
        goto LABEL_39;
      v45 = (void *)v44[1];
      if (v45)
      {
        v44[2] = v45;
        operator delete(v45);
      }
      v30 = v44;
      v31 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v32 = *(unint64_t **)(v24 - 72);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_39;
      v35 = *(_QWORD *)(v24 - 72);
      if (!v35)
        goto LABEL_39;
      p_p = (void **)(v35 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
      goto LABEL_31;
    case 5:
      v46 = *(unint64_t **)(v24 - 72);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (v48)
        goto LABEL_39;
      v35 = *(_QWORD *)(v24 - 72);
      if (!v35)
        goto LABEL_39;
      p_p = (void **)(v35 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_31:
      v30 = (_QWORD *)v35;
      v31 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v49 = *(unint64_t **)(v24 - 72);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (v51)
        goto LABEL_39;
      v52 = *(_QWORD *)(v24 - 72);
      if (!v52)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v52 + 16));
      v30 = (_QWORD *)v52;
      v40 = -235920773;
      goto LABEL_37;
    case 9:
      v36 = *(unint64_t **)(v24 - 72);
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_39;
      v39 = *(_QWORD **)(v24 - 72);
      if (!v39)
        goto LABEL_39;
      v30 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v39);
      v40 = 2071181815;
LABEL_37:
      v31 = v40 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v30, v31);
LABEL_39:
      *(_QWORD *)(v24 - 72) = 0;
      *(_DWORD *)(v24 - 64) = 0;
      *(_BYTE *)(v24 - 60) = 0;
      switch(*(_BYTE *)(v24 - 76))
      {
        case 2:
          v53 = *(unint64_t **)(v24 - 88);
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (v55)
            goto LABEL_77;
          v56 = *(_QWORD *)(v24 - 88);
          if (!v56)
            goto LABEL_77;
          if (*(char *)(v56 + 31) < 0)
            operator delete(*(void **)(v56 + 8));
          v57 = (_QWORD *)v56;
          v58 = 0x1012C404EF22A49;
          goto LABEL_76;
        case 3:
          v68 = *(unint64_t **)(v24 - 88);
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (v70)
            goto LABEL_77;
          v71 = *(_QWORD **)(v24 - 88);
          if (!v71)
            goto LABEL_77;
          v72 = (void *)v71[1];
          if (v72)
          {
            v71[2] = v72;
            operator delete(v72);
          }
          v57 = v71;
          v58 = 0x1080C409938AC02;
          goto LABEL_76;
        case 4:
          v59 = *(unint64_t **)(v24 - 88);
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (v61)
            goto LABEL_77;
          v62 = *(_QWORD *)(v24 - 88);
          if (!v62)
            goto LABEL_77;
          p_p = (void **)(v62 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
          goto LABEL_75;
        case 5:
          v73 = *(unint64_t **)(v24 - 88);
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (v75)
            goto LABEL_77;
          v62 = *(_QWORD *)(v24 - 88);
          if (!v62)
            goto LABEL_77;
          p_p = (void **)(v62 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_75:
          v57 = (_QWORD *)v62;
          v58 = 0x1020C405E66F15BLL;
          goto LABEL_76;
        case 8:
          v76 = *(unint64_t **)(v24 - 88);
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (v78)
            goto LABEL_77;
          v79 = *(_QWORD *)(v24 - 88);
          if (!v79)
            goto LABEL_77;
          boost::detail::shared_count::~shared_count((unsigned int **)(v79 + 16));
          v57 = (_QWORD *)v79;
          v67 = -235920773;
          goto LABEL_74;
        case 9:
          v63 = *(unint64_t **)(v24 - 88);
          do
          {
            v64 = __ldaxr(v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v63));
          if (v65)
            goto LABEL_77;
          v66 = *(_QWORD **)(v24 - 88);
          if (!v66)
            goto LABEL_77;
          v57 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v66);
          v67 = 2071181815;
LABEL_74:
          v58 = v67 | 0x1030C4000000000;
LABEL_76:
          MEMORY[0x219A19A08](v57, v58);
LABEL_77:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_77;
      }
    default:
      goto LABEL_39;
  }
}

void turi::style_transfer::prepare_predict(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const turi::flexible_type *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  void ***v14;
  uint64_t v15;
  _QWORD v16[2];
  char v17;
  void ****v18;
  unsigned int *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unsigned int *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v18 = *(void *****)(a1 + 32);
  if ((_DWORD)v18 != 3)
  {
    v14 = (void ***)&v18;
    turi::style_transfer::prepare_predict(turi::style_transfer::st_example const&)::$_0::operator()();
  }
  v3 = *(const turi::flexible_type **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int **)(a1 + 8);
  v18 = *(void *****)a1;
  v19 = v5;
  if (v5)
  {
    v6 = v5 + 2;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_OWORD *)(a1 + 32);
  v20 = *(_OWORD *)(a1 + 16);
  v21 = v8;
  v22 = *(_OWORD *)(a1 + 48);
  v9 = *(unsigned int **)(a1 + 72);
  v23 = *(_QWORD *)(a1 + 64);
  v24 = v9;
  if (v9)
  {
    v10 = v9 + 2;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_OWORD *)(a1 + 96);
  v25 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 112);
  v26 = v12;
  v27 = v13;
  v28 = *(_QWORD *)(a1 + 128);
  v15 = 0;
  v16[0] = 0;
  v14 = 0;
  v16[1] = &v14;
  v17 = 0;
  v14 = (void ***)operator new(0x88uLL);
  v15 = (uint64_t)v14;
  v16[0] = v14 + 17;
  v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*,turi::style_transfer::st_example*,turi::style_transfer::st_example*>((uint64_t)v16, (uint64_t)&v18, (uint64_t)&v29, (uint64_t)v14);
  boost::detail::shared_count::~shared_count(&v24);
  boost::detail::shared_count::~shared_count(&v19);
  turi::style_transfer::prepare_batch((uint64_t *)&v14, v3, v4, 0, a2);
  v18 = &v14;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
}

void sub_2184EB108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::style_transfer::prepare_predict(turi::style_transfer::st_example const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/style_transfer/style_transfer.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"3", 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"example.content_image.m_channels", 32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/style_transfer/style_transfer.cpp", "operator()", 260, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::style_transfer::prepare_predict(turi::style_transfer::st_example const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2184EB2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::style_transfer::style_transfer::init_options(uint64_t a1, _QWORD *a2)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  void *v158;
  void *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  void *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  void *v189;
  void *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  void *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  void *v218;
  void *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  void *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  void *v239;
  void *v240;
  unsigned int v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  void *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unsigned int v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  void *v276;
  void *v277;
  _QWORD *v278;
  std::string __p;
  std::string v280;
  void **v281[2];
  uint64_t v282;
  char v283;
  _QWORD v284[2];
  _QWORD v285[2];
  _QWORD v286[2];
  _QWORD v287[2];
  _QWORD v288[2];
  _QWORD v289[3];

  v289[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v280, "batch_size");
  std::string::basic_string[abi:ne180100]<0>(&__p, "The number of images to process for each training iteration");
  *(_QWORD *)((char *)v289 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  v289[0] = turi::FLEX_UNDEFINED;
  BYTE4(v289[1]) = byte_254FF5444;
  if (byte_254FF5444 <= 9u && ((1 << byte_254FF5444) & 0x33C) != 0)
  {
    v5 = (unint64_t *)v289[0];
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v280, &__p, (uint64_t)v289, 1, 0x7FFFFFFFLL, 0);
  switch(BYTE4(v289[1]))
  {
    case 2:
      v7 = (unint64_t *)v289[0];
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = v289[0];
        if (v289[0])
        {
          if (*(char *)(v289[0] + 31) < 0)
            operator delete(*(void **)(v289[0] + 8));
          v11 = v10;
          v12 = 0x1012C404EF22A49;
          goto LABEL_48;
        }
      }
      break;
    case 3:
      v13 = (unint64_t *)v289[0];
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v289[0];
        if (v289[0])
        {
          v17 = *(void **)(v289[0] + 8);
          if (v17)
          {
            *(_QWORD *)(v289[0] + 16) = v17;
            operator delete(v17);
          }
          v11 = v16;
          v12 = 0x1080C409938AC02;
          goto LABEL_48;
        }
      }
      break;
    case 4:
      v18 = (unint64_t *)v289[0];
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = v289[0];
        if (v289[0])
        {
          v281[0] = (void **)(v289[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v281);
          goto LABEL_32;
        }
      }
      break;
    case 5:
      v22 = (unint64_t *)v289[0];
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v21 = v289[0];
        if (v289[0])
        {
          v281[0] = (void **)(v289[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v281);
LABEL_32:
          v11 = v21;
          v12 = 0x1020C405E66F15BLL;
          goto LABEL_48;
        }
      }
      break;
    case 8:
      v25 = (unint64_t *)v289[0];
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = v289[0];
        if (v289[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v289[0] + 16));
          v11 = v28;
          v29 = -235920773;
          goto LABEL_47;
        }
      }
      break;
    case 9:
      v30 = (unint64_t *)v289[0];
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = v289[0];
        if (v289[0])
        {
          v34 = *(void **)(v289[0] + 48);
          if (v34)
          {
            *(_QWORD *)(v289[0] + 56) = v34;
            operator delete(v34);
          }
          v35 = *(void **)(v33 + 24);
          if (v35)
          {
            *(_QWORD *)(v33 + 32) = v35;
            operator delete(v35);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v33 + 8);
          v11 = v33;
          v29 = 2071181815;
LABEL_47:
          v12 = v29 | 0x1030C4000000000;
LABEL_48:
          MEMORY[0x219A19A08](v11, v12);
        }
      }
      break;
    default:
      break;
  }
  memset(v289, 0, 13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v280, "max_iterations");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Maximum number of iterations to perform during training");
  *(_QWORD *)((char *)v288 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  v288[0] = turi::FLEX_UNDEFINED;
  BYTE4(v288[1]) = byte_254FF5444;
  if (byte_254FF5444 <= 9u && ((1 << byte_254FF5444) & 0x33C) != 0)
  {
    v36 = (unint64_t *)v288[0];
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v280, &__p, (uint64_t)v288, 1, 0x7FFFFFFFLL, 0);
  switch(BYTE4(v288[1]))
  {
    case 2:
      v38 = (unint64_t *)v288[0];
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = v288[0];
        if (v288[0])
        {
          if (*(char *)(v288[0] + 31) < 0)
            operator delete(*(void **)(v288[0] + 8));
          v42 = v41;
          v43 = 0x1012C404EF22A49;
          goto LABEL_98;
        }
      }
      break;
    case 3:
      v44 = (unint64_t *)v288[0];
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        v47 = v288[0];
        if (v288[0])
        {
          v48 = *(void **)(v288[0] + 8);
          if (v48)
          {
            *(_QWORD *)(v288[0] + 16) = v48;
            operator delete(v48);
          }
          v42 = v47;
          v43 = 0x1080C409938AC02;
          goto LABEL_98;
        }
      }
      break;
    case 4:
      v49 = (unint64_t *)v288[0];
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = v288[0];
        if (v288[0])
        {
          v281[0] = (void **)(v288[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v281);
          goto LABEL_82;
        }
      }
      break;
    case 5:
      v53 = (unint64_t *)v288[0];
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        v52 = v288[0];
        if (v288[0])
        {
          v281[0] = (void **)(v288[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v281);
LABEL_82:
          v42 = v52;
          v43 = 0x1020C405E66F15BLL;
          goto LABEL_98;
        }
      }
      break;
    case 8:
      v56 = (unint64_t *)v288[0];
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        v59 = v288[0];
        if (v288[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v288[0] + 16));
          v42 = v59;
          v60 = -235920773;
          goto LABEL_97;
        }
      }
      break;
    case 9:
      v61 = (unint64_t *)v288[0];
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        v64 = v288[0];
        if (v288[0])
        {
          v65 = *(void **)(v288[0] + 48);
          if (v65)
          {
            *(_QWORD *)(v288[0] + 56) = v65;
            operator delete(v65);
          }
          v66 = *(void **)(v64 + 24);
          if (v66)
          {
            *(_QWORD *)(v64 + 32) = v66;
            operator delete(v66);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v64 + 8);
          v42 = v64;
          v60 = 2071181815;
LABEL_97:
          v43 = v60 | 0x1030C4000000000;
LABEL_98:
          MEMORY[0x219A19A08](v42, v43);
        }
      }
      break;
    default:
      break;
  }
  memset(v288, 0, 13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v280, "image_width");
  std::string::basic_string[abi:ne180100]<0>(&__p, "The width of the images passed into the network");
  *(_QWORD *)((char *)v287 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  v287[0] = turi::FLEX_UNDEFINED;
  BYTE4(v287[1]) = byte_254FF5444;
  if (byte_254FF5444 <= 9u && ((1 << byte_254FF5444) & 0x33C) != 0)
  {
    v67 = (unint64_t *)v287[0];
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 + 1, v67));
  }
  turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v280, &__p, (uint64_t)v287, 1, 0x7FFFFFFFLL, 0);
  switch(BYTE4(v287[1]))
  {
    case 2:
      v69 = (unint64_t *)v287[0];
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        v72 = v287[0];
        if (v287[0])
        {
          if (*(char *)(v287[0] + 31) < 0)
            operator delete(*(void **)(v287[0] + 8));
          v73 = v72;
          v74 = 0x1012C404EF22A49;
          goto LABEL_148;
        }
      }
      break;
    case 3:
      v75 = (unint64_t *)v287[0];
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        v78 = v287[0];
        if (v287[0])
        {
          v79 = *(void **)(v287[0] + 8);
          if (v79)
          {
            *(_QWORD *)(v287[0] + 16) = v79;
            operator delete(v79);
          }
          v73 = v78;
          v74 = 0x1080C409938AC02;
          goto LABEL_148;
        }
      }
      break;
    case 4:
      v80 = (unint64_t *)v287[0];
      do
      {
        v81 = __ldaxr(v80);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v80));
      if (!v82)
      {
        v83 = v287[0];
        if (v287[0])
        {
          v281[0] = (void **)(v287[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v281);
          goto LABEL_132;
        }
      }
      break;
    case 5:
      v84 = (unint64_t *)v287[0];
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v83 = v287[0];
        if (v287[0])
        {
          v281[0] = (void **)(v287[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v281);
LABEL_132:
          v73 = v83;
          v74 = 0x1020C405E66F15BLL;
          goto LABEL_148;
        }
      }
      break;
    case 8:
      v87 = (unint64_t *)v287[0];
      do
      {
        v88 = __ldaxr(v87);
        v89 = v88 - 1;
      }
      while (__stlxr(v89, v87));
      if (!v89)
      {
        v90 = v287[0];
        if (v287[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v287[0] + 16));
          v73 = v90;
          v91 = -235920773;
          goto LABEL_147;
        }
      }
      break;
    case 9:
      v92 = (unint64_t *)v287[0];
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = v287[0];
        if (v287[0])
        {
          v96 = *(void **)(v287[0] + 48);
          if (v96)
          {
            *(_QWORD *)(v287[0] + 56) = v96;
            operator delete(v96);
          }
          v97 = *(void **)(v95 + 24);
          if (v97)
          {
            *(_QWORD *)(v95 + 32) = v97;
            operator delete(v97);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v95 + 8);
          v73 = v95;
          v91 = 2071181815;
LABEL_147:
          v74 = v91 | 0x1030C4000000000;
LABEL_148:
          MEMORY[0x219A19A08](v73, v74);
        }
      }
      break;
    default:
      break;
  }
  memset(v287, 0, 13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v280, "image_height");
  std::string::basic_string[abi:ne180100]<0>(&__p, "The height of the images passed into the network");
  *(_QWORD *)((char *)v286 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  v286[0] = turi::FLEX_UNDEFINED;
  BYTE4(v286[1]) = byte_254FF5444;
  if (byte_254FF5444 <= 9u && ((1 << byte_254FF5444) & 0x33C) != 0)
  {
    v98 = (unint64_t *)v286[0];
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 + 1, v98));
  }
  turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v280, &__p, (uint64_t)v286, 1, 0x7FFFFFFFLL, 0);
  switch(BYTE4(v286[1]))
  {
    case 2:
      v100 = (unint64_t *)v286[0];
      do
      {
        v101 = __ldaxr(v100);
        v102 = v101 - 1;
      }
      while (__stlxr(v102, v100));
      if (!v102)
      {
        v103 = v286[0];
        if (v286[0])
        {
          if (*(char *)(v286[0] + 31) < 0)
            operator delete(*(void **)(v286[0] + 8));
          v104 = v103;
          v105 = 0x1012C404EF22A49;
          goto LABEL_198;
        }
      }
      break;
    case 3:
      v106 = (unint64_t *)v286[0];
      do
      {
        v107 = __ldaxr(v106);
        v108 = v107 - 1;
      }
      while (__stlxr(v108, v106));
      if (!v108)
      {
        v109 = v286[0];
        if (v286[0])
        {
          v110 = *(void **)(v286[0] + 8);
          if (v110)
          {
            *(_QWORD *)(v286[0] + 16) = v110;
            operator delete(v110);
          }
          v104 = v109;
          v105 = 0x1080C409938AC02;
          goto LABEL_198;
        }
      }
      break;
    case 4:
      v111 = (unint64_t *)v286[0];
      do
      {
        v112 = __ldaxr(v111);
        v113 = v112 - 1;
      }
      while (__stlxr(v113, v111));
      if (!v113)
      {
        v114 = v286[0];
        if (v286[0])
        {
          v281[0] = (void **)(v286[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v281);
          goto LABEL_182;
        }
      }
      break;
    case 5:
      v115 = (unint64_t *)v286[0];
      do
      {
        v116 = __ldaxr(v115);
        v117 = v116 - 1;
      }
      while (__stlxr(v117, v115));
      if (!v117)
      {
        v114 = v286[0];
        if (v286[0])
        {
          v281[0] = (void **)(v286[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v281);
LABEL_182:
          v104 = v114;
          v105 = 0x1020C405E66F15BLL;
          goto LABEL_198;
        }
      }
      break;
    case 8:
      v118 = (unint64_t *)v286[0];
      do
      {
        v119 = __ldaxr(v118);
        v120 = v119 - 1;
      }
      while (__stlxr(v120, v118));
      if (!v120)
      {
        v121 = v286[0];
        if (v286[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v286[0] + 16));
          v104 = v121;
          v122 = -235920773;
          goto LABEL_197;
        }
      }
      break;
    case 9:
      v123 = (unint64_t *)v286[0];
      do
      {
        v124 = __ldaxr(v123);
        v125 = v124 - 1;
      }
      while (__stlxr(v125, v123));
      if (!v125)
      {
        v126 = v286[0];
        if (v286[0])
        {
          v127 = *(void **)(v286[0] + 48);
          if (v127)
          {
            *(_QWORD *)(v286[0] + 56) = v127;
            operator delete(v127);
          }
          v128 = *(void **)(v126 + 24);
          if (v128)
          {
            *(_QWORD *)(v126 + 32) = v128;
            operator delete(v128);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v126 + 8);
          v104 = v126;
          v122 = 2071181815;
LABEL_197:
          v105 = v122 | 0x1030C4000000000;
LABEL_198:
          MEMORY[0x219A19A08](v104, v105);
        }
      }
      break;
    default:
      break;
  }
  memset(v286, 0, 13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v280, "random_seed");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Seed for random weight initialization and sampling during training");
  *(_QWORD *)((char *)v285 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  v285[0] = turi::FLEX_UNDEFINED;
  BYTE4(v285[1]) = byte_254FF5444;
  if (byte_254FF5444 <= 9u && ((1 << byte_254FF5444) & 0x33C) != 0)
  {
    v129 = (unint64_t *)v285[0];
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 + 1, v129));
  }
  turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v280, &__p, (uint64_t)v285, 0xFFFFFFFF80000000, 0x7FFFFFFFLL, 0);
  switch(BYTE4(v285[1]))
  {
    case 2:
      v131 = (unint64_t *)v285[0];
      do
      {
        v132 = __ldaxr(v131);
        v133 = v132 - 1;
      }
      while (__stlxr(v133, v131));
      if (!v133)
      {
        v134 = v285[0];
        if (v285[0])
        {
          if (*(char *)(v285[0] + 31) < 0)
            operator delete(*(void **)(v285[0] + 8));
          v135 = v134;
          v136 = 0x1012C404EF22A49;
          goto LABEL_248;
        }
      }
      break;
    case 3:
      v137 = (unint64_t *)v285[0];
      do
      {
        v138 = __ldaxr(v137);
        v139 = v138 - 1;
      }
      while (__stlxr(v139, v137));
      if (!v139)
      {
        v140 = v285[0];
        if (v285[0])
        {
          v141 = *(void **)(v285[0] + 8);
          if (v141)
          {
            *(_QWORD *)(v285[0] + 16) = v141;
            operator delete(v141);
          }
          v135 = v140;
          v136 = 0x1080C409938AC02;
          goto LABEL_248;
        }
      }
      break;
    case 4:
      v142 = (unint64_t *)v285[0];
      do
      {
        v143 = __ldaxr(v142);
        v144 = v143 - 1;
      }
      while (__stlxr(v144, v142));
      if (!v144)
      {
        v145 = v285[0];
        if (v285[0])
        {
          v281[0] = (void **)(v285[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v281);
          goto LABEL_232;
        }
      }
      break;
    case 5:
      v146 = (unint64_t *)v285[0];
      do
      {
        v147 = __ldaxr(v146);
        v148 = v147 - 1;
      }
      while (__stlxr(v148, v146));
      if (!v148)
      {
        v145 = v285[0];
        if (v285[0])
        {
          v281[0] = (void **)(v285[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v281);
LABEL_232:
          v135 = v145;
          v136 = 0x1020C405E66F15BLL;
          goto LABEL_248;
        }
      }
      break;
    case 8:
      v149 = (unint64_t *)v285[0];
      do
      {
        v150 = __ldaxr(v149);
        v151 = v150 - 1;
      }
      while (__stlxr(v151, v149));
      if (!v151)
      {
        v152 = v285[0];
        if (v285[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v285[0] + 16));
          v135 = v152;
          v153 = -235920773;
          goto LABEL_247;
        }
      }
      break;
    case 9:
      v154 = (unint64_t *)v285[0];
      do
      {
        v155 = __ldaxr(v154);
        v156 = v155 - 1;
      }
      while (__stlxr(v156, v154));
      if (!v156)
      {
        v157 = v285[0];
        if (v285[0])
        {
          v158 = *(void **)(v285[0] + 48);
          if (v158)
          {
            *(_QWORD *)(v285[0] + 56) = v158;
            operator delete(v158);
          }
          v159 = *(void **)(v157 + 24);
          if (v159)
          {
            *(_QWORD *)(v157 + 32) = v159;
            operator delete(v159);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v157 + 8);
          v135 = v157;
          v153 = 2071181815;
LABEL_247:
          v136 = v153 | 0x1030C4000000000;
LABEL_248:
          MEMORY[0x219A19A08](v135, v136);
        }
      }
      break;
    default:
      break;
  }
  memset(v285, 0, 13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v280, "num_styles");
  std::string::basic_string[abi:ne180100]<0>(&__p, "The number of styles present in the model");
  *(_QWORD *)((char *)v284 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  v284[0] = turi::FLEX_UNDEFINED;
  BYTE4(v284[1]) = byte_254FF5444;
  if (byte_254FF5444 <= 9u && ((1 << byte_254FF5444) & 0x33C) != 0)
  {
    v160 = (unint64_t *)v284[0];
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 + 1, v160));
  }
  turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v280, &__p, (uint64_t)v284, 1, 0x7FFFFFFFLL, 0);
  switch(BYTE4(v284[1]))
  {
    case 2:
      v162 = (unint64_t *)v284[0];
      do
      {
        v163 = __ldaxr(v162);
        v164 = v163 - 1;
      }
      while (__stlxr(v164, v162));
      if (!v164)
      {
        v165 = v284[0];
        if (v284[0])
        {
          if (*(char *)(v284[0] + 31) < 0)
            operator delete(*(void **)(v284[0] + 8));
          v166 = v165;
          v167 = 0x1012C404EF22A49;
          goto LABEL_298;
        }
      }
      break;
    case 3:
      v168 = (unint64_t *)v284[0];
      do
      {
        v169 = __ldaxr(v168);
        v170 = v169 - 1;
      }
      while (__stlxr(v170, v168));
      if (!v170)
      {
        v171 = v284[0];
        if (v284[0])
        {
          v172 = *(void **)(v284[0] + 8);
          if (v172)
          {
            *(_QWORD *)(v284[0] + 16) = v172;
            operator delete(v172);
          }
          v166 = v171;
          v167 = 0x1080C409938AC02;
          goto LABEL_298;
        }
      }
      break;
    case 4:
      v173 = (unint64_t *)v284[0];
      do
      {
        v174 = __ldaxr(v173);
        v175 = v174 - 1;
      }
      while (__stlxr(v175, v173));
      if (!v175)
      {
        v176 = v284[0];
        if (v284[0])
        {
          v281[0] = (void **)(v284[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v281);
          goto LABEL_282;
        }
      }
      break;
    case 5:
      v177 = (unint64_t *)v284[0];
      do
      {
        v178 = __ldaxr(v177);
        v179 = v178 - 1;
      }
      while (__stlxr(v179, v177));
      if (!v179)
      {
        v176 = v284[0];
        if (v284[0])
        {
          v281[0] = (void **)(v284[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v281);
LABEL_282:
          v166 = v176;
          v167 = 0x1020C405E66F15BLL;
          goto LABEL_298;
        }
      }
      break;
    case 8:
      v180 = (unint64_t *)v284[0];
      do
      {
        v181 = __ldaxr(v180);
        v182 = v181 - 1;
      }
      while (__stlxr(v182, v180));
      if (!v182)
      {
        v183 = v284[0];
        if (v284[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v284[0] + 16));
          v166 = v183;
          v184 = -235920773;
          goto LABEL_297;
        }
      }
      break;
    case 9:
      v185 = (unint64_t *)v284[0];
      do
      {
        v186 = __ldaxr(v185);
        v187 = v186 - 1;
      }
      while (__stlxr(v187, v185));
      if (!v187)
      {
        v188 = v284[0];
        if (v284[0])
        {
          v189 = *(void **)(v284[0] + 48);
          if (v189)
          {
            *(_QWORD *)(v284[0] + 56) = v189;
            operator delete(v189);
          }
          v190 = *(void **)(v188 + 24);
          if (v190)
          {
            *(_QWORD *)(v188 + 32) = v190;
            operator delete(v190);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v188 + 8);
          v166 = v188;
          v184 = 2071181815;
LABEL_297:
          v167 = v184 | 0x1030C4000000000;
LABEL_298:
          MEMORY[0x219A19A08](v166, v167);
        }
      }
      break;
    default:
      break;
  }
  memset(v284, 0, 13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v280, "verbose");
  std::string::basic_string[abi:ne180100]<0>(&__p, "When set to true, verbose is printed");
  turi::option_manager::create_BOOLean_option((turi::option_manager *)(a1 + 224), &v280, &__p, 1u, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v280, "content_feature");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Name of the content column");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v282, "image");
  turi::option_manager::create_string_option((turi::option_manager *)(a1 + 224), &v280, &__p, (uint64_t)&v282, 1);
  switch(v283)
  {
    case 2:
      v191 = (unint64_t *)v282;
      do
      {
        v192 = __ldaxr(v191);
        v193 = v192 - 1;
      }
      while (__stlxr(v193, v191));
      if (!v193)
      {
        v194 = v282;
        if (v282)
        {
          if (*(char *)(v282 + 31) < 0)
            operator delete(*(void **)(v282 + 8));
          v195 = v194;
          v196 = 0x1012C404EF22A49;
          goto LABEL_348;
        }
      }
      break;
    case 3:
      v197 = (unint64_t *)v282;
      do
      {
        v198 = __ldaxr(v197);
        v199 = v198 - 1;
      }
      while (__stlxr(v199, v197));
      if (!v199)
      {
        v200 = v282;
        if (v282)
        {
          v201 = *(void **)(v282 + 8);
          if (v201)
          {
            *(_QWORD *)(v282 + 16) = v201;
            operator delete(v201);
          }
          v195 = v200;
          v196 = 0x1080C409938AC02;
          goto LABEL_348;
        }
      }
      break;
    case 4:
      v202 = (unint64_t *)v282;
      do
      {
        v203 = __ldaxr(v202);
        v204 = v203 - 1;
      }
      while (__stlxr(v204, v202));
      if (!v204)
      {
        v205 = v282;
        if (v282)
        {
          v281[0] = (void **)(v282 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v281);
          goto LABEL_332;
        }
      }
      break;
    case 5:
      v206 = (unint64_t *)v282;
      do
      {
        v207 = __ldaxr(v206);
        v208 = v207 - 1;
      }
      while (__stlxr(v208, v206));
      if (!v208)
      {
        v205 = v282;
        if (v282)
        {
          v281[0] = (void **)(v282 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v281);
LABEL_332:
          v195 = v205;
          v196 = 0x1020C405E66F15BLL;
          goto LABEL_348;
        }
      }
      break;
    case 8:
      v209 = (unint64_t *)v282;
      do
      {
        v210 = __ldaxr(v209);
        v211 = v210 - 1;
      }
      while (__stlxr(v211, v209));
      if (!v211)
      {
        v212 = v282;
        if (v282)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v282 + 16));
          v195 = v212;
          v213 = -235920773;
          goto LABEL_347;
        }
      }
      break;
    case 9:
      v214 = (unint64_t *)v282;
      do
      {
        v215 = __ldaxr(v214);
        v216 = v215 - 1;
      }
      while (__stlxr(v216, v214));
      if (!v216)
      {
        v217 = v282;
        if (v282)
        {
          v218 = *(void **)(v282 + 48);
          if (v218)
          {
            *(_QWORD *)(v282 + 56) = v218;
            operator delete(v218);
          }
          v219 = *(void **)(v217 + 24);
          if (v219)
          {
            *(_QWORD *)(v217 + 32) = v219;
            operator delete(v219);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v217 + 8);
          v195 = v217;
          v213 = 2071181815;
LABEL_347:
          v196 = v213 | 0x1030C4000000000;
LABEL_348:
          MEMORY[0x219A19A08](v195, v196);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v280, "style_feature");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Name of the style column");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v282, "image");
  turi::option_manager::create_string_option((turi::option_manager *)(a1 + 224), &v280, &__p, (uint64_t)&v282, 1);
  switch(v283)
  {
    case 2:
      v220 = (unint64_t *)v282;
      do
      {
        v221 = __ldaxr(v220);
        v222 = v221 - 1;
      }
      while (__stlxr(v222, v220));
      if (!v222)
      {
        v223 = v282;
        if (v282)
        {
          if (*(char *)(v282 + 31) < 0)
            operator delete(*(void **)(v282 + 8));
          v224 = v223;
          v225 = 0x1012C404EF22A49;
          goto LABEL_394;
        }
      }
      break;
    case 3:
      v226 = (unint64_t *)v282;
      do
      {
        v227 = __ldaxr(v226);
        v228 = v227 - 1;
      }
      while (__stlxr(v228, v226));
      if (!v228)
      {
        v229 = v282;
        if (v282)
        {
          v230 = *(void **)(v282 + 8);
          if (v230)
          {
            *(_QWORD *)(v282 + 16) = v230;
            operator delete(v230);
          }
          v224 = v229;
          v225 = 0x1080C409938AC02;
          goto LABEL_394;
        }
      }
      break;
    case 4:
      v231 = (unint64_t *)v282;
      do
      {
        v232 = __ldaxr(v231);
        v233 = v232 - 1;
      }
      while (__stlxr(v233, v231));
      if (!v233)
      {
        v234 = v282;
        if (v282)
        {
          v281[0] = (void **)(v282 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v281);
          goto LABEL_387;
        }
      }
      break;
    case 5:
      v242 = (unint64_t *)v282;
      do
      {
        v243 = __ldaxr(v242);
        v244 = v243 - 1;
      }
      while (__stlxr(v244, v242));
      if (!v244)
      {
        v234 = v282;
        if (v282)
        {
          v281[0] = (void **)(v282 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v281);
LABEL_387:
          v224 = v234;
          v225 = 0x1020C405E66F15BLL;
          goto LABEL_394;
        }
      }
      break;
    case 8:
      v245 = (unint64_t *)v282;
      do
      {
        v246 = __ldaxr(v245);
        v247 = v246 - 1;
      }
      while (__stlxr(v247, v245));
      if (!v247)
      {
        v248 = v282;
        if (v282)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v282 + 16));
          v224 = v248;
          v241 = -235920773;
          goto LABEL_393;
        }
      }
      break;
    case 9:
      v235 = (unint64_t *)v282;
      do
      {
        v236 = __ldaxr(v235);
        v237 = v236 - 1;
      }
      while (__stlxr(v237, v235));
      if (!v237)
      {
        v238 = v282;
        if (v282)
        {
          v239 = *(void **)(v282 + 48);
          if (v239)
          {
            *(_QWORD *)(v282 + 56) = v239;
            operator delete(v239);
          }
          v240 = *(void **)(v238 + 24);
          if (v240)
          {
            *(_QWORD *)(v238 + 32) = v240;
            operator delete(v240);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v238 + 8);
          v224 = v238;
          v241 = 2071181815;
LABEL_393:
          v225 = v241 | 0x1030C4000000000;
LABEL_394:
          MEMORY[0x219A19A08](v224, v225);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v280, "model");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Defines the model type");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v282, "resnet-16");
  turi::option_manager::create_string_option((turi::option_manager *)(a1 + 224), &v280, &__p, (uint64_t)&v282, 1);
  switch(v283)
  {
    case 2:
      v249 = (unint64_t *)v282;
      do
      {
        v250 = __ldaxr(v249);
        v251 = v250 - 1;
      }
      while (__stlxr(v251, v249));
      if (!v251)
      {
        v252 = v282;
        if (v282)
        {
          if (*(char *)(v282 + 31) < 0)
            operator delete(*(void **)(v282 + 8));
          v253 = v252;
          v254 = 0x1012C404EF22A49;
          goto LABEL_440;
        }
      }
      break;
    case 3:
      v255 = (unint64_t *)v282;
      do
      {
        v256 = __ldaxr(v255);
        v257 = v256 - 1;
      }
      while (__stlxr(v257, v255));
      if (!v257)
      {
        v258 = v282;
        if (v282)
        {
          v259 = *(void **)(v282 + 8);
          if (v259)
          {
            *(_QWORD *)(v282 + 16) = v259;
            operator delete(v259);
          }
          v253 = v258;
          v254 = 0x1080C409938AC02;
          goto LABEL_440;
        }
      }
      break;
    case 4:
      v260 = (unint64_t *)v282;
      do
      {
        v261 = __ldaxr(v260);
        v262 = v261 - 1;
      }
      while (__stlxr(v262, v260));
      if (!v262)
      {
        v263 = v282;
        if (v282)
        {
          v281[0] = (void **)(v282 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v281);
          goto LABEL_424;
        }
      }
      break;
    case 5:
      v264 = (unint64_t *)v282;
      do
      {
        v265 = __ldaxr(v264);
        v266 = v265 - 1;
      }
      while (__stlxr(v266, v264));
      if (!v266)
      {
        v263 = v282;
        if (v282)
        {
          v281[0] = (void **)(v282 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v281);
LABEL_424:
          v253 = v263;
          v254 = 0x1020C405E66F15BLL;
          goto LABEL_440;
        }
      }
      break;
    case 8:
      v267 = (unint64_t *)v282;
      do
      {
        v268 = __ldaxr(v267);
        v269 = v268 - 1;
      }
      while (__stlxr(v269, v267));
      if (!v269)
      {
        v270 = v282;
        if (v282)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v282 + 16));
          v253 = v270;
          v271 = -235920773;
          goto LABEL_439;
        }
      }
      break;
    case 9:
      v272 = (unint64_t *)v282;
      do
      {
        v273 = __ldaxr(v272);
        v274 = v273 - 1;
      }
      while (__stlxr(v274, v272));
      if (!v274)
      {
        v275 = v282;
        if (v282)
        {
          v276 = *(void **)(v282 + 48);
          if (v276)
          {
            *(_QWORD *)(v282 + 56) = v276;
            operator delete(v276);
          }
          v277 = *(void **)(v275 + 24);
          if (v277)
          {
            *(_QWORD *)(v275 + 32) = v277;
            operator delete(v277);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v275 + 8);
          v253 = v275;
          v271 = 2071181815;
LABEL_439:
          v254 = v271 | 0x1030C4000000000;
LABEL_440:
          MEMORY[0x219A19A08](v253, v254);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  turi::option_manager::set_options(a1 + 224, a2);
  v278 = (_QWORD *)turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224));
  turi::flexmap_to_varmap(v278, (uint64_t)&v280);
  turi::ml_model_base::add_or_update_state(a1, &v280);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v280, (char *)v280.__r_.__value_.__l.__size_);
}

void sub_2184ECA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, char *a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26,uint64_t a27,int a28,char a29,uint64_t a30,int a31,char a32,uint64_t a33,int a34,char a35)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t turi::style_transfer::style_transfer::get_version(turi::style_transfer::style_transfer *this)
{
  return 1;
}

void turi::style_transfer::style_transfer::save_impl(const void ***this, turi::oarchive *a2)
{
  uint64_t checkpoint;

  turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(this + 37, (uint64_t)a2);
  checkpoint = turi::style_transfer::style_transfer::read_checkpoint((turi::style_transfer::style_transfer *)this);
  turi::save_float_array_map((_QWORD *)(checkpoint + 32), (uint64_t)a2);
}

uint64_t turi::style_transfer::style_transfer::read_checkpoint(turi::style_transfer::style_transfer *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  std::__assoc_sub_state *v5;
  uint64_t *p_shared_owners;
  unint64_t v7;
  std::__assoc_sub_state *v8;
  uint64_t *v9;

  result = *((_QWORD *)this + 40);
  if (!result)
  {
    turi::neural_net::FuturesSubscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>::Request(**((_QWORD **)this + 45), (uint64_t *)&v8);
    std::future<std::unique_ptr<std::unique_ptr<turi::style_transfer::Checkpoint>>>::get(&v8, (std::__assoc_sub_state_vtbl **)&v9);
    v3 = *v9;
    *v9 = 0;
    v4 = *((_QWORD *)this + 40);
    *((_QWORD *)this + 40) = v3;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    std::unique_ptr<std::unique_ptr<turi::style_transfer::Checkpoint>>::reset[abi:ne180100](&v9, 0);
    v5 = v8;
    if (v8)
    {
      p_shared_owners = &v8->__shared_owners_;
      do
        v7 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v7 - 1, (unint64_t *)p_shared_owners));
      if (!v7)
        ((void (*)(std::__assoc_sub_state *))v5->__on_zero_shared)(v5);
    }
    return *((_QWORD *)this + 40);
  }
  return result;
}

void sub_2184ED0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    turi::style_transfer::style_transfer::read_checkpoint(a9);
  _Unwind_Resume(exception_object);
}

void turi::style_transfer::style_transfer::load_version(turi::style_transfer::style_transfer *this, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];
  uint64_t v8;
  const void **v9[3];

  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  turi::load_float_array_map(a2, (uint64_t)v9);
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v7, v9);
  (*(void (**)(uint64_t *__return_ptr, turi::style_transfer::style_transfer *, uint64_t *))(*(_QWORD *)this + 136))(&v8, this, v7);
  v4 = v8;
  v8 = 0;
  v5 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v8;
    v8 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v7, (_QWORD *)v7[1]);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v9, v9[1]);
}

void sub_2184ED1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void turi::style_transfer::style_transfer::load_checkpoint(turi::ml_model_base *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  _BOOL4 v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD *v13;
  _BYTE v15[24];
  void *__p[2];
  char v17;
  std::string v18;

  std::string::basic_string[abi:ne180100]<0>(__p, "model");
  turi::style_transfer::style_transfer::read_state<std::string>(a1, (const void **)__p, &v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = v18.__r_.__value_.__l.__size_ != 9
      || *(_QWORD *)v18.__r_.__value_.__l.__data_ != 0x312D74656E736572
      || *(_BYTE *)(v18.__r_.__value_.__r.__words[0] + 8) != 54;
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  else
  {
    v7 = SHIBYTE(v18.__r_.__value_.__r.__words[2]) != 9
      || v18.__r_.__value_.__r.__words[0] != 0x312D74656E736572
      || v18.__r_.__value_.__s.__data_[8] != 54;
  }
  if (v17 < 0)
    operator delete(__p[0]);
  if (v7)
  {
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    turi::style_transfer::style_transfer::load_checkpoint(std::map<std::string,turi::neural_net::shared_float_array>)const::$_0::operator()();
  }
  *a3 = 0;
  v9 = operator new();
  turi::style_transfer::style_transfer::get_config(a1, (uint64_t)v15);
  v10 = a2 + 1;
  v11 = (_QWORD *)a2[1];
  v12 = (_QWORD **)*a2;
  v13 = v11;
  if (a2[2])
  {
    v11[2] = &v13;
    *a2 = v10;
    *v10 = 0;
    a2[2] = 0;
  }
  else
  {
    v12 = &v13;
  }
  turi::style_transfer::ResNet16Checkpoint::ResNet16Checkpoint(v9, v15, &v12);
  *a3 = v9;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v12, v13);
}

void sub_2184ED38C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x2184ED384);
}

void turi::style_transfer::style_transfer::get_config(turi::style_transfer::style_transfer *this@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  int *v5;
  void *__p[2];
  char v7;

  *(_OWORD *)a2 = xmmword_2187165F0;
  *(_QWORD *)(a2 + 16) = 256;
  std::string::basic_string[abi:ne180100]<0>(__p, "num_styles");
  *(_DWORD *)a2 = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max_iterations");
  *(_DWORD *)(a2 + 4) = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_size");
  *(_DWORD *)(a2 + 8) = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "image_height");
  v4 = (int *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 296, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if ((int *)((char *)this + 304) != v4)
    *(_DWORD *)(a2 + 12) = turi::variant_converter<int,void>::get((uint64_t)__p, v4 + 14);
  std::string::basic_string[abi:ne180100]<0>(__p, "image_width");
  v5 = (int *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 296, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if ((int *)((char *)this + 304) != v5)
    *(_DWORD *)(a2 + 16) = turi::variant_converter<int,void>::get((uint64_t)__p, v5 + 14);
  std::string::basic_string[abi:ne180100]<0>(__p, "random_seed");
  *(_DWORD *)(a2 + 20) = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_2184ED54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::style_transfer::style_transfer::create_checkpoint@<X0>(turi::ml_model_base *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _BOOL4 v9;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(__p, "model");
  turi::style_transfer::style_transfer::read_state<std::string>(a1, (const void **)__p, &v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = v17.__r_.__value_.__l.__size_ != 9
      || *(_QWORD *)v17.__r_.__value_.__l.__data_ != 0x312D74656E736572
      || *(_BYTE *)(v17.__r_.__value_.__r.__words[0] + 8) != 54;
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]) != 9
      || v17.__r_.__value_.__r.__words[0] != 0x312D74656E736572
      || v17.__r_.__value_.__s.__data_[8] != 54;
  }
  if (v16 < 0)
    operator delete(__p[0]);
  if (v9)
  {
    v17.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    turi::style_transfer::style_transfer::create_checkpoint(turi::style_transfer::Config,std::string const&)const::$_0::operator()();
  }
  *a4 = 0;
  v11 = operator new();
  v13 = *a2;
  v14 = *((_QWORD *)a2 + 2);
  result = turi::style_transfer::ResNet16Checkpoint::ResNet16Checkpoint(v11, &v13, a3);
  *a4 = v11;
  return result;
}

void std::future<std::unique_ptr<std::unique_ptr<turi::style_transfer::Checkpoint>>>::get(std::__assoc_sub_state **a1@<X0>, std::__assoc_sub_state_vtbl **a2@<X8>)
{
  std::__assoc_sub_state *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *a1;
  *a1 = 0;
  std::__assoc_state<std::unique_ptr<std::unique_ptr<turi::style_transfer::Checkpoint>>>::move(v2, a2);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
      ((void (*)(std::__assoc_sub_state *))v2->__on_zero_shared)(v2);
  }
}

void sub_2184ED764(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    std::future<std::unique_ptr<std::unique_ptr<turi::style_transfer::Checkpoint>>>::get(v1);
  _Unwind_Resume(exception_object);
}

turi::neural_net::_anonymous_namespace_ *turi::style_transfer::style_transfer::create_compute_context@<X0>(turi::style_transfer::style_transfer *this@<X0>, _QWORD *a2@<X8>)
{
  turi::neural_net::compute_context *has_style_transfer;

  has_style_transfer = (turi::neural_net::compute_context *)turi::neural_net::mps_compute_context::has_style_transfer(this);
  if ((_DWORD)has_style_transfer)
    return turi::neural_net::compute_context::create(has_style_transfer, a2);
  else
    return turi::neural_net::compute_context::create_tf(has_style_transfer, a2);
}

void turi::style_transfer::style_transfer::create_iterator(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  _BYTE v12[40];
  _QWORD v13[6];
  int v14;
  _BYTE v15[40];
  _BYTE v16[40];
  uint64_t v17;
  int v18;

  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v15);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v16);
  LOWORD(v17) = 257;
  HIDWORD(v17) = 0;
  v18 = 0;
  turi::gl_sarray::operator=((uint64_t)v15, a3);
  turi::gl_sarray::operator=((uint64_t)v16, a2);
  LOBYTE(v17) = a4;
  HIDWORD(v17) = a5 ^ 1;
  v18 = a6;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v12, (const turi::gl_sarray *)v15);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v13, (const turi::gl_sarray *)v16);
  v13[5] = v17;
  v14 = v18;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 120))(a1, v12);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v13);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v12);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v16);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v15);
}

void sub_2184ED8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  turi::gl_sarray *v21;
  turi::gl_sarray *v22;

  turi::gl_sarray::~gl_sarray(v22);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a9);
  turi::gl_sarray::~gl_sarray(v21);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a21);
  _Unwind_Resume(a1);
}

uint64_t turi::style_transfer::style_transfer::create_iterator@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = turi::style_transfer::style_transfer_data_iterator::style_transfer_data_iterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_2184ED954(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A3C40CD184BA9);
  _Unwind_Resume(a1);
}

void turi::style_transfer::style_transfer::infer_derived_options(turi::style_transfer::style_transfer *this, turi::neural_net::compute_context *a2)
{
  _BOOL4 v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  double v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::locale::__imp *locale;
  std::locale::__imp *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  std::locale::__imp *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t *v30;
  std::locale::__imp *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  double *v48;
  double *v49;
  unint64_t v50;
  double *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  double v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  double v72;
  void *v73;
  void *v74;
  unsigned int v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  double v79;
  void *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  double v87;
  _BOOL4 v88;
  BOOL v89;
  int v90;
  BOOL v91;
  int v92;
  uint64_t v93;
  double v94;
  _QWORD *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::locale::__imp *v101;
  std::locale::__imp *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  std::locale::__imp *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t *v117;
  std::locale::__imp *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  size_t v134;
  double *v135;
  double *v136;
  unint64_t v137;
  double *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  double v142;
  double v143;
  double v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  double v149;
  double v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  double v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  double v159;
  void *v160;
  void *v161;
  unsigned int v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  double v166;
  void *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  double v174;
  uint64_t v175;
  uint64_t v176;
  int *v177;
  uint64_t v178;
  file_logger *v179;
  file_logger *started;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  const std::locale::facet *v184;
  _BOOL4 v185;
  BOOL v186;
  int v187;
  BOOL v188;
  int v189;
  uint64_t v190;
  double v191;
  _QWORD *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  std::locale::__imp *v198;
  std::locale::__imp *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  std::locale::__imp *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  double v213;
  uint64_t *v214;
  std::locale::__imp *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  double v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  size_t v231;
  double *v232;
  double *v233;
  unint64_t v234;
  double *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  double v239;
  double v240;
  double v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t v245;
  double v246;
  double v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  double v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  double v256;
  void *v257;
  void *v258;
  unsigned int v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  double v263;
  void *v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  double v271;
  _BOOL4 v272;
  BOOL v273;
  int v274;
  BOOL v275;
  int v276;
  uint64_t v277;
  double v278;
  _QWORD *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  std::locale::__imp *v285;
  std::locale::__imp *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  std::locale::__imp *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  double v300;
  uint64_t *v301;
  std::locale::__imp *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  double v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  size_t v318;
  double *v319;
  double *v320;
  unint64_t v321;
  double *v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  double v326;
  double v327;
  double v328;
  uint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t v332;
  double v333;
  double v334;
  uint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  unint64_t v338;
  double v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t v342;
  double v343;
  void *v344;
  void *v345;
  unsigned int v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  double v350;
  void *v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  double v358;
  int v359;
  BOOL v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  uint64_t v369;
  _QWORD *v370;
  _QWORD *v371;
  size_t v372;
  int v373;
  int v374;
  int v375;
  int v376;
  BOOL v377;
  char v378;
  uint64_t v379;
  _QWORD *v380;
  _QWORD *v381;
  size_t v382;
  int v383;
  int v384;
  int v385;
  int v386;
  char v387;
  uint64_t v388;
  _QWORD *v389;
  _QWORD *v390;
  size_t v391;
  int v392;
  int v393;
  int v394;
  int v395;
  char v396;
  uint64_t v397;
  _QWORD *v398;
  _QWORD *v399;
  size_t v400;
  int v401;
  int v402;
  int v403;
  int v404;
  char v405;
  _QWORD *exception;
  void *__p;
  char *v408;
  char v409;
  uint64_t v410;
  std::locale v411;
  std::locale::__imp *v412;
  char v413;
  unsigned int v414;
  uint64_t v415;
  int v416;
  char v417;
  double v418;
  int v419;
  unsigned __int8 v420;
  uint64_t v421;

  v421 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(turi::neural_net::compute_context *))(*(_QWORD *)a2 + 16))(a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "batch_size");
  turi::style_transfer::style_transfer::read_state<turi::flexible_type>(this, (const void **)&__p, (uint64_t)&v418);
  switch(byte_254FF5444)
  {
    case 0:
      v3 = 0;
      switch(v420)
      {
        case 0u:
          v4 = *(_QWORD *)&v418 == turi::FLEX_UNDEFINED;
          goto LABEL_57;
        case 1u:
          v57 = v418;
          v58 = turi::FLEX_UNDEFINED;
          goto LABEL_499;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_65;
        case 6u:
          v90 = v419;
          v91 = turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)&v418 << 8) >> 8;
          goto LABEL_489;
        default:
          goto LABEL_636;
      }
    case 1:
      v3 = 0;
      switch(v420)
      {
        case 0u:
          v57 = *(double *)&turi::FLEX_UNDEFINED;
          v58 = *(_QWORD *)&v418;
LABEL_499:
          v4 = v57 == (double)v58;
          goto LABEL_57;
        case 1u:
          v3 = v418 == *(double *)&turi::FLEX_UNDEFINED;
          goto LABEL_65;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_65;
        case 6u:
          v361 = *(double *)&turi::FLEX_UNDEFINED;
          v362 = (double)v419 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v418 << 8) >> 8);
          goto LABEL_502;
        default:
          goto LABEL_636;
      }
    case 2:
      v3 = 0;
      if (v420 - 3 < 7 || v420 < 2u)
        goto LABEL_65;
      if (v420 != 2)
        goto LABEL_636;
      if (*(char *)(*(_QWORD *)&v418 + 31) < 0)
        v47 = *(_QWORD *)(*(_QWORD *)&v418 + 16);
      else
        v47 = *(unsigned __int8 *)(*(_QWORD *)&v418 + 31);
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
        v369 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
      else
        v369 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v47 != v369)
        goto LABEL_64;
      v370 = (_QWORD *)(*(_QWORD *)&v418 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v418 + 31) & 0x80) != 0)
        v370 = (_QWORD *)*v370;
      v371 = (_QWORD *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v371 = (_QWORD *)*v371;
      if ((*(_BYTE *)(*(_QWORD *)&v418 + 31) & 0x80) != 0)
      {
        v4 = memcmp(v370, v371, v47) == 0;
LABEL_57:
        v3 = v4;
      }
      else
      {
        if (!v47)
          goto LABEL_566;
        v372 = v47 - 1;
        do
        {
          v374 = *(unsigned __int8 *)v370;
          v370 = (_QWORD *)((char *)v370 + 1);
          v373 = v374;
          v376 = *(unsigned __int8 *)v371;
          v371 = (_QWORD *)((char *)v371 + 1);
          v375 = v376;
          v377 = v372-- != 0;
          v378 = v377;
          v3 = v373 == v375;
        }
        while (v373 == v375 && (v378 & 1) != 0);
      }
      goto LABEL_65;
    case 3:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 3)
        goto LABEL_64;
      v48 = *(double **)(*(_QWORD *)&v418 + 8);
      v49 = *(double **)(*(_QWORD *)&v418 + 16);
      v50 = v49 - v48;
      v51 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v50 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v51) >> 3)
        goto LABEL_64;
      if (v49 == v48)
        goto LABEL_566;
      if (v50 <= 1)
        v52 = 1;
      else
        v52 = v49 - v48;
      if (*v48 != *v51)
        goto LABEL_64;
      v53 = 1;
      do
      {
        v54 = v53;
        if (v52 == v53)
          break;
        v55 = v48[v53];
        v56 = v51[v53++];
      }
      while (v55 == v56);
      v3 = v54 >= v50;
      goto LABEL_65;
    case 4:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 4)
        goto LABEL_64;
      v5 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v411, (uint64_t *)(*(_QWORD *)&v418 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_494;
    case 5:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 5)
        goto LABEL_64;
      v5 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v411, (uint64_t **)(*(_QWORD *)&v418 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_494;
    case 6:
      v3 = 0;
      switch(v420)
      {
        case 0u:
          v90 = dword_254FF5440;
          v91 = *(_QWORD *)&v418 == turi::FLEX_UNDEFINED << 8 >> 8;
LABEL_489:
          v4 = v91 && v90 == 0;
          goto LABEL_57;
        case 1u:
          v362 = v418;
          v361 = (double)dword_254FF5440 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8);
LABEL_502:
          v3 = vabdd_f64(v362, v361) < 0.0000005;
          goto LABEL_65;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_65;
        case 6u:
          v4 = ((turi::FLEX_UNDEFINED ^ *(_QWORD *)&v418) & 0xFFFFFFFFFFFFFFLL) == 0 && v419 == dword_254FF5440;
          goto LABEL_57;
        default:
          goto LABEL_636;
      }
    case 7:
      if (v420 >= 0xAu)
        goto LABEL_636;
      v4 = v420 == 7;
      goto LABEL_57;
    case 8:
      v3 = 0;
      if (v420 < 8u || v420 == 9)
        goto LABEL_65;
      if (v420 != 8)
        goto LABEL_636;
      v5 = turi::image_type::operator==(*(_QWORD *)&v418 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_494:
      v3 = v5;
      goto LABEL_65;
    case 9:
      if (v420 < 9u)
        goto LABEL_64;
      if (v420 != 9)
      {
LABEL_636:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
      }
      v6 = turi::FLEX_UNDEFINED;
      v7 = v418;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)&v418)
        goto LABEL_566;
      v8 = (_QWORD *)(*(_QWORD *)&v418 + 8);
      if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v418 + 8, turi::FLEX_UNDEFINED + 8))
      {
LABEL_64:
        v3 = 0;
        goto LABEL_65;
      }
      v10 = *(char **)(*(_QWORD *)&v7 + 24);
      v9 = *(char **)(*(_QWORD *)&v7 + 32);
      v11 = v9 - v10;
      if (v9 == v10)
        goto LABEL_566;
      if (!*v8)
        goto LABEL_566;
      v12 = 1;
      do
      {
        v13 = *(_QWORD *)v10;
        v10 += 8;
        v12 *= v13;
      }
      while (v10 != v9);
      if (!v12)
      {
LABEL_566:
        v3 = 1;
        goto LABEL_65;
      }
      v410 = 0;
      std::vector<unsigned long>::vector(&v411, v11 >> 3, &v410);
      locale = v411.__locale_;
      v15 = v412;
      v16 = **(_QWORD **)(v6 + 8);
      v17 = v412 - v411.__locale_;
      v18 = (v412 - v411.__locale_) >> 3;
      v19 = v18 - 1;
      if (v18 <= 1)
        v20 = 1;
      else
        v20 = (v412 - v411.__locale_) >> 3;
      break;
    default:
      goto LABEL_636;
  }
  while (1)
  {
    if (v15 == locale)
    {
      v28 = 0;
      v29 = *(double *)(**(_QWORD **)(*(_QWORD *)&v7 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v7 + 72));
    }
    else
    {
      v21 = 0;
      v22 = *(uint64_t **)(*(_QWORD *)&v7 + 48);
      v23 = locale;
      v24 = v20;
      do
      {
        v26 = *(_QWORD *)v23;
        v23 = (std::locale::__imp *)((char *)v23 + 8);
        v25 = v26;
        v27 = *v22++;
        v21 += v27 * v25;
        --v24;
      }
      while (v24);
      v28 = 0;
      v29 = *(double *)(**(_QWORD **)(*(_QWORD *)&v7 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v7 + 72) + v21));
      v30 = *(uint64_t **)(v6 + 48);
      v31 = locale;
      v32 = v20;
      do
      {
        v34 = *(_QWORD *)v31;
        v31 = (std::locale::__imp *)((char *)v31 + 8);
        v33 = v34;
        v35 = *v30++;
        v28 += v35 * v33;
        --v32;
      }
      while (v32);
    }
    v36 = *(double *)(v16 + 8 * (*(_QWORD *)(v6 + 72) + v28));
    v3 = v29 == v36;
    if (v29 != v36)
    {
LABEL_36:
      if (!locale)
        goto LABEL_65;
      goto LABEL_629;
    }
    v37 = v18;
    v38 = v18 - 1;
    if (v17 >= 1)
      break;
LABEL_34:
    if ((v38 & 0x8000000000000000) != 0 || !v37)
      goto LABEL_36;
  }
  v39 = *(_QWORD *)(*(_QWORD *)&v7 + 24);
  v40 = *((_QWORD *)locale + v19) + 1;
  *((_QWORD *)locale + v19) = v40;
  if (v40 < *(_QWORD *)(v39 + 8 * v19))
  {
    v37 = 1;
    v38 = v18 - 1;
    goto LABEL_34;
  }
  v41 = v39 - 16;
  v42 = v18;
  v43 = (unint64_t *)((char *)locale + (v17 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    v44 = v42 - 1;
    v43[1] = 0;
    if ((uint64_t)(v42 - 1) <= 0)
      break;
    v45 = *v43 + 1;
    *v43-- = v45;
    v46 = *(_QWORD *)(v41 + 8 * v42--);
    if (v45 < v46)
    {
      v38 = v44 - 1;
      v37 = 1;
      goto LABEL_34;
    }
  }
  v3 = 1;
LABEL_629:
  v412 = locale;
  operator delete(locale);
LABEL_65:
  switch(v420)
  {
    case 2u:
      v59 = *(unint64_t **)&v418;
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
      {
        v62 = v418;
        if (v418 != 0.0)
        {
          if (*(char *)(*(_QWORD *)&v418 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v418 + 8));
          v63 = v62;
          v64 = 0x1012C404EF22A49;
          goto LABEL_106;
        }
      }
      break;
    case 3u:
      v76 = *(unint64_t **)&v418;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        v79 = v418;
        if (v418 != 0.0)
        {
          v80 = *(void **)(*(_QWORD *)&v418 + 8);
          if (v80)
          {
            *(_QWORD *)(*(_QWORD *)&v418 + 16) = v80;
            operator delete(v80);
          }
          v63 = v79;
          v64 = 0x1080C409938AC02;
          goto LABEL_106;
        }
      }
      break;
    case 4u:
      v65 = *(unint64_t **)&v418;
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
      {
        v68 = v418;
        if (v418 != 0.0)
        {
          v411.__locale_ = (std::locale::__imp *)(*(_QWORD *)&v418 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
          goto LABEL_99;
        }
      }
      break;
    case 5u:
      v81 = *(unint64_t **)&v418;
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (!v83)
      {
        v68 = v418;
        if (v418 != 0.0)
        {
          v411.__locale_ = (std::locale::__imp *)(*(_QWORD *)&v418 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
LABEL_99:
          v63 = v68;
          v64 = 0x1020C405E66F15BLL;
          goto LABEL_106;
        }
      }
      break;
    case 8u:
      v84 = *(unint64_t **)&v418;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = v418;
        if (v418 != 0.0)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v418 + 16));
          v63 = v87;
          v75 = -235920773;
          goto LABEL_105;
        }
      }
      break;
    case 9u:
      v69 = *(unint64_t **)&v418;
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        v72 = v418;
        if (v418 != 0.0)
        {
          v73 = *(void **)(*(_QWORD *)&v418 + 48);
          if (v73)
          {
            *(_QWORD *)(*(_QWORD *)&v418 + 56) = v73;
            operator delete(v73);
          }
          v74 = *(void **)(*(_QWORD *)&v72 + 24);
          if (v74)
          {
            *(_QWORD *)(*(_QWORD *)&v72 + 32) = v74;
            operator delete(v74);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v72 + 8);
          v63 = v72;
          v75 = 2071181815;
LABEL_105:
          v64 = v75 | 0x1030C4000000000;
LABEL_106:
          MEMORY[0x219A19A08](*(_QWORD *)&v63, v64);
        }
      }
      break;
    default:
      break;
  }
  v418 = 0.0;
  v419 = 0;
  v420 = 0;
  if (v409 < 0)
  {
    operator delete(__p);
    if (v3)
      goto LABEL_111;
  }
  else
  {
    if (!v3)
      goto LABEL_113;
LABEL_111:
    std::string::basic_string[abi:ne180100]<0>(&v411, "batch_size");
    v415 = 1;
    v416 = 0;
    v417 = 0;
    v414 = 0;
    std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&__p, (const void **)&v411.__locale_, 1);
    turi::ml_model_base::add_or_update_state((uint64_t)this, &__p);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, v408);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v414);
    if (v413 < 0)
      operator delete(v411.__locale_);
  }
LABEL_113:
  std::string::basic_string[abi:ne180100]<0>(&__p, "max_iterations");
  turi::style_transfer::style_transfer::read_state<turi::flexible_type>(this, (const void **)&__p, (uint64_t)&v418);
  switch(byte_254FF5444)
  {
    case 0:
      v88 = 0;
      switch(v420)
      {
        case 0u:
          v89 = *(_QWORD *)&v418 == turi::FLEX_UNDEFINED;
          goto LABEL_175;
        case 1u:
          v144 = v418;
          v145 = turi::FLEX_UNDEFINED;
          goto LABEL_514;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_183;
        case 6u:
          v187 = v419;
          v188 = turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)&v418 << 8) >> 8;
          goto LABEL_504;
        default:
          goto LABEL_636;
      }
    case 1:
      v88 = 0;
      switch(v420)
      {
        case 0u:
          v144 = *(double *)&turi::FLEX_UNDEFINED;
          v145 = *(_QWORD *)&v418;
LABEL_514:
          v89 = v144 == (double)v145;
          goto LABEL_175;
        case 1u:
          v88 = v418 == *(double *)&turi::FLEX_UNDEFINED;
          goto LABEL_183;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_183;
        case 6u:
          v363 = *(double *)&turi::FLEX_UNDEFINED;
          v364 = (double)v419 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v418 << 8) >> 8);
          goto LABEL_517;
        default:
          goto LABEL_636;
      }
    case 2:
      v88 = 0;
      if (v420 - 3 < 7 || v420 < 2u)
        goto LABEL_183;
      if (v420 != 2)
        goto LABEL_636;
      if (*(char *)(*(_QWORD *)&v418 + 31) < 0)
        v134 = *(_QWORD *)(*(_QWORD *)&v418 + 16);
      else
        v134 = *(unsigned __int8 *)(*(_QWORD *)&v418 + 31);
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
        v379 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
      else
        v379 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v134 != v379)
        goto LABEL_182;
      v380 = (_QWORD *)(*(_QWORD *)&v418 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v418 + 31) & 0x80) != 0)
        v380 = (_QWORD *)*v380;
      v381 = (_QWORD *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v381 = (_QWORD *)*v381;
      if ((*(_BYTE *)(*(_QWORD *)&v418 + 31) & 0x80) != 0)
      {
        v89 = memcmp(v380, v381, v134) == 0;
LABEL_175:
        v88 = v89;
      }
      else
      {
        if (!v134)
          goto LABEL_585;
        v382 = v134 - 1;
        do
        {
          v384 = *(unsigned __int8 *)v380;
          v380 = (_QWORD *)((char *)v380 + 1);
          v383 = v384;
          v386 = *(unsigned __int8 *)v381;
          v381 = (_QWORD *)((char *)v381 + 1);
          v385 = v386;
          v377 = v382-- != 0;
          v387 = v377;
          v88 = v383 == v385;
        }
        while (v383 == v385 && (v387 & 1) != 0);
      }
      goto LABEL_183;
    case 3:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 3)
        goto LABEL_182;
      v135 = *(double **)(*(_QWORD *)&v418 + 8);
      v136 = *(double **)(*(_QWORD *)&v418 + 16);
      v137 = v136 - v135;
      v138 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v137 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v138) >> 3)
        goto LABEL_182;
      if (v136 == v135)
        goto LABEL_585;
      if (v137 <= 1)
        v139 = 1;
      else
        v139 = v136 - v135;
      if (*v135 != *v138)
        goto LABEL_182;
      v140 = 1;
      do
      {
        v141 = v140;
        if (v139 == v140)
          break;
        v142 = v135[v140];
        v143 = v138[v140++];
      }
      while (v142 == v143);
      v88 = v141 >= v137;
      goto LABEL_183;
    case 4:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 4)
        goto LABEL_182;
      v92 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v411, (uint64_t *)(*(_QWORD *)&v418 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_509;
    case 5:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 5)
        goto LABEL_182;
      v92 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v411, (uint64_t **)(*(_QWORD *)&v418 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_509;
    case 6:
      v88 = 0;
      switch(v420)
      {
        case 0u:
          v187 = dword_254FF5440;
          v188 = *(_QWORD *)&v418 == turi::FLEX_UNDEFINED << 8 >> 8;
LABEL_504:
          v89 = v188 && v187 == 0;
          goto LABEL_175;
        case 1u:
          v364 = v418;
          v363 = (double)dword_254FF5440 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8);
LABEL_517:
          v88 = vabdd_f64(v364, v363) < 0.0000005;
          goto LABEL_183;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_183;
        case 6u:
          v89 = ((turi::FLEX_UNDEFINED ^ *(_QWORD *)&v418) & 0xFFFFFFFFFFFFFFLL) == 0 && v419 == dword_254FF5440;
          goto LABEL_175;
        default:
          goto LABEL_636;
      }
    case 7:
      if (v420 >= 0xAu)
        goto LABEL_636;
      v89 = v420 == 7;
      goto LABEL_175;
    case 8:
      v88 = 0;
      if (v420 < 8u || v420 == 9)
        goto LABEL_183;
      if (v420 != 8)
        goto LABEL_636;
      v92 = turi::image_type::operator==(*(_QWORD *)&v418 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_509:
      v88 = v92;
      goto LABEL_183;
    case 9:
      if (v420 < 9u)
        goto LABEL_182;
      if (v420 != 9)
        goto LABEL_636;
      v93 = turi::FLEX_UNDEFINED;
      v94 = v418;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)&v418)
        goto LABEL_585;
      v95 = (_QWORD *)(*(_QWORD *)&v418 + 8);
      if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v418 + 8, turi::FLEX_UNDEFINED + 8))
      {
LABEL_182:
        v88 = 0;
        goto LABEL_183;
      }
      v97 = *(char **)(*(_QWORD *)&v94 + 24);
      v96 = *(char **)(*(_QWORD *)&v94 + 32);
      v98 = v96 - v97;
      if (v96 == v97)
        goto LABEL_585;
      if (!*v95)
        goto LABEL_585;
      v99 = 1;
      do
      {
        v100 = *(_QWORD *)v97;
        v97 += 8;
        v99 *= v100;
      }
      while (v97 != v96);
      if (!v99)
      {
LABEL_585:
        v88 = 1;
        goto LABEL_183;
      }
      v410 = 0;
      std::vector<unsigned long>::vector(&v411, v98 >> 3, &v410);
      v101 = v411.__locale_;
      v102 = v412;
      v103 = **(_QWORD **)(v93 + 8);
      v104 = v412 - v411.__locale_;
      v105 = (v412 - v411.__locale_) >> 3;
      v106 = v105 - 1;
      if (v105 <= 1)
        v107 = 1;
      else
        v107 = (v412 - v411.__locale_) >> 3;
      break;
    default:
      goto LABEL_636;
  }
  while (2)
  {
    if (v102 == v101)
    {
      v115 = 0;
      v116 = *(double *)(**(_QWORD **)(*(_QWORD *)&v94 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v94 + 72));
    }
    else
    {
      v108 = 0;
      v109 = *(uint64_t **)(*(_QWORD *)&v94 + 48);
      v110 = v101;
      v111 = v107;
      do
      {
        v113 = *(_QWORD *)v110;
        v110 = (std::locale::__imp *)((char *)v110 + 8);
        v112 = v113;
        v114 = *v109++;
        v108 += v114 * v112;
        --v111;
      }
      while (v111);
      v115 = 0;
      v116 = *(double *)(**(_QWORD **)(*(_QWORD *)&v94 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v94 + 72) + v108));
      v117 = *(uint64_t **)(v93 + 48);
      v118 = v101;
      v119 = v107;
      do
      {
        v121 = *(_QWORD *)v118;
        v118 = (std::locale::__imp *)((char *)v118 + 8);
        v120 = v121;
        v122 = *v117++;
        v115 += v122 * v120;
        --v119;
      }
      while (v119);
    }
    v123 = *(double *)(v103 + 8 * (*(_QWORD *)(v93 + 72) + v115));
    v88 = v116 == v123;
    if (v116 != v123)
    {
LABEL_154:
      if (!v101)
        goto LABEL_183;
      goto LABEL_631;
    }
    v124 = v105;
    v125 = v105 - 1;
    if (v104 < 1)
    {
LABEL_152:
      if ((v125 & 0x8000000000000000) != 0 || !v124)
        goto LABEL_154;
      continue;
    }
    break;
  }
  v126 = *(_QWORD *)(*(_QWORD *)&v94 + 24);
  v127 = *((_QWORD *)v101 + v106) + 1;
  *((_QWORD *)v101 + v106) = v127;
  if (v127 < *(_QWORD *)(v126 + 8 * v106))
  {
    v124 = 1;
    v125 = v105 - 1;
    goto LABEL_152;
  }
  v128 = v126 - 16;
  v129 = v105;
  v130 = (unint64_t *)((char *)v101 + (v104 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    v131 = v129 - 1;
    v130[1] = 0;
    if ((uint64_t)(v129 - 1) <= 0)
      break;
    v132 = *v130 + 1;
    *v130-- = v132;
    v133 = *(_QWORD *)(v128 + 8 * v129--);
    if (v132 < v133)
    {
      v125 = v131 - 1;
      v124 = 1;
      goto LABEL_152;
    }
  }
  v88 = 1;
LABEL_631:
  v412 = v101;
  operator delete(v101);
LABEL_183:
  switch(v420)
  {
    case 2u:
      v146 = *(unint64_t **)&v418;
      do
      {
        v147 = __ldaxr(v146);
        v148 = v147 - 1;
      }
      while (__stlxr(v148, v146));
      if (!v148)
      {
        v149 = v418;
        if (v418 != 0.0)
        {
          if (*(char *)(*(_QWORD *)&v418 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v418 + 8));
          v150 = v149;
          v151 = 0x1012C404EF22A49;
          goto LABEL_224;
        }
      }
      break;
    case 3u:
      v163 = *(unint64_t **)&v418;
      do
      {
        v164 = __ldaxr(v163);
        v165 = v164 - 1;
      }
      while (__stlxr(v165, v163));
      if (!v165)
      {
        v166 = v418;
        if (v418 != 0.0)
        {
          v167 = *(void **)(*(_QWORD *)&v418 + 8);
          if (v167)
          {
            *(_QWORD *)(*(_QWORD *)&v418 + 16) = v167;
            operator delete(v167);
          }
          v150 = v166;
          v151 = 0x1080C409938AC02;
          goto LABEL_224;
        }
      }
      break;
    case 4u:
      v152 = *(unint64_t **)&v418;
      do
      {
        v153 = __ldaxr(v152);
        v154 = v153 - 1;
      }
      while (__stlxr(v154, v152));
      if (!v154)
      {
        v155 = v418;
        if (v418 != 0.0)
        {
          v411.__locale_ = (std::locale::__imp *)(*(_QWORD *)&v418 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
          goto LABEL_217;
        }
      }
      break;
    case 5u:
      v168 = *(unint64_t **)&v418;
      do
      {
        v169 = __ldaxr(v168);
        v170 = v169 - 1;
      }
      while (__stlxr(v170, v168));
      if (!v170)
      {
        v155 = v418;
        if (v418 != 0.0)
        {
          v411.__locale_ = (std::locale::__imp *)(*(_QWORD *)&v418 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
LABEL_217:
          v150 = v155;
          v151 = 0x1020C405E66F15BLL;
          goto LABEL_224;
        }
      }
      break;
    case 8u:
      v171 = *(unint64_t **)&v418;
      do
      {
        v172 = __ldaxr(v171);
        v173 = v172 - 1;
      }
      while (__stlxr(v173, v171));
      if (!v173)
      {
        v174 = v418;
        if (v418 != 0.0)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v418 + 16));
          v150 = v174;
          v162 = -235920773;
          goto LABEL_223;
        }
      }
      break;
    case 9u:
      v156 = *(unint64_t **)&v418;
      do
      {
        v157 = __ldaxr(v156);
        v158 = v157 - 1;
      }
      while (__stlxr(v158, v156));
      if (!v158)
      {
        v159 = v418;
        if (v418 != 0.0)
        {
          v160 = *(void **)(*(_QWORD *)&v418 + 48);
          if (v160)
          {
            *(_QWORD *)(*(_QWORD *)&v418 + 56) = v160;
            operator delete(v160);
          }
          v161 = *(void **)(*(_QWORD *)&v159 + 24);
          if (v161)
          {
            *(_QWORD *)(*(_QWORD *)&v159 + 32) = v161;
            operator delete(v161);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v159 + 8);
          v150 = v159;
          v162 = 2071181815;
LABEL_223:
          v151 = v162 | 0x1030C4000000000;
LABEL_224:
          MEMORY[0x219A19A08](*(_QWORD *)&v150, v151);
        }
      }
      break;
    default:
      break;
  }
  v418 = 0.0;
  v419 = 0;
  v420 = 0;
  if (v409 < 0)
  {
    operator delete(__p);
    if (v88)
      goto LABEL_229;
  }
  else
  {
    if (!v88)
      goto LABEL_243;
LABEL_229:
    std::string::basic_string[abi:ne180100]<0>(&v411, "num_styles");
    v175 = turi::style_transfer::style_transfer::read_state<long long>(this, (const void **)&v411.__locale_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "batch_size");
    v176 = turi::style_transfer::style_transfer::read_state<long long>(this, (const void **)&__p);
    if (v409 < 0)
      operator delete(__p);
    if (v413 < 0)
      operator delete(v411.__locale_);
    v177 = (int *)global_logger();
    v178 = (uint64_t)(float)((float)((float)v175 * 10000.0) / (float)v176);
    if (v177[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v177))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v179 = (file_logger *)global_logger();
      started = file_logger::start_stream(v179, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/style_transfer/style_transfer.cpp", "infer_derived_options", 440, 1);
      v181 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v181 && *((_BYTE *)v181 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181 + 2, (uint64_t)"Setting max_iterations to be ", 29);
      v182 = file_logger::operator<<<long long>((uint64_t)started);
      v183 = pthread_getspecific(*(_QWORD *)(v182 + 592));
      if (v183)
      {
        if (*((_BYTE *)v183 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v183 + *(_QWORD *)(v183[2] - 24) + 16));
          v184 = std::locale::use_facet(&v411, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v184->__vftable[2].~facet_0)(v184, 10);
          std::locale::~locale(&v411);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v182);
          if (*(_DWORD *)(v182 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v411, "max_iterations");
    v415 = v178;
    v416 = 0;
    v417 = 0;
    v414 = 0;
    std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&__p, (const void **)&v411.__locale_, 1);
    turi::ml_model_base::add_or_update_state((uint64_t)this, &__p);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, v408);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v414);
    if (v413 < 0)
      operator delete(v411.__locale_);
  }
LABEL_243:
  std::string::basic_string[abi:ne180100]<0>(&__p, "image_width");
  turi::style_transfer::style_transfer::read_state<turi::flexible_type>(this, (const void **)&__p, (uint64_t)&v418);
  switch(byte_254FF5444)
  {
    case 0:
      v185 = 0;
      switch(v420)
      {
        case 0u:
          v186 = *(_QWORD *)&v418 == turi::FLEX_UNDEFINED;
          goto LABEL_305;
        case 1u:
          v241 = v418;
          v242 = turi::FLEX_UNDEFINED;
          goto LABEL_529;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_313;
        case 6u:
          v274 = v419;
          v275 = turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)&v418 << 8) >> 8;
          goto LABEL_519;
        default:
          goto LABEL_636;
      }
    case 1:
      v185 = 0;
      switch(v420)
      {
        case 0u:
          v241 = *(double *)&turi::FLEX_UNDEFINED;
          v242 = *(_QWORD *)&v418;
LABEL_529:
          v186 = v241 == (double)v242;
          goto LABEL_305;
        case 1u:
          v185 = v418 == *(double *)&turi::FLEX_UNDEFINED;
          goto LABEL_313;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_313;
        case 6u:
          v365 = *(double *)&turi::FLEX_UNDEFINED;
          v366 = (double)v419 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v418 << 8) >> 8);
          goto LABEL_532;
        default:
          goto LABEL_636;
      }
    case 2:
      v185 = 0;
      if (v420 - 3 < 7 || v420 < 2u)
        goto LABEL_313;
      if (v420 != 2)
        goto LABEL_636;
      if (*(char *)(*(_QWORD *)&v418 + 31) < 0)
        v231 = *(_QWORD *)(*(_QWORD *)&v418 + 16);
      else
        v231 = *(unsigned __int8 *)(*(_QWORD *)&v418 + 31);
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
        v388 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
      else
        v388 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v231 != v388)
        goto LABEL_312;
      v389 = (_QWORD *)(*(_QWORD *)&v418 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v418 + 31) & 0x80) != 0)
        v389 = (_QWORD *)*v389;
      v390 = (_QWORD *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v390 = (_QWORD *)*v390;
      if ((*(_BYTE *)(*(_QWORD *)&v418 + 31) & 0x80) != 0)
      {
        v186 = memcmp(v389, v390, v231) == 0;
LABEL_305:
        v185 = v186;
      }
      else
      {
        if (!v231)
          goto LABEL_604;
        v391 = v231 - 1;
        do
        {
          v393 = *(unsigned __int8 *)v389;
          v389 = (_QWORD *)((char *)v389 + 1);
          v392 = v393;
          v395 = *(unsigned __int8 *)v390;
          v390 = (_QWORD *)((char *)v390 + 1);
          v394 = v395;
          v377 = v391-- != 0;
          v396 = v377;
          v185 = v392 == v394;
        }
        while (v392 == v394 && (v396 & 1) != 0);
      }
      goto LABEL_313;
    case 3:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 3)
        goto LABEL_312;
      v232 = *(double **)(*(_QWORD *)&v418 + 8);
      v233 = *(double **)(*(_QWORD *)&v418 + 16);
      v234 = v233 - v232;
      v235 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v234 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v235) >> 3)
        goto LABEL_312;
      if (v233 == v232)
        goto LABEL_604;
      if (v234 <= 1)
        v236 = 1;
      else
        v236 = v233 - v232;
      if (*v232 != *v235)
        goto LABEL_312;
      v237 = 1;
      do
      {
        v238 = v237;
        if (v236 == v237)
          break;
        v239 = v232[v237];
        v240 = v235[v237++];
      }
      while (v239 == v240);
      v185 = v238 >= v234;
      goto LABEL_313;
    case 4:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 4)
        goto LABEL_312;
      v189 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v411, (uint64_t *)(*(_QWORD *)&v418 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_524;
    case 5:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 5)
        goto LABEL_312;
      v189 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v411, (uint64_t **)(*(_QWORD *)&v418 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_524;
    case 6:
      v185 = 0;
      switch(v420)
      {
        case 0u:
          v274 = dword_254FF5440;
          v275 = *(_QWORD *)&v418 == turi::FLEX_UNDEFINED << 8 >> 8;
LABEL_519:
          v186 = v275 && v274 == 0;
          goto LABEL_305;
        case 1u:
          v366 = v418;
          v365 = (double)dword_254FF5440 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8);
LABEL_532:
          v185 = vabdd_f64(v366, v365) < 0.0000005;
          goto LABEL_313;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_313;
        case 6u:
          v186 = ((turi::FLEX_UNDEFINED ^ *(_QWORD *)&v418) & 0xFFFFFFFFFFFFFFLL) == 0 && v419 == dword_254FF5440;
          goto LABEL_305;
        default:
          goto LABEL_636;
      }
    case 7:
      if (v420 >= 0xAu)
        goto LABEL_636;
      v186 = v420 == 7;
      goto LABEL_305;
    case 8:
      v185 = 0;
      if (v420 < 8u || v420 == 9)
        goto LABEL_313;
      if (v420 != 8)
        goto LABEL_636;
      v189 = turi::image_type::operator==(*(_QWORD *)&v418 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_524:
      v185 = v189;
      goto LABEL_313;
    case 9:
      if (v420 < 9u)
        goto LABEL_312;
      if (v420 != 9)
        goto LABEL_636;
      v190 = turi::FLEX_UNDEFINED;
      v191 = v418;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)&v418)
        goto LABEL_604;
      v192 = (_QWORD *)(*(_QWORD *)&v418 + 8);
      if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v418 + 8, turi::FLEX_UNDEFINED + 8))
      {
LABEL_312:
        v185 = 0;
        goto LABEL_313;
      }
      v194 = *(char **)(*(_QWORD *)&v191 + 24);
      v193 = *(char **)(*(_QWORD *)&v191 + 32);
      v195 = v193 - v194;
      if (v193 == v194)
        goto LABEL_604;
      if (!*v192)
        goto LABEL_604;
      v196 = 1;
      do
      {
        v197 = *(_QWORD *)v194;
        v194 += 8;
        v196 *= v197;
      }
      while (v194 != v193);
      if (!v196)
      {
LABEL_604:
        v185 = 1;
        goto LABEL_313;
      }
      v410 = 0;
      std::vector<unsigned long>::vector(&v411, v195 >> 3, &v410);
      v198 = v411.__locale_;
      v199 = v412;
      v200 = **(_QWORD **)(v190 + 8);
      v201 = v412 - v411.__locale_;
      v202 = (v412 - v411.__locale_) >> 3;
      v203 = v202 - 1;
      if (v202 <= 1)
        v204 = 1;
      else
        v204 = (v412 - v411.__locale_) >> 3;
      break;
    default:
      goto LABEL_636;
  }
  while (2)
  {
    if (v199 == v198)
    {
      v212 = 0;
      v213 = *(double *)(**(_QWORD **)(*(_QWORD *)&v191 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v191 + 72));
    }
    else
    {
      v205 = 0;
      v206 = *(uint64_t **)(*(_QWORD *)&v191 + 48);
      v207 = v198;
      v208 = v204;
      do
      {
        v210 = *(_QWORD *)v207;
        v207 = (std::locale::__imp *)((char *)v207 + 8);
        v209 = v210;
        v211 = *v206++;
        v205 += v211 * v209;
        --v208;
      }
      while (v208);
      v212 = 0;
      v213 = *(double *)(**(_QWORD **)(*(_QWORD *)&v191 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v191 + 72) + v205));
      v214 = *(uint64_t **)(v190 + 48);
      v215 = v198;
      v216 = v204;
      do
      {
        v218 = *(_QWORD *)v215;
        v215 = (std::locale::__imp *)((char *)v215 + 8);
        v217 = v218;
        v219 = *v214++;
        v212 += v219 * v217;
        --v216;
      }
      while (v216);
    }
    v220 = *(double *)(v200 + 8 * (*(_QWORD *)(v190 + 72) + v212));
    v185 = v213 == v220;
    if (v213 != v220)
    {
LABEL_284:
      if (!v198)
        goto LABEL_313;
      goto LABEL_633;
    }
    v221 = v202;
    v222 = v202 - 1;
    if (v201 < 1)
    {
LABEL_282:
      if ((v222 & 0x8000000000000000) != 0 || !v221)
        goto LABEL_284;
      continue;
    }
    break;
  }
  v223 = *(_QWORD *)(*(_QWORD *)&v191 + 24);
  v224 = *((_QWORD *)v198 + v203) + 1;
  *((_QWORD *)v198 + v203) = v224;
  if (v224 < *(_QWORD *)(v223 + 8 * v203))
  {
    v221 = 1;
    v222 = v202 - 1;
    goto LABEL_282;
  }
  v225 = v223 - 16;
  v226 = v202;
  v227 = (unint64_t *)((char *)v198 + (v201 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    v228 = v226 - 1;
    v227[1] = 0;
    if ((uint64_t)(v226 - 1) <= 0)
      break;
    v229 = *v227 + 1;
    *v227-- = v229;
    v230 = *(_QWORD *)(v225 + 8 * v226--);
    if (v229 < v230)
    {
      v222 = v228 - 1;
      v221 = 1;
      goto LABEL_282;
    }
  }
  v185 = 1;
LABEL_633:
  v412 = v198;
  operator delete(v198);
LABEL_313:
  switch(v420)
  {
    case 2u:
      v243 = *(unint64_t **)&v418;
      do
      {
        v244 = __ldaxr(v243);
        v245 = v244 - 1;
      }
      while (__stlxr(v245, v243));
      if (!v245)
      {
        v246 = v418;
        if (v418 != 0.0)
        {
          if (*(char *)(*(_QWORD *)&v418 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v418 + 8));
          v247 = v246;
          v248 = 0x1012C404EF22A49;
          goto LABEL_354;
        }
      }
      break;
    case 3u:
      v260 = *(unint64_t **)&v418;
      do
      {
        v261 = __ldaxr(v260);
        v262 = v261 - 1;
      }
      while (__stlxr(v262, v260));
      if (!v262)
      {
        v263 = v418;
        if (v418 != 0.0)
        {
          v264 = *(void **)(*(_QWORD *)&v418 + 8);
          if (v264)
          {
            *(_QWORD *)(*(_QWORD *)&v418 + 16) = v264;
            operator delete(v264);
          }
          v247 = v263;
          v248 = 0x1080C409938AC02;
          goto LABEL_354;
        }
      }
      break;
    case 4u:
      v249 = *(unint64_t **)&v418;
      do
      {
        v250 = __ldaxr(v249);
        v251 = v250 - 1;
      }
      while (__stlxr(v251, v249));
      if (!v251)
      {
        v252 = v418;
        if (v418 != 0.0)
        {
          v411.__locale_ = (std::locale::__imp *)(*(_QWORD *)&v418 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
          goto LABEL_347;
        }
      }
      break;
    case 5u:
      v265 = *(unint64_t **)&v418;
      do
      {
        v266 = __ldaxr(v265);
        v267 = v266 - 1;
      }
      while (__stlxr(v267, v265));
      if (!v267)
      {
        v252 = v418;
        if (v418 != 0.0)
        {
          v411.__locale_ = (std::locale::__imp *)(*(_QWORD *)&v418 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
LABEL_347:
          v247 = v252;
          v248 = 0x1020C405E66F15BLL;
          goto LABEL_354;
        }
      }
      break;
    case 8u:
      v268 = *(unint64_t **)&v418;
      do
      {
        v269 = __ldaxr(v268);
        v270 = v269 - 1;
      }
      while (__stlxr(v270, v268));
      if (!v270)
      {
        v271 = v418;
        if (v418 != 0.0)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v418 + 16));
          v247 = v271;
          v259 = -235920773;
          goto LABEL_353;
        }
      }
      break;
    case 9u:
      v253 = *(unint64_t **)&v418;
      do
      {
        v254 = __ldaxr(v253);
        v255 = v254 - 1;
      }
      while (__stlxr(v255, v253));
      if (!v255)
      {
        v256 = v418;
        if (v418 != 0.0)
        {
          v257 = *(void **)(*(_QWORD *)&v418 + 48);
          if (v257)
          {
            *(_QWORD *)(*(_QWORD *)&v418 + 56) = v257;
            operator delete(v257);
          }
          v258 = *(void **)(*(_QWORD *)&v256 + 24);
          if (v258)
          {
            *(_QWORD *)(*(_QWORD *)&v256 + 32) = v258;
            operator delete(v258);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v256 + 8);
          v247 = v256;
          v259 = 2071181815;
LABEL_353:
          v248 = v259 | 0x1030C4000000000;
LABEL_354:
          MEMORY[0x219A19A08](*(_QWORD *)&v247, v248);
        }
      }
      break;
    default:
      break;
  }
  v418 = 0.0;
  v419 = 0;
  v420 = 0;
  if (v409 < 0)
  {
    operator delete(__p);
    if (v185)
      goto LABEL_359;
  }
  else
  {
    if (!v185)
      goto LABEL_361;
LABEL_359:
    std::string::basic_string[abi:ne180100]<0>(&v411, "image_width");
    v415 = 256;
    v416 = 0;
    v417 = 0;
    v414 = 0;
    std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&__p, (const void **)&v411.__locale_, 1);
    turi::ml_model_base::add_or_update_state((uint64_t)this, &__p);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, v408);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v414);
    if (v413 < 0)
      operator delete(v411.__locale_);
  }
LABEL_361:
  std::string::basic_string[abi:ne180100]<0>(&__p, "image_height");
  turi::style_transfer::style_transfer::read_state<turi::flexible_type>(this, (const void **)&__p, (uint64_t)&v418);
  switch(byte_254FF5444)
  {
    case 0:
      v272 = 0;
      switch(v420)
      {
        case 0u:
          v273 = *(_QWORD *)&v418 == turi::FLEX_UNDEFINED;
          goto LABEL_423;
        case 1u:
          v328 = v418;
          v329 = turi::FLEX_UNDEFINED;
          goto LABEL_544;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_431;
        case 6u:
          v359 = v419;
          v360 = turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)&v418 << 8) >> 8;
          goto LABEL_534;
        default:
          goto LABEL_636;
      }
    case 1:
      v272 = 0;
      switch(v420)
      {
        case 0u:
          v328 = *(double *)&turi::FLEX_UNDEFINED;
          v329 = *(_QWORD *)&v418;
LABEL_544:
          v273 = v328 == (double)v329;
          goto LABEL_423;
        case 1u:
          v272 = v418 == *(double *)&turi::FLEX_UNDEFINED;
          goto LABEL_431;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_431;
        case 6u:
          v367 = *(double *)&turi::FLEX_UNDEFINED;
          v368 = (double)v419 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v418 << 8) >> 8);
          goto LABEL_547;
        default:
          goto LABEL_636;
      }
    case 2:
      v272 = 0;
      if (v420 - 3 < 7 || v420 < 2u)
        goto LABEL_431;
      if (v420 != 2)
        goto LABEL_636;
      if (*(char *)(*(_QWORD *)&v418 + 31) < 0)
        v318 = *(_QWORD *)(*(_QWORD *)&v418 + 16);
      else
        v318 = *(unsigned __int8 *)(*(_QWORD *)&v418 + 31);
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
        v397 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
      else
        v397 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v318 != v397)
        goto LABEL_430;
      v398 = (_QWORD *)(*(_QWORD *)&v418 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v418 + 31) & 0x80) != 0)
        v398 = (_QWORD *)*v398;
      v399 = (_QWORD *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v399 = (_QWORD *)*v399;
      if ((*(_BYTE *)(*(_QWORD *)&v418 + 31) & 0x80) != 0)
      {
        v273 = memcmp(v398, v399, v318) == 0;
LABEL_423:
        v272 = v273;
      }
      else
      {
        if (!v318)
          goto LABEL_623;
        v400 = v318 - 1;
        do
        {
          v402 = *(unsigned __int8 *)v398;
          v398 = (_QWORD *)((char *)v398 + 1);
          v401 = v402;
          v404 = *(unsigned __int8 *)v399;
          v399 = (_QWORD *)((char *)v399 + 1);
          v403 = v404;
          v377 = v400-- != 0;
          v405 = v377;
          v272 = v401 == v403;
        }
        while (v401 == v403 && (v405 & 1) != 0);
      }
      goto LABEL_431;
    case 3:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 3)
        goto LABEL_430;
      v319 = *(double **)(*(_QWORD *)&v418 + 8);
      v320 = *(double **)(*(_QWORD *)&v418 + 16);
      v321 = v320 - v319;
      v322 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v321 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v322) >> 3)
        goto LABEL_430;
      if (v320 == v319)
        goto LABEL_623;
      if (v321 <= 1)
        v323 = 1;
      else
        v323 = v320 - v319;
      if (*v319 != *v322)
        goto LABEL_430;
      v324 = 1;
      do
      {
        v325 = v324;
        if (v323 == v324)
          break;
        v326 = v319[v324];
        v327 = v322[v324++];
      }
      while (v326 == v327);
      v272 = v325 >= v321;
      goto LABEL_431;
    case 4:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 4)
        goto LABEL_430;
      v276 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v411, (uint64_t *)(*(_QWORD *)&v418 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_539;
    case 5:
      if (v420 > 9u)
        goto LABEL_636;
      if (v420 != 5)
        goto LABEL_430;
      v276 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v411, (uint64_t **)(*(_QWORD *)&v418 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_539;
    case 6:
      v272 = 0;
      switch(v420)
      {
        case 0u:
          v359 = dword_254FF5440;
          v360 = *(_QWORD *)&v418 == turi::FLEX_UNDEFINED << 8 >> 8;
LABEL_534:
          v273 = v360 && v359 == 0;
          goto LABEL_423;
        case 1u:
          v368 = v418;
          v367 = (double)dword_254FF5440 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8);
LABEL_547:
          v272 = vabdd_f64(v368, v367) < 0.0000005;
          goto LABEL_431;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_431;
        case 6u:
          v273 = ((turi::FLEX_UNDEFINED ^ *(_QWORD *)&v418) & 0xFFFFFFFFFFFFFFLL) == 0 && v419 == dword_254FF5440;
          goto LABEL_423;
        default:
          goto LABEL_636;
      }
    case 7:
      if (v420 >= 0xAu)
        goto LABEL_636;
      v273 = v420 == 7;
      goto LABEL_423;
    case 8:
      v272 = 0;
      if (v420 < 8u || v420 == 9)
        goto LABEL_431;
      if (v420 != 8)
        goto LABEL_636;
      v276 = turi::image_type::operator==(*(_QWORD *)&v418 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_539:
      v272 = v276;
      goto LABEL_431;
    case 9:
      if (v420 < 9u)
        goto LABEL_430;
      if (v420 != 9)
        goto LABEL_636;
      v277 = turi::FLEX_UNDEFINED;
      v278 = v418;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)&v418)
        goto LABEL_623;
      v279 = (_QWORD *)(*(_QWORD *)&v418 + 8);
      if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v418 + 8, turi::FLEX_UNDEFINED + 8))
      {
LABEL_430:
        v272 = 0;
        goto LABEL_431;
      }
      v281 = *(char **)(*(_QWORD *)&v278 + 24);
      v280 = *(char **)(*(_QWORD *)&v278 + 32);
      v282 = v280 - v281;
      if (v280 == v281)
        goto LABEL_623;
      if (!*v279)
        goto LABEL_623;
      v283 = 1;
      do
      {
        v284 = *(_QWORD *)v281;
        v281 += 8;
        v283 *= v284;
      }
      while (v281 != v280);
      if (!v283)
      {
LABEL_623:
        v272 = 1;
        goto LABEL_431;
      }
      v410 = 0;
      std::vector<unsigned long>::vector(&v411, v282 >> 3, &v410);
      v285 = v411.__locale_;
      v286 = v412;
      v287 = **(_QWORD **)(v277 + 8);
      v288 = v412 - v411.__locale_;
      v289 = (v412 - v411.__locale_) >> 3;
      v290 = v289 - 1;
      if (v289 <= 1)
        v291 = 1;
      else
        v291 = (v412 - v411.__locale_) >> 3;
      break;
    default:
      goto LABEL_636;
  }
  while (2)
  {
    if (v286 == v285)
    {
      v299 = 0;
      v300 = *(double *)(**(_QWORD **)(*(_QWORD *)&v278 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v278 + 72));
    }
    else
    {
      v292 = 0;
      v293 = *(uint64_t **)(*(_QWORD *)&v278 + 48);
      v294 = v285;
      v295 = v291;
      do
      {
        v297 = *(_QWORD *)v294;
        v294 = (std::locale::__imp *)((char *)v294 + 8);
        v296 = v297;
        v298 = *v293++;
        v292 += v298 * v296;
        --v295;
      }
      while (v295);
      v299 = 0;
      v300 = *(double *)(**(_QWORD **)(*(_QWORD *)&v278 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v278 + 72) + v292));
      v301 = *(uint64_t **)(v277 + 48);
      v302 = v285;
      v303 = v291;
      do
      {
        v305 = *(_QWORD *)v302;
        v302 = (std::locale::__imp *)((char *)v302 + 8);
        v304 = v305;
        v306 = *v301++;
        v299 += v306 * v304;
        --v303;
      }
      while (v303);
    }
    v307 = *(double *)(v287 + 8 * (*(_QWORD *)(v277 + 72) + v299));
    v272 = v300 == v307;
    if (v300 != v307)
    {
LABEL_402:
      if (!v285)
        goto LABEL_431;
      goto LABEL_635;
    }
    v308 = v289;
    v309 = v289 - 1;
    if (v288 < 1)
    {
LABEL_400:
      if ((v309 & 0x8000000000000000) != 0 || !v308)
        goto LABEL_402;
      continue;
    }
    break;
  }
  v310 = *(_QWORD *)(*(_QWORD *)&v278 + 24);
  v311 = *((_QWORD *)v285 + v290) + 1;
  *((_QWORD *)v285 + v290) = v311;
  if (v311 < *(_QWORD *)(v310 + 8 * v290))
  {
    v308 = 1;
    v309 = v289 - 1;
    goto LABEL_400;
  }
  v312 = v310 - 16;
  v313 = v289;
  v314 = (unint64_t *)((char *)v285 + (v288 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    v315 = v313 - 1;
    v314[1] = 0;
    if ((uint64_t)(v313 - 1) <= 0)
      break;
    v316 = *v314 + 1;
    *v314-- = v316;
    v317 = *(_QWORD *)(v312 + 8 * v313--);
    if (v316 < v317)
    {
      v309 = v315 - 1;
      v308 = 1;
      goto LABEL_400;
    }
  }
  v272 = 1;
LABEL_635:
  v412 = v285;
  operator delete(v285);
LABEL_431:
  switch(v420)
  {
    case 2u:
      v330 = *(unint64_t **)&v418;
      do
      {
        v331 = __ldaxr(v330);
        v332 = v331 - 1;
      }
      while (__stlxr(v332, v330));
      if (!v332)
      {
        v333 = v418;
        if (v418 != 0.0)
        {
          if (*(char *)(*(_QWORD *)&v418 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v418 + 8));
          v334 = v333;
          v335 = 0x1012C404EF22A49;
          goto LABEL_472;
        }
      }
      break;
    case 3u:
      v347 = *(unint64_t **)&v418;
      do
      {
        v348 = __ldaxr(v347);
        v349 = v348 - 1;
      }
      while (__stlxr(v349, v347));
      if (!v349)
      {
        v350 = v418;
        if (v418 != 0.0)
        {
          v351 = *(void **)(*(_QWORD *)&v418 + 8);
          if (v351)
          {
            *(_QWORD *)(*(_QWORD *)&v418 + 16) = v351;
            operator delete(v351);
          }
          v334 = v350;
          v335 = 0x1080C409938AC02;
          goto LABEL_472;
        }
      }
      break;
    case 4u:
      v336 = *(unint64_t **)&v418;
      do
      {
        v337 = __ldaxr(v336);
        v338 = v337 - 1;
      }
      while (__stlxr(v338, v336));
      if (!v338)
      {
        v339 = v418;
        if (v418 != 0.0)
        {
          v411.__locale_ = (std::locale::__imp *)(*(_QWORD *)&v418 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
          goto LABEL_465;
        }
      }
      break;
    case 5u:
      v352 = *(unint64_t **)&v418;
      do
      {
        v353 = __ldaxr(v352);
        v354 = v353 - 1;
      }
      while (__stlxr(v354, v352));
      if (!v354)
      {
        v339 = v418;
        if (v418 != 0.0)
        {
          v411.__locale_ = (std::locale::__imp *)(*(_QWORD *)&v418 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
LABEL_465:
          v334 = v339;
          v335 = 0x1020C405E66F15BLL;
          goto LABEL_472;
        }
      }
      break;
    case 8u:
      v355 = *(unint64_t **)&v418;
      do
      {
        v356 = __ldaxr(v355);
        v357 = v356 - 1;
      }
      while (__stlxr(v357, v355));
      if (!v357)
      {
        v358 = v418;
        if (v418 != 0.0)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v418 + 16));
          v334 = v358;
          v346 = -235920773;
          goto LABEL_471;
        }
      }
      break;
    case 9u:
      v340 = *(unint64_t **)&v418;
      do
      {
        v341 = __ldaxr(v340);
        v342 = v341 - 1;
      }
      while (__stlxr(v342, v340));
      if (!v342)
      {
        v343 = v418;
        if (v418 != 0.0)
        {
          v344 = *(void **)(*(_QWORD *)&v418 + 48);
          if (v344)
          {
            *(_QWORD *)(*(_QWORD *)&v418 + 56) = v344;
            operator delete(v344);
          }
          v345 = *(void **)(*(_QWORD *)&v343 + 24);
          if (v345)
          {
            *(_QWORD *)(*(_QWORD *)&v343 + 32) = v345;
            operator delete(v345);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v343 + 8);
          v334 = v343;
          v346 = 2071181815;
LABEL_471:
          v335 = v346 | 0x1030C4000000000;
LABEL_472:
          MEMORY[0x219A19A08](*(_QWORD *)&v334, v335);
        }
      }
      break;
    default:
      break;
  }
  v418 = 0.0;
  v419 = 0;
  v420 = 0;
  if (v409 < 0)
  {
    operator delete(__p);
    if (!v272)
      goto LABEL_479;
LABEL_477:
    std::string::basic_string[abi:ne180100]<0>(&v411, "image_height");
    v415 = 256;
    v416 = 0;
    v417 = 0;
    v414 = 0;
    std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&__p, (const void **)&v411.__locale_, 1);
    turi::ml_model_base::add_or_update_state((uint64_t)this, &__p);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, v408);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v414);
    if (v413 < 0)
      operator delete(v411.__locale_);
    goto LABEL_479;
  }
  if (v272)
    goto LABEL_477;
LABEL_479:
  std::string::basic_string[abi:ne180100]<0>(&v411, "training_iterations");
  v415 = 0;
  v416 = 0;
  v417 = 0;
  v414 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&__p, (const void **)&v411.__locale_, 1);
  turi::ml_model_base::add_or_update_state((uint64_t)this, &__p);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, v408);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v414);
  if (v413 < 0)
    operator delete(v411.__locale_);
}

